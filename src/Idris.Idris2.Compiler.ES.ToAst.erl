-module('Idris.Idris2.Compiler.ES.ToAst').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7231-5389--in--un--go'/5,
  'un--tag'/2,
  'un--stmt'/3,
  'un--liftMinimal'/3,
  'un--liftFun'/3,
  'un--liftArgsVect'/3,
  'un--liftArgs'/3,
  'un--liftArg'/3,
  'un--lift'/5,
  'un--lambda'/3,
  'un--integerArith'/1,
  'un--getInteger'/1,
  'un--constAlt'/4,
  'un--conAlt'/5,
  'un--assign'/2
]).
'nested--7231-5389--in--un--go'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CompileExpr.NmLam', E4, E5, E6} -> (fun (V5, V6, V7) -> ('nested--7231-5389--in--un--go'(V0, V1, V2, [V6 | V3], V7)) end(E4, E5, E6)); _ -> fun (V8) -> begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> fun (V10) -> ('Idris.Idris2.Compiler.ES.State':'un--registerLocal'(V2, V9, V10)) end end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V3)), [], V8))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Ast.ELam', V13, V16}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V2, {'Idris.Compiler.ES.Ast.Returns'}, V4)), V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--tag'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Right', V0} end, fun () -> fun (V2) -> {'Idris.Prelude.Types.Left', V2} end end, V1)).
'un--stmt'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.NmLocal', E0, E1} -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EMinimal', V8}))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V9) -> ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterLocal'(V0, V4, V9)) end, V5)) end end(E0, E1)); {'Idris.Core.CompileExpr.NmRef', E4, E5} -> (fun (V10, V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EMinimal', {'Idris.Compiler.ES.Ast.MVar', V15}}))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V16) -> ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V0, V11, V16)) end, V12)) end end(E4, E5)); {'Idris.Core.CompileExpr.NmLam', E8, E9, E10} -> (fun (V17, V18, V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('un--assign'(V1, V23))} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--lambda'(V0, V18, V19)), V20)) end end(E8, E9, E10)); {'Idris.Core.CompileExpr.NmLet', E13, E14, E15, E16} -> (fun (V24, V25, V26, V27) -> fun (V28) -> begin (V29 = ('Idris.Idris2.Compiler.ES.State':'un--nextLocal'(V0, V28))), case V29 of {'Idris.Prelude.Types.Left', E17} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V31) -> begin (V32 = (('un--stmt'(V0, {'Idris.Compiler.ES.Ast.ErrorWithout', V31}, V26))(V28))), case V32 of {'Idris.Prelude.Types.Left', E19} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Compiler.ES.State':'un--addLocal'(V0, V25, {'Idris.Compiler.ES.Ast.MVar', V31}, V28))), case V35 of {'Idris.Prelude.Types.Left', E21} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V37) -> begin (V38 = (('un--stmt'(V0, V1, V27))(V28))), case V38 of {'Idris.Prelude.Types.Left', E23} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'([('Idris.Idris2.Compiler.ES.Ast':'un--declare'(V31, V34)) | []], V40))} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14, E15, E16)); {'Idris.Core.CompileExpr.NmApp', E25, E26, E27} -> (fun (V41, V42, V43) -> fun (V44) -> begin (V45 = ('un--liftFun'(V0, V42, V44))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> case V47 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V48, V49) -> begin (V50 = ('un--liftArgs'(V0, V43, V44))), case V50 of {'Idris.Prelude.Types.Left', E32} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V52) -> case V52 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V53, V54) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V48, V53)), ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EApp', V49, V54}))))} end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25, E26, E27)); {'Idris.Core.CompileExpr.NmCon', E36, E37, E38, E39, E40} -> (fun (V55, V56, V57, V58, V59) -> fun (V60) -> begin (V61 = ('un--liftArgs'(V0, V59, V60))), case V61 of {'Idris.Prelude.Types.Left', E41} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V63) -> case V63 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V64, V65) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V64, ('un--assign'(V1, {'Idris.Compiler.ES.Ast.ECon', ('un--tag'(V56, V58)), V57, V65}))))} end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36, E37, E38, E39, E40)); {'Idris.Core.CompileExpr.NmOp', E45, E46, E47, E48} -> (fun (V66, V67, V68, V69) -> begin (V70 = {'Idris.Core.CompileExpr.NmOp', V66, V67, V68, V69}), fun (V71) -> case ('un--integerArith'(V70)) of {'Idris.Prelude.Types.Just', E49} -> (fun (V72) -> {'Idris.Prelude.Types.Right', ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EPrimVal', {'Idris.Core.TT.BI', V72}}))} end(E49)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V73 = ('un--liftArgsVect'(V0, V69, V71))), case V73 of {'Idris.Prelude.Types.Left', E50} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V75) -> case V75 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V76, V77) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V76, ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EOp', V68, V77}))))} end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46, E47, E48)); {'Idris.Core.CompileExpr.NmExtPrim', E54, E55, E56} -> (fun (V78, V79, V80) -> fun (V81) -> begin (V82 = ('un--liftArgs'(V0, V80, V81))), case V82 of {'Idris.Prelude.Types.Left', E57} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V84) -> case V84 of {'Idris.Builtin.MkPair', E59, E60} -> (fun (V85, V86) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V85, ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EExtPrim', V79, V86}))))} end(E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E54, E55, E56)); {'Idris.Core.CompileExpr.NmForce', E61, E62, E63} -> (fun (V87, V88, V89) -> fun (V90) -> begin (V91 = ('un--liftFun'(V0, V89, V90))), case V91 of {'Idris.Prelude.Types.Left', E64} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V93) -> case V93 of {'Idris.Builtin.MkPair', E66, E67} -> (fun (V94, V95) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V94, ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EApp', V95, []}))))} end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61, E62, E63)); {'Idris.Core.CompileExpr.NmDelay', E68, E69, E70} -> (fun (V96, V97, V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V100) -> case V100 of {'Idris.Prelude.Types.Left', E71} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V102) -> {'Idris.Prelude.Types.Right', ('un--assign'(V1, {'Idris.Compiler.ES.Ast.ELam', [], V102}))} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, {'Idris.Compiler.ES.Ast.Returns'}, V98)), V99)) end end(E68, E69, E70)); {'Idris.Core.CompileExpr.NmConCase', E73, E74, E75, E76} -> (fun (V103, V104, V105, V106) -> case V105 of [E88 | E89] -> (fun (V107, V108) -> fun (V109) -> case V108 of [] -> case V106 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V110 = ('un--liftMinimal'(V0, V104, V109))), case V110 of {'Idris.Prelude.Types.Left', E112} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V112) -> case V112 of {'Idris.Builtin.MkPair', E114, E115} -> (fun (V113, V114) -> begin (V122 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V115) -> case V115 of {'Idris.Prelude.Types.Left', E116} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V117) -> {'Idris.Prelude.Types.Right', case V117 of {'Idris.Compiler.ES.Ast.MkEConAlt', E118, E119, E120} -> (fun (V118, V119, V120) -> V120 end(E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V121) -> ('un--conAlt'(V0, V1, V114, V107, V121)) end, V109))), case V122 of {'Idris.Prelude.Types.Left', E121} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V124) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V113, V124))} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114, E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V125 = ('un--liftMinimal'(V0, V104, V109))), case V125 of {'Idris.Prelude.Types.Left', E101} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V127) -> case V127 of {'Idris.Builtin.MkPair', E103, E104} -> (fun (V128, V129) -> begin (V132 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V130) -> fun (V131) -> ('un--conAlt'(V0, V1, V129, V130, V131)) end end, V105, [], V109))), case V132 of {'Idris.Prelude.Types.Left', E105} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V134) -> begin (V139 = case V106 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E107} -> (fun (V135) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V136) -> case V136 of {'Idris.Prelude.Types.Left', E108} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V138) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V138}} end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V135)), V109)) end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V139 of {'Idris.Prelude.Types.Left', E110} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V141) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V128, {'Idris.Compiler.ES.Ast.ConSwitch', V1, V129, V134, V141}))} end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V142 = ('un--liftMinimal'(V0, V104, V109))), case V142 of {'Idris.Prelude.Types.Left', E90} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V144) -> case V144 of {'Idris.Builtin.MkPair', E92, E93} -> (fun (V145, V146) -> begin (V149 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V147) -> fun (V148) -> ('un--conAlt'(V0, V1, V146, V147, V148)) end end, V105, [], V109))), case V149 of {'Idris.Prelude.Types.Left', E94} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V151) -> begin (V156 = case V106 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E96} -> (fun (V152) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V153) -> case V153 of {'Idris.Prelude.Types.Left', E97} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V155) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V155}} end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V152)), V109)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V156 of {'Idris.Prelude.Types.Left', E99} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V158) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V145, {'Idris.Compiler.ES.Ast.ConSwitch', V1, V146, V151, V158}))} end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E88, E89)); [] -> case V106 of {'Idris.Prelude.Types.Just', E134} -> (fun (V159) -> ('un--stmt'(V0, V1, V159)) end(E134)); _ -> fun (V160) -> begin (V161 = ('un--liftMinimal'(V0, V104, V160))), case V161 of {'Idris.Prelude.Types.Left', E123} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V163) -> case V163 of {'Idris.Builtin.MkPair', E125, E126} -> (fun (V164, V165) -> begin (V168 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V166) -> fun (V167) -> ('un--conAlt'(V0, V1, V165, V166, V167)) end end, V105, [], V160))), case V168 of {'Idris.Prelude.Types.Left', E127} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V170) -> begin (V175 = case V106 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E129} -> (fun (V171) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V172) -> case V172 of {'Idris.Prelude.Types.Left', E130} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V174) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V174}} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V171)), V160)) end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V175 of {'Idris.Prelude.Types.Left', E132} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V177) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V164, {'Idris.Compiler.ES.Ast.ConSwitch', V1, V165, V170, V177}))} end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V178) -> begin (V179 = ('un--liftMinimal'(V0, V104, V178))), case V179 of {'Idris.Prelude.Types.Left', E77} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V181) -> case V181 of {'Idris.Builtin.MkPair', E79, E80} -> (fun (V182, V183) -> begin (V186 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V184) -> fun (V185) -> ('un--conAlt'(V0, V1, V183, V184, V185)) end end, V105, [], V178))), case V186 of {'Idris.Prelude.Types.Left', E81} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V188) -> begin (V193 = case V106 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E83} -> (fun (V189) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V190) -> case V190 of {'Idris.Prelude.Types.Left', E84} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V192) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V192}} end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V189)), V178)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V193 of {'Idris.Prelude.Types.Left', E86} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V195) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V182, {'Idris.Compiler.ES.Ast.ConSwitch', V1, V183, V188, V195}))} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E73, E74, E75, E76)); {'Idris.Core.CompileExpr.NmConstCase', E135, E136, E137, E138} -> (fun (V196, V197, V198, V199) -> case V198 of [E150 | E151] -> (fun (V200, V201) -> fun (V202) -> case V201 of [] -> case V199 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V203) -> case V203 of {'Idris.Prelude.Types.Left', E174} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V205) -> {'Idris.Prelude.Types.Right', case V205 of {'Idris.Compiler.ES.Ast.MkEConstAlt', E176, E177} -> (fun (V206, V207) -> V207 end(E176, E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V208) -> ('un--constAlt'(V0, V1, V200, V208)) end, V202)) end()); _ -> begin (V209 = ('un--liftArg'(V0, V197, V202))), case V209 of {'Idris.Prelude.Types.Left', E163} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V211) -> case V211 of {'Idris.Builtin.MkPair', E165, E166} -> (fun (V212, V213) -> begin (V216 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V214) -> fun (V215) -> ('un--constAlt'(V0, V1, V214, V215)) end end, V198, [], V202))), case V216 of {'Idris.Prelude.Types.Left', E167} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V218) -> begin (V223 = case V199 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E169} -> (fun (V219) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V220) -> case V220 of {'Idris.Prelude.Types.Left', E170} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V222) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V222}} end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V219)), V202)) end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V223 of {'Idris.Prelude.Types.Left', E172} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V225) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V212, {'Idris.Compiler.ES.Ast.ConstSwitch', V1, V213, V218, V225}))} end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E165, E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V226 = ('un--liftArg'(V0, V197, V202))), case V226 of {'Idris.Prelude.Types.Left', E152} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V228) -> case V228 of {'Idris.Builtin.MkPair', E154, E155} -> (fun (V229, V230) -> begin (V233 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V231) -> fun (V232) -> ('un--constAlt'(V0, V1, V231, V232)) end end, V198, [], V202))), case V233 of {'Idris.Prelude.Types.Left', E156} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V235) -> begin (V240 = case V199 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E158} -> (fun (V236) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V237) -> case V237 of {'Idris.Prelude.Types.Left', E159} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E159)); {'Idris.Prelude.Types.Right', E160} -> (fun (V239) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V239}} end(E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V236)), V202)) end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V240 of {'Idris.Prelude.Types.Left', E161} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V242) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V229, {'Idris.Compiler.ES.Ast.ConstSwitch', V1, V230, V235, V242}))} end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E150, E151)); [] -> case V199 of {'Idris.Prelude.Types.Just', E189} -> (fun (V243) -> ('un--stmt'(V0, V1, V243)) end(E189)); _ -> fun (V244) -> begin (V245 = ('un--liftArg'(V0, V197, V244))), case V245 of {'Idris.Prelude.Types.Left', E178} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V247) -> case V247 of {'Idris.Builtin.MkPair', E180, E181} -> (fun (V248, V249) -> begin (V252 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V250) -> fun (V251) -> ('un--constAlt'(V0, V1, V250, V251)) end end, V198, [], V244))), case V252 of {'Idris.Prelude.Types.Left', E182} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V254) -> begin (V259 = case V199 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E184} -> (fun (V255) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V256) -> case V256 of {'Idris.Prelude.Types.Left', E185} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E185)); {'Idris.Prelude.Types.Right', E186} -> (fun (V258) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V258}} end(E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V255)), V244)) end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V259 of {'Idris.Prelude.Types.Left', E187} -> (fun (V260) -> {'Idris.Prelude.Types.Left', V260} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V261) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V248, {'Idris.Compiler.ES.Ast.ConstSwitch', V1, V249, V254, V261}))} end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V262) -> begin (V263 = ('un--liftArg'(V0, V197, V262))), case V263 of {'Idris.Prelude.Types.Left', E139} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V265) -> case V265 of {'Idris.Builtin.MkPair', E141, E142} -> (fun (V266, V267) -> begin (V270 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V268) -> fun (V269) -> ('un--constAlt'(V0, V1, V268, V269)) end end, V198, [], V262))), case V270 of {'Idris.Prelude.Types.Left', E143} -> (fun (V271) -> {'Idris.Prelude.Types.Left', V271} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V272) -> begin (V277 = case V199 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E145} -> (fun (V273) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V274) -> case V274 of {'Idris.Prelude.Types.Left', E146} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V276) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V276}} end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V273)), V262)) end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V277 of {'Idris.Prelude.Types.Left', E148} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V279) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Ast':'un--prepend'(V266, {'Idris.Compiler.ES.Ast.ConstSwitch', V1, V267, V272, V279}))} end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E135, E136, E137, E138)); {'Idris.Core.CompileExpr.NmPrimVal', E190, E191} -> (fun (V280, V281) -> fun (V282) -> {'Idris.Prelude.Types.Right', ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EPrimVal', V281}))} end end(E190, E191)); {'Idris.Core.CompileExpr.NmErased', E192} -> (fun (V283) -> fun (V284) -> {'Idris.Prelude.Types.Right', ('un--assign'(V1, {'Idris.Compiler.ES.Ast.EErased'}))} end end(E192)); {'Idris.Core.CompileExpr.NmCrash', E193, E194} -> (fun (V285, V286) -> fun (V287) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Ast.Error', V286}} end end(E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--liftMinimal'(V0, V1, V2) -> ('un--lift'(V0, V1, fun (V3) -> ('Idris.Idris2.Compiler.ES.Ast':'un--toMinimal'(V3)) end, fun (V4) -> {'Idris.Compiler.ES.Ast.MVar', V4} end, V2)).
'un--liftFun'(V0, V1, V2) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V15) -> begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end end, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> ('un--lift'(V0, V1, fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V23, V24)) end end end end, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V27, V28)) end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V33, V34)) end end end end}, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V37, V38)) end end end}, (V19(V20)))), V20)) end, fun (V39) -> {'Idris.Compiler.ES.Ast.EMinimal', {'Idris.Compiler.ES.Ast.MVar', V39}} end, V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--liftArgsVect'(V0, V1, V2) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V3) -> fun (V4) -> ('un--liftArg'(V0, V3, V4)) end end, V1, V2))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Data.Vect':'dn--un--foldlM_Foldable_(Vect $n)'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'(V31, V32, V33)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V34, V35)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V36) -> ('Idris.Idris2.Builtin':'un--fst'(V36)) end, V7)), ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V37) -> ('Idris.Idris2.Builtin':'un--snd'(V37)) end, V7))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--liftArgs'(V0, V1, V2) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V3) -> fun (V4) -> ('un--liftArg'(V0, V3, V4)) end end, V1, [], V2))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V34, V35)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V36) -> ('Idris.Idris2.Builtin':'un--fst'(V36)) end, V7)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V37) -> ('Idris.Idris2.Builtin':'un--snd'(V37)) end, V7))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--liftArg'(V0, V1, V2) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V15) -> begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end end, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> ('un--lift'(V0, V1, fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V23, V24)) end end end end, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V27, V28)) end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V33, V34)) end end end end}, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V37, V38)) end end end}, (V19(V20)))), V20)) end, fun (V39) -> {'Idris.Compiler.ES.Ast.EMinimal', {'Idris.Compiler.ES.Ast.MVar', V39}} end, V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lift'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Compiler.ES.State':'un--nextLocal'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = (('un--stmt'(V0, {'Idris.Compiler.ES.Ast.ErrorWithout', V7}, V1))(V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = {'Idris.Builtin.MkPair', [('Idris.Idris2.Compiler.ES.Ast':'un--declare'(V7, V10)) | []], (V3(V7))}), case V10 of {'Idris.Compiler.ES.Ast.Assign', E4, E5} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V11 end, fun () -> fun (V14) -> {'Idris.Builtin.MkPair', [], V14} end end, (V2(V13))))} end(E4, E5)); _ -> {'Idris.Prelude.Types.Right', V11} end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lambda'(V0, V1, V2) -> ('nested--7231-5389--in--un--go'(V2, V1, V0, [V1 | []], V2)).
'un--integerArith'(V0) -> case V0 of {'Idris.Core.CompileExpr.NmOp', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V1 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> begin (V5 = (V1 - 1)), case V5 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> begin (V6 = (V5 - 1)), case V6 of 0 -> case V3 of {'Idris.Core.TT.Add', E4} -> (fun (V7) -> case V7 of {'Idris.Core.TT.IntegerType'} -> (fun () -> case V4 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V8, V9) -> case V9 of {'Idris.Data.Vect.::', E7, E8} -> (fun (V10, V11) -> case V11 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(fun (V12) -> fun (V13) -> (V12 + V13) end end)), ('un--getInteger'(V8)))), ('un--getInteger'(V10)))) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.Mul', E9} -> (fun (V14) -> case V14 of {'Idris.Core.TT.IntegerType'} -> (fun () -> case V4 of {'Idris.Data.Vect.::', E10, E11} -> (fun (V15, V16) -> case V16 of {'Idris.Data.Vect.::', E12, E13} -> (fun (V17, V18) -> case V18 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(fun (V19) -> fun (V20) -> (V19 * V20) end end)), ('un--getInteger'(V15)))), ('un--getInteger'(V17)))) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> {'Idris.Prelude.Types.Nothing'} end end end end end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getInteger'(V0) -> case V0 of {'Idris.Core.CompileExpr.NmPrimVal', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Core.TT.BI', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--integerArith'(V0)) end end(E0, E1)); _ -> ('un--integerArith'(V0)) end.
'un--constAlt'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CompileExpr.MkNConstAlt', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Ast.MkEConstAlt', V4, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V5)), V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--conAlt'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V10 = (('Idris.Idris2.Compiler.ES.State':'un--projections'(V0, V2, V8))(V4))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Ast.MkEConAlt', ('un--tag'(V5, V7)), V6, V15}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'(V0, V1, V9)), V4)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--assign'(V0, V1) -> case V0 of {'Idris.Compiler.ES.Ast.Returns'} -> (fun () -> {'Idris.Compiler.ES.Ast.Return', V1} end()); {'Idris.Compiler.ES.Ast.ErrorWithout', E0} -> (fun (V2) -> {'Idris.Compiler.ES.Ast.Assign', V2, V1} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
