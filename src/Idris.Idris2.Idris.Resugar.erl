-module('Idris.Idris2.Idris.Resugar').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--10177-4666--in--un--needsBind'/9,
  'nested--8686-3179--in--un--needed'/3,
  'nested--10177-5101--in--un--mkIf'/8,
  'nested--10221-6093--in--un--mapPiInfo'/9,
  'nested--12392-6514--in--un--cleanNode'/4,
  'nested--12392-6511--in--un--cleanName'/3,
  'nested--12392-6512--in--un--cleanKindedName'/4,
  'nested--12392-6513--in--un--cleanBinderName'/4,
  'un--unbracketApp'/1,
  'un--unbracket'/1,
  'un--tyPrec'/0,
  'un--toPTypeDecl'/4,
  'un--toPTermApp'/5,
  'un--toPTerm'/4,
  'un--toPRef'/2,
  'un--toPRecord'/4,
  'un--toPFnOpt'/4,
  'un--toPFieldUpdate'/4,
  'un--toPField'/4,
  'un--toPDecl'/4,
  'un--toPData'/4,
  'un--toPClause'/4,
  'un--toCleanPTerm'/5,
  'un--sugarName'/1,
  'un--sugarAppM'/1,
  'un--sugarApp'/1,
  'un--startPrec'/0,
  'un--showImplicits'/2,
  'un--showFullEnv'/2,
  'un--resugarNoPatvars'/6,
  'un--resugar'/6,
  'un--pterm'/4,
  'un--mkOp'/2,
  'un--mkApp'/4,
  'un--fullNamespace'/2,
  'un--extractNat'/2,
  'un--cleanPTerm'/3,
  'un--bracket'/5,
  'un--argPrec'/0,
  'un--appPrec'/0,
  'un--addBracket'/2
]).
'nested--10177-4666--in--un--needsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Name.UN', E1} -> (fun (V10) -> case V10 of {'Idris.Core.Name.Basic', E2} -> (fun (V11) -> begin (V16 = ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V12) -> case V12 of {'Idris.Core.TT.MkKindedName', E3, E4, E5} -> (fun (V13, V14, V15) -> V15 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0))), begin (V17 = ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, [], [], V16))), begin (V18 = ('Idris.Idris2.TTImp.Utils':'un--findAllNames'([], V16))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V21, V22)) end end}, V9, V18)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V25, V26)) end end}, V11, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('Idris.Idris2.Builtin':'un--fst'(V27)) end, V17)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2)); _ -> 0 end end(E1)); _ -> 0 end end(E0)); _ -> 0 end.
'nested--8686-3179--in--un--needed'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V3, V4) -> 0 end(E0, E1)); {'Idris.Idris.Syntax.PRef', E2, E3} -> (fun (V5, V6) -> 0 end(E2, E3)); {'Idris.Idris.Syntax.PPair', E4, E5, E6} -> (fun (V7, V8, V9) -> 0 end(E4, E5, E6)); {'Idris.Idris.Syntax.PDPair', E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14) -> 0 end(E7, E8, E9, E10, E11)); {'Idris.Idris.Syntax.PUnit', E12} -> (fun (V15) -> 0 end(E12)); {'Idris.Idris.Syntax.PComprehension', E13, E14, E15} -> (fun (V16, V17, V18) -> 0 end(E13, E14, E15)); {'Idris.Idris.Syntax.PList', E16, E17, E18} -> (fun (V19, V20, V21) -> 0 end(E16, E17, E18)); {'Idris.Idris.Syntax.PSnocList', E19, E20, E21} -> (fun (V22, V23, V24) -> 0 end(E19, E20, E21)); {'Idris.Idris.Syntax.PRange', E22, E23, E24, E25} -> (fun (V25, V26, V27, V28) -> 0 end(E22, E23, E24, E25)); {'Idris.Idris.Syntax.PRangeStream', E26, E27, E28} -> (fun (V29, V30, V31) -> 0 end(E26, E27, E28)); {'Idris.Idris.Syntax.PPrimVal', E29, E30} -> (fun (V32, V33) -> 0 end(E29, E30)); {'Idris.Idris.Syntax.PIdiom', E31, E32} -> (fun (V34, V35) -> 0 end(E31, E32)); {'Idris.Idris.Syntax.PBang', E33, E34} -> (fun (V36, V37) -> 0 end(E33, E34)); _ -> 1 end.
'nested--10177-5101--in--un--mkIf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PCase', E0, E1, E2} -> (fun (V8, V9, V10) -> case V10 of [E3 | E4] -> (fun (V11, V12) -> case V11 of {'Idris.Idris.Syntax.MkPatClause', E5, E6, E7, E8} -> (fun (V13, V14, V15, V16) -> case V14 of {'Idris.Idris.Syntax.PRef', E9, E10} -> (fun (V17, V18) -> case V16 of [] -> case V12 of [E11 | E12] -> (fun (V19, V20) -> case V19 of {'Idris.Idris.Syntax.MkPatClause', E13, E14, E15, E16} -> (fun (V21, V22, V23, V24) -> case V22 of {'Idris.Idris.Syntax.PRef', E17, E18} -> (fun (V25, V26) -> case V24 of [] -> case V20 of [] -> begin (V27 = {'Idris.Idris.Syntax.PCase', V8, V9, [{'Idris.Idris.Syntax.MkPatClause', V13, {'Idris.Idris.Syntax.PRef', V17, V18}, V15, []} | [{'Idris.Idris.Syntax.MkPatClause', V21, {'Idris.Idris.Syntax.PRef', V25, V26}, V23, []} | []]]}), case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(case V18 of {'Idris.Core.TT.MkKindedName', E22, E23, E24} -> (fun (V28, V29, V30) -> V30 end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"True"/utf8>>}})) of 1 -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(case V26 of {'Idris.Core.TT.MkKindedName', E19, E20, E21} -> (fun (V31, V32, V33) -> V33 end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"False"/utf8>>}})); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Idris.Syntax.PIfThenElse', V8, V9, V15, V23}; 0 -> V27; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> V7 end; _ -> V7 end end(E17, E18)); _ -> V7 end end(E13, E14, E15, E16)); _ -> V7 end end(E11, E12)); _ -> V7 end; _ -> V7 end end(E9, E10)); _ -> V7 end end(E5, E6, E7, E8)); _ -> V7 end end(E3, E4)); _ -> V7 end end(E0, E1, E2)); _ -> V7 end.
'nested--10221-6093--in--un--mapPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V9) -> begin (V10 = (('un--toPTerm'(V6, V5, ('un--startPrec'()), V9))(V8))), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V12}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12392-6514--in--un--cleanNode'(V0, V1, V2, V3) -> case V2 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V4, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V9) -> ('nested--12392-6512--in--un--cleanKindedName'(V0, V1, V5, V9)) end, V3)) end(E0, E1)); {'Idris.Idris.Syntax.POp', E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V10, V11, V17, V13, V14}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> ('nested--12392-6512--in--un--cleanKindedName'(V0, V1, V12, V18)) end, V3)) end(E4, E5, E6, E7, E8)); {'Idris.Idris.Syntax.PPrefixOp', E11, E12, E13, E14} -> (fun (V19, V20, V21, V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V23) -> case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrefixOp', V19, V20, V25, V22}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V26) -> ('nested--12392-6512--in--un--cleanKindedName'(V0, V1, V21, V26)) end, V3)) end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PSectionL', E17, E18, E19, E20} -> (fun (V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V31) -> case V31 of {'Idris.Prelude.Types.Left', E21} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionL', V27, V28, V33, V30}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V34) -> ('nested--12392-6512--in--un--cleanKindedName'(V0, V1, V29, V34)) end, V3)) end(E17, E18, E19, E20)); {'Idris.Idris.Syntax.PSectionR', E23, E24, E25, E26} -> (fun (V35, V36, V37, V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E27} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionR', V35, V36, V37, V41}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('nested--12392-6512--in--un--cleanKindedName'(V0, V1, V38, V42)) end, V3)) end(E23, E24, E25, E26)); {'Idris.Idris.Syntax.PPi', E29, E30, E31, E32, E33, E34} -> (fun (V43, V44, V45, V46, V47, V48) -> case V46 of {'Idris.Prelude.Types.Just', E35} -> (fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V50) -> case V50 of {'Idris.Prelude.Types.Left', E36} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPi', V43, V44, V45, V52, V47, V48}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--12392-6513--in--un--cleanBinderName'(V0, V1, V45, V49)), V3)) end(E35)); _ -> {'Idris.Prelude.Types.Right', V2} end end(E29, E30, E31, E32, E33, E34)); _ -> {'Idris.Prelude.Types.Right', V2} end.
'nested--12392-6511--in--un--cleanName'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V3))}} end end(E2, E3)); {'Idris.Core.Name.PV', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end(E4, E5)); {'Idris.Core.Name.DN', E6, E7} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V9))}} end end(E6, E7)); {'Idris.Core.Name.NS', E8, E9} -> (fun (V12, V13) -> ('nested--12392-6511--in--un--cleanName'(V0, V1, V13)) end(E8, E9)); {'Idris.Core.Name.Nested', E10, E11} -> (fun (V14, V15) -> ('nested--12392-6511--in--un--cleanName'(V0, V1, V15)) end(E10, E11)); {'Idris.Core.Name.UN', E12} -> (fun (V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V16}} end end(E12)); _ -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V19) -> case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V21))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V18)) end end.
'nested--12392-6512--in--un--cleanKindedName'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.TT.MkKindedName', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkKindedName', V4, V5, V9}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--12392-6511--in--un--cleanName'(V0, V1, V6)), V3)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12392-6513--in--un--cleanBinderName'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V3 of {'Idris.Core.Name.UN', E4} -> (fun (V4) -> fun (V5) -> case V4 of {'Idris.Core.Name.Basic', E7} -> (fun (V6) -> case V6 of <<"__con"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E8} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V9}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--12392-6511--in--un--cleanName'(V0, V1, V3)), V5)) end end(E7)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V12}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--12392-6511--in--un--cleanName'(V0, V1, V3)), V5)) end end end(E4)); _ -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V16}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--12392-6511--in--un--cleanName'(V0, V1, V3)), V13)) end end end()); _ -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V18) -> case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V20}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--12392-6511--in--un--cleanName'(V0, V1, V3)), V17)) end end.
'un--unbracketApp'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Idris.Syntax.PApp', E2, E3, E4} -> (fun (V3, V4, V5) -> V2 end(E2, E3, E4)); _ -> V0 end end(E0, E1)); _ -> V0 end.
'un--unbracket'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> V0 end.
'un--tyPrec'() -> (1 + 0).
'un--toPTypeDecl'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> begin (V8 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V7))(V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPTy', V4, V5, V6, <<""/utf8>>, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPTermApp'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V5, V6, V7) -> begin (V8 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V7))(V4))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> ('un--toPTermApp'(V0, V1, V6, [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V10}} | V3], V4)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4)); {'Idris.TTImp.TTImp.INamedApp', E7, E8, E9, E10} -> (fun (V11, V12, V13, V14) -> begin (V15 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V4))), case V15 of {'Idris.Prelude.Types.Left', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V17) -> ('un--toPTermApp'(V0, V1, V12, [{'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V13}}, V17}} | V3], V4)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9, E10)); {'Idris.TTImp.TTImp.IVar', E13, E14} -> (fun (V18, V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E15} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V23) -> begin (V57 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(case V19 of {'Idris.Core.TT.MkKindedName', E17, E18, E19} -> (fun (V24, V25, V26) -> V26 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V23 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V27 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V57 of {'Idris.Prelude.Types.Left', E50} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V59) -> begin (V60 = {'Idris.TTImp.TTImp.IVar', V18, V19}), case V59 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V61 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V60))(V4))), case V61 of {'Idris.Prelude.Types.Left', E52} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V63) -> (('un--mkApp'(V0, V1, V63, V3))(V4)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E54} -> (fun (V64) -> begin (V65 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V60))(V4))), case V65 of {'Idris.Prelude.Types.Left', E55} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V67) -> begin (V68 = ('un--showFullEnv'(V0, V4))), case V68 of {'Idris.Prelude.Types.Left', E57} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V70) -> begin (V91 = case V70 of 1 -> V3; 0 -> ('Idris.Idris2.Data.List':'un--drop'(('Idris.Idris2.Prelude.Types.List':'un--length'(case V64 of {'Idris.Core.Context.Context.MkGlobalDef', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V79 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--mkApp'(V0, V1, V67, V91))(V4)) end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13, E14)); _ -> begin (V92 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V2))(V4))), case V92 of {'Idris.Prelude.Types.Left', E0} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V94) -> (('un--mkApp'(V0, V1, V94, V3))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--toPTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V13 = begin (V7 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case case V9 of {'Idris.Core.Options.MkPPOpts', E4, E5, E6} -> (fun (V10, V11, V12) -> V12 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V4, V5}}; 0 -> (('un--toPRef'(V4, V5))(V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"resugar.var"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Resugaring"/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_RawName'(case V5 of {'Idris.Core.TT.MkKindedName', E9, E10, E11} -> (fun (V16, V17, V18) -> V18 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [<<"to"/utf8>> | [('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V15)) | []]]]])) end, V6))), case V19 of {'Idris.Prelude.Types.Left', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Right', V15} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27) -> fun (V28) -> case V24 of {'Idris.Core.TT.Implicit'} -> (fun () -> begin (V29 = ('un--showImplicits'(V0, V28))), case V29 of {'Idris.Prelude.Types.Left', E26} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V31) -> case V31 of 1 -> begin (V32 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V26))(V28))), case V32 of {'Idris.Prelude.Types.Left', E28} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V34) -> begin (V35 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V27))(V28))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V22, V23, {'Idris.Core.TT.Implicit'}, V25, V34, V37}, V28)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> case ('nested--10177-4666--in--un--needsBind'(V27, V26, V25, V23, V22, V2, V1, V0, V25)) of 1 -> begin (V38 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V26))(V28))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> begin (V41 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V27))(V28))), case V41 of {'Idris.Prelude.Types.Left', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V43) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V22, V23, {'Idris.Core.TT.Implicit'}, V25, V40, V43}, V28)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> (('un--toPTerm'(V0, V1, V2, V27))(V28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V44 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V26))(V28))), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> begin (V47 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V27))(V28))), case V47 of {'Idris.Prelude.Types.Left', E22} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V49) -> begin (V51 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V50) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V50)) end, V24, V28))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V22, V23, V53, V25, V46, V49}, V28)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14, E15, E16, E17, E18, E19)); {'Idris.TTImp.TTImp.ILam', E36, E37, E38, E39, E40, E41} -> (fun (V54, V55, V56, V57, V58, V59) -> begin (V61 = case V57 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}} end()); {'Idris.Prelude.Types.Just', E42} -> (fun (V60) -> V60 end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V62) -> begin (V63 = ('un--showImplicits'(V0, V62))), case V63 of {'Idris.Prelude.Types.Left', E43} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V65) -> begin (V66 = case V65 of 1 -> (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V58))(V62)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V54}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V66 of {'Idris.Prelude.Types.Left', E45} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V68) -> begin (V69 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V59))(V62))), case V69 of {'Idris.Prelude.Types.Left', E47} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V71) -> begin (V73 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V72) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V72)) end, V56, V62))), case V73 of {'Idris.Prelude.Types.Left', E49} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V75) -> begin (V76 = {'Idris.Idris.Syntax.PRef', V54, {'Idris.Core.TT.MkKindedName', {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bound'}}, V61, V61}}), ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLam', V54, V55, V75, V76, V68, V71}, V62)) end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E36, E37, E38, E39, E40, E41)); {'Idris.TTImp.TTImp.ILet', E51, E52, E53, E54, E55, E56, E57} -> (fun (V77, V78, V79, V80, V81, V82, V83) -> fun (V84) -> begin (V85 = ('un--showImplicits'(V0, V84))), case V85 of {'Idris.Prelude.Types.Left', E58} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V87) -> begin (V88 = case V87 of 1 -> (('un--toPTerm'(V0, V1, ('un--startPrec'()), V81))(V84)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V77}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V88 of {'Idris.Prelude.Types.Left', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V90) -> begin (V91 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V82))(V84))), case V91 of {'Idris.Prelude.Types.Left', E62} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V93) -> begin (V94 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V84))), case V94 of {'Idris.Prelude.Types.Left', E64} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V96) -> begin (V97 = {'Idris.Idris.Syntax.PRef', V78, {'Idris.Core.TT.MkKindedName', {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bound'}}, V80, V80}}), ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V77, V79, V97, V90, V93, V96, []}, V84)) end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52, E53, E54, E55, E56, E57)); {'Idris.TTImp.TTImp.ICase', E66, E67, E68, E69} -> (fun (V98, V99, V100, V101) -> case V101 of [E74 | E75] -> (fun (V102, V103) -> fun (V104) -> case V102 of {'Idris.TTImp.TTImp.PatClause', E80, E81, E82} -> (fun (V105, V106, V107) -> case V103 of [] -> begin (V108 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V99))(V104))), case V108 of {'Idris.Prelude.Types.Left', E87} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V110) -> begin (V111 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V106))(V104))), case V111 of {'Idris.Prelude.Types.Left', E89} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V113) -> begin (V114 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V107))(V104))), case V114 of {'Idris.Prelude.Types.Left', E91} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V116) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V98, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V113, {'Idris.Idris.Syntax.PImplicit', V98}, V110, V116, []}, V104)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V117 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V99))(V104))), case V117 of {'Idris.Prelude.Types.Left', E83} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V119) -> begin (V122 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V120) -> fun (V121) -> ('un--toPClause'(V0, V1, V120, V121)) end end, V101, [], V104))), case V122 of {'Idris.Prelude.Types.Left', E85} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V124) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--10177-5101--in--un--mkIf'(V101, V100, V99, V98, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V98, V119, V124})), V104)) end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E80, E81, E82)); _ -> begin (V125 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V99))(V104))), case V125 of {'Idris.Prelude.Types.Left', E76} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V127) -> begin (V130 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V128) -> fun (V129) -> ('un--toPClause'(V0, V1, V128, V129)) end end, V101, [], V104))), case V130 of {'Idris.Prelude.Types.Left', E78} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V132) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--10177-5101--in--un--mkIf'(V101, V100, V99, V98, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V98, V127, V132})), V104)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E74, E75)); _ -> fun (V133) -> begin (V134 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V99))(V133))), case V134 of {'Idris.Prelude.Types.Left', E70} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V136) -> begin (V139 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V137) -> fun (V138) -> ('un--toPClause'(V0, V1, V137, V138)) end end, V101, [], V133))), case V139 of {'Idris.Prelude.Types.Left', E72} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V141) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--10177-5101--in--un--mkIf'(V101, V100, V99, V98, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V98, V136, V141})), V133)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E66, E67, E68, E69)); {'Idris.TTImp.TTImp.ILocal', E93, E94, E95} -> (fun (V142, V143, V144) -> fun (V145) -> begin (V148 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V146) -> fun (V147) -> ('un--toPDecl'(V0, V1, V146, V147)) end end, V143, [], V145))), case V148 of {'Idris.Prelude.Types.Left', E96} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V150) -> begin (V151 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V144))(V145))), case V151 of {'Idris.Prelude.Types.Left', E98} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V153) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLocal', V142, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V154) -> V154 end, V150)), V153}, V145)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94, E95)); {'Idris.TTImp.TTImp.ICaseLocal', E100, E101, E102, E103, E104} -> (fun (V155, V156, V157, V158, V159) -> ('un--toPTerm'(V0, V1, V2, V159)) end(E100, E101, E102, E103, E104)); {'Idris.TTImp.TTImp.IUpdate', E105, E106, E107} -> (fun (V160, V161, V162) -> fun (V163) -> begin (V166 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V164) -> fun (V165) -> ('un--toPFieldUpdate'(V0, V1, V164, V165)) end end, V161, [], V163))), case V166 of {'Idris.Prelude.Types.Left', E108} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V168) -> begin (V169 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V162))(V163))), case V169 of {'Idris.Prelude.Types.Left', E110} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V171) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PApp', V160, {'Idris.Idris.Syntax.PUpdate', V160, V168}, V171}, V163)) end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E105, E106, E107)); {'Idris.TTImp.TTImp.IApp', E112, E113, E114} -> (fun (V172, V173, V174) -> fun (V175) -> begin (V176 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V174))(V175))), case V176 of {'Idris.Prelude.Types.Left', E115} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V178) -> begin (V179 = ('un--toPTermApp'(V0, V1, V173, [{'Idris.Builtin.MkPair', V172, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V178}} | []], V175))), case V179 of {'Idris.Prelude.Types.Left', E117} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V181) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V181, V175)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E112, E113, E114)); {'Idris.TTImp.TTImp.IAutoApp', E119, E120, E121} -> (fun (V182, V183, V184) -> fun (V185) -> begin (V186 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V184))(V185))), case V186 of {'Idris.Prelude.Types.Left', E122} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V188) -> begin (V189 = ('un--toPTermApp'(V0, V1, V183, [{'Idris.Builtin.MkPair', V182, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}}, V188}} | []], V185))), case V189 of {'Idris.Prelude.Types.Left', E124} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V191) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V191, V185)) end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120, E121)); {'Idris.TTImp.TTImp.IWithApp', E126, E127, E128} -> (fun (V192, V193, V194) -> fun (V195) -> begin (V196 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V194))(V195))), case V196 of {'Idris.Prelude.Types.Left', E129} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V198) -> begin (V199 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V193))(V195))), case V199 of {'Idris.Prelude.Types.Left', E131} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V201) -> ('un--bracket'(V1, V2, ('un--appPrec'()), {'Idris.Idris.Syntax.PWithApp', V192, V201, V198}, V195)) end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127, E128)); {'Idris.TTImp.TTImp.INamedApp', E133, E134, E135, E136} -> (fun (V202, V203, V204, V205) -> fun (V206) -> begin (V207 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V205))(V206))), case V207 of {'Idris.Prelude.Types.Left', E137} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V209) -> begin (V210 = ('un--toPTermApp'(V0, V1, V203, [{'Idris.Builtin.MkPair', V202, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V204}}, V209}} | []], V206))), case V210 of {'Idris.Prelude.Types.Left', E139} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V212) -> begin (V213 = ('un--showImplicits'(V0, V206))), case V213 of {'Idris.Prelude.Types.Left', E141} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V215) -> case V215 of 1 -> ('un--bracket'(V1, V2, ('un--startPrec'()), V212, V206)); 0 -> (('un--mkOp'(V1, V212))(V206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E133, E134, E135, E136)); {'Idris.TTImp.TTImp.ISearch', E143, E144} -> (fun (V216, V217) -> fun (V218) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSearch', V216, V217}} end end(E143, E144)); {'Idris.TTImp.TTImp.IAlternative', E145, E146, E147} -> (fun (V219, V220, V221) -> fun (V222) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V219}} end end(E145, E146, E147)); {'Idris.TTImp.TTImp.IRewrite', E148, E149, E150} -> (fun (V223, V224, V225) -> fun (V226) -> begin (V227 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V224))(V226))), case V227 of {'Idris.Prelude.Types.Left', E151} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V229) -> begin (V230 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V225))(V226))), case V230 of {'Idris.Prelude.Types.Left', E153} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V232) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRewrite', V223, V229, V232}} end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E148, E149, E150)); {'Idris.TTImp.TTImp.ICoerced', E155, E156} -> (fun (V233, V234) -> ('un--toPTerm'(V0, V1, V2, V234)) end(E155, E156)); {'Idris.TTImp.TTImp.IPrimVal', E157, E158} -> (fun (V235, V236) -> fun (V237) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrimVal', V235, V236}} end end(E157, E158)); {'Idris.TTImp.TTImp.IHole', E159, E160} -> (fun (V238, V239) -> fun (V240) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PHole', V238, 0, V239}} end end(E159, E160)); {'Idris.TTImp.TTImp.IType', E161} -> (fun (V241) -> fun (V242) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PType', V241}} end end(E161)); {'Idris.TTImp.TTImp.IBindVar', E162, E163} -> (fun (V243, V244) -> begin (V245 = {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V244}}), fun (V246) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V243, {'Idris.Core.TT.MkKindedName', {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bound'}}, V245, V245}}} end end end(E162, E163)); {'Idris.TTImp.TTImp.IBindHere', E164, E165, E166} -> (fun (V247, V248, V249) -> ('un--toPTerm'(V0, V1, V2, V249)) end(E164, E165, E166)); {'Idris.TTImp.TTImp.IAs', E167, E168, E169, E170, E171} -> (fun (V250, V251, V252, V253, V254) -> fun (V255) -> begin (V256 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V254))(V255))), case V256 of {'Idris.Prelude.Types.Left', E172} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V258) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PAs', V250, V251, V253, V258}} end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E167, E168, E169, E170, E171)); {'Idris.TTImp.TTImp.IMustUnify', E174, E175, E176} -> (fun (V259, V260, V261) -> fun (V262) -> begin (V263 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V261))(V262))), case V263 of {'Idris.Prelude.Types.Left', E177} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V265) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDotted', V259, V265}} end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E174, E175, E176)); {'Idris.TTImp.TTImp.IDelayed', E179, E180, E181} -> (fun (V266, V267, V268) -> fun (V269) -> begin (V270 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V268))(V269))), case V270 of {'Idris.Prelude.Types.Left', E182} -> (fun (V271) -> {'Idris.Prelude.Types.Left', V271} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V272) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelayed', V266, V267, V272}} end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E179, E180, E181)); {'Idris.TTImp.TTImp.IDelay', E184, E185} -> (fun (V273, V274) -> fun (V275) -> begin (V276 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V274))(V275))), case V276 of {'Idris.Prelude.Types.Left', E186} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V278) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelay', V273, V278}} end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E184, E185)); {'Idris.TTImp.TTImp.IForce', E188, E189} -> (fun (V279, V280) -> fun (V281) -> begin (V282 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V280))(V281))), case V282 of {'Idris.Prelude.Types.Left', E190} -> (fun (V283) -> {'Idris.Prelude.Types.Left', V283} end(E190)); {'Idris.Prelude.Types.Right', E191} -> (fun (V284) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForce', V279, V284}} end(E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E188, E189)); {'Idris.TTImp.TTImp.IQuote', E192, E193} -> (fun (V285, V286) -> fun (V287) -> begin (V288 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V286))(V287))), case V288 of {'Idris.Prelude.Types.Left', E194} -> (fun (V289) -> {'Idris.Prelude.Types.Left', V289} end(E194)); {'Idris.Prelude.Types.Right', E195} -> (fun (V290) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuote', V285, V290}} end(E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E192, E193)); {'Idris.TTImp.TTImp.IQuoteName', E196, E197} -> (fun (V291, V292) -> fun (V293) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteName', V291, V292}} end end(E196, E197)); {'Idris.TTImp.TTImp.IQuoteDecl', E198, E199} -> (fun (V294, V295) -> fun (V296) -> begin (V299 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V297) -> fun (V298) -> ('un--toPDecl'(V0, V1, V297, V298)) end end, V295, [], V296))), case V299 of {'Idris.Prelude.Types.Left', E200} -> (fun (V300) -> {'Idris.Prelude.Types.Left', V300} end(E200)); {'Idris.Prelude.Types.Right', E201} -> (fun (V301) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteDecl', V294, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V302) -> V302 end, V301))}} end(E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E198, E199)); {'Idris.TTImp.TTImp.IUnquote', E202, E203} -> (fun (V303, V304) -> fun (V305) -> begin (V306 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V304))(V305))), case V306 of {'Idris.Prelude.Types.Left', E204} -> (fun (V307) -> {'Idris.Prelude.Types.Left', V307} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V308) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnquote', V303, V308}} end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E202, E203)); {'Idris.TTImp.TTImp.IRunElab', E206, E207} -> (fun (V309, V310) -> fun (V311) -> begin (V312 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V310))(V311))), case V312 of {'Idris.Prelude.Types.Left', E208} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V314) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElab', V309, V314}} end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E206, E207)); {'Idris.TTImp.TTImp.IUnifyLog', E210, E211, E212} -> (fun (V315, V316, V317) -> ('un--toPTerm'(V0, V1, V2, V317)) end(E210, E211, E212)); {'Idris.TTImp.TTImp.Implicit', E213, E214} -> (fun (V318, V319) -> fun (V320) -> case V319 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V318}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PInfer', V318}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E213, E214)); {'Idris.TTImp.TTImp.IWithUnambigNames', E215, E216, E217} -> (fun (V321, V322, V323) -> fun (V324) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V325) -> case V325 of {'Idris.Prelude.Types.Left', E218} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V327) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PWithUnambigNames', V321, V322, V327}} end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--toPTerm'(V0, V1, ('un--startPrec'()), V323)), V324)) end end(E215, E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPRef'(V0, V1) -> case V1 of {'Idris.Core.TT.MkKindedName', E0, E1, E2} -> (fun (V2, V3, V4) -> begin (V5 = {'Idris.Core.TT.MkKindedName', V2, V3, V4}), case V4 of {'Idris.Core.Name.MN', E3, E4} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.TT.MkKindedName', V2, V3, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V6}}}}))} end end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.TT.MkKindedName', V2, V3, V9}}))} end end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V12, V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.TT.MkKindedName', V2, V3, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V12}}}}))} end end(E7, E8)); {'Idris.Core.Name.Nested', E9, E10} -> (fun (V15, V16) -> ('un--toPRef'(V0, {'Idris.Core.TT.MkKindedName', V2, V3, V16})) end(E9, E10)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, V5}))} end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPRecord'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V23 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V10, V11) -> fun (V12) -> case V11 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V15, V16) -> begin (V17 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V16))(V12))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V20 = ('nested--10221-6093--in--un--mapPiInfo'(V8, V7, V6, V5, V4, V1, V0, V15, V12))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V13, {'Idris.Builtin.MkPair', V22, V19}}}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6, [], V3))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('un--toPField'(V0, V1, V26, V27)) end end, V8, [], V3))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V25, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V7}, V30}}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPFnOpt'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.ForeignFn', E0} -> (fun (V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V5) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V5)) end, V4, [], V3))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForeign', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.IFnOpt', V2}} end.
'un--toPFieldUpdate'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V4, V5) -> begin (V6 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetField', V4, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E4, E5} -> (fun (V9, V10) -> begin (V11 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V10))(V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetFieldApp', V9, V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPField'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V8))(V3))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V13 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V12) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V12)) end, V6, V3))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkField', V4, <<""/utf8>>, V5, V15, V7, V11}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPDecl'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> fun (V10) -> ('un--toPFnOpt'(V0, V1, V9, V10)) end end, V7, [], V3))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> begin (V14 = ('un--toPTypeDecl'(V0, V1, V8, V3))), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PClaim', V4, V5, V6, V13, V16}}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E9, E10, E11} -> (fun (V17, V18, V19) -> begin (V20 = ('un--toPData'(V0, V1, V19, V3))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V17, <<""/utf8>>, V18, V22}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11)); {'Idris.TTImp.TTImp.IDef', E14, E15, E16} -> (fun (V23, V24, V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('un--toPClause'(V0, V1, V26, V27)) end end, V25, [], V3))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PDef', V23, V30}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15, E16)); {'Idris.TTImp.TTImp.IParameters', E19, E20, E21} -> (fun (V31, V32, V33) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V34) -> fun (V35) -> ('un--toPDecl'(V0, V1, V34, V35)) end end, V33, [], V3))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V40, V41) -> fun (V42) -> case V41 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V43, V44) -> case V44 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V45, V46) -> begin (V48 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V47) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V47)) end, V45, V42))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> begin (V51 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V46))(V42))), case V51 of {'Idris.Prelude.Types.Left', E32} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V40, {'Idris.Builtin.MkPair', V43, {'Idris.Builtin.MkPair', V50, V53}}}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V32, [], V3))), case V54 of {'Idris.Prelude.Types.Left', E34} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PParameters', V31, V56, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V57) -> V57 end, V38))}}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20, E21)); {'Idris.TTImp.TTImp.IRecord', E36, E37, E38, E39} -> (fun (V58, V59, V60, V61) -> begin (V62 = ('un--toPRecord'(V0, V1, V61, V3))), case V62 of {'Idris.Prelude.Types.Left', E40} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V64) -> case V64 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V65, V66) -> case V66 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V67, V68) -> case V68 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V69, V70) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRecord', V58, <<""/utf8>>, V60, V65, V67, V69, V70}}} end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38, E39)); {'Idris.TTImp.TTImp.INamespace', E48, E49, E50} -> (fun (V71, V72, V73) -> begin (V76 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V74) -> fun (V75) -> ('un--toPDecl'(V0, V1, V74, V75)) end end, V73, [], V3))), case V76 of {'Idris.Prelude.Types.Left', E51} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PNamespace', V71, V72, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V79) -> V79 end, V78))}}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49, E50)); {'Idris.TTImp.TTImp.ITransform', E53, E54, E55, E56} -> (fun (V80, V81, V82, V83) -> begin (V84 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V82))(V3))), case V84 of {'Idris.Prelude.Types.Left', E57} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V86) -> begin (V87 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V3))), case V87 of {'Idris.Prelude.Types.Left', E59} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PTransform', V80, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V81)), V86, V89}}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53, E54, E55, E56)); {'Idris.TTImp.TTImp.IRunElabDecl', E61, E62} -> (fun (V90, V91) -> begin (V92 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V91))(V3))), case V92 of {'Idris.Prelude.Types.Left', E63} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRunElabDecl', V90, V94}}} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61, E62)); {'Idris.TTImp.TTImp.IPragma', E65, E66} -> (fun (V95, V96) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E65, E66)); {'Idris.TTImp.TTImp.ILog', E67} -> (fun (V97) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E67)); {'Idris.TTImp.TTImp.IBuiltin', E68, E69, E70} -> (fun (V98, V99, V100) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PBuiltin', V98, V99, V100}}} end(E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPData'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V6))(V3))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> fun (V13) -> ('un--toPTypeDecl'(V0, V1, V12, V13)) end end, V8, [], V3))), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPData', V4, V5, V11, V7, V16}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E9, E10, E11} -> (fun (V17, V18, V19) -> begin (V20 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V19))(V3))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPLater', V17, V18, V22}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPClause'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V4, V5, V6) -> begin (V7 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V3))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> begin (V10 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V6))(V3))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPatClause', V4, V9, V12, []}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> begin (V19 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V3))), case V19 of {'Idris.Prelude.Types.Left', E13} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V21) -> begin (V22 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V15))(V3))), case V22 of {'Idris.Prelude.Types.Left', E15} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V24) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> fun (V26) -> ('un--toPClause'(V0, V1, V25, V26)) end end, V18, [], V3))), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkWithClause', V13, V21, V24, V16, V17, V29}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.ImpossibleClause', E19, E20} -> (fun (V30, V31) -> begin (V32 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V31))(V3))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkImpossible', V30, V34}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toCleanPTerm'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--toPTerm'(V0, V1, V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('un--cleanPTerm'(V0, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sugarName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(implicit) "/utf8>>, V1)) end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V3, V4) -> ('un--sugarName'(V3)) end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V5, V6) -> V5 end(E4, E5)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)) end.
'un--sugarAppM'(V0) -> case V0 of {'Idris.Idris.Syntax.PApp', E18, E19, E20} -> (fun (V1, V2, V3) -> case V2 of {'Idris.Idris.Syntax.PApp', E39, E40, E41} -> (fun (V4, V5, V6) -> case V5 of {'Idris.Idris.Syntax.PApp', E60, E61, E62} -> (fun (V7, V8, V9) -> case V8 of {'Idris.Idris.Syntax.PRef', E81, E82} -> (fun (V10, V11) -> case V11 of {'Idris.Core.TT.MkKindedName', E101, E102, E103} -> (fun (V12, V13, V14) -> case V14 of {'Idris.Core.Name.NS', E122, E123} -> (fun (V15, V16) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V16)) of <<"rangeFromThenTo"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRange', V1, ('un--unbracket'(V9)), {'Idris.Prelude.Types.Just', ('un--unbracket'(V6))}, ('un--unbracket'(V3))})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E122, E123)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E104} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V17))}})) end(E104)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E105, E106} -> (fun (V18, V19) -> case V19 of {'Idris.Core.TT.MkKindedName', E107, E108, E109} -> (fun (V20, V21, V22) -> case V22 of {'Idris.Core.Name.NS', E110, E111} -> (fun (V23, V24) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V23)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V24)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V18})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V18})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V24)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V18, V18, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V18, V18, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E110, E111)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E107, E108, E109)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E105, E106)); {'Idris.Idris.Syntax.PApp', E112, E113, E114} -> (fun (V25, V26, V27) -> case V26 of {'Idris.Idris.Syntax.PRef', E115, E116} -> (fun (V28, V29) -> case V29 of {'Idris.Core.TT.MkKindedName', E117, E118, E119} -> (fun (V30, V31, V32) -> case V32 of {'Idris.Core.Name.NS', E120, E121} -> (fun (V33, V34) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V34)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V25, ('un--unbracket'(V27)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E120, E121)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E117, E118, E119)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E115, E116)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E112, E113, E114)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101, E102, E103)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E83} -> (fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V35))}})) end(E83)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E84, E85} -> (fun (V36, V37) -> case V37 of {'Idris.Core.TT.MkKindedName', E86, E87, E88} -> (fun (V38, V39, V40) -> case V40 of {'Idris.Core.Name.NS', E89, E90} -> (fun (V41, V42) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V41)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V42)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V36})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V36})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V42)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V36, V36, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V36, V36, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E89, E90)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E86, E87, E88)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E84, E85)); {'Idris.Idris.Syntax.PApp', E91, E92, E93} -> (fun (V43, V44, V45) -> case V44 of {'Idris.Idris.Syntax.PRef', E94, E95} -> (fun (V46, V47) -> case V47 of {'Idris.Core.TT.MkKindedName', E96, E97, E98} -> (fun (V48, V49, V50) -> case V50 of {'Idris.Core.Name.NS', E99, E100} -> (fun (V51, V52) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V52)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V43, ('un--unbracket'(V45)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E99, E100)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E96, E97, E98)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E94, E95)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E91, E92, E93)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81, E82)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E63} -> (fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V53))}})) end(E63)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E64, E65} -> (fun (V54, V55) -> case V55 of {'Idris.Core.TT.MkKindedName', E66, E67, E68} -> (fun (V56, V57, V58) -> case V58 of {'Idris.Core.Name.NS', E69, E70} -> (fun (V59, V60) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V59)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V60)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V54})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V54})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V60)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V54, V54, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V54, V54, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69, E70)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E66, E67, E68)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E64, E65)); {'Idris.Idris.Syntax.PApp', E71, E72, E73} -> (fun (V61, V62, V63) -> case V62 of {'Idris.Idris.Syntax.PRef', E74, E75} -> (fun (V64, V65) -> case V65 of {'Idris.Core.TT.MkKindedName', E76, E77, E78} -> (fun (V66, V67, V68) -> case V68 of {'Idris.Core.Name.NS', E79, E80} -> (fun (V69, V70) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V70)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V61, ('un--unbracket'(V63)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E79, E80)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E76, E77, E78)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E74, E75)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E71, E72, E73)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60, E61, E62)); {'Idris.Idris.Syntax.PRef', E124, E125} -> (fun (V71, V72) -> case V72 of {'Idris.Core.TT.MkKindedName', E144, E145, E146} -> (fun (V73, V74, V75) -> case V75 of {'Idris.Core.Name.NS', E165, E166} -> (fun (V76, V77) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V76)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V77)) of <<"Pair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPair', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"MkPair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPair', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"DPair"/utf8>> -> case ('un--unbracket'(V3)) of {'Idris.Idris.Syntax.PLam', E167, E168, E169, E170, E171, E172} -> (fun (V78, V79, V80, V81, V82, V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PDPair', V1, V71, V81, ('un--unbracket'(V6)), ('un--unbracket'(V83))})) end(E167, E168, E169, E170, E171, E172)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"Equal"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"==="/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"~=~"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V77)) of <<"::"/utf8>> -> case ('un--sugarApp'(('un--unbracket'(V3)))) of {'Idris.Idris.Syntax.PList', E173, E174, E175} -> (fun (V84, V85, V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V84, V85, [{'Idris.Builtin.MkPair', V71, ('un--unbracketApp'(V6))} | V86]})) end(E173, E174, E175)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<":<"/utf8>> -> case ('un--sugarApp'(('un--unbracket'(V3)))) of {'Idris.Idris.Syntax.PSnocList', E176, E177, E178} -> (fun (V87, V88, V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V87, V88, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V89, [{'Idris.Builtin.MkPair', V71, ('un--unbracketApp'(V6))} | []]))})) end(E176, E177, E178)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"rangeFromTo"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRange', V1, ('un--unbracket'(V6)), {'Idris.Prelude.Types.Nothing'}, ('un--unbracket'(V3))})); <<"rangeFromThen"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V1, ('un--unbracket'(V6)), {'Idris.Prelude.Types.Just', ('un--unbracket'(V3))}})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E165, E166)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E147} -> (fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V90))}})) end(E147)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E148, E149} -> (fun (V91, V92) -> case V92 of {'Idris.Core.TT.MkKindedName', E150, E151, E152} -> (fun (V93, V94, V95) -> case V95 of {'Idris.Core.Name.NS', E153, E154} -> (fun (V96, V97) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V96)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V97)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V91})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V91})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V97)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V91, V91, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V91, V91, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E153, E154)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E150, E151, E152)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E148, E149)); {'Idris.Idris.Syntax.PApp', E155, E156, E157} -> (fun (V98, V99, V100) -> case V99 of {'Idris.Idris.Syntax.PRef', E158, E159} -> (fun (V101, V102) -> case V102 of {'Idris.Core.TT.MkKindedName', E160, E161, E162} -> (fun (V103, V104, V105) -> case V105 of {'Idris.Core.Name.NS', E163, E164} -> (fun (V106, V107) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V107)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V98, ('un--unbracket'(V100)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E163, E164)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E160, E161, E162)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E158, E159)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E155, E156, E157)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144, E145, E146)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E126} -> (fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V108))}})) end(E126)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E127, E128} -> (fun (V109, V110) -> case V110 of {'Idris.Core.TT.MkKindedName', E129, E130, E131} -> (fun (V111, V112, V113) -> case V113 of {'Idris.Core.Name.NS', E132, E133} -> (fun (V114, V115) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V114)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V115)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V109})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V109})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V115)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V109, V109, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V109, V109, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E132, E133)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E129, E130, E131)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E127, E128)); {'Idris.Idris.Syntax.PApp', E134, E135, E136} -> (fun (V116, V117, V118) -> case V117 of {'Idris.Idris.Syntax.PRef', E137, E138} -> (fun (V119, V120) -> case V120 of {'Idris.Core.TT.MkKindedName', E139, E140, E141} -> (fun (V121, V122, V123) -> case V123 of {'Idris.Core.Name.NS', E142, E143} -> (fun (V124, V125) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V125)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V116, ('un--unbracket'(V118)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E142, E143)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E139, E140, E141)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E137, E138)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E134, E135, E136)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124, E125)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E42} -> (fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V126))}})) end(E42)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E43, E44} -> (fun (V127, V128) -> case V128 of {'Idris.Core.TT.MkKindedName', E45, E46, E47} -> (fun (V129, V130, V131) -> case V131 of {'Idris.Core.Name.NS', E48, E49} -> (fun (V132, V133) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V132)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V133)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V127})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V127})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V133)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V127, V127, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V127, V127, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E45, E46, E47)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E43, E44)); {'Idris.Idris.Syntax.PApp', E50, E51, E52} -> (fun (V134, V135, V136) -> case V135 of {'Idris.Idris.Syntax.PRef', E53, E54} -> (fun (V137, V138) -> case V138 of {'Idris.Core.TT.MkKindedName', E55, E56, E57} -> (fun (V139, V140, V141) -> case V141 of {'Idris.Core.Name.NS', E58, E59} -> (fun (V142, V143) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V143)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V134, ('un--unbracket'(V136)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E58, E59)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E55, E56, E57)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E53, E54)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E50, E51, E52)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40, E41)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E21} -> (fun (V144) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V144))}})) end(E21)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E22, E23} -> (fun (V145, V146) -> case V146 of {'Idris.Core.TT.MkKindedName', E24, E25, E26} -> (fun (V147, V148, V149) -> case V149 of {'Idris.Core.Name.NS', E27, E28} -> (fun (V150, V151) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V150)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V151)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V145})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V145})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V151)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V145, V145, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V145, V145, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24, E25, E26)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22, E23)); {'Idris.Idris.Syntax.PApp', E29, E30, E31} -> (fun (V152, V153, V154) -> case V153 of {'Idris.Idris.Syntax.PRef', E32, E33} -> (fun (V155, V156) -> case V156 of {'Idris.Core.TT.MkKindedName', E34, E35, E36} -> (fun (V157, V158, V159) -> case V159 of {'Idris.Core.Name.NS', E37, E38} -> (fun (V160, V161) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V161)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V152, ('un--unbracket'(V154)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E37, E38)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E34, E35, E36)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E32, E33)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E29, E30, E31)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19, E20)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V162) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V162))}})) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E1, E2} -> (fun (V163, V164) -> case V164 of {'Idris.Core.TT.MkKindedName', E3, E4, E5} -> (fun (V165, V166, V167) -> case V167 of {'Idris.Core.Name.NS', E6, E7} -> (fun (V168, V169) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V168)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V169)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V163})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V163})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V169)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V163, V163, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V163, V163, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E1, E2)); {'Idris.Idris.Syntax.PApp', E8, E9, E10} -> (fun (V170, V171, V172) -> case V171 of {'Idris.Idris.Syntax.PRef', E11, E12} -> (fun (V173, V174) -> case V174 of {'Idris.Core.TT.MkKindedName', E13, E14, E15} -> (fun (V175, V176, V177) -> case V177 of {'Idris.Core.Name.NS', E16, E17} -> (fun (V178, V179) -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V179)) of <<"rangeFrom"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PRangeStream', V170, ('un--unbracket'(V172)), {'Idris.Prelude.Types.Nothing'}})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13, E14, E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E11, E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9, E10)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sugarApp'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V0 end, ('un--sugarAppM'(V0)))).
'un--startPrec'() -> 0.
'un--showImplicits'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V5 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showFullEnv'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V6 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugarNoPatvars'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'(V0, V1, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugar'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--pterm'(V0, V1, V2, V3) -> ('un--toCleanPTerm'(V0, V1, ('un--startPrec'()), V2, V3)).
'un--mkOp'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V2, V3, V4) -> fun (V5) -> case V3 of {'Idris.Idris.Syntax.PApp', E3, E4, E5} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Idris.Syntax.PRef', E6, E7} -> (fun (V9, V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> begin (V18 = case V10 of {'Idris.Core.TT.MkKindedName', E10, E11, E12} -> (fun (V15, V16, V17) -> V17 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V19 = {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PApp', V6, {'Idris.Idris.Syntax.PRef', V9, V10}, V8}, V4}), case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(('Idris.Idris2.Core.Name':'un--nameRoot'(V18)), case V14 of {'Idris.Idris.Syntax.MkSyntax', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V20 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V19} end()); {'Idris.Prelude.Types.Just', E13} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V2, V9, V10, ('un--unbracketApp'(V8)), ('un--unbracketApp'(V4))}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> {'Idris.Prelude.Types.Right', V1} end end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', V1} end end end(E0, E1, E2)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--mkApp'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V11 = ('un--sugarApp'({'Idris.Idris.Syntax.PApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V11, V6)) end end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V13 = ('un--sugarApp'({'Idris.Idris.Syntax.PAutoApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V13, V6)) end end()); {'Idris.Prelude.Types.Just', E7} -> (fun (V14) -> fun (V15) -> begin (V16 = ('un--showImplicits'(V0, V15))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> case V18 of 1 -> begin (V19 = {'Idris.Idris.Syntax.PNamedApp', V7, V2, V14, V10}), (('un--mkApp'(V0, V1, V19, V6))(V15)) end; 0 -> (('un--mkApp'(V0, V1, V2, V6))(V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fullNamespace'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V7 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--extractNat'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.TT.MkKindedName', E2, E3, E4} -> (fun (V4, V5, V6) -> case V6 of {'Idris.Core.Name.NS', E5, E6} -> (fun (V7, V8) -> case V8 of {'Idris.Core.Name.UN', E7} -> (fun (V9) -> case V9 of {'Idris.Core.Name.Basic', E8} -> (fun (V10) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V19, V20)) end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V23, V24)) end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V26)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V29, V30)) end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V35, V36)) end end end end}, fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V39, V40)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V10, <<"Z"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V43, V44)) end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V49, V50)) end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V53, V54)) end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V56)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V59, V60)) end end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V62)) end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V65, V66)) end end end end}, fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V69, V70)) end end end}, case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V7, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V7, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V0)) end)) end)) end(E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); {'Idris.Idris.Syntax.PApp', E9, E10, E11} -> (fun (V71, V72, V73) -> case V72 of {'Idris.Idris.Syntax.PRef', E12, E13} -> (fun (V74, V75) -> case V75 of {'Idris.Core.TT.MkKindedName', E14, E15, E16} -> (fun (V76, V77, V78) -> case V78 of {'Idris.Core.Name.NS', E17, E18} -> (fun (V79, V80) -> case V80 of {'Idris.Core.Name.UN', E19} -> (fun (V81) -> case V81 of {'Idris.Core.Name.Basic', E20} -> (fun (V82) -> case V82 of <<"S"/utf8>> -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V85, V86)) end end end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V88)) end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V91, V92)) end end end end}, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V95, V96)) end end end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V98)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V101, V102)) end end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V104)) end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V107, V108)) end end end end}, fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V111, V112)) end end end}, case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V79, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V79, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('un--extractNat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V0)), V73)) end)); <<"fromInteger"/utf8>> -> ('un--extractNat'(V0, V73)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E17, E18)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14, E15, E16)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9, E10, E11)); {'Idris.Idris.Syntax.PPrimVal', E21, E22} -> (fun (V113, V114) -> case V114 of {'Idris.Core.TT.BI', E23} -> (fun (V115) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V115)))))) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E21, E22)); {'Idris.Idris.Syntax.PBracketed', E24, E25} -> (fun (V116, V117) -> ('un--extractNat'(V0, V117)) end(E24, E25)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--cleanPTerm'(V0, V1, V2) -> begin (V3 = ('un--fullNamespace'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 1 -> {'Idris.Prelude.Types.Right', V1}; 0 -> (('Idris.Idris2.Idris.Syntax':'un--mapPTermM'(fun (V6) -> fun (V7) -> ('nested--12392-6514--in--un--cleanNode'(V1, V0, V6, V7)) end end, V1))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bracket'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--mkOp'(V0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V1, V2)) of 1 -> {'Idris.Prelude.Types.Right', ('un--addBracket'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V7))}; 0 -> {'Idris.Prelude.Types.Right', V7}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--argPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1000)).
'un--appPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(999)).
'un--addBracket'(V0, V1) -> case ('nested--8686-3179--in--un--needed'(V1, V0, V1)) of 1 -> {'Idris.Idris.Syntax.PBracketed', V0, V1}; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
