-module('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToErlangSource').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--genBitSegment-4675'/7,
  'nested--4881-5937--in--un--clauseToFunHead'/5,
  'un--sepBy'/2,
  'un--genTypeSpecifierList'/1,
  'un--genPattern'/1,
  'un--genMapFieldExact'/2,
  'un--genMapFieldAssoc'/2,
  'un--genLiteral'/1,
  'un--genGuardAlt'/1,
  'un--genGuard'/1,
  'un--genFunClause'/1,
  'un--genExpr'/1,
  'un--genExportFun'/1,
  'un--genDecl'/1,
  'un--genCharlist'/1,
  'un--genCatchClause'/1,
  'un--genCaseClause'/1,
  'un--genBitUnit'/1,
  'un--genBitType'/1,
  'un--genBitSize'/1,
  'un--genBitSignedness'/1,
  'un--genBitSegment'/2,
  'un--genBitPattern'/1,
  'un--genBitEndianness'/1,
  'un--genAtom'/1
]).
'case--genBitSegment-4675'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"/"/utf8>>, ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showSep'(<<"-"/utf8>>, V6)))) end.
'nested--4881-5937--in--un--clauseToFunHead'(V0, V1, V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genAtom'(V2))} | [('un--genFunClause'(V4)) | []]]}.
'un--sepBy'(V0, V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', ('Idris.Idris2.Data.List':'un--intersperse'({'Idris.Compiler.Erlang.Utils.CompositeString.Str', V0}, V1))}.
'un--genTypeSpecifierList'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V5) -> ('un--genBitSignedness'(V5)) end, V1)))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V6) -> ('un--genBitEndianness'(V6)) end, V2)))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V7) -> ('un--genBitType'(V7)) end, V3)))), ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V8) -> ('un--genBitUnit'(V8)) end, V4)))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.APLiteral', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))} end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', E1, E2} -> (fun (V2, V3) -> begin (V6 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genBitPattern'(V5)) end, V4)) end, V3))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"<<"/utf8>>} | [V6 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<">>"/utf8>>} | []]]]} end end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APCons', E3, E4, E5} -> (fun (V7, V8, V9) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genPattern'(V8)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genPattern'(V9)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]} end(E3, E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APMap', E6, E7} -> (fun (V10, V11) -> begin (V14 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--genMapFieldExact'(fun (V13) -> ('un--genPattern'(V13)) end, V12)) end, V11))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"#{"/utf8>>} | [V14 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APNil', E8} -> (fun (V15) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>} end(E8)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', E9, E10} -> (fun (V16, V17) -> begin (V19 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('un--genPattern'(V18)) end, V17))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V19 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APUniversal', E11} -> (fun (V20) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"_"/utf8>>} end(E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', E12, E13} -> (fun (V21, V22) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V22} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldExact'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkExact', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [(V0(V3)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" := "/utf8>>} | [(V0(V4)) | []]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldAssoc'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkAssoc', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [(V0(V3)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" => "/utf8>>} | [(V0(V4)) | []]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genLiteral'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', E0, E1} -> (fun (V1, V2) -> ('un--genAtom'(V2)) end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALChar', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$"/utf8>>, ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeChar'(V4, <<""/utf8>>)))) end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALFloat', E4, E5} -> (fun (V5, V6) -> ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V6)) end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', E6, E7} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V8)) end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALCharlist', E8, E9} -> (fun (V9, V10) -> ('un--genCharlist'(V10)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genGuardAlt'(V0) -> ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('un--genGuard'(V1)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V0)))))).
'un--genGuard'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AGLiteral', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))} end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGCons', E1, E2, E3} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genGuard'(V3)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genGuard'(V4)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]} end(E1, E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', E4, E5, E6} -> (fun (V5, V6, V7) -> begin (V9 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('un--genGuard'(V8)) end, V7))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(erlang:"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--genAtom'(V6)), <<"("/utf8>>))))} | [V9 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"))"/utf8>>} | []]]]} end end(E4, E5, E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGNil', E7} -> (fun (V10) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>} end(E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genGuard'(V13)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, <<" "/utf8>>))))} | [('un--genGuard'(V14)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]} end(E8, E9, E10, E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGTuple', E12, E13} -> (fun (V15, V16) -> begin (V18 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('un--genGuard'(V17)) end, V16))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V18 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', E14, E15} -> (fun (V19, V20) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V20} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genFunClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> begin (V6 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('un--genPattern'(V5)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V2))))))), begin (V8 = case V3 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('un--genGuardAlt'(V7)) end, V3)))) | []]]} end), begin (V10 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('un--genExpr'(V9)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V4))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V6 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | [V8 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V10 | []]]]]]]} end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExpr'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genLiteral'(V1))} end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', E1, E2} -> (fun (V2, V3) -> begin (V6 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genExpr'(V5)) end, V4)) end, V3))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"<<"/utf8>>} | [V6 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<">>"/utf8>>} | []]]]} end end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBlock', E3, E4} -> (fun (V7, V8) -> begin (V10 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('un--genExpr'(V9)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V8))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"begin "/utf8>>} | [V10 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]} end end(E3, E4)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECase', E5, E6, E7} -> (fun (V11, V12, V13) -> begin (V14 = ('un--genExpr'(V12))), begin (V16 = ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('un--genCaseClause'(V15)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V13))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"case "/utf8>>} | [V14 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" of "/utf8>>} | [V16 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]]} end end end(E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECons', E8, E9, E10} -> (fun (V17, V18, V19) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [('un--genExpr'(V18)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" | "/utf8>>} | [('un--genExpr'(V19)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]]]} end(E8, E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', E11, E12, E13} -> (fun (V20, V21, V22) -> begin (V24 = ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V23) -> ('un--genFunClause'(V23)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V22))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"fun "/utf8>>} | [V24 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]} end end(E11, E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', E14, E15, E16} -> (fun (V25, V26, V27) -> begin (V28 = ('un--genExpr'(V26))), begin (V30 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('un--genExpr'(V29)) end, V27))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V28 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [V30 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"))"/utf8>>} | []]]]]]} end end end(E14, E15, E16)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AERemoteRef', E17, E18, E19} -> (fun (V31, V32, V33) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [('un--genExpr'(V32)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [('un--genExpr'(V33)) | []]]]} end(E17, E18, E19)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMapNew', E20, E21} -> (fun (V34, V35) -> begin (V38 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V36) -> ('un--genMapFieldAssoc'(fun (V37) -> ('un--genExpr'(V37)) end, V36)) end, V35))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"#{"/utf8>>} | [V38 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E20, E21)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', E22, E23, E24} -> (fun (V39, V40, V41) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genPattern'(V40)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" = "/utf8>>} | [('un--genExpr'(V41)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]} end(E22, E23, E24)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AENil', E25} -> (fun (V42) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"[]"/utf8>>} end(E25)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', E26, E27, E28, E29} -> (fun (V43, V44, V45, V46) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"("/utf8>>} | [('un--genExpr'(V45)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V44, <<" "/utf8>>))))} | [('un--genExpr'(V46)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")"/utf8>>} | []]]]]]} end(E26, E27, E28, E29)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEReceive', E30, E31, E32} -> (fun (V47, V48, V49) -> begin (V51 = ('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V50) -> ('un--genCaseClause'(V50)) end, V48))))), begin (V56 = case V49 of {'Idris.Compiler.Erlang.IR.AbstractFormat.NoTimeout'} -> (fun () -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.TimeoutAfter', E33, E34} -> (fun (V52, V53) -> begin (V55 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V54) -> ('un--genExpr'(V54)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V53))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--genExpr'(V52)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V55 | []]]]]} end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"receive "/utf8>>} | [V51 | [V56 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]} end end end(E30, E31, E32)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', E35, E36} -> (fun (V57, V58) -> begin (V60 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V59) -> ('un--genExpr'(V59)) end, V58))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [V60 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end end(E35, E36)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETry', E37, E38, E39, E40, E41} -> (fun (V61, V62, V63, V64, V65) -> begin (V67 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V66) -> ('un--genExpr'(V66)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V62))))))), begin (V69 = case V63 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" of "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V68) -> ('un--genCaseClause'(V68)) end, V63)))) | []]]} end), begin (V71 = case V64 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" catch "/utf8>>} | [('un--sepBy'(<<"; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V70) -> ('un--genCatchClause'(V70)) end, V64)))) | []]]} end), begin (V73 = case V65 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" after "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V72) -> ('un--genExpr'(V72)) end, V65)))) | []]]} end), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"try "/utf8>>} | [V67 | [V69 | [V71 | [V73 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" end"/utf8>>} | []]]]]]]} end end end end end(E37, E38, E39, E40, E41)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', E42, E43} -> (fun (V74, V75) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V75} end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExportFun'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--genAtom'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"/"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genDecl'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ADExport', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-export([\x{a}  "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showSep'(<<",\x{a}  "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('un--genExportFun'(V3)) end, V2)))), <<"\x{a}])."/utf8>>))))} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADModule', E2, E3} -> (fun (V4, V5) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-module("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--genAtom'(V5)), <<")."/utf8>>))))} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADFunDef', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [('un--sepBy'(<<";\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('nested--4881-5937--in--un--clauseToFunHead'(V8, V9, V7, V6, V10)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V9)))))) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"."/utf8>>} | []]]} end(E4, E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADAttribute', E8, E9, E10} -> (fun (V11, V12, V13) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, <<"("/utf8>>))))} | [('Idris.Idris2.Compiler.Erlang.Utils.PrimTerm':'un--primTermToCS'(V13)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<")."/utf8>>} | []]]]} end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCharlist'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<""/utf8>>)), <<"\x{22}"/utf8>>)))).
'un--genCatchClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCatchClause', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--genPattern'(V2))), begin (V8 = ('un--genPattern'(V3))), begin (V9 = ('un--genPattern'(V4))), begin (V11 = case V5 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--genGuardAlt'(V10)) end, V5)))) | []]]} end), begin (V13 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--genExpr'(V12)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V6))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [V7 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [V8 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<":"/utf8>>} | [V9 | [V11 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V13 | []]]]]]]]]} end end end end end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCaseClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCaseClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> begin (V5 = ('un--genPattern'(V2))), begin (V7 = case V3 of [] -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<""/utf8>>}; _ -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" when "/utf8>>} | [('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('un--genGuardAlt'(V6)) end, V3)))) | []]]} end), begin (V9 = ('un--sepBy'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('un--genExpr'(V8)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V4))))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [V5 | [V7 | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<" -> "/utf8>>} | [V9 | []]]]]} end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitUnit'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unit:"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'((('Idris.Idris2.Data.Fin':'dn--un--cast_Cast_(Fin $n)_Integer'(V0)) + 1))))).
'un--genBitType'(V0) -> case V0 of 0 -> <<"integer"/utf8>>; 1 -> <<"float"/utf8>>; 2 -> <<"binary"/utf8>>; 3 -> <<"bytes"/utf8>>; 4 -> <<"bitstring"/utf8>>; 5 -> <<"bits"/utf8>>; 6 -> <<"utf8"/utf8>>; 7 -> <<"utf16"/utf8>>; 8 -> <<"utf32"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSize'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2))} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', E2, E3} -> (fun (V3, V4) -> {'Idris.Prelude.Types.Just', V4} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSignedness'(V0) -> case V0 of 0 -> <<"unsigned"/utf8>>; 1 -> <<"signed"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSegment'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, V6)) end end, ('un--genBitSize'(V4))))), begin (V8 = ('case--genBitSegment-4675'(V3, V5, V4, V2, V0, V7, ('un--genTypeSpecifierList'(V5))))), {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [(V0(V3)) | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', V7} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', V8} | []]]]} end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2))} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPFloat', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V4))} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPCharlist', E4, E5} -> (fun (V5, V6) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('un--genCharlist'(V6))} end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', E6} -> (fun (V7) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"_"/utf8>>} end(E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', E7, E8} -> (fun (V8, V9) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', V9} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitEndianness'(V0) -> case V0 of 0 -> <<"big"/utf8>>; 1 -> <<"little"/utf8>>; 2 -> <<"native"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genAtom'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<""/utf8>>)), <<"\x{27}"/utf8>>)))).
