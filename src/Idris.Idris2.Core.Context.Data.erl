-module('Idris.Idris2.Core.Context.Data').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getPs-8255'/6,
  'nested--5852-7889--in--un--toNothing'/5,
  'nested--6175-8183--in--un--shrink'/12,
  'nested--5982-8055--in--un--mergeArg'/6,
  'nested--6371-8354--in--un--justPos'/3,
  'nested--5982-7999--in--un--couldBeParam'/5,
  'nested--6534-8511--in--un--conVisibility'/10,
  'nested--6534-8510--in--un--allDet'/10,
  'nested--6534-8512--in--un--addDataConstructors'/12,
  'un--updateParams'/5,
  'un--toPos'/1,
  'un--paramPos'/4,
  'un--getPs'/5,
  'un--getConPs'/5,
  'un--dropReps'/1,
  'un--addData'/6
]).
'case--getPs-8255'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> fun (V8) -> case V6 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V9, V10, V11) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V3)) of 1 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V12) -> case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V14}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V15) -> ('un--updateParams'(V0, V1, V4, V7, V15)) end, V8)); 0 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', V4} end end end(E0, E1)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V4} end end.
'nested--5852-7889--in--un--toNothing'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Core.TT.Local', E1, E2, E3} -> (fun (V6, V7, V8) -> begin (V9 = {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V6, V7, V8}}), case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V8)) of 1 -> {'Idris.Prelude.Types.Nothing'}; 0 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2, E3)); _ -> V4 end end(E0)); _ -> V4 end.
'nested--6175-8183--in--un--shrink'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V12, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5982-8055--in--un--mergeArg'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.TT.Local', E1, E2, E3} -> (fun (V7, V8, V9) -> case V5 of {'Idris.Core.TT.Local', E4, E5, E6} -> (fun (V10, V11, V12) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V9, V12)) of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V7, V8, V9}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--6371-8354--in--un--justPos'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> [V1 | ('nested--6371-8354--in--un--justPos'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), V4))] end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--6371-8354--in--un--justPos'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5982-7999--in--un--couldBeParam'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise':'un--etaContract'(V0, V1, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Core.TT.Local', E2, E3, E4} -> (fun (V8, V9, V10) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V8, V9, V10}} end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--6534-8511--in--un--conVisibility'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 1 -> 0; _ -> V9 end.
'nested--6534-8510--in--un--allDet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> []; _ -> begin (V10 = (V9 - 1)), ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'(0, V10)) end end.
'nested--6534-8512--in--un--addDataConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', V11} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Core.Context.Context.MkCon', E2, E3, E4, E5} -> (fun (V15, V16, V17, V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--newDef'(V15, V16, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V7, V18, ('nested--6534-8511--in--un--conVisibility'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V6)), {'Idris.Core.Context.Context.DCon', V9, V17, {'Idris.Prelude.Types.Nothing'}}))), fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, V11))(V20))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> case V23 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V24 = ('Idris.Idris2.Core.Context':'un--addCtxt'(V16, V19, V11, V20))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V27, V28) -> (('nested--6534-8512--in--un--addDataConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V9 + 1) rem 9223372036854775808), V14, V28))(V20)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V15, V16}, V20)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateParams'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('un--dropReps'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> fun (V10) -> ('nested--5982-7999--in--un--couldBeParam'(V0, V1, V3, V9, V10)) end end, V3, [], V8)) end, V4)) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', ('un--dropReps'(('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V12) -> fun (V13) -> ('nested--5982-8055--in--un--mergeArg'(V0, V1, V11, V3, V12, V13)) end end, V11, V3))))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPos'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> ('nested--6371-8354--in--un--justPos'(V1, 0, V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--paramPos'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> begin (V5 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> ('un--getConPs'(V0, [], {'Idris.Prelude.Types.Nothing'}, V1, V4)) end, V2, [], V3))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.List':'un--intersectAll'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V10, V11)) end end}, V7))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--getPs'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V17 = (('un--getPs'(V0, [V6 | V1], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V16)) end, V15)) end, V14)) end, V2)), V3, V8))(V13))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('nested--6175-8183--in--un--shrink'(V0, V1, V5, V9, V10, V11, V12, V6, V8, V3, V2, V21)) end, V20)) end, V19))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> ('case--getPs-8255'(V0, V1, V4, V3, V2, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)))) end end(E0, E1, E2, E3)); _ -> ('case--getPs-8255'(V0, V1, V4, V3, V2, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)))) end.
'un--getConPs'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V14 = (('un--getPs'(V0, V1, V2, V3, V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E12} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V16) -> (('un--getConPs'(V0, [V6 | V1], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V19) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V19)) end, V18)) end, V17)) end, V16)), V3, V8))(V13)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10, E11)); {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V20, V21, V22, V23) -> ('un--getConPs'(V0, V1, V2, V3, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V22, V8)))) end(E14, E15, E16, E17)); _ -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V25) -> case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> {'Idris.Prelude.Types.Right', ('un--toPos'(V27))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--getPs'(V0, V1, V2, V3, V4)), V24)) end end end(E2, E3, E4, E5)); _ -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V29) -> case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> {'Idris.Prelude.Types.Right', ('un--toPos'(V31))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--getPs'(V0, V1, V2, V3, V4)), V28)) end end.
'un--dropReps'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Types.Just', E2} -> (fun (V3) -> case V3 of {'Idris.Core.TT.Local', E3, E4, E5} -> (fun (V4, V5, V6) -> [{'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V4, V5, V6}} | ('un--dropReps'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('nested--5852-7889--in--un--toNothing'(V6, V5, V4, V2, V7)) end, V2))))] end(E3, E4, E5)); _ -> [V1 | ('un--dropReps'(V2))] end end(E2)); _ -> [V1 | ('un--dropReps'(V2))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addData'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.Context.MkData', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.Context.MkCon', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getNextTypeTag'(V0, V5))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = ('nested--6534-8510--in--un--allDet'(V11, V10, V9, V8, V7, V3, V2, V1, V0, V10))), begin (V25 = ('un--paramPos'(V0, {'Idris.Core.Name.Resolved', V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> case V20 of {'Idris.Core.Context.Context.MkCon', E10, E11, E12, E13} -> (fun (V21, V22, V23, V24) -> V24 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7)), V5))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V19 end, V27))), begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"declare.data.parameters"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Positions of parameters for datatype"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V29)) end, V28)))), <<"]"/utf8>>)))))))) end, V5))), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--newDef'(V8, V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V1, V11, V2, {'Idris.Core.Context.Context.TCon', V18, V10, V28, V19, ('Idris.Idris2.Core.Context.Context':'un--defaultFlags'()), [], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V33) -> case V33 of {'Idris.Core.Context.Context.MkCon', E18, E19, E20, E21} -> (fun (V34, V35, V36, V37) -> V35 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7)), {'Idris.Prelude.Types.Nothing'}}))), begin (V69 = ('Idris.Idris2.Core.Context':'un--addCtxt'(V9, V38, case V15 of {'Idris.Core.Context.MkDefs', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V39 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V69 of {'Idris.Prelude.Types.Left', E52} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V72, V73) -> begin (V74 = (('nested--6534-8512--in--un--addDataConstructors'(V11, V10, V9, V8, V7, V3, V2, V1, V0, 0, V7, V73))(V5))), case V74 of {'Idris.Prelude.Types.Left', E56} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V76) -> begin (V108 = begin (V107 = ('erlang':'put'(V0, case V15 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> {'Idris.Core.Context.MkDefs', V76, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106} end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V107} end), case V108 of {'Idris.Prelude.Types.Left', E88} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V110) -> {'Idris.Prelude.Types.Right', V72} end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
