-module('Idris.Idris2.TTImp.Elab.RunElab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9149-3499--in--un--unelabType'/18,
  'nested--9121-2378--in--un--scriptRet'/17,
  'nested--9149-3100--in--un--quotePi'/20,
  'nested--11077-4145--in--un--mkExpected'/14,
  'nested--9121-2377--in--un--failWith'/17,
  'nested--9121-2379--in--un--elabCon'/17,
  'un--elabScript'/10,
  'un--checkRunElab'/13
]).
'nested--9149-3499--in--un--unelabType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> begin (V22 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'([], V13, {'Idris.Core.Env.Nil'}, V21, V17))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V25) -> case V25 of {'Idris.Core.TT.MkKindedName', E6, E7, E8} -> (fun (V26, V27, V28) -> V28 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V24))}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = (((((((V14(V0))(V10))(V20))(0))(V8))(V15))(V16))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V13, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V20, V8, V23))(V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9149-3100--in--un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, <<"Can\x{27}t add default lambda"/utf8>>}, V19)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11077-4145--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V14))(V13))), case V15 of {'Idris.Prelude.Types.Left', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Right', V17} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V18 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V11, V9, <<"scriptTy"/utf8>>, V13))), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V11, V9, V3, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V20, {'Idris.Core.TT.TType', V3}, V13)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V13, V0, V19, V8, V6, V16))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadRunElab', V0, V10, V8, V22, V15}, V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9121-2379--in--un--elabCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of <<"Pure"/utf8>> -> case V16 of [E0 | E1] -> (fun (V17, V18) -> case V18 of [E2 | E3] -> (fun (V19, V20) -> fun (V21) -> case V20 of [] -> begin (V22 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V21))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V24, V19))(V21)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V21)) end end end(E2, E3)); _ -> fun (V25) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V25)) end end end(E0, E1)); _ -> fun (V26) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V26)) end end; <<"Bind"/utf8>> -> case V16 of [E6 | E7] -> (fun (V27, V28) -> case V28 of [E8 | E9] -> (fun (V29, V30) -> case V30 of [E10 | E11] -> (fun (V31, V32) -> case V32 of [E12 | E13] -> (fun (V33, V34) -> fun (V35) -> case V34 of [] -> begin (V39 = begin (V36 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V31))(V35))), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> ('un--elabScript'(V0, V13, V12, V11, V10, V9, V8, V38, V7, V35)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V39 of {'Idris.Prelude.Types.Left', E16} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V41) -> begin (V42 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V33))(V35))), case V42 of {'Idris.Prelude.Types.Left', E18} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V44) -> begin (V45 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case V44 of {'Idris.Core.Value.NBind', E20, E21, E22, E23} -> (fun (V46, V47, V48, V49) -> case V48 of {'Idris.Core.TT.Lam', E24, E25, E26, E27} -> (fun (V50, V51, V52, V53) -> begin (V54 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V13, V0, V14, V8, V41, V35))), case V54 of {'Idris.Prelude.Types.Left', E28} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V56) -> begin (V57 = (((V49(V14))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--withAll'()), V8, V56))))(V35))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> ('un--elabScript'(V0, V13, V12, V11, V10, V9, V8, V59, V7, V35)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25, E26, E27)); _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V45, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"non-function RHS of a Bind: "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V0, V44)))), V35)) end end(E20, E21, E22, E23)); _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V45, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"non-function RHS of a Bind: "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V0, V44)))), V35)) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V35)) end end end(E12, E13)); _ -> fun (V60) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V60)) end end end(E10, E11)); _ -> fun (V61) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V61)) end end end(E8, E9)); _ -> fun (V62) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V62)) end end end(E6, E7)); _ -> fun (V63) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V63)) end end; <<"Fail"/utf8>> -> case V16 of [E32 | E33] -> (fun (V64, V65) -> case V65 of [E34 | E35] -> (fun (V66, V67) -> case V67 of [E36 | E37] -> (fun (V68, V69) -> fun (V70) -> case V69 of [] -> begin (V71 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V68))(V70))), case V71 of {'Idris.Prelude.Types.Left', E38} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V73) -> begin (V77 = begin (V74 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V66))(V70))), case V74 of {'Idris.Prelude.Types.Left', E40} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V76) -> ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_FC'(V13, V0, V14, V76, V70)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V77 of {'Idris.Prelude.Types.Left', E42} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V79) -> begin (V80 = case V79 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> V10 end()); _ -> V79 end), begin (V81 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V73))(V70))), case V81 of {'Idris.Prelude.Types.Left', E44} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V83) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V80, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error during reflection: "/utf8>>, V83))}, V70)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V70)) end end end(E36, E37)); _ -> fun (V84) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V84)) end end end(E34, E35)); _ -> fun (V85) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V85)) end end end(E32, E33)); _ -> fun (V86) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V86)) end end; <<"LogMsg"/utf8>> -> case V16 of [E46 | E47] -> (fun (V87, V88) -> case V88 of [E48 | E49] -> (fun (V89, V90) -> case V90 of [E50 | E51] -> (fun (V91, V92) -> fun (V93) -> case V92 of [] -> begin (V94 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V87))(V93))), case V94 of {'Idris.Prelude.Types.Left', E52} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V96) -> begin (V97 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V89))(V93))), case V97 of {'Idris.Prelude.Types.Left', E54} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V99) -> begin (V110 = begin (V100 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V96))(V93))), case V100 of {'Idris.Prelude.Types.Left', E56} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V102) -> begin (V103 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Nat'(V13, V0, V14, V99, V93))), case V103 of {'Idris.Prelude.Types.Left', E58} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V105) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V13, V102, V105, fun (V106) -> begin (V107 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V91))(V106))), case V107 of {'Idris.Prelude.Types.Left', E60} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V109) -> (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V109))(V106)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V93)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V110 of {'Idris.Prelude.Types.Left', E62} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V112) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V113, V114, V115, V116, V117, V118, V119)) end end end end end end end, 0, V93)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V93)) end end end(E50, E51)); _ -> fun (V120) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V120)) end end end(E48, E49)); _ -> fun (V121) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V121)) end end end(E46, E47)); _ -> fun (V122) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V122)) end end; <<"LogTerm"/utf8>> -> case V16 of [E64 | E65] -> (fun (V123, V124) -> case V124 of [E66 | E67] -> (fun (V125, V126) -> case V126 of [E68 | E69] -> (fun (V127, V128) -> case V128 of [E70 | E71] -> (fun (V129, V130) -> fun (V131) -> case V130 of [] -> begin (V132 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V123))(V131))), case V132 of {'Idris.Prelude.Types.Left', E72} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V134) -> begin (V135 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V125))(V131))), case V135 of {'Idris.Prelude.Types.Left', E74} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V137) -> begin (V160 = begin (V138 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V134))(V131))), case V138 of {'Idris.Prelude.Types.Left', E76} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V140) -> begin (V141 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Nat'(V13, V0, V14, V137, V131))), case V141 of {'Idris.Prelude.Types.Left', E78} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V143) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V13, V140, V143, fun (V144) -> begin (V145 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V127))(V144))), case V145 of {'Idris.Prelude.Types.Left', E80} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V147) -> begin (V148 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V129))(V144))), case V148 of {'Idris.Prelude.Types.Left', E82} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V150) -> begin (V151 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V147))(V144))), case V151 of {'Idris.Prelude.Types.Left', E84} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V153) -> begin (V154 = ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_RawImp'(V13, V0, V14, V150, V144))), case V154 of {'Idris.Prelude.Types.Left', E86} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V156) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V153, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V157) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V157)) end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V158, V159)) end end}, V156))))))} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V131)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V160 of {'Idris.Prelude.Types.Left', E88} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V162) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V163, V164, V165, V166, V167, V168, V169)) end end end end end end end, 0, V131)) end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V131)) end end end(E70, E71)); _ -> fun (V170) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V170)) end end end(E68, E69)); _ -> fun (V171) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V171)) end end end(E66, E67)); _ -> fun (V172) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V172)) end end end(E64, E65)); _ -> fun (V173) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V173)) end end; <<"Check"/utf8>> -> case V16 of [E90 | E91] -> (fun (V174, V175) -> case V175 of [E92 | E93] -> (fun (V176, V177) -> fun (V178) -> case V177 of [] -> begin (V179 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V174))(V178))), case V179 of {'Idris.Prelude.Types.Left', E94} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V181) -> begin (V182 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V176))(V178))), case V182 of {'Idris.Prelude.Types.Left', E96} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V184) -> begin (V185 = ('Idris.Idris2.Core.Context':'un--resolveName'(V13, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"[elaborator script]"/utf8>>}}, V178))), case V185 of {'Idris.Prelude.Types.Left', E98} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V187) -> begin (V188 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.TTImp.Elab.Check.EST'}, ('Idris.Idris2.TTImp.Elab.Check':'un--initEState'(V0, V187, V8)), V178))), case V188 of {'Idris.Prelude.Types.Left', E100} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V190) -> begin (V196 = begin (V191 = ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_RawImp'(V13, V0, V14, V184, V178))), case V191 of {'Idris.Prelude.Types.Left', E102} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V193) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V13, V12, V11, V190, fun (V194) -> 1 end, fun (V195) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V13, V12, V11, V190, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), ('Idris.Idris2.TTImp.Elab.Check':'un--initElabInfo'({'Idris.TTImp.Elab.Check.InExpr'})), V9, V8, V193, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V13, V0, V14, V8, V181))}, V195)) end, V178)) end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V196 of {'Idris.Prelude.Types.Left', E104} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V198) -> case V198 of {'Idris.Builtin.MkPair', E106, E107} -> (fun (V199, V200) -> begin (V201 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V178))), case V201 of {'Idris.Prelude.Types.Left', E108} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V203) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V13, V0, V203, V8, V199))(V178)) end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V178)) end end end(E92, E93)); _ -> fun (V204) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V204)) end end end(E90, E91)); _ -> fun (V205) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V205)) end end; <<"Quote"/utf8>> -> case V16 of [E110 | E111] -> (fun (V206, V207) -> case V207 of [E112 | E113] -> (fun (V208, V209) -> fun (V210) -> case V209 of [] -> begin (V211 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V208))(V210))), case V211 of {'Idris.Prelude.Types.Left', E114} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V213) -> begin (V215 = begin (V214 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V214} end), case V215 of {'Idris.Prelude.Types.Left', E116} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V217) -> begin (V218 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V217, V210))), case V218 of {'Idris.Prelude.Types.Left', E118} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V220) -> begin (V221 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V13, V0, V220, V8, V213, V210))), case V221 of {'Idris.Prelude.Types.Left', E120} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V223) -> begin (V224 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V13, V8, V223, V210))), case V224 of {'Idris.Prelude.Types.Left', E122} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V226) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V227, V228, V229, V230, V231, V232)) end end end end end end, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V233) -> case V233 of {'Idris.Core.TT.MkKindedName', E124, E125, E126} -> (fun (V234, V235, V236) -> V236 end(E124, E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V226)), V210)) end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V210)) end end end(E112, E113)); _ -> fun (V237) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V237)) end end end(E110, E111)); _ -> fun (V238) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V238)) end end; <<"Lambda"/utf8>> -> case V16 of [E127 | E128] -> (fun (V239, V240) -> case V240 of [E129 | E130] -> (fun (V241, V242) -> case V242 of [E131 | E132] -> (fun (V243, V244) -> fun (V245) -> case V244 of [] -> begin (V246 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V245))), case V246 of {'Idris.Prelude.Types.Left', E133} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V248) -> begin (V249 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V243))(V245))), case V249 of {'Idris.Prelude.Types.Left', E135} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V251) -> begin (V252 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case V251 of {'Idris.Core.Value.NBind', E137, E138, E139, E140} -> (fun (V253, V254, V255, V256) -> case V255 of {'Idris.Core.TT.Lam', E141, E142, E143, E144} -> (fun (V257, V258, V259, V260) -> begin (V261 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V13, V11, <<"x"/utf8>>, V245))), case V261 of {'Idris.Prelude.Types.Left', E145} -> (fun (V262) -> {'Idris.Prelude.Types.Left', V262} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V263) -> begin (V264 = (((V256(V14))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--withAll'()), V8, {'Idris.Core.TT.Ref', V253, {'Idris.Core.TT.Bound'}, V263}))))(V245))), case V264 of {'Idris.Prelude.Types.Left', E147} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V266) -> begin (V267 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V13, V0, V248, V8, V266, V245))), case V267 of {'Idris.Prelude.Types.Left', E149} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V269) -> begin (V270 = ('Idris.Idris2.Core.TT':'un--refToLocal'(V263, V254, V269))), begin (V271 = ('nested--9149-3100--in--un--quotePi'(V0, V1, V2, V3, V4, V5, V252, V7, V8, V9, V10, V11, V12, V13, V241, V239, V243, V14, V259, V245))), case V271 of {'Idris.Prelude.Types.Left', E151} -> (fun (V272) -> {'Idris.Prelude.Types.Left', V272} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V273) -> begin (V274 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V13, V0, V248, V8, V260, V245))), case V274 of {'Idris.Prelude.Types.Left', E153} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V276) -> begin (V277 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V257, V258, V273, V276}, V8}), begin (V281 = begin (V278 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V13, [V254 | V0], V14, V277, V270))(V245))), case V278 of {'Idris.Prelude.Types.Left', E155} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V280) -> ('un--elabScript'([V254 | V0], V13, V12, V11, V10, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V9)), V277, V280, {'Idris.Prelude.Types.Nothing'}, V245)) end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V281 of {'Idris.Prelude.Types.Left', E157} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V283) -> begin (V284 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V13, [V254 | V0], V248, V277, V283, V245))), case V284 of {'Idris.Prelude.Types.Left', E159} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E159)); {'Idris.Prelude.Types.Right', E160} -> (fun (V286) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V13, V0, V248, V8, {'Idris.Core.TT.Bind', V253, V254, {'Idris.Core.TT.Lam', V257, V258, V273, V276}, V286}))(V245)) end(E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141, E142, E143, E144)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, <<"Not a lambda"/utf8>>}, V245)) end end(E137, E138, E139, E140)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, <<"Not a lambda"/utf8>>}, V245)) end end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V245)) end end end(E131, E132)); _ -> fun (V287) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V287)) end end end(E129, E130)); _ -> fun (V288) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V288)) end end end(E127, E128)); _ -> fun (V289) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V289)) end end; <<"Goal"/utf8>> -> case V16 of [] -> begin (V290 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), fun (V291) -> case V7 of {'Idris.Prelude.Types.Just', E161} -> (fun (V292) -> begin (V293 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V292))(V291))), case V293 of {'Idris.Prelude.Types.Left', E162} -> (fun (V294) -> {'Idris.Prelude.Types.Left', V294} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V295) -> begin (V296 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V13, V8, V295, V291))), case V296 of {'Idris.Prelude.Types.Left', E164} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V298) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V290, V7, V8, V9, V10, V11, V12, V13, fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(Maybe $a)'(fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V306, V307, V308, V309, V310, V311)) end end end end end end, V299, V300, V301, V302, V303, V304, V305)) end end end end end end end, {'Idris.Prelude.Types.Just', ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V312) -> case V312 of {'Idris.Core.TT.MkKindedName', E166, E167, E168} -> (fun (V313, V314, V315) -> V315 end(E166, E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V298))}, V291)) end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V322 = ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(Maybe $a)'(fun (V316) -> fun (V317) -> fun (V318) -> fun (V319) -> fun (V320) -> fun (V321) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V316, V317, V318, V319, V320, V321)) end end end end end end, V0, V10, V14, 0, V8, {'Idris.Prelude.Types.Nothing'}, V291))), case V322 of {'Idris.Prelude.Types.Left', E169} -> (fun (V323) -> {'Idris.Prelude.Types.Left', V323} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V324) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V13, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V14, V8, V324))(V291)) end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V325) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V325)) end end; <<"LocalVars"/utf8>> -> fun (V326) -> case V16 of [] -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V327) -> fun (V328) -> fun (V329) -> fun (V330) -> fun (V331) -> fun (V332) -> fun (V333) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> fun (V338) -> fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V334, V335, V336, V337, V338, V339, V340)) end end end end end end end, V327, V328, V329, V330, V331, V332, V333)) end end end end end end end, V0, V326)); _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V326)) end end; <<"GenSym"/utf8>> -> case V16 of [E171 | E172] -> (fun (V341, V342) -> fun (V343) -> case V342 of [] -> begin (V344 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V341))(V343))), case V344 of {'Idris.Prelude.Types.Left', E173} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V346) -> begin (V350 = begin (V347 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V346))(V343))), case V347 of {'Idris.Prelude.Types.Left', E175} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V349) -> ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V13, V11, V349, V343)) end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V350 of {'Idris.Prelude.Types.Left', E177} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V352) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V353) -> fun (V354) -> fun (V355) -> fun (V356) -> fun (V357) -> fun (V358) -> fun (V359) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V353, V354, V355, V356, V357, V358, V359)) end end end end end end end, V352, V343)) end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V343)) end end end(E171, E172)); _ -> fun (V360) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V360)) end end; <<"InCurrentNS"/utf8>> -> case V16 of [E179 | E180] -> (fun (V361, V362) -> fun (V363) -> case V362 of [] -> begin (V364 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V361))(V363))), case V364 of {'Idris.Prelude.Types.Left', E181} -> (fun (V365) -> {'Idris.Prelude.Types.Left', V365} end(E181)); {'Idris.Prelude.Types.Right', E182} -> (fun (V366) -> begin (V370 = begin (V367 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V366, V363))), case V367 of {'Idris.Prelude.Types.Left', E183} -> (fun (V368) -> {'Idris.Prelude.Types.Left', V368} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V369) -> ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V13, V369, V363)) end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V370 of {'Idris.Prelude.Types.Left', E185} -> (fun (V371) -> {'Idris.Prelude.Types.Left', V371} end(E185)); {'Idris.Prelude.Types.Right', E186} -> (fun (V372) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V373) -> fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> fun (V379) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V373, V374, V375, V376, V377, V378, V379)) end end end end end end end, V372, V363)) end(E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V363)) end end end(E179, E180)); _ -> fun (V380) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V380)) end end; <<"GetType"/utf8>> -> case V16 of [E187 | E188] -> (fun (V381, V382) -> fun (V383) -> case V382 of [] -> begin (V384 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V381))(V383))), case V384 of {'Idris.Prelude.Types.Left', E189} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V386) -> begin (V420 = begin (V387 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V386, V383))), case V387 of {'Idris.Prelude.Types.Left', E191} -> (fun (V388) -> {'Idris.Prelude.Types.Left', V388} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V389) -> ('Idris.Idris2.Core.Context':'un--lookupTyName'(V389, case V14 of {'Idris.Core.Context.MkDefs', E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222} -> (fun (V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419) -> V390 end(E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V383)) end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V420 of {'Idris.Prelude.Types.Left', E223} -> (fun (V421) -> {'Idris.Prelude.Types.Left', V421} end(E223)); {'Idris.Prelude.Types.Right', E224} -> (fun (V422) -> begin (V426 = begin (V423 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V424) -> fun (V425) -> ('nested--9149-3499--in--un--unelabType'(V0, V1, V2, V3, V4, V5, V423, V7, V8, V9, V10, V11, V12, V13, V381, V14, V424, V425)) end end, V422, [], V383)) end), case V426 of {'Idris.Prelude.Types.Left', E225} -> (fun (V427) -> {'Idris.Prelude.Types.Left', V427} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V428) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V429) -> fun (V430) -> fun (V431) -> fun (V432) -> fun (V433) -> fun (V434) -> fun (V435) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V436) -> fun (V437) -> fun (V438) -> fun (V439) -> fun (V440) -> fun (V441) -> fun (V442) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V443) -> fun (V444) -> fun (V445) -> fun (V446) -> fun (V447) -> fun (V448) -> fun (V449) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V443, V444, V445, V446, V447, V448, V449)) end end end end end end end, fun (V450) -> fun (V451) -> fun (V452) -> fun (V453) -> fun (V454) -> fun (V455) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V450, V451, V452, V453, V454, V455)) end end end end end end}, V436, V437, V438, V439, V440, V441, V442)) end end end end end end end, V429, V430, V431, V432, V433, V434, V435)) end end end end end end end, V428, V383)) end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V383)) end end end(E187, E188)); _ -> fun (V456) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V456)) end end; <<"GetLocalType"/utf8>> -> case V16 of [E227 | E228] -> (fun (V457, V458) -> fun (V459) -> case V458 of [] -> begin (V460 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V457))(V459))), case V460 of {'Idris.Prelude.Types.Left', E229} -> (fun (V461) -> {'Idris.Prelude.Types.Left', V461} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V462) -> begin (V463 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V462, V459))), case V463 of {'Idris.Prelude.Types.Left', E231} -> (fun (V464) -> {'Idris.Prelude.Types.Left', V464} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V465) -> begin (V466 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case ('Idris.Idris2.Core.Env':'un--defined'(V0, V465, V8)) of {'Idris.Prelude.Types.Just', E233} -> (fun (V467) -> case V467 of {'Idris.Core.Env.MkIsDefined', E234, E235} -> (fun (V468, V469) -> begin (V477 = ('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V470) -> fun (V471) -> fun (V472) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V472)) end end end, fun (V473) -> fun (V474) -> fun (V475) -> fun (V476) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V475, V476)) end end end end}, V0, V468, V8))), begin (V478 = ('Idris.Idris2.Core.TT':'un--binderType'(V477))), begin (V479 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V13, V8, V478, V459))), case V479 of {'Idris.Prelude.Types.Left', E236} -> (fun (V480) -> {'Idris.Prelude.Types.Left', V480} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V481) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V466, V7, V8, V9, V10, V11, V12, V13, fun (V482) -> fun (V483) -> fun (V484) -> fun (V485) -> fun (V486) -> fun (V487) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V482, V483, V484, V485, V486, V487)) end end end end end end, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V488) -> case V488 of {'Idris.Core.TT.MkKindedName', E238, E239, E240} -> (fun (V489, V490, V491) -> V491 end(E238, E239, E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V481)), V459)) end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E234, E235)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V465)), <<" is not a local variable"/utf8>>))}, V459)) end end(E233)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V465)), <<" is not a local variable"/utf8>>))}, V459)) end end end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V459)) end end end(E227, E228)); _ -> fun (V492) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V492)) end end; <<"GetCons"/utf8>> -> case V16 of [E241 | E242] -> (fun (V493, V494) -> fun (V495) -> case V494 of [] -> begin (V496 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V493))(V495))), case V496 of {'Idris.Prelude.Types.Left', E243} -> (fun (V497) -> {'Idris.Prelude.Types.Left', V497} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V498) -> begin (V499 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V498, V495))), case V499 of {'Idris.Prelude.Types.Left', E245} -> (fun (V500) -> {'Idris.Prelude.Types.Left', V500} end(E245)); {'Idris.Prelude.Types.Right', E246} -> (fun (V501) -> begin (V532 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V501, case V14 of {'Idris.Core.Context.MkDefs', E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276} -> (fun (V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531) -> V502 end(E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V495))), case V532 of {'Idris.Prelude.Types.Left', E277} -> (fun (V533) -> {'Idris.Prelude.Types.Left', V533} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V534) -> begin (V535 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case V534 of {'Idris.Prelude.Types.Just', E279} -> (fun (V536) -> case V536 of {'Idris.Core.Context.Context.TCon', E280, E281, E282, E283, E284, E285, E286, E287} -> (fun (V537, V538, V539, V540, V541, V542, V543, V544) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V535, V7, V8, V9, V10, V11, V12, V13, fun (V545) -> fun (V546) -> fun (V547) -> fun (V548) -> fun (V549) -> fun (V550) -> fun (V551) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V552) -> fun (V553) -> fun (V554) -> fun (V555) -> fun (V556) -> fun (V557) -> fun (V558) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V552, V553, V554, V555, V556, V557, V558)) end end end end end end end, V545, V546, V547, V548, V549, V550, V551)) end end end end end end end, V543, V495)) end(E280, E281, E282, E283, E284, E285, E286, E287)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V501)), <<" is not a type"/utf8>>))}, V495)) end end(E279)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V501)), <<" is not a type"/utf8>>))}, V495)) end end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V495)) end end end(E241, E242)); _ -> fun (V559) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V559)) end end; <<"Declare"/utf8>> -> case V16 of [E288 | E289] -> (fun (V560, V561) -> fun (V562) -> case V561 of [] -> begin (V563 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V560))(V562))), case V563 of {'Idris.Prelude.Types.Left', E290} -> (fun (V564) -> {'Idris.Prelude.Types.Left', V564} end(E290)); {'Idris.Prelude.Types.Right', E291} -> (fun (V565) -> begin (V571 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_(List $a)'(fun (V566) -> fun (V567) -> fun (V568) -> fun (V569) -> fun (V570) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_ImpDecl'(V566, V567, V568, V569, V570)) end end end end end, V13, V0, V14, V565, V562))), case V571 of {'Idris.Prelude.Types.Left', E292} -> (fun (V572) -> {'Idris.Prelude.Types.Left', V572} end(E292)); {'Idris.Prelude.Types.Right', E293} -> (fun (V573) -> begin (V575 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V574) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V13, V12, V11, [], [], {'Idris.Core.Env.Nil'}, V574)) end, V573, V562))), case V575 of {'Idris.Prelude.Types.Left', E294} -> (fun (V576) -> {'Idris.Prelude.Types.Left', V576} end(E294)); {'Idris.Prelude.Types.Right', E295} -> (fun (V577) -> ('nested--9121-2378--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V578) -> fun (V579) -> fun (V580) -> fun (V581) -> fun (V582) -> fun (V583) -> fun (V584) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V578, V579, V580, V581, V582, V583, V584)) end end end end end end end, 0, V562)) end(E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V562)) end end end(E288, E289)); _ -> fun (V585) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V585)) end end; _ -> fun (V586) -> ('nested--9121-2377--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V586)) end end.
'un--elabScript'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Core.Value.NDCon', E6, E7, E8, E9, E10} -> (fun (V10, V11, V12, V13, V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V18) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V19, V20, V21)) end end end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V22, V23, V24)) end end end}, V11, V9))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> begin (V28 = {'Idris.Core.Value.NDCon', V10, V11, V12, V13, V14}), case V27 of {'Idris.Core.Name.NS', E15, E16} -> (fun (V29, V30) -> case V30 of {'Idris.Core.Name.UN', E17} -> (fun (V31) -> case V31 of {'Idris.Core.Name.Basic', E18} -> (fun (V32) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V29, ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()))) of 1 -> (('nested--9121-2379--in--un--elabCon'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, V32, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V33) -> ('Idris.Idris2.Builtin':'un--snd'(V33)) end, V14))))(V9)); 0 -> ('nested--9121-2377--in--un--failWith'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bad reflection namespace "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V29)))), V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); _ -> ('nested--9121-2377--in--un--failWith'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bad fullnames "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))), V9)) end end(E17)); _ -> ('nested--9121-2377--in--un--failWith'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bad fullnames "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))), V9)) end end(E15, E16)); _ -> ('nested--9121-2377--in--un--failWith'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bad fullnames "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))), V9)) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9, E10)); _ -> begin (V35 = begin (V34 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E0} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V37, V9))), case V38 of {'Idris.Prelude.Types.Left', E2} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V40, V6, V7, V9))), case V41 of {'Idris.Prelude.Types.Left', E4} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V43) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadRunElab', V0, V4, V6, V43, <<"script is not a data value"/utf8>>}, V9)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--checkRunElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('nested--11077-4145--in--un--mkExpected'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V11, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = case ('Idris.Idris2.Core.Context':'un--isExtension'(0, V19)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V9, <<"%language ElabReflection not enabled"/utf8>>}, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"Elab"/utf8>>}}}), begin (V24 = ('Idris.Idris2.Core.Reflect':'un--appCon'(V0, V9, V19, V23, [V15 | []], V12))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V29 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V27) -> 1 end, fun (V28) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V26))}, V28)) end, V12))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V32, V33) -> begin (V35 = begin (V34 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E12} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V37) -> begin (V41 = begin (V38 = (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V1, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V37, V8, V32))(V12))), case V38 of {'Idris.Prelude.Types.Left', E14} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V40) -> ('un--elabScript'(V0, V1, V2, V3, V9, V7, V8, V40, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V15))}, V12)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E16} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E18} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V47, V12))), case V48 of {'Idris.Prelude.Types.Left', E20} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V50, V8, V43, V12))), case V51 of {'Idris.Prelude.Types.Left', E22} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V53, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V15))}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
