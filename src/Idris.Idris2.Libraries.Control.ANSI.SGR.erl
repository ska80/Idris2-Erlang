-module('Idris.Idris2.Libraries.Control.ANSI.SGR').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--2893-855--in--un--toCode'/2,
  'dn--un--cast_Cast_Style_String'/1,
  'dn--un--cast_Cast_Color_String'/1,
  'dn--un--cast_Cast_Blink_String'/1,
  'un--escapeSGR'/1
]).
'nested--2893-855--in--un--toCode'(V0, V1) -> case V1 of {'Idris.Libraries.Control.ANSI.SGR.Reset'} -> (fun () -> <<"0"/utf8>> end()); {'Idris.Libraries.Control.ANSI.SGR.SetForeground', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"38;5;"/utf8>>, ('dn--un--cast_Cast_Color_String'(V2)))) end(E0)); {'Idris.Libraries.Control.ANSI.SGR.SetBackground', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"48;5;"/utf8>>, ('dn--un--cast_Cast_Color_String'(V3)))) end(E1)); {'Idris.Libraries.Control.ANSI.SGR.SetStyle', E2} -> (fun (V4) -> ('dn--un--cast_Cast_Style_String'(V4)) end(E2)); {'Idris.Libraries.Control.ANSI.SGR.SetBlink', E3} -> (fun (V5) -> ('dn--un--cast_Cast_Blink_String'(V5)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--cast_Cast_Style_String'(V0) -> case V0 of 0 -> <<"1"/utf8>>; 1 -> <<"2"/utf8>>; 2 -> <<"22"/utf8>>; 3 -> <<"3"/utf8>>; 4 -> <<"4"/utf8>>; 5 -> <<"21"/utf8>>; 6 -> <<"24"/utf8>>; 7 -> <<"9"/utf8>>; 8 -> <<"29"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--cast_Cast_Color_String'(V0) -> case V0 of 0 -> <<"0"/utf8>>; 1 -> <<"1"/utf8>>; 2 -> <<"2"/utf8>>; 3 -> <<"3"/utf8>>; 4 -> <<"4"/utf8>>; 5 -> <<"5"/utf8>>; 6 -> <<"6"/utf8>>; 7 -> <<"7"/utf8>>; 8 -> <<"8"/utf8>>; 9 -> <<"9"/utf8>>; 10 -> <<"10"/utf8>>; 11 -> <<"11"/utf8>>; 12 -> <<"12"/utf8>>; 13 -> <<"13"/utf8>>; 14 -> <<"14"/utf8>>; 15 -> <<"15"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--cast_Cast_Blink_String'(V0) -> case V0 of 0 -> <<"5"/utf8>>; 1 -> <<"6"/utf8>>; 2 -> <<"25"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--escapeSGR'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{1b}["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Data.List':'un--intersperse'(<<";"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V31, V32)) end end end end, fun (V33) -> ('nested--2893-855--in--un--toCode'(V0, V33)) end, V0)))))), <<"m"/utf8>>)))).
