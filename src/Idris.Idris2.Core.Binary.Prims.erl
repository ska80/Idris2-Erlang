-module('Idris.Idris2.Core.Binary.Prims').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9427-3392--in--un--writeAll'/6,
  'nested--9431-3417--in--un--readElems'/5,
  'nested--9279-3278--in--un--readElems'/4,
  'nested--9275-3243--in--un--length_aux'/5,
  'nested--9275-3244--in--un--TailRec_length'/4,
  'dn--un--toBuf_TTC_WastefulInt'/3,
  'dn--un--toBuf_TTC_String'/2,
  'dn--un--toBuf_TTC_Nat'/3,
  'dn--un--toBuf_TTC_Integer'/3,
  'dn--un--toBuf_TTC_Int'/3,
  'dn--un--toBuf_TTC_Double'/3,
  'dn--un--toBuf_TTC_Char'/2,
  'dn--un--toBuf_TTC_Bool'/3,
  'dn--un--toBuf_TTC_Binary'/2,
  'dn--un--toBuf_TTC_(|Unit,MkUnit|)'/3,
  'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/4,
  'dn--un--toBuf_TTC_(PosMap $a)'/4,
  'dn--un--toBuf_TTC_(Maybe $a)'/4,
  'dn--un--toBuf_TTC_(List1 $a)'/4,
  'dn--un--toBuf_TTC_(List $a)'/4,
  'dn--un--toBuf_TTC_((Vect $n) $a)'/5,
  'dn--un--toBuf_TTC_((Either $a) $b)'/4,
  'dn--un--toBuf_TTC_((DPair $a) $p)'/4,
  'dn--un--fromBuf_TTC_WastefulInt'/2,
  'dn--un--fromBuf_TTC_String'/2,
  'dn--un--fromBuf_TTC_Nat'/2,
  'dn--un--fromBuf_TTC_Integer'/2,
  'dn--un--fromBuf_TTC_Int'/2,
  'dn--un--fromBuf_TTC_Double'/2,
  'dn--un--fromBuf_TTC_Char'/2,
  'dn--un--fromBuf_TTC_Bool'/2,
  'dn--un--fromBuf_TTC_Binary'/2,
  'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'/2,
  'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/3,
  'dn--un--fromBuf_TTC_(PosMap $a)'/3,
  'dn--un--fromBuf_TTC_(Maybe $a)'/3,
  'dn--un--fromBuf_TTC_(List1 $a)'/3,
  'dn--un--fromBuf_TTC_(List $a)'/3,
  'dn--un--fromBuf_TTC_((Vect $n) $a)'/3,
  'dn--un--fromBuf_TTC_((Either $a) $b)'/3,
  'dn--un--fromBuf_TTC_((DPair $a) $p)'/3,
  'dn--un--__Impl_TTC_String'/0,
  'dn--un--__Impl_TTC_Nat'/0,
  'dn--un--__Impl_TTC_Integer'/0,
  'dn--un--__Impl_TTC_Int'/0,
  'dn--un--__Impl_TTC_Double'/0,
  'dn--un--__Impl_TTC_Char'/0,
  'dn--un--__Impl_TTC_Bool'/0,
  'dn--un--__Impl_TTC_Binary'/0,
  'dn--un--__Impl_TTC_(|Unit,MkUnit|)'/0,
  'dn--un--__Impl_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/1,
  'dn--un--__Impl_TTC_(PosMap $a)'/1,
  'dn--un--__Impl_TTC_(Maybe $a)'/1,
  'dn--un--__Impl_TTC_(List1 $a)'/1,
  'dn--un--__Impl_TTC_(List $a)'/1,
  'dn--un--__Impl_TTC_((Vect $n) $a)'/2,
  'dn--un--__Impl_TTC_((Either $a) $b)'/1,
  'dn--un--__Impl_TTC_((DPair $a) $p)'/1,
  'un--toLimbs'/1,
  'un--toBuf'/3,
  'un--tag'/3,
  'un--modTime'/2,
  'un--initBinaryS'/2,
  'un--initBinary'/1,
  'un--hashFileWith'/3,
  'un--hashFile'/2,
  'un--getTag'/2,
  'un--fromLimbs'/1,
  'un--fromBuf'/2,
  'un--extendBinary'/2,
  'un--corrupt'/2,
  'un--Wasteful'/0
]).
'nested--9427-3392--in--un--writeAll'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V6, V7) -> begin (V10 = case V1 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E2, E3} -> (fun (V8, V9) -> (((V8(V3))(V6))(V5)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> ('nested--9427-3392--in--un--writeAll'(V0, V1, V2, V3, V7, V5)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9431-3417--in--un--readElems'(V0, V1, V2, V3, V4) -> case V4 of 0 -> fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.Vect':'un--reverse'(V3))} end; _ -> begin (V6 = (V4 - 1)), fun (V7) -> begin (V10 = case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V8, V9) -> ((V9(V1))(V7)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> (('nested--9431-3417--in--un--readElems'(V0, V1, V2, {'Idris.Data.Vect.::', V12, V3}, V6))(V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'nested--9279-3278--in--un--readElems'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))} end; _ -> begin (V5 = (V3 - 1)), fun (V6) -> begin (V9 = case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V7, V8) -> ((V8(V1))(V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> (('nested--9279-3278--in--un--readElems'(V0, V1, [V11 | V2], V5))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'nested--9275-3243--in--un--length_aux'(V0, V1, V2, V3, V4) -> case V3 of [] -> V4; [E0 | E1] -> (fun (V5, V6) -> ('nested--9275-3243--in--un--length_aux'(V0, V1, V2, V6, ((1 + V4) rem 9223372036854775808))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9275-3244--in--un--TailRec_length'(V0, V1, V2, V3) -> ('nested--9275-3243--in--un--length_aux'(V0, V1, V2, V3, 0)).
'dn--un--toBuf_TTC_WastefulInt'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V6)), 8)) of 1 -> begin (V43 = begin (V42 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, case V6 of {'Idris.Libraries.Utils.Binary.MkBin', E2, E3, E4, E5} -> (fun (V34, V35, V36, V37) -> V34 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.Libraries.Utils.Binary.MkBin', E6, E7, E8, E9} -> (fun (V38, V39, V40, V41) -> V39 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V46 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V6))))), {'Idris.Prelude.Types.Right', V46} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V47 = (('un--extendBinary'(8, V6))(V2))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V86 = begin (V85 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, fun (V75) -> fun (V76) -> V76 end end}, case V49 of {'Idris.Libraries.Utils.Binary.MkBin', E14, E15, E16, E17} -> (fun (V77, V78, V79, V80) -> V77 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V49 of {'Idris.Libraries.Utils.Binary.MkBin', E18, E19, E20, E21} -> (fun (V81, V82, V83, V84) -> V82 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E22} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V88) -> begin (V89 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V49))))), {'Idris.Prelude.Types.Right', V89} end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_String'(V0, V1) -> begin (V2 = ('Idris.Idris2.Erlang.Data.Buffer':'un--stringByteLength'(V1))), fun (V3) -> begin (V4 = ('dn--un--toBuf_TTC_Int'(V0, V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V10)), V2)) of 1 -> begin (V47 = begin (V46 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, case V10 of {'Idris.Libraries.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V38, V39, V40, V41) -> V38 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.Libraries.Utils.Binary.MkBin', E8, E9, E10, E11} -> (fun (V42, V43, V44, V45) -> V43 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V3))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V50 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V2, V10))))), {'Idris.Prelude.Types.Right', V50} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V51 = (('un--extendBinary'(V2, V10))(V3))), case V51 of {'Idris.Prelude.Types.Left', E14} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V53) -> begin (V90 = begin (V89 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V56, V57, V58)) end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> V60 end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V64(V66))), begin (V68 = (V65(V66))), (V67(V68)) end end end end end end end}, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), ((V72(V74))(V73)) end end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V76(V77))), (V78(V77)) end end end end}, fun (V79) -> fun (V80) -> V80 end end}, case V53 of {'Idris.Libraries.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V81, V82, V83, V84) -> V81 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V53 of {'Idris.Libraries.Utils.Binary.MkBin', E20, E21, E22, E23} -> (fun (V85, V86, V87, V88) -> V86 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V3))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E24} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V92) -> begin (V93 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V2, V53))))), {'Idris.Prelude.Types.Right', V93} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'dn--un--toBuf_TTC_Nat'(V0, V1, V2) -> ('dn--un--toBuf_TTC_Integer'(V0, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V1)), V2)).
'dn--un--toBuf_TTC_Integer'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V1, 0)) of 1 -> begin (V3 = ('un--tag'(V0, 0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ('dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--toBuf_TTC_Int'(V6, V7, V8)) end end end, fun (V9) -> fun (V10) -> ('dn--un--fromBuf_TTC_Int'(V9, V10)) end end}, V0, ('un--toLimbs'((0 - V1))), V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V11 = ('un--tag'(V0, 1, V2))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> ('dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--toBuf_TTC_Int'(V14, V15, V16)) end end end, fun (V17) -> fun (V18) -> ('dn--un--fromBuf_TTC_Int'(V17, V18)) end end}, V0, ('un--toLimbs'(V1)), V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Int'(V0, V1, V2) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1, -127)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1, 128)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--tag'(V0, ((V1 + 127) rem 9223372036854775808), V2)); 0 -> begin (V3 = ('un--tag'(V0, 255, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V9)), 8)) of 1 -> begin (V46 = begin (V45 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, case V9 of {'Idris.Libraries.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V37, V38, V39, V40) -> V37 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V9 of {'Idris.Libraries.Utils.Binary.MkBin', E8, E9, E10, E11} -> (fun (V41, V42, V43, V44) -> V42 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> begin (V49 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V9))))), {'Idris.Prelude.Types.Right', V49} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V50 = (('un--extendBinary'(8, V9))(V2))), case V50 of {'Idris.Prelude.Types.Left', E14} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V52) -> begin (V89 = begin (V88 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setInt'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> V59 end end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), begin (V67 = (V64(V65))), (V66(V67)) end end end end end end end}, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), ((V71(V73))(V72)) end end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V75(V76))), (V77(V76)) end end end end}, fun (V78) -> fun (V79) -> V79 end end}, case V52 of {'Idris.Libraries.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V80, V81, V82, V83) -> V80 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V52 of {'Idris.Libraries.Utils.Binary.MkBin', E20, E21, E22, E23} -> (fun (V84, V85, V86, V87) -> V85 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V88} end), case V89 of {'Idris.Prelude.Types.Left', E24} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V91) -> begin (V92 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V52))))), {'Idris.Prelude.Types.Right', V92} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Double'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V6)), 8)) of 1 -> begin (V43 = begin (V42 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setDouble'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, case V6 of {'Idris.Libraries.Utils.Binary.MkBin', E2, E3, E4, E5} -> (fun (V34, V35, V36, V37) -> V34 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.Libraries.Utils.Binary.MkBin', E6, E7, E8, E9} -> (fun (V38, V39, V40, V41) -> V39 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V46 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V6))))), {'Idris.Prelude.Types.Right', V46} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V47 = (('un--extendBinary'(8, V6))(V2))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V86 = begin (V85 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setDouble'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, fun (V75) -> fun (V76) -> V76 end end}, case V49 of {'Idris.Libraries.Utils.Binary.MkBin', E14, E15, E16, E17} -> (fun (V77, V78, V79, V80) -> V77 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V49 of {'Idris.Libraries.Utils.Binary.MkBin', E18, E19, E20, E21} -> (fun (V81, V82, V83, V84) -> V82 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E22} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V88) -> begin (V89 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(8, V49))))), {'Idris.Prelude.Types.Right', V89} end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_Char'(V0, V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Int'(V0, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)), V2)) end.
'dn--un--toBuf_TTC_Bool'(V0, V1, V2) -> case V1 of 0 -> ('un--tag'(V0, 0, V2)); 1 -> ('un--tag'(V0, 1, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Binary'(V0, V1) -> begin (V6 = case V1 of {'Idris.Libraries.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V5 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V7) -> begin (V8 = ('dn--un--toBuf_TTC_Int'(V0, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V14)), V6)) of 1 -> begin (V55 = begin (V54 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, case V1 of {'Idris.Libraries.Utils.Binary.MkBin', E8, E9, E10, E11} -> (fun (V42, V43, V44, V45) -> V42 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, V6, case V14 of {'Idris.Libraries.Utils.Binary.MkBin', E12, E13, E14, E15} -> (fun (V46, V47, V48, V49) -> V46 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V14 of {'Idris.Libraries.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V50, V51, V52, V53) -> V51 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E20} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V57) -> begin (V58 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V6, V14))))), {'Idris.Prelude.Types.Right', V58} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V59 = (('un--extendBinary'(V6, V14))(V7))), case V59 of {'Idris.Prelude.Types.Left', E22} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V61) -> begin (V102 = begin (V101 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> V68 end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), begin (V76 = (V73(V74))), (V75(V76)) end end end end end end end}, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), ((V80(V82))(V81)) end end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V84(V85))), (V86(V85)) end end end end}, fun (V87) -> fun (V88) -> V88 end end}, case V1 of {'Idris.Libraries.Utils.Binary.MkBin', E24, E25, E26, E27} -> (fun (V89, V90, V91, V92) -> V89 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, V6, case V61 of {'Idris.Libraries.Utils.Binary.MkBin', E28, E29, E30, E31} -> (fun (V93, V94, V95, V96) -> V93 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V61 of {'Idris.Libraries.Utils.Binary.MkBin', E32, E33, E34, E35} -> (fun (V97, V98, V99, V100) -> V98 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E36} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V104) -> begin (V105 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(V6, V61))))), {'Idris.Prelude.Types.Right', V105} end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V0, V1, V2) -> case V1 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V8 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E2, E3} -> (fun (V6, V7) -> (((V6(V1))(V4))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E6, E7} -> (fun (V11, V12) -> (((V11(V1))(V5))(V3)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(PosMap $a)'(V0, V1, V2, V3) -> ('dn--un--toBuf_TTC_(List $a)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V1, ('Idris.Idris2.Libraries.Data.PosMap':'dn--un--toList_Foldable_PosMap'(V2)), V3)).
'dn--un--toBuf_TTC_(Maybe $a)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--tag'(V1, 0, V3)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = ('un--tag'(V1, 1, V3))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E3, E4} -> (fun (V8, V9) -> (((V8(V1))(V4))(V3)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(List1 $a)'(V0, V1, V2, V3) -> begin (V8 = case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V4, V5) -> (((V4(V1))(case V2 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V6, V7) -> V6 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('dn--un--toBuf_TTC_(List $a)'(V0, V1, case V2 of {'Idris.Data.List1.:::', E6, E7} -> (fun (V11, V12) -> V12 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_(List $a)'(V0, V1, V2, V3) -> begin (V4 = ('dn--un--toBuf_TTC_Int'(V1, ('nested--9275-3244--in--un--TailRec_length'(V0, V2, V1, V2)), V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V7) -> case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E2, E3} -> (fun (V8, V9) -> ((V8(V1))(V7)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2, V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_((Vect $n) $a)'(V0, V1, V2, V3, V4) -> ('nested--9427-3392--in--un--writeAll'(V0, V1, V3, V2, V3, V4)).
'dn--un--toBuf_TTC_((Either $a) $b)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> begin (V5 = ('un--tag'(V1, 0, V3))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E3, E4} -> (fun (V8, V9) -> (((V8(V1))(V4))(V3)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('un--tag'(V1, 1, V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E8, E9} -> (fun (V14, V15) -> (((V14(V1))(V10))(V3)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_((DPair $a) $p)'(V0, V1, V2, V3) -> case V2 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V4, V5) -> begin (V8 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E2, E3} -> (fun (V6, V7) -> (((V6(V1))(V4))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> case (('Idris.Idris2.Builtin':'un--snd'(V0))(V4)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E6, E7} -> (fun (V11, V12) -> (((V11(V1))(V5))(V3)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--fromBuf_TTC_WastefulInt'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V5)), 8)) of 1 -> begin (V42 = begin (V41 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getInt'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E2, E3, E4, E5} -> (fun (V33, V34, V35, V36) -> V33 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E6, E7, E8, E9} -> (fun (V37, V38, V39, V40) -> V38 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(8, V5))))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> {'Idris.Prelude.Types.Right', V44} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Int "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V50, V51)) end end}, {'Idris.Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V53, V54)) end end}}, {'Idris.Builtin.MkPair', case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E14, E15, E16, E17} -> (fun (V55, V56, V57, V58) -> V56 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E18, E19, E20, E21} -> (fun (V59, V60, V61, V62) -> V61 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}))))}}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_String'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Int'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V4, 0)) of 1 -> ('un--corrupt'(<<"String"/utf8>>, V1)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V8)), V4)) of 1 -> begin (V48 = begin (V47 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getString'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E6, E7, E8, E9} -> (fun (V39, V40, V41, V42) -> V39 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E10, E11, E12, E13} -> (fun (V43, V44, V45, V46) -> V44 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))(V1))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E14} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V50) -> begin (V52 = begin (V51 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(V4, V8))))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E16} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V54) -> {'Idris.Prelude.Types.Right', V50} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"String length "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E18, E19, E20, E21} -> (fun (V55, V56, V57, V58) -> V56 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))}}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Nat'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Integer'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Integer'(V0, V1) -> begin (V2 = ('un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V10 = ('dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--toBuf_TTC_Int'(V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> ('dn--un--fromBuf_TTC_Int'(V8, V9)) end end}, V0, V1))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', (0 - ('un--fromLimbs'(V12)))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V18 = ('dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--toBuf_TTC_Int'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> ('dn--un--fromBuf_TTC_Int'(V16, V17)) end end}, V0, V1))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Right', ('un--fromLimbs'(V20))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--corrupt'(<<"Integer"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Int'(V0, V1) -> begin (V2 = ('un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 255 -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V8)), 8)) of 1 -> begin (V45 = begin (V44 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getInt'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E4, E5, E6, E7} -> (fun (V36, V37, V38, V39) -> V36 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E8, E9, E10, E11} -> (fun (V40, V41, V42, V43) -> V41 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E12} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V47) -> begin (V49 = begin (V48 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(8, V8))))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E14} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V51) -> {'Idris.Prelude.Types.Right', V47} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Int "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V53, V54)) end end}, {'Idris.Prelude.Show.MkShow', fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V56, V57)) end end}}, {'Idris.Builtin.MkPair', case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E16, E17, E18, E19} -> (fun (V58, V59, V60, V61) -> V59 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E20, E21, E22, E23} -> (fun (V62, V63, V64, V65) -> V64 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}))))}}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', ((V4 - 127) rem 9223372036854775808)} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Double'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V5)), 8)) of 1 -> begin (V42 = begin (V41 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getDouble'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E2, E3, E4, E5} -> (fun (V33, V34, V35, V36) -> V33 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E6, E7, E8, E9} -> (fun (V37, V38, V39, V40) -> V38 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(8, V5))))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> {'Idris.Prelude.Types.Right', V44} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', <<"Double"/utf8>>}}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Char'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Int'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Bool'(V0, V1) -> begin (V2 = ('un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('un--corrupt'(<<"Bool"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Binary'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Int'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V8)), V4)) of 1 -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V4))(V1))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E6} -> (fun (V40) -> begin (V77 = begin (V76 = (('Idris.Idris2.Erlang.Data.Buffer':'un--copyData'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> V47 end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), begin (V55 = (V52(V53))), (V54(V55)) end end end end end end end}, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), ((V59(V61))(V60)) end end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V63(V64))), (V65(V64)) end end end end}, fun (V66) -> fun (V67) -> V67 end end}, case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E7, E8, E9, E10} -> (fun (V68, V69, V70, V71) -> V68 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V8 of {'Idris.Libraries.Utils.Binary.MkBin', E11, E12, E13, E14} -> (fun (V72, V73, V74, V75) -> V73 end(E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V40, 0))(V1))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E15} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V79) -> begin (V81 = begin (V80 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(V4, V8))))), {'Idris.Prelude.Types.Right', V80} end), case V81 of {'Idris.Prelude.Types.Left', E17} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Utils.Binary.MkBin', V40, 0, V4, V4}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--corrupt'(<<"Binary"/utf8>>, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', <<"Binary"/utf8>>}}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V0, V1) -> {'Idris.Prelude.Types.Right', 0}.
'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2) -> begin (V5 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V3, V4) -> ((V4(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V10 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E4, E5} -> (fun (V8, V9) -> ((V9(V1))(V2)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V12}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(PosMap $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.PosMap':'un--fromList'(('Idris.Idris2.Builtin':'un--snd'(V0)), V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V6) -> ('dn--un--fromBuf_TTC_(List $a)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V1, V6)) end, V2)).
'dn--un--fromBuf_TTC_(Maybe $a)'(V0, V1, V2) -> begin (V3 = ('un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; 1 -> begin (V8 = case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E2, E3} -> (fun (V6, V7) -> ((V7(V1))(V2)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--corrupt'(<<"Maybe"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(List1 $a)'(V0, V1, V2) -> begin (V5 = case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V3, V4) -> ((V4(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--fromBuf_TTC_(List $a)'(V0, V1, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Data.List1.:::', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(List $a)'(V0, V1, V2) -> begin (V3 = ('dn--un--fromBuf_TTC_Int'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (('nested--9279-3278--in--un--readElems'(V0, V1, [], ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V5))))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_((Vect $n) $a)'(V0, V1, V2) -> ('nested--9431-3417--in--un--readElems'(V1, V2, V0, {'Idris.Data.Vect.Nil'}, V0)).
'dn--un--fromBuf_TTC_((Either $a) $b)'(V0, V1, V2) -> begin (V3 = ('un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V8 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E2, E3} -> (fun (V6, V7) -> ((V7(V1))(V2)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V13 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E6, E7} -> (fun (V11, V12) -> ((V12(V1))(V2)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V15}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--corrupt'(<<"Either"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_((DPair $a) $p)'(V0, V1, V2) -> begin (V5 = case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V3, V4) -> ((V4(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V10 = case (('Idris.Idris2.Builtin':'un--snd'(V0))(V7)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E4, E5} -> (fun (V8, V9) -> ((V9(V1))(V2)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, V12}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_TTC_String'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_String'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_String'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Nat'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Nat'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Nat'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Integer'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Integer'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Integer'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Int'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Int'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Int'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Double'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Double'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Double'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Char'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Char'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_Char'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Bool'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Bool'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Bool'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Binary'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Binary'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_Binary'(V2, V3)) end end}.
'dn--un--__Impl_TTC_(|Unit,MkUnit|)'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V3, V4)) end end}.
'dn--un--__Impl_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(PosMap $a)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(PosMap $a)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(PosMap $a)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(Maybe $a)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(Maybe $a)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(Maybe $a)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(List1 $a)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(List1 $a)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(List1 $a)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(List $a)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(List $a)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(List $a)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_((Vect $n) $a)'(V0, V1) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC_((Vect $n) $a)'(V0, V1, V2, V3, V4)) end end end, fun (V5) -> ('dn--un--fromBuf_TTC_((Vect $n) $a)'(V0, V1, V5)) end}.
'dn--un--__Impl_TTC_((Either $a) $b)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_((Either $a) $b)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_((Either $a) $b)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_((DPair $a) $p)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_((DPair $a) $p)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_((DPair $a) $p)'(V0, V4, V5)) end end}.
'un--toLimbs'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V0, 0)) of 1 -> []; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V0, -1)) of 1 -> [-1 | []]; 0 -> [(V0 band 4294967295) | ('un--toLimbs'((V0 bsr 32)))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toBuf'(V0, V1, V2) -> case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V3, V4) -> ((V3(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tag'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--avail'(V6)), 1)) of 1 -> begin (V43 = begin (V42 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setByte'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, case V6 of {'Idris.Libraries.Utils.Binary.MkBin', E2, E3, E4, E5} -> (fun (V34, V35, V36, V37) -> V34 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.Libraries.Utils.Binary.MkBin', E6, E7, E8, E9} -> (fun (V38, V39, V40, V41) -> V39 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V46 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(1, V6))))), {'Idris.Prelude.Types.Right', V46} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V47 = (('un--extendBinary'(1, V6))(V2))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V86 = begin (V85 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setByte'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, fun (V75) -> fun (V76) -> V76 end end}, case V49 of {'Idris.Libraries.Utils.Binary.MkBin', E14, E15, E16, E17} -> (fun (V77, V78, V79, V80) -> V77 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V49 of {'Idris.Libraries.Utils.Binary.MkBin', E18, E19, E20, E21} -> (fun (V81, V82, V83, V84) -> V82 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E22} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V88) -> begin (V89 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--appended'(1, V49))))), {'Idris.Prelude.Types.Right', V89} end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--modTime'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fileModifiedTime'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Right', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V33} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V34) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initBinaryS'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Just', E2} -> (fun (V33) -> ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, ('Idris.Idris2.Libraries.Utils.Binary':'un--newBinary'(V33, V0)), V1)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Buffer creation failed"/utf8>>}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initBinary'(V0) -> begin (V29 = begin (V28 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, ('Idris.Idris2.Libraries.Utils.Binary':'un--blockSize'())))(V0))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> case V31 of {'Idris.Prelude.Types.Just', E2} -> (fun (V32) -> ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, ('Idris.Idris2.Libraries.Utils.Binary':'un--newBinary'(V32, ('Idris.Idris2.Libraries.Utils.Binary':'un--blockSize'()))), V0)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Buffer creation failed"/utf8>>}, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hashFileWith'(V0, V1, V2) -> ('un--hashFile'(V1, V2)).
'un--hashFile'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Right', E2} -> (fun (V33) -> begin (V34 = ('erlang':'apply'('crypto', 'hash', ['sha256' | [V33 | []]]))), begin (V35 = ('erlang':'apply'('binary', 'decode_unsigned', [V34 | []]))), case ('erlang':'apply'('io_lib', 'format', [<<"~64.16.0b"/utf8>> | [[V35 | []] | []]])) of E3 -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V36}} end((fun (V37) -> ('unicode':'characters_to_binary'(V37)) end(E3)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTag'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Libraries.Utils.Binary':'un--toRead'(V5)), 1)) of 1 -> begin (V42 = begin (V41 = (('Idris.Idris2.Erlang.Data.Buffer':'un--getByte'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E2, E3, E4, E5} -> (fun (V33, V34, V35, V36) -> V33 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Libraries.Utils.Binary.MkBin', E6, E7, E8, E9} -> (fun (V37, V38, V39, V40) -> V38 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Utils.Binary':'un--incLoc'(1, V5))))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> {'Idris.Prelude.Types.Right', V44} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.EndOfBuffer', <<"Byte"/utf8>>}}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromLimbs'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> (('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1)) + (('un--fromLimbs'(V2)) bsl 32)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromBuf'(V0, V1) -> case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E0, E1} -> (fun (V2, V3) -> (V3(V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extendBinary'(V0, V1) -> case V1 of {'Idris.Libraries.Utils.Binary.MkBin', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> begin (V6 = ((V4 * 2) rem 9223372036854775808)), begin (V7 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(((V6 - V3) rem 9223372036854775808), V0)) of 1 -> ((V6 + V0) rem 9223372036854775808); 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.Buffer':'un--resizeBuffer'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V2, V7))(V8))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E6} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Utils.Binary.MkBin', V40, V3, V7, V5}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Buffer expansion failed"/utf8>>}, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--corrupt'(V0, V1) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.Corrupt', V0}}, V1)).
'un--Wasteful'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_WastefulInt'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_WastefulInt'(V3, V4)) end end}.
