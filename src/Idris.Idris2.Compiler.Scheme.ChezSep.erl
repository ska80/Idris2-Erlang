-module('Idris.Idris2.Compiler.Scheme.ChezSep').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--chezNS-915'/2,
  'nested--9736-928--in--un--min1'/2,
  'un--touch'/2,
  'un--startChezWinSh'/3,
  'un--startChezCmd'/3,
  'un--startChez'/3,
  'un--schHeader'/2,
  'un--schFooter'/0,
  'un--makeShWindows'/4,
  'un--makeSh'/5,
  'un--executeExpr'/4,
  'un--compileToSS'/5,
  'un--compileLibrary'/6,
  'un--compileExpr'/7,
  'un--compileChezProgram'/4,
  'un--compileChezLibrary'/4,
  'un--compileChezLibraries'/4,
  'un--codegenChezSep'/0,
  'un--chezNS'/1,
  'un--chezLibraryName'/1
]).
'case--chezNS-915'(V0, V1) -> case V1 of <<""/utf8>> -> <<"unqualified"/utf8>>; _ -> V1 end.
'nested--9736-928--in--un--min1'(V0, V1) -> case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_Namespace'(V4, V5)) end end, V2, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--touch'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> begin (V33 = (('Idris.Idris2.Erlang.System':'un--system'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"touch \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<"\x{22}"/utf8>>))))))(V5))), {'Idris.Prelude.Types.Right', V33} end end, V1)).
'un--startChezWinSh'(V0, V1, V2) -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"#!/bin/sh"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"# "/utf8>>, ('Idris.Idris2.Compiler.Generated':'un--generatedString'(<<"Chez"/utf8>>)))) | [<<""/utf8>> | [<<"set -e # exit on any error"/utf8>> | [<<""/utf8>> | [<<"DIR=$(dirname \x{22}$(readlink -f -- \x{22}$0\x{22} || cygpath -a -- \x{22}$0\x{22})\x{22})"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"PATH=\x{22}$DIR/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<":$PATH\x{22}"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} --program \x{22}$DIR/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<"\x{22} \x{22}$@\x{22}"/utf8>>)))))))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} -q "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--libdirs \x{22}$DIR/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--program \x{22}$DIR/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} "/utf8>>, <<"\x{22}$@\x{22}"/utf8>>)))))))))))))))))) | []]]]]]]]]])).
'un--startChezCmd'(V0, V1, V2) -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"@echo off"/utf8>> | [<<"set APPDIR=%~dp0"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"set PATH=%APPDIR%"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<";%PATH%"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} -q "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--libdirs \x{22}%APPDIR%"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--program \x{22}%APPDIR%"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} "/utf8>>, <<"%*"/utf8>>)))))))))))))))))) | []]]]])).
'un--startChez'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Scheme.Chez':'un--startChezPreamble'()), ('Idris.Idris2.Data.String':'un--fastUnlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"export LD_LIBRARY_PATH=\x{22}$DIR/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<":$LD_LIBRARY_PATH\x{22}"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} -q "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--libdirs \x{22}$DIR/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--program \x{22}$DIR/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22} "/utf8>>, <<"\x{22}$@\x{22}"/utf8>>)))))))))))))))))) | []]])))).
'un--schHeader'(V0, V1) -> ('Idris.Idris2.Data.String':'un--fastUnlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(import (chezscheme) (support) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V1, fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<")"/utf8>>)))))) end)))), <<")"/utf8>>)))) | [<<"(case (machine-type)"/utf8>> | [<<"  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object \x{22}libc.so.6\x{22})]"/utf8>> | [<<"  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object \x{22}libc.dylib\x{22})]"/utf8>> | [<<"  [(i3nt ti3nt a6nt ta6nt) (load-shared-object \x{22}msvcrt.dll\x{22})"/utf8>> | [<<"                           (load-shared-object \x{22}ws2_32.dll\x{22})]"/utf8>> | [<<"  [else (load-shared-object \x{22}libc.so\x{22})]"/utf8>> | [('Idris.Idris2.Data.String':'un--fastUnlines'(('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V0, fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  (load-shared-object \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Utils.String':'un--escapeStringChez'(V3)), <<"\x{22})"/utf8>>)))))) end)))) | [<<")"/utf8>> | []]]]]]]]]])).
'un--schFooter'() -> <<"(collect 4)\x{a}(blodwen-run-finalisers)\x{a}"/utf8>>.
'un--makeShWindows'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<".cmd"/utf8>>))), fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--writeFile'(V4, ('un--startChezCmd'(V0, V2, V3)), V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Core':'un--writeFile'(V1, ('un--startChezWinSh'(V0, V2, V3)), V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--makeSh'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Core.Core':'un--writeFile'(V1, ('un--startChez'(V0, V2, V3)), V4)).
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('un--compileExpr'(0, V0, V1, V1, V2, <<"_tmpchez"/utf8>>, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Right', 0} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> begin (V39 = (('Idris.Idris2.Erlang.System':'un--system'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, V7))(V11))), {'Idris.Prelude.Types.Right', V39} end end, V3)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"compileExpr returned Nothing"/utf8>>}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileToSS'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, {'Idris.Core.Options.Chez'}, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = (('Idris.Idris2.Compiler.Scheme.Chez':'un--findLibs'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Builtin':'un--snd'(V8)) end, V7))))(V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V12) -> fun (V13) -> ('Idris.Idris2.Compiler.Common':'un--copyLib'(V12, V13)) end end, V11, V4))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V18 = begin (V17 = ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezVersion'(V1, V4))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 0, V3, V4))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> begin (V29 = ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V23 of {'Idris.Compiler.Common.MkCompileData', E10, E11, E12, E13, E14} -> (fun (V24, V25, V26, V27, V28) -> V24 end(E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V35 = case V23 of {'Idris.Compiler.Common.MkCompileData', E15, E16, E17, E18, E19} -> (fun (V30, V31, V32, V33, V34) -> V31 end(E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V38 = ('Idris.Idris2.Compiler.Separate':'un--getCompilationUnits'(fun (V36) -> ('Idris.Idris2.Compiler.Separate':'dn--un--nsRefs_HasNamespaces_(|((Builtin.Pair FC) $a),((Builtin.MkPair FC) $a)|)'(fun (V37) -> ('Idris.Idris2.Compiler.Separate':'dn--un--nsRefs_HasNamespaces_NamedDef'(V37)) end, V36)) end, V35))), begin (V39 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"chez/support-sep.ss"/utf8>>, V4))), case V39 of {'Idris.Prelude.Types.Left', E20} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_String'(V41))))), begin (V76 = begin (V71 = begin (V70 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"support.hash"/utf8>>))))(V4))), {'Idris.Prelude.Types.Right', V70} end), case V71 of {'Idris.Prelude.Types.Left', E22} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V73) -> case V73 of {'Idris.Prelude.Types.Left', E24} -> (fun (V74) -> {'Idris.Prelude.Types.Right', 1} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V75) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V75, V42))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V76 of {'Idris.Prelude.Types.Left', E26} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V78) -> begin (V82 = case V78 of 1 -> begin (V79 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"support.ss"/utf8>>)), V41, V4))), case V79 of {'Idris.Prelude.Types.Left', E28} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V81) -> ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"support.hash"/utf8>>)), V42, V4)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V82 of {'Idris.Prelude.Types.Left', E30} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V84) -> begin (V239 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V85, V86, [], V87)) end end end, case V38 of {'Idris.Compiler.Separate.MkCompilationUnitInfo', E32, E33, E34} -> (fun (V88, V89, V90) -> V88 end(E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V91) -> begin (V92 = ('un--chezLibraryName'(V91))), begin (V102 = ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Compiler.Separate':'dn--un--hash_Hashable_(CompilationUnit $def)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V93) -> ('Idris.Idris2.Compiler.Separate':'dn--un--hash_Hashable_(|((Builtin.Pair FC) $def),((Builtin.MkPair FC) $def)|)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V94) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_NamedDef'(V94)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_NamedDef'(V95, V96)) end end}, V93)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Compiler.Separate':'dn--un--hashWithSalt_Hashable_(|((Builtin.Pair FC) $def),((Builtin.MkPair FC) $def)|)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V99) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_NamedDef'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_NamedDef'(V100, V101)) end end}, V97, V98)) end end}, V91))))), fun (V103) -> begin (V137 = begin (V132 = begin (V131 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> V110 end end end, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> begin (V117 = (V114(V116))), begin (V118 = (V115(V116))), (V117(V118)) end end end end end end end}, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> begin (V124 = (V121(V123))), ((V122(V124))(V123)) end end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> begin (V128 = (V126(V127))), (V128(V127)) end end end end}, fun (V129) -> fun (V130) -> V130 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V92, <<"hash"/utf8>>))))))(V103))), {'Idris.Prelude.Types.Right', V131} end), case V132 of {'Idris.Prelude.Types.Left', E35} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V134) -> case V134 of {'Idris.Prelude.Types.Left', E37} -> (fun (V135) -> {'Idris.Prelude.Types.Right', 1} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V136) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V136, V102))} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V137 of {'Idris.Prelude.Types.Left', E39} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V139) -> begin (V236 = case V139 of 1 -> begin (V141 = begin (V140 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E41} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V143) -> begin (V144 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Scheme.Chez.Loaded'}, [<<"libc"/utf8>> | [<<"libc 6"/utf8>> | []]], V103))), case V144 of {'Idris.Prelude.Types.Left', E43} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V146) -> begin (V147 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Scheme.Chez.Structs'}, [], V103))), case V147 of {'Idris.Prelude.Types.Left', E45} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V149) -> begin (V159 = ('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'(case V91 of {'Idris.Compiler.Separate.MkCompilationUnit', E47, E48, E49, E50} -> (fun (V150, V151, V152, V153) -> V152 end(E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V154) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<"unqualified"/utf8>> end, fun () -> fun (V155) -> ('un--chezLibraryName'(V155)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V154, case V38 of {'Idris.Compiler.Separate.MkCompilationUnitInfo', E51, E52, E53} -> (fun (V156, V157, V158) -> V157 end(E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), <<")"/utf8>>)))))) end))))), begin (V200 = ('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V162, V163, V164)) end end end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V167, V168, V169)) end end end end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V171)) end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V175, V176, V177, V178)) end end end end end end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V180)) end end, fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V183, V184, V185)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V186, V187)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(case V91 of {'Idris.Compiler.Separate.MkCompilationUnit', E54, E55, E56, E57} -> (fun (V188, V189, V190, V191) -> V191 end(E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V192) -> case V192 of {'Idris.Builtin.MkPair', E58, E59} -> (fun (V193, V194) -> case V194 of {'Idris.Builtin.MkPair', E60, E61} -> (fun (V195, V196) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(case V196 of {'Idris.Core.CompileExpr.MkNmCon', E62, E63, E64} -> (fun (V197, V198, V199) -> [] end(E62, E63, E64)); _ -> [('Idris.Idris2.Compiler.Scheme.Common':'un--schName'(V193)) | []] end)) end(E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))))))), begin (V201 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(library ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V92, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  (export "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V200, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  (import (chezscheme) (support) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V159, <<")\x{a}\x{a}"/utf8>>))))))))))))))))), begin (V202 = <<")"/utf8>>), begin (V208 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V203) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--getFgnCall'(V0, V146, V149, V20, V203)) end, case V91 of {'Idris.Compiler.Separate.MkCompilationUnit', E65, E66, E67, E68} -> (fun (V204, V205, V206, V207) -> V207 end(E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V103))), case V208 of {'Idris.Prelude.Types.Left', E69} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V210) -> begin (V220 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V211) -> ('Idris.Idris2.Compiler.Scheme.Common':'un--getScheme'(V0, fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezExtPrim'(V212, V213, V214)) end end end, fun (V215) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V215)) end, V211)) end, case V91 of {'Idris.Compiler.Separate.MkCompilationUnit', E71, E72, E73, E74} -> (fun (V216, V217, V218, V219) -> V219 end(E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V103))), case V220 of {'Idris.Prelude.Types.Left', E75} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V222) -> begin (V226 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V223) -> fun (V224) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--loadLib'(V0, V2, V223, V224)) end end, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V225) -> ('Idris.Idris2.Builtin':'un--fst'(V225)) end, V210)), [], V103))), case V226 of {'Idris.Prelude.Types.Left', E77} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V228) -> begin (V229 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.scheme.chez"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generating code for "/utf8>>, V92)) end, V103))), case V229 of {'Idris.Prelude.Types.Left', E79} -> (fun (V230) -> {'Idris.Prelude.Types.Left', V230} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V231) -> begin (V233 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V92, <<"ss"/utf8>>)))), ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V201 | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V232) -> ('Idris.Idris2.Builtin':'un--snd'(V232)) end, V210)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V222, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V228, [V202 | []])))))))))), V103))), case V233 of {'Idris.Prelude.Types.Left', E81} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V235) -> ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V92, <<"hash"/utf8>>)))), V102, V103)) end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V236 of {'Idris.Prelude.Types.Left', E83} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V238) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Scheme.ChezSep.MkChezLib', V92, V139}} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end))(V4))), case V239 of {'Idris.Prelude.Types.Left', E85} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V241) -> begin (V246 = (('Idris.Idris2.Compiler.Scheme.Common':'un--schExp'(fun (V242) -> fun (V243) -> fun (V244) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezExtPrim'(V242, V243, V244)) end end end, fun (V245) -> ('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V245)) end, 0, V29))(V4))), case V246 of {'Idris.Prelude.Types.Left', E87} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V248) -> begin (V253 = ('Idris.Idris2.Core.Core':'un--writeFile'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, <<"mainprog.ss"/utf8>>)), ('Idris.Idris2.Data.String':'un--fastUnlines'([('un--schHeader'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V249) -> ('Idris.Idris2.Builtin':'un--snd'(V249)) end, V11)), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V241, fun (V250) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(case V250 of {'Idris.Compiler.Scheme.ChezSep.MkChezLib', E89, E90} -> (fun (V251, V252) -> V251 end(E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end)))) | [<<"(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))"/utf8>> | [V248 | [('un--schFooter'()) | []]]]])), V4))), case V253 of {'Idris.Prelude.Types.Left', E91} -> (fun (V254) -> {'Idris.Prelude.Types.Left', V254} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V255) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V78, V241}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileLibrary'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Compiling to library is not supported."/utf8>>))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5, V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}))(V6))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E0} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E2} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<"_app"/utf8>>))), begin (V40 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, V39))), begin (V46 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E3} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V44) -> begin (V45 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V40, V44))), {'Idris.Prelude.Types.Right', V45} end end, V6))), case V46 of {'Idris.Prelude.Types.Left', E5} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V48) -> begin (V50 = begin (V49 = ('Idris.Idris2.Compiler.Scheme.Chez':'un--findChez'(V6))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E7} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V52) -> begin (V53 = ('un--compileToSS'(V1, V52, V40, V4, V6))), case V53 of {'Idris.Prelude.Types.Left', E9} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V56, V57) -> begin (V118 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, fun () -> <<"++ Make SO"/utf8>> end, fun (V58) -> case V0 of 1 -> begin (V62 = case V56 of 1 -> begin (V59 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compiler.scheme.chez"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Compiling support"/utf8>> end, V58))), case V59 of {'Idris.Prelude.Types.Left', E13} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V61) -> ('un--compileChezLibrary'(V52, V40, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V40, <<"support.ss"/utf8>>)), V58)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V62 of {'Idris.Prelude.Types.Left', E15} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V64) -> begin (V100 = ('un--compileChezLibraries'(V52, V40, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V57, fun (V65) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V68, V69)) end end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V71)) end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V74, V75)) end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V78, V79)) end end end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'(V81)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V84, V85)) end end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V87)) end end, fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V90, V91)) end end end end}, fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_List'()) end, fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_List'(V94, V95)) end end end}, case V65 of {'Idris.Compiler.Scheme.ChezSep.MkChezLib', E17, E18} -> (fun (V96, V97) -> V97 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V40, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(case V65 of {'Idris.Compiler.Scheme.ChezSep.MkChezLib', E19, E20} -> (fun (V98, V99) -> V98 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"ss"/utf8>>)))))) end)) end)), V58))), case V100 of {'Idris.Prelude.Types.Left', E21} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V102) -> begin (V115 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Core':'un--traverse_'(V103, V104, V105)) end end end, V57, fun (V106) -> fun (V107) -> begin (V110 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"compiler.scheme.chez"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Touching "/utf8>>, case V106 of {'Idris.Compiler.Scheme.ChezSep.MkChezLib', E23, E24} -> (fun (V108, V109) -> V108 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V107))), case V110 of {'Idris.Prelude.Types.Left', E25} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V112) -> ('un--touch'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V40, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(case V106 of {'Idris.Compiler.Scheme.ChezSep.MkChezLib', E27, E28} -> (fun (V113, V114) -> V113 end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"so"/utf8>>)))), V107)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end))(V58))), case V115 of {'Idris.Prelude.Types.Left', E29} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V117) -> ('un--compileChezProgram'(V52, V40, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V40, <<"mainprog.ss"/utf8>>)), V58)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6))), case V118 of {'Idris.Prelude.Types.Left', E31} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V120) -> begin (V121 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, V5))), begin (V122 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V39, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(<<"mainprog"/utf8>>, case V0 of 1 -> <<"so"/utf8>>; 0 -> <<"ss"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V123 = case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> (('un--makeShWindows'(V52, V121, V39, V122))(V6)); 0 -> ('un--makeSh'(V52, V121, V39, V122, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V123 of {'Idris.Prelude.Types.Left', E33} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V125) -> begin (V158 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V126) -> case V126 of {'Idris.Prelude.Types.Left', E35} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V128) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V129) -> begin (V157 = (('Idris.Idris2.Erlang.System.File':'un--chmodRaw'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V132, V133, V134)) end end end end end, fun (V135) -> fun (V136) -> fun (V137) -> V136 end end end, fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> begin (V143 = (V140(V142))), begin (V144 = (V141(V142))), (V143(V144)) end end end end end end end}, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), ((V148(V150))(V149)) end end end end end end, fun (V151) -> fun (V152) -> fun (V153) -> begin (V154 = (V152(V153))), (V154(V153)) end end end end}, fun (V155) -> fun (V156) -> V156 end end}, V121, 493))(V129))), {'Idris.Prelude.Types.Right', V157} end end, V6))), case V158 of {'Idris.Prelude.Types.Left', E37} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V160) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V121}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileChezProgram'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> begin (V35 = (('Idris.Idris2.Erlang.System':'un--system'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, ('Idris.Idris2.Data.String':'un--unwords'([<<"echo"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}(parameterize ([optimize-level 3] [compile-file-message #f]) (compile-program "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2)), <<"))\x{27}"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}(delete-file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2)), <<")\x{27}"/utf8>>)))) | [<<"|"/utf8>> | [V0 | [<<"-q"/utf8>> | [<<"--libdirs"/utf8>> | [V1 | []]]]]]]]]))))(V7))), {'Idris.Prelude.Types.Right', V35} end end, V3)).
'un--compileChezLibrary'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> begin (V35 = (('Idris.Idris2.Erlang.System':'un--system'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, ('Idris.Idris2.Data.String':'un--unwords'([<<"echo"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}(parameterize ([optimize-level 3] [compile-file-message #f]) (compile-library "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2)), <<"))\x{27}"/utf8>>)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}(delete-file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V2)), <<")\x{27}"/utf8>>)))) | [<<"|"/utf8>> | [V0 | [<<"-q"/utf8>> | [<<"--libdirs"/utf8>> | [V1 | []]]]]]]]]))))(V7))), {'Idris.Prelude.Types.Right', V35} end end, V3)).
'un--compileChezLibraries'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> begin (V36 = (('Idris.Idris2.Erlang.System':'un--system'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, ('Idris.Idris2.Data.String':'un--unwords'([<<"echo"/utf8>> | [('Idris.Idris2.Data.String':'un--unwords'(('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V2, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}(parameterize ([optimize-level 3] [compile-file-message #f]) (compile-library "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V35)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"))\x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" \x{27}(delete-file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.Scheme.Chez':'un--chezString'(V35)), <<")\x{27}"/utf8>>)))))))))))) end)))) | [<<"|"/utf8>> | [V0 | [<<"-q"/utf8>> | [<<"--libdirs"/utf8>> | [V1 | []]]]]]]]))))(V7))), {'Idris.Prelude.Types.Right', V36} end end, V3)).
'un--codegenChezSep'() -> {'Idris.Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(1, V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('un--compileLibrary'(V10, V11, V12, V13, V14, V15)) end end end end end end, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}.
'un--chezNS'(V0) -> ('case--chezNS-915'(V0, ('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V0)))).
'un--chezLibraryName'(V0) -> ('un--chezNS'(('nested--9736-928--in--un--min1'(V0, case V0 of {'Idris.Compiler.Separate.MkCompilationUnit', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))).
