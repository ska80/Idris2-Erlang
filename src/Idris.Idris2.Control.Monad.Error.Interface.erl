-module('Idris.Idris2.Control.Monad.Error.Interface').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--throwError_MonadError_(|Unit,MkUnit|)_Maybe'/1,
  'dn--un--throwError_MonadError_$e_(MaybeT $m)'/2,
  'dn--un--throwError_MonadError_$e_(Either $e)'/1,
  'dn--un--throwError_MonadError_$e_((WriterT $w) $m)'/3,
  'dn--un--throwError_MonadError_$e_((StateT $r) $m)'/3,
  'dn--un--throwError_MonadError_$e_((ReaderT $r) $m)'/3,
  'dn--un--throwError_MonadError_$e_((EitherT $e) $m)'/2,
  'dn--un--throwError_MonadError_$e_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--catchError_MonadError_(|Unit,MkUnit|)_Maybe'/2,
  'dn--un--catchError_MonadError_$e_(MaybeT $m)'/3,
  'dn--un--catchError_MonadError_$e_(Either $e)'/2,
  'dn--un--catchError_MonadError_$e_((WriterT $w) $m)'/4,
  'dn--un--catchError_MonadError_$e_((StateT $r) $m)'/4,
  'dn--un--catchError_MonadError_$e_((ReaderT $r) $m)'/4,
  'dn--un--catchError_MonadError_$e_((EitherT $e) $m)'/3,
  'dn--un--catchError_MonadError_$e_((((RWST $r) $w) $s) $m)'/6,
  'dn--un--__MonadError_(Monad m)'/1,
  'dn--un--__Impl_MonadError_(|Unit,MkUnit|)_Maybe'/0,
  'dn--un--__Impl_MonadError_$e_(MaybeT $m)'/1,
  'dn--un--__Impl_MonadError_$e_(Either $e)'/0,
  'dn--un--__Impl_MonadError_$e_((WriterT $w) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((StateT $r) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((ReaderT $r) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((EitherT $e) $m)'/1,
  'dn--un--__Impl_MonadError_$e_((((RWST $r) $w) $s) $m)'/1,
  'un--withError'/3,
  'un--tryError'/2,
  'un--throwError'/2,
  'un--mapError'/3,
  'un--liftEither'/2,
  'un--handleError'/3,
  'un--catchError'/3
]).
'dn--un--throwError_MonadError_(|Unit,MkUnit|)_Maybe'(V0) -> case V0 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--throwError_MonadError_$e_(MaybeT $m)'(V0, V1) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V2, V3, V4) -> V2 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E3, E4, E5} -> (fun (V5, V6, V7) -> ((V6('erased'))(V1)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--throwError_MonadError_$e_(Either $e)'(V0) -> {'Idris.Prelude.Types.Left', V0}.
'dn--un--throwError_MonadError_$e_((WriterT $w) $m)'(V0, V1, V2) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V9, V10, V11) -> ((((V9('erased'))('erased'))(fun (V15) -> {'Idris.Builtin.MkPair', V15, V2} end))(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E9, E10, E11} -> (fun (V12, V13, V14) -> ((V13('erased'))(V1)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--throwError_MonadError_$e_((StateT $r) $m)'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--lift_MonadTrans_(StateT $stateType)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E3, E4, E5} -> (fun (V6, V7, V8) -> ((V7('erased'))(V1)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--throwError_MonadError_$e_((ReaderT $r) $m)'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E3, E4, E5} -> (fun (V6, V7, V8) -> ((V7('erased'))(V1)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--throwError_MonadError_$e_((EitherT $e) $m)'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V2, V3, V4) -> case V2 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V5, V6, V7) -> ((V6('erased'))({'Idris.Prelude.Types.Left', V1})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--throwError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V11, V12, V13) -> ((((V11('erased'))('erased'))(fun (V17) -> {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', V3, V4}} end))(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E9, E10, E11} -> (fun (V14, V15, V16) -> ((V15('erased'))(V1)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--catchError_MonadError_(|Unit,MkUnit|)_Maybe'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (V1(0)) end()); _ -> V0 end.
'dn--un--catchError_MonadError_$e_(MaybeT $m)'(V0, V1, V2) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> (((V5('erased'))(V1))(fun (V6) -> (V2(V6)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--catchError_MonadError_$e_(Either $e)'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> (V1(V2)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V3} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--catchError_MonadError_$e_((WriterT $w) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V4, V5, V6) -> (((V6('erased'))((V1(V3))))(fun (V7) -> ((V2(V7))(V3)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--catchError_MonadError_$e_((StateT $r) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V4, V5, V6) -> (((V6('erased'))((V1(V3))))(fun (V7) -> ((V2(V7))(V3)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--catchError_MonadError_$e_((ReaderT $r) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V4, V5, V6) -> (((V6('erased'))((V1(V3))))(fun (V7) -> ((V2(V7))(V3)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--catchError_MonadError_$e_((EitherT $e) $m)'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.Error.Either':'un--catchE'(V0, V1, V2)).
'dn--un--catchError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V6, V7, V8) -> (((V8('erased'))((((V1(V3))(V4))(V5))))(fun (V9) -> ((((V2(V9))(V3))(V4))(V5)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__MonadError_(Monad m)'(V0) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_MonadError_(|Unit,MkUnit|)_Maybe'() -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V8, V9)) end end end end}, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V12, V13)) end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V15)) end end}, fun (V16) -> fun (V17) -> ('dn--un--throwError_MonadError_(|Unit,MkUnit|)_Maybe'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--catchError_MonadError_(|Unit,MkUnit|)_Maybe'(V19, V20)) end end end}.
'dn--un--__Impl_MonadError_$e_(MaybeT $m)'(V0) -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--map_Functor_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V11, V12, V13) -> V11 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--pure_Applicative_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E9, E10, E11} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V19, V20, V21) -> V19 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--<*>_Applicative_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E15, E16, E17} -> (fun (V26, V27, V28) -> case V26 of {'Idris.Prelude.Interfaces.MkMonad', E18, E19, E20} -> (fun (V29, V30, V31) -> V29 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V24, V25)) end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un-->>=_Monad_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E21, E22, E23} -> (fun (V36, V37, V38) -> V36 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34, V35)) end end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--join_Monad_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E24, E25, E26} -> (fun (V41, V42, V43) -> V41 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V40)) end end}, fun (V44) -> fun (V45) -> ('dn--un--throwError_MonadError_$e_(MaybeT $m)'(V0, V45)) end end, fun (V46) -> fun (V47) -> fun (V48) -> ('dn--un--catchError_MonadError_$e_(MaybeT $m)'(V0, V47, V48)) end end end}.
'dn--un--__Impl_MonadError_$e_(Either $e)'() -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V2(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', V7} end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V11 of {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Right', (V13(V14))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(V18, V19)) end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_(Either $e)'(V21)) end end}, fun (V22) -> fun (V23) -> ('dn--un--throwError_MonadError_$e_(Either $e)'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--catchError_MonadError_$e_(Either $e)'(V25, V26)) end end end}.
'dn--un--__Impl_MonadError_$e_((WriterT $w) $m)'(V0) -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V12, V13, V14) -> V12 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V16, V17) -> {'Idris.Builtin.MkPair', (V3(V16)), V17} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V4(V5)))) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E11, E12, E13} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V24, V25, V26) -> case V24 of {'Idris.Prelude.Interfaces.MkApplicative', E17, E18, E19} -> (fun (V27, V28, V29) -> ((V28('erased'))({'Idris.Builtin.MkPair', V19, V20})) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E20, E21, E22} -> (fun (V35, V36, V37) -> case V35 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V38, V39, V40) -> ((((V39('erased'))('erased'))((V32(V34))))(fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V42, V43) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E28, E29, E30} -> (fun (V44, V45, V46) -> case V44 of {'Idris.Prelude.Interfaces.MkMonad', E31, E32, E33} -> (fun (V47, V48, V49) -> ((((V48('erased'))('erased'))((V33(V43))))(fun (V50) -> case V50 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V51, V52) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E36, E37, E38} -> (fun (V53, V54, V55) -> case V53 of {'Idris.Prelude.Interfaces.MkMonad', E39, E40, E41} -> (fun (V56, V57, V58) -> case V56 of {'Idris.Prelude.Interfaces.MkApplicative', E42, E43, E44} -> (fun (V59, V60, V61) -> ((V60('erased'))({'Idris.Builtin.MkPair', (V42(V51)), V52})) end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E45, E46, E47} -> (fun (V67, V68, V69) -> case V67 of {'Idris.Prelude.Interfaces.MkMonad', E48, E49, E50} -> (fun (V70, V71, V72) -> ((((V71('erased'))('erased'))((V64(V66))))(fun (V73) -> case V73 of {'Idris.Builtin.MkPair', E51, E52} -> (fun (V74, V75) -> ((V65(V74))(V75)) end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E53, E54, E55} -> (fun (V79, V80, V81) -> case V79 of {'Idris.Prelude.Interfaces.MkMonad', E56, E57, E58} -> (fun (V82, V83, V84) -> ((((V83('erased'))('erased'))((V77(V78))))(fun (V85) -> case V85 of {'Idris.Builtin.MkPair', E59, E60} -> (fun (V86, V87) -> (V86(V87)) end(E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}, fun (V88) -> fun (V89) -> fun (V90) -> ('dn--un--throwError_MonadError_$e_((WriterT $w) $m)'(V0, V89, V90)) end end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('dn--un--catchError_MonadError_$e_((WriterT $w) $m)'(V0, V92, V93, V94)) end end end end}.
'dn--un--__Impl_MonadError_$e_((StateT $r) $m)'(V0) -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V12, V13, V14) -> V12 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E9, E10, E11} -> (fun (V18, V19, V20) -> V18 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16, V17)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E12, E13, E14} -> (fun (V26, V27, V28) -> V26 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V23, V24, V25)) end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E15, E16, E17} -> (fun (V34, V35, V36) -> V34 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V31, V32, V33)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E18, E19, E20} -> (fun (V40, V41, V42) -> V40 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V38, V39)) end end end}, fun (V43) -> fun (V44) -> fun (V45) -> ('dn--un--throwError_MonadError_$e_((StateT $r) $m)'(V0, V44, V45)) end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('dn--un--catchError_MonadError_$e_((StateT $r) $m)'(V0, V47, V48, V49)) end end end end}.
'dn--un--__Impl_MonadError_$e_((ReaderT $r) $m)'(V0) -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V12, V13, V14) -> V12 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--pure_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E9, E10, E11} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V21, V22, V23) -> V21 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16, V17)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E15, E16, E17} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkMonad', E18, E19, E20} -> (fun (V32, V33, V34) -> V32 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V27, V28)) end end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un-->>=_Monad_((ReaderT $stateType) $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E21, E22, E23} -> (fun (V40, V41, V42) -> V40 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V37, V38, V39)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--join_Monad_((ReaderT $stateType) $m)'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E24, E25, E26} -> (fun (V46, V47, V48) -> V46 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44, V45)) end end end}, fun (V49) -> fun (V50) -> fun (V51) -> ('dn--un--throwError_MonadError_$e_((ReaderT $r) $m)'(V0, V50, V51)) end end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('dn--un--catchError_MonadError_$e_((ReaderT $r) $m)'(V0, V53, V54, V55)) end end end end}.
'dn--un--__Impl_MonadError_$e_((EitherT $e) $m)'(V0) -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E6, E7, E8} -> (fun (V13, V14, V15) -> V13 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V20, V21, V22) -> V20 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18, V19)) end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(V0, V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--join_Monad_((EitherT $e) $m)'(V0, V28)) end end}, fun (V29) -> fun (V30) -> ('dn--un--throwError_MonadError_$e_((EitherT $e) $m)'(V0, V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> ('dn--un--catchError_MonadError_$e_((EitherT $e) $m)'(V0, V32, V33)) end end end}.
'dn--un--__Impl_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0) -> {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V14, V15, V16) -> V14 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V20, V21) -> {'Idris.Builtin.MkPair', (V3(V18)), {'Idris.Builtin.MkPair', V20, V21}} end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (((V4(V5))(V6))(V7)))) end end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E13, E14, E15} -> (fun (V27, V28, V29) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E16, E17, E18} -> (fun (V30, V31, V32) -> case V30 of {'Idris.Prelude.Interfaces.MkApplicative', E19, E20, E21} -> (fun (V33, V34, V35) -> ((V34('erased'))({'Idris.Builtin.MkPair', V23, {'Idris.Builtin.MkPair', V25, V26}})) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E22, E23, E24} -> (fun (V43, V44, V45) -> case V43 of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V46, V47, V48) -> ((((V47('erased'))('erased'))((((V38(V40))(V41))(V42))))(fun (V49) -> case V49 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V50, V51) -> case V51 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V52, V53) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E32, E33, E34} -> (fun (V54, V55, V56) -> case V54 of {'Idris.Prelude.Interfaces.MkMonad', E35, E36, E37} -> (fun (V57, V58, V59) -> ((((V58('erased'))('erased'))((((V39(V40))(V52))(V53))))(fun (V60) -> case V60 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V61, V62) -> case V62 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V63, V64) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E42, E43, E44} -> (fun (V65, V66, V67) -> case V65 of {'Idris.Prelude.Interfaces.MkMonad', E45, E46, E47} -> (fun (V68, V69, V70) -> case V68 of {'Idris.Prelude.Interfaces.MkApplicative', E48, E49, E50} -> (fun (V71, V72, V73) -> ((V72('erased'))({'Idris.Builtin.MkPair', (V50(V61)), {'Idris.Builtin.MkPair', V63, V64}})) end(E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end}, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E51, E52, E53} -> (fun (V81, V82, V83) -> case V81 of {'Idris.Prelude.Interfaces.MkMonad', E54, E55, E56} -> (fun (V84, V85, V86) -> ((((V85('erased'))('erased'))((((V76(V78))(V79))(V80))))(fun (V87) -> case V87 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V88, V89) -> case V89 of {'Idris.Builtin.MkPair', E59, E60} -> (fun (V90, V91) -> ((((V77(V88))(V78))(V90))(V91)) end(E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E61, E62, E63} -> (fun (V97, V98, V99) -> case V97 of {'Idris.Prelude.Interfaces.MkMonad', E64, E65, E66} -> (fun (V100, V101, V102) -> ((((V101('erased'))('erased'))((((V93(V94))(V95))(V96))))(fun (V103) -> case V103 of {'Idris.Builtin.MkPair', E67, E68} -> (fun (V104, V105) -> case V105 of {'Idris.Builtin.MkPair', E69, E70} -> (fun (V106, V107) -> (((V104(V94))(V106))(V107)) end(E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('dn--un--throwError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V109, V110, V111, V112)) end end end end end, fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('dn--un--catchError_MonadError_$e_((((RWST $r) $w) $s) $m)'(V0, V114, V115, V116, V117, V118)) end end end end end end}.
'un--withError'(V0, V1, V2) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(('un--tryError'(V0, V2))))(fun (V9) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V10) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E6, E7, E8} -> (fun (V11, V12, V13) -> ((V12('erased'))((V1(V10)))) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun () -> fun (V14) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E9, E10, E11} -> (fun (V15, V16, V17) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkApplicative', E15, E16, E17} -> (fun (V21, V22, V23) -> ((V22('erased'))(V14)) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V9)) end)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryError'(V0, V1) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V2, V3, V4) -> (((V4('erased'))(case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E3, E4, E5} -> (fun (V15, V16, V17) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E6, E7, E8} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkApplicative', E9, E10, E11} -> (fun (V21, V22, V23) -> ((((V21('erased'))('erased'))(fun (V24) -> {'Idris.Prelude.Types.Right', V24} end))(V1)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V5) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E12, E13, E14} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V12, V13, V14) -> ((V13('erased'))({'Idris.Prelude.Types.Left', V5})) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--throwError'(V0, V1) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V3('erased'))(V1)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapError'(V0, V1, V2) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))((V1(('un--tryError'(('Idris.Idris2.Builtin':'un--fst'(V0)), V2))))))(fun (V9) -> ('un--liftEither'(('Idris.Idris2.Builtin':'un--snd'(V0)), V9)) end)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--liftEither'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V2) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> ((V4('erased'))(V2)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun () -> fun (V6) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E3, E4, E5} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkMonad', E6, E7, E8} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E9, E10, E11} -> (fun (V13, V14, V15) -> ((V14('erased'))(V6)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V1)).
'un--handleError'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V5, V6, V7) -> (((V7('erased'))(V3))(V4)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V1, V2)).
'un--catchError'(V0, V1, V2) -> case V0 of {'Idris.Control.Monad.Error.Interface.dn--un--__mkMonadError', E0, E1, E2} -> (fun (V3, V4, V5) -> (((V5('erased'))(V1))(V2)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
