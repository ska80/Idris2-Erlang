-module('Idris.Idris2.Idris.Doc.String').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in getDocsForName-3690'/15,
  'case--getDocsForName-3647'/11,
  'case--case block in getDocsForName,getExtra-2739'/10,
  'case--getDocsForName,getFieldsDoc-2502'/8,
  'case--case block in getDocsForName,getFieldDoc-2343'/15,
  'case--getDocsForName,getIFaceDoc-2189'/9,
  'case--getDocsForName,getIFaceDoc-2048'/12,
  'case--getDocsForName,getIFaceDoc-1960'/14,
  'case--getDocsForName,getIFaceDoc-1803'/17,
  'case--getDocsForName,getFixityDoc-1545'/10,
  'case--getDocsForName,getPrefixDoc-1408'/9,
  'case--getDocsForName,getInfixDoc-1265'/9,
  'case--case block in getDocsForName,getDConDoc-967'/14,
  'case--prettyName-668'/2,
  'nested--14577-4168--in--un--visible'/7,
  'nested--10867-795--in--un--showTotal'/8,
  'nested--10867-793--in--un--showDoc'/9,
  'nested--10867-794--in--un--reflowDoc'/7,
  'nested--14577-4169--in--un--inNS'/5,
  'nested--10867-800--in--un--getPrefixDoc'/7,
  'nested--10867-798--in--un--getMethDoc'/8,
  'nested--10867-799--in--un--getInfixDoc'/7,
  'nested--10867-797--in--un--getImplDoc'/8,
  'nested--10867-802--in--un--getIFaceDoc'/7,
  'nested--10867-801--in--un--getFixityDoc'/8,
  'nested--10867-804--in--un--getFieldsDoc'/7,
  'nested--10867-803--in--un--getFieldDoc'/8,
  'nested--10867-805--in--un--getExtra'/9,
  'nested--10867-796--in--un--getDConDoc'/8,
  'un--tCon'/2,
  'un--summarise'/4,
  'un--styleAnn'/1,
  'un--shortNamesConfig'/0,
  'un--prettyTerm'/1,
  'un--prettyName'/1,
  'un--prettyKindedName'/2,
  'un--methodsConfig'/0,
  'un--header'/1,
  'un--getDocsForPrimitive'/4,
  'un--getDocsForPTerm'/4,
  'un--getDocsForName'/7,
  'un--getContents'/5,
  'un--fun'/2,
  'un--docToDecoration'/1,
  'un--dCon'/2,
  'un--addModDocString'/4,
  'un--addDocStringNS'/6,
  'un--addDocString'/5
]).
'case--case block in getDocsForName-3690'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [E0 | E1] -> (fun (V15, V16) -> begin (V19 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V17) -> fun (V18) -> ('nested--10867-793--in--un--showDoc'(V0, V1, V2, V3, V4, V5, V0, V17, V18)) end end, V13, [], V14))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V21))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsForName-3647'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> begin (V13 = [V11 | V12]), fun (V14) -> ('case--case block in getDocsForName-3690'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V11, V13, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V41, V42)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V43) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V43, case V6 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V51 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V13)), V14)) end end end(E0, E1)); _ -> fun (V55) -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V4, V2, V1, V55)) end end.
'case--case block in getDocsForName,getExtra-2739'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, [('nested--10867-795--in--un--showTotal'(V0, V1, V2, V3, V4, V5, V7, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V26 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | []]}} end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.TCon', E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43) -> begin (V64 = [('nested--10867-795--in--un--showTotal'(V0, V1, V2, V3, V4, V5, V7, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V54 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | []]), fun (V65) -> begin (V85 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), case V72 of {'Idris.Prelude.Types.Left', E53} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V74) -> ((V70(V74))(V71)) end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V67, (V66(V68)))) end end end, fun (V75) -> fun (V76) -> ('nested--10867-796--in--un--getDConDoc'(V0, V1, V2, V3, V4, V5, V75, V76)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V79, V80, V81)) end end end, fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V82, V83, V84)) end end end}, V77, V78)) end end)), V42, [], V65))), case V85 of {'Idris.Prelude.Types.Left', E55} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V87) -> begin (V100 = case V87 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', <<"data"/utf8>>}, []}}; [E57 | E58] -> (fun (V88, V89) -> case V89 of [] -> begin (V91 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V90) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V90)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constructor"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constructor"/utf8>>)); 0 -> <<"Constructor"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, V88))))), begin (V92 = (('nested--10867-804--in--un--getFieldsDoc'(V0, V1, V2, V3, V4, V5, V7))(V65))), case V92 of {'Idris.Prelude.Types.Left', E59} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V94) -> case V94 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', <<"data"/utf8>>}, [V91 | []]}} end()); {'Idris.Prelude.Types.Just', E61} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', <<"record"/utf8>>}, [V91 | [V95 | []]]}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', <<"data"/utf8>>}, [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V96) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V96)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constructors"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constructors"/utf8>>)); 0 -> <<"Constructors"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V97) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V97)) end, V87)))))) | []]])) | []]}} end end(E57, E58)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', <<"data"/utf8>>}, [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V98) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V98)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constructors"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constructors"/utf8>>)); 0 -> <<"Constructors"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V99) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V99)) end, V87)))))) | []]])) | []]}} end), case V100 of {'Idris.Prelude.Types.Left', E62} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V102) -> {'Idris.Prelude.Types.Right', case V102 of {'Idris.Builtin.MkPair', E64, E65} -> (fun (V103, V104) -> {'Idris.Builtin.MkPair', V103, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V64, V104))} end(E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E25, E26, E27, E28, E29, E30, E31, E32)); _ -> fun (V105) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, []}} end end.
'case--getDocsForName,getFieldsDoc-2502'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Types.Just', E2} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V10, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V9))))), fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--getFieldNames'(case V16 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V17 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), begin (V49 = begin (V48 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E35} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V51) -> case V47 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; [E39 | E40] -> (fun (V52, V53) -> case V53 of [] -> begin (V54 = ('nested--10867-803--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V5, V52, V12))), case V54 of {'Idris.Prelude.Types.Left', E43} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V57)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Projection"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Projection"/utf8>>)); 0 -> <<"Projection"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, V56))))}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V60 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V58) -> fun (V59) -> ('nested--10867-803--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V5, V58, V59)) end end, V47, [], V12))), case V60 of {'Idris.Prelude.Types.Left', E41} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V63) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V63)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Projections"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Projections"/utf8>>)); 0 -> <<"Projections"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V64) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V64)) end, V62)))))) | []]]))}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39, E40)); _ -> begin (V67 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V65) -> fun (V66) -> ('nested--10867-803--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V5, V65, V66)) end end, V47, [], V12))), case V67 of {'Idris.Prelude.Types.Left', E37} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V70) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V70)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Projections"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Projections"/utf8>>)); 0 -> <<"Projections"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V71) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V71)) end, V69)))))) | []]]))}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2)); _ -> fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V73) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--case block in getDocsForName,getFieldDoc-2343'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case V18 of <<""/utf8>> -> fun (V19) -> case V16 of [] -> {'Idris.Prelude.Types.Right', V13}; _ -> case V16 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V13 | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.UserDocString'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('nested--10867-794--in--un--reflowDoc'(V0, V1, V2, V3, V4, V5, V18)))))))) | []]]))}; _ -> {'Idris.Prelude.Types.Right', V13} end end end; _ -> fun (V20) -> case V16 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V13 | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.UserDocString'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('nested--10867-794--in--un--reflowDoc'(V0, V1, V2, V3, V4, V5, V18)))))))) | []]]))}; _ -> {'Idris.Prelude.Types.Right', V13} end end end end(E2, E3)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V13} end end end(E0, E1)); _ -> fun (V22) -> {'Idris.Prelude.Types.Right', V13} end end.
'case--getDocsForName,getIFaceDoc-2189'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> []; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V9)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Parameters"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Parameters"/utf8>>)); 0 -> <<"Parameters"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--punctuate'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)))) end, V8))))])) | []] end.
'case--getDocsForName,getIFaceDoc-2048'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V12, V13) -> [] end(E0, E1)); _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V14)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constructor"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constructor"/utf8>>)); 0 -> <<"Constructor"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('un--dCon'(V11, ('un--prettyName'(V11)))) | []]])) | []] end.
'case--getDocsForName,getIFaceDoc-1960'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> []; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V14)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Methods"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Methods"/utf8>>)); 0 -> <<"Methods"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V15)) end, V13)))))) | []]])) | []] end.
'case--getDocsForName,getIFaceDoc-1803'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> []; [E0 | E1] -> (fun (V17, V18) -> case V18 of [] -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V19)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Implementation"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Implementation"/utf8>>)); 0 -> <<"Implementation"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, V17)))) | []]; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V20)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Implementations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Implementations"/utf8>>)); 0 -> <<"Implementations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V21)) end, V16)))))) | []]])) | []] end end(E0, E1)); _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V22)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Implementations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Implementations"/utf8>>)); 0 -> <<"Implementations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V23) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V23)) end, V16)))))) | []]])) | []] end.
'case--getDocsForName,getFixityDoc-1545'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> []; [E0 | E1] -> (fun (V10, V11) -> case V11 of [] -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V12)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Fixity Declaration"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Fixity Declaration"/utf8>>)); 0 -> <<"Fixity Declaration"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), V10)) | []]; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V13)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Fixity Declarations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Fixity Declarations"/utf8>>)); 0 -> <<"Fixity Declarations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V9)))))) | []] end end(E0, E1)); _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V14)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Fixity Declarations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Fixity Declarations"/utf8>>)); 0 -> <<"Fixity Declarations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V9)))))) | []] end.
'case--getDocsForName,getPrefixDoc-1408'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Name.Basic', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V10, case V14 of {'Idris.Idris.Syntax.MkSyntax', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V16 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"prefix operator, level"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V26)))))) | []]} end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0)); _ -> {'Idris.Prelude.Types.Right', []} end.
'case--getDocsForName,getInfixDoc-1265'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Name.Basic', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V10, case V14 of {'Idris.Idris.Syntax.MkSyntax', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V15 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V27, V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_Fixity'(V27)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"operator,"/utf8>>)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"level"/utf8>>)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V28)))) | []]]]]))))} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0)); _ -> {'Idris.Prelude.Types.Right', []} end.
'case--case block in getDocsForName,getDConDoc-967'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> case V17 of <<""/utf8>> -> fun (V18) -> case V15 of [] -> {'Idris.Prelude.Types.Right', V12}; _ -> case V15 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V12 | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.UserDocString'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('nested--10867-794--in--un--reflowDoc'(V0, V1, V2, V3, V4, V5, V17)))))))) | []]]))}; _ -> {'Idris.Prelude.Types.Right', V12} end end end; _ -> fun (V19) -> case V15 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V12 | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.UserDocString'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('nested--10867-794--in--un--reflowDoc'(V0, V1, V2, V3, V4, V5, V17)))))))) | []]]))}; _ -> {'Idris.Prelude.Types.Right', V12} end end end end(E2, E3)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', V12} end end end(E0, E1)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V12} end end.
'case--prettyName-668'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Name':'un--nameRoot'(V0)))) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case ('Idris.Idris2.Parser.Lexer.Source':'un--isOpUserName'(V2)) of 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_UserName'(V2)))); 0 -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_UserName'(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14577-4168--in--un--visible'(V0, V1, V2, V3, V4, V5, V6) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V7 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V50 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0))} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10867-795--in--un--showTotal'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.Unchecked'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V10)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<""/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<""/utf8>>)); 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V11)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Totality"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Totality"/utf8>>)); 0 -> <<"Totality"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_Totality'(V7)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10867-793--in--un--showDoc'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of {'Idris.Idris.Doc.String.MkConfig', E0, E1, E2} -> (fun (V9, V10, V11) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> begin (V48 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V17 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V18 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V48 of {'Idris.Prelude.Types.Left', E37} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Just', E39} -> (fun (V51) -> begin (V52 = case V11 of 1 -> ('nested--10867-805--in--un--getExtra'(V0, V1, V2, V3, V4, V5, V12, V51, V8)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, []}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V52 of {'Idris.Prelude.Types.Left', E40} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V54) -> case V54 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V55, V56) -> begin (V86 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), case V60 of {'Idris.Prelude.Types.Left', E44} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V62) -> ((V58(V62))(V59)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V4, V3, {'Idris.Core.Env.Nil'}, V63, V64)) end end, fun (V65) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V4, [], V17, {'Idris.Core.Env.Nil'}, case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V68 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V65)) end))(V8))), case V86 of {'Idris.Prelude.Types.Left', E66} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V88) -> begin (V95 = case V10 of 1 -> (case V88 of {'Idris.Idris.Syntax.PPi', E68, E69, E70, E71, E72, E73} -> (fun (V89, V90, V91, V92, V93, V94) -> case V91 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> fun () -> V94 end end()); _ -> fun () -> V88 end end end(E68, E69, E70, E71, E72, E73)); _ -> fun () -> V88 end end()); 0 -> V88; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V96 = ('Idris.Idris2.Core.Context':'un--aliasName'(V4, V12, V8))), case V96 of {'Idris.Prelude.Types.Left', E74} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V98) -> begin (V100 = ('Idris.Idris2.Idris.Pretty':'un--showCategory'(fun (V99) -> {'Idris.Idris.Doc.String.Syntax', V99} end, V51))), begin (V101 = ('un--prettyKindedName'(V55, (V100(case V9 of 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V98)))); 0 -> ('un--prettyName'(V98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V102 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V12}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([V101 | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()) | [('un--prettyTerm'(V95)) | []]]]))))), begin (V122 = begin (V103 = ('nested--10867-794--in--un--reflowDoc'(V0, V1, V2, V3, V4, V5, V13))), ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V106, V107)) end end end end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.UserDocString'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V103)))), ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V110, V111)) end end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V113)) end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V116, V117)) end end end end}, fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V120, V121)) end end end}, case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V103))()) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), begin (V123 = ('nested--10867-801--in--un--getFixityDoc'(V0, V1, V2, V3, V4, V5, V12, V8))), case V123 of {'Idris.Prelude.Types.Left', E76} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V125) -> begin (V151 = begin (V130 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V127) -> V127 end end, fun () -> fun (V128) -> fun (V129) -> [V128 | V129] end end end, V122))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V126) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V126)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V56, V125))))))), ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V133, V134)) end end end end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V135) -> fun (V136) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V135, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()))), V136)) end end, V130)))), ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V139, V140)) end end end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V142)) end end, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V145, V146)) end end end end}, fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_List'()) end, fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_List'(V149, V150)) end end end}, case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V130))()) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V102 | V151]))} end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V4, V2, V12, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10867-794--in--un--reflowDoc'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of <<""/utf8>> -> []; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(V7)))) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V6)))))) end.
'nested--14577-4169--in--un--inNS'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Core.Name.UN', E2} -> (fun (V7) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V0, V5)) end(E2)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--10867-800--in--un--getPrefixDoc'(V0, V1, V2, V3, V4, V5, V6) -> fun (V7) -> ('case--getDocsForName,getPrefixDoc-1408'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V6)), V7)) end.
'nested--10867-798--in--un--getMethDoc'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(case V6 of {'Idris.Idris.Syntax.MkMethod', E6, E7, E8, E9} -> (fun (V12, V13, V14, V15) -> V12 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V11 of {'Idris.Idris.Syntax.MkSyntax', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V23 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of [E2 | E3] -> (fun (V27, V28) -> case V28 of [] -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V29) -> case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V31))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V32) -> ('nested--10867-793--in--un--showDoc'(V0, V1, V2, V3, V4, V5, ('un--methodsConfig'()), V27, V32)) end, V7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10867-799--in--un--getInfixDoc'(V0, V1, V2, V3, V4, V5, V6) -> fun (V7) -> ('case--getDocsForName,getInfixDoc-1265'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V6)), V7)) end.
'nested--10867-797--in--un--getImplDoc'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V6, case V11 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E34} -> (fun (V45) -> begin (V75 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), case V49 of {'Idris.Prelude.Types.Left', E35} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V51) -> ((V47(V51))(V48)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V4, V3, {'Idris.Core.Env.Nil'}, V52, V53)) end end, fun (V54) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V4, [], V11, {'Idris.Core.Env.Nil'}, case V45 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V57 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V54)) end))(V7))), case V75 of {'Idris.Prelude.Types.Left', E57} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V77) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V6}, ('un--prettyTerm'(V77)))) | []]} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10867-802--in--un--getIFaceDoc'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V15 = ('case--getDocsForName,getIFaceDoc-2189'(V0, V1, V2, V3, V4, V5, V7, V8, case V8 of {'Idris.Idris.Syntax.MkIFaceInfo', E2, E3, E4, E5, E6, E7} -> (fun (V9, V10, V11, V12, V13, V14) -> V11 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V16) -> begin (V26 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V17) -> fun (V18) -> ('Idris.Idris2.Idris.Resugar':'un--pterm'(V4, V3, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V19) -> ('Idris.Idris2.Core.TT':'un--defaultKindedName'(V19)) end, V17)), V18)) end end, case V8 of {'Idris.Idris.Syntax.MkIFaceInfo', E8, E9, E10, E11, E12, E13} -> (fun (V20, V21, V22, V23, V24, V25) -> V23 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V16))), case V26 of {'Idris.Prelude.Types.Left', E14} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V28) -> begin (V31 = case V28 of [] -> []; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V29)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constraints"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constraints"/utf8>>)); 0 -> <<"Constraints"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--punctuate'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V30) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V30)))) end, V28))))])) | []] end), begin (V38 = ('case--getDocsForName,getIFaceDoc-2048'(V0, V1, V2, V3, V4, V5, V7, V8, V15, V28, V31, ('Idris.Idris2.Core.Name':'un--dropNS'(case V8 of {'Idris.Idris.Syntax.MkIFaceInfo', E16, E17, E18, E19, E20, E21} -> (fun (V32, V33, V34, V35, V36, V37) -> V32 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V47 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V39) -> fun (V40) -> ('nested--10867-798--in--un--getMethDoc'(V0, V1, V2, V3, V4, V5, V39, V40)) end end, case V8 of {'Idris.Idris.Syntax.MkIFaceInfo', E22, E23, E24, E25, E26, E27} -> (fun (V41, V42, V43, V44, V45, V46) -> V45 end(E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V16))), case V47 of {'Idris.Prelude.Types.Left', E28} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V49) -> begin (V78 = ('case--getDocsForName,getIFaceDoc-1960'(V0, V1, V2, V3, V4, V5, V7, V8, V15, V28, V31, V38, V49, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V65, V66, V67, V68)) end end end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V73, V74, V75)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V76, V77)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V49))))), begin (V79 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V4, V2, 0, V7, V16))), case V79 of {'Idris.Prelude.Types.Left', E30} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V81) -> begin (V90 = case V81 of {'Idris.Core.Context.MkSearchData', E32, E33} -> (fun (V82, V83) -> case V83 of [] -> {'Idris.Prelude.Types.Right', []}; [E34 | E35] -> (fun (V84, V85) -> case V84 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V86, V87) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V88) -> fun (V89) -> ('nested--10867-797--in--un--getImplDoc'(V0, V1, V2, V3, V4, V5, V88, V89)) end end, V87, [], V16)) end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V90 of {'Idris.Prelude.Types.Left', E38} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V92) -> begin (V121 = ('case--getDocsForName,getIFaceDoc-1803'(V0, V1, V2, V3, V4, V5, V7, V8, V15, V28, V31, V38, V49, V78, V81, V92, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V95, V96, V97)) end end end end end, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V100, V101, V102)) end end end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V104)) end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V108, V109, V110, V111)) end end end end end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V113)) end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V116, V117, V118)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V119, V120)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V92))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V15, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V31, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V38, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V78, V121))))))))))} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10867-801--in--un--getFixityDoc'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('nested--10867-799--in--un--getInfixDoc'(V0, V1, V2, V3, V4, V5, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('nested--10867-800--in--un--getPrefixDoc'(V0, V1, V2, V3, V4, V5, V6))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('case--getDocsForName,getFixityDoc-1545'(V0, V1, V2, V3, V4, V5, V6, V10, V13, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V10)), ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V13))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10867-804--in--un--getFieldsDoc'(V0, V1, V2, V3, V4, V5, V6) -> ('case--getDocsForName,getFieldsDoc-2502'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Core.Name':'un--displayName'(V6)))).
'nested--10867-803--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V6, case V15 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V46 of {'Idris.Prelude.Types.Left', E34} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E36} -> (fun (V49) -> begin (V79 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), case V53 of {'Idris.Prelude.Types.Left', E37} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V55) -> ((V51(V55))(V52)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V4, V3, {'Idris.Core.Env.Nil'}, V56, V57)) end end, fun (V58) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V4, [], V15, {'Idris.Core.Env.Nil'}, case V49 of {'Idris.Core.Context.Context.MkGlobalDef', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78) -> V61 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58)) end))(V7))), case V79 of {'Idris.Prelude.Types.Left', E59} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V81) -> begin (V82 = ('un--prettyName'(V6))), begin (V83 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V6}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--fun'(V6, V82)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()) | [('un--prettyTerm'(V81)) | []]]]))))), begin (V84 = {'Idris.Prelude.Types.Just', V49}), (('case--case block in getDocsForName,getFieldDoc-2343'(V0, V1, V2, V3, V4, V5, V6, V11, V15, V49, V84, V81, V82, V83, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V6, case V11 of {'Idris.Idris.Syntax.MkSyntax', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V92 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V7)) end end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Empty'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10867-805--in--un--getExtra'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> case ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V6, case V12 of {'Idris.Idris.Syntax.MkSyntax', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V18 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of [] -> (('case--case block in getDocsForName,getExtra-2739'(V0, V1, V2, V3, V4, V5, V7, V6, V12, case V7 of {'Idris.Core.Context.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V41 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8)); [E22 | E23] -> (fun (V44, V45) -> case V45 of [] -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E24} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', <<"interface"/utf8>>}, ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V48))}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--10867-802--in--un--getIFaceDoc'(V0, V1, V2, V3, V4, V5, V44)), V8)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, []}} end end(E22, E23)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, []}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10867-796--in--un--getDConDoc'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V6, case V11 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E34} -> (fun (V45) -> begin (V47 = begin (V46 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E35} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V49) -> begin (V79 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), case V53 of {'Idris.Prelude.Types.Left', E37} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V55) -> ((V51(V55))(V52)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V4, V3, {'Idris.Core.Env.Nil'}, V56, V57)) end end, fun (V58) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V4, [], V11, {'Idris.Core.Env.Nil'}, case V45 of {'Idris.Core.Context.Context.MkGlobalDef', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78) -> V61 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58)) end))(V7))), case V79 of {'Idris.Prelude.Types.Left', E59} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V6}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--dCon'(V6, ('un--prettyName'(V6)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()) | [('un--prettyTerm'(V81)) | []]]]))))), begin (V83 = {'Idris.Prelude.Types.Just', V45}), (('case--case block in getDocsForName,getDConDoc-967'(V0, V1, V2, V3, V4, V5, V6, V11, V45, V83, V49, V81, V82, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V6, case V49 of {'Idris.Idris.Syntax.MkSyntax', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94) -> V91 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V7)) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Empty'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tCon'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Syntax', {'Idris.Idris.Pretty.TCon', {'Idris.Prelude.Types.Just', V0}}}, V1)).
'un--summarise'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V42 of {'Idris.Prelude.Types.Left', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E36} -> (fun (V45) -> begin (V66 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V11, {'Idris.Core.Env.Nil'}, case V45 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V48 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V66 of {'Idris.Prelude.Types.Left', E57} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V68, V3))), case V69 of {'Idris.Prelude.Types.Left', E59} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V71) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'((('Idris.Idris2.Idris.Pretty':'un--showCategory'(fun (V72) -> {'Idris.Idris.Doc.String.Syntax', V72} end, V45))(('un--prettyName'(V2)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hang'(0, ('un--prettyTerm'(V71))))))))} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V73) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V73)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<""/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<""/utf8>>)); 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))} end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--styleAnn'(V0) -> case V0 of {'Idris.Idris.Doc.String.Header'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.Terminal':'un--underline'()) end()); {'Idris.Idris.Doc.String.Declarations'} -> (fun () -> [] end()); {'Idris.Idris.Doc.String.Decl', E0} -> (fun (V1) -> [] end(E0)); {'Idris.Idris.Doc.String.DocStringBody'} -> (fun () -> [] end()); {'Idris.Idris.Doc.String.UserDocString'} -> (fun () -> [] end()); {'Idris.Idris.Doc.String.Syntax', E1} -> (fun (V2) -> ('Idris.Idris2.Idris.Pretty':'un--syntaxAnn'(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shortNamesConfig'() -> {'Idris.Idris.Doc.String.MkConfig', 0, 0, 1}.
'un--prettyTerm'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--reAnnotate'(fun (V1) -> {'Idris.Idris.Doc.String.Syntax', V1} end, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V0)))).
'un--prettyName'(V0) -> ('case--prettyName-668'(V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--prettyKindedName'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Syntax', {'Idris.Idris.Pretty.Keyword'}}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V2)))), V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--methodsConfig'() -> {'Idris.Idris.Doc.String.MkConfig', 0, 1, 0}.
'un--header'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Header'}, V0)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))).
'un--getDocsForPrimitive'(V0, V1, V2, V3) -> case ('Idris.Idris2.TTImp.Elab.Prim':'un--checkPrim'({'Idris.Core.FC.EmptyFC'}, V2)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V5, V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('un--prettyTerm'(V8))))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V9, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Primitive"/utf8>>))))))} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDocsForPTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V4, V5) -> fun (V6) -> ('un--getDocsForName'(V0, V1, V2, V4, V5, {'Idris.Idris.Doc.String.MkConfig', 1, 0, 1}, V6)) end end(E0, E1)); {'Idris.Idris.Syntax.PPrimVal', E2, E3} -> (fun (V7, V8) -> fun (V9) -> ('un--getDocsForPrimitive'(V1, V2, V8, V9)) end end(E2, E3)); {'Idris.Idris.Syntax.PType', E4} -> (fun (V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V12)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Type : Type"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Type : Type"/utf8>>)); 0 -> <<"Type : Type"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"The type of all types is Type. The type of Type is Type."/utf8>>)))) | []]]))} end end(E4)); {'Idris.Idris.Syntax.PString', E5, E6} -> (fun (V13, V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V16)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"String Literal"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"String Literal"/utf8>>)); 0 -> <<"String Literal"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Desugars to a fromString call"/utf8>>)))) | []]]))} end end(E5, E6)); {'Idris.Idris.Syntax.PList', E7, E8, E9} -> (fun (V17, V18, V19) -> fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V21)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"List Literal"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"List Literal"/utf8>>)); 0 -> <<"List Literal"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Desugars to (::) and Nil"/utf8>>)))) | []]]))} end end(E7, E8, E9)); {'Idris.Idris.Syntax.PSnocList', E10, E11, E12} -> (fun (V22, V23, V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V26)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"SnocList Literal"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"SnocList Literal"/utf8>>)); 0 -> <<"SnocList Literal"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Desugars to (:<) and Empty"/utf8>>)))) | []]]))} end end(E10, E11, E12)); {'Idris.Idris.Syntax.PPair', E13, E14, E15} -> (fun (V27, V28, V29) -> fun (V30) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V31)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Pair Literal"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Pair Literal"/utf8>>)); 0 -> <<"Pair Literal"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Desugars to MkPair or Pair"/utf8>>)))) | []]]))} end end(E13, E14, E15)); {'Idris.Idris.Syntax.PDPair', E16, E17, E18, E19, E20} -> (fun (V32, V33, V34, V35, V36) -> fun (V37) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V38) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V38)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Dependant Pair Literal"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Dependant Pair Literal"/utf8>>)); 0 -> <<"Dependant Pair Literal"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Desugars to MkDPair or DPair"/utf8>>)))) | []]]))} end end(E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.PUnit', E21} -> (fun (V39) -> fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V41) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V41)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Unit Literal"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Unit Literal"/utf8>>)); 0 -> <<"Unit Literal"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Desugars to MkUnit or Unit"/utf8>>)))) | []]]))} end end(E21)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Docs not implemented for"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V3)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"yet"/utf8>>))))))} end end.
'un--getDocsForName'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = case ('Idris.Idris2.Core.Name':'un--nameRoot'(V4)) of <<"-"/utf8>> -> [{'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--numNS'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"negate"/utf8>>}}} | []]; _ -> [] end), begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V4, case V14 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V46 of {'Idris.Prelude.Types.Left', E34} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V48) -> (('case--getDocsForName-3647'(V5, V4, V3, V2, V1, V0, V10, V14, V15, V48, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('Idris.Idris2.Builtin':'un--fst'(V49)) end, V48))))))(V6)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContents'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = ('Idris.Idris2.Core.Context':'un--allNames'(case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> begin (V43 = ('Idris.Idris2.Data.List':'un--filter'(fun (V42) -> ('nested--14577-4169--in--un--inNS'(V3, V2, V1, V0, V42)) end, V41))), begin (V46 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V44) -> fun (V45) -> ('nested--14577-4168--in--un--visible'(V3, V2, V1, V0, V8, V44, V45)) end end, V43, V4))), case V46 of {'Idris.Prelude.Types.Left', E34} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V48) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V49) -> case V49 of {'Idris.Prelude.Types.Left', E36} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V51) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(V51))} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V52) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> fun (V54) -> ('un--summarise'(V1, V2, V53, V54)) end end, ('Idris.Idris2.Data.List':'un--sort'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V57, V58)) end end}, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V71, V72)) end end}, V48)), [], V52)) end, V4)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fun'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Syntax', {'Idris.Idris.Pretty.Fun', V0}}, V1)).
'un--docToDecoration'(V0) -> case V0 of {'Idris.Idris.Doc.String.Syntax', E0} -> (fun (V1) -> ('Idris.Idris2.Idris.Pretty':'un--syntaxToDecoration'(V1)) end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--dCon'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Syntax', {'Idris.Idris.Pretty.DCon', {'Idris.Prelude.Types.Just', V0}}}, V1)).
'un--addModDocString'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V19 = ('erlang':'put'(V0, case V7 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Idris.Syntax.MkSyntax', V8, V9, [V1 | V10], ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V1, V2, V11)), V12, V13, V14, V15, V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDocStringNS'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V3, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V11 = case V8 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V9, V10) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V2)), V10} end(E2, E3)); _ -> {'Idris.Core.Name.NS', V2, V8} end), begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V27 = ('erlang':'put'(V1, case V15 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Idris.Syntax.MkSyntax', V16, V17, V18, V19, V20, V21, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, 0, V22)), ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V11, V4, V23)), V24, V25, V26} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V27} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDocString'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V2, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"doc.record"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding doc for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (aka "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)), <<" in current NS)"/utf8>>)))))))) end, V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V26 = ('erlang':'put'(V1, case V14 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> {'Idris.Idris.Syntax.MkSyntax', V15, V16, V17, V18, V19, V20, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V7, 0, V21)), ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V7, V3, V22)), V23, V24, V25} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V26} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
