-module('Idris.Idris2.Erlang.System.Directory').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--removeDir'/2,
  'un--listDir'/2,
  'un--dirExists'/2,
  'un--currentDir'/1,
  'un--createDir'/2,
  'un--changeDir'/2
]).
'un--removeDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((((V7('erased'))('erased'))(fun (V18) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V15, V16, V17) -> ((V16('erased'))(('erlang':'apply'('file', 'del_dir_r', [V1 | []])))) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--listDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('file', 'list_dir', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Erlang.System.File':'un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(fun (V16) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V17) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> case V18 of E21 -> (fun (V19) -> V19 end((fun (V20) -> ('unicode':'characters_to_binary'(V20)) end(E21)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V17))} end, fun (V21) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V22) -> ('Idris.Idris2.Erlang.Decode':'un--list'(fun (V23) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V23)) end, V22)) end, V21)) end, V16)) end, fun () -> fun (V24) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V25) -> {'Idris.Prelude.Types.Left', V25} end, fun (V26) -> ('Idris.Idris2.Erlang.System.File':'un--error'(V26)) end, V24)) end end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dirExists'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V31, V32) -> case V31 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V33, V34, V35) -> case V33 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V36, V37, V38) -> ((V37('erased'))(('erlang':'apply'('filelib', 'is_dir', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> 0 end, ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V26, V27, V28)) end end end end end}, fun (V29) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'true', V29)) end, fun (V30) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(1, V30)) end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--currentDir'(V0) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V21, V22) -> case V21 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V23, V24, V25) -> case V23 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V26, V27, V28) -> ((V27('erased'))(('erlang':'apply'('file', 'get_cwd', [])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V6) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V12, V13, V14) -> ((V13('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeMay'({'Idris.Erlang.Types.ETErlTerm'}, fun (V15) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V16) -> case V16 of E21 -> (fun (V17) -> V17 end((fun (V18) -> ('unicode':'characters_to_binary'(V18)) end(E21)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V19) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V20) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V20)) end, V19)) end, V15)) end, V6)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--createDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V34, V35) -> case V34 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V36, V37, V38) -> case V36 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V39, V40, V41) -> ((V40('erased'))(('erlang':'apply'('file', 'make_dir', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Erlang.System.File':'un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V26, V27, V28)) end end end end end}, fun (V29) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'ok', V29)) end, fun (V30) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Right', 0}, V30)) end)), fun () -> fun (V31) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V32) -> {'Idris.Prelude.Types.Left', V32} end, fun (V33) -> ('Idris.Idris2.Erlang.System.File':'un--error'(V33)) end, V31)) end end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--changeDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V31, V32) -> case V31 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V33, V34, V35) -> case V33 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V36, V37, V38) -> ((V37('erased'))(('erlang':'apply'('file', 'set_cwd', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> 0 end, ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V26, V27, V28)) end end end end end}, fun (V29) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'ok', V29)) end, fun (V30) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(1, V30)) end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
