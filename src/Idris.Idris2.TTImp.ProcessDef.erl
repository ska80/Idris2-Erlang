-module('Idris.Idris2.TTImp.ProcessDef').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--with block in nameListEq-10756'/4,
  'with--nameListEq-10749'/5,
  'with--extendEnv-4690'/20,
  'with--extendEnv-4609'/19,
  'case--case block in mkRunTime-11590'/10,
  'case--case block in calcRefs-10928'/8,
  'case--case block in case block in case block in case block in case block in case block in case block in checkClause-9105'/52,
  'case--case block in case block in case block in case block in case block in checkClause-8653'/40,
  'case--case block in case block in checkClause-8378'/36,
  'case--combineLinear-5590'/6,
  'case--findLinear-5132'/7,
  'nested--22436-12224--in--un--withTotality'/13,
  'nested--16681-7476--in--un--wargs'/35,
  'nested--16539-7315--in--un--wargs'/20,
  'nested--16681-7475--in--un--wargn'/35,
  'nested--16539-7314--in--un--wargn'/20,
  'nested--15468-7254--in--un--vfc'/18,
  'nested--21395-11307--in--un--toErased'/8,
  'nested--21395-11308--in--un--toClause'/7,
  'nested--22436-12225--in--un--simplePat'/11,
  'nested--14405-5434--in--un--notN'/5,
  'nested--21395-11300--in--un--noInline'/6,
  'nested--15468-7255--in--un--mkExplicit'/19,
  'nested--21395-11302--in--un--mkCrash'/7,
  'nested--15468-7258--in--un--mkClauseWith'/24,
  'nested--21395-11303--in--un--matchAny'/6,
  'nested--21395-11304--in--un--makeErrorClause'/8,
  'nested--14405-5435--in--un--lookupAll'/6,
  'nested--15468-7257--in--un--keepOldEnv'/21,
  'nested--21395-11306--in--un--getSpec'/6,
  'nested--22436-12228--in--un--getClause'/12,
  'nested--13680-4805--in--un--findLinArg'/10,
  'nested--20778-10781--in--un--dropErased'/7,
  'nested--14405-5437--in--un--combineAll'/7,
  'nested--14405-5436--in--un--combine'/7,
  'nested--22460-12319--in--un--closeEnv'/16,
  'nested--22436-12227--in--un--checkImpossible'/14,
  'nested--22436-12229--in--un--checkCoverage'/15,
  'nested--22436-12226--in--un--catchAll'/11,
  'nested--21395-11301--in--un--caseName'/6,
  'nested--15468-7256--in--un--bindWithArgs'/21,
  'nested--21395-11305--in--un--addErrorCase'/6,
  'nested--13680-4804--in--un--accessible'/8,
  'un--warnUnreachable'/3,
  'un--toPats'/1,
  'un--setLinear'/2,
  'un--recoverableErr'/3,
  'un--recoverable'/5,
  'un--processDef'/11,
  'un--nameListEq'/2,
  'un--mkRunTime'/6,
  'un--mismatchNF'/5,
  'un--mismatch'/5,
  'un--impossibleOK'/5,
  'un--impossibleErrOK'/3,
  'un--hasEmptyPat'/6,
  'un--findLinear'/6,
  'un--extendEnv'/6,
  'un--compileRunTime'/6,
  'un--combineLinear'/2,
  'un--checkLHS'/14,
  'un--checkClause'/14,
  'un--calcRefs'/5,
  'un--applyEnv'/5
]).
'with--with block in nameListEq-10756'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameListEq-10749'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of 0 -> ('with--with block in nameListEq-10756'(V4, V3, ('un--nameListEq'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--extendEnv-4690'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V20)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> case V21 of 0 -> ('un--extendEnv'([V0 | V4], {'Idris.Core.Env.::', {'Idris.Core.TT.Let', V14, V13, V11, V12}, V19}, {'Idris.Core.TT.DropCons', V18}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V17)), V15, V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--extendEnv-4609'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V19)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> case V20 of 0 -> ('un--extendEnv'([V0 | V4], {'Idris.Core.Env.::', {'Idris.Core.TT.PVar', V13, V12, V11, V10}, V18}, {'Idris.Core.TT.DropCons', V17}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V16)), V14, V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mkRunTime-11590'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> begin (V35 = case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V17 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun () -> fun (V36) -> begin (V78 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V37) -> ('nested--21395-11307--in--un--toErased'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V38 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--21395-11306--in--un--getSpec'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V69 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V37)) end, V14, [], V36))), case V78 of {'Idris.Prelude.Types.Left', E65} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V80) -> begin (V102 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V81) -> ('nested--21395-11308--in--un--toClause'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V82 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V81)) end, V80))), begin (V104 = case V8 of {'Idris.Core.TT.MissingCases', E87} -> (fun (V103) -> ('nested--21395-11305--in--un--addErrorCase'(V0, V1, V2, V3, V4, V102)) end(E87)); _ -> V102 end), begin (V125 = ('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V4, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V105 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.CaseBuilder.RunTime'}, V0, V35, V104, V36))), case V125 of {'Idris.Prelude.Types.Left', E108} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V127) -> case V127 of {'Idris.Builtin.DPair.MkDPair', E110, E111} -> (fun (V128, V129) -> case V129 of {'Idris.Builtin.MkPair', E112, E113} -> (fun (V130, V131) -> begin (V162 = begin (V138 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V132, V133, V134)) end end end, fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V135, V136, V137)) end end end}, V130, V36))), case V138 of {'Idris.Prelude.Types.Left', E114} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V140) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V141) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Covering'(V8)), <<":"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Runtime tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161) -> V143 end(E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<":"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Core.CaseTree':'dn--un--pretty_Pretty_(CaseTree $vars)'(V128, V140)))))) | []]]]))} end, V36)) end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V162 of {'Idris.Prelude.Types.Left', E136} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V164) -> begin (V165 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V128, V130)) end, V36))), case V165 of {'Idris.Prelude.Types.Left', E138} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V167) -> begin (V168 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"compile.casetree.measure"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Core.CaseTree':'un--measure'(V130)))) end, V36))), case V168 of {'Idris.Prelude.Types.Left', E140} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V170) -> case ('un--nameListEq'(V11, V128)) of {'Idris.Prelude.Types.Just', E142} -> (fun (V171) -> case V171 of 0 -> begin (V196 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V172) -> case V172 of {'Idris.Prelude.Types.Left', E143} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V174) -> {'Idris.Prelude.Types.Right', 0} end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V175) -> ('Idris.Idris2.Core.Context':'un--addDef'(V4, V0, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164} -> (fun (V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195) -> {'Idris.Core.Context.Context.MkGlobalDef', V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, {'Idris.Core.Context.Context.PMDef', V10, V11, V12, V130, V14}, V194, V195} end(E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V175)) end, V36))), case V196 of {'Idris.Prelude.Types.Left', E165} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V198) -> begin (V205 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V199, V200, V201)) end end end, fun (V202) -> fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V202, V203, V204)) end end end}, V0, V36))), case V205 of {'Idris.Prelude.Types.Left', E167} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V207) -> case case ('nested--21395-11301--in--un--caseName'(V0, V1, V2, V3, V4, V207)) of 1 -> ('nested--21395-11300--in--un--noInline'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.Context.MkGlobalDef', E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190} -> (fun (V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227) -> V219 end(E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V228 = ('Idris.Idris2.TTImp.Elab.Utils':'un--canInlineCaseBlock'(V4, V0, V36))), case V228 of {'Idris.Prelude.Types.Left', E169} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V230) -> case V230 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V4, V1, V0, {'Idris.Core.Context.Context.Inline'}, V36)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E142)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"WAT"/utf8>>}, V36)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1, E2, E3, E4)); _ -> fun () -> fun (V231) -> {'Idris.Prelude.Types.Right', 0} end end end.
'case--case block in calcRefs-10928'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> begin (V53 = case V2 of 1 -> case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V26 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V45 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V53 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V54 = case V2 of 1 -> V11; 0 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V55 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'(V54))), fun (V56) -> begin (V59 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V3, V57, V58)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V55)), V56))), case V59 of {'Idris.Prelude.Types.Left', E45} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.CaseTree':'un--addRefs'(V1, V55, V54))), begin (V63 = case V2 of 1 -> ('nested--20778-10781--in--un--dropErased'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V62)), V62, V56)); 0 -> {'Idris.Prelude.Types.Right', V62}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V63 of {'Idris.Prelude.Types.Left', E47} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V65) -> begin (V110 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V66) -> case V66 of {'Idris.Prelude.Types.Left', E49} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V68) -> {'Idris.Prelude.Types.Right', 0} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V69) -> case V2 of 1 -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> {'Idris.Core.Context.Context.MkGlobalDef', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, {'Idris.Prelude.Types.Just', V65}, V84, V85, V86, V87, V88, V89} end(E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V69)); 0 -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> {'Idris.Core.Context.Context.MkGlobalDef', V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, {'Idris.Prelude.Types.Just', V65}, V103, V104, V105, V106, V107, V108, V109} end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V56))), case V110 of {'Idris.Prelude.Types.Left', E91} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V112) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V113) -> fun (V114) -> ('un--calcRefs'(V3, V2, V1, V113, V114)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V65)), V56)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end()); {'Idris.Prelude.Types.Just', E93} -> (fun (V115) -> fun (V116) -> {'Idris.Prelude.Types.Right', 0} end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> fun (V117) -> {'Idris.Prelude.Types.Right', 0} end end.
'case--case block in case block in case block in case block in case block in case block in case block in checkClause-9105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> case V51 of {'Idris.Prelude.Types.Just', E0} -> (fun (V52) -> case V52 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V53, V54) -> case V54 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V55, V56) -> begin (V59 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> {'Idris.Prelude.Types.Just', V57} end, V53)), [{'Idris.Prelude.Types.Nothing'} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V58) -> {'Idris.Prelude.Types.Just', V58} end, V45))]))), fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"With function type"/utf8>> end, V56, V60))), case V61 of {'Idris.Prelude.Types.Left', E5} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V63) -> begin (V169 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Argument names "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V66) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V69, V70)) end end}, V67)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V74, V75)) end end}, V71, V72)) end end}, V66)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V78) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V80, V81)) end end}, V78)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V84) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V84)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V85, V86)) end end}, V82, V83)) end end}, V76, V77)) end end}, {'Idris.Prelude.Show.MkShow', fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V87)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V88, V89)) end end}}, V65)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V92) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V94)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V95, V96)) end end}, V93)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V100, V101)) end end}, V97, V98)) end end}, V92)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V106, V107)) end end}, V104)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V110)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V111, V112)) end end}, V108, V109)) end end}, V102, V103)) end end}, {'Idris.Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V114, V115)) end end}}, V90, V91)) end end}, V64)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V118) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V120) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V122, V123)) end end}, V120)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V126) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V126)) end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V127, V128)) end end}, V124, V125)) end end}, V119)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V132) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V132)) end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V133, V134)) end end}, V131)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V137) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V137)) end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V138, V139)) end end}, V135, V136)) end end}, V129, V130)) end end}, {'Idris.Prelude.Show.MkShow', fun (V140) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V140)) end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V141, V142)) end end}}, V118)) end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V145) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V146) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V147)) end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V148, V149)) end end}, V146)) end, fun (V150) -> fun (V151) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V152) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V152)) end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V153, V154)) end end}, V150, V151)) end end}, V145)) end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V157) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V158) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V158)) end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V159, V160)) end end}, V157)) end, fun (V161) -> fun (V162) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V163) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V163)) end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V164, V165)) end end}, V161, V162)) end end}, V155, V156)) end end}, {'Idris.Prelude.Show.MkShow', fun (V166) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V166)) end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V167, V168)) end end}}, V143, V144)) end end}, V116, V117)) end end}, V59)))) end, V60))), case V169 of {'Idris.Prelude.Types.Left', E7} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V171) -> begin (V184 = begin (V178 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V17, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V172, V173, V174)) end end end, fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V175, V176, V177)) end end end}, {'Idris.Core.Name.Resolved', V10}, V60))), case V178 of {'Idris.Prelude.Types.Left', E9} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V180) -> begin (V181 = (('Idris.Idris2.Core.Context':'un--prettyName'(V17, V180))(V60))), case V181 of {'Idris.Prelude.Types.Left', E11} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V183) -> ('Idris.Idris2.Core.UnifyState':'un--genWithName'(V17, V15, V183, V60)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V184 of {'Idris.Prelude.Types.Left', E13} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V186) -> begin (V219 = ('Idris.Idris2.Core.Context':'un--addDef'(V17, V186, case ('Idris.Idris2.Core.Context':'un--newDef'(('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V186, case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V187) -> fun (V188) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V187, V188)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V189) -> fun (V190) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V189, V190)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V191) -> fun (V192) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V193, V194)) end end}}, V14)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V195) -> fun (V196) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V195, V196)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V197) -> fun (V198) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V197, V198)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V56, V13, {'Idris.Core.Context.Context.None'})) of {'Idris.Core.Context.Context.MkGlobalDef', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218) -> {'Idris.Core.Context.Context.MkGlobalDef', V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, [{'Idris.Core.Context.Context.SetTotal', V12} | V210], V211, V212, V213, V214, V215, V216, V217, V218} end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V60))), case V219 of {'Idris.Prelude.Types.Left', E35} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V221) -> begin (V229 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(V222, V223, V224)) end end end, fun () -> fun (V225) -> [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.TTImp.TTImp.IVar', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Builtin':'un--snd'(V225))}} | []] end end, fun () -> [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V3} | case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E37} -> (fun (V226) -> begin (V227 = ('Idris.Idris2.Core.FC':'un--emptyFC'())), begin (V228 = {'Idris.TTImp.TTImp.IVar', V227, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"Refl"/utf8>>}}}}), [{'Idris.Builtin.MkPair', V2, {'Idris.TTImp.TTImp.INamedApp', V227, V228, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"x"/utf8>>}}, V3}} | []] end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end] end))), begin (V259 = ('Idris.Idris2.TTImp.TTImp':'un--gapply'({'Idris.TTImp.TTImp.IVar', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V186}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V230) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.TTImp.TTImp.IVar', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V230}} end, V55)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V233, V234, V235)) end end end end end, fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V238, V239, V240)) end end end end end, fun (V241) -> fun (V242) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V242)) end end, fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V246, V247, V248, V249)) end end end end end end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V251)) end end, fun (V252) -> fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V254, V255, V256)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V257) -> fun (V258) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V257, V258)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V229, V59))))))), begin (V263 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Applying to with argument "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V260) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V260)) end, fun (V261) -> fun (V262) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V261, V262)) end end}, V259)))) end, V60))), case V263 of {'Idris.Prelude.Types.Left', E38} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V265) -> begin (V271 = begin (V266 = ('Idris.Idris2.Core.Context':'un--getFullName'(V17, {'Idris.Core.Name.Resolved', V10}, V60))), case V266 of {'Idris.Prelude.Types.Left', E40} -> (fun (V267) -> {'Idris.Prelude.Types.Left', V267} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V268) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V9, fun (V269) -> {'Idris.Core.Core.InRHS', V5, V268, V269} end, fun (V270) -> ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V6, V19, V17, V16, V15, V10, V26, V9, V22, V50, V7, V20, V259, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V19, V50, V24)), V270)) end))(V60)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V271 of {'Idris.Prelude.Types.Left', E42} -> (fun (V272) -> {'Idris.Prelude.Types.Left', V272} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V273) -> begin (V276 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V274) -> fun (V275) -> ('nested--15468-7258--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, (1 + 0), V186, V59, V18, V274, V275)) end end, V0, [], V60))), case V276 of {'Idris.Prelude.Types.Left', E44} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V278) -> begin (V288 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"With clauses: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V279) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V280) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V280)) end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V281, V282)) end end}, V279)) end, fun (V283) -> fun (V284) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V285) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V285)) end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V286, V287)) end end}, V283, V284)) end end}, V278)))) end, V60))), case V288 of {'Idris.Prelude.Types.Left', E46} -> (fun (V289) -> {'Idris.Prelude.Types.Left', V289} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V290) -> begin (V291 = ('un--applyEnv'(V6, V17, V7, V186, V60))), case V291 of {'Idris.Prelude.Types.Left', E48} -> (fun (V292) -> {'Idris.Prelude.Types.Left', V292} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V293) -> begin (V294 = [V293 | V8]), begin (V295 = {'Idris.TTImp.TTImp.IDef', V5, V186, V278}), begin (V296 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V17, V16, V15, [], V294, V7, V295))(V60))), case V296 of {'Idris.Prelude.Types.Left', E50} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V298) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkClause', V19, V50, V23, V273}}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V299) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #4"/utf8>>}, V299)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in checkClause-8653'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V38 of {'Idris.Prelude.Types.Just', E0} -> (fun (V40) -> begin (V46 = (('nested--15468-7256--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V37, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V43, V44)) end end end end, fun (V45) -> {'Idris.Builtin.MkPair', V45, V36} end, V2)), V40))(V39))), case V46 of {'Idris.Prelude.Types.Left', E1} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V48) -> case V48 of {'Idris.Builtin.DPair.MkDPair', E3, E4} -> (fun (V49, V50) -> case V50 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V51, V52) -> case V52 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V53, V54) -> begin (V55 = ('Idris.Idris2.TTImp.Elab.Utils':'un--bindNotReq'(V19, ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), 0, V21, V35, [], V24))), begin (V56 = ('Idris.Idris2.Builtin':'un--fst'(V55))), begin (V57 = ('Idris.Idris2.Builtin':'un--snd'(V55))), begin (V62 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V58) -> fun (V59) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_WithFlag'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_WithFlag'(V60, V61)) end end}, 0, V1)) of 1 -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V31, V39)); 0 -> {'Idris.Prelude.Types.Right', V31}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V62 of {'Idris.Prelude.Types.Left', E9} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V64) -> begin (V71 = begin (V65 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V49, V34)), V64, V51, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V49)), V36))))(V39))), case V65 of {'Idris.Prelude.Types.Left', E11} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V67) -> begin (V68 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V49, V34)), V64, V51, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V49)), V57))))(V39))), case V68 of {'Idris.Prelude.Types.Left', E13} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V70) -> ('Idris.Idris2.Core.Normalise':'un--replace'(V17, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V49, V34)), V64, V51, V67, V53, V70, V39)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V71 of {'Idris.Prelude.Types.Left', E15} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V73) -> begin (V74 = (V54(V73))), begin (V75 = ('nested--15468-7255--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V21))), begin (V76 = {'Idris.Builtin.DPair.MkDPair', V49, {'Idris.Builtin.MkPair', V51, {'Idris.Builtin.MkPair', V53, V54}}}), (('case--case block in case block in case block in case block in case block in case block in case block in checkClause-9105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V40, V49, V51, V53, V54, V76, V55, V56, V57, V64, V73, V74, V75, ('Idris.Idris2.TTImp.Elab.Utils':'un--bindReq'(V19, ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V75, V35, [], V74))))(V39)) end end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #3"/utf8>>}, V39)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkClause-8378'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V34 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V36, V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V19, V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value type"/utf8>> end, V33, V35))), case V38 of {'Idris.Prelude.Types.Left', E2} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V40) -> begin (V44 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Using vars "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V42, V43)) end end}, V36)))) end, V35))), case V44 of {'Idris.Prelude.Types.Left', E4} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V46) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V32, V37)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V47) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V33, V37)) of {'Idris.Prelude.Types.Just', E7} -> (fun (V48) -> ('case--case block in case block in case block in case block in case block in checkClause-8653'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V36, V37, V47, V48, ('Idris.Idris2.Core.Env':'un--shrinkEnv'(V21, V37)), V35)) end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #2"/utf8>>}, V35)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #1"/utf8>>}, V35)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--combineLinear-5590'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> begin (V6 = (('un--combineLinear'(V3, V2))(V5))), case V6 of {'Idris.Prelude.Types.Left', E4} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V8) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V0, V1} | V8]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V9 = ('nested--14405-5437--in--un--combineAll'(V0, V1, V2, V3, V1, V4, V5))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V13 = (('un--combineLinear'(V3, ('Idris.Idris2.Data.List':'un--filter'(fun (V12) -> ('nested--14405-5434--in--un--notN'(V0, V1, V2, V3, V12)) end, V2))))(V5))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V0, V11} | V15]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'case--findLinear-5132'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> case V7 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V10, V11, V12) -> case V8 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> begin (V14 = begin (V13 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V12, case V16 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V17 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V47 of {'Idris.Prelude.Types.Left', E37} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V49) -> case V49 of {'Idris.Prelude.Types.Just', E39} -> (fun (V50) -> begin (V51 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V5, [], V16, {'Idris.Core.Env.Nil'}, V50))(V9))), case V51 of {'Idris.Prelude.Types.Left', E40} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V53) -> (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V0, ('nested--13680-4804--in--un--accessible'(V0, V1, V2, V3, V4, V5, V11, V2)), V53, V8))(V9)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1)); _ -> fun (V54) -> {'Idris.Prelude.Types.Right', []} end end.
'nested--22436-12224--in--un--withTotality'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V9, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V10, V12))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V24 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'((V11()), fun (V19) -> fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V15, V20))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V19, V20)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V15, V12))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> {'Idris.Prelude.Types.Right', V26} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--16681-7476--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> [V18 | [('nested--16681-7475--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34)) | []]].
'nested--16539-7315--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> [('nested--16539-7314--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) | []].
'nested--16681-7475--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--16539-7314--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V5)).
'nested--21395-11307--in--un--toErased'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V8, V9) -> fun (V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> begin (V19 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V8, V4, V2, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 1, V11, V13, V10))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Transform':'un--applyTransforms'(V4, V11, V14))(V10))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.TTImp.PartialEval':'un--applySpecialise'(V8, V4, V3, V2, V11, V6, V24))(V10))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V32 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V8, V4, V2, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 1, V11, V27, V10))), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V8, {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V21, V34}}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21395-11308--in--un--toClause'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Core.Context.Context.MkClause', V7, V9, V11, V12} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--22436-12225--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V11, V12, V13) -> 1 end(E0, E1, E2)); {'Idris.Core.TT.Erased', E3, E4} -> (fun (V14, V15) -> 1 end(E3, E4)); {'Idris.Core.TT.As', E5, E6, E7, E8} -> (fun (V16, V17, V18, V19) -> ('nested--22436-12225--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19)) end(E5, E6, E7, E8)); _ -> 0 end.
'nested--14405-5434--in--un--notN'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V0, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21395-11300--in--un--noInline'(V0, V1, V2, V3, V4, V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.Context.Inline'} -> (fun () -> 0 end()); _ -> ('nested--21395-11300--in--un--noInline'(V0, V1, V2, V3, V4, V7)) end end(E0, E1)); _ -> 1 end.
'nested--15468-7255--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V19, V20) -> case V19 of {'Idris.Core.TT.Pi', E2, E3, E4, E5} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V21, V22, {'Idris.Core.TT.Explicit'}, V24}, ('nested--15468-7255--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20))} end(E2, E3, E4, E5)); _ -> {'Idris.Core.Env.::', V19, ('nested--15468-7255--in--un--mkExplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20))} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21395-11302--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.TT':'un--apply'(V1, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"idris_crash"/utf8>>}}}}, [{'Idris.Core.TT.Erased', V1, 0} | [{'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Str', V6}} | []]])).
'nested--15468-7258--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V24, V25, V26) -> begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"PatClause"/utf8>> end, V23))), case V27 of {'Idris.Prelude.Types.Left', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V29) -> begin (V30 = (('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V17, V16, V24, V18, V8, V19, V20, V21, V25))(V23))), case V30 of {'Idris.Prelude.Types.Left', E5} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V32) -> begin (V33 = (('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V17, V16, V24, V18, V19, V20, V26, V21))(V23))), case V33 of {'Idris.Prelude.Types.Left', E7} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V24, V32, V35}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E9, E10, E11, E12, E13, E14} -> (fun (V36, V37, V38, V39, V40, V41) -> begin (V42 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"WithClause"/utf8>> end, V23))), case V42 of {'Idris.Prelude.Types.Left', E15} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V44) -> begin (V45 = (('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V17, V16, V36, V18, V8, V19, V20, V21, V37))(V23))), case V45 of {'Idris.Prelude.Types.Left', E17} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V47) -> begin (V48 = (('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V17, V16, V36, V18, V19, V20, V38, V21))(V23))), case V48 of {'Idris.Prelude.Types.Left', E19} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V50) -> begin (V53 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V51) -> fun (V52) -> ('nested--15468-7258--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, (1 + V18), V19, V20, V21, V51, V52)) end end, V41, [], V23))), case V53 of {'Idris.Prelude.Types.Left', E21} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.WithClause', V36, V47, V50, V39, V40, V55}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.ImpossibleClause', E23, E24} -> (fun (V56, V57) -> begin (V58 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"ImpossibleClause"/utf8>> end, V23))), case V58 of {'Idris.Prelude.Types.Left', E25} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V17, V16, V56, V18, V8, V19, V20, V21, V57))(V23))), case V61 of {'Idris.Prelude.Types.Left', E27} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ImpossibleClause', V56, V63}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21395-11303--in--un--matchAny'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.Core.TT.App', V6, ('nested--21395-11303--in--un--matchAny'(V0, V1, V2, V3, V4, V7)), {'Idris.Core.TT.Erased', V6, 0}} end(E0, E1, E2)); _ -> V5 end.
'nested--21395-11304--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Core.Context.Context.MkClause', V5, V6, ('nested--21395-11303--in--un--matchAny'(V0, V1, V2, V3, V4, V7)), ('nested--21395-11302--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unhandled input for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V1))))))))))}.
'nested--14405-5435--in--un--lookupAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V8)) of 1 -> [V9 | ('nested--14405-5435--in--un--lookupAll'(V0, V1, V2, V3, V4, V7))]; 0 -> ('nested--14405-5435--in--un--lookupAll'(V0, V1, V2, V3, V4, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15468-7257--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.DPair.MkDPair', V18, {'Idris.Core.TT.SubRefl'}} end()); _ -> case V20 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.DPair.MkDPair', V18, {'Idris.Core.TT.SubRefl'}} end()); _ -> case V18 of [E0 | E1] -> (fun (V21, V22) -> case V19 of {'Idris.Core.TT.DropCons', E2} -> (fun (V23) -> case V20 of {'Idris.Core.TT.DropCons', E3} -> (fun (V24) -> case ('nested--15468-7257--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V23, V24)) of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V25, V26) -> {'Idris.Builtin.DPair.MkDPair', V25, {'Idris.Core.TT.DropCons', V26}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Core.TT.KeepCons', E6} -> (fun (V27) -> case ('nested--15468-7257--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V23, V27)) of {'Idris.Builtin.DPair.MkDPair', E7, E8} -> (fun (V28, V29) -> {'Idris.Builtin.DPair.MkDPair', [V21 | V28], {'Idris.Core.TT.KeepCons', V29}} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Core.TT.KeepCons', E9} -> (fun (V30) -> case V20 of {'Idris.Core.TT.DropCons', E10} -> (fun (V31) -> case ('nested--15468-7257--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V30, V31)) of {'Idris.Builtin.DPair.MkDPair', E11, E12} -> (fun (V32, V33) -> {'Idris.Builtin.DPair.MkDPair', [V21 | V32], {'Idris.Core.TT.KeepCons', V33}} end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.KeepCons', E13} -> (fun (V34) -> case ('nested--15468-7257--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V30, V34)) of {'Idris.Builtin.DPair.MkDPair', E14, E15} -> (fun (V35, V36) -> {'Idris.Builtin.DPair.MkDPair', [V21 | V35], {'Idris.Core.TT.KeepCons', V36}} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--21395-11306--in--un--getSpec'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.Context.PartialEval', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Just', V8} end(E2)); _ -> ('nested--21395-11306--in--un--getSpec'(V0, V1, V2, V3, V4, V7)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--22436-12228--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V13) -> begin (V14 = ('Idris.Idris2.TTImp.Impossible':'un--getImpossibleTerm'(V0, V9, V4, V5, V12, V13))), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated impossible LHS: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V16)))) end, V13))), case V17 of {'Idris.Prelude.Types.Left', E3} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.MkClause', [], {'Idris.Core.Env.Nil'}, V16, {'Idris.Core.TT.Erased', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V12)), 1}}}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V20) -> fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error in getClause "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V20)))) end, V21))), case V22 of {'Idris.Prelude.Types.Left', E5} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V11)) end(E0)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V25}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E47 | E48] -> (fun (V10, V11) -> case V10 of {'Idris.Core.TT.As', E96, E97, E98, E99} -> (fun (V12, V13, V14, V15) -> case V13 of 0 -> ('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V11])); 1 -> ('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V14 | V11])); _ -> case V8 of {'Idris.Core.Value.NBind', E106, E107, E108, E109} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E116, E117, E118, E119} -> (fun (V20, V21, V22, V23) -> fun (V24) -> case V9 of [E126 | E127] -> (fun (V25, V26) -> case V25 of {'Idris.Core.TT.Local', E136, E137, E138} -> (fun (V27, V28, V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E139} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V29))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V29, V3)) of 1 -> begin (V35 = (((V19(V33))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V27, {'Idris.Core.TT.Bound'}, V17}))))(V24))), case V35 of {'Idris.Prelude.Types.Left', E141} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V37) -> begin (V38 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V37, V26))(V24))), case V38 of {'Idris.Prelude.Types.Left', E143} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V40) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V34, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V21, V7))} | V40]} end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V41 = (((V19(V33))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V27, {'Idris.Core.TT.Bound'}, V17}))))(V24))), case V41 of {'Idris.Prelude.Types.Left', E145} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V43) -> (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V43, V26))(V24)) end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136, E137, E138)); _ -> begin (V45 = begin (V44 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E128} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V47) -> begin (V48 = (('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V21, V7)), V25))(V24))), case V48 of {'Idris.Prelude.Types.Left', E130} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V50) -> begin (V51 = (((V19(V47))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V17}))))(V24))), case V51 of {'Idris.Prelude.Types.Left', E132} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V53) -> begin (V54 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V53, V26))(V24))), case V54 of {'Idris.Prelude.Types.Left', E134} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V50, V56))} end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127)); _ -> case V9 of [E120 | E121] -> (fun (V57, V58) -> begin (V59 = (('un--findLinear'(V6, V5, 0, V3, V7, V57))(V24))), case V59 of {'Idris.Prelude.Types.Left', E122} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V61) -> begin (V62 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V58))(V24))), case V62 of {'Idris.Prelude.Types.Left', E124} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V64) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V61, V64))} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120, E121)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116, E117, E118, E119)); _ -> fun (V65) -> case V9 of [E110 | E111] -> (fun (V66, V67) -> begin (V68 = (('un--findLinear'(V6, V5, 0, V3, V7, V66))(V65))), case V68 of {'Idris.Prelude.Types.Left', E112} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V70) -> begin (V71 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V67))(V65))), case V71 of {'Idris.Prelude.Types.Left', E114} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V70, V73))} end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110, E111)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E106, E107, E108, E109)); _ -> fun (V74) -> case V9 of [E100 | E101] -> (fun (V75, V76) -> begin (V77 = (('un--findLinear'(V6, V5, 0, V3, V7, V75))(V74))), case V77 of {'Idris.Prelude.Types.Left', E102} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V79) -> begin (V80 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V76))(V74))), case V80 of {'Idris.Prelude.Types.Left', E104} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V82) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V79, V82))} end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100, E101)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E96, E97, E98, E99)); _ -> case V8 of {'Idris.Core.Value.NBind', E55, E56, E57, E58} -> (fun (V83, V84, V85, V86) -> case V85 of {'Idris.Core.TT.Pi', E65, E66, E67, E68} -> (fun (V87, V88, V89, V90) -> fun (V91) -> case V9 of [E75 | E76] -> (fun (V92, V93) -> case V92 of {'Idris.Core.TT.Local', E85, E86, E87} -> (fun (V94, V95, V96) -> begin (V98 = begin (V97 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E88} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V100) -> begin (V101 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V96))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V96, V3)) of 1 -> begin (V102 = (((V86(V100))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V94, {'Idris.Core.TT.Bound'}, V84}))))(V91))), case V102 of {'Idris.Prelude.Types.Left', E90} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V104) -> begin (V105 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V104, V93))(V91))), case V105 of {'Idris.Prelude.Types.Left', E92} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V107) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V101, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V88, V7))} | V107]} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V108 = (((V86(V100))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V94, {'Idris.Core.TT.Bound'}, V84}))))(V91))), case V108 of {'Idris.Prelude.Types.Left', E94} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V110) -> (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V110, V93))(V91)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85, E86, E87)); _ -> begin (V112 = begin (V111 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V111} end), case V112 of {'Idris.Prelude.Types.Left', E77} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V114) -> begin (V115 = (('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V88, V7)), V92))(V91))), case V115 of {'Idris.Prelude.Types.Left', E79} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V117) -> begin (V118 = (((V86(V114))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V83, {'Idris.Core.TT.Bound'}, V84}))))(V91))), case V118 of {'Idris.Prelude.Types.Left', E81} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V120) -> begin (V121 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V120, V93))(V91))), case V121 of {'Idris.Prelude.Types.Left', E83} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V117, V123))} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75, E76)); _ -> case V9 of [E69 | E70] -> (fun (V124, V125) -> begin (V126 = (('un--findLinear'(V6, V5, 0, V3, V7, V124))(V91))), case V126 of {'Idris.Prelude.Types.Left', E71} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V128) -> begin (V129 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V125))(V91))), case V129 of {'Idris.Prelude.Types.Left', E73} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V131) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V128, V131))} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69, E70)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E65, E66, E67, E68)); _ -> fun (V132) -> case V9 of [E59 | E60] -> (fun (V133, V134) -> begin (V135 = (('un--findLinear'(V6, V5, 0, V3, V7, V133))(V132))), case V135 of {'Idris.Prelude.Types.Left', E61} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V137) -> begin (V138 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V134))(V132))), case V138 of {'Idris.Prelude.Types.Left', E63} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V140) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V137, V140))} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59, E60)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E55, E56, E57, E58)); _ -> fun (V141) -> case V9 of [E49 | E50] -> (fun (V142, V143) -> begin (V144 = (('un--findLinear'(V6, V5, 0, V3, V7, V142))(V141))), case V144 of {'Idris.Prelude.Types.Left', E51} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V146) -> begin (V147 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V143))(V141))), case V147 of {'Idris.Prelude.Types.Left', E53} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V149) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V146, V149))} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E47, E48)); _ -> case V8 of {'Idris.Core.Value.NBind', E6, E7, E8, E9} -> (fun (V150, V151, V152, V153) -> case V152 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V154, V155, V156, V157) -> fun (V158) -> case V9 of [E26 | E27] -> (fun (V159, V160) -> case V159 of {'Idris.Core.TT.Local', E36, E37, E38} -> (fun (V161, V162, V163) -> begin (V165 = begin (V164 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V164} end), case V165 of {'Idris.Prelude.Types.Left', E39} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V167) -> begin (V168 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V163))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V163, V3)) of 1 -> begin (V169 = (((V153(V167))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V161, {'Idris.Core.TT.Bound'}, V151}))))(V158))), case V169 of {'Idris.Prelude.Types.Left', E41} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V171) -> begin (V172 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V171, V160))(V158))), case V172 of {'Idris.Prelude.Types.Left', E43} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V174) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V168, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V155, V7))} | V174]} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V175 = (((V153(V167))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V161, {'Idris.Core.TT.Bound'}, V151}))))(V158))), case V175 of {'Idris.Prelude.Types.Left', E45} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V177) -> (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V177, V160))(V158)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38)); _ -> begin (V179 = begin (V178 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V178} end), case V179 of {'Idris.Prelude.Types.Left', E28} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V181) -> begin (V182 = (('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V155, V7)), V159))(V158))), case V182 of {'Idris.Prelude.Types.Left', E30} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V184) -> begin (V185 = (((V153(V181))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V150, {'Idris.Core.TT.Bound'}, V151}))))(V158))), case V185 of {'Idris.Prelude.Types.Left', E32} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V187) -> begin (V188 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V187, V160))(V158))), case V188 of {'Idris.Prelude.Types.Left', E34} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V190) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V184, V190))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26, E27)); _ -> case V9 of [E20 | E21] -> (fun (V191, V192) -> begin (V193 = (('un--findLinear'(V6, V5, 0, V3, V7, V191))(V158))), case V193 of {'Idris.Prelude.Types.Left', E22} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V195) -> begin (V196 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V192))(V158))), case V196 of {'Idris.Prelude.Types.Left', E24} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V198) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V195, V198))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); _ -> fun (V199) -> case V9 of [E10 | E11] -> (fun (V200, V201) -> begin (V202 = (('un--findLinear'(V6, V5, 0, V3, V7, V200))(V199))), case V202 of {'Idris.Prelude.Types.Left', E12} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V204) -> begin (V205 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V201))(V199))), case V205 of {'Idris.Prelude.Types.Left', E14} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V207) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V204, V207))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9)); _ -> fun (V208) -> case V9 of [E0 | E1] -> (fun (V209, V210) -> begin (V211 = (('un--findLinear'(V6, V5, 0, V3, V7, V209))(V208))), case V211 of {'Idris.Prelude.Types.Left', E2} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V213) -> begin (V214 = (('nested--13680-4805--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V210))(V208))), case V214 of {'Idris.Prelude.Types.Left', E4} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V216) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V213, V216))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--20778-10781--in--un--dropErased'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> {'Idris.Prelude.Types.Right', V5}; [E0 | E1] -> (fun (V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V43 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V12 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V43 of {'Idris.Prelude.Types.Left', E34} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V45) -> case V45 of {'Idris.Prelude.Types.Just', E36} -> (fun (V46) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V46 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V54 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V67) -> fun (V68) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V67, V68)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V69) -> fun (V70) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V69, V70)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))) of 1 -> ('nested--20778-10781--in--un--dropErased'(V0, V1, V2, V3, V8, V5, V6)); 0 -> ('nested--20778-10781--in--un--dropErased'(V0, V1, V2, V3, V8, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V7, V5)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--20778-10781--in--un--dropErased'(V0, V1, V2, V3, V8, V5, V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14405-5437--in--un--combineAll'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', V4}; [E0 | E1] -> (fun (V7, V8) -> begin (V9 = ('nested--14405-5436--in--un--combine'(V0, V1, V2, V3, V4, V7, V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> ('nested--14405-5437--in--un--combineAll'(V0, V1, V2, V3, V11, V8, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14405-5436--in--un--combine'(V0, V1, V2, V3, V4, V5, V6) -> case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V13, V14)) end end}}, ('Idris.Idris2.Algebra.Preorder':'un--glb'({'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V15, V16)) end end, fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V17)) end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V18, V19, V20, V21, V22)) end end end end end}, V4, V5)))) of 1 -> 0; 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.Preorder':'un--glb'({'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V23, V24)) end end, fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V25)) end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V26, V27, V28, V29, V30)) end end end end end}, V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearUsed', V3, (1 + (1 + 0)), V0}, V6)); 0 -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.Preorder':'un--lub'({'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V31, V32)) end end, fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V33)) end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V34, V35, V36, V37, V38)) end end end end end}, V4, V5))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--22460-12319--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> begin (V24 = (((V19(V13))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V3, {'Idris.Core.TT.Bound'}, V17}))))(V15))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> ('nested--22460-12319--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V26, V15)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V9, [], V13, {'Idris.Core.Env.Nil'}, V14, V15)) end end(E0, E1, E2, E3)); _ -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V9, [], V13, {'Idris.Core.Env.Nil'}, V14, V15)) end.
'nested--22436-12227--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'([], V9, {'Idris.Core.Env.Nil'}, V12, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V21 = ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V17) -> case V17 of {'Idris.Core.TT.MkKindedName', E2, E3, E4} -> (fun (V18, V19, V20) -> V20 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V16))), ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V9, V7, fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V26) -> begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking for impossibility: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V28, V29)) end end}, V21)))) end, V22))), case V30 of {'Idris.Prelude.Types.Left', E7} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V9, V22))), case V33 of {'Idris.Prelude.Types.Left', E9} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V9, 1, V22))), case V36 of {'Idris.Prelude.Types.Left', E11} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V9, 0, V21, V22))), case V39 of {'Idris.Prelude.Types.Left', E13} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V42, V43) -> begin (V44 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V9, V35, V22))), case V44 of {'Idris.Prelude.Types.Left', E17} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V9, V8, V7, V10, {'Idris.TTImp.Elab.Check.InLHS', V11}, [], [], {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IBindHere', V3, {'Idris.TTImp.TTImp.PATTERN'}, V43}, {'Idris.Prelude.Types.Nothing'}))(V22))), case V47 of {'Idris.Prelude.Types.Left', E19} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V49) -> case V49 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V50, V51) -> begin (V53 = begin (V52 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V52} end), case V53 of {'Idris.Prelude.Types.Left', E23} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V9, [], V55, {'Idris.Core.Env.Nil'}, V50, V22))), case V56 of {'Idris.Prelude.Types.Left', E25} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V58) -> begin (V59 = ('un--hasEmptyPat'([], V9, V55, {'Idris.Core.Env.Nil'}, V58, V22))), case V59 of {'Idris.Prelude.Types.Left', E27} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V61) -> case V61 of 1 -> begin (V62 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"No empty pat"/utf8>> end, V22))), case V62 of {'Idris.Prelude.Types.Left', E29} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V64) -> begin (V66 = begin (V65 = ('erlang':'put'(V9, V26))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E31} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V69 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Some empty pat"/utf8>> end, V22))), case V69 of {'Idris.Prelude.Types.Left', E33} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V26, V22))), case V72 of {'Idris.Prelude.Types.Left', E35} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V74) -> begin (V78 = begin (V75 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V9, [], V74, {'Idris.Core.Env.Nil'}, V58))(V22))), case V75 of {'Idris.Prelude.Types.Left', E37} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V77) -> ('nested--22460-12319--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V11, V10, V74, V77, V22)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V78 of {'Idris.Prelude.Types.Left', E39} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V80) -> begin (V82 = begin (V81 = ('erlang':'put'(V9, V26))), {'Idris.Prelude.Types.Right', V81} end), case V82 of {'Idris.Prelude.Types.Left', E41} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V84) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V80}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V85) -> fun (V86) -> begin (V88 = begin (V87 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V87} end), case V88 of {'Idris.Prelude.Types.Left', E43} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V90) -> begin (V91 = (('un--recoverableErr'(V9, V90, V85))(V86))), case V91 of {'Idris.Prelude.Types.Left', E45} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V93) -> case V93 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V12}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--22436-12229--in--un--checkCoverage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V15) -> fun (V16) -> ('nested--22436-12228--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15, V16)) end end, V13, [], V14))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V47 = begin (V40 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V28, V29, V30)) end end end}, V22, V23, V24)) end end end, fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V37, V38, V39)) end end end}, V31, V32, V33)) end end end}, V20, V21)) end end, V19, [], V14))), case V40 of {'Idris.Prelude.Types.Left', E2} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V42) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Using clauses :"/utf8>> | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V43) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Clause'(V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context.Context':'dn--un--showPrec_Show_Clause'(V45, V46)) end end}, V43)))) end, V42))])) end, V14)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V47 of {'Idris.Prelude.Types.Left', E4} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V49) -> begin (V51 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V50) -> V50 end, V19))), begin (V52 = ('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V9, V3, {'Idris.Core.CaseBuilder.CompileTime', V12}, {'Idris.Core.Name.Resolved', V10}, V11, V51, V14))), case V52 of {'Idris.Prelude.Types.Left', E6} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V54) -> case V54 of {'Idris.Builtin.DPair.MkDPair', E8, E9} -> (fun (V55, V56) -> case V56 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V57, V58) -> begin (V68 = begin (V65 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V59, V60, V61)) end end end, fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V62, V63, V64)) end end end}, V57, V14))), case V65 of {'Idris.Prelude.Types.Left', E12} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V67) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Working from "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V55, V67)))) end, V14)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V68 of {'Idris.Prelude.Types.Left', E14} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V70) -> begin (V101 = case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V82)) end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V86, V87, V88, V89)) end end end end end end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V91)) end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V94, V95, V96)) end end end end end}, fun (V97) -> ('nested--22436-12226--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V97)) end, V51)) of 1 -> begin (V98 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Catch all case in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V10)))) end, V14))), case V98 of {'Idris.Prelude.Types.Left', E16} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V100) -> {'Idris.Prelude.Types.Right', []} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Coverage':'un--getMissing'(V55, V9, V3, {'Idris.Core.Name.Resolved', V10}, V57, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V101 of {'Idris.Prelude.Types.Left', E18} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V103) -> begin (V120 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun (V104) -> begin (V113 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V107, V108, V109)) end end end, fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V110, V111, V112)) end end end}, V105, V106)) end end, V103, [], V104))), case V113 of {'Idris.Prelude.Types.Left', E20} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V115) -> begin (V116 = ('Idris.Idris2.Core.Context':'un--getFullName'(V9, {'Idris.Core.Name.Resolved', V10}, V104))), case V116 of {'Idris.Prelude.Types.Left', E22} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V118) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Initially missing in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V118)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V119)) end, V115))))))))))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V14))), case V120 of {'Idris.Prelude.Types.Left', E24} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V122) -> begin (V125 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V123) -> fun (V124) -> ('nested--22436-12227--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V123, V124)) end end, V103, [], V14))), case V125 of {'Idris.Prelude.Types.Left', E26} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V127) -> begin (V131 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Coverage':'un--checkMatched'(V9, V51, V128, V129)) end end, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V130) -> V130 end, V127)), [], V14))), case V131 of {'Idris.Prelude.Types.Left', E28} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V133) -> begin (V135 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V134) -> V134 end, V133))), case ('Idris.Idris2.Data.List':'un--isNil'(V135)) of 1 -> begin (V136 = ('Idris.Idris2.Core.Coverage':'un--getNonCoveringRefs'(V9, V3, {'Idris.Core.Name.Resolved', V10}, V14))), case V136 of {'Idris.Prelude.Types.Left', E30} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V138) -> case V138 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}}; _ -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Covering'(V139, V140, V141)) end end end, fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Covering'(V142, V143, V144)) end end end}, {'Idris.Core.TT.NonCoveringCall', V138}, V14)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V135}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--22436-12226--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Context.Context.MkClause', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, fun (V41) -> ('nested--22436-12225--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V41)) end, ('Idris.Idris2.Core.TT':'un--getArgs'(V13)))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21395-11301--in--un--caseName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Name.CaseBlock', E0, E1} -> (fun (V6, V7) -> 1 end(E0, E1)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V8, V9) -> ('nested--21395-11301--in--un--caseName'(V0, V1, V2, V3, V4, V9)) end(E2, E3)); _ -> 0 end.
'nested--15468-7256--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V21 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, V20}), begin (V22 = {'Idris.Core.TT.Local', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Prelude.Types.Just', 0}, 0}), begin (V24 = fun (V23) -> {'Idris.Core.TT.Bind', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('nested--16539-7314--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V18)), {'Idris.Core.TT.Pi', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, V23} end), fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', ('nested--16539-7315--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V18)), {'Idris.Builtin.MkPair', V21, {'Idris.Builtin.MkPair', V22, V24}}}} end end end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> fun (V27) -> case V26 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V28, V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V33) -> begin (V34 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"Equal"/utf8>>}}}), begin (V65 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V34, case V33 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V35 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V27))), case V65 of {'Idris.Prelude.Types.Left', E35} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V67) -> case V67 of {'Idris.Prelude.Types.Just', E37} -> (fun (V68) -> case V68 of {'Idris.Core.Context.Context.TCon', E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76) -> begin (V83 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V17, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V77, V78, V79)) end end end, fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V80, V81, V82)) end end end}, V34, V27))), case V83 of {'Idris.Prelude.Types.Left', E46} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V85) -> begin (V86 = {'Idris.Core.TT.Ref', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Core.TT.TyCon', V69, V70}, V85}), begin (V87 = ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V18))), begin (V88 = ('Idris.Idris2.Core.TT':'un--apply'(('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V86, [V87 | [V87 | [('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V29)) | [{'Idris.Core.TT.Local', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Prelude.Types.Just', 0}, 0} | []]]]]))), begin (V89 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V88}, {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, V20}}), begin (V90 = {'Idris.Core.TT.Local', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Prelude.Types.Just', 0}, (1 + 0)}), begin (V92 = fun (V91) -> {'Idris.Core.TT.Bind', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('nested--16681-7475--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28, V29, V20, V18, V33, V34, V71, V72, V73, V74, V75, V76, V70, V69, V67, V85, V86)), {'Idris.Core.TT.Pi', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, {'Idris.Core.TT.Bind', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V28, {'Idris.Core.TT.Pi', ('nested--15468-7254--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V88}, V91}} end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', ('nested--16681-7476--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28, V29, V20, V18, V33, V34, V71, V72, V73, V74, V75, V76, V70, V69, V67, V85, V86)), {'Idris.Builtin.MkPair', V89, {'Idris.Builtin.MkPair', V90, V92}}}} end end end end end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V27)) end end(E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V27)) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21395-11305--in--un--addErrorCase'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.Context.MkClause', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> case V7 of [] -> [{'Idris.Core.Context.Context.MkClause', V8, V9, V10, V11} | [('nested--21395-11304--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V8, V9, V10)) | []]]; _ -> [V6 | ('nested--21395-11305--in--un--addErrorCase'(V0, V1, V2, V3, V4, V7))] end end(E2, E3, E4, E5)); _ -> [V6 | ('nested--21395-11305--in--un--addErrorCase'(V0, V1, V2, V3, V4, V7))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13680-4804--in--un--accessible'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Func'} -> (fun () -> case V4 of 1 -> V7; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> V7 end.
'un--warnUnreachable'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.MkClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Idris.Core.Core.UnreachableClause', V3, ('Idris.Idris2.Core.TT':'un--getLoc'(V5)), V4, V5}, V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPats'(V0) -> case V0 of {'Idris.Core.Context.Context.MkClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setLinear'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> begin (V10 = {'Idris.Core.TT.PVar', V6, V7, V8, V9}), case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V3, V0)) of {'Idris.Prelude.Types.Just', E8} -> (fun (V15) -> {'Idris.Core.TT.Bind', V2, V3, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V10, V15)), ('un--setLinear'(V0, V5))} end(E8)); _ -> {'Idris.Core.TT.Bind', V2, V3, V10, ('un--setLinear'(V0, V5))} end end end(E4, E5, E6, E7)); {'Idris.Core.TT.PVTy', E9, E10, E11} -> (fun (V16, V17, V18) -> begin (V19 = {'Idris.Core.TT.PVTy', V16, V17, V18}), case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V22, V23)) end end}, V3, V0)) of {'Idris.Prelude.Types.Just', E12} -> (fun (V24) -> {'Idris.Core.TT.Bind', V2, V3, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V19, V24)), ('un--setLinear'(V0, V5))} end(E12)); _ -> {'Idris.Core.TT.Bind', V2, V3, V19, ('un--setLinear'(V0, V5))} end end end(E9, E10, E11)); _ -> V1 end end(E0, E1, E2, E3)); _ -> V1 end.
'un--recoverableErr'(V0, V1, V2) -> case V2 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> begin (V39 = case V1 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V5, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V39, V6, V7))(V40))), case V41 of {'Idris.Prelude.Types.Left', E36} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V43) -> begin (V44 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V39, V6, V8))(V40))), case V44 of {'Idris.Prelude.Types.Left', E38} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.recover"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Recovering from CantConvert?"/utf8>> | [<<"Checking:"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V43)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V46)))) | []]]]])) end, V40))), case V47 of {'Idris.Prelude.Types.Left', E40} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V49) -> (('un--recoverable'(V0, V3, V39, V43, V46))(V40)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3, E4, E5)); {'Idris.Core.Core.CantSolveEq', E42, E43, E44, E45, E46, E47} -> (fun (V50, V51, V52, V53, V54, V55) -> begin (V86 = case V1 of {'Idris.Core.Context.MkDefs', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> {'Idris.Core.Context.MkDefs', V52, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85} end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V87) -> begin (V88 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V50, V86, V53, V54))(V87))), case V88 of {'Idris.Prelude.Types.Left', E78} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V90) -> begin (V91 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V50, V86, V53, V55))(V87))), case V91 of {'Idris.Prelude.Types.Left', E80} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V93) -> (('un--recoverable'(V0, V50, V86, V90, V93))(V87)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E42, E43, E44, E45, E46, E47)); {'Idris.Core.Core.BadDotPattern', E82, E83, E84, E85, E86, E87} -> (fun (V94, V95, V96, V97, V98, V99) -> fun (V100) -> case V97 of 3 -> {'Idris.Prelude.Types.Right', 1}; _ -> {'Idris.Prelude.Types.Right', 0} end end end(E82, E83, E84, E85, E86, E87)); {'Idris.Core.Core.CyclicMeta', E88, E89, E90, E91, E92} -> (fun (V101, V102, V103, V104, V105) -> fun (V106) -> {'Idris.Prelude.Types.Right', 1} end end(E88, E89, E90, E91, E92)); {'Idris.Core.Core.AllFailed', E93} -> (fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V109) -> ('un--recoverableErr'(V0, V1, V109)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V110) -> ('Idris.Idris2.Builtin':'un--snd'(V110)) end, V107)), V108)) end end(E93)); {'Idris.Core.Core.WhenUnifying', E94, E95, E96, E97, E98, E99, E100} -> (fun (V111, V112, V113, V114, V115, V116, V117) -> ('un--recoverableErr'(V0, V1, V117)) end(E94, E95, E96, E97, E98, E99, E100)); _ -> fun (V118) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--recoverable'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E90, E91, E92, E93, E94} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E95, E96, E97, E98, E99} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V12)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V45 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E100, E101} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E102, E103} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E104, E105} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10))), case V45 of {'Idris.Prelude.Types.Left', E106} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V47) -> {'Idris.Prelude.Types.Right', case V47 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E95, E96, E97, E98, E99)); {'Idris.Core.Value.NPrimVal', E108, E109} -> (fun (V48, V49) -> {'Idris.Prelude.Types.Right', 0} end(E108, E109)); {'Idris.Core.Value.NType', E110} -> (fun (V50) -> {'Idris.Prelude.Types.Right', 0} end(E110)); {'Idris.Core.Value.NBind', E111, E112, E113, E114} -> (fun (V51, V52, V53, V54) -> {'Idris.Prelude.Types.Right', 0} end(E111, E112, E113, E114)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E90, E91, E92, E93, E94)); {'Idris.Core.Value.NPrimVal', E115, E116} -> (fun (V55, V56) -> case V4 of {'Idris.Core.Value.NTCon', E207, E208, E209, E210, E211} -> (fun (V57, V58, V59, V60, V61) -> fun (V62) -> {'Idris.Prelude.Types.Right', 0} end end(E207, E208, E209, E210, E211)); _ -> case V4 of {'Idris.Core.Value.NTCon', E202, E203, E204, E205, E206} -> (fun (V63, V64, V65, V66, V67) -> fun (V68) -> {'Idris.Prelude.Types.Right', 1} end end(E202, E203, E204, E205, E206)); _ -> case V3 of {'Idris.Core.Value.NDCon', E146, E147, E148, E149, E150} -> (fun (V69, V70, V71, V72, V73) -> fun (V74) -> case V4 of {'Idris.Core.Value.NDCon', E151, E152, E153, E154, E155} -> (fun (V75, V76, V77, V78, V79) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V71, V77)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V109 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V80) -> fun (V81) -> ('un--mismatch'(V0, V1, V2, V80, V81)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V84) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> case V91 of {'Idris.Builtin.MkPair', E156, E157} -> (fun (V92, V93) -> {'Idris.Builtin.MkPair', (V89(V92)), (V90(V93))} end(E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> case V98 of {'Idris.Builtin.MkPair', E158, E159} -> (fun (V99, V100) -> {'Idris.Builtin.MkPair', (V97(V99)), V100} end(E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> case V105 of {'Idris.Builtin.MkPair', E160, E161} -> (fun (V106, V107) -> {'Idris.Builtin.MkPair', V106, (V104(V107))} end(E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V108) -> ('Idris.Idris2.Builtin':'un--snd'(V108)) end, V84)) end, V82, V83)) end end, V73, V79)), V74))), case V109 of {'Idris.Prelude.Types.Left', E162} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V111) -> {'Idris.Prelude.Types.Right', case V111 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E151, E152, E153, E154, E155)); {'Idris.Core.Value.NPrimVal', E164, E165} -> (fun (V112, V113) -> {'Idris.Prelude.Types.Right', 0} end(E164, E165)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E146, E147, E148, E149, E150)); {'Idris.Core.Value.NPrimVal', E166, E167} -> (fun (V114, V115) -> case V4 of {'Idris.Core.Value.NDCon', E197, E198, E199, E200, E201} -> (fun (V116, V117, V118, V119, V120) -> fun (V121) -> {'Idris.Prelude.Types.Right', 0} end end(E197, E198, E199, E200, E201)); _ -> case V4 of {'Idris.Core.Value.NDCon', E192, E193, E194, E195, E196} -> (fun (V122, V123, V124, V125, V126) -> fun (V127) -> {'Idris.Prelude.Types.Right', 1} end end(E192, E193, E194, E195, E196)); _ -> case V3 of {'Idris.Core.Value.NApp', E168, E169, E170} -> (fun (V128, V129, V130) -> case V129 of {'Idris.Core.Value.NRef', E171, E172} -> (fun (V131, V132) -> fun (V133) -> case V4 of {'Idris.Core.Value.NApp', E173, E174, E175} -> (fun (V134, V135, V136) -> case V135 of {'Idris.Core.Value.NRef', E176, E177} -> (fun (V137, V138) -> {'Idris.Prelude.Types.Right', 1} end(E176, E177)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E173, E174, E175)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E171, E172)); _ -> fun (V139) -> {'Idris.Prelude.Types.Right', 0} end end end(E168, E169, E170)); {'Idris.Core.Value.NPrimVal', E178, E179} -> (fun (V140, V141) -> fun (V142) -> case V4 of {'Idris.Core.Value.NPrimVal', E180, E181} -> (fun (V143, V144) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V141, V144))} end(E180, E181)); {'Idris.Core.Value.NBind', E182, E183, E184, E185} -> (fun (V145, V146, V147, V148) -> {'Idris.Prelude.Types.Right', 0} end(E182, E183, E184, E185)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E178, E179)); {'Idris.Core.Value.NBind', E186, E187, E188, E189} -> (fun (V149, V150, V151, V152) -> fun (V153) -> case V4 of {'Idris.Core.Value.NPrimVal', E190, E191} -> (fun (V154, V155) -> {'Idris.Prelude.Types.Right', 0} end(E190, E191)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E186, E187, E188, E189)); _ -> fun (V156) -> {'Idris.Prelude.Types.Right', 0} end end end end end(E166, E167)); _ -> case V4 of {'Idris.Core.Value.NDCon', E141, E142, E143, E144, E145} -> (fun (V157, V158, V159, V160, V161) -> fun (V162) -> {'Idris.Prelude.Types.Right', 1} end end(E141, E142, E143, E144, E145)); _ -> case V3 of {'Idris.Core.Value.NApp', E117, E118, E119} -> (fun (V163, V164, V165) -> case V164 of {'Idris.Core.Value.NRef', E120, E121} -> (fun (V166, V167) -> fun (V168) -> case V4 of {'Idris.Core.Value.NApp', E122, E123, E124} -> (fun (V169, V170, V171) -> case V170 of {'Idris.Core.Value.NRef', E125, E126} -> (fun (V172, V173) -> {'Idris.Prelude.Types.Right', 1} end(E125, E126)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E122, E123, E124)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E120, E121)); _ -> fun (V174) -> {'Idris.Prelude.Types.Right', 0} end end end(E117, E118, E119)); {'Idris.Core.Value.NPrimVal', E127, E128} -> (fun (V175, V176) -> fun (V177) -> case V4 of {'Idris.Core.Value.NPrimVal', E129, E130} -> (fun (V178, V179) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V176, V179))} end(E129, E130)); {'Idris.Core.Value.NBind', E131, E132, E133, E134} -> (fun (V180, V181, V182, V183) -> {'Idris.Prelude.Types.Right', 0} end(E131, E132, E133, E134)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E127, E128)); {'Idris.Core.Value.NBind', E135, E136, E137, E138} -> (fun (V184, V185, V186, V187) -> fun (V188) -> case V4 of {'Idris.Core.Value.NPrimVal', E139, E140} -> (fun (V189, V190) -> {'Idris.Prelude.Types.Right', 0} end(E139, E140)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E135, E136, E137, E138)); _ -> fun (V191) -> {'Idris.Prelude.Types.Right', 0} end end end end end end end(E115, E116)); {'Idris.Core.Value.NType', E212} -> (fun (V192) -> case V4 of {'Idris.Core.Value.NTCon', E303, E304, E305, E306, E307} -> (fun (V193, V194, V195, V196, V197) -> fun (V198) -> {'Idris.Prelude.Types.Right', 0} end end(E303, E304, E305, E306, E307)); _ -> case V4 of {'Idris.Core.Value.NTCon', E298, E299, E300, E301, E302} -> (fun (V199, V200, V201, V202, V203) -> fun (V204) -> {'Idris.Prelude.Types.Right', 1} end end(E298, E299, E300, E301, E302)); _ -> case V3 of {'Idris.Core.Value.NDCon', E242, E243, E244, E245, E246} -> (fun (V205, V206, V207, V208, V209) -> fun (V210) -> case V4 of {'Idris.Core.Value.NDCon', E247, E248, E249, E250, E251} -> (fun (V211, V212, V213, V214, V215) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V207, V213)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V245 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V216) -> fun (V217) -> ('un--mismatch'(V0, V1, V2, V216, V217)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V220) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> case V227 of {'Idris.Builtin.MkPair', E252, E253} -> (fun (V228, V229) -> {'Idris.Builtin.MkPair', (V225(V228)), (V226(V229))} end(E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> case V234 of {'Idris.Builtin.MkPair', E254, E255} -> (fun (V235, V236) -> {'Idris.Builtin.MkPair', (V233(V235)), V236} end(E254, E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> case V241 of {'Idris.Builtin.MkPair', E256, E257} -> (fun (V242, V243) -> {'Idris.Builtin.MkPair', V242, (V240(V243))} end(E256, E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V244) -> ('Idris.Idris2.Builtin':'un--snd'(V244)) end, V220)) end, V218, V219)) end end, V209, V215)), V210))), case V245 of {'Idris.Prelude.Types.Left', E258} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V247) -> {'Idris.Prelude.Types.Right', case V247 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E247, E248, E249, E250, E251)); {'Idris.Core.Value.NPrimVal', E260, E261} -> (fun (V248, V249) -> {'Idris.Prelude.Types.Right', 0} end(E260, E261)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E242, E243, E244, E245, E246)); {'Idris.Core.Value.NPrimVal', E262, E263} -> (fun (V250, V251) -> case V4 of {'Idris.Core.Value.NDCon', E293, E294, E295, E296, E297} -> (fun (V252, V253, V254, V255, V256) -> fun (V257) -> {'Idris.Prelude.Types.Right', 0} end end(E293, E294, E295, E296, E297)); _ -> case V4 of {'Idris.Core.Value.NDCon', E288, E289, E290, E291, E292} -> (fun (V258, V259, V260, V261, V262) -> fun (V263) -> {'Idris.Prelude.Types.Right', 1} end end(E288, E289, E290, E291, E292)); _ -> case V3 of {'Idris.Core.Value.NApp', E264, E265, E266} -> (fun (V264, V265, V266) -> case V265 of {'Idris.Core.Value.NRef', E267, E268} -> (fun (V267, V268) -> fun (V269) -> case V4 of {'Idris.Core.Value.NApp', E269, E270, E271} -> (fun (V270, V271, V272) -> case V271 of {'Idris.Core.Value.NRef', E272, E273} -> (fun (V273, V274) -> {'Idris.Prelude.Types.Right', 1} end(E272, E273)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E269, E270, E271)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E267, E268)); _ -> fun (V275) -> {'Idris.Prelude.Types.Right', 0} end end end(E264, E265, E266)); {'Idris.Core.Value.NPrimVal', E274, E275} -> (fun (V276, V277) -> fun (V278) -> case V4 of {'Idris.Core.Value.NPrimVal', E276, E277} -> (fun (V279, V280) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V277, V280))} end(E276, E277)); {'Idris.Core.Value.NBind', E278, E279, E280, E281} -> (fun (V281, V282, V283, V284) -> {'Idris.Prelude.Types.Right', 0} end(E278, E279, E280, E281)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E274, E275)); {'Idris.Core.Value.NBind', E282, E283, E284, E285} -> (fun (V285, V286, V287, V288) -> fun (V289) -> case V4 of {'Idris.Core.Value.NPrimVal', E286, E287} -> (fun (V290, V291) -> {'Idris.Prelude.Types.Right', 0} end(E286, E287)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E282, E283, E284, E285)); _ -> fun (V292) -> {'Idris.Prelude.Types.Right', 0} end end end end end(E262, E263)); _ -> case V4 of {'Idris.Core.Value.NDCon', E237, E238, E239, E240, E241} -> (fun (V293, V294, V295, V296, V297) -> fun (V298) -> {'Idris.Prelude.Types.Right', 1} end end(E237, E238, E239, E240, E241)); _ -> case V3 of {'Idris.Core.Value.NApp', E213, E214, E215} -> (fun (V299, V300, V301) -> case V300 of {'Idris.Core.Value.NRef', E216, E217} -> (fun (V302, V303) -> fun (V304) -> case V4 of {'Idris.Core.Value.NApp', E218, E219, E220} -> (fun (V305, V306, V307) -> case V306 of {'Idris.Core.Value.NRef', E221, E222} -> (fun (V308, V309) -> {'Idris.Prelude.Types.Right', 1} end(E221, E222)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E218, E219, E220)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E216, E217)); _ -> fun (V310) -> {'Idris.Prelude.Types.Right', 0} end end end(E213, E214, E215)); {'Idris.Core.Value.NPrimVal', E223, E224} -> (fun (V311, V312) -> fun (V313) -> case V4 of {'Idris.Core.Value.NPrimVal', E225, E226} -> (fun (V314, V315) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V312, V315))} end(E225, E226)); {'Idris.Core.Value.NBind', E227, E228, E229, E230} -> (fun (V316, V317, V318, V319) -> {'Idris.Prelude.Types.Right', 0} end(E227, E228, E229, E230)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E223, E224)); {'Idris.Core.Value.NBind', E231, E232, E233, E234} -> (fun (V320, V321, V322, V323) -> fun (V324) -> case V4 of {'Idris.Core.Value.NPrimVal', E235, E236} -> (fun (V325, V326) -> {'Idris.Prelude.Types.Right', 0} end(E235, E236)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E231, E232, E233, E234)); _ -> fun (V327) -> {'Idris.Prelude.Types.Right', 0} end end end end end end end(E212)); {'Idris.Core.Value.NBind', E308, E309, E310, E311} -> (fun (V328, V329, V330, V331) -> case V4 of {'Idris.Core.Value.NTCon', E402, E403, E404, E405, E406} -> (fun (V332, V333, V334, V335, V336) -> fun (V337) -> {'Idris.Prelude.Types.Right', 0} end end(E402, E403, E404, E405, E406)); _ -> case V4 of {'Idris.Core.Value.NTCon', E397, E398, E399, E400, E401} -> (fun (V338, V339, V340, V341, V342) -> fun (V343) -> {'Idris.Prelude.Types.Right', 1} end end(E397, E398, E399, E400, E401)); _ -> case V3 of {'Idris.Core.Value.NDCon', E341, E342, E343, E344, E345} -> (fun (V344, V345, V346, V347, V348) -> fun (V349) -> case V4 of {'Idris.Core.Value.NDCon', E346, E347, E348, E349, E350} -> (fun (V350, V351, V352, V353, V354) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V346, V352)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V384 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V355) -> fun (V356) -> ('un--mismatch'(V0, V1, V2, V355, V356)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V357) -> fun (V358) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V359) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V360) -> fun (V361) -> fun (V362) -> fun (V363) -> fun (V364) -> fun (V365) -> fun (V366) -> case V366 of {'Idris.Builtin.MkPair', E351, E352} -> (fun (V367, V368) -> {'Idris.Builtin.MkPair', (V364(V367)), (V365(V368))} end(E351, E352)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V369) -> fun (V370) -> fun (V371) -> fun (V372) -> fun (V373) -> case V373 of {'Idris.Builtin.MkPair', E353, E354} -> (fun (V374, V375) -> {'Idris.Builtin.MkPair', (V372(V374)), V375} end(E353, E354)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V376) -> fun (V377) -> fun (V378) -> fun (V379) -> fun (V380) -> case V380 of {'Idris.Builtin.MkPair', E355, E356} -> (fun (V381, V382) -> {'Idris.Builtin.MkPair', V381, (V379(V382))} end(E355, E356)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V383) -> ('Idris.Idris2.Builtin':'un--snd'(V383)) end, V359)) end, V357, V358)) end end, V348, V354)), V349))), case V384 of {'Idris.Prelude.Types.Left', E357} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E357)); {'Idris.Prelude.Types.Right', E358} -> (fun (V386) -> {'Idris.Prelude.Types.Right', case V386 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E358)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E346, E347, E348, E349, E350)); {'Idris.Core.Value.NPrimVal', E359, E360} -> (fun (V387, V388) -> {'Idris.Prelude.Types.Right', 0} end(E359, E360)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E341, E342, E343, E344, E345)); {'Idris.Core.Value.NPrimVal', E361, E362} -> (fun (V389, V390) -> case V4 of {'Idris.Core.Value.NDCon', E392, E393, E394, E395, E396} -> (fun (V391, V392, V393, V394, V395) -> fun (V396) -> {'Idris.Prelude.Types.Right', 0} end end(E392, E393, E394, E395, E396)); _ -> case V4 of {'Idris.Core.Value.NDCon', E387, E388, E389, E390, E391} -> (fun (V397, V398, V399, V400, V401) -> fun (V402) -> {'Idris.Prelude.Types.Right', 1} end end(E387, E388, E389, E390, E391)); _ -> case V3 of {'Idris.Core.Value.NApp', E363, E364, E365} -> (fun (V403, V404, V405) -> case V404 of {'Idris.Core.Value.NRef', E366, E367} -> (fun (V406, V407) -> fun (V408) -> case V4 of {'Idris.Core.Value.NApp', E368, E369, E370} -> (fun (V409, V410, V411) -> case V410 of {'Idris.Core.Value.NRef', E371, E372} -> (fun (V412, V413) -> {'Idris.Prelude.Types.Right', 1} end(E371, E372)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E368, E369, E370)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E366, E367)); _ -> fun (V414) -> {'Idris.Prelude.Types.Right', 0} end end end(E363, E364, E365)); {'Idris.Core.Value.NPrimVal', E373, E374} -> (fun (V415, V416) -> fun (V417) -> case V4 of {'Idris.Core.Value.NPrimVal', E375, E376} -> (fun (V418, V419) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V416, V419))} end(E375, E376)); {'Idris.Core.Value.NBind', E377, E378, E379, E380} -> (fun (V420, V421, V422, V423) -> {'Idris.Prelude.Types.Right', 0} end(E377, E378, E379, E380)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E373, E374)); {'Idris.Core.Value.NBind', E381, E382, E383, E384} -> (fun (V424, V425, V426, V427) -> fun (V428) -> case V4 of {'Idris.Core.Value.NPrimVal', E385, E386} -> (fun (V429, V430) -> {'Idris.Prelude.Types.Right', 0} end(E385, E386)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E381, E382, E383, E384)); _ -> fun (V431) -> {'Idris.Prelude.Types.Right', 0} end end end end end(E361, E362)); _ -> case V4 of {'Idris.Core.Value.NDCon', E336, E337, E338, E339, E340} -> (fun (V432, V433, V434, V435, V436) -> fun (V437) -> {'Idris.Prelude.Types.Right', 1} end end(E336, E337, E338, E339, E340)); _ -> case V3 of {'Idris.Core.Value.NApp', E312, E313, E314} -> (fun (V438, V439, V440) -> case V439 of {'Idris.Core.Value.NRef', E315, E316} -> (fun (V441, V442) -> fun (V443) -> case V4 of {'Idris.Core.Value.NApp', E317, E318, E319} -> (fun (V444, V445, V446) -> case V445 of {'Idris.Core.Value.NRef', E320, E321} -> (fun (V447, V448) -> {'Idris.Prelude.Types.Right', 1} end(E320, E321)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E317, E318, E319)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E315, E316)); _ -> fun (V449) -> {'Idris.Prelude.Types.Right', 0} end end end(E312, E313, E314)); {'Idris.Core.Value.NPrimVal', E322, E323} -> (fun (V450, V451) -> fun (V452) -> case V4 of {'Idris.Core.Value.NPrimVal', E324, E325} -> (fun (V453, V454) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V451, V454))} end(E324, E325)); {'Idris.Core.Value.NBind', E326, E327, E328, E329} -> (fun (V455, V456, V457, V458) -> {'Idris.Prelude.Types.Right', 0} end(E326, E327, E328, E329)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E322, E323)); {'Idris.Core.Value.NBind', E330, E331, E332, E333} -> (fun (V459, V460, V461, V462) -> fun (V463) -> case V4 of {'Idris.Core.Value.NPrimVal', E334, E335} -> (fun (V464, V465) -> {'Idris.Prelude.Types.Right', 0} end(E334, E335)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E330, E331, E332, E333)); _ -> fun (V466) -> {'Idris.Prelude.Types.Right', 0} end end end end end end end(E308, E309, E310, E311)); _ -> case V4 of {'Idris.Core.Value.NTCon', E85, E86, E87, E88, E89} -> (fun (V467, V468, V469, V470, V471) -> fun (V472) -> {'Idris.Prelude.Types.Right', 1} end end(E85, E86, E87, E88, E89)); _ -> case V3 of {'Idris.Core.Value.NDCon', E29, E30, E31, E32, E33} -> (fun (V473, V474, V475, V476, V477) -> fun (V478) -> case V4 of {'Idris.Core.Value.NDCon', E34, E35, E36, E37, E38} -> (fun (V479, V480, V481, V482, V483) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V475, V481)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V513 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V484) -> fun (V485) -> ('un--mismatch'(V0, V1, V2, V484, V485)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V486) -> fun (V487) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V488) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V489) -> fun (V490) -> fun (V491) -> fun (V492) -> fun (V493) -> fun (V494) -> fun (V495) -> case V495 of {'Idris.Builtin.MkPair', E39, E40} -> (fun (V496, V497) -> {'Idris.Builtin.MkPair', (V493(V496)), (V494(V497))} end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V498) -> fun (V499) -> fun (V500) -> fun (V501) -> fun (V502) -> case V502 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V503, V504) -> {'Idris.Builtin.MkPair', (V501(V503)), V504} end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V505) -> fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> case V509 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V510, V511) -> {'Idris.Builtin.MkPair', V510, (V508(V511))} end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V512) -> ('Idris.Idris2.Builtin':'un--snd'(V512)) end, V488)) end, V486, V487)) end end, V477, V483)), V478))), case V513 of {'Idris.Prelude.Types.Left', E45} -> (fun (V514) -> {'Idris.Prelude.Types.Left', V514} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V515) -> {'Idris.Prelude.Types.Right', case V515 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36, E37, E38)); {'Idris.Core.Value.NPrimVal', E47, E48} -> (fun (V516, V517) -> {'Idris.Prelude.Types.Right', 0} end(E47, E48)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E29, E30, E31, E32, E33)); {'Idris.Core.Value.NPrimVal', E49, E50} -> (fun (V518, V519) -> case V4 of {'Idris.Core.Value.NDCon', E80, E81, E82, E83, E84} -> (fun (V520, V521, V522, V523, V524) -> fun (V525) -> {'Idris.Prelude.Types.Right', 0} end end(E80, E81, E82, E83, E84)); _ -> case V4 of {'Idris.Core.Value.NDCon', E75, E76, E77, E78, E79} -> (fun (V526, V527, V528, V529, V530) -> fun (V531) -> {'Idris.Prelude.Types.Right', 1} end end(E75, E76, E77, E78, E79)); _ -> case V3 of {'Idris.Core.Value.NApp', E51, E52, E53} -> (fun (V532, V533, V534) -> case V533 of {'Idris.Core.Value.NRef', E54, E55} -> (fun (V535, V536) -> fun (V537) -> case V4 of {'Idris.Core.Value.NApp', E56, E57, E58} -> (fun (V538, V539, V540) -> case V539 of {'Idris.Core.Value.NRef', E59, E60} -> (fun (V541, V542) -> {'Idris.Prelude.Types.Right', 1} end(E59, E60)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E56, E57, E58)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E54, E55)); _ -> fun (V543) -> {'Idris.Prelude.Types.Right', 0} end end end(E51, E52, E53)); {'Idris.Core.Value.NPrimVal', E61, E62} -> (fun (V544, V545) -> fun (V546) -> case V4 of {'Idris.Core.Value.NPrimVal', E63, E64} -> (fun (V547, V548) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V545, V548))} end(E63, E64)); {'Idris.Core.Value.NBind', E65, E66, E67, E68} -> (fun (V549, V550, V551, V552) -> {'Idris.Prelude.Types.Right', 0} end(E65, E66, E67, E68)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E61, E62)); {'Idris.Core.Value.NBind', E69, E70, E71, E72} -> (fun (V553, V554, V555, V556) -> fun (V557) -> case V4 of {'Idris.Core.Value.NPrimVal', E73, E74} -> (fun (V558, V559) -> {'Idris.Prelude.Types.Right', 0} end(E73, E74)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E69, E70, E71, E72)); _ -> fun (V560) -> {'Idris.Prelude.Types.Right', 0} end end end end end(E49, E50)); _ -> case V4 of {'Idris.Core.Value.NDCon', E24, E25, E26, E27, E28} -> (fun (V561, V562, V563, V564, V565) -> fun (V566) -> {'Idris.Prelude.Types.Right', 1} end end(E24, E25, E26, E27, E28)); _ -> case V3 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V567, V568, V569) -> case V568 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V570, V571) -> fun (V572) -> case V4 of {'Idris.Core.Value.NApp', E5, E6, E7} -> (fun (V573, V574, V575) -> case V574 of {'Idris.Core.Value.NRef', E8, E9} -> (fun (V576, V577) -> {'Idris.Prelude.Types.Right', 1} end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E3, E4)); _ -> fun (V578) -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2)); {'Idris.Core.Value.NPrimVal', E10, E11} -> (fun (V579, V580) -> fun (V581) -> case V4 of {'Idris.Core.Value.NPrimVal', E12, E13} -> (fun (V582, V583) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V580, V583))} end(E12, E13)); {'Idris.Core.Value.NBind', E14, E15, E16, E17} -> (fun (V584, V585, V586, V587) -> {'Idris.Prelude.Types.Right', 0} end(E14, E15, E16, E17)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E10, E11)); {'Idris.Core.Value.NBind', E18, E19, E20, E21} -> (fun (V588, V589, V590, V591) -> fun (V592) -> case V4 of {'Idris.Core.Value.NPrimVal', E22, E23} -> (fun (V593, V594) -> {'Idris.Prelude.Types.Right', 0} end(E22, E23)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E18, E19, E20, E21)); _ -> fun (V595) -> {'Idris.Prelude.Types.Right', 0} end end end end end end.
'un--processDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V48 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V13, case V17 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V18 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V48 of {'Idris.Prelude.Types.Left', E34} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Just', E36} -> (fun (V51) -> case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> case V69 of {'Idris.Core.Context.Context.None'} -> (fun () -> begin (V92 = case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V74 end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V113 = ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112) -> V102 end(E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 2))), begin (V150 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V114) -> fun (V115) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V114, V115)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V116) -> fun (V117) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V116, V117)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V118) -> fun (V119) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V120, V121)) end end}}, case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141) -> V129 end(E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V142) -> fun (V143) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V142, V143)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V144) -> fun (V145) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V144, V145)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V146) -> fun (V147) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V146, V147)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V148) -> fun (V149) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V148, V149)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V151 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V13, V10))), case V151 of {'Idris.Prelude.Types.Left', E117} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V153) -> begin (V154 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Traversing clauses of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with mult "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V150)))))))) end, V10))), case V154 of {'Idris.Prelude.Types.Left', E119} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V156) -> begin (V157 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V10))), case V157 of {'Idris.Prelude.Types.Left', E121} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V159) -> begin (V180 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V159 end, ('Idris.Idris2.Core.Context.Context':'un--findSetTotal'(case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179) -> V171 end(E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V204 = ('nested--22436-12224--in--un--withTotality'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V180, fun () -> fun (V181) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V182) -> fun (V183) -> ('un--checkClause'(V0, V1, V2, V3, V150, case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162} -> (fun (V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203) -> V193 end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V180, V113, V153, V4, V5, V6, V182, V183)) end end, V9, [], V181)) end end, V10))), case V204 of {'Idris.Prelude.Types.Left', E163} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V206) -> begin (V208 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V207) -> ('un--toPats'(V207)) end, ('Idris.Idris2.Data.Either':'un--rights'(V206))))), begin (V209 = ('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V1, V7, {'Idris.Core.CaseBuilder.CompileTime', V150}, V13, V92, ('Idris.Idris2.Data.Either':'un--rights'(V206)), V10))), case V209 of {'Idris.Prelude.Types.Left', E165} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V211) -> case V211 of {'Idris.Builtin.DPair.MkDPair', E167, E168} -> (fun (V212, V213) -> case V213 of {'Idris.Builtin.MkPair', E169, E170} -> (fun (V214, V215) -> begin (V218 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V216) -> fun (V217) -> ('un--warnUnreachable'(V1, V216, V217)) end end, V215, V10))), case V218 of {'Idris.Prelude.Types.Left', E171} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V220) -> begin (V231 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"declare.def"/utf8>>, (1 + (1 + 0)), fun (V221) -> begin (V228 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V222, V223, V224)) end end end, fun (V225) -> fun (V226) -> fun (V227) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V225, V226, V227)) end end end}, V214, V221))), case V228 of {'Idris.Prelude.Types.Left', E173} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V230) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Case tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V212, V230))))))))} end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V10))), case V231 of {'Idris.Prelude.Types.Left', E175} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V233) -> begin (V235 = begin (V234 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V234} end), case V235 of {'Idris.Prelude.Types.Left', E177} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V237) -> begin (V272 = case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V13, case V237 of {'Idris.Core.Context.MkDefs', E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212} -> (fun (V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267) -> V263 end(E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context.Context':'un--defaultPI'()) end()); {'Idris.Prelude.Types.Just', E179} -> (fun (V268) -> case ('Idris.Idris2.Core.Context.Context':'un--defaultPI'()) of {'Idris.Core.Context.Context.MkPMDefInfo', E180, E181, E182} -> (fun (V269, V270, V271) -> {'Idris.Core.Context.Context.MkPMDefInfo', V269, V270, V268} end(E180, E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V297 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V273) -> case V273 of {'Idris.Prelude.Types.Left', E213} -> (fun (V274) -> {'Idris.Prelude.Types.Left', V274} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V275) -> {'Idris.Prelude.Types.Right', 0} end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V276) -> ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Idris.Core.Name.Resolved', V153}, case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234} -> (fun (V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296) -> {'Idris.Core.Context.Context.MkGlobalDef', V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, {'Idris.Core.Context.Context.PMDef', V272, V212, V214, V214, V208}, V295, V296} end(E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V276)) end, V10))), case V297 of {'Idris.Prelude.Types.Left', E235} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E235)); {'Idris.Prelude.Types.Right', E236} -> (fun (V299) -> begin (V330 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258} -> (fun (V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319) -> V309 end(E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 2)) of 1 -> ((begin (V320 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'(V214))), fun () -> fun (V321) -> begin (V325 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V322) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V322)) end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V323, V324)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V320)))))))))) end, V321))), case V325 of {'Idris.Prelude.Types.Left', E237} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E237)); {'Idris.Prelude.Types.Right', E238} -> (fun (V327) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V328, V329)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V320)), V321)) end(E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end())(V10)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V330 of {'Idris.Prelude.Types.Left', E259} -> (fun (V331) -> {'Idris.Prelude.Types.Left', V331} end(E259)); {'Idris.Prelude.Types.Right', E260} -> (fun (V332) -> begin (V377 = case case ('Idris.Idris2.Core.Name':'un--isUserName'(V13)) of 1 -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300} -> (fun (V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352) -> V342 end(E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ((begin (V373 = ('Idris.Idris2.Core.TT':'un--getMetas'(case V51 of {'Idris.Core.Context.Context.MkGlobalDef', E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280} -> (fun (V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372) -> V355 end(E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun () -> fun (V374) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V375) -> fun (V376) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V375, V376)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V373)), V374)) end end end())(V10)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V377 of {'Idris.Prelude.Types.Left', E301} -> (fun (V378) -> {'Idris.Prelude.Types.Left', V378} end(E301)); {'Idris.Prelude.Types.Right', E302} -> (fun (V379) -> begin (V380 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V13, V10))), case V380 of {'Idris.Prelude.Types.Left', E303} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E303)); {'Idris.Prelude.Types.Right', E304} -> (fun (V382) -> begin (V384 = begin (V383 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V383} end), case V384 of {'Idris.Prelude.Types.Left', E305} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E305)); {'Idris.Prelude.Types.Right', E306} -> (fun (V386) -> begin (V418 = begin (V417 = ('erlang':'put'(V1, case V386 of {'Idris.Core.Context.MkDefs', E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336} -> (fun (V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416) -> {'Idris.Core.Context.MkDefs', V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, [V13 | V408], V409, V410, V411, V412, V413, V414, V415, V416} end(E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V417} end), case V418 of {'Idris.Prelude.Types.Left', E337} -> (fun (V419) -> {'Idris.Prelude.Types.Left', V419} end(E337)); {'Idris.Prelude.Types.Right', E338} -> (fun (V420) -> begin (V427 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V421) -> fun (V422) -> fun (V423) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V421, V422, V423)) end end end, fun (V424) -> fun (V425) -> fun (V426) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V424, V425, V426)) end end end}, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"assert_total"/utf8>>}}}, V10))), case V427 of {'Idris.Prelude.Types.Left', E339} -> (fun (V428) -> {'Idris.Prelude.Types.Left', V428} end(E339)); {'Idris.Prelude.Types.Right', E340} -> (fun (V429) -> begin (V443 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V430) -> fun (V431) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V430, V431)) end end, fun (V432) -> fun (V433) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V432, V433)) end end}, 1, V4)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V434 = ('un--calcRefs'(V1, 0, V429, {'Idris.Core.Name.Resolved', V153}, V10))), case V434 of {'Idris.Prelude.Types.Left', E341} -> (fun (V435) -> {'Idris.Prelude.Types.Left', V435} end(E341)); {'Idris.Prelude.Types.Right', E342} -> (fun (V436) -> begin (V437 = ('Idris.Idris2.Core.Termination':'un--calculateSizeChange'(V1, V7, V13, V10))), case V437 of {'Idris.Prelude.Types.Left', E343} -> (fun (V438) -> {'Idris.Prelude.Types.Left', V438} end(E343)); {'Idris.Prelude.Types.Right', E344} -> (fun (V439) -> begin (V440 = ('Idris.Idris2.Core.Context':'un--setSizeChange'(V1, V7, V13, V439, V10))), case V440 of {'Idris.Prelude.Types.Left', E345} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E345)); {'Idris.Prelude.Types.Right', E346} -> (fun (V442) -> ('Idris.Idris2.Core.Termination':'un--checkIfGuarded'(V1, V7, V13, V10)) end(E346)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E344)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E342)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V443 of {'Idris.Prelude.Types.Left', E347} -> (fun (V444) -> {'Idris.Prelude.Types.Left', V444} end(E347)); {'Idris.Prelude.Types.Right', E348} -> (fun (V445) -> begin (V447 = begin (V446 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V446} end), case V447 of {'Idris.Prelude.Types.Left', E349} -> (fun (V448) -> {'Idris.Prelude.Types.Left', V448} end(E349)); {'Idris.Prelude.Types.Right', E350} -> (fun (V449) -> begin (V451 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"+++ Checking Coverage "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)))) end, fun (V450) -> ('nested--22436-12229--in--un--checkCoverage'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V153, V92, V150, V206, V450)) end, V10))), case V451 of {'Idris.Prelude.Types.Left', E351} -> (fun (V452) -> {'Idris.Prelude.Types.Left', V452} end(E351)); {'Idris.Prelude.Types.Right', E352} -> (fun (V453) -> begin (V454 = ('Idris.Idris2.Core.Context':'un--setCovering'(V1, V7, V13, V453, V10))), case V454 of {'Idris.Prelude.Types.Left', E353} -> (fun (V455) -> {'Idris.Prelude.Types.Left', V455} end(E353)); {'Idris.Prelude.Types.Right', E354} -> (fun (V456) -> begin (V458 = begin (V457 = ('erlang':'put'(V2, V449))), {'Idris.Prelude.Types.Right', V457} end), case V458 of {'Idris.Prelude.Types.Left', E355} -> (fun (V459) -> {'Idris.Prelude.Types.Left', V459} end(E355)); {'Idris.Prelude.Types.Right', E356} -> (fun (V460) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V461) -> fun (V462) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V461, V462)) end end, fun (V463) -> fun (V464) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V463, V464)) end end}, 1, V4)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('un--compileRunTime'(V1, V2, V3, V7, V429, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E356)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E354)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E352)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E350)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E340)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E338)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E306)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E260)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169, E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end()); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V13}, V10)) end end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--noDeclaration'(V1, V7, V13, V10)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nameListEq'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Idris.Prelude.Types.Just', 0}; _ -> {'Idris.Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('with--nameListEq-10749'(V2, V4, ('Idris.Idris2.Core.Name':'un--nameEq'(V2, V4)), V3, V5)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mkRunTime'(V0, V1, V2, V3, V4, V5) -> begin (V15 = begin (V12 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V6, V7, V8)) end end end, fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V9, V10, V11)) end end end}, V4, V5))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making run time definition for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V52 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V21 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V22 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V52 of {'Idris.Prelude.Types.Left', E36} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V54) -> case V54 of {'Idris.Prelude.Types.Just', E38} -> (fun (V55) -> begin (V78 = case V55 of {'Idris.Core.Context.Context.MkGlobalDef', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> case V66 of {'Idris.Core.TT.MkTotality', E59, E60} -> (fun (V76, V77) -> V77 end(E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V79, V80)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V81, V82)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V83) -> fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V85, V86)) end end}}, case V55 of {'Idris.Core.Context.Context.MkGlobalDef', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V94 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ((begin (V107 = {'Idris.Prelude.Types.Just', V55}), ('case--case block in mkRunTime-11590'(V4, V3, V2, V1, V0, V21, V55, V107, V78, case V55 of {'Idris.Core.Context.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V125 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end())(V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mismatchNF'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V12)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NPrimVal', E16, E17} -> (fun (V45, V46) -> {'Idris.Prelude.Types.Right', 1} end(E16, E17)); {'Idris.Core.Value.NBind', E18, E19, E20, E21} -> (fun (V47, V48, V49, V50) -> {'Idris.Prelude.Types.Right', 1} end(E18, E19, E20, E21)); {'Idris.Core.Value.NType', E22} -> (fun (V51) -> {'Idris.Prelude.Types.Right', 1} end(E22)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E23, E24, E25, E26, E27} -> (fun (V52, V53, V54, V55, V56) -> fun (V57) -> case V4 of {'Idris.Core.Value.NDCon', E28, E29, E30, E31, E32} -> (fun (V58, V59, V60, V61, V62) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V54, V60)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V63) -> fun (V64) -> ('un--mismatch'(V0, V1, V2, V63, V64)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V67) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case V74 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V75, V76) -> {'Idris.Builtin.MkPair', (V72(V75)), (V73(V76))} end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V81 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V82, V83) -> {'Idris.Builtin.MkPair', (V80(V82)), V83} end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> case V88 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V89, V90) -> {'Idris.Builtin.MkPair', V89, (V87(V90))} end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V91) -> ('Idris.Idris2.Builtin':'un--snd'(V91)) end, V67)) end, V65, V66)) end end, V56, V62)), V57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32)); {'Idris.Core.Value.NPrimVal', E39, E40} -> (fun (V92, V93) -> {'Idris.Prelude.Types.Right', 1} end(E39, E40)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E23, E24, E25, E26, E27)); {'Idris.Core.Value.NPrimVal', E41, E42} -> (fun (V94, V95) -> fun (V96) -> case V4 of {'Idris.Core.Value.NPrimVal', E43, E44} -> (fun (V97, V98) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V95, V98))} end(E43, E44)); {'Idris.Core.Value.NDCon', E45, E46, E47, E48, E49} -> (fun (V99, V100, V101, V102, V103) -> {'Idris.Prelude.Types.Right', 1} end(E45, E46, E47, E48, E49)); {'Idris.Core.Value.NBind', E50, E51, E52, E53} -> (fun (V104, V105, V106, V107) -> {'Idris.Prelude.Types.Right', 1} end(E50, E51, E52, E53)); {'Idris.Core.Value.NTCon', E54, E55, E56, E57, E58} -> (fun (V108, V109, V110, V111, V112) -> {'Idris.Prelude.Types.Right', 1} end(E54, E55, E56, E57, E58)); {'Idris.Core.Value.NType', E59} -> (fun (V113) -> {'Idris.Prelude.Types.Right', 1} end(E59)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E41, E42)); {'Idris.Core.Value.NDelayed', E60, E61, E62} -> (fun (V114, V115, V116) -> case V4 of {'Idris.Core.Value.NDelayed', E63, E64, E65} -> (fun (V117, V118, V119) -> ('un--mismatchNF'(V0, V1, V2, V116, V119)) end(E63, E64, E65)); _ -> fun (V120) -> {'Idris.Prelude.Types.Right', 0} end end end(E60, E61, E62)); {'Idris.Core.Value.NDelay', E66, E67, E68, E69} -> (fun (V121, V122, V123, V124) -> fun (V125) -> case V4 of {'Idris.Core.Value.NDelay', E70, E71, E72, E73} -> (fun (V126, V127, V128, V129) -> begin (V130 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V124))(V125))), case V130 of {'Idris.Prelude.Types.Left', E74} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V132) -> begin (V133 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V129))(V125))), case V133 of {'Idris.Prelude.Types.Left', E76} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V135) -> (('un--mismatchNF'(V0, V1, V2, V132, V135))(V125)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71, E72, E73)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E66, E67, E68, E69)); {'Idris.Core.Value.NBind', E78, E79, E80, E81} -> (fun (V136, V137, V138, V139) -> fun (V140) -> case V4 of {'Idris.Core.Value.NPrimVal', E82, E83} -> (fun (V141, V142) -> {'Idris.Prelude.Types.Right', 1} end(E82, E83)); {'Idris.Core.Value.NTCon', E84, E85, E86, E87, E88} -> (fun (V143, V144, V145, V146, V147) -> {'Idris.Prelude.Types.Right', 1} end(E84, E85, E86, E87, E88)); {'Idris.Core.Value.NType', E89} -> (fun (V148) -> {'Idris.Prelude.Types.Right', 1} end(E89)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E78, E79, E80, E81)); {'Idris.Core.Value.NType', E90} -> (fun (V149) -> fun (V150) -> case V4 of {'Idris.Core.Value.NPrimVal', E91, E92} -> (fun (V151, V152) -> {'Idris.Prelude.Types.Right', 1} end(E91, E92)); {'Idris.Core.Value.NTCon', E93, E94, E95, E96, E97} -> (fun (V153, V154, V155, V156, V157) -> {'Idris.Prelude.Types.Right', 1} end(E93, E94, E95, E96, E97)); {'Idris.Core.Value.NBind', E98, E99, E100, E101} -> (fun (V158, V159, V160, V161) -> {'Idris.Prelude.Types.Right', 1} end(E98, E99, E100, E101)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E90)); _ -> fun (V162) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--mismatch'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V5))(V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V6))(V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> (('un--mismatchNF'(V0, V1, V2, V9, V12))(V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--impossibleOK'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V12)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NPrimVal', E16, E17} -> (fun (V45, V46) -> {'Idris.Prelude.Types.Right', 1} end(E16, E17)); {'Idris.Core.Value.NBind', E18, E19, E20, E21} -> (fun (V47, V48, V49, V50) -> {'Idris.Prelude.Types.Right', 1} end(E18, E19, E20, E21)); {'Idris.Core.Value.NType', E22} -> (fun (V51) -> {'Idris.Prelude.Types.Right', 1} end(E22)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E23, E24, E25, E26, E27} -> (fun (V52, V53, V54, V55, V56) -> fun (V57) -> case V4 of {'Idris.Core.Value.NDCon', E28, E29, E30, E31, E32} -> (fun (V58, V59, V60, V61, V62) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V54, V60)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V63) -> fun (V64) -> ('un--mismatch'(V0, V1, V2, V63, V64)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V67) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case V74 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V75, V76) -> {'Idris.Builtin.MkPair', (V72(V75)), (V73(V76))} end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V81 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V82, V83) -> {'Idris.Builtin.MkPair', (V80(V82)), V83} end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> case V88 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V89, V90) -> {'Idris.Builtin.MkPair', V89, (V87(V90))} end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V91) -> ('Idris.Idris2.Builtin':'un--snd'(V91)) end, V67)) end, V65, V66)) end end, V56, V62)), V57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32)); {'Idris.Core.Value.NPrimVal', E39, E40} -> (fun (V92, V93) -> {'Idris.Prelude.Types.Right', 1} end(E39, E40)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E23, E24, E25, E26, E27)); {'Idris.Core.Value.NPrimVal', E41, E42} -> (fun (V94, V95) -> fun (V96) -> case V4 of {'Idris.Core.Value.NPrimVal', E43, E44} -> (fun (V97, V98) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V95, V98))} end(E43, E44)); {'Idris.Core.Value.NDCon', E45, E46, E47, E48, E49} -> (fun (V99, V100, V101, V102, V103) -> {'Idris.Prelude.Types.Right', 1} end(E45, E46, E47, E48, E49)); {'Idris.Core.Value.NBind', E50, E51, E52, E53} -> (fun (V104, V105, V106, V107) -> {'Idris.Prelude.Types.Right', 1} end(E50, E51, E52, E53)); {'Idris.Core.Value.NTCon', E54, E55, E56, E57, E58} -> (fun (V108, V109, V110, V111, V112) -> {'Idris.Prelude.Types.Right', 1} end(E54, E55, E56, E57, E58)); {'Idris.Core.Value.NType', E59} -> (fun (V113) -> {'Idris.Prelude.Types.Right', 1} end(E59)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E41, E42)); {'Idris.Core.Value.NBind', E60, E61, E62, E63} -> (fun (V114, V115, V116, V117) -> fun (V118) -> case V4 of {'Idris.Core.Value.NPrimVal', E64, E65} -> (fun (V119, V120) -> {'Idris.Prelude.Types.Right', 1} end(E64, E65)); {'Idris.Core.Value.NTCon', E66, E67, E68, E69, E70} -> (fun (V121, V122, V123, V124, V125) -> {'Idris.Prelude.Types.Right', 1} end(E66, E67, E68, E69, E70)); {'Idris.Core.Value.NType', E71} -> (fun (V126) -> {'Idris.Prelude.Types.Right', 1} end(E71)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E60, E61, E62, E63)); {'Idris.Core.Value.NType', E72} -> (fun (V127) -> fun (V128) -> case V4 of {'Idris.Core.Value.NPrimVal', E73, E74} -> (fun (V129, V130) -> {'Idris.Prelude.Types.Right', 1} end(E73, E74)); {'Idris.Core.Value.NTCon', E75, E76, E77, E78, E79} -> (fun (V131, V132, V133, V134, V135) -> {'Idris.Prelude.Types.Right', 1} end(E75, E76, E77, E78, E79)); {'Idris.Core.Value.NBind', E80, E81, E82, E83} -> (fun (V136, V137, V138, V139) -> {'Idris.Prelude.Types.Right', 1} end(E80, E81, E82, E83)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E72)); _ -> fun (V140) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--impossibleErrOK'(V0, V1, V2) -> case V2 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> begin (V39 = case V1 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V5, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V39, V6, V7))(V40))), case V41 of {'Idris.Prelude.Types.Left', E36} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V43) -> begin (V44 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V3, V39, V6, V8))(V40))), case V44 of {'Idris.Prelude.Types.Left', E38} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V46) -> (('un--impossibleOK'(V0, V3, V39, V43, V46))(V40)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3, E4, E5)); {'Idris.Core.Core.CantSolveEq', E40, E41, E42, E43, E44, E45} -> (fun (V47, V48, V49, V50, V51, V52) -> begin (V83 = case V1 of {'Idris.Core.Context.MkDefs', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Context.MkDefs', V49, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V84) -> begin (V85 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V47, V83, V50, V51))(V84))), case V85 of {'Idris.Prelude.Types.Left', E76} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V87) -> begin (V88 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V47, V83, V50, V52))(V84))), case V88 of {'Idris.Prelude.Types.Left', E78} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V90) -> (('un--impossibleOK'(V0, V47, V83, V87, V90))(V84)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E40, E41, E42, E43, E44, E45)); {'Idris.Core.Core.BadDotPattern', E80, E81, E82, E83, E84, E85} -> (fun (V91, V92, V93, V94, V95, V96) -> fun (V97) -> case V94 of 3 -> {'Idris.Prelude.Types.Right', 1}; _ -> {'Idris.Prelude.Types.Right', 0} end end end(E80, E81, E82, E83, E84, E85)); {'Idris.Core.Core.CyclicMeta', E86, E87, E88, E89, E90} -> (fun (V98, V99, V100, V101, V102) -> fun (V103) -> {'Idris.Prelude.Types.Right', 1} end end(E86, E87, E88, E89, E90)); {'Idris.Core.Core.AllFailed', E91} -> (fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V106) -> ('un--impossibleErrOK'(V0, V1, V106)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V107) -> ('Idris.Idris2.Builtin':'un--snd'(V107)) end, V104)), V105)) end end(E91)); {'Idris.Core.Core.WhenUnifying', E92, E93, E94, E95, E96, E97, E98} -> (fun (V108, V109, V110, V111, V112, V113, V114) -> ('un--impossibleErrOK'(V0, V1, V114)) end(E92, E93, E94, E95, E96, E97, E98)); _ -> fun (V115) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--hasEmptyPat'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V2, V3, ('Idris.Idris2.Core.TT':'un--binderType'(V8))))(V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Coverage':'un--isEmpty'(V0, V1, V2, V3, V12, V5))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('un--hasEmptyPat'([V7 | V0], V1, V2, {'Idris.Core.Env.::', V8, V3}, V9, V5))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Right', case V15 of 1 -> 1; 0 -> V18; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--findLinear'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> ('un--findLinear'([V7 | V0], V1, V2, (1 + V3), V4, V9)) end(E0, E1, E2, E3)); {'Idris.Core.TT.As', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> ('un--findLinear'(V0, V1, V2, V3, V4, V13)) end(E4, E5, E6, E7)); _ -> ('case--findLinear-5132'(V0, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)))) end.
'un--extendEnv'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> case V5 of {'Idris.Core.TT.Bind', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.PVTy', E12, E13, E14} -> (fun (V18, V19, V20) -> ('with--extendEnv-4609'(V7, V15, ('Idris.Idris2.Core.Name':'un--nameEq'(V7, V15)), 'erased', V0, V14, V18, V19, V20, V6, V13, V12, V11, V10, V9, V17, V3, V2, V1)) end(E12, E13, E14)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E8, E9, E10, E11)); _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E4, E5, E6, E7)); {'Idris.Core.TT.PLet', E15, E16, E17, E18} -> (fun (V23, V24, V25, V26) -> case V5 of {'Idris.Core.TT.Bind', E19, E20, E21, E22} -> (fun (V27, V28, V29, V30) -> case V29 of {'Idris.Core.TT.PLet', E23, E24, E25, E26} -> (fun (V31, V32, V33, V34) -> ('with--extendEnv-4690'(V7, V28, ('Idris.Idris2.Core.Name':'un--nameEq'(V7, V28)), 'erased', V0, V27, V31, V32, V34, V33, V6, V25, V26, V24, V23, V9, V30, V3, V2, V1)) end(E23, E24, E25, E26)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E19, E20, E21, E22)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E15, E16, E17, E18)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E0, E1, E2, E3)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end.
'un--compileRunTime'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V42 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V10) -> fun (V11) -> ('un--mkRunTime'(V0, V1, V2, V3, V10, V11)) end end, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V33 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> begin (V77 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V45) -> fun (V46) -> ('un--calcRefs'(V0, 1, V4, V45, V46)) end end, case V9 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V68 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V77 of {'Idris.Prelude.Types.Left', E64} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V79) -> begin (V81 = begin (V80 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V80} end), case V81 of {'Idris.Prelude.Types.Left', E66} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V83) -> begin (V114 = ('erlang':'put'(V0, case V83 of {'Idris.Core.Context.MkDefs', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> {'Idris.Core.Context.MkDefs', V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, [], V106, V107, V108, V109, V110, V111, V112, V113} end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V114} end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--combineLinear'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> ('case--combineLinear-5590'(V5, V6, V4, V0, ('nested--14405-5435--in--un--lookupAll'(V5, V6, V4, V0, V5, V4)), V7)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS: "/utf8>> end, V12, V13))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V21 = case V4 of 1 -> {'Idris.Prelude.Types.Right', V12}; 0 -> (('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'(V1, V9, V12))(V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS in current NS: "/utf8>> end, V23, V13))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V13))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 1, V13))), case V30 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V23, V13))), case V33 of {'Idris.Prelude.Types.Left', E12} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V36, V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V29, V13))), case V38 of {'Idris.Prelude.Types.Left', E16} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS with implicits bound"/utf8>> end, V37, V13))), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V44 = case V4 of 1 -> {'Idris.Prelude.Types.Right', V37}; 0 -> (('Idris.Idris2.TTImp.TTImp':'un--implicitsAs'(V1, V7, V17, V0, V37))(V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> begin (V51 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V7}, V47))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking LHS of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V50))))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V13))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> begin (V57 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V55, V56)) end end}, V46)) end, V13))), case V57 of {'Idris.Prelude.Types.Left', E26} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V10, V13))), case V60 of {'Idris.Prelude.Types.Left', E28} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V62) -> begin (V63 = case V4 of 1 -> {'Idris.TTImp.Elab.Check.InTransform'}; 0 -> {'Idris.TTImp.Elab.Check.InLHS', V5}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V68 = begin (V64 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V7}, V13))), case V64 of {'Idris.Prelude.Types.Left', E30} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V66) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V8, fun (V67) -> {'Idris.Core.Core.InLHS', V11, V66, V67} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V7, V63, V8, V9, V10, {'Idris.TTImp.TTImp.IBindHere', V11, {'Idris.TTImp.TTImp.PATTERN'}, V46}, {'Idris.Prelude.Types.Nothing'}))))(V13)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V68 of {'Idris.Prelude.Types.Left', E32} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V70) -> case V70 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V71, V72) -> begin (V73 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Checked LHS term"/utf8>> end, V71, V13))), case V73 of {'Idris.Prelude.Types.Left', E36} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V75) -> begin (V76 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V72))(V13))), case V76 of {'Idris.Prelude.Types.Left', E38} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V78) -> begin (V80 = begin (V79 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E40} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Core.Env':'un--letToLam'(V10))), begin (V84 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V82, V83, V71, V13))), case V84 of {'Idris.Prelude.Types.Left', E42} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V82, V10, V78, V13))), case V87 of {'Idris.Prelude.Types.Left', E44} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V89) -> begin (V94 = (('un--findLinear'(V0, V1, 1, 0, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V90) -> fun (V91) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V90, V91)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V92) -> fun (V93) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V92, V93)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V86))(V13))), case V94 of {'Idris.Prelude.Types.Left', E46} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V96) -> begin (V97 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Checked LHS term after normalise"/utf8>> end, V86, V13))), case V97 of {'Idris.Prelude.Types.Left', E48} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V99) -> begin (V115 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity of names in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V102, V103)) end end}, {'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V105, V106)) end end}}, V100)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V110, V111)) end end}, {'Idris.Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V113, V114)) end end}}, V107, V108)) end end}, V96)))))))) end, V13))), case V115 of {'Idris.Prelude.Types.Left', E50} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V117) -> begin (V118 = (('un--combineLinear'(V11, V96))(V13))), case V118 of {'Idris.Prelude.Types.Left', E52} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V120) -> begin (V121 = ('un--setLinear'(V120, V86))), begin (V122 = ('un--setLinear'(V120, V89))), begin (V123 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"LHS term"/utf8>> end, V121, V13))), case V123 of {'Idris.Prelude.Types.Left', E54} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V125) -> begin (V126 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"LHS type"/utf8>> end, V122, V13))), case V126 of {'Idris.Prelude.Types.Left', E56} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V128) -> begin (V129 = ('Idris.Idris2.Core.Metadata':'un--setHoleLHS'(V2, ('Idris.Idris2.Core.Env':'un--bindEnv'(V0, V11, V10, V121)), V13))), case V129 of {'Idris.Prelude.Types.Left', E58} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V131) -> begin (V132 = (('un--extendEnv'(V0, V10, {'Idris.Core.TT.SubRefl'}, V9, V121, V122))(V13))), case V132 of {'Idris.Prelude.Types.Left', E60} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V134) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V46, V134}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.TTImp.TTImp.ImpossibleClause', E0, E1} -> (fun (V14, V15) -> begin (V16 = (('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'(V1, V10, V15))(V13))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V3, fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V19))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 1, V19))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V18, V19))), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V22, V19))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V35, V36)) end end}, V30)))) end, V19))), case V37 of {'Idris.Prelude.Types.Left', E14} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V11, V19))), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V43 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V8, {'Idris.TTImp.Elab.Check.InLHS', V4}, V9, V10, V11, {'Idris.TTImp.TTImp.IBindHere', V14, {'Idris.TTImp.TTImp.PATTERN'}, V30}, {'Idris.Prelude.Types.Nothing'}))(V19))), case V43 of {'Idris.Prelude.Types.Left', E18} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V45) -> case V45 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V46, V47) -> begin (V49 = begin (V48 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E22} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V51, V11, V46, V19))), case V52 of {'Idris.Prelude.Types.Left', E24} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V54) -> begin (V55 = ('un--hasEmptyPat'(V0, V1, V51, V11, V54, V19))), case V55 of {'Idris.Prelude.Types.Left', E26} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V57) -> case V57 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V18}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.ValidCase', V0, V14, V11, {'Idris.Prelude.Types.Left', V54}}, V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V58) -> fun (V59) -> case V58 of {'Idris.Core.Core.ValidCase', E32, E33, E34, E35} -> (fun (V60, V61, V62, V63) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V58, V59)) end(E32, E33, E34, E35)); _ -> begin (V65 = begin (V64 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E28} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V67) -> begin (V68 = (('un--impossibleErrOK'(V1, V67, V58))(V59))), case V68 of {'Idris.Prelude.Types.Left', E30} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V70) -> case V70 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V18}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.ValidCase', V0, V14, V11, {'Idris.Prelude.Types.Right', V58}}, V59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V13)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.TTImp.TTImp.PatClause', E36, E37, E38} -> (fun (V71, V72, V73) -> begin (V74 = ('un--checkLHS'(V0, V1, V2, V3, 0, V4, V7, V8, V9, V10, V11, V71, V72, V13))), case V74 of {'Idris.Prelude.Types.Left', E39} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V76) -> case V76 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V77, V78) -> case V78 of {'Idris.Builtin.DPair.MkDPair', E43, E44} -> (fun (V79, V80) -> case V80 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V81, V82) -> case V82 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V83, V84) -> case V84 of {'Idris.Builtin.MkPair', E49, E50} -> (fun (V85, V86) -> case V86 of {'Idris.Builtin.MkPair', E51, E52} -> (fun (V87, V88) -> begin (V97 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V89, V90)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V91, V92)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V95, V96)) end end}}, V4)) of 1 -> {'Idris.TTImp.Elab.Check.InType'}; 0 -> {'Idris.TTImp.Elab.Check.InExpr'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V101 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking RHS "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V99, V100)) end end}, V73)))) end, V13))), case V101 of {'Idris.Prelude.Types.Left', E53} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V103) -> begin (V104 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V79, V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V83, V13))), case V104 of {'Idris.Prelude.Types.Left', E55} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V106) -> begin (V112 = begin (V107 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V8}, V13))), case V107 of {'Idris.Prelude.Types.Left', E57} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V109) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"+++ Check RHS "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V71)))) end, ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V9, fun (V110) -> {'Idris.Core.Core.InRHS', V71, V109, V110} end, fun (V111) -> ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V0, V79, V1, V2, V3, V8, V97, V9, V85, V83, V11, V81, V73, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V79, V83, V88)), V111)) end)), V13)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V112 of {'Idris.Prelude.Types.Left', E59} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V114) -> begin (V115 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2, V13))), case V115 of {'Idris.Prelude.Types.Left', E61} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V117) -> begin (V118 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V79, V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"RHS term"/utf8>> end, V114, V13))), case V118 of {'Idris.Prelude.Types.Left', E63} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V120) -> begin (V142 = case V7 of 1 -> begin (V130 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V121) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V122, V123)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V124, V125, V126)) end end end, fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V127, V128, V129)) end end end}, V87, V13))), case V130 of {'Idris.Prelude.Types.Left', E65} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V132) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V133) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V133)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V134, V135)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V136, V137, V138)) end end end, fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V139, V140, V141)) end end end}, V114, V13)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V142 of {'Idris.Prelude.Types.Left', E67} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V144) -> begin (V149 = case V114 of {'Idris.Core.TT.Meta', E69, E70, E71, E72} -> (fun (V145, V146, V147, V148) -> ('Idris.Idris2.Core.Metadata':'un--addLHS'(V79, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V72)), ('Idris.Idris2.Core.Env':'un--length'(V11)), V83, V87, V13)) end(E69, E70, E71, E72)); _ -> {'Idris.Prelude.Types.Right', 0} end), case V149 of {'Idris.Prelude.Types.Left', E73} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V151) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkClause', V79, V83, V87, V114}}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38)); {'Idris.TTImp.TTImp.WithClause', E75, E76, E77, E78, E79, E80} -> (fun (V152, V153, V154, V155, V156, V157) -> begin (V158 = ('un--checkLHS'(V0, V1, V2, V3, 0, V4, V7, V8, V9, V10, V11, V152, V153, V13))), case V158 of {'Idris.Prelude.Types.Left', E81} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V160) -> case V160 of {'Idris.Builtin.MkPair', E83, E84} -> (fun (V161, V162) -> case V162 of {'Idris.Builtin.DPair.MkDPair', E85, E86} -> (fun (V163, V164) -> case V164 of {'Idris.Builtin.MkPair', E87, E88} -> (fun (V165, V166) -> case V166 of {'Idris.Builtin.MkPair', E89, E90} -> (fun (V167, V168) -> case V168 of {'Idris.Builtin.MkPair', E91, E92} -> (fun (V169, V170) -> case V170 of {'Idris.Builtin.MkPair', E93, E94} -> (fun (V171, V172) -> begin (V181 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V173) -> fun (V174) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V173, V174)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V175) -> fun (V176) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V175, V176)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V177) -> fun (V178) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V177, V178)) end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V179, V180)) end end}}, V4)) of 1 -> {'Idris.TTImp.Elab.Check.InType'}; 0 -> {'Idris.TTImp.Elab.Check.InExpr'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V186 = begin (V182 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V8}, V13))), case V182 of {'Idris.Prelude.Types.Left', E95} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V184) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V9, fun (V185) -> {'Idris.Core.Core.InRHS', V152, V184, V185} end, ('Idris.Idris2.TTImp.Elab':'un--elabTermSub'(V0, V163, V1, V2, V3, V8, V181, V9, V169, V167, V11, V165, V154, {'Idris.Prelude.Types.Nothing'}))))(V13)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V186 of {'Idris.Prelude.Types.Left', E97} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V188) -> begin (V189 = {'Idris.Builtin.MkPair', V161, {'Idris.Builtin.DPair.MkDPair', V163, {'Idris.Builtin.MkPair', V165, {'Idris.Builtin.MkPair', V167, {'Idris.Builtin.MkPair', V169, {'Idris.Builtin.MkPair', V171, V172}}}}}}), case V188 of {'Idris.Builtin.MkPair', E99, E100} -> (fun (V190, V191) -> begin (V192 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2, V13))), case V192 of {'Idris.Prelude.Types.Left', E101} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V194) -> begin (V195 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V163, V1, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value"/utf8>> end, V190, V13))), case V195 of {'Idris.Prelude.Types.Left', E103} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V197) -> begin (V198 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V163, V1, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Required type"/utf8>> end, V172, V13))), case V198 of {'Idris.Prelude.Types.Left', E105} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V200) -> begin (V201 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V191))(V13))), case V201 of {'Idris.Prelude.Types.Left', E107} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V203) -> begin (V205 = begin (V204 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V204} end), case V205 of {'Idris.Prelude.Types.Left', E109} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V207) -> begin (V208 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V163, V207, V167, V190, V13))), case V208 of {'Idris.Prelude.Types.Left', E111} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V210) -> begin (V211 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V163, V207, V167, V203, V13))), case V211 of {'Idris.Prelude.Types.Left', E113} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V213) -> begin (V214 = {'Idris.Builtin.MkPair', V190, V191}), ('case--case block in case block in checkClause-8378'(V157, V156, V155, V154, V153, V152, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V161, V163, V165, V167, V169, V171, V172, V189, V181, V190, V191, V214, V203, V207, V210, V213, ('nested--15468-7257--in--un--keepOldEnv'(V157, V156, V155, V154, V153, V152, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V163, V165, case ('Idris.Idris2.Core.Env':'un--findSubEnv'(V163, V167, V210)) of {'Idris.Builtin.DPair.MkDPair', E115, E116} -> (fun (V215, V216) -> V216 end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V13)) end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--calcRefs'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> begin (V43 = {'Idris.Prelude.Types.Just', V42}), (('case--case block in calcRefs-10928'(V3, V2, V1, V0, V8, V42, V43, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V61 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E34)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--applyEnv'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V3}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Core.Env':'un--allVarsNoLet'(V0, V2)))), fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.UnifyState':'un--applyTo'(V0, V8, {'Idris.Core.TT.Ref', V8, V9, {'Idris.Core.Name.Resolved', V7}}, V2)) end end}}}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
