-module('Idris.Idris2.Core.TT').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--weakenNs-7854'/3,
  'case--insertNVarNames-7359'/4,
  'case--insertNVar-7126'/3,
  'case--weakenNVar-7072'/3,
  'case--{Default implementation of weakenNs:0}-6072'/4,
  'nested--11059-6929--in--un--showTot'/3,
  'nested--15448-10769--in--un--showApp'/5,
  'nested--9313-5315--in--un--go'/3,
  'nested--6627-2761--in--un--go'/3,
  'nested--12308-8014--in--un--getFA'/3,
  'nested--15159-10519--in--un--addRefsArgs'/9,
  'nested--15043-10425--in--un--addMetaArgs'/7,
  'dn--un--weaken_Weaken_Var'/1,
  'dn--un--weaken_Weaken_Term'/1,
  'dn--un--weakenNs_Weaken_Var'/2,
  'dn--un--weakenNs_Weaken_Term'/2,
  'dn--un--trimNS_StripNamespace_(Term $vars)'/2,
  'dn--un--traverse_Traversable_PiInfo'/3,
  'dn--un--toList_Foldable_PiInfo'/1,
  'dn--un--show_Show_Visibility'/1,
  'dn--un--show_Show_Totality'/1,
  'dn--un--show_Show_TotalReq'/1,
  'dn--un--show_Show_Terminating'/1,
  'dn--un--show_Show_PartialReason'/1,
  'dn--un--show_Show_LazyReason'/1,
  'dn--un--show_Show_KindedName'/1,
  'dn--un--show_Show_Covering'/1,
  'dn--un--show_Show_Constant'/1,
  'dn--un--show_Show_(Var $ns)'/1,
  'dn--un--show_Show_(Term $vars)'/2,
  'dn--un--show_Show_(PrimFn $arity)'/1,
  'dn--un--show_Show_(PiInfo $t)'/2,
  'dn--un--showPrec_Show_Visibility'/2,
  'dn--un--showPrec_Show_Totality'/2,
  'dn--un--showPrec_Show_TotalReq'/2,
  'dn--un--showPrec_Show_Terminating'/2,
  'dn--un--showPrec_Show_PartialReason'/2,
  'dn--un--showPrec_Show_LazyReason'/2,
  'dn--un--showPrec_Show_KindedName'/2,
  'dn--un--showPrec_Show_Covering'/2,
  'dn--un--showPrec_Show_Constant'/2,
  'dn--un--showPrec_Show_(Var $ns)'/2,
  'dn--un--showPrec_Show_(Term $vars)'/3,
  'dn--un--showPrec_Show_(PrimFn $arity)'/2,
  'dn--un--showPrec_Show_(PiInfo $t)'/3,
  'dn--un--restoreNS_StripNamespace_(Term $vars)'/2,
  'dn--un--pretty_Pretty_Visibility'/1,
  'dn--un--pretty_Pretty_Totality'/1,
  'dn--un--pretty_Pretty_Terminating'/1,
  'dn--un--pretty_Pretty_PartialReason'/1,
  'dn--un--pretty_Pretty_Covering'/1,
  'dn--un--pretty_Pretty_Constant'/1,
  'dn--un--pretty_Pretty_(Term $vars)'/2,
  'dn--un--prettyPrec_Pretty_Visibility'/2,
  'dn--un--prettyPrec_Pretty_Totality'/2,
  'dn--un--prettyPrec_Pretty_Terminating'/2,
  'dn--un--prettyPrec_Pretty_PartialReason'/2,
  'dn--un--prettyPrec_Pretty_Covering'/2,
  'dn--un--prettyPrec_Pretty_Constant'/2,
  'dn--un--prettyPrec_Pretty_(Term $vars)'/3,
  'dn--un--null_Foldable_PiInfo'/1,
  'dn--un--min_Ord_Visibility'/2,
  'dn--un--min_Ord_TotalReq'/2,
  'dn--un--min_Ord_Precision'/2,
  'dn--un--max_Ord_Visibility'/2,
  'dn--un--max_Ord_TotalReq'/2,
  'dn--un--max_Ord_Precision'/2,
  'dn--un--map_Functor_PiInfo'/2,
  'dn--un--map_Functor_Binder'/2,
  'dn--un--foldr_Foldable_PiInfo'/3,
  'dn--un--foldl_Foldable_PiInfo'/3,
  'dn--un--foldlM_Foldable_PiInfo'/4,
  'dn--un--foldMap_Foldable_PiInfo'/3,
  'dn--un--compare_Ord_Visibility'/2,
  'dn--un--compare_Ord_TotalReq'/2,
  'dn--un--compare_Ord_Precision'/2,
  'dn--un--__Impl_Weaken_Var'/0,
  'dn--un--__Impl_Weaken_Term'/0,
  'dn--un--__Impl_Traversable_PiInfo'/0,
  'dn--un--__Impl_StripNamespace_(Term $vars)'/0,
  'dn--un--__Impl_Show_Visibility'/0,
  'dn--un--__Impl_Show_Totality'/0,
  'dn--un--__Impl_Show_TotalReq'/0,
  'dn--un--__Impl_Show_Terminating'/0,
  'dn--un--__Impl_Show_PartialReason'/0,
  'dn--un--__Impl_Show_LazyReason'/0,
  'dn--un--__Impl_Show_KindedName'/0,
  'dn--un--__Impl_Show_Covering'/0,
  'dn--un--__Impl_Show_Constant'/0,
  'dn--un--__Impl_Show_(Var $ns)'/0,
  'dn--un--__Impl_Show_(Term $vars)'/1,
  'dn--un--__Impl_Show_(PrimFn $arity)'/0,
  'dn--un--__Impl_Show_(PiInfo $t)'/1,
  'dn--un--__Impl_Pretty_Visibility'/0,
  'dn--un--__Impl_Pretty_Totality'/0,
  'dn--un--__Impl_Pretty_Terminating'/0,
  'dn--un--__Impl_Pretty_PartialReason'/0,
  'dn--un--__Impl_Pretty_Covering'/0,
  'dn--un--__Impl_Pretty_Constant'/0,
  'dn--un--__Impl_Pretty_(Term $vars)'/1,
  'dn--un--__Impl_Ord_Visibility'/0,
  'dn--un--__Impl_Ord_TotalReq'/0,
  'dn--un--__Impl_Ord_Precision'/0,
  'dn--un--__Impl_Functor_PiInfo'/4,
  'dn--un--__Impl_Functor_Binder'/4,
  'dn--un--__Impl_Foldable_PiInfo'/0,
  'dn--un--__Impl_Eq_Visibility'/0,
  'dn--un--__Impl_Eq_TotalReq'/0,
  'dn--un--__Impl_Eq_Precision'/0,
  'dn--un--__Impl_Eq_LazyReason'/0,
  'dn--un--__Impl_Eq_Constant'/0,
  'dn--un--__Impl_Eq_(Term $vars)'/0,
  'dn--un--__Impl_Eq_(PiInfo $t)'/1,
  'dn--un--__Impl_Eq_(Binder $a)'/1,
  'dn--un-->_Ord_Visibility'/2,
  'dn--un-->_Ord_TotalReq'/2,
  'dn--un-->_Ord_Precision'/2,
  'dn--un-->=_Ord_Visibility'/2,
  'dn--un-->=_Ord_TotalReq'/2,
  'dn--un-->=_Ord_Precision'/2,
  'dn--un--==_Eq_Visibility'/2,
  'dn--un--==_Eq_TotalReq'/2,
  'dn--un--==_Eq_Precision'/2,
  'dn--un--==_Eq_LazyReason'/2,
  'dn--un--==_Eq_Constant'/2,
  'dn--un--==_Eq_(Term $vars)'/2,
  'dn--un--==_Eq_(PiInfo $t)'/3,
  'dn--un--==_Eq_(Binder $a)'/3,
  'dn--un--<_Ord_Visibility'/2,
  'dn--un--<_Ord_TotalReq'/2,
  'dn--un--<_Ord_Precision'/2,
  'dn--un--<=_Ord_Visibility'/2,
  'dn--un--<=_Ord_TotalReq'/2,
  'dn--un--<=_Ord_Precision'/2,
  'dn--un--/=_Eq_Visibility'/2,
  'dn--un--/=_Eq_TotalReq'/2,
  'dn--un--/=_Eq_Precision'/2,
  'dn--un--/=_Eq_LazyReason'/2,
  'dn--un--/=_Eq_Constant'/2,
  'dn--un--/=_Eq_(Term $vars)'/2,
  'dn--un--/=_Eq_(PiInfo $t)'/3,
  'dn--un--/=_Eq_(Binder $a)'/3,
  'un--withPiInfo'/3,
  'un--weakenVar'/2,
  'un--weakenNs'/3,
  'un--weakenNVar'/2,
  'un--weaken'/2,
  'un--varIdx'/1,
  'un--varExtend'/1,
  'un--varEmbedSub'/2,
  'un--unchecked'/0,
  'un--trimNS'/3,
  'un--substName'/3,
  'un--subInclude'/2,
  'un--subExtend'/2,
  'un--subElem'/2,
  'un--sizedView'/1,
  'un--shrinkVar'/2,
  'un--shrinkTerm'/2,
  'un--shrinkPi'/2,
  'un--shrinkBinder'/2,
  'un--setType'/2,
  'un--setMultiplicity'/2,
  'un--sameVar'/2,
  'un--restoreNS'/3,
  'un--resolveRef'/5,
  'un--resolveNames'/2,
  'un--renameVars'/2,
  'un--renameTop'/2,
  'un--refsToLocals'/2,
  'un--refToLocal'/3,
  'un--precision'/1,
  'un--piInfo'/1,
  'un--notCovering'/0,
  'un--nameAt'/2,
  'un--multiplicity'/1,
  'un--mkVar'/1,
  'un--mkLocals'/3,
  'un--linFnType'/4,
  'un--isVar'/2,
  'un--isTotal'/0,
  'un--isPrimType'/1,
  'un--isNVar'/2,
  'un--isLet'/1,
  'un--isImplicit'/1,
  'un--isErased'/1,
  'un--isConstantType'/1,
  'un--isCon'/1,
  'un--intKind'/1,
  'un--insertVarNames'/3,
  'un--insertVar'/2,
  'un--insertNames'/3,
  'un--insertNVarNames'/3,
  'un--insertNVar'/2,
  'un--getRefs'/2,
  'un--getMetas'/1,
  'un--getLoc'/1,
  'un--getFnArgs'/1,
  'un--getFn'/1,
  'un--getArgs'/1,
  'un--forgetDef'/1,
  'un--fnType'/4,
  'un--eqTerm'/2,
  'un--eqPiInfoBy'/3,
  'un--eqBinderBy'/3,
  'un--embedSub'/2,
  'un--embed'/1,
  'un--dropVar'/2,
  'un--dropLater'/1,
  'un--dropFirst'/1,
  'un--defaultKindedName'/1,
  'un--constantEq'/2,
  'un--constTag'/1,
  'un--compatible'/2,
  'un--binderType'/1,
  'un--binderLoc'/1,
  'un--areVarsCompatible'/2,
  'un--applyWithFC'/2,
  'un--apply'/3,
  'un--addVars'/3,
  'un--addRefs'/4,
  'un--addMetas'/2,
  'un--ClosedTerm'/0
]).
'case--weakenNs-7854'(V0, V1, V2) -> case V1 of 0 -> case V2 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> V0 end()); _ -> case V2 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V3) -> ('dn--un--weaken_Weaken_Var'(('dn--un--weakenNs_Weaken_Var'(V3, V0)))) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V2 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V4) -> ('dn--un--weaken_Weaken_Var'(('dn--un--weakenNs_Weaken_Var'(V4, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--insertNVarNames-7359'(V0, V1, V2, V3) -> case V2 of 0 -> case V3 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> ('un--weakenNVar'(V1, V0)) end()); _ -> case V3 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V4) -> case V0 of 0 -> 0; _ -> begin (V5 = (V0 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVarNames'(V4, V1, V5)))) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V3 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V6) -> case V0 of 0 -> 0; _ -> begin (V7 = (V0 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVarNames'(V6, V1, V7)))) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--insertNVar-7126'(V0, V1, V2) -> case V1 of 0 -> case V2 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> ('Idris.Idris2.Core.TT.NVar':'un--later'(V0)) end()); _ -> case V2 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V3) -> case V0 of 0 -> 0; _ -> begin (V4 = (V0 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVar'(V3, V4)))) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V2 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V5) -> case V0 of 0 -> 0; _ -> begin (V6 = (V0 - 1)), ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--insertNVar'(V5, V6)))) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--weakenNVar-7072'(V0, V1, V2) -> case V1 of 0 -> case V2 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> V0 end()); _ -> case V2 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V3) -> ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--weakenNVar'(V3, V0)))) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V2 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V4) -> ('Idris.Idris2.Core.TT.NVar':'un--later'(('un--weakenNVar'(V4, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--{Default implementation of weakenNs:0}-6072'(V0, V1, V2, V3) -> case V1 of 0 -> case V3 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> V0 end()); _ -> case V3 of {'Idris.Core.TT.SizedView.S', E5} -> (fun (V4) -> case V2 of {'Idris.Core.TT.dn--un--__mkWeaken', E6, E7} -> (fun (V5, V6) -> (((V5('erased'))('erased'))(case V2 of {'Idris.Core.TT.dn--un--__mkWeaken', E8, E9} -> (fun (V7, V8) -> ((((V8('erased'))('erased'))(V4))(V0)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V3 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V9) -> case V2 of {'Idris.Core.TT.dn--un--__mkWeaken', E1, E2} -> (fun (V10, V11) -> (((V10('erased'))('erased'))(case V2 of {'Idris.Core.TT.dn--un--__mkWeaken', E3, E4} -> (fun (V12, V13) -> ((((V13('erased'))('erased'))(V9))(V0)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11059-6929--in--un--showTot'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> case V2 of {'Idris.Core.TT.IsCovering'} -> (fun () -> <<"total"/utf8>> end()); _ -> ('dn--un--show_Show_Covering'(V2)) end end()); _ -> case V2 of {'Idris.Core.TT.IsCovering'} -> (fun () -> ('dn--un--show_Show_Terminating'(V1)) end()); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Covering'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"; "/utf8>>, ('dn--un--show_Show_Terminating'(V1)))))) end end.
'nested--15448-10769--in--un--showApp'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V5, V6, V7) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('un--nameAt'(V2, V7)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7)), <<"]"/utf8>>)))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('dn--un--show_Show_(Term $vars)'(V2, V8)) end, V4)))), <<")"/utf8>>)))))))) end end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V9, V10, V11) -> case V4 of [] -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('dn--un--show_Show_(Term $vars)'(V2, V12)) end, V4)))), <<")"/utf8>>)))))))) end end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V17) -> ('dn--un--show_Show_(Term $vars)'(V2, V17)) end, fun (V18) -> fun (V19) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V18, V19)) end end}, V16)))))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('dn--un--show_Show_(Term $vars)'(V2, V20)) end, V4)))), <<")"/utf8>>)))))))) end end end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V21, V22, V23, V24) -> case V23 of {'Idris.Core.TT.Lam', E14, E15, E16, E17} -> (fun (V25, V26, V27, V28) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--withPiInfo'({'Idris.Prelude.Show.MkShow', fun (V29) -> ('dn--un--show_Show_(Term $vars)'(V2, V29)) end, fun (V30) -> fun (V31) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V30, V31)) end end}, V27, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('dn--un--show_Show_(Term $vars)'(V2, V28)))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('dn--un--show_Show_(Term $vars)'([V22 | V2], V24)))))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V32) -> ('dn--un--show_Show_(Term $vars)'(V2, V32)) end, V4)))), <<")"/utf8>>)))))))) end end end(E14, E15, E16, E17)); {'Idris.Core.TT.Let', E18, E19, E20, E21} -> (fun (V33, V34, V35, V36) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V34)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V36)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V35)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('dn--un--show_Show_(Term $vars)'([V22 | V2], V24)))))))))))))))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V37) -> ('dn--un--show_Show_(Term $vars)'(V2, V37)) end, V4)))), <<")"/utf8>>)))))))) end end end(E18, E19, E20, E21)); {'Idris.Core.TT.Pi', E22, E23, E24, E25} -> (fun (V38, V39, V40, V41) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--withPiInfo'({'Idris.Prelude.Show.MkShow', fun (V42) -> ('dn--un--show_Show_(Term $vars)'(V2, V42)) end, fun (V43) -> fun (V44) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V43, V44)) end end}, V40, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V39)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('dn--un--show_Show_(Term $vars)'(V2, V41)))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'([V22 | V2], V24)), <<")"/utf8>>)))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('dn--un--show_Show_(Term $vars)'(V2, V45)) end, V4)))), <<")"/utf8>>)))))))) end end end(E22, E23, E24, E25)); {'Idris.Core.TT.PVar', E26, E27, E28, E29} -> (fun (V46, V47, V48, V49) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--withPiInfo'({'Idris.Prelude.Show.MkShow', fun (V50) -> ('dn--un--show_Show_(Term $vars)'(V2, V50)) end, fun (V51) -> fun (V52) -> ('dn--un--showPrec_Show_(Term $vars)'(V2, V51, V52)) end end}, V48, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pat "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V47)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('dn--un--show_Show_(Term $vars)'(V2, V49)))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('dn--un--show_Show_(Term $vars)'([V22 | V2], V24)))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V53) -> ('dn--un--show_Show_(Term $vars)'(V2, V53)) end, V4)))), <<")"/utf8>>)))))))) end end end(E26, E27, E28, E29)); {'Idris.Core.TT.PLet', E30, E31, E32, E33} -> (fun (V54, V55, V56, V57) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"plet "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V55)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V57)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V56)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('dn--un--show_Show_(Term $vars)'([V22 | V2], V24)))))))))))))))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V58) -> ('dn--un--show_Show_(Term $vars)'(V2, V58)) end, V4)))), <<")"/utf8>>)))))))) end end end(E30, E31, E32, E33)); {'Idris.Core.TT.PVTy', E34, E35, E36} -> (fun (V59, V60, V61) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pty "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V60)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V61)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('dn--un--show_Show_(Term $vars)'([V22 | V2], V24)))))))))))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V62) -> ('dn--un--show_Show_(Term $vars)'(V2, V62)) end, V4)))), <<")"/utf8>>)))))))) end end end(E34, E35, E36)); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V63) -> ('dn--un--show_Show_(Term $vars)'(V2, V63)) end, V4)))), <<")"/utf8>>)))))))) end end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E37, E38, E39} -> (fun (V64, V65, V66) -> case V4 of [] -> <<"[can\x{27}t happen]"/utf8>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V67) -> ('dn--un--show_Show_(Term $vars)'(V2, V67)) end, V4)))), <<")"/utf8>>)))))))) end end end(E37, E38, E39)); {'Idris.Core.TT.As', E40, E41, E42, E43} -> (fun (V68, V69, V70, V71) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V70)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@"/utf8>>, ('dn--un--show_Show_(Term $vars)'(V2, V71)))))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V72) -> ('dn--un--show_Show_(Term $vars)'(V2, V72)) end, V4)))), <<")"/utf8>>)))))))) end end end(E40, E41, E42, E43)); {'Idris.Core.TT.TDelayed', E44, E45, E46} -> (fun (V73, V74, V75) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%Delayed "/utf8>>, ('dn--un--show_Show_(Term $vars)'(V2, V75)))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V76) -> ('dn--un--show_Show_(Term $vars)'(V2, V76)) end, V4)))), <<")"/utf8>>)))))))) end end end(E44, E45, E46)); {'Idris.Core.TT.TDelay', E47, E48, E49, E50} -> (fun (V77, V78, V79, V80) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%Delay "/utf8>>, ('dn--un--show_Show_(Term $vars)'(V2, V80)))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V81) -> ('dn--un--show_Show_(Term $vars)'(V2, V81)) end, V4)))), <<")"/utf8>>)))))))) end end end(E47, E48, E49, E50)); {'Idris.Core.TT.TForce', E51, E52, E53} -> (fun (V82, V83, V84) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%Force "/utf8>>, ('dn--un--show_Show_(Term $vars)'(V2, V84)))); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V85) -> ('dn--un--show_Show_(Term $vars)'(V2, V85)) end, V4)))), <<")"/utf8>>)))))))) end end end(E51, E52, E53)); {'Idris.Core.TT.PrimVal', E54, E55} -> (fun (V86, V87) -> case V4 of [] -> ('dn--un--show_Show_Constant'(V87)); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V88) -> ('dn--un--show_Show_(Term $vars)'(V2, V88)) end, V4)))), <<")"/utf8>>)))))))) end end end(E54, E55)); {'Idris.Core.TT.Erased', E56, E57} -> (fun (V89, V90) -> case V4 of [] -> <<"[__]"/utf8>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V91) -> ('dn--un--show_Show_(Term $vars)'(V2, V91)) end, V4)))), <<")"/utf8>>)))))))) end end end(E56, E57)); {'Idris.Core.TT.TType', E58} -> (fun (V92) -> case V4 of [] -> <<"Type"/utf8>>; _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V93) -> ('dn--un--show_Show_(Term $vars)'(V2, V93)) end, V4)))), <<")"/utf8>>)))))))) end end end(E58)); _ -> case V4 of [] -> <<"???"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Term $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V94) -> ('dn--un--show_Show_(Term $vars)'(V2, V94)) end, V4)))), <<")"/utf8>>)))))))) end end.
'nested--9313-5315--in--un--go'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V2 of {'Idris.Core.TT.Lam', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V4, V8)) of 1 -> case ('un--eqPiInfoBy'(V0, V5, V9)) of 1 -> ((V0(V6))(V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> case V2 of {'Idris.Core.TT.Let', E12, E13, E14, E15} -> (fun (V15, V16, V17, V18) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V12, V16)) of 1 -> case ((V0(V13))(V17)) of 1 -> ((V0(V14))(V18)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14, E15)); _ -> 0 end end(E8, E9, E10, E11)); {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V19, V20, V21, V22) -> case V2 of {'Idris.Core.TT.Pi', E20, E21, E22, E23} -> (fun (V23, V24, V25, V26) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V24)) of 1 -> case ('un--eqPiInfoBy'(V0, V21, V25)) of 1 -> ((V0(V22))(V26)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22, E23)); _ -> 0 end end(E16, E17, E18, E19)); {'Idris.Core.TT.PVar', E24, E25, E26, E27} -> (fun (V27, V28, V29, V30) -> case V2 of {'Idris.Core.TT.PVar', E28, E29, E30, E31} -> (fun (V31, V32, V33, V34) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V28, V32)) of 1 -> case ('un--eqPiInfoBy'(V0, V29, V33)) of 1 -> ((V0(V30))(V34)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31)); _ -> 0 end end(E24, E25, E26, E27)); {'Idris.Core.TT.PLet', E32, E33, E34, E35} -> (fun (V35, V36, V37, V38) -> case V2 of {'Idris.Core.TT.PLet', E36, E37, E38, E39} -> (fun (V39, V40, V41, V42) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V36, V40)) of 1 -> case ((V0(V37))(V41)) of 1 -> ((V0(V38))(V42)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37, E38, E39)); _ -> 0 end end(E32, E33, E34, E35)); {'Idris.Core.TT.PVTy', E40, E41, E42} -> (fun (V43, V44, V45) -> case V2 of {'Idris.Core.TT.PVTy', E43, E44, E45} -> (fun (V46, V47, V48) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V44, V47)) of 1 -> ((V0(V45))(V48)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43, E44, E45)); _ -> 0 end end(E40, E41, E42)); _ -> 0 end.
'nested--6627-2761--in--un--go'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Implicit'} -> (fun () -> case V2 of {'Idris.Core.TT.Implicit'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Explicit'} -> (fun () -> case V2 of {'Idris.Core.TT.Explicit'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V2 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V3) -> case V2 of {'Idris.Core.TT.DefImplicit', E1} -> (fun (V4) -> ((V0(V3))(V4)) end(E1)); _ -> 0 end end(E0)); _ -> 0 end.
'nested--12308-8014--in--un--getFA'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V3, V4, V5) -> ('nested--12308-8014--in--un--getFA'(V0, [V5 | V1], V4)) end(E0, E1, E2)); _ -> {'Idris.Builtin.MkPair', V2, V1} end.
'nested--15159-10519--in--un--addRefsArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> V7; [E0 | E1] -> (fun (V9, V10) -> ('nested--15159-10519--in--un--addRefsArgs'(V0, V1, V2, V3, V4, V5, V6, ('un--addRefs'(V6, V5, V7, V9)), V10)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15043-10425--in--un--addMetaArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> V5; [E0 | E1] -> (fun (V7, V8) -> ('nested--15043-10425--in--un--addMetaArgs'(V0, V1, V2, V3, V4, ('un--addMetas'(V5, V7)), V8)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--weaken_Weaken_Var'(V0) -> ('Idris.Idris2.Core.TT.Var':'un--later'(V0)).
'dn--un--weaken_Weaken_Term'(V0) -> ('dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weakenNs_Weaken_Var'(V0, V1) -> ('case--weakenNs-7854'(V1, V0, ('un--sizedView'(V0)))).
'dn--un--weakenNs_Weaken_Term'(V0, V1) -> ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V1) -> case V1 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V2, V3, V4) -> case V4 of {'Idris.Core.Name.NS', E3, E4} -> (fun (V5, V6) -> begin (V7 = {'Idris.Core.TT.Ref', V2, V3, {'Idris.Core.Name.NS', V5, V6}}), case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V0, V5)) of 1 -> {'Idris.Core.TT.Ref', V2, V3, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--unsafeFoldNamespace'([])), V6}}; 0 -> V7; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4)); _ -> V1 end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E5, E6, E7, E8} -> (fun (V8, V9, V10, V11) -> {'Idris.Core.TT.Meta', V8, V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V12)) end, V11))} end(E5, E6, E7, E8)); {'Idris.Core.TT.Bind', E9, E10, E11, E12} -> (fun (V13, V14, V15, V16) -> {'Idris.Core.TT.Bind', V13, V14, ('dn--un--map_Functor_Binder'(fun (V17) -> ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V17)) end, V15)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V16))} end(E9, E10, E11, E12)); {'Idris.Core.TT.App', E13, E14, E15} -> (fun (V18, V19, V20) -> {'Idris.Core.TT.App', V18, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V19)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V20))} end(E13, E14, E15)); {'Idris.Core.TT.As', E16, E17, E18, E19} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.TT.As', V21, V22, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V23)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V24))} end(E16, E17, E18, E19)); {'Idris.Core.TT.TDelayed', E20, E21, E22} -> (fun (V25, V26, V27) -> {'Idris.Core.TT.TDelayed', V25, V26, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V27))} end(E20, E21, E22)); {'Idris.Core.TT.TDelay', E23, E24, E25, E26} -> (fun (V28, V29, V30, V31) -> {'Idris.Core.TT.TDelay', V28, V29, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V30)), ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V31))} end(E23, E24, E25, E26)); {'Idris.Core.TT.TForce', E27, E28, E29} -> (fun (V32, V33, V34) -> {'Idris.Core.TT.TForce', V32, V33, ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V34))} end(E27, E28, E29)); _ -> V1 end.
'dn--un--traverse_Traversable_PiInfo'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Implicit'} -> (fun () -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V3, V4, V5) -> ((V4('erased'))({'Idris.Core.TT.Implicit'})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Explicit'} -> (fun () -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V6, V7, V8) -> ((V7('erased'))({'Idris.Core.TT.Explicit'})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V9, V10, V11) -> ((V10('erased'))({'Idris.Core.TT.AutoImplicit'})) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DefImplicit', E9} -> (fun (V12) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V13, V14, V15) -> ((((V13('erased'))('erased'))(fun (V16) -> {'Idris.Core.TT.DefImplicit', V16} end))((V1(V12)))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toList_Foldable_PiInfo'(V0) -> ('dn--un--foldr_Foldable_PiInfo'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--show_Show_Visibility'(V0) -> case V0 of 0 -> <<"private"/utf8>>; 1 -> <<"export"/utf8>>; 2 -> <<"public export"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Totality'(V0) -> begin (V3 = case V0 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V6 = case V0 of {'Idris.Core.TT.MkTotality', E2, E3} -> (fun (V4, V5) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('nested--11059-6929--in--un--showTot'(V0, V3, V6)) end end.
'dn--un--show_Show_TotalReq'(V0) -> case V0 of 0 -> <<"total"/utf8>>; 1 -> <<"covering"/utf8>>; 2 -> <<"partial"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Terminating'(V0) -> case V0 of {'Idris.Core.TT.Unchecked'} -> (fun () -> <<"not yet checked"/utf8>> end()); {'Idris.Core.TT.IsTerminating'} -> (fun () -> <<"terminating"/utf8>> end()); {'Idris.Core.TT.NotTerminating', E0} -> (fun (V1) -> ('dn--un--show_Show_PartialReason'(V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_PartialReason'(V0) -> case V0 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> <<"not strictly positive"/utf8>> end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V1) -> case V1 of [E1 | E2] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"possibly not terminating due to call to "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"possibly not terminating due to calls to "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, V1)))))) end end(E1, E2)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"possibly not terminating due to calls to "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end, V1)))))) end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"possibly not terminating due to recursive path "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" -> "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, V6)))))) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_LazyReason'(V0) -> case V0 of 0 -> <<"Inf"/utf8>>; 1 -> <<"Lazy"/utf8>>; 2 -> <<"Unkown"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_KindedName'(V0) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.Core.TT.MkKindedName', E0, E1, E2} -> (fun (V1, V2, V3) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--show_Show_Covering'(V0) -> case V0 of {'Idris.Core.TT.IsCovering'} -> (fun () -> <<"covering"/utf8>> end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V1) -> <<"not covering all cases"/utf8>> end(E0)); {'Idris.Core.TT.NonCoveringCall', E1} -> (fun (V2) -> case V2 of [E2 | E3] -> (fun (V3, V4) -> case V4 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"not covering due to call to function "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"not covering due to calls to functions "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end, V2)))))) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"not covering due to calls to functions "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)) end, V2)))))) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Constant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2)) end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V3)) end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4)) end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V5)) end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6)) end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)) end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V10)) end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V11)) end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V12)) end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V13)) end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> <<"%MkWorld"/utf8>> end()); {'Idris.Core.TT.IntType'} -> (fun () -> <<"Int"/utf8>> end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> <<"Int8"/utf8>> end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> <<"Int16"/utf8>> end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> <<"Int32"/utf8>> end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> <<"Int64"/utf8>> end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> <<"Integer"/utf8>> end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> <<"Bits8"/utf8>> end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> <<"Bits16"/utf8>> end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> <<"Bits32"/utf8>> end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> <<"Bits64"/utf8>> end()); {'Idris.Core.TT.StringType'} -> (fun () -> <<"String"/utf8>> end()); {'Idris.Core.TT.CharType'} -> (fun () -> <<"Char"/utf8>> end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> <<"Double"/utf8>> end()); {'Idris.Core.TT.WorldType'} -> (fun () -> <<"%World"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(Var $ns)'(V0) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V0)).
'dn--un--show_Show_(Term $vars)'(V0, V1) -> case ('un--getFnArgs'(V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> ('nested--15448-10769--in--un--showApp'(V0, V1, V0, V2, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(PrimFn $arity)'(V0) -> case V0 of {'Idris.Core.TT.Add', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"+"/utf8>>, ('dn--un--show_Show_Constant'(V1)))) end(E0)); {'Idris.Core.TT.Sub', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('dn--un--show_Show_Constant'(V2)))) end(E1)); {'Idris.Core.TT.Mul', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"*"/utf8>>, ('dn--un--show_Show_Constant'(V3)))) end(E2)); {'Idris.Core.TT.Div', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"/"/utf8>>, ('dn--un--show_Show_Constant'(V4)))) end(E3)); {'Idris.Core.TT.Mod', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%"/utf8>>, ('dn--un--show_Show_Constant'(V5)))) end(E4)); {'Idris.Core.TT.Neg', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"neg "/utf8>>, ('dn--un--show_Show_Constant'(V6)))) end(E5)); {'Idris.Core.TT.ShiftL', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shl "/utf8>>, ('dn--un--show_Show_Constant'(V7)))) end(E6)); {'Idris.Core.TT.ShiftR', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shr "/utf8>>, ('dn--un--show_Show_Constant'(V8)))) end(E7)); {'Idris.Core.TT.BAnd', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"and "/utf8>>, ('dn--un--show_Show_Constant'(V9)))) end(E8)); {'Idris.Core.TT.BOr', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"or "/utf8>>, ('dn--un--show_Show_Constant'(V10)))) end(E9)); {'Idris.Core.TT.BXOr', E10} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"xor "/utf8>>, ('dn--un--show_Show_Constant'(V11)))) end(E10)); {'Idris.Core.TT.LT', E11} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('dn--un--show_Show_Constant'(V12)))) end(E11)); {'Idris.Core.TT.LTE', E12} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<="/utf8>>, ('dn--un--show_Show_Constant'(V13)))) end(E12)); {'Idris.Core.TT.EQ', E13} -> (fun (V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"=="/utf8>>, ('dn--un--show_Show_Constant'(V14)))) end(E13)); {'Idris.Core.TT.GTE', E14} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<">="/utf8>>, ('dn--un--show_Show_Constant'(V15)))) end(E14)); {'Idris.Core.TT.GT', E15} -> (fun (V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<">"/utf8>>, ('dn--un--show_Show_Constant'(V16)))) end(E15)); {'Idris.Core.TT.StrLength'} -> (fun () -> <<"op_strlen"/utf8>> end()); {'Idris.Core.TT.StrHead'} -> (fun () -> <<"op_strhead"/utf8>> end()); {'Idris.Core.TT.StrTail'} -> (fun () -> <<"op_strtail"/utf8>> end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> <<"op_strindex"/utf8>> end()); {'Idris.Core.TT.StrCons'} -> (fun () -> <<"op_strcons"/utf8>> end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> <<"++"/utf8>> end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> <<"op_strrev"/utf8>> end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> <<"op_strsubstr"/utf8>> end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> <<"op_doubleExp"/utf8>> end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> <<"op_doubleLog"/utf8>> end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> <<"op_doublePow"/utf8>> end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> <<"op_doubleSin"/utf8>> end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> <<"op_doubleCos"/utf8>> end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> <<"op_doubleTan"/utf8>> end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> <<"op_doubleASin"/utf8>> end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> <<"op_doubleACos"/utf8>> end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> <<"op_doubleATan"/utf8>> end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> <<"op_doubleSqrt"/utf8>> end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> <<"op_doubleFloor"/utf8>> end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> <<"op_doubleCeiling"/utf8>> end()); {'Idris.Core.TT.Cast', E16, E17} -> (fun (V17, V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"cast-"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Constant'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('dn--un--show_Show_Constant'(V18)))))))) end(E16, E17)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> <<"believe_me"/utf8>> end()); {'Idris.Core.TT.Crash'} -> (fun () -> <<"crash"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(PiInfo $t)'(V0, V1) -> case V1 of {'Idris.Core.TT.Implicit'} -> (fun () -> <<"Implicit"/utf8>> end()); {'Idris.Core.TT.Explicit'} -> (fun () -> <<"Explicit"/utf8>> end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> <<"AutoImplicit"/utf8>> end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DefImplicit "/utf8>>, case V0 of {'Idris.Prelude.Show.MkShow', E1, E2} -> (fun (V3, V4) -> (V3(V2)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_Visibility'(V0, V1) -> ('dn--un--show_Show_Visibility'(V1)).
'dn--un--showPrec_Show_Totality'(V0, V1) -> ('dn--un--show_Show_Totality'(V1)).
'dn--un--showPrec_Show_TotalReq'(V0, V1) -> ('dn--un--show_Show_TotalReq'(V1)).
'dn--un--showPrec_Show_Terminating'(V0, V1) -> ('dn--un--show_Show_Terminating'(V1)).
'dn--un--showPrec_Show_PartialReason'(V0, V1) -> ('dn--un--show_Show_PartialReason'(V1)).
'dn--un--showPrec_Show_LazyReason'(V0, V1) -> ('dn--un--show_Show_LazyReason'(V1)).
'dn--un--showPrec_Show_KindedName'(V0, V1) -> ('dn--un--show_Show_KindedName'(V1)).
'dn--un--showPrec_Show_Covering'(V0, V1) -> ('dn--un--show_Show_Covering'(V1)).
'dn--un--showPrec_Show_Constant'(V0, V1) -> ('dn--un--show_Show_Constant'(V1)).
'dn--un--showPrec_Show_(Var $ns)'(V0, V1) -> ('dn--un--show_Show_(Var $ns)'(V1)).
'dn--un--showPrec_Show_(Term $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(Term $vars)'(V0, V2)).
'dn--un--showPrec_Show_(PrimFn $arity)'(V0, V1) -> ('dn--un--show_Show_(PrimFn $arity)'(V1)).
'dn--un--showPrec_Show_(PiInfo $t)'(V0, V1, V2) -> ('dn--un--show_Show_(PiInfo $t)'(V0, V2)).
'dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V1) -> case V1 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V2, V3, V4) -> case V4 of {'Idris.Core.Name.NS', E3, E4} -> (fun (V5, V6) -> begin (V7 = {'Idris.Core.TT.Ref', V2, V3, {'Idris.Core.Name.NS', V5, V6}}), case ('Idris.Idris2.Data.List':'un--isNil'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V5)))) of 1 -> {'Idris.Core.TT.Ref', V2, V3, {'Idris.Core.Name.NS', V0, V6}}; 0 -> V7; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4)); _ -> V1 end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E5, E6, E7, E8} -> (fun (V8, V9, V10, V11) -> {'Idris.Core.TT.Meta', V8, V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V12)) end, V11))} end(E5, E6, E7, E8)); {'Idris.Core.TT.Bind', E9, E10, E11, E12} -> (fun (V13, V14, V15, V16) -> {'Idris.Core.TT.Bind', V13, V14, ('dn--un--map_Functor_Binder'(fun (V17) -> ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V17)) end, V15)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V16))} end(E9, E10, E11, E12)); {'Idris.Core.TT.App', E13, E14, E15} -> (fun (V18, V19, V20) -> {'Idris.Core.TT.App', V18, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V19)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V20))} end(E13, E14, E15)); {'Idris.Core.TT.As', E16, E17, E18, E19} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.TT.As', V21, V22, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V23)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V24))} end(E16, E17, E18, E19)); {'Idris.Core.TT.TDelayed', E20, E21, E22} -> (fun (V25, V26, V27) -> {'Idris.Core.TT.TDelayed', V25, V26, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V27))} end(E20, E21, E22)); {'Idris.Core.TT.TDelay', E23, E24, E25, E26} -> (fun (V28, V29, V30, V31) -> {'Idris.Core.TT.TDelay', V28, V29, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V30)), ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V31))} end(E23, E24, E25, E26)); {'Idris.Core.TT.TForce', E27, E28, E29} -> (fun (V32, V33, V34) -> {'Idris.Core.TT.TForce', V32, V33, ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V34))} end(E27, E28, E29)); _ -> V1 end.
'dn--un--pretty_Pretty_Visibility'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"private"/utf8>>)); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"export"/utf8>>)); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"public"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"export"/utf8>>)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_Totality'(V0) -> case V0 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> case V2 of {'Idris.Core.TT.IsCovering'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"total"/utf8>>)) end()); _ -> ('dn--un--pretty_Pretty_Covering'(V2)) end end()); _ -> case V2 of {'Idris.Core.TT.IsCovering'} -> (fun () -> ('dn--un--pretty_Pretty_Terminating'(V1)) end()); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('dn--un--pretty_Pretty_Covering'(V2)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--semi'()))), ('dn--un--pretty_Pretty_Terminating'(V1)))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_Terminating'(V0) -> case V0 of {'Idris.Core.TT.Unchecked'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not yet checked"/utf8>>)) end()); {'Idris.Core.TT.IsTerminating'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"terminating"/utf8>>)) end()); {'Idris.Core.TT.NotTerminating', E0} -> (fun (V1) -> ('dn--un--pretty_Pretty_PartialReason'(V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_PartialReason'(V0) -> case V0 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not strictly positive"/utf8>>)) end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V1) -> case V1 of [E1 | E2] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to call to"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V2)))); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to calls to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V4, V5)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V8, V9)) end end end end, fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V10)) end, V1)))))) end end(E1, E2)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to calls to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V11, V12)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V15, V16)) end end end end, fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V17)) end, V1)))))) end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V18) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"possibly not terminating due to recursive path"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<" -> "/utf8>>)), V19, V20)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V23, V24)) end end end end, fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V25)) end, V18)))))) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_Covering'(V0) -> case V0 of {'Idris.Core.TT.IsCovering'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"covering"/utf8>>)) end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering all cases"/utf8>>)) end(E0)); {'Idris.Core.TT.NonCoveringCall', E1} -> (fun (V2) -> case V2 of [E2 | E3] -> (fun (V3, V4) -> case V4 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering due to call to function"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V3)))); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering due to calls to functions"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V5, V6)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V9, V10)) end end end end, fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V11)) end, V2)))))) end end(E2, E3)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"not covering due to calls to functions"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), V12, V13)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V16, V17)) end end end end, fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V18)) end, V2)))))) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_Constant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V1)) end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V2)) end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V3)) end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V4)) end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V5)) end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V6)) end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V7)) end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V8) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V8)) end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V9)) end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V10) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V10)) end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V11)))) end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--squotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Char'(V12)))) end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Double'(V13)) end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"%MkWorld"/utf8>>)) end()); {'Idris.Core.TT.IntType'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Int"/utf8>>)) end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Int8"/utf8>>)) end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Int16"/utf8>>)) end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Int32"/utf8>>)) end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Int64"/utf8>>)) end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Integer"/utf8>>)) end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Bits8"/utf8>>)) end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Bits16"/utf8>>)) end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Bits32"/utf8>>)) end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Bits64"/utf8>>)) end()); {'Idris.Core.TT.StringType'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"String"/utf8>>)) end()); {'Idris.Core.TT.CharType'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Char"/utf8>>)) end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Double"/utf8>>)) end()); {'Idris.Core.TT.WorldType'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"%World"/utf8>>)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_(Term $vars)'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('dn--un--show_Show_(Term $vars)'(V0, V1)))).
'dn--un--prettyPrec_Pretty_Visibility'(V0, V1) -> ('dn--un--pretty_Pretty_Visibility'(V1)).
'dn--un--prettyPrec_Pretty_Totality'(V0, V1) -> ('dn--un--pretty_Pretty_Totality'(V1)).
'dn--un--prettyPrec_Pretty_Terminating'(V0, V1) -> ('dn--un--pretty_Pretty_Terminating'(V1)).
'dn--un--prettyPrec_Pretty_PartialReason'(V0, V1) -> ('dn--un--pretty_Pretty_PartialReason'(V1)).
'dn--un--prettyPrec_Pretty_Covering'(V0, V1) -> ('dn--un--pretty_Pretty_Covering'(V1)).
'dn--un--prettyPrec_Pretty_Constant'(V0, V1) -> ('dn--un--pretty_Pretty_Constant'(V1)).
'dn--un--prettyPrec_Pretty_(Term $vars)'(V0, V1, V2) -> ('dn--un--pretty_Pretty_(Term $vars)'(V0, V2)).
'dn--un--null_Foldable_PiInfo'(V0) -> ('dn--un--foldr_Foldable_PiInfo'(fun (V1) -> fun (V2) -> fun () -> 0 end end end, fun () -> 1 end, V0)).
'dn--un--min_Ord_Visibility'(V0, V1) -> case ('dn--un--<_Ord_Visibility'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_TotalReq'(V0, V1) -> case ('dn--un--<_Ord_TotalReq'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_Precision'(V0, V1) -> case ('dn--un--<_Ord_Precision'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_Visibility'(V0, V1) -> case ('dn--un-->_Ord_Visibility'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_TotalReq'(V0, V1) -> case ('dn--un-->_Ord_TotalReq'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_Precision'(V0, V1) -> case ('dn--un-->_Ord_Precision'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_PiInfo'(V0, V1) -> case V1 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Core.TT.Explicit'} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Core.TT.Implicit'} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Core.TT.AutoImplicit'} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V2) -> {'Idris.Core.TT.DefImplicit', (V0(V2))} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_Binder'(V0, V1) -> case V1 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.TT.Lam', V2, V3, ('dn--un--map_Functor_PiInfo'(V0, V4)), (V0(V5))} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Let', V6, V7, (V0(V8)), (V0(V9))} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> {'Idris.Core.TT.Pi', V10, V11, ('dn--un--map_Functor_PiInfo'(V0, V12)), (V0(V13))} end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> {'Idris.Core.TT.PVar', V14, V15, ('dn--un--map_Functor_PiInfo'(V0, V16)), (V0(V17))} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.PLet', V18, V19, (V0(V20)), (V0(V21))} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V22, V23, V24) -> {'Idris.Core.TT.PVTy', V22, V23, (V0(V24))} end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldr_Foldable_PiInfo'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Implicit'} -> (fun () -> V1 end()); {'Idris.Core.TT.Explicit'} -> (fun () -> V1 end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> V1 end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V3) -> ((V0(V3))(V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldl_Foldable_PiInfo'(V0, V1, V2) -> (('dn--un--foldr_Foldable_PiInfo'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldlM_Foldable_PiInfo'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_PiInfo'(fun (V4) -> fun (V5) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))(V2)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)).
'dn--un--foldMap_Foldable_PiInfo'(V0, V1, V2) -> ('dn--un--foldr_Foldable_PiInfo'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V5, V6) -> ((V5((V1(V3))))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--compare_Ord_Visibility'(V0, V1) -> case V0 of 0 -> case V1 of 1 -> 0; 2 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case V1 of 2 -> 0; 1 -> 1; 0 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> case V1 of 2 -> 1; 0 -> 2; 1 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_TotalReq'(V0, V1) -> case ('dn--un--<_Ord_TotalReq'(V0, V1)) of 1 -> 0; 0 -> case ('dn--un--==_Eq_TotalReq'(V0, V1)) of 1 -> 1; 0 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_Precision'(V0, V1) -> case V0 of {'Idris.Core.TT.P', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.P', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2, V3)) end(E1)); _ -> case V1 of {'Idris.Core.TT.Unlimited'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.Unlimited'} -> (fun () -> case V1 of {'Idris.Core.TT.Unlimited'} -> (fun () -> 1 end()); _ -> 2 end end()); _ -> case V1 of {'Idris.Core.TT.Unlimited'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_Weaken_Var'() -> {'Idris.Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_Var'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_Var'(V5, V6)) end end end end}.
'dn--un--__Impl_Weaken_Term'() -> {'Idris.Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_Term'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_Term'(V5, V6)) end end end end}.
'dn--un--__Impl_Traversable_PiInfo'() -> {'Idris.Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_PiInfo'(V2, V3)) end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_PiInfo'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_PiInfo'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_PiInfo'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_PiInfo'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_PiInfo'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_PiInfo'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_PiInfo'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_StripNamespace_(Term $vars)'() -> {'Idris.Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_(Term $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Show_Visibility'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Visibility'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Visibility'(V1, V2)) end end}.
'dn--un--__Impl_Show_Totality'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Totality'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Totality'(V1, V2)) end end}.
'dn--un--__Impl_Show_TotalReq'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_TotalReq'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_TotalReq'(V1, V2)) end end}.
'dn--un--__Impl_Show_Terminating'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Terminating'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Terminating'(V1, V2)) end end}.
'dn--un--__Impl_Show_PartialReason'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PartialReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PartialReason'(V1, V2)) end end}.
'dn--un--__Impl_Show_LazyReason'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_LazyReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_LazyReason'(V1, V2)) end end}.
'dn--un--__Impl_Show_KindedName'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_KindedName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_KindedName'(V1, V2)) end end}.
'dn--un--__Impl_Show_Covering'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Covering'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Covering'(V1, V2)) end end}.
'dn--un--__Impl_Show_Constant'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Constant'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Constant'(V1, V2)) end end}.
'dn--un--__Impl_Show_(Var $ns)'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_(Var $ns)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_(Var $ns)'(V1, V2)) end end}.
'dn--un--__Impl_Show_(Term $vars)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(Term $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(Term $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(PrimFn $arity)'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_(PrimFn $arity)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_(PrimFn $arity)'(V1, V2)) end end}.
'dn--un--__Impl_Show_(PiInfo $t)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(PiInfo $t)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(PiInfo $t)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Pretty_Visibility'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Visibility'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Visibility'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_Totality'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Totality'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Totality'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_Terminating'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Terminating'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Terminating'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_PartialReason'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_PartialReason'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_PartialReason'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_Covering'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Covering'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Covering'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_Constant'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Constant'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Constant'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_(Term $vars)'(V0) -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V1) -> fun (V2) -> ('dn--un--pretty_Pretty_(Term $vars)'(V0, V2)) end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--prettyPrec_Pretty_(Term $vars)'(V0, V4, V5)) end end end}.
'dn--un--__Impl_Ord_Visibility'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Visibility'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Visibility'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Visibility'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Visibility'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Visibility'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Visibility'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Visibility'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Visibility'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Visibility'(V16, V17)) end end}.
'dn--un--__Impl_Ord_TotalReq'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_TotalReq'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_TotalReq'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_TotalReq'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_TotalReq'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_TotalReq'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_TotalReq'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_TotalReq'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_TotalReq'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_TotalReq'(V16, V17)) end end}.
'dn--un--__Impl_Ord_Precision'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Precision'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Precision'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Precision'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Precision'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Precision'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Precision'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Precision'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Precision'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Precision'(V16, V17)) end end}.
'dn--un--__Impl_Functor_PiInfo'(V0, V1, V2, V3) -> ('dn--un--map_Functor_PiInfo'(V2, V3)).
'dn--un--__Impl_Functor_Binder'(V0, V1, V2, V3) -> ('dn--un--map_Functor_Binder'(V2, V3)).
'dn--un--__Impl_Foldable_PiInfo'() -> {'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_PiInfo'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_PiInfo'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_PiInfo'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_PiInfo'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_PiInfo'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_PiInfo'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Eq_Visibility'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Visibility'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Visibility'(V2, V3)) end end}.
'dn--un--__Impl_Eq_TotalReq'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_TotalReq'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_TotalReq'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Precision'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Precision'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Precision'(V2, V3)) end end}.
'dn--un--__Impl_Eq_LazyReason'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_LazyReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_LazyReason'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Constant'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Constant'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Constant'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(Term $vars)'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(Term $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(Term $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(PiInfo $t)'(V0) -> {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(PiInfo $t)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(PiInfo $t)'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_(Binder $a)'(V0) -> {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(Binder $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(Binder $a)'(V0, V3, V4)) end end}.
'dn--un-->_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 2)).
'dn--un-->_Ord_TotalReq'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_TotalReq'(V0, V1)), 2)).
'dn--un-->_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 2)).
'dn--un-->=_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 0)).
'dn--un-->=_Ord_TotalReq'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_TotalReq'(V0, V1)), 0)).
'dn--un-->=_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 0)).
'dn--un--==_Eq_Visibility'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_TotalReq'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Precision'(V0, V1) -> case V0 of {'Idris.Core.TT.P', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.P', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.Core.TT.Unlimited'} -> (fun () -> case V1 of {'Idris.Core.TT.Unlimited'} -> (fun () -> 1 end()); _ -> 0 end end()); _ -> 0 end.
'dn--un--==_Eq_LazyReason'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_Constant'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V4, V5)) end(E3)); _ -> 0 end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)) end(E5)); _ -> 0 end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V8, V9)) end(E7)); _ -> 0 end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V10, V11)) end(E9)); _ -> 0 end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V12, V13)) end(E11)); _ -> 0 end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)) end(E13)); _ -> 0 end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V17)) end(E15)); _ -> 0 end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V18, V19)) end(E17)); _ -> 0 end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V20, V21)) end(E19)); _ -> 0 end end(E18)); {'Idris.Core.TT.Str', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Str', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23)) end(E21)); _ -> 0 end end(E20)); {'Idris.Core.TT.Ch', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Ch', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V24, V25)) end(E23)); _ -> 0 end end(E22)); {'Idris.Core.TT.Db', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Db', E25} -> (fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Double'(V26, V27)) end(E25)); _ -> 0 end end(E24)); {'Idris.Core.TT.WorldVal'} -> (fun () -> case V1 of {'Idris.Core.TT.WorldVal'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V1 of {'Idris.Core.TT.IntType'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int8Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int16Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int32Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int64Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V1 of {'Idris.Core.TT.IntegerType'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Bits8Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Bits16Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Bits32Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Bits64Type'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Core.TT.StringType'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.CharType'} -> (fun () -> case V1 of {'Idris.Core.TT.CharType'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleType'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.TT.WorldType'} -> (fun () -> case V1 of {'Idris.Core.TT.WorldType'} -> (fun () -> 1 end()); _ -> 0 end end()); _ -> 0 end.
'dn--un--==_Eq_(Term $vars)'(V0, V1) -> case V0 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.TT.Local', E3, E4, E5} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V4, V7)) end(E3, E4, E5)); _ -> 0 end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E6, E7, E8} -> (fun (V8, V9, V10) -> case V1 of {'Idris.Core.TT.Ref', E9, E10, E11} -> (fun (V11, V12, V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V13)) end(E9, E10, E11)); _ -> 0 end end(E6, E7, E8)); {'Idris.Core.TT.Meta', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> case V1 of {'Idris.Core.TT.Meta', E16, E17, E18, E19} -> (fun (V18, V19, V20, V21) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V20)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('dn--un--==_Eq_(Term $vars)'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('dn--un--/=_Eq_(Term $vars)'(V24, V25)) end end}, V17, V21)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18, E19)); _ -> 0 end end(E12, E13, E14, E15)); {'Idris.Core.TT.Bind', E20, E21, E22, E23} -> (fun (V26, V27, V28, V29) -> case V1 of {'Idris.Core.TT.Bind', E24, E25, E26, E27} -> (fun (V30, V31, V32, V33) -> case ('dn--un--==_Eq_(Binder $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('dn--un--==_Eq_(Term $vars)'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('dn--un--/=_Eq_(Term $vars)'(V36, V37)) end end}, V28, V32)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V29, ('Idris.Idris2.Builtin':'un--believe_me'(V33)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27)); _ -> 0 end end(E20, E21, E22, E23)); {'Idris.Core.TT.App', E28, E29, E30} -> (fun (V38, V39, V40) -> case V1 of {'Idris.Core.TT.App', E31, E32, E33} -> (fun (V41, V42, V43) -> case ('dn--un--==_Eq_(Term $vars)'(V39, V42)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V40, V43)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33)); _ -> 0 end end(E28, E29, E30)); {'Idris.Core.TT.As', E34, E35, E36, E37} -> (fun (V44, V45, V46, V47) -> case V1 of {'Idris.Core.TT.As', E38, E39, E40, E41} -> (fun (V48, V49, V50, V51) -> case ('dn--un--==_Eq_(Term $vars)'(V46, V50)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V47, V51)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39, E40, E41)); _ -> 0 end end(E34, E35, E36, E37)); {'Idris.Core.TT.TDelayed', E42, E43, E44} -> (fun (V52, V53, V54) -> case V1 of {'Idris.Core.TT.TDelayed', E45, E46, E47} -> (fun (V55, V56, V57) -> ('dn--un--==_Eq_(Term $vars)'(V54, V57)) end(E45, E46, E47)); _ -> 0 end end(E42, E43, E44)); {'Idris.Core.TT.TDelay', E48, E49, E50, E51} -> (fun (V58, V59, V60, V61) -> case V1 of {'Idris.Core.TT.TDelay', E52, E53, E54, E55} -> (fun (V62, V63, V64, V65) -> case ('dn--un--==_Eq_(Term $vars)'(V60, V64)) of 1 -> ('dn--un--==_Eq_(Term $vars)'(V61, V65)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53, E54, E55)); _ -> 0 end end(E48, E49, E50, E51)); {'Idris.Core.TT.TForce', E56, E57, E58} -> (fun (V66, V67, V68) -> case V1 of {'Idris.Core.TT.TForce', E59, E60, E61} -> (fun (V69, V70, V71) -> ('dn--un--==_Eq_(Term $vars)'(V68, V71)) end(E59, E60, E61)); _ -> 0 end end(E56, E57, E58)); {'Idris.Core.TT.PrimVal', E62, E63} -> (fun (V72, V73) -> case V1 of {'Idris.Core.TT.PrimVal', E64, E65} -> (fun (V74, V75) -> ('dn--un--==_Eq_Constant'(V73, V75)) end(E64, E65)); _ -> 0 end end(E62, E63)); {'Idris.Core.TT.Erased', E66, E67} -> (fun (V76, V77) -> case V1 of {'Idris.Core.TT.Erased', E68, E69} -> (fun (V78, V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V77, V79)) end(E68, E69)); _ -> 0 end end(E66, E67)); {'Idris.Core.TT.TType', E70} -> (fun (V80) -> case V1 of {'Idris.Core.TT.TType', E71} -> (fun (V81) -> 1 end(E71)); _ -> 0 end end(E70)); _ -> 0 end.
'dn--un--==_Eq_(PiInfo $t)'(V0, V1, V2) -> ('un--eqPiInfoBy'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.EqOrd.MkEq', E0, E1} -> (fun (V5, V6) -> ((V5(V3))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V1, V2)).
'dn--un--==_Eq_(Binder $a)'(V0, V1, V2) -> ('un--eqBinderBy'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.EqOrd.MkEq', E0, E1} -> (fun (V5, V6) -> ((V5(V3))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V1, V2)).
'dn--un--<_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 0)).
'dn--un--<_Ord_TotalReq'(V0, V1) -> case ('dn--un--<=_Ord_TotalReq'(V0, V1)) of 1 -> ('dn--un--/=_Eq_TotalReq'(V0, V1)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 0)).
'dn--un--<=_Ord_Visibility'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Visibility'(V0, V1)), 2)).
'dn--un--<=_Ord_TotalReq'(V0, V1) -> case V0 of 2 -> 1; _ -> case V1 of 0 -> 1; _ -> ('dn--un--==_Eq_TotalReq'(V0, V1)) end end.
'dn--un--<=_Ord_Precision'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Precision'(V0, V1)), 2)).
'dn--un--/=_Eq_Visibility'(V0, V1) -> case ('dn--un--==_Eq_Visibility'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_TotalReq'(V0, V1) -> case ('dn--un--==_Eq_TotalReq'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_Precision'(V0, V1) -> case ('dn--un--==_Eq_Precision'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_LazyReason'(V0, V1) -> case ('dn--un--==_Eq_LazyReason'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_Constant'(V0, V1) -> case ('dn--un--==_Eq_Constant'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(Term $vars)'(V0, V1) -> case ('dn--un--==_Eq_(Term $vars)'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(PiInfo $t)'(V0, V1, V2) -> case ('dn--un--==_Eq_(PiInfo $t)'(V0, V1, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(Binder $a)'(V0, V1, V2) -> case ('dn--un--==_Eq_(Binder $a)'(V0, V1, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--withPiInfo'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<")"/utf8>>)))) end()); {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<"}"/utf8>>)))) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{auto "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<"}"/utf8>>)))) end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{default "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Prelude.Show.MkShow', E1, E2} -> (fun (V4, V5) -> (V4(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<"}"/utf8>>)))))))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--weakenVar'(V0, V1) -> ('un--weakenNVar'(V0, V1)).
'un--weakenNs'(V0, V1, V2) -> case V0 of {'Idris.Core.TT.dn--un--__mkWeaken', E0, E1} -> (fun (V3, V4) -> ((((V4('erased'))('erased'))(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--weakenNVar'(V0, V1) -> ('case--weakenNVar-7072'(V1, V0, ('un--sizedView'(V0)))).
'un--weaken'(V0, V1) -> case V0 of {'Idris.Core.TT.dn--un--__mkWeaken', E0, E1} -> (fun (V2, V3) -> (((V2('erased'))('erased'))(V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--varIdx'(V0) -> V0.
'un--varExtend'(V0) -> ('Idris.Idris2.Builtin':'un--believe_me'(V0)).
'un--varEmbedSub'(V0, V1) -> case V0 of {'Idris.Core.TT.SubRefl'} -> (fun () -> V1 end()); {'Idris.Core.TT.DropCons', E0} -> (fun (V2) -> (1 + ('un--varEmbedSub'(V2, V1))) end(E0)); {'Idris.Core.TT.KeepCons', E1} -> (fun (V3) -> case V1 of 0 -> 0; _ -> begin (V4 = (V1 - 1)), (1 + ('un--varEmbedSub'(V3, V4))) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unchecked'() -> {'Idris.Core.TT.MkTotality', {'Idris.Core.TT.Unchecked'}, {'Idris.Core.TT.IsCovering'}}.
'un--trimNS'(V0, V1, V2) -> case V0 of {'Idris.Core.TT.dn--un--__mkStripNamespace', E0, E1} -> (fun (V3, V4) -> ((V3(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substName'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V0, V5)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Ref', V3, V4, V5} end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V6) -> case V6 of 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> {'Idris.Core.TT.Meta', V7, V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('un--substName'(V0, V1, V11)) end, V10))} end(E4, E5, E6, E7)); {'Idris.Core.TT.Bind', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> {'Idris.Core.TT.Bind', V12, V13, ('dn--un--map_Functor_Binder'(fun (V16) -> ('un--substName'(V0, V1, V16)) end, V14)), ('un--substName'(V0, ('dn--un--weaken_Weaken_Term'(V1)), V15))} end(E8, E9, E10, E11)); {'Idris.Core.TT.App', E12, E13, E14} -> (fun (V17, V18, V19) -> {'Idris.Core.TT.App', V17, ('un--substName'(V0, V1, V18)), ('un--substName'(V0, V1, V19))} end(E12, E13, E14)); {'Idris.Core.TT.As', E15, E16, E17, E18} -> (fun (V20, V21, V22, V23) -> {'Idris.Core.TT.As', V20, V21, V22, ('un--substName'(V0, V1, V23))} end(E15, E16, E17, E18)); {'Idris.Core.TT.TDelayed', E19, E20, E21} -> (fun (V24, V25, V26) -> {'Idris.Core.TT.TDelayed', V24, V25, ('un--substName'(V0, V1, V26))} end(E19, E20, E21)); {'Idris.Core.TT.TDelay', E22, E23, E24, E25} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.TT.TDelay', V27, V28, ('un--substName'(V0, V1, V29)), ('un--substName'(V0, V1, V30))} end(E22, E23, E24, E25)); {'Idris.Core.TT.TForce', E26, E27, E28} -> (fun (V31, V32, V33) -> {'Idris.Core.TT.TForce', V31, V32, ('un--substName'(V0, V1, V33))} end(E26, E27, E28)); _ -> V2 end.
'un--subInclude'(V0, V1) -> case V1 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Core.TT.SubRefl'} end()); {'Idris.Core.TT.DropCons', E0} -> (fun (V2) -> {'Idris.Core.TT.DropCons', ('un--subInclude'(V0, V2))} end(E0)); {'Idris.Core.TT.KeepCons', E1} -> (fun (V3) -> {'Idris.Core.TT.KeepCons', ('un--subInclude'(V0, V3))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--subExtend'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Core.TT.KeepCons', ('un--subExtend'(V3, V1))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--subElem'(V0, V1) -> case V1 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Prelude.Types.Just', V0} end()); _ -> case V0 of 0 -> case V1 of {'Idris.Core.TT.DropCons', E2} -> (fun (V2) -> {'Idris.Prelude.Types.Nothing'} end(E2)); {'Idris.Core.TT.KeepCons', E3} -> (fun (V3) -> {'Idris.Prelude.Types.Just', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Idris.Core.TT.DropCons', E0} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--subElem'(V4, V5)), fun (V6) -> {'Idris.Prelude.Types.Just', V6} end)) end(E0)); {'Idris.Core.TT.KeepCons', E1} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--subElem'(V4, V7)), fun (V8) -> {'Idris.Prelude.Types.Just', (1 + V8)} end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--sizedView'(V0) -> case V0 of 0 -> {'Idris.Core.TT.SizedView.Z'}; _ -> begin (V1 = (V0 - 1)), {'Idris.Core.TT.SizedView.S', V1} end end.
'un--shrinkVar'(V0, V1) -> ('un--subElem'(V0, V1)).
'un--shrinkTerm'(V0, V1) -> case V0 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end, fun (V9) -> {'Idris.Core.TT.Local', V2, V3, V9} end, ('un--subElem'(V4, V1)))) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V10, V11, V12) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Ref', V10, V11, V12}} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V19, V20)) end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V25, V26)) end end end end}, fun (V27) -> ('un--shrinkTerm'(V27, V1)) end, V16)), fun (V28) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Meta', V13, V14, V15, V28}} end)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V29, V30, V31, V32) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkBinder'(V31, V1)), fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V32, {'Idris.Core.TT.KeepCons', V1})), fun (V34) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bind', V29, V30, V33, V34}} end)) end)) end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V35, V36, V37) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V36, V1)), fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V37, V1)), fun (V39) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.App', V35, V38, V39}} end)) end)) end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V40, V41, V42, V43) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V42, V1)), fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V43, V1)), fun (V45) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.As', V40, V41, V44, V45}} end)) end)) end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V46, V47, V48) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V48, V1)), fun (V49) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TDelayed', V46, V47, V49}} end)) end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V50, V51, V52, V53) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V52, V1)), fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V53, V1)), fun (V55) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TDelay', V50, V51, V54, V55}} end)) end)) end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V56, V57, V58) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V58, V1)), fun (V59) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TForce', V56, V57, V59}} end)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V60, V61) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PrimVal', V60, V61}} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V62, V63) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Erased', V62, V63}} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V64) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TType', V64}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shrinkPi'(V0, V1) -> case V0 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Explicit'})) end()); {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Implicit'})) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.AutoImplicit'})) end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V2, V1)), fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.DefImplicit', V3})) end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shrinkBinder'(V0, V1) -> case V0 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkPi'(V4, V1)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V5, V1)), fun (V7) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Lam', V2, V3, V6, V7}} end)) end)) end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V10, V1)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V11, V1)), fun (V13) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Let', V8, V9, V12, V13}} end)) end)) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkPi'(V16, V1)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V17, V1)), fun (V19) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Pi', V14, V15, V18, V19}} end)) end)) end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkPi'(V22, V1)), fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V23, V1)), fun (V25) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PVar', V20, V21, V24, V25}} end)) end)) end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V26, V27, V28, V29) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V28, V1)), fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V29, V1)), fun (V31) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PLet', V26, V27, V30, V31}} end)) end)) end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V32, V33, V34) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkTerm'(V34, V1)), fun (V35) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PVTy', V32, V33, V35}} end)) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setType'(V0, V1) -> case V0 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.TT.Lam', V2, V3, V4, V1} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Let', V6, V7, V8, V1} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> {'Idris.Core.TT.Pi', V10, V11, V12, V1} end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> {'Idris.Core.TT.PVar', V14, V15, V16, V1} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.PLet', V18, V19, V20, V1} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V22, V23, V24) -> {'Idris.Core.TT.PVTy', V22, V23, V1} end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setMultiplicity'(V0, V1) -> case V0 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.TT.Lam', V2, V1, V4, V5} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Let', V6, V1, V8, V9} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> {'Idris.Core.TT.Pi', V10, V1, V12, V13} end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> {'Idris.Core.TT.PVar', V14, V1, V16, V17} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.PLet', V18, V1, V20, V21} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V22, V23, V24) -> {'Idris.Core.TT.PVTy', V22, V1, V24} end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sameVar'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V1)).
'un--restoreNS'(V0, V1, V2) -> case V0 of {'Idris.Core.TT.dn--un--__mkStripNamespace', E0, E1} -> (fun (V3, V4) -> ((V4(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolveRef'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.TT.Bounds.None'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.TT.Bounds.Add', E0, E1, E2} -> (fun (V5, V6, V7) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V6)) of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V3, {'Idris.Prelude.Types.Nothing'}, ('un--weakenNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(V0, V1)), 0))}}; 0 -> ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V1)), V7, V3, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolveNames'(V0, V1) -> case V1 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V2, V3, V4) -> case V3 of {'Idris.Core.TT.Bound'} -> (fun () -> case ('un--isNVar'(V4, V0)) of {'Idris.Prelude.Types.Just', E3} -> (fun (V5) -> {'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', 0}, V5} end(E3)); _ -> {'Idris.Core.TT.Ref', V2, {'Idris.Core.TT.Bound'}, V4} end end()); _ -> V1 end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Meta', V6, V7, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--resolveNames'(V0, V10)) end, V9))} end(E4, E5, E6, E7)); {'Idris.Core.TT.Bind', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> {'Idris.Core.TT.Bind', V11, V12, ('dn--un--map_Functor_Binder'(fun (V15) -> ('un--resolveNames'(V0, V15)) end, V13)), ('un--resolveNames'([V12 | V0], V14))} end(E8, E9, E10, E11)); {'Idris.Core.TT.App', E12, E13, E14} -> (fun (V16, V17, V18) -> {'Idris.Core.TT.App', V16, ('un--resolveNames'(V0, V17)), ('un--resolveNames'(V0, V18))} end(E12, E13, E14)); {'Idris.Core.TT.As', E15, E16, E17, E18} -> (fun (V19, V20, V21, V22) -> {'Idris.Core.TT.As', V19, V20, ('un--resolveNames'(V0, V21)), ('un--resolveNames'(V0, V22))} end(E15, E16, E17, E18)); {'Idris.Core.TT.TDelayed', E19, E20, E21} -> (fun (V23, V24, V25) -> {'Idris.Core.TT.TDelayed', V23, V24, ('un--resolveNames'(V0, V25))} end(E19, E20, E21)); {'Idris.Core.TT.TDelay', E22, E23, E24, E25} -> (fun (V26, V27, V28, V29) -> {'Idris.Core.TT.TDelay', V26, V27, ('un--resolveNames'(V0, V28)), ('un--resolveNames'(V0, V29))} end(E22, E23, E24, E25)); {'Idris.Core.TT.TForce', E26, E27, E28} -> (fun (V30, V31, V32) -> {'Idris.Core.TT.TForce', V30, V31, ('un--resolveNames'(V0, V32))} end(E26, E27, E28)); _ -> V1 end.
'un--renameVars'(V0, V1) -> ('Idris.Idris2.Builtin':'un--believe_me'(V1)).
'un--renameTop'(V0, V1) -> ('un--renameVars'((1 + 0), V1)).
'un--refsToLocals'(V0, V1) -> case V0 of {'Idris.Core.TT.Bounds.None'} -> (fun () -> V1 end()); _ -> ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)) end.
'un--refToLocal'(V0, V1, V2) -> ('un--refsToLocals'({'Idris.Core.TT.Bounds.Add', V1, V0, {'Idris.Core.TT.Bounds.None'}}, V2)).
'un--precision'(V0) -> case V0 of {'Idris.Core.TT.Signed', E0} -> (fun (V1) -> V1 end(E0)); {'Idris.Core.TT.Unsigned', E1} -> (fun (V2) -> {'Idris.Core.TT.P', V2} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--piInfo'(V0) -> case V0 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V3 end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> {'Idris.Core.TT.Explicit'} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> V11 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> V15 end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V17, V18, V19, V20) -> {'Idris.Core.TT.Explicit'} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V21, V22, V23) -> {'Idris.Core.TT.Explicit'} end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--notCovering'() -> {'Idris.Core.TT.MkTotality', {'Idris.Core.TT.Unchecked'}, {'Idris.Core.TT.MissingCases', []}}.
'un--nameAt'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> V2; _ -> begin (V4 = (V1 - 1)), ('un--nameAt'(V3, V4)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--multiplicity'(V0) -> case V0 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V2 end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V6 end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> V10 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> V14 end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V17, V18, V19, V20) -> V18 end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V21, V22, V23) -> V22 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkVar'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> (1 + ('un--mkVar'(V2))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkLocals'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Core.TT.Local', V3, V4, ('un--addVars'(V0, V1, V5))} end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.TT.Bound'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Bound'}, V8} end, fun () -> fun (V9) -> V9 end end, ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V1, V6, V8)))) end()); _ -> {'Idris.Core.TT.Ref', V6, V7, V8} end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.TT.Meta', V10, V11, V12, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('un--mkLocals'(V0, V1, V14)) end, V13))} end, fun () -> fun (V15) -> V15 end end, ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V1, V10, V11)))) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V16, V17, V18, V19) -> {'Idris.Core.TT.Bind', V16, V17, ('dn--un--map_Functor_Binder'(fun (V20) -> ('un--mkLocals'(V0, V1, V20)) end, V18)), ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V19))} end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V21, V22, V23) -> {'Idris.Core.TT.App', V21, ('un--mkLocals'(V0, V1, V22)), ('un--mkLocals'(V0, V1, V23))} end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V24, V25, V26, V27) -> {'Idris.Core.TT.As', V24, V25, ('un--mkLocals'(V0, V1, V26)), ('un--mkLocals'(V0, V1, V27))} end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V28, V29, V30) -> {'Idris.Core.TT.TDelayed', V28, V29, ('un--mkLocals'(V0, V1, V30))} end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V31, V32, V33, V34) -> {'Idris.Core.TT.TDelay', V31, V32, ('un--mkLocals'(V0, V1, V33)), ('un--mkLocals'(V0, V1, V34))} end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V35, V36, V37) -> {'Idris.Core.TT.TForce', V35, V36, ('un--mkLocals'(V0, V1, V37))} end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V38, V39) -> {'Idris.Core.TT.PrimVal', V38, V39} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V40, V41) -> {'Idris.Core.TT.Erased', V40, V41} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V42) -> {'Idris.Core.TT.TType', V42} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--linFnType'(V0, V1, V2, V3) -> {'Idris.Core.TT.Bind', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}, {'Idris.Core.TT.Pi', V1, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Core.TT.Explicit'}, V2}, ('dn--un--weaken_Weaken_Term'(V3))}.
'un--isVar'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--isNVar'(V0, V1)), fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V2)) end)).
'un--isTotal'() -> {'Idris.Core.TT.MkTotality', {'Idris.Core.TT.Unchecked'}, {'Idris.Core.TT.IsCovering'}}.
'un--isPrimType'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> 0 end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> 0 end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> 0 end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> 0 end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> 0 end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> 0 end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V7) -> 0 end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V8) -> 0 end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V9) -> 0 end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V10) -> 0 end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V11) -> 0 end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V12) -> 0 end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V13) -> 0 end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> 0 end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.IntType'} -> (fun () -> 1 end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> 1 end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> 1 end()); {'Idris.Core.TT.StringType'} -> (fun () -> 1 end()); {'Idris.Core.TT.CharType'} -> (fun () -> 1 end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> 1 end()); {'Idris.Core.TT.WorldType'} -> (fun () -> 1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isNVar'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V0, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V4) -> ('Idris.Idris2.Core.TT.NVar':'un--later'(V4)) end, ('un--isNVar'(V0, V3)))) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> case V5 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isLet'(V0) -> case V0 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> 1 end(E0, E1, E2, E3)); _ -> 0 end.
'un--isImplicit'(V0) -> case V0 of {'Idris.Core.TT.Pi', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.Explicit'} -> (fun () -> 0 end()); _ -> 1 end end(E0, E1, E2, E3)); {'Idris.Core.TT.Lam', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> 0 end()); _ -> 1 end end(E4, E5, E6, E7)); _ -> 0 end.
'un--isErased'(V0) -> case V0 of {'Idris.Core.TT.Erased', E0, E1} -> (fun (V1, V2) -> 1 end(E0, E1)); _ -> 0 end.
'un--isConstantType'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> case V1 of {'Idris.Core.Name.Basic', E1} -> (fun (V2) -> case V2 of <<"Int"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.IntType'}}; <<"Int8"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Int8Type'}}; <<"Int16"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Int16Type'}}; <<"Int32"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Int32Type'}}; <<"Int64"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Int64Type'}}; <<"Integer"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.IntegerType'}}; <<"Bits8"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bits8Type'}}; <<"Bits16"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bits16Type'}}; <<"Bits32"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bits32Type'}}; <<"Bits64"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bits64Type'}}; <<"String"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.StringType'}}; <<"Char"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.CharType'}}; <<"Double"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.DoubleType'}}; <<"%World"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.WorldType'}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--isCon'(V0) -> case V0 of {'Idris.Core.TT.DataCon', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}} end(E0, E1)); {'Idris.Core.TT.TyCon', E2, E3} -> (fun (V3, V4) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V4}} end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--intKind'(V0) -> case V0 of {'Idris.Core.TT.IntegerType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Signed', {'Idris.Core.TT.Unlimited'}}} end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Signed', {'Idris.Core.TT.P', 8}}} end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Signed', {'Idris.Core.TT.P', 16}}} end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Signed', {'Idris.Core.TT.P', 32}}} end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Signed', {'Idris.Core.TT.P', 64}}} end()); {'Idris.Core.TT.IntType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Signed', {'Idris.Core.TT.P', 64}}} end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Unsigned', 8}} end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Unsigned', 16}} end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Unsigned', 32}} end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Unsigned', 64}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--insertVarNames'(V0, V1, V2) -> ('un--insertNVarNames'(V0, V1, V2)).
'un--insertVar'(V0, V1) -> ('un--insertNVar'(V0, V1)).
'un--insertNames'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Core.TT.Local', V3, V4, ('un--insertNVarNames'(V0, V1, V5))} end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V6, V7, V8) -> {'Idris.Core.TT.Ref', V6, V7, V8} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> {'Idris.Core.TT.Meta', V9, V10, V11, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('un--insertNames'(V0, V1, V13)) end, V12))} end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V14, V15, V16, V17) -> {'Idris.Core.TT.Bind', V14, V15, ('dn--un--map_Functor_Binder'(fun (V18) -> ('un--insertNames'(V0, V1, V18)) end, V16)), ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V17))} end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V19, V20, V21) -> {'Idris.Core.TT.App', V19, ('un--insertNames'(V0, V1, V20)), ('un--insertNames'(V0, V1, V21))} end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V22, V23, V24, V25) -> {'Idris.Core.TT.As', V22, V23, ('un--insertNames'(V0, V1, V24)), ('un--insertNames'(V0, V1, V25))} end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V26, V27, V28) -> {'Idris.Core.TT.TDelayed', V26, V27, ('un--insertNames'(V0, V1, V28))} end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V29, V30, V31, V32) -> {'Idris.Core.TT.TDelay', V29, V30, ('un--insertNames'(V0, V1, V31)), ('un--insertNames'(V0, V1, V32))} end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V33, V34, V35) -> {'Idris.Core.TT.TForce', V33, V34, ('un--insertNames'(V0, V1, V35))} end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V36, V37) -> {'Idris.Core.TT.PrimVal', V36, V37} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V38, V39) -> {'Idris.Core.TT.Erased', V38, V39} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V40) -> {'Idris.Core.TT.TType', V40} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertNVarNames'(V0, V1, V2) -> ('case--insertNVarNames-7359'(V2, V1, V0, ('un--sizedView'(V0)))).
'un--insertNVar'(V0, V1) -> ('case--insertNVar-7126'(V1, V0, ('un--sizedView'(V0)))).
'un--getRefs'(V0, V1) -> ('un--addRefs'(0, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V1)).
'un--getMetas'(V0) -> ('un--addMetas'(('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V0)).
'un--getLoc'(V0) -> case V0 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V4, V5, V6) -> V4 end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> V7 end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V11, V12, V13, V14) -> V11 end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V15, V16, V17) -> V15 end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V18, V19, V20, V21) -> V18 end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V22, V23, V24) -> V22 end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V25, V26, V27, V28) -> V25 end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V29, V30, V31) -> V29 end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V32, V33) -> V32 end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V34, V35) -> V34 end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V36) -> V36 end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getFnArgs'(V0) -> ('nested--12308-8014--in--un--getFA'(V0, [], V0)).
'un--getFn'(V0) -> case V0 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V1, V2, V3) -> ('un--getFn'(V2)) end(E0, E1, E2)); _ -> V0 end.
'un--getArgs'(V0) -> ('Idris.Idris2.Builtin':'un--snd'(('un--getFnArgs'(V0)))).
'un--forgetDef'(V0) -> case V0 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Core.TT.Explicit'} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Core.TT.Implicit'} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Core.TT.AutoImplicit'} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V1) -> {'Idris.Core.TT.Implicit'} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fnType'(V0, V1, V2, V3) -> {'Idris.Core.TT.Bind', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}, {'Idris.Core.TT.Pi', V1, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V2}, ('dn--un--weaken_Weaken_Term'(V3))}.
'un--eqTerm'(V0, V1) -> case V0 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.TT.Local', E3, E4, E5} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V4, V7)) end(E3, E4, E5)); _ -> 0 end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E6, E7, E8} -> (fun (V8, V9, V10) -> case V1 of {'Idris.Core.TT.Ref', E9, E10, E11} -> (fun (V11, V12, V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V13)) end(E9, E10, E11)); _ -> 0 end end(E6, E7, E8)); {'Idris.Core.TT.Meta', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> case V1 of {'Idris.Core.TT.Meta', E16, E17, E18, E19} -> (fun (V18, V19, V20, V21) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V20)) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V33)) end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V37, V38, V39, V40)) end end end end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V42)) end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V45, V46, V47)) end end end end end}, fun (V48) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V49) -> fun (V50) -> ('un--eqTerm'(V49, V50)) end end, V48)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V17, V21)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18, E19)); _ -> 0 end end(E12, E13, E14, E15)); {'Idris.Core.TT.Bind', E20, E21, E22, E23} -> (fun (V51, V52, V53, V54) -> case V1 of {'Idris.Core.TT.Bind', E24, E25, E26, E27} -> (fun (V55, V56, V57, V58) -> case ('un--eqBinderBy'(fun (V59) -> fun (V60) -> ('un--eqTerm'(V59, V60)) end end, V53, V57)) of 1 -> ('un--eqTerm'(V54, V58)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27)); _ -> 0 end end(E20, E21, E22, E23)); {'Idris.Core.TT.App', E28, E29, E30} -> (fun (V61, V62, V63) -> case V1 of {'Idris.Core.TT.App', E31, E32, E33} -> (fun (V64, V65, V66) -> case ('un--eqTerm'(V62, V65)) of 1 -> ('un--eqTerm'(V63, V66)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33)); _ -> 0 end end(E28, E29, E30)); {'Idris.Core.TT.As', E34, E35, E36, E37} -> (fun (V67, V68, V69, V70) -> case V1 of {'Idris.Core.TT.As', E38, E39, E40, E41} -> (fun (V71, V72, V73, V74) -> case ('un--eqTerm'(V69, V73)) of 1 -> ('un--eqTerm'(V70, V74)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39, E40, E41)); _ -> 0 end end(E34, E35, E36, E37)); {'Idris.Core.TT.TDelayed', E42, E43, E44} -> (fun (V75, V76, V77) -> case V1 of {'Idris.Core.TT.TDelayed', E45, E46, E47} -> (fun (V78, V79, V80) -> ('un--eqTerm'(V77, V80)) end(E45, E46, E47)); _ -> 0 end end(E42, E43, E44)); {'Idris.Core.TT.TDelay', E48, E49, E50, E51} -> (fun (V81, V82, V83, V84) -> case V1 of {'Idris.Core.TT.TDelay', E52, E53, E54, E55} -> (fun (V85, V86, V87, V88) -> case ('un--eqTerm'(V83, V87)) of 1 -> ('un--eqTerm'(V84, V88)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53, E54, E55)); _ -> 0 end end(E48, E49, E50, E51)); {'Idris.Core.TT.TForce', E56, E57, E58} -> (fun (V89, V90, V91) -> case V1 of {'Idris.Core.TT.TForce', E59, E60, E61} -> (fun (V92, V93, V94) -> ('un--eqTerm'(V91, V94)) end(E59, E60, E61)); _ -> 0 end end(E56, E57, E58)); {'Idris.Core.TT.PrimVal', E62, E63} -> (fun (V95, V96) -> case V1 of {'Idris.Core.TT.PrimVal', E64, E65} -> (fun (V97, V98) -> ('dn--un--==_Eq_Constant'(V96, V98)) end(E64, E65)); _ -> 0 end end(E62, E63)); {'Idris.Core.TT.Erased', E66, E67} -> (fun (V99, V100) -> case V1 of {'Idris.Core.TT.Erased', E68, E69} -> (fun (V101, V102) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V100, V102)) end(E68, E69)); _ -> 0 end end(E66, E67)); {'Idris.Core.TT.TType', E70} -> (fun (V103) -> case V1 of {'Idris.Core.TT.TType', E71} -> (fun (V104) -> 1 end(E71)); _ -> 0 end end(E70)); _ -> 0 end.
'un--eqPiInfoBy'(V0, V1, V2) -> ('nested--6627-2761--in--un--go'(V0, V1, V2)).
'un--eqBinderBy'(V0, V1, V2) -> ('nested--9313-5315--in--un--go'(V0, V1, V2)).
'un--embedSub'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Core.TT.Local', V2, V3, ('un--varEmbedSub'(V0, V4))} end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V5, V6, V7) -> {'Idris.Core.TT.Ref', V5, V6, V7} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> {'Idris.Core.TT.Meta', V8, V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--embedSub'(V0, V12)) end, V11))} end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V13, V14, V15, V16) -> {'Idris.Core.TT.Bind', V13, V14, ('dn--un--map_Functor_Binder'(fun (V17) -> ('un--embedSub'(V0, V17)) end, V15)), ('un--embedSub'({'Idris.Core.TT.KeepCons', V0}, V16))} end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V18, V19, V20) -> {'Idris.Core.TT.App', V18, ('un--embedSub'(V0, V19)), ('un--embedSub'(V0, V20))} end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.TT.As', V21, V22, ('un--embedSub'(V0, V23)), ('un--embedSub'(V0, V24))} end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V25, V26, V27) -> {'Idris.Core.TT.TDelayed', V25, V26, ('un--embedSub'(V0, V27))} end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V28, V29, V30, V31) -> {'Idris.Core.TT.TDelay', V28, V29, ('un--embedSub'(V0, V30)), ('un--embedSub'(V0, V31))} end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V32, V33, V34) -> {'Idris.Core.TT.TForce', V32, V33, ('un--embedSub'(V0, V34))} end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V35, V36) -> {'Idris.Core.TT.PrimVal', V35, V36} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V37, V38) -> {'Idris.Core.TT.Erased', V37, V38} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V39) -> {'Idris.Core.TT.TType', V39} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--embed'(V0) -> ('Idris.Idris2.Builtin':'un--believe_me'(V0)).
'un--dropVar'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> V3; _ -> begin (V4 = (V1 - 1)), [V2 | ('un--dropVar'(V3, V4))] end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropLater'(V0) -> case V0 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V1 = (V0 - 1)), V1 end end.
'un--dropFirst'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of 0 -> ('un--dropFirst'(V2)); _ -> begin (V3 = (V1 - 1)), [V3 | ('un--dropFirst'(V2))] end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--defaultKindedName'(V0) -> {'Idris.Core.TT.MkKindedName', {'Idris.Prelude.Types.Nothing'}, V0, V0}.
'un--constantEq'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V2, V3)) of {'Idris.Prelude.Types.Yes', E2} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.No', E3} -> (fun (V5) -> {'Idris.Prelude.Types.Nothing'} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I8', E5} -> (fun (V7) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Integer'(V6, V7)) of {'Idris.Prelude.Types.Yes', E6} -> (fun (V8) -> case V8 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.No', E7} -> (fun (V9) -> {'Idris.Prelude.Types.Nothing'} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I16', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I16', E9} -> (fun (V11) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Integer'(V10, V11)) of {'Idris.Prelude.Types.Yes', E10} -> (fun (V12) -> case V12 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Prelude.Types.No', E11} -> (fun (V13) -> {'Idris.Prelude.Types.Nothing'} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.I32', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.I32', E13} -> (fun (V15) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Integer'(V14, V15)) of {'Idris.Prelude.Types.Yes', E14} -> (fun (V16) -> case V16 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); {'Idris.Prelude.Types.No', E15} -> (fun (V17) -> {'Idris.Prelude.Types.Nothing'} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.I64', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.I64', E17} -> (fun (V19) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Integer'(V18, V19)) of {'Idris.Prelude.Types.Yes', E18} -> (fun (V20) -> case V20 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); {'Idris.Prelude.Types.No', E19} -> (fun (V21) -> {'Idris.Prelude.Types.Nothing'} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.BI', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.BI', E21} -> (fun (V23) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Integer'(V22, V23)) of {'Idris.Prelude.Types.Yes', E22} -> (fun (V24) -> case V24 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22)); {'Idris.Prelude.Types.No', E23} -> (fun (V25) -> {'Idris.Prelude.Types.Nothing'} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Str', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Str', E25} -> (fun (V27) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'(V26, V27)) of {'Idris.Prelude.Types.Yes', E26} -> (fun (V28) -> case V28 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26)); {'Idris.Prelude.Types.No', E27} -> (fun (V29) -> {'Idris.Prelude.Types.Nothing'} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); {'Idris.Core.TT.Ch', E28} -> (fun (V30) -> case V1 of {'Idris.Core.TT.Ch', E29} -> (fun (V31) -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Char'(V30, V31)) of {'Idris.Prelude.Types.Yes', E30} -> (fun (V32) -> case V32 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); {'Idris.Prelude.Types.No', E31} -> (fun (V33) -> {'Idris.Prelude.Types.Nothing'} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E28)); {'Idris.Core.TT.Db', E32} -> (fun (V34) -> case V1 of {'Idris.Core.TT.Db', E33} -> (fun (V35) -> {'Idris.Prelude.Types.Nothing'} end(E33)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E32)); {'Idris.Core.TT.WorldVal'} -> (fun () -> case V1 of {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V1 of {'Idris.Core.TT.IntType'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int8Type'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int16Type'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int32Type'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> case V1 of {'Idris.Core.TT.Int64Type'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V1 of {'Idris.Core.TT.IntegerType'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Core.TT.StringType'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.CharType'} -> (fun () -> case V1 of {'Idris.Core.TT.CharType'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleType'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.WorldType'} -> (fun () -> case V1 of {'Idris.Core.TT.WorldType'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--constTag'(V0) -> case V0 of {'Idris.Core.TT.IntType'} -> (fun () -> 3 end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> 4 end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> 5 end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> 6 end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> 7 end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> 8 end()); {'Idris.Core.TT.StringType'} -> (fun () -> 9 end()); {'Idris.Core.TT.CharType'} -> (fun () -> 10 end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> 11 end()); {'Idris.Core.TT.WorldType'} -> (fun () -> 12 end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> 13 end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> 14 end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> 15 end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> 16 end()); _ -> 0 end.
'un--compatible'(V0, V1) -> case V0 of 2 -> 1; _ -> case V1 of 2 -> 1; _ -> ('dn--un--==_Eq_LazyReason'(V0, V1)) end end.
'un--binderType'(V0) -> case V0 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V4 end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V8 end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> V12 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> V16 end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V17, V18, V19, V20) -> V20 end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V21, V22, V23) -> V23 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--binderLoc'(V0) -> case V0 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V5 end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> V9 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> V13 end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V17, V18, V19, V20) -> V17 end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V21, V22, V23) -> V21 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--areVarsCompatible'(V0, V1) -> case V0 of [] -> case V1 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(0)); _ -> {'Idris.Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--areVarsCompatible'(V3, V5)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'((1 + V6))) end)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--applyWithFC'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> ('un--applyWithFC'({'Idris.Core.TT.App', V4, V0, V5}, V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--apply'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('un--apply'(V0, {'Idris.Core.TT.App', V0, V1, V3}, V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addVars'(V0, V1, V2) -> ('un--insertNVarNames'(V0, ('Idris.Idris2.Core.TT.Bounds':'un--sizeOf'(V1)), V2)).
'un--addRefs'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> V2 end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V7, V8, V9) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V9, V0, V2)) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V10, V11, V12, V13) -> ('nested--15159-10519--in--un--addRefsArgs'(V13, V12, V11, V10, V2, V1, V0, V2, V13)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V18, V19, V20, V21) -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V20)), V21)), V17)) end(E14, E15, E16, E17)); _ -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, ('un--binderType'(V16)))), V17)) end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E18, E19, E20} -> (fun (V22, V23, V24) -> case V23 of {'Idris.Core.TT.App', E21, E22, E23} -> (fun (V25, V26, V27) -> case V26 of {'Idris.Core.TT.Ref', E24, E25, E26} -> (fun (V28, V29, V30) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V30, V1)) of 1 -> ('un--addRefs'(1, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V30, 1, V2)), V24)); 0 -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V30, V0, V2)), V27)), V24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V23)), V24)) end end(E21, E22, E23)); _ -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V23)), V24)) end end(E18, E19, E20)); {'Idris.Core.TT.As', E27, E28, E29, E30} -> (fun (V31, V32, V33, V34) -> ('un--addRefs'(V0, V1, V2, V34)) end(E27, E28, E29, E30)); {'Idris.Core.TT.TDelayed', E31, E32, E33} -> (fun (V35, V36, V37) -> ('un--addRefs'(V0, V1, V2, V37)) end(E31, E32, E33)); {'Idris.Core.TT.TDelay', E34, E35, E36, E37} -> (fun (V38, V39, V40, V41) -> ('un--addRefs'(V0, V1, ('un--addRefs'(V0, V1, V2, V40)), V41)) end(E34, E35, E36, E37)); {'Idris.Core.TT.TForce', E38, E39, E40} -> (fun (V42, V43, V44) -> ('un--addRefs'(V0, V1, V2, V44)) end(E38, E39, E40)); {'Idris.Core.TT.PrimVal', E41, E42} -> (fun (V45, V46) -> V2 end(E41, E42)); {'Idris.Core.TT.Erased', E43, E44} -> (fun (V47, V48) -> V2 end(E43, E44)); {'Idris.Core.TT.TType', E45} -> (fun (V49) -> V2 end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addMetas'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> V0 end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V5, V6, V7) -> V0 end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('nested--15043-10425--in--un--addMetaArgs'(V11, V10, V9, V8, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V9, 0, V0)), V11)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V16, V17, V18, V19) -> ('un--addMetas'(('un--addMetas'(('un--addMetas'(V0, V18)), V19)), V15)) end(E14, E15, E16, E17)); _ -> ('un--addMetas'(('un--addMetas'(V0, ('un--binderType'(V14)))), V15)) end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E18, E19, E20} -> (fun (V20, V21, V22) -> ('un--addMetas'(('un--addMetas'(V0, V21)), V22)) end(E18, E19, E20)); {'Idris.Core.TT.As', E21, E22, E23, E24} -> (fun (V23, V24, V25, V26) -> ('un--addMetas'(V0, V26)) end(E21, E22, E23, E24)); {'Idris.Core.TT.TDelayed', E25, E26, E27} -> (fun (V27, V28, V29) -> ('un--addMetas'(V0, V29)) end(E25, E26, E27)); {'Idris.Core.TT.TDelay', E28, E29, E30, E31} -> (fun (V30, V31, V32, V33) -> ('un--addMetas'(('un--addMetas'(V0, V32)), V33)) end(E28, E29, E30, E31)); {'Idris.Core.TT.TForce', E32, E33, E34} -> (fun (V34, V35, V36) -> ('un--addMetas'(V0, V36)) end(E32, E33, E34)); {'Idris.Core.TT.PrimVal', E35, E36} -> (fun (V37, V38) -> V0 end(E35, E36)); {'Idris.Core.TT.Erased', E37, E38} -> (fun (V39, V40) -> V0 end(E37, E38)); {'Idris.Core.TT.TType', E39} -> (fun (V41) -> V0 end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ClosedTerm'() -> {'Idris.Core.TT.Term', []}.
