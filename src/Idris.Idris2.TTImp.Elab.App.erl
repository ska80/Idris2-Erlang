-module('Idris.Idris2.TTImp.Elab.App').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--checkAppWith\x{27}-8240'/24,
  'case--case block in case block in checkAppWith-10537'/25,
  'case--case block in checkAppWith-10483'/21,
  'case--case block in checkAppWith\x{27}-10093'/36,
  'case--with block in checkAppWith\x{27}-8277'/24,
  'case--case block in case block in case block in case block in checkRestApp,checkRtoL-6688'/48,
  'case--getVarType-3146'/10,
  'case--getNameType-2623'/10,
  'nested--9110-3075--in--un--useVars'/12,
  'nested--18226-10924--in--un--updateElabInfo'/21,
  'nested--8596-2596--in--un--rigSafe'/11,
  'nested--18226-10923--in--un--normalisePrims'/21,
  'nested--9612-3999--in--un--metavarImp'/24,
  'nested--9600-3751--in--un--metavarImp'/23,
  'nested--9649-5299--in--un--invalidArg'/24,
  'nested--9645-4585--in--un--dotTerm'/9,
  'nested--9645-4584--in--un--countConstructors'/10,
  'nested--9649-5300--in--un--checkRtoL'/26,
  'nested--9649-5301--in--un--checkLtoR'/26,
  'nested--18302-10933--in--un--boundSafe'/22,
  'un--onLHS'/1,
  'un--needsDelayLHS'/2,
  'un--needsDelayExpr'/3,
  'un--needsDelay'/4,
  'un--makeImplicit'/22,
  'un--makeDefImplicit'/23,
  'un--makeAutoImplicit'/22,
  'un--isImplicitAs'/1,
  'un--isHole'/1,
  'un--isBindAllExpPattern'/1,
  'un--getVarType'/9,
  'un--getNameType'/8,
  'un--findNamed'/2,
  'un--findBindAllExpPattern'/1,
  'un--dotErased'/9,
  'un--checkVisibleNS'/5,
  'un--checkValidPattern'/11,
  'un--checkRestApp'/23,
  'un--checkAppWith\x{27}'/18,
  'un--checkAppWith'/19,
  'un--checkApp'/15
]).
'with--checkAppWith\x{27}-8240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V25, V26) -> case V25 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V27, V28) -> begin (V29 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V6))), fun (V30) -> ('un--checkRestApp'(V3, V23, V22, V21, V20, V19, V29, V18, V17, V16, V15, V14, V0, V5, V7, V13, V28, [], V12, V26, V11, V10, V30)) end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--with block in checkAppWith\x{27}-8277'(V4, V23, V22, V21, V3, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V1, V0, ('un--findBindAllExpPattern'(V1)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkAppWith-10537'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> fun (V26) -> case V25 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V27, V28) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V28, ('Idris.Idris2.Prelude.Types.List':'un--length'(V23)))) of 1 -> {'Idris.Prelude.Types.Right', V18}; 0 -> ('Idris.Idris2.TTImp.Elab.Dot':'un--registerDot'(V0, V17, V16, V15, V14, V13, V10, V9, 6, ('Idris.Idris2.Builtin':'un--fst'(V18)), ('Idris.Idris2.Builtin':'un--snd'(V18)), V26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> {'Idris.Prelude.Types.Right', V18} end end end(E0)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', V18} end end.
'case--case block in checkAppWith-10483'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> case V21 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V23, V24, V25) -> ('case--case block in case block in checkAppWith-10537'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, V25, V24, V22, ('Idris.Idris2.Core.TT':'un--isCon'(V24)))) end(E2, E3, E4)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', V18} end end end(E0, E1)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', V18} end end.
'case--case block in checkAppWith\x{27}-10093'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V34 of [] -> {'Idris.Prelude.Types.Right', V32}; _ -> begin (V36 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V31))(V35))), case V36 of {'Idris.Prelude.Types.Left', E0} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V38) -> begin (V39 = (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V4, V17, V19, V11, V15, V12, ('Idris.Idris2.Builtin':'un--fst'(V32)), V38, V34))(V35))), case V39 of {'Idris.Prelude.Types.Left', E2} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V41, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V4, V12, V24))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'case--with block in checkAppWith\x{27}-8277'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E2} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V19))), fun (V26) -> ('un--checkRestApp'(V4, V1, V2, V3, V5, V6, V25, V7, V8, V9, V10, V11, V22, V20, V18, V12, V24, [], V13, V21, V14, V15, V26)) end end end(E2)); _ -> fun (V27) -> begin (V29 = begin (V28 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V43)) end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V47, V48, V49, V50)) end end end end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V52)) end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V55, V56, V57)) end end end end end}, fun (V58) -> ('un--isImplicitAs'(V58)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V59) -> ('Idris.Idris2.Builtin':'un--snd'(V59)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V60) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V60)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V21)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V4, V1, V3, V5, V6, V7, V9, V10, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V4, V31, V9, V16)), V15, V27)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V4, V10, V9, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V61) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V13)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V62) -> ('Idris.Idris2.Builtin':'un--fst'(V62)) end, V21)))), V11}, V27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in case block in checkRestApp,checkRtoL-6688'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> case V46 of [] -> begin (V52 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V48) -> case V48 of {'Idris.Prelude.Types.Left', E2} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V50) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V51) -> ('Idris.Idris2.Core.Unify':'un--updateSolution'(V0, V22, V20, V14, V30, V40, V51)) end, V47))), case V52 of {'Idris.Prelude.Types.Left', E4} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V54) -> {'Idris.Prelude.Types.Right', V34} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V55 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V35))(V47))), case V55 of {'Idris.Prelude.Types.Left', E0} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V57) -> (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V20, V22, V13, V18, V14, V34, V57, V46))(V47)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'case--getVarType-3146'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> begin (V11 = (('un--getNameType'(V0, V8, V7, V6, V5, V3, V2, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', 0, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V16) -> fun (V17) -> case V16 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V20, V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Prelude.Types.List':'un--length'(V20))), begin (V27 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V1 end, V18))), begin (V58 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V27, case V25 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V28 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V17))), case V58 of {'Idris.Prelude.Types.Left', E41} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V60) -> case V60 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V8, V2, V27, V17)) end()); {'Idris.Prelude.Types.Just', E43} -> (fun (V61) -> begin (V82 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Core.TT.Func'} end, ('Idris.Idris2.Core.Context.Context':'un--defNameType'(case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V79 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V83 = ((V21(V2))(V82))), begin (V104 = ('nested--9110-3075--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, ('Idris.Idris2.Core.TT':'un--getArgs'(V83)), ('Idris.Idris2.Core.TT':'un--embed'(case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V86 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V145 = ('un--checkVisibleNS'(V8, V2, case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V106 end(E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123} -> (fun (V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> V134 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V17))), case V145 of {'Idris.Prelude.Types.Left', E124} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V147) -> begin (V148 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))) end, V104, V17))), case V148 of {'Idris.Prelude.Types.Left', E126} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V150) -> begin (V151 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expands to"/utf8>> end, V83, V17))), case V151 of {'Idris.Prelude.Types.Left', E128} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V153) -> begin (V154 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Arg length "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V26)))) end, V17))), case V154 of {'Idris.Prelude.Types.Left', E130} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V156) -> begin (V157 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"getVarType is adding \x{2193}"/utf8>> end, V17))), case V157 of {'Idris.Prelude.Types.Left', E132} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V159) -> begin (V160 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V8, V7, V2, V1, V3, V104, V17))), case V160 of {'Idris.Prelude.Types.Left', E134} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V162) -> begin (V248 = case ('Idris.Idris2.Core.Name':'un--isSourceName'(case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218} -> (fun (V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182) -> V164 end(E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V2)) of {'Idris.Prelude.Types.Just', E136} -> (fun (V183) -> begin (V204 = ('Idris.Idris2.Core.Metadata':'un--nameDecoration'(case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156} -> (fun (V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203) -> V185 end(E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V82))), begin (V225 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"getNameType is adding "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Metadata':'dn--un--show_Show_Decoration'(V204)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176} -> (fun (V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224) -> V206 end(E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V17))), case V225 of {'Idris.Prelude.Types.Left', E177} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V227) -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V7, V8, [{'Idris.Builtin.MkPair', V183, {'Idris.Builtin.MkPair', V204, {'Idris.Prelude.Types.Just', case V61 of {'Idris.Core.Context.Context.MkGlobalDef', E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198} -> (fun (V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247) -> V229 end(E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}} | []], V17)) end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E136)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V248 of {'Idris.Prelude.Types.Left', E219} -> (fun (V249) -> {'Idris.Prelude.Types.Left', V249} end(E219)); {'Idris.Prelude.Types.Right', E220} -> (fun (V250) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V83, {'Idris.Builtin.MkPair', V26, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V3, V104))}}} end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNameType-2623'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case V10 of {'Idris.Core.Env.MkIsDefined', E1, E2} -> (fun (V11, V12) -> begin (V13 = ('nested--8596-2596--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V12, V4, V9))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V23 = ('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V21, V22)) end end end end}, V0, V11, V3))), begin (V24 = ('Idris.Idris2.Core.TT':'un--binderType'(V23))), begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"getNameType is adding \x{2193}"/utf8>> end, V9))), case V25 of {'Idris.Prelude.Types.Left', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V7, V6, V2, V1, V3, V24, V9))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> begin (V58 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V31, V32)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V37, V38)) end end}}, V12)) of 1 -> begin (V40 = begin (V39 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E9} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V42) -> begin (V57 = ('erlang':'put'(V5, case V42 of {'Idris.TTImp.Elab.Check.MkEState', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.TTImp.Elab.Check.MkEState', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, [V11 | V54], V55, V56} end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V58 of {'Idris.Prelude.Types.Left', E25} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"getNameType is trying to add Bound: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V2)), <<")"/utf8>>)))))))) end, V9))), case V61 of {'Idris.Prelude.Types.Left', E27} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V63) -> begin (V68 = case ('Idris.Idris2.Core.Name':'un--isSourceName'(V1)) of 1 -> case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V2)) of {'Idris.Prelude.Types.Just', E29} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"getNameType is adding Bound: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end, V9))), case V65 of {'Idris.Prelude.Types.Left', E30} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V67) -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V6, V7, [{'Idris.Builtin.MkPair', V64, {'Idris.Builtin.MkPair', 5, {'Idris.Prelude.Types.Just', V1}}} | []], V9)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V68 of {'Idris.Prelude.Types.Left', E32} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V23))}, V11}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V3, V24))}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V72 = begin (V71 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V71} end), case V72 of {'Idris.Prelude.Types.Left', E34} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V74) -> begin (V105 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V1, case V74 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> V75 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V105 of {'Idris.Prelude.Types.Left', E66} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V107) -> case V107 of [E68 | E69] -> (fun (V108, V109) -> case V108 of {'Idris.Builtin.MkPair', E70, E71} -> (fun (V110, V111) -> case V111 of {'Idris.Builtin.MkPair', E72, E73} -> (fun (V112, V113) -> case V109 of [] -> begin (V154 = ('un--checkVisibleNS'(V7, V2, case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133) -> V115 end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113} -> (fun (V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V143 end(E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V154 of {'Idris.Prelude.Types.Left', E114} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V156) -> begin (V177 = ('nested--8596-2596--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176) -> V164 end(E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V9))), case V177 of {'Idris.Prelude.Types.Left', E136} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V179) -> begin (V200 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Core.TT.Func'} end, ('Idris.Idris2.Core.Context.Context':'un--defNameType'(case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157} -> (fun (V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199) -> V197 end(E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V221 = ('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"getNameType is trying to add something for: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177} -> (fun (V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220) -> V202 end(E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V2)), <<")"/utf8>>)))))))) end, V9))), case V221 of {'Idris.Prelude.Types.Left', E178} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V223) -> begin (V309 = case ('Idris.Idris2.Core.Name':'un--isSourceName'(case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262} -> (fun (V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243) -> V225 end(E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V2)) of {'Idris.Prelude.Types.Just', E180} -> (fun (V244) -> begin (V265 = ('Idris.Idris2.Core.Metadata':'un--nameDecoration'(case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200} -> (fun (V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264) -> V246 end(E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V200))), begin (V286 = ('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"getNameType is adding "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Metadata':'dn--un--show_Show_Decoration'(V265)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220} -> (fun (V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285) -> V267 end(E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V9))), case V286 of {'Idris.Prelude.Types.Left', E221} -> (fun (V287) -> {'Idris.Prelude.Types.Left', V287} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V288) -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V6, V7, [{'Idris.Builtin.MkPair', V244, {'Idris.Builtin.MkPair', V265, {'Idris.Prelude.Types.Just', case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242} -> (fun (V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308) -> V290 end(E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}} | []], V9)) end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E180)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V309 of {'Idris.Prelude.Types.Left', E263} -> (fun (V310) -> {'Idris.Prelude.Types.Left', V310} end(E263)); {'Idris.Prelude.Types.Right', E264} -> (fun (V311) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V2, V200, {'Idris.Core.Name.Resolved', V112}}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'(case V113 of {'Idris.Core.Context.Context.MkGlobalDef', E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284} -> (fun (V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331) -> V314 end(E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end(E264)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V332) -> ('Idris.Idris2.Builtin':'un--fst'(V332)) end, V107))}, V9)) end end(E72, E73)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V333) -> ('Idris.Idris2.Builtin':'un--fst'(V333)) end, V107))}, V9)) end end(E70, E71)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V334) -> ('Idris.Idris2.Builtin':'un--fst'(V334)) end, V107))}, V9)) end end(E68, E69)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V7, V2, V1, V9)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V335) -> ('Idris.Idris2.Builtin':'un--fst'(V335)) end, V107))}, V9)) end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9110-3075--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E8 | E9] -> (fun (V12, V13) -> case V11 of {'Idris.Core.TT.Bind', E18, E19, E20, E21} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E30, E31, E32, E33} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V14, V15, {'Idris.Core.TT.Let', V18, V19, V12, V21}, ('nested--9110-3075--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V22)) end, V13)), V17))} end(E30, E31, E32, E33)); _ -> case V11 of {'Idris.Core.TT.Bind', E22, E23, E24, E25} -> (fun (V23, V24, V25, V26) -> case V25 of {'Idris.Core.TT.Let', E26, E27, E28, E29} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.TT.Bind', V23, V24, {'Idris.Core.TT.Let', V27, V28, V29, V30}, ('nested--9110-3075--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V24 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V31)) end, V10)), V26))} end(E26, E27, E28, E29)); _ -> V11 end end(E22, E23, E24, E25)); _ -> V11 end end end(E18, E19, E20, E21)); _ -> case V11 of {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V32, V33, V34, V35) -> case V34 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V36, V37, V38, V39) -> {'Idris.Core.TT.Bind', V32, V33, {'Idris.Core.TT.Let', V36, V37, V38, V39}, ('nested--9110-3075--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V33 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V40) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V40)) end, V10)), V35))} end(E14, E15, E16, E17)); _ -> V11 end end(E10, E11, E12, E13)); _ -> V11 end end end(E8, E9)); _ -> case V11 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V41, V42, V43, V44) -> case V43 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V45, V46, V47, V48) -> {'Idris.Core.TT.Bind', V41, V42, {'Idris.Core.TT.Let', V45, V46, V47, V48}, ('nested--9110-3075--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V42 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V49)) end, V10)), V44))} end(E4, E5, E6, E7)); _ -> V11 end end(E0, E1, E2, E3)); _ -> V11 end end.
'nested--18226-10924--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V17 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V21) -> case V19 of [E1 | E2] -> (fun (V22, V23) -> fun (V24) -> case V22 of {'Idris.TTImp.TTImp.IPrimVal', E3, E4} -> (fun (V25, V26) -> case V23 of [] -> begin (V27 = ('Idris.Idris2.Core.Context':'un--getFullName'(V15, V18, V24))), case V27 of {'Idris.Prelude.Types.Left', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V29) -> case ('Idris.Idris2.Core.Context':'un--isPrimName'(V16, V29)) of 1 -> {'Idris.Prelude.Types.Right', case V20 of {'Idris.TTImp.Elab.Check.MkElabInfo', E7, E8, E9, E10, E11, E12} -> (fun (V30, V31, V32, V33, V34, V35) -> {'Idris.TTImp.Elab.Check.MkElabInfo', {'Idris.TTImp.Elab.Check.InExpr'}, V31, V32, V33, V34, V35} end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}; 0 -> {'Idris.Prelude.Types.Right', V20}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V20} end end(E3, E4)); _ -> {'Idris.Prelude.Types.Right', V20} end end end(E1, E2)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', V20} end end end(E0)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', V20} end end.
'nested--8596-2596--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getFullName'(V7, V1, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'({'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V16)) end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V17, V18, V19, V20, V21)) end end end end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V24, V25)) end end}}, V8, V9)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearMisuse', V2, V13, V8, V9}, V10)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--18226-10923--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--normalisePrims'(V15, V16, fun (V21) -> ('nested--18302-10933--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V19, V18, V17, V21, case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V22, V23, V24, V25, V26, V27) -> V22 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun (V28) -> ('Idris.Idris2.TTImp.TTImp':'un--isIPrimVal'(V28)) end, case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E6, E7, E8, E9, E10, E11} -> (fun (V29, V30, V31, V32, V33, V34) -> case V29 of {'Idris.TTImp.Elab.Check.InLHS', E12} -> (fun (V35) -> 1 end(E12)); _ -> 0 end end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V17, V1, V6, ('Idris.Idris2.Builtin':'un--fst'(V19)), V18, V20))), case V36 of {'Idris.Prelude.Types.Left', E13} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('Idris.Idris2.Builtin':'un--fst'(V19)) end, V38)), ('Idris.Idris2.Builtin':'un--snd'(V19))}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9612-3999--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V24) -> 1 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 1 end()); _ -> 0 end.
'nested--9600-3751--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V23) -> 1 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 1 end()); _ -> 0 end.
'nested--9649-5299--in--un--invalidArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Core.Core.InvalidArgs', E0, E1, E2, E3, E4} -> (fun (V24, V25, V26, V27, V28) -> 1 end(E0, E1, E2, E3, E4)); _ -> 0 end.
'nested--9645-4585--in--un--dotTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IMustUnify', E0, E1, E2} -> (fun (V9, V10, V11) -> V8 end(E0, E1, E2)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V12, V13) -> V8 end(E3, E4)); {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V14, V15) -> V8 end(E5, E6)); {'Idris.TTImp.TTImp.IAs', E7, E8, E9, E10, E11} -> (fun (V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.IBindVar', E12, E13} -> (fun (V21, V22) -> V8 end(E12, E13)); {'Idris.TTImp.TTImp.Implicit', E14, E15} -> (fun (V23, V24) -> V8 end(E14, E15)); _ -> {'Idris.TTImp.TTImp.IAs', V16, V17, V18, V19, {'Idris.TTImp.TTImp.IMustUnify', V16, 3, V8}} end end(E7, E8, E9, E10, E11)); _ -> {'Idris.TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), 3, V8} end.
'nested--9645-4584--in--un--countConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V14)), V13)) of 1 -> begin (V16 = begin (V15 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V18) -> begin (V49 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V11, case V18 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V19 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V49 of {'Idris.Prelude.Types.Left', E37} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V51) -> case V51 of {'Idris.Prelude.Types.Just', E39} -> (fun (V52) -> case V52 of {'Idris.Core.Context.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> case V70 of {'Idris.Core.Context.Context.TCon', E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--length'(V79))}} end(E60, E61, E62, E63, E64, E65, E66, E67)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end.
'nested--9649-5300--in--un--checkRtoL'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E0} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V22, V20, V11, V25))), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V29, V25))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V22, V0, V35, V14, V10, V25))), case V36 of {'Idris.Prelude.Types.Left', E6} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V38) -> begin (V39 = (('Idris.Idris2.TTImp.Elab.Check':'un--argVar'(V0, V22, V20, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V24)), V17, V14, V32, V38))(V25))), case V39 of {'Idris.Prelude.Types.Left', E8} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V42, V43) -> begin (V44 = {'Idris.Core.TT.App', V13, V12, V43}), begin (V45 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...as"/utf8>> end, V43, V25))), case V45 of {'Idris.Prelude.Types.Left', E12} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V47) -> begin (V48 = (((V9(V29))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V43))))(V25))), case V48 of {'Idris.Prelude.Types.Left', E14} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V50) -> begin (V51 = ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V44, V50, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V23, V3, V25))), case V51 of {'Idris.Prelude.Types.Left', E16} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V53) -> begin (V54 = {'Idris.Builtin.MkPair', V42, V43}), case V53 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V55, V56) -> begin (V58 = begin (V57 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E20} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V22, V0, V60, V14, V38))(V25))), case V61 of {'Idris.Prelude.Types.Left', E22} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V63) -> begin (V67 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V32)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V65, V66)) end end}, V24)))))))) end, V14, V63, V25))), case V67 of {'Idris.Prelude.Types.Left', E24} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V69) -> begin (V147 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E85, E86, E87, E88, E89, E90} -> (fun (V70, V71, V72, V73, V74, V75) -> V70 end(E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ((case V63 of {'Idris.Core.Value.NApp', E26, E27, E28} -> (fun (V76, V77, V78) -> case V77 of {'Idris.Core.Value.NMeta', E29, E30, E31} -> (fun (V79, V80, V81) -> fun () -> fun (V82) -> begin (V113 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V80}, case V60 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112) -> V83 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V82))), case V113 of {'Idris.Prelude.Types.Left', E62} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V115) -> case V115 of {'Idris.Prelude.Types.Just', E64} -> (fun (V116) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V117) -> fun (V118) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V117, V118)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V119) -> fun (V120) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V119, V120)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V121) -> fun (V122) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V123, V124)) end end}}, case V116 of {'Idris.Core.Context.Context.MkGlobalDef', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> V132 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Core.UnifyState':'un--addNoSolve'(V20, V80, V82)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E64)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E29, E30, E31)); _ -> fun () -> fun (V145) -> {'Idris.Prelude.Types.Right', 0} end end end end(E26, E27, E28)); _ -> fun () -> fun (V146) -> {'Idris.Prelude.Types.Right', 0} end end end())(V25)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V147 of {'Idris.Prelude.Types.Left', E91} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V149) -> begin (V156 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E93, E94, E95, E96, E97, E98} -> (fun (V150, V151, V152, V153, V154, V155) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V150, V151, 0, V153, V154, V155} end(E93, E94, E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V60, V14, V63))}, V25))), case V156 of {'Idris.Prelude.Types.Left', E99} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V158) -> begin (V174 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E107, E108, E109, E110, E111, E112} -> (fun (V159, V160, V161, V162, V163, V164) -> V159 end(E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ((case V63 of {'Idris.Core.Value.NApp', E101, E102, E103} -> (fun (V165, V166, V167) -> case V166 of {'Idris.Core.Value.NMeta', E104, E105, E106} -> (fun (V168, V169, V170) -> fun () -> fun (V171) -> ('Idris.Idris2.Core.UnifyState':'un--removeNoSolve'(V20, V169, V171)) end end end(E104, E105, E106)); _ -> fun () -> fun (V172) -> {'Idris.Prelude.Types.Right', 0} end end end end(E101, E102, E103)); _ -> fun () -> fun (V173) -> {'Idris.Prelude.Types.Right', 0} end end end())(V25)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V174 of {'Idris.Prelude.Types.Left', E113} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V176) -> begin (V185 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E117, E118, E119, E120, E121, E122} -> (fun (V177, V178, V179, V180, V181, V182) -> V177 end(E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> case V158 of {'Idris.Builtin.MkPair', E115, E116} -> (fun (V183, V184) -> ('un--checkValidPattern'(V0, V22, V21, V20, V19, V18, V14, V13, V183, V184, V25)) end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> {'Idris.Prelude.Types.Right', V158}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V185 of {'Idris.Prelude.Types.Left', E123} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V187) -> begin (V188 = {'Idris.Builtin.MkPair', V55, V56}), case V187 of {'Idris.Builtin.MkPair', E125, E126} -> (fun (V189, V190) -> begin (V192 = begin (V191 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V191} end), case V192 of {'Idris.Prelude.Types.Left', E127} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V194) -> begin (V195 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V43)), <<" with"/utf8>>)))) end, V189, V25))), case V195 of {'Idris.Prelude.Types.Left', E129} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V197) -> begin (V198 = ('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V43, V189, V25))), case V198 of {'Idris.Prelude.Types.Left', E131} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V200) -> begin (V209 = begin (V201 = {'Idris.Builtin.MkPair', V189, V190}), case V200 of 1 -> {'Idris.Prelude.Types.Right', V55}; 0 -> begin (V202 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V22, V20, V19, V13, V16, V14, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V14, V43)), ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V14, V189))))(V25))), case V202 of {'Idris.Prelude.Types.Left', E133} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V204) -> ('case--case block in case block in case block in case block in checkRestApp,checkRtoL-6688'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V24, V23, V29, V32, V35, V38, V42, V43, V54, V44, V50, V55, V56, V188, V60, V63, V158, V189, V190, V201, V194, V200, V204, case V204 of {'Idris.Core.Unify.MkUnifyResult', E135, E136, E137, E138} -> (fun (V205, V206, V207, V208) -> V205 end(E135, E136, E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V25)) end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V209 of {'Idris.Prelude.Types.Left', E139} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V211) -> begin (V227 = case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E141, E142, E143, E144, E145, E146} -> (fun (V212, V213, V214, V215, V216, V217) -> case V212 of {'Idris.TTImp.Elab.Check.InLHS', E147} -> (fun (V218) -> begin (V220 = ('Idris.Idris2.Core.Context':'un--updateDef'(V22, {'Idris.Core.Name.Resolved', V42}, fun (V219) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.Hole', 0, ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}} end, V25))), case V220 of {'Idris.Prelude.Types.Left', E148} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V222) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V223) -> case V223 of {'Idris.Prelude.Types.Left', E150} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V225) -> {'Idris.Prelude.Types.Right', 0} end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V226) -> ('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V43, V189, V226)) end, V25)) end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E141, E142, E143, E144, E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V227 of {'Idris.Prelude.Types.Left', E152} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V229) -> begin (V230 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V42, V25))), case V230 of {'Idris.Prelude.Types.Left', E154} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V232) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V211, V56}} end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9649-5301--in--un--checkLtoR'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E0} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Full function type"/utf8>> end, V14, {'Idris.Core.Value.NBind', V13, V11, {'Idris.Core.TT.Pi', V13, V17, {'Idris.Core.TT.Explicit'}, V10}, V9}, V25))), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> begin (V55 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V33) -> begin (V49 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V35) -> fun (V36) -> begin (V37 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V35))(V36))), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V22, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V40, V41, V42)) end end end, fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V43, V44, V45)) end end end}, V39, V36))), case V46 of {'Idris.Prelude.Types.Left', E6} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V48}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V33))), case V49 of {'Idris.Prelude.Types.Left', E8} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V51) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Overall expected type: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V53, V54)) end end}, V51))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V25))), case V55 of {'Idris.Prelude.Types.Left', E10} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V57) -> begin (V64 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V58, V59, V60, V61, V62, V63) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V58, V59, 0, V61, V62, V63} end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueClosure'(V22, V0, V29, V14, V10))}, V25))), case V64 of {'Idris.Prelude.Types.Left', E18} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V66) -> begin (V75 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E22, E23, E24, E25, E26, E27} -> (fun (V67, V68, V69, V70, V71, V72) -> V67 end(E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> case V66 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V73, V74) -> ('un--checkValidPattern'(V0, V22, V21, V20, V19, V18, V14, V13, V73, V74, V25)) end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> {'Idris.Prelude.Types.Right', V66}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V75 of {'Idris.Prelude.Types.Left', E28} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V77) -> case V77 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V78, V79) -> begin (V80 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got arg type"/utf8>> end, V14, V79, V25))), case V80 of {'Idris.Prelude.Types.Left', E32} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V82) -> begin (V84 = begin (V83 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V83} end), case V84 of {'Idris.Prelude.Types.Left', E34} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V86) -> begin (V87 = {'Idris.Core.TT.App', V13, V12, V78}), begin (V88 = (((V9(V86))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V78))))(V25))), case V88 of {'Idris.Prelude.Types.Left', E36} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V90) -> ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V87, V90, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V23, V3, V25)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--18302-10933--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.TTImp.Elab.Check.InLHS', E1} -> (fun (V22) -> 1 end(E1)); _ -> case V20 of {'Idris.Core.TT.BI', E0} -> (fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Integer'(V23)), 100)) end(E0)); _ -> 1 end end.
'un--onLHS'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V1) -> 1 end(E0)); _ -> 0 end.
'un--needsDelayLHS'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', 1} end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V5, V6, V7) -> ('un--needsDelayLHS'(V0, V6)) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V8, V9, V10) -> ('un--needsDelayLHS'(V0, V9)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> ('un--needsDelayLHS'(V0, V12)) end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IAlternative', E12, E13, E14} -> (fun (V15, V16, V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', 1} end end(E12, E13, E14)); {'Idris.TTImp.TTImp.IAs', E15, E16, E17, E18, E19} -> (fun (V19, V20, V21, V22, V23) -> ('un--needsDelayLHS'(V0, V23)) end(E15, E16, E17, E18, E19)); {'Idris.TTImp.TTImp.ISearch', E20, E21} -> (fun (V24, V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', 1} end end(E20, E21)); {'Idris.TTImp.TTImp.IPrimVal', E22, E23} -> (fun (V27, V28) -> fun (V29) -> {'Idris.Prelude.Types.Right', 1} end end(E22, E23)); {'Idris.TTImp.TTImp.IType', E24} -> (fun (V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', 1} end end(E24)); {'Idris.TTImp.TTImp.IWithUnambigNames', E25, E26, E27} -> (fun (V32, V33, V34) -> ('un--needsDelayLHS'(V0, V34)) end(E25, E26, E27)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--needsDelayExpr'(V0, V1, V2) -> case V1 of 0 -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> case V2 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V5, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V41 of {'Idris.Prelude.Types.Left', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V43) -> {'Idris.Prelude.Types.Right', case V43 of [E36 | E37] -> (fun (V44, V45) -> case V45 of [E38 | E39] -> (fun (V46, V47) -> 1 end(E38, E39)); _ -> 0 end end(E36, E37)); _ -> 0 end} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E40, E41, E42} -> (fun (V48, V49, V50) -> ('un--needsDelayExpr'(V0, 1, V49)) end(E40, E41, E42)); {'Idris.TTImp.TTImp.IAutoApp', E43, E44, E45} -> (fun (V51, V52, V53) -> ('un--needsDelayExpr'(V0, 1, V52)) end(E43, E44, E45)); {'Idris.TTImp.TTImp.INamedApp', E46, E47, E48, E49} -> (fun (V54, V55, V56, V57) -> ('un--needsDelayExpr'(V0, 1, V55)) end(E46, E47, E48, E49)); {'Idris.TTImp.TTImp.ILam', E50, E51, E52, E53, E54, E55} -> (fun (V58, V59, V60, V61, V62, V63) -> fun (V64) -> {'Idris.Prelude.Types.Right', 1} end end(E50, E51, E52, E53, E54, E55)); {'Idris.TTImp.TTImp.ICase', E56, E57, E58, E59} -> (fun (V65, V66, V67, V68) -> fun (V69) -> {'Idris.Prelude.Types.Right', 1} end end(E56, E57, E58, E59)); {'Idris.TTImp.TTImp.ILocal', E60, E61, E62} -> (fun (V70, V71, V72) -> fun (V73) -> {'Idris.Prelude.Types.Right', 1} end end(E60, E61, E62)); {'Idris.TTImp.TTImp.IUpdate', E63, E64, E65} -> (fun (V74, V75, V76) -> fun (V77) -> {'Idris.Prelude.Types.Right', 1} end end(E63, E64, E65)); {'Idris.TTImp.TTImp.IAlternative', E66, E67, E68} -> (fun (V78, V79, V80) -> fun (V81) -> {'Idris.Prelude.Types.Right', 1} end end(E66, E67, E68)); {'Idris.TTImp.TTImp.ISearch', E69, E70} -> (fun (V82, V83) -> fun (V84) -> {'Idris.Prelude.Types.Right', 1} end end(E69, E70)); {'Idris.TTImp.TTImp.IRewrite', E71, E72, E73} -> (fun (V85, V86, V87) -> fun (V88) -> {'Idris.Prelude.Types.Right', 1} end end(E71, E72, E73)); _ -> fun (V89) -> {'Idris.Prelude.Types.Right', 0} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--needsDelay'(V0, V1, V2, V3) -> case V1 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V4) -> ('un--needsDelayLHS'(V0, V3)) end(E0)); _ -> ('un--needsDelayExpr'(V0, V2, V3)) end.
'un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V12, V21))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V21))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V33, V9, V13, V21))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V10, V6, V9, V30, V36, V21))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V40 = {'Idris.Core.TT.App', V10, V11, V39}), begin (V41 = (((V14(V27))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V39))))(V21))), case V41 of {'Idris.Prelude.Types.Left', E12} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V43) -> begin (V55 = case case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E16, E17, E18, E19, E20, E21} -> (fun (V44, V45, V46, V47, V48, V49) -> V47 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V51 = begin (V50 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E14} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V53) -> begin (V54 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V30, V6, {'Idris.Core.TT.Implicit'}, V9, V39, V36, V53))))), {'Idris.Prelude.Types.Right', V54} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E22} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V57) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V40, V43, {'Idris.Builtin.MkPair', V22, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V23))}, V16, V17, V18, V19, V20, V21)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> case ('nested--9612-3999--in--un--metavarImp'(V0, V23, V24, V21, V20, V19, V18, V17, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E26, E27, E28, E29, E30, E31} -> (fun (V25, V26, V27, V28, V29, V30) -> V25 end(E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V32 = begin (V31 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V12, V22))), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V34, V22))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V40, V9, V14, V22))), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V10, V6, V9, V37, V43, V22))), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> begin (V47 = {'Idris.Core.TT.App', V10, V11, V46}), begin (V48 = (((V15(V34))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V46))))(V22))), case V48 of {'Idris.Prelude.Types.Left', E12} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V50) -> begin (V52 = begin (V51 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E14} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V54) -> begin (V56 = begin (V55 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V37, V6, {'Idris.Core.TT.AutoImplicit'}, V9, V46, V43, V54))))), {'Idris.Prelude.Types.Right', V55} end), case V56 of {'Idris.Prelude.Types.Left', E16} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V58) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V47, V50, {'Idris.Builtin.MkPair', V23, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V24))}, V17, V18, V19, V20, V21, V22)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V60 = begin (V59 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E18} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V62) -> begin (V63 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V62, V22))), case V63 of {'Idris.Prelude.Types.Left', E20} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V65, V9, V13, V22))), case V66 of {'Idris.Prelude.Types.Left', E22} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V68) -> begin (V69 = {'Idris.Core.TT.App', V10, V11, V68}), begin (V70 = (((V15(V62))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V68))))(V22))), case V70 of {'Idris.Prelude.Types.Left', E24} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V72) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V69, V72, {'Idris.Builtin.MkPair', V23, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V24))}, V17, V18, V19, V20, V21, V22)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> case ('nested--9600-3751--in--un--metavarImp'(V0, V22, V23, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E46, E47, E48, E49, E50, E51} -> (fun (V24, V25, V26, V27, V28, V29) -> V24 end(E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V31 = begin (V30 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V12, V21))), case V34 of {'Idris.Prelude.Types.Left', E4} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V33, V21))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V39, V9, V13, V21))), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V10, V6, V9, V36, V42, V21))), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V46 = {'Idris.Core.TT.App', V10, V11, V45}), begin (V47 = (((V14(V33))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V45))))(V21))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V51 = begin (V50 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E14} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V53) -> begin (V55 = begin (V54 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V36, V6, {'Idris.Core.TT.AutoImplicit'}, V9, V45, V42, V53))))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E16} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V57) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V46, V49, {'Idris.Builtin.MkPair', V22, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V23))}, V16, V17, V18, V19, V20, V21)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V59 = begin (V58 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E18} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V12, V21))), case V62 of {'Idris.Prelude.Types.Left', E20} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V61, V9, V13, V21))), case V65 of {'Idris.Prelude.Types.Left', E22} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V67) -> begin (V69 = begin (V68 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E24} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Context':'un--getAutoImplicitLimit'(V1, V21))), case V72 of {'Idris.Prelude.Types.Left', E26} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V74) -> begin (V89 = ('Idris.Idris2.TTImp.Elab.Check':'un--searchVar'(V0, V1, V3, V10, V6, V74, {'Idris.Core.Name.Resolved', case V71 of {'Idris.TTImp.Elab.Check.MkEState', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> V76 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V9, V8, V64, V67, V21))), case V89 of {'Idris.Prelude.Types.Left', E42} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V91) -> begin (V92 = {'Idris.Core.TT.App', V10, V11, V91}), begin (V93 = (((V14(V61))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V91))))(V21))), case V93 of {'Idris.Prelude.Types.Left', E44} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V95) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V92, V95, {'Idris.Builtin.MkPair', V22, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V23))}, V16, V17, V18, V19, V20, V21)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isImplicitAs'(V0) -> case V0 of {'Idris.TTImp.TTImp.IAs', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case V3 of 0 -> case V5 of {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V6, V7) -> 1 end(E5, E6)); _ -> 0 end; _ -> 0 end end(E0, E1, E2, E3, E4)); _ -> 0 end.
'un--isHole'(V0) -> case V0 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V1, V2, V3) -> case V2 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V4, V5, V6) -> 1 end(E3, E4, E5)); _ -> 0 end end(E0, E1, E2)); _ -> 0 end.
'un--isBindAllExpPattern'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> case V1 of {'Idris.Core.Name.Underscore'} -> (fun () -> 1 end()); _ -> 0 end end(E0)); _ -> 0 end.
'un--getVarType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--getVarType-3146'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V8, V5)))).
'un--getNameType'(V0, V1, V2, V3, V4, V5, V6, V7) -> fun (V8) -> ('case--getNameType-2623'(V0, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V7, V5)), V8)) end.
'un--findNamed'(V0, V1) -> case ('Idris.Idris2.Data.List':'un--partition'(fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Builtin':'un--fst'(V2)), V0)) end, V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V3 of [E2 | E3] -> (fun (V5, V6) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V4))}} end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--findBindAllExpPattern'(V0) -> ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}}, V0)).
'un--dotErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V9) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V9)) of 1 -> 0; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V24, V25)) end end}}, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V27 = begin (V26 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E1} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V29) -> begin (V33 = begin (V30 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V29, V2))(V8))), case V30 of {'Idris.Prelude.Types.Left', E3} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V32) -> ('nested--9645-4584--in--un--countConstructors'(V0, V9, V7, V6, V4, V3, V2, V1, V32, V8)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V33 of {'Idris.Prelude.Types.Left', E5} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V35) -> case case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V38, V39)) end end}, V35, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1))})) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V42, V43)) end end}, V35, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0))})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', V7}; 0 -> begin (V76 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V45) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V45, case V29 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V46 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end, V3))(V8))), case V76 of {'Idris.Prelude.Types.Left', E37} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V78) -> case V78 of {'Idris.Prelude.Types.Just', E39} -> (fun (V79) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V82, V83)) end end}, V4, case V79 of {'Idris.Core.Context.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V88 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Right', V7}; 0 -> {'Idris.Prelude.Types.Right', ('nested--9645-4585--in--un--dotTerm'(V0, V9, V7, V6, V4, V3, V2, V1, V7))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('nested--9645-4585--in--un--dotTerm'(V0, V9, V7, V6, V4, V3, V2, V1, V7))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', V7}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> {'Idris.Prelude.Types.Right', V7} end.
'un--checkVisibleNS'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--isVisible'(V0, V5, V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case V9 of 1 -> begin (V10 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V0, V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNS'(V0, V4))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V0, V4))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> case case V12 of 1 -> 1; 0 -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V15 | V18], {'Idris.Core.Name.NS', V5, V6}, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvisibleName', V1, {'Idris.Core.Name.NS', V5, V6}, {'Idris.Prelude.Types.Nothing'}}, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvisibleName', V1, {'Idris.Core.Name.NS', V5, V6}, {'Idris.Prelude.Types.Just', V5}}, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--checkValidPattern'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.app.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking that "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V8)), <<" is a valid pattern"/utf8>>)))) end, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V8 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Lam', E6, E7, E8, E9} -> (fun (V18, V19, V20, V21) -> ('Idris.Idris2.TTImp.Elab.Dot':'un--registerDot'(V0, V1, V2, V3, V4, V5, V6, V7, 2, V8, V9, V10)) end(E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V9}} end end(E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V9}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V35 = ('un--dotErased'(V0, V1, V13, V23, V24, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V29, V30, V31, V32, V33, V34) -> V29 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V16, V22))), case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> begin (V41 = case V20 of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> begin (V38 = (((V14(V28))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, {'Idris.Core.TT.Erased', V10, 0}))))(V22))), case V38 of {'Idris.Prelude.Types.Left', E12} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V40) -> ('Idris.Idris2.TTImp.Elab.Check':'un--concrete'(V28, V9, V40, V22)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V41 of {'Idris.Prelude.Types.Left', E14} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V43) -> begin (V44 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V28, V13))(V22))), case V44 of {'Idris.Prelude.Types.Left', E16} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V46) -> begin (V53 = (('un--needsDelay'(V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E18, E19, E20, E21, E22, E23} -> (fun (V47, V48, V49, V50, V51, V52) -> V47 end(E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43, V16))(V22))), case V53 of {'Idris.Prelude.Types.Left', E24} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V55) -> case case case ('un--isHole'(V46)) of 1 -> V43; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> V55; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V56) -> ('nested--9649-5300--in--un--checkRtoL'(V0, V23, V24, V21, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V43, V37, V56)) end, fun (V57) -> fun (V58) -> case ('nested--9649-5299--in--un--invalidArg'(V0, V23, V24, V21, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V57)) of 1 -> ('nested--9649-5301--in--un--checkLtoR'(V0, V23, V24, V21, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V43, V37, V58)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V57, V58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V22)); 0 -> ('nested--9649-5301--in--un--checkLtoR'(V0, V23, V24, V21, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V43, V37, V22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V11 of {'Idris.Core.Value.NBind', E41, E42, E43, E44} -> (fun (V18, V19, V20, V21) -> case V20 of {'Idris.Core.TT.Pi', E86, E87, E88, E89} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V13 of [E172 | E173] -> (fun (V26, V27) -> begin (V28 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), fun (V29) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V28, V6, V7, V8, V9, V10, V19, V25, V21, V12, V26, V27, V14, V15, V16, V17, V29)) end end end(E172, E173)); [] -> ('with--checkAppWith\x{27}-8240'(V19, V15, ('un--findNamed'(V19, V15)), V0, V22, V25, V23, V21, V18, V11, V17, V16, V14, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)); _ -> case V12 of {'Idris.Builtin.MkPair', E133, E134} -> (fun (V30, V31) -> fun (V32) -> case V13 of [E137 | E138] -> (fun (V33, V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V32))), case V35 of {'Idris.Prelude.Types.Left', E139} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V32))), case V38 of {'Idris.Prelude.Types.Left', E141} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V32))), case V41 of {'Idris.Prelude.Types.Left', E143} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V32))), case V44 of {'Idris.Prelude.Types.Left', E145} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V46) -> begin (V51 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V47, V48)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V49, V50)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V43, {'Idris.Core.TT.TType', V9}, V32))), case V51 of {'Idris.Prelude.Types.Left', E147} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V53))), begin (V59 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V55) -> fun (V56) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V55, V56)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V57) -> fun (V58) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V57, V58)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V46, {'Idris.Core.TT.TType', V9}, V32))), case V59 of {'Idris.Prelude.Types.Left', E149} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V33, {'Idris.Prelude.Types.Just', V54}, V32))), case V62 of {'Idris.Prelude.Types.Left', E151} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V64) -> case V64 of {'Idris.Builtin.MkPair', E153, E154} -> (fun (V65, V66) -> begin (V67 = {'Idris.Core.TT.App', V9, V10, V65}), begin (V69 = begin (V68 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E155} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V71, V8, V61))(V32))), case V72 of {'Idris.Prelude.Types.Left', E157} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V43, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V53}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V61))}))), begin (V76 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V75, V32))), case V76 of {'Idris.Prelude.Types.Left', E159} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E159)); {'Idris.Prelude.Types.Right', E160} -> (fun (V78) -> begin (V80 = case V17 of {'Idris.Prelude.Types.Just', E161} -> (fun (V79) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V79, V32)) end(E161)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V80 of {'Idris.Prelude.Types.Left', E162} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V82) -> begin (V83 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V67, V74, {'Idris.Builtin.MkPair', V30, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V31))}, V34, V14, V15, V16, V17))(V32))), case V83 of {'Idris.Prelude.Types.Left', E164} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V85) -> begin (V86 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V71, V8, V11)), V75))(V32))), case V86 of {'Idris.Prelude.Types.Left', E166} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V88) -> begin (V89 = {'Idris.Builtin.MkPair', V65, V66}), ('case--case block in checkAppWith\x{27}-10093'(V30, V31, V33, V34, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V43, V46, V53, V54, V61, V65, V66, V89, V67, V71, V74, V75, V85, V88, case V88 of {'Idris.Core.Unify.MkUnifyResult', E168, E169, E170, E171} -> (fun (V90, V91, V92, V93) -> V90 end(E168, E169, E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V32)) end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E153, E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137, E138)); _ -> case V13 of [] -> begin (V95 = begin (V94 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V94} end), case V95 of {'Idris.Prelude.Types.Left', E135} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V97) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V100, V101, V102)) end end end end end, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V105, V106, V107)) end end end end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V109)) end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V113, V114, V115, V116)) end end end end end end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V118)) end end, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V121, V122, V123)) end end end end end}, fun (V124) -> ('un--isImplicitAs'(V124)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V125) -> ('Idris.Idris2.Builtin':'un--snd'(V125)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V126) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V126)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V97, V8, V11)), V17, V32)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V127) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V128) -> ('Idris.Idris2.Builtin':'un--fst'(V128)) end, V15)))), V10}, V32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E133, E134)); _ -> fun (V129) -> case V13 of [] -> begin (V131 = begin (V130 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V130} end), case V131 of {'Idris.Prelude.Types.Left', E131} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V133) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V136, V137, V138)) end end end end end, fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V141, V142, V143)) end end end end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V145)) end end, fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V149, V150, V151, V152)) end end end end end end end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V154)) end end, fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V157, V158, V159)) end end end end end}, fun (V160) -> ('un--isImplicitAs'(V160)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V161) -> ('Idris.Idris2.Builtin':'un--snd'(V161)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V162) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V162)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V133, V8, V11)), V17, V129)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V163) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V164) -> ('Idris.Idris2.Builtin':'un--fst'(V164)) end, V15)))), V10}, V129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E194} -> (fun (V165) -> begin (V166 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), fun (V167) -> begin (V168 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V165))(V167))), case V168 of {'Idris.Prelude.Types.Left', E195} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V170) -> begin (V172 = begin (V171 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V171} end), case V172 of {'Idris.Prelude.Types.Left', E197} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V174) -> begin (V175 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.Implicit'}, V25}, V21}), case V170 of {'Idris.Core.Value.NBind', E205, E206, E207, E208} -> (fun (V176, V177, V178, V179) -> case V178 of {'Idris.Core.TT.Pi', E215, E216, E217, E218} -> (fun (V180, V181, V182, V183) -> case V182 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V174, V8, V175)), {'Idris.Prelude.Types.Just', V165}, V167)) end()); _ -> case case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E219, E220, E221, E222, E223, E224} -> (fun (V184, V185, V186, V187, V188, V189) -> V188 end(E219, E220, E221, E222, E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V190) -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V174, V8, V175)), {'Idris.Prelude.Types.Just', V165}, V190)) end, fun (V191) -> fun (V192) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V166, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V165}, V192)) end end, V167)); 0 -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V166, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V165}, V167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E215, E216, E217, E218)); _ -> case case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E209, E210, E211, E212, E213, E214} -> (fun (V193, V194, V195, V196, V197, V198) -> V197 end(E209, E210, E211, E212, E213, E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V199) -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V174, V8, V175)), {'Idris.Prelude.Types.Just', V165}, V199)) end, fun (V200) -> fun (V201) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V166, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V165}, V201)) end end, V167)); 0 -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V166, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V165}, V167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E205, E206, E207, E208)); _ -> case case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E199, E200, E201, E202, E203, E204} -> (fun (V202, V203, V204, V205, V206, V207) -> V206 end(E199, E200, E201, E202, E203, E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V208) -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V174, V8, V175)), {'Idris.Prelude.Types.Just', V165}, V208)) end, fun (V209) -> fun (V210) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V166, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V165}, V210)) end end, V167)); 0 -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V166, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V165}, V167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E194)); _ -> begin (V211 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V212) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V211, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, V14, V15, V16, V17, V212)) end end()); {'Idris.Prelude.Types.Just', E189} -> (fun (V213) -> case V213 of {'Idris.Builtin.MkPair', E190, E191} -> (fun (V214, V215) -> case V214 of {'Idris.Builtin.MkPair', E192, E193} -> (fun (V216, V217) -> fun (V218) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V211, V6, V7, V8, V9, V10, V19, V25, V21, V12, V217, V13, V14, V215, V16, V17, V218)) end end(E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E190, E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V219 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V220) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V219, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, V14, V15, V16, V17, V220)) end end()); {'Idris.Prelude.Types.Just', E184} -> (fun (V221) -> case V221 of {'Idris.Builtin.MkPair', E185, E186} -> (fun (V222, V223) -> case V222 of {'Idris.Builtin.MkPair', E187, E188} -> (fun (V224, V225) -> fun (V226) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V219, V6, V7, V8, V9, V10, V19, V25, V21, V12, V225, V13, V14, V223, V16, V17, V226)) end end(E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E185, E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V227 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V228) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V227, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, V14, V15, V16, V17, V228)) end end()); {'Idris.Prelude.Types.Just', E179} -> (fun (V229) -> case V229 of {'Idris.Builtin.MkPair', E180, E181} -> (fun (V230, V231) -> case V230 of {'Idris.Builtin.MkPair', E182, E183} -> (fun (V232, V233) -> fun (V234) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V227, V6, V7, V8, V9, V10, V19, V25, V21, V12, V233, V13, V14, V231, V16, V17, V234)) end end(E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V235 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V236) -> ('un--makeImplicit'(V0, V1, V2, V3, V4, V5, V235, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, V14, V15, V16, V17, V236)) end end()); {'Idris.Prelude.Types.Just', E174} -> (fun (V237) -> case V237 of {'Idris.Builtin.MkPair', E175, E176} -> (fun (V238, V239) -> case V238 of {'Idris.Builtin.MkPair', E177, E178} -> (fun (V240, V241) -> fun (V242) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V235, V6, V7, V8, V9, V10, V19, V25, V21, V12, V241, V13, V14, V239, V16, V17, V242)) end end(E177, E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E175, E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E417} -> (fun (V243) -> begin (V244 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), fun (V245) -> begin (V246 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V243))(V245))), case V246 of {'Idris.Prelude.Types.Left', E418} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E418)); {'Idris.Prelude.Types.Right', E419} -> (fun (V248) -> begin (V250 = begin (V249 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V249} end), case V250 of {'Idris.Prelude.Types.Left', E420} -> (fun (V251) -> {'Idris.Prelude.Types.Left', V251} end(E420)); {'Idris.Prelude.Types.Right', E421} -> (fun (V252) -> begin (V253 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.AutoImplicit'}, V25}, V21}), case V248 of {'Idris.Core.Value.NBind', E422, E423, E424, E425} -> (fun (V254, V255, V256, V257) -> case V256 of {'Idris.Core.TT.Pi', E426, E427, E428, E429} -> (fun (V258, V259, V260, V261) -> case V260 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V252, V8, V253)), {'Idris.Prelude.Types.Just', V243}, V245)) end()); _ -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V244, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V243}, V245)) end end(E426, E427, E428, E429)); _ -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V244, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V243}, V245)) end end(E422, E423, E424, E425)); _ -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V244, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V243}, V245)) end end end(E421)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E419)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E417)); _ -> case V14 of [E410 | E411] -> (fun (V262, V263) -> fun (V264) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V262, V13, V263, V15, V16, V17, V264)) end end(E410, E411)); [] -> begin (V265 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Just', E412} -> (fun (V266) -> case V266 of {'Idris.Builtin.MkPair', E413, E414} -> (fun (V267, V268) -> case V267 of {'Idris.Builtin.MkPair', E415, E416} -> (fun (V269, V270) -> fun (V271) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V265, V6, V7, V8, V9, V10, V19, V25, V21, V12, V270, V13, [], V268, V16, V17, V271)) end end(E415, E416)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E413, E414)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E412)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V272) -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V265, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, [], V15, V16, V17, V272)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V12 of {'Idris.Builtin.MkPair', E371, E372} -> (fun (V273, V274) -> fun (V275) -> case V13 of [E375 | E376] -> (fun (V276, V277) -> begin (V278 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V275))), case V278 of {'Idris.Prelude.Types.Left', E377} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E377)); {'Idris.Prelude.Types.Right', E378} -> (fun (V280) -> begin (V281 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V275))), case V281 of {'Idris.Prelude.Types.Left', E379} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E379)); {'Idris.Prelude.Types.Right', E380} -> (fun (V283) -> begin (V284 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V275))), case V284 of {'Idris.Prelude.Types.Left', E381} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E381)); {'Idris.Prelude.Types.Right', E382} -> (fun (V286) -> begin (V287 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V275))), case V287 of {'Idris.Prelude.Types.Left', E383} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E383)); {'Idris.Prelude.Types.Right', E384} -> (fun (V289) -> begin (V294 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V290) -> fun (V291) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V290, V291)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V292) -> fun (V293) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V292, V293)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V286, {'Idris.Core.TT.TType', V9}, V275))), case V294 of {'Idris.Prelude.Types.Left', E385} -> (fun (V295) -> {'Idris.Prelude.Types.Left', V295} end(E385)); {'Idris.Prelude.Types.Right', E386} -> (fun (V296) -> begin (V297 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V296))), begin (V302 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V298) -> fun (V299) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V298, V299)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V300) -> fun (V301) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V300, V301)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V289, {'Idris.Core.TT.TType', V9}, V275))), case V302 of {'Idris.Prelude.Types.Left', E387} -> (fun (V303) -> {'Idris.Prelude.Types.Left', V303} end(E387)); {'Idris.Prelude.Types.Right', E388} -> (fun (V304) -> begin (V305 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V276, {'Idris.Prelude.Types.Just', V297}, V275))), case V305 of {'Idris.Prelude.Types.Left', E389} -> (fun (V306) -> {'Idris.Prelude.Types.Left', V306} end(E389)); {'Idris.Prelude.Types.Right', E390} -> (fun (V307) -> case V307 of {'Idris.Builtin.MkPair', E391, E392} -> (fun (V308, V309) -> begin (V310 = {'Idris.Core.TT.App', V9, V10, V308}), begin (V312 = begin (V311 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V311} end), case V312 of {'Idris.Prelude.Types.Left', E393} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E393)); {'Idris.Prelude.Types.Right', E394} -> (fun (V314) -> begin (V315 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V314, V8, V304))(V275))), case V315 of {'Idris.Prelude.Types.Left', E395} -> (fun (V316) -> {'Idris.Prelude.Types.Left', V316} end(E395)); {'Idris.Prelude.Types.Right', E396} -> (fun (V317) -> begin (V318 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V286, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V296}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V304))}))), begin (V319 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V318, V275))), case V319 of {'Idris.Prelude.Types.Left', E397} -> (fun (V320) -> {'Idris.Prelude.Types.Left', V320} end(E397)); {'Idris.Prelude.Types.Right', E398} -> (fun (V321) -> begin (V323 = case V17 of {'Idris.Prelude.Types.Just', E399} -> (fun (V322) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V322, V275)) end(E399)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V323 of {'Idris.Prelude.Types.Left', E400} -> (fun (V324) -> {'Idris.Prelude.Types.Left', V324} end(E400)); {'Idris.Prelude.Types.Right', E401} -> (fun (V325) -> begin (V326 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V310, V317, {'Idris.Builtin.MkPair', V273, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V274))}, V277, V14, V15, V16, V17))(V275))), case V326 of {'Idris.Prelude.Types.Left', E402} -> (fun (V327) -> {'Idris.Prelude.Types.Left', V327} end(E402)); {'Idris.Prelude.Types.Right', E403} -> (fun (V328) -> begin (V329 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V314, V8, V11)), V318))(V275))), case V329 of {'Idris.Prelude.Types.Left', E404} -> (fun (V330) -> {'Idris.Prelude.Types.Left', V330} end(E404)); {'Idris.Prelude.Types.Right', E405} -> (fun (V331) -> begin (V332 = {'Idris.Builtin.MkPair', V308, V309}), ('case--case block in checkAppWith\x{27}-10093'(V273, V274, V276, V277, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V286, V289, V296, V297, V304, V308, V309, V332, V310, V314, V317, V318, V328, V331, case V331 of {'Idris.Core.Unify.MkUnifyResult', E406, E407, E408, E409} -> (fun (V333, V334, V335, V336) -> V333 end(E406, E407, E408, E409)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V275)) end end(E405)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E403)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E401)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E398)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E396)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E394)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E391, E392)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E390)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E388)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E386)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E384)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E382)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E380)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E378)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E375, E376)); _ -> case V13 of [] -> begin (V338 = begin (V337 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V337} end), case V338 of {'Idris.Prelude.Types.Left', E373} -> (fun (V339) -> {'Idris.Prelude.Types.Left', V339} end(E373)); {'Idris.Prelude.Types.Right', E374} -> (fun (V340) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> fun (V345) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V343, V344, V345)) end end end end end, fun (V346) -> fun (V347) -> fun (V348) -> fun (V349) -> fun (V350) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V348, V349, V350)) end end end end end, fun (V351) -> fun (V352) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V352)) end end, fun (V353) -> fun (V354) -> fun (V355) -> fun (V356) -> fun (V357) -> fun (V358) -> fun (V359) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V356, V357, V358, V359)) end end end end end end end, fun (V360) -> fun (V361) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V361)) end end, fun (V362) -> fun (V363) -> fun (V364) -> fun (V365) -> fun (V366) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V364, V365, V366)) end end end end end}, fun (V367) -> ('un--isImplicitAs'(V367)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V368) -> ('Idris.Idris2.Builtin':'un--snd'(V368)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V369) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V369)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V340, V8, V11)), V17, V275)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V370) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V371) -> ('Idris.Idris2.Builtin':'un--fst'(V371)) end, V15)))), V10}, V275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E374)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E371, E372)); _ -> fun (V372) -> case V13 of [] -> begin (V374 = begin (V373 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V373} end), case V374 of {'Idris.Prelude.Types.Left', E369} -> (fun (V375) -> {'Idris.Prelude.Types.Left', V375} end(E369)); {'Idris.Prelude.Types.Right', E370} -> (fun (V376) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V377) -> fun (V378) -> fun (V379) -> fun (V380) -> fun (V381) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V379, V380, V381)) end end end end end, fun (V382) -> fun (V383) -> fun (V384) -> fun (V385) -> fun (V386) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V384, V385, V386)) end end end end end, fun (V387) -> fun (V388) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V388)) end end, fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> fun (V394) -> fun (V395) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V392, V393, V394, V395)) end end end end end end end, fun (V396) -> fun (V397) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V397)) end end, fun (V398) -> fun (V399) -> fun (V400) -> fun (V401) -> fun (V402) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V400, V401, V402)) end end end end end}, fun (V403) -> ('un--isImplicitAs'(V403)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V404) -> ('Idris.Idris2.Builtin':'un--snd'(V404)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V405) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V405)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V376, V8, V11)), V17, V372)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V406) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V407) -> ('Idris.Idris2.Builtin':'un--fst'(V407)) end, V15)))), V10}, V372)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E370)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V14 of [E362 | E363] -> (fun (V408, V409) -> fun (V410) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V408, V13, V409, V15, V16, V17, V410)) end end(E362, E363)); [] -> begin (V411 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Just', E364} -> (fun (V412) -> case V412 of {'Idris.Builtin.MkPair', E365, E366} -> (fun (V413, V414) -> case V413 of {'Idris.Builtin.MkPair', E367, E368} -> (fun (V415, V416) -> fun (V417) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V411, V6, V7, V8, V9, V10, V19, V25, V21, V12, V416, V13, [], V414, V16, V17, V417)) end end(E367, E368)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E365, E366)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E364)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V418) -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V411, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, [], V15, V16, V17, V418)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V12 of {'Idris.Builtin.MkPair', E323, E324} -> (fun (V419, V420) -> fun (V421) -> case V13 of [E327 | E328] -> (fun (V422, V423) -> begin (V424 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V421))), case V424 of {'Idris.Prelude.Types.Left', E329} -> (fun (V425) -> {'Idris.Prelude.Types.Left', V425} end(E329)); {'Idris.Prelude.Types.Right', E330} -> (fun (V426) -> begin (V427 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V421))), case V427 of {'Idris.Prelude.Types.Left', E331} -> (fun (V428) -> {'Idris.Prelude.Types.Left', V428} end(E331)); {'Idris.Prelude.Types.Right', E332} -> (fun (V429) -> begin (V430 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V421))), case V430 of {'Idris.Prelude.Types.Left', E333} -> (fun (V431) -> {'Idris.Prelude.Types.Left', V431} end(E333)); {'Idris.Prelude.Types.Right', E334} -> (fun (V432) -> begin (V433 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V421))), case V433 of {'Idris.Prelude.Types.Left', E335} -> (fun (V434) -> {'Idris.Prelude.Types.Left', V434} end(E335)); {'Idris.Prelude.Types.Right', E336} -> (fun (V435) -> begin (V440 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V436) -> fun (V437) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V436, V437)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V438) -> fun (V439) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V438, V439)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V432, {'Idris.Core.TT.TType', V9}, V421))), case V440 of {'Idris.Prelude.Types.Left', E337} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E337)); {'Idris.Prelude.Types.Right', E338} -> (fun (V442) -> begin (V443 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V442))), begin (V448 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V444) -> fun (V445) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V444, V445)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V446) -> fun (V447) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V446, V447)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V435, {'Idris.Core.TT.TType', V9}, V421))), case V448 of {'Idris.Prelude.Types.Left', E339} -> (fun (V449) -> {'Idris.Prelude.Types.Left', V449} end(E339)); {'Idris.Prelude.Types.Right', E340} -> (fun (V450) -> begin (V451 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V422, {'Idris.Prelude.Types.Just', V443}, V421))), case V451 of {'Idris.Prelude.Types.Left', E341} -> (fun (V452) -> {'Idris.Prelude.Types.Left', V452} end(E341)); {'Idris.Prelude.Types.Right', E342} -> (fun (V453) -> case V453 of {'Idris.Builtin.MkPair', E343, E344} -> (fun (V454, V455) -> begin (V456 = {'Idris.Core.TT.App', V9, V10, V454}), begin (V458 = begin (V457 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V457} end), case V458 of {'Idris.Prelude.Types.Left', E345} -> (fun (V459) -> {'Idris.Prelude.Types.Left', V459} end(E345)); {'Idris.Prelude.Types.Right', E346} -> (fun (V460) -> begin (V461 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V460, V8, V450))(V421))), case V461 of {'Idris.Prelude.Types.Left', E347} -> (fun (V462) -> {'Idris.Prelude.Types.Left', V462} end(E347)); {'Idris.Prelude.Types.Right', E348} -> (fun (V463) -> begin (V464 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V432, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V442}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V450))}))), begin (V465 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V464, V421))), case V465 of {'Idris.Prelude.Types.Left', E349} -> (fun (V466) -> {'Idris.Prelude.Types.Left', V466} end(E349)); {'Idris.Prelude.Types.Right', E350} -> (fun (V467) -> begin (V469 = case V17 of {'Idris.Prelude.Types.Just', E351} -> (fun (V468) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V468, V421)) end(E351)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V469 of {'Idris.Prelude.Types.Left', E352} -> (fun (V470) -> {'Idris.Prelude.Types.Left', V470} end(E352)); {'Idris.Prelude.Types.Right', E353} -> (fun (V471) -> begin (V472 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V456, V463, {'Idris.Builtin.MkPair', V419, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V420))}, V423, V14, V15, V16, V17))(V421))), case V472 of {'Idris.Prelude.Types.Left', E354} -> (fun (V473) -> {'Idris.Prelude.Types.Left', V473} end(E354)); {'Idris.Prelude.Types.Right', E355} -> (fun (V474) -> begin (V475 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V460, V8, V11)), V464))(V421))), case V475 of {'Idris.Prelude.Types.Left', E356} -> (fun (V476) -> {'Idris.Prelude.Types.Left', V476} end(E356)); {'Idris.Prelude.Types.Right', E357} -> (fun (V477) -> begin (V478 = {'Idris.Builtin.MkPair', V454, V455}), ('case--case block in checkAppWith\x{27}-10093'(V419, V420, V422, V423, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V432, V435, V442, V443, V450, V454, V455, V478, V456, V460, V463, V464, V474, V477, case V477 of {'Idris.Core.Unify.MkUnifyResult', E358, E359, E360, E361} -> (fun (V479, V480, V481, V482) -> V479 end(E358, E359, E360, E361)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V421)) end end(E357)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E355)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E350)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E346)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E343, E344)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E342)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E340)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E338)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E336)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E334)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E330)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E327, E328)); _ -> case V13 of [] -> begin (V484 = begin (V483 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V483} end), case V484 of {'Idris.Prelude.Types.Left', E325} -> (fun (V485) -> {'Idris.Prelude.Types.Left', V485} end(E325)); {'Idris.Prelude.Types.Right', E326} -> (fun (V486) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V487) -> fun (V488) -> fun (V489) -> fun (V490) -> fun (V491) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V489, V490, V491)) end end end end end, fun (V492) -> fun (V493) -> fun (V494) -> fun (V495) -> fun (V496) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V494, V495, V496)) end end end end end, fun (V497) -> fun (V498) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V498)) end end, fun (V499) -> fun (V500) -> fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> fun (V505) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V502, V503, V504, V505)) end end end end end end end, fun (V506) -> fun (V507) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V507)) end end, fun (V508) -> fun (V509) -> fun (V510) -> fun (V511) -> fun (V512) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V510, V511, V512)) end end end end end}, fun (V513) -> ('un--isImplicitAs'(V513)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V514) -> ('Idris.Idris2.Builtin':'un--snd'(V514)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V515) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V515)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V486, V8, V11)), V17, V421)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V516) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V517) -> ('Idris.Idris2.Builtin':'un--fst'(V517)) end, V15)))), V10}, V421)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E326)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E323, E324)); _ -> fun (V518) -> case V13 of [] -> begin (V520 = begin (V519 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V519} end), case V520 of {'Idris.Prelude.Types.Left', E321} -> (fun (V521) -> {'Idris.Prelude.Types.Left', V521} end(E321)); {'Idris.Prelude.Types.Right', E322} -> (fun (V522) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V523) -> fun (V524) -> fun (V525) -> fun (V526) -> fun (V527) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V525, V526, V527)) end end end end end, fun (V528) -> fun (V529) -> fun (V530) -> fun (V531) -> fun (V532) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V530, V531, V532)) end end end end end, fun (V533) -> fun (V534) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V534)) end end, fun (V535) -> fun (V536) -> fun (V537) -> fun (V538) -> fun (V539) -> fun (V540) -> fun (V541) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V538, V539, V540, V541)) end end end end end end end, fun (V542) -> fun (V543) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V543)) end end, fun (V544) -> fun (V545) -> fun (V546) -> fun (V547) -> fun (V548) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V546, V547, V548)) end end end end end}, fun (V549) -> ('un--isImplicitAs'(V549)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V550) -> ('Idris.Idris2.Builtin':'un--snd'(V550)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V551) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V551)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V522, V8, V11)), V17, V518)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V552) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V553) -> ('Idris.Idris2.Builtin':'un--fst'(V553)) end, V15)))), V10}, V518)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E322)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V14 of [E314 | E315] -> (fun (V554, V555) -> fun (V556) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V554, V13, V555, V15, V16, V17, V556)) end end(E314, E315)); [] -> begin (V557 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Just', E316} -> (fun (V558) -> case V558 of {'Idris.Builtin.MkPair', E317, E318} -> (fun (V559, V560) -> case V559 of {'Idris.Builtin.MkPair', E319, E320} -> (fun (V561, V562) -> fun (V563) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V557, V6, V7, V8, V9, V10, V19, V25, V21, V12, V562, V13, [], V560, V16, V17, V563)) end end(E319, E320)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E317, E318)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E316)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V564) -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V557, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, [], V15, V16, V17, V564)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V12 of {'Idris.Builtin.MkPair', E275, E276} -> (fun (V565, V566) -> fun (V567) -> case V13 of [E279 | E280] -> (fun (V568, V569) -> begin (V570 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V567))), case V570 of {'Idris.Prelude.Types.Left', E281} -> (fun (V571) -> {'Idris.Prelude.Types.Left', V571} end(E281)); {'Idris.Prelude.Types.Right', E282} -> (fun (V572) -> begin (V573 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V567))), case V573 of {'Idris.Prelude.Types.Left', E283} -> (fun (V574) -> {'Idris.Prelude.Types.Left', V574} end(E283)); {'Idris.Prelude.Types.Right', E284} -> (fun (V575) -> begin (V576 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V567))), case V576 of {'Idris.Prelude.Types.Left', E285} -> (fun (V577) -> {'Idris.Prelude.Types.Left', V577} end(E285)); {'Idris.Prelude.Types.Right', E286} -> (fun (V578) -> begin (V579 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V567))), case V579 of {'Idris.Prelude.Types.Left', E287} -> (fun (V580) -> {'Idris.Prelude.Types.Left', V580} end(E287)); {'Idris.Prelude.Types.Right', E288} -> (fun (V581) -> begin (V586 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V582) -> fun (V583) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V582, V583)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V584) -> fun (V585) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V584, V585)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V578, {'Idris.Core.TT.TType', V9}, V567))), case V586 of {'Idris.Prelude.Types.Left', E289} -> (fun (V587) -> {'Idris.Prelude.Types.Left', V587} end(E289)); {'Idris.Prelude.Types.Right', E290} -> (fun (V588) -> begin (V589 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V588))), begin (V594 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V590) -> fun (V591) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V590, V591)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V592) -> fun (V593) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V592, V593)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V581, {'Idris.Core.TT.TType', V9}, V567))), case V594 of {'Idris.Prelude.Types.Left', E291} -> (fun (V595) -> {'Idris.Prelude.Types.Left', V595} end(E291)); {'Idris.Prelude.Types.Right', E292} -> (fun (V596) -> begin (V597 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V568, {'Idris.Prelude.Types.Just', V589}, V567))), case V597 of {'Idris.Prelude.Types.Left', E293} -> (fun (V598) -> {'Idris.Prelude.Types.Left', V598} end(E293)); {'Idris.Prelude.Types.Right', E294} -> (fun (V599) -> case V599 of {'Idris.Builtin.MkPair', E295, E296} -> (fun (V600, V601) -> begin (V602 = {'Idris.Core.TT.App', V9, V10, V600}), begin (V604 = begin (V603 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V603} end), case V604 of {'Idris.Prelude.Types.Left', E297} -> (fun (V605) -> {'Idris.Prelude.Types.Left', V605} end(E297)); {'Idris.Prelude.Types.Right', E298} -> (fun (V606) -> begin (V607 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V606, V8, V596))(V567))), case V607 of {'Idris.Prelude.Types.Left', E299} -> (fun (V608) -> {'Idris.Prelude.Types.Left', V608} end(E299)); {'Idris.Prelude.Types.Right', E300} -> (fun (V609) -> begin (V610 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V578, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V588}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V596))}))), begin (V611 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V610, V567))), case V611 of {'Idris.Prelude.Types.Left', E301} -> (fun (V612) -> {'Idris.Prelude.Types.Left', V612} end(E301)); {'Idris.Prelude.Types.Right', E302} -> (fun (V613) -> begin (V615 = case V17 of {'Idris.Prelude.Types.Just', E303} -> (fun (V614) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V614, V567)) end(E303)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V615 of {'Idris.Prelude.Types.Left', E304} -> (fun (V616) -> {'Idris.Prelude.Types.Left', V616} end(E304)); {'Idris.Prelude.Types.Right', E305} -> (fun (V617) -> begin (V618 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V602, V609, {'Idris.Builtin.MkPair', V565, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V566))}, V569, V14, V15, V16, V17))(V567))), case V618 of {'Idris.Prelude.Types.Left', E306} -> (fun (V619) -> {'Idris.Prelude.Types.Left', V619} end(E306)); {'Idris.Prelude.Types.Right', E307} -> (fun (V620) -> begin (V621 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V606, V8, V11)), V610))(V567))), case V621 of {'Idris.Prelude.Types.Left', E308} -> (fun (V622) -> {'Idris.Prelude.Types.Left', V622} end(E308)); {'Idris.Prelude.Types.Right', E309} -> (fun (V623) -> begin (V624 = {'Idris.Builtin.MkPair', V600, V601}), ('case--case block in checkAppWith\x{27}-10093'(V565, V566, V568, V569, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V578, V581, V588, V589, V596, V600, V601, V624, V602, V606, V609, V610, V620, V623, case V623 of {'Idris.Core.Unify.MkUnifyResult', E310, E311, E312, E313} -> (fun (V625, V626, V627, V628) -> V625 end(E310, E311, E312, E313)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V567)) end end(E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E298)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E295, E296)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E294)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E292)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E290)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E288)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E286)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E279, E280)); _ -> case V13 of [] -> begin (V630 = begin (V629 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V629} end), case V630 of {'Idris.Prelude.Types.Left', E277} -> (fun (V631) -> {'Idris.Prelude.Types.Left', V631} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V632) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V633) -> fun (V634) -> fun (V635) -> fun (V636) -> fun (V637) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V635, V636, V637)) end end end end end, fun (V638) -> fun (V639) -> fun (V640) -> fun (V641) -> fun (V642) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V640, V641, V642)) end end end end end, fun (V643) -> fun (V644) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V644)) end end, fun (V645) -> fun (V646) -> fun (V647) -> fun (V648) -> fun (V649) -> fun (V650) -> fun (V651) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V648, V649, V650, V651)) end end end end end end end, fun (V652) -> fun (V653) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V653)) end end, fun (V654) -> fun (V655) -> fun (V656) -> fun (V657) -> fun (V658) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V656, V657, V658)) end end end end end}, fun (V659) -> ('un--isImplicitAs'(V659)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V660) -> ('Idris.Idris2.Builtin':'un--snd'(V660)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V661) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V661)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V632, V8, V11)), V17, V567)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V662) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V663) -> ('Idris.Idris2.Builtin':'un--fst'(V663)) end, V15)))), V10}, V567)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E275, E276)); _ -> fun (V664) -> case V13 of [] -> begin (V666 = begin (V665 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V665} end), case V666 of {'Idris.Prelude.Types.Left', E273} -> (fun (V667) -> {'Idris.Prelude.Types.Left', V667} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V668) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V669) -> fun (V670) -> fun (V671) -> fun (V672) -> fun (V673) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V671, V672, V673)) end end end end end, fun (V674) -> fun (V675) -> fun (V676) -> fun (V677) -> fun (V678) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V676, V677, V678)) end end end end end, fun (V679) -> fun (V680) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V680)) end end, fun (V681) -> fun (V682) -> fun (V683) -> fun (V684) -> fun (V685) -> fun (V686) -> fun (V687) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V684, V685, V686, V687)) end end end end end end end, fun (V688) -> fun (V689) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V689)) end end, fun (V690) -> fun (V691) -> fun (V692) -> fun (V693) -> fun (V694) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V692, V693, V694)) end end end end end}, fun (V695) -> ('un--isImplicitAs'(V695)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V696) -> ('Idris.Idris2.Builtin':'un--snd'(V696)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V697) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V697)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V668, V8, V11)), V17, V664)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V698) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V699) -> ('Idris.Idris2.Builtin':'un--fst'(V699)) end, V15)))), V10}, V664)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V14 of [E266 | E267] -> (fun (V700, V701) -> fun (V702) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V700, V13, V701, V15, V16, V17, V702)) end end(E266, E267)); [] -> begin (V703 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Just', E268} -> (fun (V704) -> case V704 of {'Idris.Builtin.MkPair', E269, E270} -> (fun (V705, V706) -> case V705 of {'Idris.Builtin.MkPair', E271, E272} -> (fun (V707, V708) -> fun (V709) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V703, V6, V7, V8, V9, V10, V19, V25, V21, V12, V708, V13, [], V706, V16, V17, V709)) end end(E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E269, E270)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E268)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V710) -> ('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V703, V6, V7, V8, V9, V10, V19, V25, V21, V12, V13, [], V15, V16, V17, V710)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V12 of {'Idris.Builtin.MkPair', E227, E228} -> (fun (V711, V712) -> fun (V713) -> case V13 of [E231 | E232] -> (fun (V714, V715) -> begin (V716 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V713))), case V716 of {'Idris.Prelude.Types.Left', E233} -> (fun (V717) -> {'Idris.Prelude.Types.Left', V717} end(E233)); {'Idris.Prelude.Types.Right', E234} -> (fun (V718) -> begin (V719 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V713))), case V719 of {'Idris.Prelude.Types.Left', E235} -> (fun (V720) -> {'Idris.Prelude.Types.Left', V720} end(E235)); {'Idris.Prelude.Types.Right', E236} -> (fun (V721) -> begin (V722 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V713))), case V722 of {'Idris.Prelude.Types.Left', E237} -> (fun (V723) -> {'Idris.Prelude.Types.Left', V723} end(E237)); {'Idris.Prelude.Types.Right', E238} -> (fun (V724) -> begin (V725 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V713))), case V725 of {'Idris.Prelude.Types.Left', E239} -> (fun (V726) -> {'Idris.Prelude.Types.Left', V726} end(E239)); {'Idris.Prelude.Types.Right', E240} -> (fun (V727) -> begin (V732 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V728) -> fun (V729) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V728, V729)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V730) -> fun (V731) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V730, V731)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V724, {'Idris.Core.TT.TType', V9}, V713))), case V732 of {'Idris.Prelude.Types.Left', E241} -> (fun (V733) -> {'Idris.Prelude.Types.Left', V733} end(E241)); {'Idris.Prelude.Types.Right', E242} -> (fun (V734) -> begin (V735 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V734))), begin (V740 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V736) -> fun (V737) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V736, V737)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V738) -> fun (V739) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V738, V739)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V727, {'Idris.Core.TT.TType', V9}, V713))), case V740 of {'Idris.Prelude.Types.Left', E243} -> (fun (V741) -> {'Idris.Prelude.Types.Left', V741} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V742) -> begin (V743 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V714, {'Idris.Prelude.Types.Just', V735}, V713))), case V743 of {'Idris.Prelude.Types.Left', E245} -> (fun (V744) -> {'Idris.Prelude.Types.Left', V744} end(E245)); {'Idris.Prelude.Types.Right', E246} -> (fun (V745) -> case V745 of {'Idris.Builtin.MkPair', E247, E248} -> (fun (V746, V747) -> begin (V748 = {'Idris.Core.TT.App', V9, V10, V746}), begin (V750 = begin (V749 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V749} end), case V750 of {'Idris.Prelude.Types.Left', E249} -> (fun (V751) -> {'Idris.Prelude.Types.Left', V751} end(E249)); {'Idris.Prelude.Types.Right', E250} -> (fun (V752) -> begin (V753 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V752, V8, V742))(V713))), case V753 of {'Idris.Prelude.Types.Left', E251} -> (fun (V754) -> {'Idris.Prelude.Types.Left', V754} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V755) -> begin (V756 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V724, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V734}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V742))}))), begin (V757 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V756, V713))), case V757 of {'Idris.Prelude.Types.Left', E253} -> (fun (V758) -> {'Idris.Prelude.Types.Left', V758} end(E253)); {'Idris.Prelude.Types.Right', E254} -> (fun (V759) -> begin (V761 = case V17 of {'Idris.Prelude.Types.Just', E255} -> (fun (V760) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V760, V713)) end(E255)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V761 of {'Idris.Prelude.Types.Left', E256} -> (fun (V762) -> {'Idris.Prelude.Types.Left', V762} end(E256)); {'Idris.Prelude.Types.Right', E257} -> (fun (V763) -> begin (V764 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V748, V755, {'Idris.Builtin.MkPair', V711, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V712))}, V715, V14, V15, V16, V17))(V713))), case V764 of {'Idris.Prelude.Types.Left', E258} -> (fun (V765) -> {'Idris.Prelude.Types.Left', V765} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V766) -> begin (V767 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V752, V8, V11)), V756))(V713))), case V767 of {'Idris.Prelude.Types.Left', E260} -> (fun (V768) -> {'Idris.Prelude.Types.Left', V768} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V769) -> begin (V770 = {'Idris.Builtin.MkPair', V746, V747}), ('case--case block in checkAppWith\x{27}-10093'(V711, V712, V714, V715, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V724, V727, V734, V735, V742, V746, V747, V770, V748, V752, V755, V756, V766, V769, case V769 of {'Idris.Core.Unify.MkUnifyResult', E262, E263, E264, E265} -> (fun (V771, V772, V773, V774) -> V771 end(E262, E263, E264, E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V713)) end end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E250)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E247, E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E231, E232)); _ -> case V13 of [] -> begin (V776 = begin (V775 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V775} end), case V776 of {'Idris.Prelude.Types.Left', E229} -> (fun (V777) -> {'Idris.Prelude.Types.Left', V777} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V778) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V779) -> fun (V780) -> fun (V781) -> fun (V782) -> fun (V783) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V781, V782, V783)) end end end end end, fun (V784) -> fun (V785) -> fun (V786) -> fun (V787) -> fun (V788) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V786, V787, V788)) end end end end end, fun (V789) -> fun (V790) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V790)) end end, fun (V791) -> fun (V792) -> fun (V793) -> fun (V794) -> fun (V795) -> fun (V796) -> fun (V797) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V794, V795, V796, V797)) end end end end end end end, fun (V798) -> fun (V799) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V799)) end end, fun (V800) -> fun (V801) -> fun (V802) -> fun (V803) -> fun (V804) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V802, V803, V804)) end end end end end}, fun (V805) -> ('un--isImplicitAs'(V805)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V806) -> ('Idris.Idris2.Builtin':'un--snd'(V806)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V807) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V807)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V778, V8, V11)), V17, V713)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V808) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V809) -> ('Idris.Idris2.Builtin':'un--fst'(V809)) end, V15)))), V10}, V713)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E227, E228)); _ -> fun (V810) -> case V13 of [] -> begin (V812 = begin (V811 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V811} end), case V812 of {'Idris.Prelude.Types.Left', E225} -> (fun (V813) -> {'Idris.Prelude.Types.Left', V813} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V814) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V815) -> fun (V816) -> fun (V817) -> fun (V818) -> fun (V819) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V817, V818, V819)) end end end end end, fun (V820) -> fun (V821) -> fun (V822) -> fun (V823) -> fun (V824) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V822, V823, V824)) end end end end end, fun (V825) -> fun (V826) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V826)) end end, fun (V827) -> fun (V828) -> fun (V829) -> fun (V830) -> fun (V831) -> fun (V832) -> fun (V833) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V830, V831, V832, V833)) end end end end end end end, fun (V834) -> fun (V835) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V835)) end end, fun (V836) -> fun (V837) -> fun (V838) -> fun (V839) -> fun (V840) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V838, V839, V840)) end end end end end}, fun (V841) -> ('un--isImplicitAs'(V841)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V842) -> ('Idris.Idris2.Builtin':'un--snd'(V842)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V843) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V843)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V814, V8, V11)), V17, V810)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V844) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V845) -> ('Idris.Idris2.Builtin':'un--fst'(V845)) end, V15)))), V10}, V810)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end()); {'Idris.Core.TT.DefImplicit', E430} -> (fun (V846) -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E451} -> (fun (V847) -> begin (V848 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), fun (V849) -> begin (V850 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V847))(V849))), case V850 of {'Idris.Prelude.Types.Left', E452} -> (fun (V851) -> {'Idris.Prelude.Types.Left', V851} end(E452)); {'Idris.Prelude.Types.Right', E453} -> (fun (V852) -> begin (V854 = begin (V853 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V853} end), case V854 of {'Idris.Prelude.Types.Left', E454} -> (fun (V855) -> {'Idris.Prelude.Types.Left', V855} end(E454)); {'Idris.Prelude.Types.Right', E455} -> (fun (V856) -> begin (V857 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.DefImplicit', V846}, V25}, V21}), case V852 of {'Idris.Core.Value.NBind', E456, E457, E458, E459} -> (fun (V858, V859, V860, V861) -> case V860 of {'Idris.Core.TT.Pi', E460, E461, E462, E463} -> (fun (V862, V863, V864, V865) -> case V864 of {'Idris.Core.TT.DefImplicit', E464} -> (fun (V866) -> begin (V867 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Closure'(V1, V0, V856, V8, V846, V866, V849))), case V867 of {'Idris.Prelude.Types.Left', E465} -> (fun (V868) -> {'Idris.Prelude.Types.Left', V868} end(E465)); {'Idris.Prelude.Types.Right', E466} -> (fun (V869) -> case V869 of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V856, V8, V857)), {'Idris.Prelude.Types.Just', V847}, V849)); 0 -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V848, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V847}, V849)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E466)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E464)); _ -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V848, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V847}, V849)) end end(E460, E461, E462, E463)); _ -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V848, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V847}, V849)) end end(E456, E457, E458, E459)); _ -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V848, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V847}, V849)) end end end(E455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E453)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E451)); _ -> begin (V870 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V871) -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V870, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, V13, V14, V15, V16, V17, V871)) end end()); {'Idris.Prelude.Types.Just', E446} -> (fun (V872) -> case V872 of {'Idris.Builtin.MkPair', E447, E448} -> (fun (V873, V874) -> case V873 of {'Idris.Builtin.MkPair', E449, E450} -> (fun (V875, V876) -> fun (V877) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V870, V6, V7, V8, V9, V10, V19, V25, V21, V12, V876, V13, V14, V874, V16, V17, V877)) end end(E449, E450)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E447, E448)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E446)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V878 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V879) -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V878, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, V13, V14, V15, V16, V17, V879)) end end()); {'Idris.Prelude.Types.Just', E441} -> (fun (V880) -> case V880 of {'Idris.Builtin.MkPair', E442, E443} -> (fun (V881, V882) -> case V881 of {'Idris.Builtin.MkPair', E444, E445} -> (fun (V883, V884) -> fun (V885) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V878, V6, V7, V8, V9, V10, V19, V25, V21, V12, V884, V13, V14, V882, V16, V17, V885)) end end(E444, E445)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E442, E443)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E441)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V886 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V887) -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V886, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, V13, V14, V15, V16, V17, V887)) end end()); {'Idris.Prelude.Types.Just', E436} -> (fun (V888) -> case V888 of {'Idris.Builtin.MkPair', E437, E438} -> (fun (V889, V890) -> case V889 of {'Idris.Builtin.MkPair', E439, E440} -> (fun (V891, V892) -> fun (V893) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V886, V6, V7, V8, V9, V10, V19, V25, V21, V12, V892, V13, V14, V890, V16, V17, V893)) end end(E439, E440)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E437, E438)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E436)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V894 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), case ('un--findNamed'(V19, V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V895) -> ('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V894, V6, V7, V8, V9, V10, V19, V846, V25, V21, V12, V13, V14, V15, V16, V17, V895)) end end()); {'Idris.Prelude.Types.Just', E431} -> (fun (V896) -> case V896 of {'Idris.Builtin.MkPair', E432, E433} -> (fun (V897, V898) -> case V897 of {'Idris.Builtin.MkPair', E434, E435} -> (fun (V899, V900) -> fun (V901) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V894, V6, V7, V8, V9, V10, V19, V25, V21, V12, V900, V13, V14, V898, V16, V17, V901)) end end(E434, E435)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E432, E433)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E431)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E430)); _ -> case V12 of {'Idris.Builtin.MkPair', E92, E93} -> (fun (V902, V903) -> fun (V904) -> case V13 of [E96 | E97] -> (fun (V905, V906) -> begin (V907 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V904))), case V907 of {'Idris.Prelude.Types.Left', E98} -> (fun (V908) -> {'Idris.Prelude.Types.Left', V908} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V909) -> begin (V910 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V904))), case V910 of {'Idris.Prelude.Types.Left', E100} -> (fun (V911) -> {'Idris.Prelude.Types.Left', V911} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V912) -> begin (V913 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V904))), case V913 of {'Idris.Prelude.Types.Left', E102} -> (fun (V914) -> {'Idris.Prelude.Types.Left', V914} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V915) -> begin (V916 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V904))), case V916 of {'Idris.Prelude.Types.Left', E104} -> (fun (V917) -> {'Idris.Prelude.Types.Left', V917} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V918) -> begin (V923 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V919) -> fun (V920) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V919, V920)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V921) -> fun (V922) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V921, V922)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V915, {'Idris.Core.TT.TType', V9}, V904))), case V923 of {'Idris.Prelude.Types.Left', E106} -> (fun (V924) -> {'Idris.Prelude.Types.Left', V924} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V925) -> begin (V926 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V925))), begin (V931 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V927) -> fun (V928) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V927, V928)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V929) -> fun (V930) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V929, V930)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V918, {'Idris.Core.TT.TType', V9}, V904))), case V931 of {'Idris.Prelude.Types.Left', E108} -> (fun (V932) -> {'Idris.Prelude.Types.Left', V932} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V933) -> begin (V934 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V905, {'Idris.Prelude.Types.Just', V926}, V904))), case V934 of {'Idris.Prelude.Types.Left', E110} -> (fun (V935) -> {'Idris.Prelude.Types.Left', V935} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V936) -> case V936 of {'Idris.Builtin.MkPair', E112, E113} -> (fun (V937, V938) -> begin (V939 = {'Idris.Core.TT.App', V9, V10, V937}), begin (V941 = begin (V940 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V940} end), case V941 of {'Idris.Prelude.Types.Left', E114} -> (fun (V942) -> {'Idris.Prelude.Types.Left', V942} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V943) -> begin (V944 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V943, V8, V933))(V904))), case V944 of {'Idris.Prelude.Types.Left', E116} -> (fun (V945) -> {'Idris.Prelude.Types.Left', V945} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V946) -> begin (V947 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V915, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V925}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V933))}))), begin (V948 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V947, V904))), case V948 of {'Idris.Prelude.Types.Left', E118} -> (fun (V949) -> {'Idris.Prelude.Types.Left', V949} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V950) -> begin (V952 = case V17 of {'Idris.Prelude.Types.Just', E120} -> (fun (V951) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V951, V904)) end(E120)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V952 of {'Idris.Prelude.Types.Left', E121} -> (fun (V953) -> {'Idris.Prelude.Types.Left', V953} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V954) -> begin (V955 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V939, V946, {'Idris.Builtin.MkPair', V902, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V903))}, V906, V14, V15, V16, V17))(V904))), case V955 of {'Idris.Prelude.Types.Left', E123} -> (fun (V956) -> {'Idris.Prelude.Types.Left', V956} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V957) -> begin (V958 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V943, V8, V11)), V947))(V904))), case V958 of {'Idris.Prelude.Types.Left', E125} -> (fun (V959) -> {'Idris.Prelude.Types.Left', V959} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V960) -> begin (V961 = {'Idris.Builtin.MkPair', V937, V938}), ('case--case block in checkAppWith\x{27}-10093'(V902, V903, V905, V906, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V915, V918, V925, V926, V933, V937, V938, V961, V939, V943, V946, V947, V957, V960, case V960 of {'Idris.Core.Unify.MkUnifyResult', E127, E128, E129, E130} -> (fun (V962, V963, V964, V965) -> V962 end(E127, E128, E129, E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V904)) end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96, E97)); _ -> case V13 of [] -> begin (V967 = begin (V966 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V966} end), case V967 of {'Idris.Prelude.Types.Left', E94} -> (fun (V968) -> {'Idris.Prelude.Types.Left', V968} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V969) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V970) -> fun (V971) -> fun (V972) -> fun (V973) -> fun (V974) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V972, V973, V974)) end end end end end, fun (V975) -> fun (V976) -> fun (V977) -> fun (V978) -> fun (V979) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V977, V978, V979)) end end end end end, fun (V980) -> fun (V981) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V981)) end end, fun (V982) -> fun (V983) -> fun (V984) -> fun (V985) -> fun (V986) -> fun (V987) -> fun (V988) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V985, V986, V987, V988)) end end end end end end end, fun (V989) -> fun (V990) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V990)) end end, fun (V991) -> fun (V992) -> fun (V993) -> fun (V994) -> fun (V995) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V993, V994, V995)) end end end end end}, fun (V996) -> ('un--isImplicitAs'(V996)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V997) -> ('Idris.Idris2.Builtin':'un--snd'(V997)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V998) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V998)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V969, V8, V11)), V17, V904)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V999) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1000) -> ('Idris.Idris2.Builtin':'un--fst'(V1000)) end, V15)))), V10}, V904)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92, E93)); _ -> fun (V1001) -> case V13 of [] -> begin (V1003 = begin (V1002 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1002} end), case V1003 of {'Idris.Prelude.Types.Left', E90} -> (fun (V1004) -> {'Idris.Prelude.Types.Left', V1004} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V1005) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1006) -> fun (V1007) -> fun (V1008) -> fun (V1009) -> fun (V1010) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1008, V1009, V1010)) end end end end end, fun (V1011) -> fun (V1012) -> fun (V1013) -> fun (V1014) -> fun (V1015) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1013, V1014, V1015)) end end end end end, fun (V1016) -> fun (V1017) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1017)) end end, fun (V1018) -> fun (V1019) -> fun (V1020) -> fun (V1021) -> fun (V1022) -> fun (V1023) -> fun (V1024) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1021, V1022, V1023, V1024)) end end end end end end end, fun (V1025) -> fun (V1026) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1026)) end end, fun (V1027) -> fun (V1028) -> fun (V1029) -> fun (V1030) -> fun (V1031) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1029, V1030, V1031)) end end end end end}, fun (V1032) -> ('un--isImplicitAs'(V1032)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1033) -> ('Idris.Idris2.Builtin':'un--snd'(V1033)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1034) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1034)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1005, V8, V11)), V17, V1001)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1035) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1036) -> ('Idris.Idris2.Builtin':'un--fst'(V1036)) end, V15)))), V10}, V1001)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E86, E87, E88, E89)); _ -> case V12 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V1037, V1038) -> fun (V1039) -> case V13 of [E51 | E52] -> (fun (V1040, V1041) -> begin (V1042 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V1039))), case V1042 of {'Idris.Prelude.Types.Left', E53} -> (fun (V1043) -> {'Idris.Prelude.Types.Left', V1043} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V1044) -> begin (V1045 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V1039))), case V1045 of {'Idris.Prelude.Types.Left', E55} -> (fun (V1046) -> {'Idris.Prelude.Types.Left', V1046} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V1047) -> begin (V1048 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V1039))), case V1048 of {'Idris.Prelude.Types.Left', E57} -> (fun (V1049) -> {'Idris.Prelude.Types.Left', V1049} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V1050) -> begin (V1051 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V1039))), case V1051 of {'Idris.Prelude.Types.Left', E59} -> (fun (V1052) -> {'Idris.Prelude.Types.Left', V1052} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V1053) -> begin (V1058 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1054) -> fun (V1055) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1054, V1055)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1056) -> fun (V1057) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1056, V1057)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1050, {'Idris.Core.TT.TType', V9}, V1039))), case V1058 of {'Idris.Prelude.Types.Left', E61} -> (fun (V1059) -> {'Idris.Prelude.Types.Left', V1059} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V1060) -> begin (V1061 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V1060))), begin (V1066 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1062) -> fun (V1063) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1062, V1063)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1064) -> fun (V1065) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1064, V1065)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1053, {'Idris.Core.TT.TType', V9}, V1039))), case V1066 of {'Idris.Prelude.Types.Left', E63} -> (fun (V1067) -> {'Idris.Prelude.Types.Left', V1067} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V1068) -> begin (V1069 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V1040, {'Idris.Prelude.Types.Just', V1061}, V1039))), case V1069 of {'Idris.Prelude.Types.Left', E65} -> (fun (V1070) -> {'Idris.Prelude.Types.Left', V1070} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V1071) -> case V1071 of {'Idris.Builtin.MkPair', E67, E68} -> (fun (V1072, V1073) -> begin (V1074 = {'Idris.Core.TT.App', V9, V10, V1072}), begin (V1076 = begin (V1075 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1075} end), case V1076 of {'Idris.Prelude.Types.Left', E69} -> (fun (V1077) -> {'Idris.Prelude.Types.Left', V1077} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V1078) -> begin (V1079 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1078, V8, V1068))(V1039))), case V1079 of {'Idris.Prelude.Types.Left', E71} -> (fun (V1080) -> {'Idris.Prelude.Types.Left', V1080} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V1081) -> begin (V1082 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V1050, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V1060}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1068))}))), begin (V1083 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1082, V1039))), case V1083 of {'Idris.Prelude.Types.Left', E73} -> (fun (V1084) -> {'Idris.Prelude.Types.Left', V1084} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V1085) -> begin (V1087 = case V17 of {'Idris.Prelude.Types.Just', E75} -> (fun (V1086) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1086, V1039)) end(E75)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V1087 of {'Idris.Prelude.Types.Left', E76} -> (fun (V1088) -> {'Idris.Prelude.Types.Left', V1088} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V1089) -> begin (V1090 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V1074, V1081, {'Idris.Builtin.MkPair', V1037, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1038))}, V1041, V14, V15, V16, V17))(V1039))), case V1090 of {'Idris.Prelude.Types.Left', E78} -> (fun (V1091) -> {'Idris.Prelude.Types.Left', V1091} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V1092) -> begin (V1093 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1078, V8, V11)), V1082))(V1039))), case V1093 of {'Idris.Prelude.Types.Left', E80} -> (fun (V1094) -> {'Idris.Prelude.Types.Left', V1094} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V1095) -> begin (V1096 = {'Idris.Builtin.MkPair', V1072, V1073}), ('case--case block in checkAppWith\x{27}-10093'(V1037, V1038, V1040, V1041, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1050, V1053, V1060, V1061, V1068, V1072, V1073, V1096, V1074, V1078, V1081, V1082, V1092, V1095, case V1095 of {'Idris.Core.Unify.MkUnifyResult', E82, E83, E84, E85} -> (fun (V1097, V1098, V1099, V1100) -> V1097 end(E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1039)) end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51, E52)); _ -> case V13 of [] -> begin (V1102 = begin (V1101 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1101} end), case V1102 of {'Idris.Prelude.Types.Left', E49} -> (fun (V1103) -> {'Idris.Prelude.Types.Left', V1103} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V1104) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1105) -> fun (V1106) -> fun (V1107) -> fun (V1108) -> fun (V1109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1107, V1108, V1109)) end end end end end, fun (V1110) -> fun (V1111) -> fun (V1112) -> fun (V1113) -> fun (V1114) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1112, V1113, V1114)) end end end end end, fun (V1115) -> fun (V1116) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1116)) end end, fun (V1117) -> fun (V1118) -> fun (V1119) -> fun (V1120) -> fun (V1121) -> fun (V1122) -> fun (V1123) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1120, V1121, V1122, V1123)) end end end end end end end, fun (V1124) -> fun (V1125) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1125)) end end, fun (V1126) -> fun (V1127) -> fun (V1128) -> fun (V1129) -> fun (V1130) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1128, V1129, V1130)) end end end end end}, fun (V1131) -> ('un--isImplicitAs'(V1131)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1132) -> ('Idris.Idris2.Builtin':'un--snd'(V1132)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1133) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1133)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1104, V8, V11)), V17, V1039)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1134) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1135) -> ('Idris.Idris2.Builtin':'un--fst'(V1135)) end, V15)))), V10}, V1039)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E47, E48)); _ -> fun (V1136) -> case V13 of [] -> begin (V1138 = begin (V1137 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1137} end), case V1138 of {'Idris.Prelude.Types.Left', E45} -> (fun (V1139) -> {'Idris.Prelude.Types.Left', V1139} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V1140) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1141) -> fun (V1142) -> fun (V1143) -> fun (V1144) -> fun (V1145) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1143, V1144, V1145)) end end end end end, fun (V1146) -> fun (V1147) -> fun (V1148) -> fun (V1149) -> fun (V1150) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1148, V1149, V1150)) end end end end end, fun (V1151) -> fun (V1152) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1152)) end end, fun (V1153) -> fun (V1154) -> fun (V1155) -> fun (V1156) -> fun (V1157) -> fun (V1158) -> fun (V1159) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1156, V1157, V1158, V1159)) end end end end end end end, fun (V1160) -> fun (V1161) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1161)) end end, fun (V1162) -> fun (V1163) -> fun (V1164) -> fun (V1165) -> fun (V1166) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1164, V1165, V1166)) end end end end end}, fun (V1167) -> ('un--isImplicitAs'(V1167)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1168) -> ('Idris.Idris2.Builtin':'un--snd'(V1168)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1169) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1169)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1140, V8, V11)), V17, V1136)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1170) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1171) -> ('Idris.Idris2.Builtin':'un--fst'(V1171)) end, V15)))), V10}, V1136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E41, E42, E43, E44)); {'Idris.Core.Value.NDelayed', E467, E468, E469} -> (fun (V1172, V1173, V1174) -> case V1174 of {'Idris.Core.Value.NBind', E511, E512, E513, E514} -> (fun (V1175, V1176, V1177, V1178) -> case V1177 of {'Idris.Core.TT.Pi', E556, E557, E558, E559} -> (fun (V1179, V1180, V1181, V1182) -> ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, {'Idris.Core.TT.TForce', V1172, V1173, V10}, V1174, V12, V13, V14, V15, V16, V17)) end(E556, E557, E558, E559)); _ -> case V12 of {'Idris.Builtin.MkPair', E517, E518} -> (fun (V1183, V1184) -> fun (V1185) -> case V13 of [E521 | E522] -> (fun (V1186, V1187) -> begin (V1188 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V1185))), case V1188 of {'Idris.Prelude.Types.Left', E523} -> (fun (V1189) -> {'Idris.Prelude.Types.Left', V1189} end(E523)); {'Idris.Prelude.Types.Right', E524} -> (fun (V1190) -> begin (V1191 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V1185))), case V1191 of {'Idris.Prelude.Types.Left', E525} -> (fun (V1192) -> {'Idris.Prelude.Types.Left', V1192} end(E525)); {'Idris.Prelude.Types.Right', E526} -> (fun (V1193) -> begin (V1194 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V1185))), case V1194 of {'Idris.Prelude.Types.Left', E527} -> (fun (V1195) -> {'Idris.Prelude.Types.Left', V1195} end(E527)); {'Idris.Prelude.Types.Right', E528} -> (fun (V1196) -> begin (V1197 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V1185))), case V1197 of {'Idris.Prelude.Types.Left', E529} -> (fun (V1198) -> {'Idris.Prelude.Types.Left', V1198} end(E529)); {'Idris.Prelude.Types.Right', E530} -> (fun (V1199) -> begin (V1204 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1200) -> fun (V1201) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1200, V1201)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1202) -> fun (V1203) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1202, V1203)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1196, {'Idris.Core.TT.TType', V9}, V1185))), case V1204 of {'Idris.Prelude.Types.Left', E531} -> (fun (V1205) -> {'Idris.Prelude.Types.Left', V1205} end(E531)); {'Idris.Prelude.Types.Right', E532} -> (fun (V1206) -> begin (V1207 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V1206))), begin (V1212 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1208) -> fun (V1209) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1208, V1209)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1210) -> fun (V1211) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1210, V1211)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1199, {'Idris.Core.TT.TType', V9}, V1185))), case V1212 of {'Idris.Prelude.Types.Left', E533} -> (fun (V1213) -> {'Idris.Prelude.Types.Left', V1213} end(E533)); {'Idris.Prelude.Types.Right', E534} -> (fun (V1214) -> begin (V1215 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V1186, {'Idris.Prelude.Types.Just', V1207}, V1185))), case V1215 of {'Idris.Prelude.Types.Left', E535} -> (fun (V1216) -> {'Idris.Prelude.Types.Left', V1216} end(E535)); {'Idris.Prelude.Types.Right', E536} -> (fun (V1217) -> case V1217 of {'Idris.Builtin.MkPair', E537, E538} -> (fun (V1218, V1219) -> begin (V1220 = {'Idris.Core.TT.App', V9, V10, V1218}), begin (V1222 = begin (V1221 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1221} end), case V1222 of {'Idris.Prelude.Types.Left', E539} -> (fun (V1223) -> {'Idris.Prelude.Types.Left', V1223} end(E539)); {'Idris.Prelude.Types.Right', E540} -> (fun (V1224) -> begin (V1225 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1224, V8, V1214))(V1185))), case V1225 of {'Idris.Prelude.Types.Left', E541} -> (fun (V1226) -> {'Idris.Prelude.Types.Left', V1226} end(E541)); {'Idris.Prelude.Types.Right', E542} -> (fun (V1227) -> begin (V1228 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V1196, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V1206}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1214))}))), begin (V1229 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1228, V1185))), case V1229 of {'Idris.Prelude.Types.Left', E543} -> (fun (V1230) -> {'Idris.Prelude.Types.Left', V1230} end(E543)); {'Idris.Prelude.Types.Right', E544} -> (fun (V1231) -> begin (V1233 = case V17 of {'Idris.Prelude.Types.Just', E545} -> (fun (V1232) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1232, V1185)) end(E545)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V1233 of {'Idris.Prelude.Types.Left', E546} -> (fun (V1234) -> {'Idris.Prelude.Types.Left', V1234} end(E546)); {'Idris.Prelude.Types.Right', E547} -> (fun (V1235) -> begin (V1236 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V1220, V1227, {'Idris.Builtin.MkPair', V1183, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1184))}, V1187, V14, V15, V16, V17))(V1185))), case V1236 of {'Idris.Prelude.Types.Left', E548} -> (fun (V1237) -> {'Idris.Prelude.Types.Left', V1237} end(E548)); {'Idris.Prelude.Types.Right', E549} -> (fun (V1238) -> begin (V1239 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1224, V8, V11)), V1228))(V1185))), case V1239 of {'Idris.Prelude.Types.Left', E550} -> (fun (V1240) -> {'Idris.Prelude.Types.Left', V1240} end(E550)); {'Idris.Prelude.Types.Right', E551} -> (fun (V1241) -> begin (V1242 = {'Idris.Builtin.MkPair', V1218, V1219}), ('case--case block in checkAppWith\x{27}-10093'(V1183, V1184, V1186, V1187, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1196, V1199, V1206, V1207, V1214, V1218, V1219, V1242, V1220, V1224, V1227, V1228, V1238, V1241, case V1241 of {'Idris.Core.Unify.MkUnifyResult', E552, E553, E554, E555} -> (fun (V1243, V1244, V1245, V1246) -> V1243 end(E552, E553, E554, E555)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1185)) end end(E551)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E549)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E547)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E544)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E542)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E540)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E537, E538)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E536)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E534)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E532)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E530)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E528)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E526)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E524)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E521, E522)); _ -> case V13 of [] -> begin (V1248 = begin (V1247 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1247} end), case V1248 of {'Idris.Prelude.Types.Left', E519} -> (fun (V1249) -> {'Idris.Prelude.Types.Left', V1249} end(E519)); {'Idris.Prelude.Types.Right', E520} -> (fun (V1250) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1251) -> fun (V1252) -> fun (V1253) -> fun (V1254) -> fun (V1255) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1253, V1254, V1255)) end end end end end, fun (V1256) -> fun (V1257) -> fun (V1258) -> fun (V1259) -> fun (V1260) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1258, V1259, V1260)) end end end end end, fun (V1261) -> fun (V1262) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1262)) end end, fun (V1263) -> fun (V1264) -> fun (V1265) -> fun (V1266) -> fun (V1267) -> fun (V1268) -> fun (V1269) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1266, V1267, V1268, V1269)) end end end end end end end, fun (V1270) -> fun (V1271) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1271)) end end, fun (V1272) -> fun (V1273) -> fun (V1274) -> fun (V1275) -> fun (V1276) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1274, V1275, V1276)) end end end end end}, fun (V1277) -> ('un--isImplicitAs'(V1277)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1278) -> ('Idris.Idris2.Builtin':'un--snd'(V1278)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1279) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1279)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1250, V8, V11)), V17, V1185)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1280) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1281) -> ('Idris.Idris2.Builtin':'un--fst'(V1281)) end, V15)))), V10}, V1185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E520)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E517, E518)); _ -> fun (V1282) -> case V13 of [] -> begin (V1284 = begin (V1283 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1283} end), case V1284 of {'Idris.Prelude.Types.Left', E515} -> (fun (V1285) -> {'Idris.Prelude.Types.Left', V1285} end(E515)); {'Idris.Prelude.Types.Right', E516} -> (fun (V1286) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1287) -> fun (V1288) -> fun (V1289) -> fun (V1290) -> fun (V1291) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1289, V1290, V1291)) end end end end end, fun (V1292) -> fun (V1293) -> fun (V1294) -> fun (V1295) -> fun (V1296) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1294, V1295, V1296)) end end end end end, fun (V1297) -> fun (V1298) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1298)) end end, fun (V1299) -> fun (V1300) -> fun (V1301) -> fun (V1302) -> fun (V1303) -> fun (V1304) -> fun (V1305) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1302, V1303, V1304, V1305)) end end end end end end end, fun (V1306) -> fun (V1307) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1307)) end end, fun (V1308) -> fun (V1309) -> fun (V1310) -> fun (V1311) -> fun (V1312) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1310, V1311, V1312)) end end end end end}, fun (V1313) -> ('un--isImplicitAs'(V1313)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1314) -> ('Idris.Idris2.Builtin':'un--snd'(V1314)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1315) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1315)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1286, V8, V11)), V17, V1282)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1316) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1317) -> ('Idris.Idris2.Builtin':'un--fst'(V1317)) end, V15)))), V10}, V1282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E516)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E511, E512, E513, E514)); _ -> case V12 of {'Idris.Builtin.MkPair', E472, E473} -> (fun (V1318, V1319) -> fun (V1320) -> case V13 of [E476 | E477] -> (fun (V1321, V1322) -> begin (V1323 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V1320))), case V1323 of {'Idris.Prelude.Types.Left', E478} -> (fun (V1324) -> {'Idris.Prelude.Types.Left', V1324} end(E478)); {'Idris.Prelude.Types.Right', E479} -> (fun (V1325) -> begin (V1326 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V1320))), case V1326 of {'Idris.Prelude.Types.Left', E480} -> (fun (V1327) -> {'Idris.Prelude.Types.Left', V1327} end(E480)); {'Idris.Prelude.Types.Right', E481} -> (fun (V1328) -> begin (V1329 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V1320))), case V1329 of {'Idris.Prelude.Types.Left', E482} -> (fun (V1330) -> {'Idris.Prelude.Types.Left', V1330} end(E482)); {'Idris.Prelude.Types.Right', E483} -> (fun (V1331) -> begin (V1332 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V1320))), case V1332 of {'Idris.Prelude.Types.Left', E484} -> (fun (V1333) -> {'Idris.Prelude.Types.Left', V1333} end(E484)); {'Idris.Prelude.Types.Right', E485} -> (fun (V1334) -> begin (V1339 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1335) -> fun (V1336) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1335, V1336)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1337) -> fun (V1338) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1337, V1338)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1331, {'Idris.Core.TT.TType', V9}, V1320))), case V1339 of {'Idris.Prelude.Types.Left', E486} -> (fun (V1340) -> {'Idris.Prelude.Types.Left', V1340} end(E486)); {'Idris.Prelude.Types.Right', E487} -> (fun (V1341) -> begin (V1342 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V1341))), begin (V1347 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1343) -> fun (V1344) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1343, V1344)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1345) -> fun (V1346) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1345, V1346)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1334, {'Idris.Core.TT.TType', V9}, V1320))), case V1347 of {'Idris.Prelude.Types.Left', E488} -> (fun (V1348) -> {'Idris.Prelude.Types.Left', V1348} end(E488)); {'Idris.Prelude.Types.Right', E489} -> (fun (V1349) -> begin (V1350 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V1321, {'Idris.Prelude.Types.Just', V1342}, V1320))), case V1350 of {'Idris.Prelude.Types.Left', E490} -> (fun (V1351) -> {'Idris.Prelude.Types.Left', V1351} end(E490)); {'Idris.Prelude.Types.Right', E491} -> (fun (V1352) -> case V1352 of {'Idris.Builtin.MkPair', E492, E493} -> (fun (V1353, V1354) -> begin (V1355 = {'Idris.Core.TT.App', V9, V10, V1353}), begin (V1357 = begin (V1356 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1356} end), case V1357 of {'Idris.Prelude.Types.Left', E494} -> (fun (V1358) -> {'Idris.Prelude.Types.Left', V1358} end(E494)); {'Idris.Prelude.Types.Right', E495} -> (fun (V1359) -> begin (V1360 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1359, V8, V1349))(V1320))), case V1360 of {'Idris.Prelude.Types.Left', E496} -> (fun (V1361) -> {'Idris.Prelude.Types.Left', V1361} end(E496)); {'Idris.Prelude.Types.Right', E497} -> (fun (V1362) -> begin (V1363 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V1331, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V1341}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1349))}))), begin (V1364 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1363, V1320))), case V1364 of {'Idris.Prelude.Types.Left', E498} -> (fun (V1365) -> {'Idris.Prelude.Types.Left', V1365} end(E498)); {'Idris.Prelude.Types.Right', E499} -> (fun (V1366) -> begin (V1368 = case V17 of {'Idris.Prelude.Types.Just', E500} -> (fun (V1367) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1367, V1320)) end(E500)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V1368 of {'Idris.Prelude.Types.Left', E501} -> (fun (V1369) -> {'Idris.Prelude.Types.Left', V1369} end(E501)); {'Idris.Prelude.Types.Right', E502} -> (fun (V1370) -> begin (V1371 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V1355, V1362, {'Idris.Builtin.MkPair', V1318, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1319))}, V1322, V14, V15, V16, V17))(V1320))), case V1371 of {'Idris.Prelude.Types.Left', E503} -> (fun (V1372) -> {'Idris.Prelude.Types.Left', V1372} end(E503)); {'Idris.Prelude.Types.Right', E504} -> (fun (V1373) -> begin (V1374 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1359, V8, V11)), V1363))(V1320))), case V1374 of {'Idris.Prelude.Types.Left', E505} -> (fun (V1375) -> {'Idris.Prelude.Types.Left', V1375} end(E505)); {'Idris.Prelude.Types.Right', E506} -> (fun (V1376) -> begin (V1377 = {'Idris.Builtin.MkPair', V1353, V1354}), ('case--case block in checkAppWith\x{27}-10093'(V1318, V1319, V1321, V1322, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1331, V1334, V1341, V1342, V1349, V1353, V1354, V1377, V1355, V1359, V1362, V1363, V1373, V1376, case V1376 of {'Idris.Core.Unify.MkUnifyResult', E507, E508, E509, E510} -> (fun (V1378, V1379, V1380, V1381) -> V1378 end(E507, E508, E509, E510)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1320)) end end(E506)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E504)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E502)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E499)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E497)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E495)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E492, E493)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E491)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E489)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E487)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E485)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E483)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E481)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E479)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E476, E477)); _ -> case V13 of [] -> begin (V1383 = begin (V1382 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1382} end), case V1383 of {'Idris.Prelude.Types.Left', E474} -> (fun (V1384) -> {'Idris.Prelude.Types.Left', V1384} end(E474)); {'Idris.Prelude.Types.Right', E475} -> (fun (V1385) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1386) -> fun (V1387) -> fun (V1388) -> fun (V1389) -> fun (V1390) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1388, V1389, V1390)) end end end end end, fun (V1391) -> fun (V1392) -> fun (V1393) -> fun (V1394) -> fun (V1395) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1393, V1394, V1395)) end end end end end, fun (V1396) -> fun (V1397) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1397)) end end, fun (V1398) -> fun (V1399) -> fun (V1400) -> fun (V1401) -> fun (V1402) -> fun (V1403) -> fun (V1404) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1401, V1402, V1403, V1404)) end end end end end end end, fun (V1405) -> fun (V1406) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1406)) end end, fun (V1407) -> fun (V1408) -> fun (V1409) -> fun (V1410) -> fun (V1411) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1409, V1410, V1411)) end end end end end}, fun (V1412) -> ('un--isImplicitAs'(V1412)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1413) -> ('Idris.Idris2.Builtin':'un--snd'(V1413)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1414) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1414)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1385, V8, V11)), V17, V1320)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1415) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1416) -> ('Idris.Idris2.Builtin':'un--fst'(V1416)) end, V15)))), V10}, V1320)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E475)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E472, E473)); _ -> fun (V1417) -> case V13 of [] -> begin (V1419 = begin (V1418 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1418} end), case V1419 of {'Idris.Prelude.Types.Left', E470} -> (fun (V1420) -> {'Idris.Prelude.Types.Left', V1420} end(E470)); {'Idris.Prelude.Types.Right', E471} -> (fun (V1421) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1422) -> fun (V1423) -> fun (V1424) -> fun (V1425) -> fun (V1426) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1424, V1425, V1426)) end end end end end, fun (V1427) -> fun (V1428) -> fun (V1429) -> fun (V1430) -> fun (V1431) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1429, V1430, V1431)) end end end end end, fun (V1432) -> fun (V1433) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1433)) end end, fun (V1434) -> fun (V1435) -> fun (V1436) -> fun (V1437) -> fun (V1438) -> fun (V1439) -> fun (V1440) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1437, V1438, V1439, V1440)) end end end end end end end, fun (V1441) -> fun (V1442) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1442)) end end, fun (V1443) -> fun (V1444) -> fun (V1445) -> fun (V1446) -> fun (V1447) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1445, V1446, V1447)) end end end end end}, fun (V1448) -> ('un--isImplicitAs'(V1448)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1449) -> ('Idris.Idris2.Builtin':'un--snd'(V1449)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1450) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1450)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1421, V8, V11)), V17, V1417)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1451) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1452) -> ('Idris.Idris2.Builtin':'un--fst'(V1452)) end, V15)))), V10}, V1417)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E471)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E467, E468, E469)); _ -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V1453, V1454) -> fun (V1455) -> case V13 of [E6 | E7] -> (fun (V1456, V1457) -> begin (V1458 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V1455))), case V1458 of {'Idris.Prelude.Types.Left', E8} -> (fun (V1459) -> {'Idris.Prelude.Types.Left', V1459} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V1460) -> begin (V1461 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V1455))), case V1461 of {'Idris.Prelude.Types.Left', E10} -> (fun (V1462) -> {'Idris.Prelude.Types.Left', V1462} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V1463) -> begin (V1464 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V1455))), case V1464 of {'Idris.Prelude.Types.Left', E12} -> (fun (V1465) -> {'Idris.Prelude.Types.Left', V1465} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V1466) -> begin (V1467 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V1455))), case V1467 of {'Idris.Prelude.Types.Left', E14} -> (fun (V1468) -> {'Idris.Prelude.Types.Left', V1468} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V1469) -> begin (V1474 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1470) -> fun (V1471) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1470, V1471)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1472) -> fun (V1473) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1472, V1473)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1466, {'Idris.Core.TT.TType', V9}, V1455))), case V1474 of {'Idris.Prelude.Types.Left', E16} -> (fun (V1475) -> {'Idris.Prelude.Types.Left', V1475} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V1476) -> begin (V1477 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V1476))), begin (V1482 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1478) -> fun (V1479) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1478, V1479)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1480) -> fun (V1481) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1480, V1481)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1469, {'Idris.Core.TT.TType', V9}, V1455))), case V1482 of {'Idris.Prelude.Types.Left', E18} -> (fun (V1483) -> {'Idris.Prelude.Types.Left', V1483} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V1484) -> begin (V1485 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V1456, {'Idris.Prelude.Types.Just', V1477}, V1455))), case V1485 of {'Idris.Prelude.Types.Left', E20} -> (fun (V1486) -> {'Idris.Prelude.Types.Left', V1486} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V1487) -> case V1487 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V1488, V1489) -> begin (V1490 = {'Idris.Core.TT.App', V9, V10, V1488}), begin (V1492 = begin (V1491 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1491} end), case V1492 of {'Idris.Prelude.Types.Left', E24} -> (fun (V1493) -> {'Idris.Prelude.Types.Left', V1493} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V1494) -> begin (V1495 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V1494, V8, V1484))(V1455))), case V1495 of {'Idris.Prelude.Types.Left', E26} -> (fun (V1496) -> {'Idris.Prelude.Types.Left', V1496} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V1497) -> begin (V1498 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V1466, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V1476}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V1484))}))), begin (V1499 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1498, V1455))), case V1499 of {'Idris.Prelude.Types.Left', E28} -> (fun (V1500) -> {'Idris.Prelude.Types.Left', V1500} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V1501) -> begin (V1503 = case V17 of {'Idris.Prelude.Types.Just', E30} -> (fun (V1502) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1502, V1455)) end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V1503 of {'Idris.Prelude.Types.Left', E31} -> (fun (V1504) -> {'Idris.Prelude.Types.Left', V1504} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V1505) -> begin (V1506 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V1490, V1497, {'Idris.Builtin.MkPair', V1453, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1454))}, V1457, V14, V15, V16, V17))(V1455))), case V1506 of {'Idris.Prelude.Types.Left', E33} -> (fun (V1507) -> {'Idris.Prelude.Types.Left', V1507} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V1508) -> begin (V1509 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1494, V8, V11)), V1498))(V1455))), case V1509 of {'Idris.Prelude.Types.Left', E35} -> (fun (V1510) -> {'Idris.Prelude.Types.Left', V1510} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V1511) -> begin (V1512 = {'Idris.Builtin.MkPair', V1488, V1489}), ('case--case block in checkAppWith\x{27}-10093'(V1453, V1454, V1456, V1457, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1466, V1469, V1476, V1477, V1484, V1488, V1489, V1512, V1490, V1494, V1497, V1498, V1508, V1511, case V1511 of {'Idris.Core.Unify.MkUnifyResult', E37, E38, E39, E40} -> (fun (V1513, V1514, V1515, V1516) -> V1513 end(E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1455)) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> case V13 of [] -> begin (V1518 = begin (V1517 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1517} end), case V1518 of {'Idris.Prelude.Types.Left', E4} -> (fun (V1519) -> {'Idris.Prelude.Types.Left', V1519} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V1520) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1521) -> fun (V1522) -> fun (V1523) -> fun (V1524) -> fun (V1525) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1523, V1524, V1525)) end end end end end, fun (V1526) -> fun (V1527) -> fun (V1528) -> fun (V1529) -> fun (V1530) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1528, V1529, V1530)) end end end end end, fun (V1531) -> fun (V1532) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1532)) end end, fun (V1533) -> fun (V1534) -> fun (V1535) -> fun (V1536) -> fun (V1537) -> fun (V1538) -> fun (V1539) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1536, V1537, V1538, V1539)) end end end end end end end, fun (V1540) -> fun (V1541) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1541)) end end, fun (V1542) -> fun (V1543) -> fun (V1544) -> fun (V1545) -> fun (V1546) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1544, V1545, V1546)) end end end end end}, fun (V1547) -> ('un--isImplicitAs'(V1547)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1548) -> ('Idris.Idris2.Builtin':'un--snd'(V1548)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1549) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1549)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1520, V8, V11)), V17, V1455)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1550) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1551) -> ('Idris.Idris2.Builtin':'un--fst'(V1551)) end, V15)))), V10}, V1455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> fun (V1552) -> case V13 of [] -> begin (V1554 = begin (V1553 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1553} end), case V1554 of {'Idris.Prelude.Types.Left', E0} -> (fun (V1555) -> {'Idris.Prelude.Types.Left', V1555} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V1556) -> case ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1557) -> fun (V1558) -> fun (V1559) -> fun (V1560) -> fun (V1561) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V1559, V1560, V1561)) end end end end end, fun (V1562) -> fun (V1563) -> fun (V1564) -> fun (V1565) -> fun (V1566) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V1564, V1565, V1566)) end end end end end, fun (V1567) -> fun (V1568) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V1568)) end end, fun (V1569) -> fun (V1570) -> fun (V1571) -> fun (V1572) -> fun (V1573) -> fun (V1574) -> fun (V1575) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V1572, V1573, V1574, V1575)) end end end end end end end, fun (V1576) -> fun (V1577) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V1577)) end end, fun (V1578) -> fun (V1579) -> fun (V1580) -> fun (V1581) -> fun (V1582) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V1580, V1581, V1582)) end end end end end}, fun (V1583) -> ('un--isImplicitAs'(V1583)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1584) -> ('Idris.Idris2.Builtin':'un--snd'(V1584)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1585) -> case ('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'(V1585)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)))))))) of 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1556, V8, V11)), V17, V1552)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InvalidArgs', V0, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1586) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"<auto>"/utf8>>}} end, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1587) -> ('Idris.Idris2.Builtin':'un--fst'(V1587)) end, V15)))), V10}, V1552)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V19 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17))(V18))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> case ('Idris.Idris2.TTImp.Elab.Check':'un--isLHS'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E3, E4, E5, E6, E7, E8} -> (fun (V22, V23, V24, V25, V26, V27) -> V22 end(E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V28) -> (('case--case block in checkAppWith-10483'(V0, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V21, V28, ('Idris.Idris2.Core.TT':'un--getFnArgs'(('Idris.Idris2.Builtin':'un--fst'(V21))))))(V18)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V21} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.TTImp.TTImp.IApp', E6, E7, E8} -> (fun (V15, V16, V17) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V16, [V17 | V11], V12, V13, V14)) end(E6, E7, E8)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V18, V19, V20) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V18, V19, V11, [V20 | V12], V13, V14)) end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E12, E13, E14, E15} -> (fun (V21, V22, V23, V24) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V21, V22, V11, V12, [{'Idris.Builtin.MkPair', V23, V24} | V13], V14)) end(E12, E13, E14, E15)); {'Idris.TTImp.TTImp.IVar', E16, E17} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('un--getVarType'(V0, V1, V2, V4, V5, V7, V8, V25, V26))(V27))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> case V30 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V31, V32) -> case V32 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V33, V34) -> begin (V35 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V34))(V27))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V1, V27))), case V38 of {'Idris.Prelude.Types.Left', E26} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V40) -> begin (V47 = (('nested--18226-10924--in--un--updateElabInfo'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V40, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E28, E29, E30, E31, E32, E33} -> (fun (V41, V42, V43, V44, V45, V46) -> V41 end(E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V11, V6))(V27))), case V47 of {'Idris.Prelude.Types.Left', E34} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V2, V1, V25, V26, V27))), case V50 of {'Idris.Prelude.Types.Left', E36} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V52) -> begin (V106 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V53) -> begin (V55 = begin (V54 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E38} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V57, V8, V37, V53))), case V58 of {'Idris.Prelude.Types.Left', E40} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V60) -> begin (V79 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V62) -> fun (V63) -> begin (V64 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V62))(V63))), case V64 of {'Idris.Prelude.Types.Left', E42} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V57, V8, V66, V63))), case V67 of {'Idris.Prelude.Types.Left', E44} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V69) -> begin (V76 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V70, V71, V72)) end end end, fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V73, V74, V75)) end end end}, V69, V63))), case V76 of {'Idris.Prelude.Types.Left', E46} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V78}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V14))(V53))), case V79 of {'Idris.Prelude.Types.Left', E48} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V26, V53))), case V82 of {'Idris.Prelude.Types.Left', E50} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V84) -> begin (V91 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V85, V86, V87)) end end end, fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V88, V89, V90)) end end end}, V60, V53))), case V91 of {'Idris.Prelude.Types.Left', E52} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V93) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking application of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V84)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V94) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V96, V97)) end end}, V94)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V101, V102)) end end}, V98, V99)) end end}, V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}Function type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V93)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}Expected app type "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V104, V105)) end end}, V81))))))))))))))))))))))} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V27))), case V106 of {'Idris.Prelude.Types.Left', E54} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V108) -> begin (V117 = case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V111, V112)) end end}, V26, V7)) of {'Idris.Prelude.Types.Just', E56} -> (fun (V113) -> case V113 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V114, V115) -> case V114 of {'Idris.Prelude.Types.Just', E59} -> (fun (V116) -> V116 end(E59)); _ -> V26 end end(E57, E58)); _ -> V26 end end(E56)); _ -> V26 end), begin (V118 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V49, V7, V8, V9, V31, V37, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V117}, V33}, V11, V12, V13, 0, V14, V27))), case V118 of {'Idris.Prelude.Types.Left', E60} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V120) -> ('nested--18226-10923--in--un--normalisePrims'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V40, V8, V120, V27)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17)); _ -> fun (V121) -> begin (V122 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Nothing'}, V121))), case V122 of {'Idris.Prelude.Types.Left', E0} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V124) -> case V124 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V125, V126) -> begin (V127 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V126))(V121))), case V127 of {'Idris.Prelude.Types.Left', E4} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V129) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V125, V129, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}, V11, V12, V13, 0, V14, V121)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
