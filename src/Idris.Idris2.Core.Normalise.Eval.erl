-module('Idris.Idris2.Core.Normalise.Eval').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in evalDef-5335'/19,
  'case--evalOp-5169'/9,
  'nested--7160-5004--in--un--takeStk'/7,
  'nested--6988-1946--in--un--set'/5,
  'nested--7162-5134--in--un--evalAll'/10,
  'nested--7157-4466--in--un--concrete'/13,
  'nested--7148-2255--in--un--closeArgs'/13,
  'un--updateLocal'/7,
  'un--updateLimit'/4,
  'un--tryAlt'/12,
  'un--toClosure'/3,
  'un--takeFromStack'/4,
  'un--nfOpts'/6,
  'un--nf'/5,
  'un--isFromTerm'/1,
  'un--gnfOpts'/4,
  'un--gnf'/3,
  'un--getTerm'/1,
  'un--getNF'/2,
  'un--getCaseBound'/5,
  'un--gType'/1,
  'un--gErased'/1,
  'un--findAlt'/13,
  'un--evalWithOpts'/9,
  'un--evalTree'/11,
  'un--evalRef'/12,
  'un--evalOp'/8,
  'un--evalMeta'/10,
  'un--evalLocal'/10,
  'un--evalLocClosure'/9,
  'un--evalDef'/13,
  'un--evalConAlt'/13,
  'un--evalClosureWithOpts'/5,
  'un--evalClosure'/4,
  'un--evalArg'/4,
  'un--eval'/9,
  'un--continueNF'/5,
  'un--argsFromStack'/4,
  'un--applyToStack'/8
]).
'case--case block in evalDef-5335'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', (V8())} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V20, V21) -> begin (V22 = (('un--evalTree'(V0, V1, V16, V3, V2, V15, V20, V14, V12, V21, V6))(V18))), case V22 of {'Idris.Prelude.Types.Left', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V24) -> case V24 of {'Idris.Core.Normalise.Eval.Result', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E5)); _ -> {'Idris.Prelude.Types.Right', (V8())} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--evalOp-5169'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> case V9 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V11, V12) -> case V12 of [] -> begin (V13 = ('nested--7162-5134--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V10))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Right', case (V6(V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (V3()) end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V16) -> V16 end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', (V3())} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Right', (V3())} end end end(E0)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', (V3())} end end.
'nested--7160-5004--in--un--takeStk'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.Vect':'un--reverse'(V6)), V5}}; _ -> begin (V7 = (V4 - 1)), case V5 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> ('nested--7160-5004--in--un--takeStk'(V0, V1, V2, V3, V7, V9, {'Idris.Data.Vect.::', ('Idris.Idris2.Builtin':'un--snd'(V8)), V6})) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--6988-1946--in--un--set'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V2)) of 1 -> [{'Idris.Builtin.MkPair', V7, V3} | V6]; 0 -> [{'Idris.Builtin.MkPair', V7, V8} | ('nested--6988-1946--in--un--set'(V0, V1, V2, V3, V6))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7162-5134--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V10, V11) -> begin (V12 = (('un--evalClosure'(V7, V2, V0, V10))(V9))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('nested--7162-5134--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V9))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', V14, V17}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7157-4466--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V13, V14, V15, V16, V17) -> 1 end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V18, V19, V20, V21, V22) -> 1 end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NPrimVal', E10, E11} -> (fun (V23, V24) -> 1 end(E10, E11)); {'Idris.Core.Value.NBind', E12, E13, E14, E15} -> (fun (V25, V26, V27, V28) -> 1 end(E12, E13, E14, E15)); {'Idris.Core.Value.NType', E16} -> (fun (V29) -> 1 end(E16)); _ -> 0 end.
'nested--7148-2255--in--un--closeArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> []; [E0 | E1] -> (fun (V13, V14) -> [{'Idris.Core.Value.MkClosure', V2, V1, V9, V10, V13} | ('nested--7148-2255--in--un--closeArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateLocal'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> case V5 of {'Idris.Core.Value.::', E2, E3} -> (fun (V7, V8) -> {'Idris.Core.Value.::', {'Idris.Core.Value.MkNFClosure', V2, V3, V6}, V8} end(E2, E3)); _ -> V5 end; _ -> begin (V9 = (V4 - 1)), case V5 of {'Idris.Core.Value.::', E0, E1} -> (fun (V10, V11) -> {'Idris.Core.Value.::', V10, ('un--updateLocal'(V0, V1, V2, V3, V9, V11, V6))} end(E0, E1)); _ -> V5 end end end.
'un--updateLimit'(V0, V1, V2, V3) -> case V0 of {'Idris.Core.TT.Func'} -> (fun () -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Data.List':'un--isNil'(case V2 of {'Idris.Core.Value.MkEvalOpts', E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11) -> V10 end(E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Just', V2}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V1, case V2 of {'Idris.Core.Value.MkEvalOpts', E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23) -> V22 end(E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> begin (V25 = (V24 - 1)), {'Idris.Prelude.Types.Just', case V2 of {'Idris.Core.Value.MkEvalOpts', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Value.MkEvalOpts', V26, V27, V28, V29, V30, V31, ('nested--6988-1946--in--un--set'(V2, V1, V1, V25, V32)), V33} end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V2}} end.
'un--tryAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Core.Value.NDCon', E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16) -> case V11 of {'Idris.Core.CaseTree.ConCase', E7, E8, E9, E10} -> (fun (V17, V18, V19, V20) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V18, V14)) of 1 -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V19, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Builtin':'un--snd'(V21)) end, V16)), V20)); 0 -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9, E10)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E6} -> (fun (V23) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V23, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V23)); 0 -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E1, E2, E3, E4, E5)); {'Idris.Core.Value.NTCon', E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30) -> case V11 of {'Idris.Core.CaseTree.ConCase', E17, E18, E19, E20} -> (fun (V31, V32, V33, V34) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V27, V31)) of 1 -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V33, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V35) -> ('Idris.Idris2.Builtin':'un--snd'(V35)) end, V30)), V34)); 0 -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E16} -> (fun (V37) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V37, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V37)); 0 -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E11, E12, E13, E14, E15)); {'Idris.Core.Value.NPrimVal', E21, E22} -> (fun (V40, V41) -> case V11 of {'Idris.Core.CaseTree.ConCase', E24, E25, E26, E27} -> (fun (V42, V43, V44, V45) -> case V44 of [] -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'({'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V41))}}, V42)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V45)); 0 -> fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.NoMatch'}} end end end(E24, E25, E26, E27)); {'Idris.Core.CaseTree.ConstCase', E28, E29} -> (fun (V48, V49) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V48, V41)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V49)); 0 -> fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E23} -> (fun (V51) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V51, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V51)); 0 -> fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E21, E22)); {'Idris.Core.Value.NType', E30} -> (fun (V54) -> case V11 of {'Idris.Core.CaseTree.ConCase', E32, E33, E34, E35} -> (fun (V55, V56, V57, V58) -> case V55 of {'Idris.Core.Name.UN', E37} -> (fun (V59) -> case V59 of {'Idris.Core.Name.Basic', E39} -> (fun (V60) -> case V60 of <<"Type"/utf8>> -> case V57 of [] -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V58)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E41} -> (fun (V61) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V61, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V61)); 0 -> fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E40} -> (fun (V64) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V64, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V64)); 0 -> fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E39)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E38} -> (fun (V67) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V67, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V67)); 0 -> fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E37)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E36} -> (fun (V70) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V70, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V70)); 0 -> fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E32, E33, E34, E35)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E31} -> (fun (V73) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V73, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V73)); 0 -> fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E30)); {'Idris.Core.Value.NBind', E42, E43, E44, E45} -> (fun (V76, V77, V78, V79) -> case V78 of {'Idris.Core.TT.Pi', E47, E48, E49, E50} -> (fun (V80, V81, V82, V83) -> case V11 of {'Idris.Core.CaseTree.ConCase', E52, E53, E54, E55} -> (fun (V84, V85, V86, V87) -> case V84 of {'Idris.Core.Name.UN', E57} -> (fun (V88) -> case V88 of {'Idris.Core.Name.Basic', E59} -> (fun (V89) -> case V89 of <<"->"/utf8>> -> case V86 of [E62 | E63] -> (fun (V90, V91) -> case V91 of [E65 | E66] -> (fun (V92, V93) -> case V93 of [] -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, [V90 | [V92 | []]], [V83 | [{'Idris.Core.Value.MkNFClosure', V7, V5, {'Idris.Core.Value.NBind', V76, V77, {'Idris.Core.TT.Lam', V80, V81, V82, V83}, V79}} | []]], V87)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E67} -> (fun (V94) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V94, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V94)); 0 -> fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E67)); _ -> fun (V96) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E65, E66)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E64} -> (fun (V97) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V97, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V97)); 0 -> fun (V98) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E64)); _ -> fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E62, E63)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E61} -> (fun (V100) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V100, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V100)); 0 -> fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E61)); _ -> fun (V102) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end; _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E60} -> (fun (V103) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V103, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V103)); 0 -> fun (V104) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60)); _ -> fun (V105) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E59)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E58} -> (fun (V106) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V106, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V106)); 0 -> fun (V107) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58)); _ -> fun (V108) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E57)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E56} -> (fun (V109) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V109, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V109)); 0 -> fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> fun (V111) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E52, E53, E54, E55)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E51} -> (fun (V112) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V112, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V112)); 0 -> fun (V113) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51)); _ -> fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E47, E48, E49, E50)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E46} -> (fun (V115) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V115, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V115)); 0 -> fun (V116) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46)); _ -> fun (V117) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E42, E43, E44, E45)); {'Idris.Core.Value.NDelay', E68, E69, E70, E71} -> (fun (V118, V119, V120, V121) -> case V11 of {'Idris.Core.CaseTree.DelayCase', E73, E74, E75} -> (fun (V122, V123, V124) -> ('un--evalTree'(V0, V1, V2, [V122 | [V123 | V4]], V3, V5, {'Idris.Core.Value.::', V120, {'Idris.Core.Value.::', V121, V6}}, V7, V8, V9, V124)) end(E73, E74, E75)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E72} -> (fun (V125) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V125, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V125)); 0 -> fun (V126) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E72)); _ -> fun (V127) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end end(E68, E69, E70, E71)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E0} -> (fun (V128) -> case ('nested--7157-4466--in--un--concrete'(V0, V1, V3, V4, V128, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V128)); 0 -> fun (V129) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> fun (V130) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end end.
'un--toClosure'(V0, V1, V2) -> {'Idris.Core.Value.MkClosure', [], V0, {'Idris.Core.Value.Nil'}, V1, V2}.
'un--takeFromStack'(V0, V1, V2, V3) -> ('nested--7160-5004--in--un--takeStk'(V0, V1, V3, V2, V2, V3, {'Idris.Data.Vect.Nil'})).
'un--nfOpts'(V0, V1, V2, V3, V4, V5) -> ('un--eval'(V3, V2, V0, V1, [], V4, {'Idris.Core.Value.Nil'}, V5, [])).
'un--nf'(V0, V1, V2, V3, V4) -> ('un--eval'(V2, ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V0, V1, [], V3, {'Idris.Core.Value.Nil'}, V4, [])).
'un--isFromTerm'(V0) -> case V0 of {'Idris.Core.Normalise.Eval.MkGlue', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--gnfOpts'(V0, V1, V2, V3) -> {'Idris.Core.Normalise.Eval.MkGlue', 1, fun (V4) -> {'Idris.Prelude.Types.Right', V3} end, fun (V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('un--nfOpts'(V5, V0, V1, V10, V2, V3))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'un--gnf'(V0, V1, V2) -> {'Idris.Core.Normalise.Eval.MkGlue', 1, fun (V3) -> {'Idris.Prelude.Types.Right', V2} end, fun (V4) -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('un--nf'(V4, V0, V9, V1, V2))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'un--getTerm'(V0) -> case V0 of {'Idris.Core.Normalise.Eval.MkGlue', E0, E1, E2} -> (fun (V1, V2, V3) -> V2 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNF'(V0, V1) -> case V1 of {'Idris.Core.Normalise.Eval.MkGlue', E0, E1, E2} -> (fun (V2, V3, V4) -> (V4(V0)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getCaseBound'(V0, V1, V2, V3, V4) -> case V2 of [] -> case V3 of [] -> {'Idris.Prelude.Types.Just', V4}; [E0 | E1] -> (fun (V5, V6) -> {'Idris.Prelude.Types.Nothing'} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E2 | E3] -> (fun (V7, V8) -> case V3 of [] -> {'Idris.Prelude.Types.Nothing'}; [E4 | E5] -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end, fun (V15) -> {'Idris.Core.Value.::', V7, V15} end, ('un--getCaseBound'(V0, V1, V8, V10, V4)))) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--gType'(V0) -> {'Idris.Core.Normalise.Eval.MkGlue', 1, fun (V1) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TType', V0}} end, fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NType', V0}} end end}.
'un--gErased'(V0) -> {'Idris.Core.Normalise.Eval.MkGlue', 1, fun (V1) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Erased', V0, 0}} end, fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NErased', V0, 0}} end end}.
'un--findAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"eval.casetree.stuck"/utf8>>, (1 + (1 + 0)), fun () -> <<"Ran out of alternatives"/utf8>> end, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E2 | E3] -> (fun (V16, V17) -> begin (V18 = (('un--tryAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V10, V16))(V12))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> case V20 of {'Idris.Core.Normalise.Eval.Result', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.Result', V21}} end(E6)); {'Idris.Core.Normalise.Eval.NoMatch'} -> (fun () -> ('un--findAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12)) end()); {'Idris.Core.Normalise.Eval.GotStuck'} -> (fun () -> begin (V32 = begin (V28 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseAlt $vars)'(V22, V23, V24)) end end end, fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseAlt $vars)'(V25, V26, V27)) end end end}, V16, V12))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, <<"eval.casetree.stuck"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Got stuck matching "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V4, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" against "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseAlt $vars)'(V3, V30))))))))} end, V12)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V32 of {'Idris.Prelude.Types.Left', E9} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalWithOpts'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('un--eval'(V3, V4, V0, V1, V2, V5, V6, V7, V8)).
'un--evalTree'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('un--evalLocal'(V0, V1, V2, V4, V5, V8, {'Idris.Prelude.Types.Nothing'}, V12, [], V6))(V15))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"eval.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Evaluated "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V4, V18)))))))) end, V15))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = ('un--updateLocal'(V0, V1, V7, V5, V12, V6, V18))), ('un--findAlt'(V0, V1, V2, V3, V4, V5, V22, V7, V8, V9, V18, V14, V15)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V23, V24) -> case V7 of {'Idris.Core.Value.MkEvalOpts', E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32) -> case V30 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> begin (V34 = (('un--evalWithOpts'(V2, V4, V3, V0, V7, V5, V6, ('Idris.Idris2.Core.TT':'un--embed'(V24)), V9))(V33))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.Result', V36}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E20} -> (fun (V37) -> case V37 of 0 -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end; _ -> begin (V39 = (V37 - 1)), begin (V48 = case V7 of {'Idris.Core.Value.MkEvalOpts', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Value.MkEvalOpts', V40, V41, V42, V43, V44, {'Idris.Prelude.Types.Just', V39}, V46, V47} end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V49) -> begin (V50 = (('un--evalWithOpts'(V2, V4, V3, V0, V48, V5, V6, ('Idris.Idris2.Core.TT':'un--embed'(V24)), V9))(V49))), case V50 of {'Idris.Prelude.Types.Left', E29} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.Result', V52}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end.
'un--evalRef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of {'Idris.Core.TT.DataCon', E0, E1} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDCon', V6, V8, V12, V13, V9}} end(E0, E1)); {'Idris.Core.TT.TyCon', E2, E3} -> (fun (V14, V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Value':'un--ntCon'(V6, V8, V14, V15, V9))} end(E2, E3)); {'Idris.Core.TT.Bound'} -> (fun () -> {'Idris.Prelude.Types.Right', (V10())} end()); {'Idris.Core.TT.Func'} -> (fun () -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V8, case V0 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V46 of {'Idris.Prelude.Types.Left', E34} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V48) -> begin (V49 = {'Idris.Core.TT.Func'}), case V48 of {'Idris.Prelude.Types.Just', E36} -> (fun (V50) -> begin (V59 = case V1 of {'Idris.Core.Value.MkEvalOpts', E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58) -> V54 end(E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V160 = ('Idris.Idris2.Core.Context':'un--reducibleInAny'([case V0 of {'Idris.Core.Context.MkDefs', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V62 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | case V0 of {'Idris.Core.Context.MkDefs', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119) -> V93 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end], case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139) -> V121 end(E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144} -> (fun (V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159) -> V149 end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V161 = case V59 of 1 -> 1; 0 -> V160; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V162 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V2, V11))), case V162 of {'Idris.Prelude.Types.Left', E145} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V164) -> begin (V175 = case V160 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, <<"eval.stuck"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V165) -> begin (V172 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V166, V167, V168)) end end end, fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V169, V170, V171)) end end end}, V8, V165))), case V172 of {'Idris.Prelude.Types.Left', E147} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V174) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Stuck function: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V174))))} end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V175 of {'Idris.Prelude.Types.Left', E149} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V177) -> case V161 of 1 -> begin (V178 = ('un--updateLimit'(V49, V8, V1, V11))), case V178 of {'Idris.Prelude.Types.Left', E151} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V180) -> case V180 of {'Idris.Prelude.Types.Just', E153} -> (fun (V181) -> (('un--evalDef'(V0, V1, V2, V3, V4, V181, V5, V6, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173} -> (fun (V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> V189 end(E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193} -> (fun (V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221) -> V219 end(E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213} -> (fun (V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241) -> V233 end(E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, V10))(V11)) end(E153)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V242 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"eval.stuck"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Function "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), <<" past reduction limit"/utf8>>)))) end, V11))), case V242 of {'Idris.Prelude.Types.Left', E214} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E214)); {'Idris.Prelude.Types.Right', E215} -> (fun (V244) -> {'Idris.Prelude.Types.Right', (V10())} end(E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', (V10())}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', (V10())} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalOp'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--evalOp-5169'(V0, V1, V4, V7, V6, V3, V5, V2, ('un--takeFromStack'(V0, V1, V3, V6)))).
'un--evalMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V12 = case ('Idris.Idris2.Data.List':'un--isNil'(V9)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V10} end, V8)); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V11} end, V8)), V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V13) -> ('un--evalRef'(V0, V1, V2, V3, V4, 1, V5, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V7}, V12, fun () -> {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V6, V7, V8}, V9} end, V13)) end end.
'un--evalLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Value.Nil'} -> (fun () -> case case case case V1 of {'Idris.Core.Value.MkEvalOpts', E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17) -> V10 end(E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V1 of {'Idris.Core.Value.MkEvalOpts', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> V19 end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 1 end, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V28)) end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V31, V32)) end end end end}, V3, V7, V4)) of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V33, V34, V35, V36) -> ('un--eval'(V0, V1, V2, V3, [], V4, {'Idris.Core.Value.Nil'}, V35, V8)) end(E4, E5, E6, E7)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NLocal', V6, V7}, V8}} end end; 0 -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NLocal', V6, V7}, V8}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V7 of 0 -> case V9 of {'Idris.Core.Value.::', E2, E3} -> (fun (V39, V40) -> ('un--evalLocClosure'(V0, V1, V2, V3, V4, V5, V6, V8, V39)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V41 = (V7 - 1)), case V9 of {'Idris.Core.Value.::', E0, E1} -> (fun (V42, V43) -> ('un--evalLocal'(V0, V1, V2, V3, V4, V5, V6, V41, V8, V43)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--evalLocClosure'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.MkClosure', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> ('un--evalWithOpts'(V2, V3, V9, V0, V10, V12, V11, V13, V7)) end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.MkNFClosure', E5, E6, E7} -> (fun (V14, V15, V16) -> ('un--applyToStack'(V0, V1, V2, V3, V15, 0, V16, V7)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V9 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V13, V14, V15, V16, V17) -> case case case V13 of {'Idris.Core.Context.Context.MkPMDefInfo', E45, E46, E47} -> (fun (V18, V19, V20) -> V19 end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case case V5 of {'Idris.Core.Value.MkEvalOpts', E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28) -> V21 end(E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V5 of {'Idris.Core.Value.MkEvalOpts', E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36) -> V30 end(E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V5 of {'Idris.Core.Value.MkEvalOpts', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44) -> V41 end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case case V6 of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V45, V46)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V47, V48)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V51, V52)) end end}}, V8)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V6 of 1 -> case V5 of {'Idris.Core.Value.MkEvalOpts', E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60) -> V53 end(E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V5 of {'Idris.Core.Value.MkEvalOpts', E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68) -> V65 end(E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V71, V72)) end end}, {'Idris.Core.Context.Context.TCInline'}, V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> fun (V73) -> ('case--case block in evalDef-5335'(V0, V1, V3, V14, V16, V17, V15, V13, V12, V11, V10, V8, V7, V6, V5, V4, V2, ('un--argsFromStack'(V0, V1, V14, V11)), V73)) end; 0 -> fun (V74) -> {'Idris.Prelude.Types.Right', (V12())} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.Builtin', E48, E49} -> (fun (V75, V76) -> ('un--evalOp'(V0, V1, V2, V75, V3, ('Idris.Idris2.Core.Primitives':'un--getOp'(V76, V3)), V11, V12)) end(E48, E49)); _ -> fun (V77) -> {'Idris.Prelude.Types.Right', (V12())} end end.
'un--evalConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case ('un--getCaseBound'(V0, V1, V11, V10, V6)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> ('un--evalTree'(V0, V1, V2, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V10, V3)), V4, V5, V13, V7, V8, V9, V12)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Eval.GotStuck'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalClosureWithOpts'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.MkClosure', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> ('un--eval'(V2, V3, V0, V1, V5, V8, V7, V9, [])) end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.MkNFClosure', E5, E6, E7} -> (fun (V10, V11, V12) -> ('un--applyToStack'(V2, V3, V0, V1, V11, 1, V12, [])) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalClosure'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.MkClosure', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> ('un--eval'(V2, V5, V0, V1, V4, V7, V6, V8, [])) end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.MkNFClosure', E5, E6, E7} -> (fun (V9, V10, V11) -> ('un--applyToStack'(V2, V9, V0, V1, V10, 1, V11, [])) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalArg'(V0, V1, V2, V3) -> ('un--evalClosure'(V0, V1, V2, V3)).
'un--eval'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V9, V10, V11) -> ('un--evalLocal'(V0, V1, V2, V3, V5, V9, V10, V11, V8, V6)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V12, V13, V14) -> fun (V15) -> ('un--evalRef'(V0, V1, V2, V3, V5, 0, V12, V13, V14, V8, fun () -> {'Idris.Core.Value.NApp', V12, {'Idris.Core.Value.NRef', V13, V14}, V8} end, V15)) end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V16, V17, V18, V19) -> ('un--evalMeta'(V0, V1, V2, V3, V5, V16, V17, V18, ('nested--7148-2255--in--un--closeArgs'(V0, V1, V4, V3, V19, V18, V17, V16, V8, V6, V5, V2, V19)), V8)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Lam', E14, E15, E16, E17} -> (fun (V24, V25, V26, V27) -> case V8 of [E18 | E19] -> (fun (V28, V29) -> ('un--eval'(V0, V1, V2, V3, [V21 | V4], V5, {'Idris.Core.Value.::', ('Idris.Idris2.Builtin':'un--snd'(V28)), V6}, V23, V29)) end(E18, E19)); _ -> begin (V31 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V30) -> {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V30} end, V22))), fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V20, V21, V31, fun (V33) -> fun (V34) -> ('un--evalWithOpts'(V2, V3, [V21 | V4], V33, V1, V5, {'Idris.Core.Value.::', V34, V6}, V23, V8)) end end}} end end end end(E14, E15, E16, E17)); {'Idris.Core.TT.Let', E20, E21, E22, E23} -> (fun (V35, V36, V37, V38) -> begin (V39 = {'Idris.Core.TT.Let', V35, V36, V37, V38}), case case case case V1 of {'Idris.Core.Value.MkEvalOpts', E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47) -> V40 end(E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V1 of {'Idris.Core.Value.MkEvalOpts', E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55) -> V49 end(E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case case V1 of {'Idris.Core.Value.MkEvalOpts', E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63) -> V60 end(E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V65 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V64) -> {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V64} end, V39))), fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V20, V21, V65, fun (V67) -> fun (V68) -> ('un--evalWithOpts'(V2, V3, [V21 | V4], V67, V1, V5, {'Idris.Core.Value.::', V68, V6}, V23, V8)) end end}} end end; 0 -> ('un--eval'(V0, V1, V2, V3, [V21 | V4], V5, {'Idris.Core.Value.::', {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V37}, V6}, V23, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21, E22, E23)); _ -> begin (V70 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V69) -> {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V69} end, V22))), fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V20, V21, V70, fun (V72) -> fun (V73) -> ('un--evalWithOpts'(V2, V3, [V21 | V4], V72, V1, V5, {'Idris.Core.Value.::', V73, V6}, V23, V8)) end end}} end end end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E48, E49, E50} -> (fun (V74, V75, V76) -> case case V1 of {'Idris.Core.Value.MkEvalOpts', E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84) -> V84 end(E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> fun (V85) -> begin (V86 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V76, []))(V85))), case V86 of {'Idris.Prelude.Types.Left', E51} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V88) -> (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V75, [{'Idris.Builtin.MkPair', V74, {'Idris.Core.Value.MkNFClosure', V1, V5, V88}} | V8]))(V85)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V75, [{'Idris.Builtin.MkPair', V74, {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V76}} | V8])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49, E50)); {'Idris.Core.TT.As', E61, E62, E63, E64} -> (fun (V89, V90, V91, V92) -> case case V1 of {'Idris.Core.Value.MkEvalOpts', E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100) -> V95 end(E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V92, V8)); 0 -> fun (V101) -> begin (V102 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V91, V8))(V101))), case V102 of {'Idris.Prelude.Types.Left', E65} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V104) -> begin (V105 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V92, V8))(V101))), case V105 of {'Idris.Prelude.Types.Left', E67} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V107) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NAs', V89, V90, V104, V107}} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E61, E62, E63, E64)); {'Idris.Core.TT.TDelayed', E77, E78, E79} -> (fun (V108, V109, V110) -> fun (V111) -> begin (V112 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V110, V8))(V111))), case V112 of {'Idris.Prelude.Types.Left', E80} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDelayed', V108, V109, V114}} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E77, E78, E79)); {'Idris.Core.TT.TDelay', E82, E83, E84, E85} -> (fun (V115, V116, V117, V118) -> fun (V119) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDelay', V115, V116, {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V117}, {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V118}}} end end(E82, E83, E84, E85)); {'Idris.Core.TT.TForce', E86, E87, E88} -> (fun (V120, V121, V122) -> fun (V123) -> begin (V124 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V122, []))(V123))), case V124 of {'Idris.Prelude.Types.Left', E89} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V126) -> case V126 of {'Idris.Core.Value.NDelay', E91, E92, E93, E94} -> (fun (V127, V128, V129, V130) -> (('un--eval'(V0, V1, V2, V3, [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"fvar"/utf8>>}} | V4], V5, {'Idris.Core.Value.::', V130, V6}, {'Idris.Core.TT.Local', V127, {'Idris.Prelude.Types.Nothing'}, 0}, V8))(V123)) end(E91, E92, E93, E94)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NForce', V120, V121, V126, V8}} end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86, E87, E88)); {'Idris.Core.TT.PrimVal', E95, E96} -> (fun (V131, V132) -> fun (V133) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NPrimVal', V131, V132}} end end(E95, E96)); {'Idris.Core.TT.Erased', E97, E98} -> (fun (V134, V135) -> fun (V136) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NErased', V134, V135}} end end(E97, E98)); {'Idris.Core.TT.TType', E99} -> (fun (V137) -> fun (V138) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NType', V137}} end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--continueNF'(V0, V1, V2, V3, V4) -> ('un--applyToStack'(V2, ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V0, V1, V3, 1, V4, [])).
'un--argsFromStack'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', {'Idris.Core.Value.Nil'}, V3}}; [E0 | E1] -> (fun (V4, V5) -> case V3 of [] -> {'Idris.Prelude.Types.Nothing'}; [E2 | E3] -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--argsFromStack'(V0, V1, V5, V7)), fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', {'Idris.Core.Value.::', ('Idris.Idris2.Builtin':'un--snd'(V6)), V9}, V10})) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--applyToStack'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Lam', E6, E7, E8, E9} -> (fun (V12, V13, V14, V15) -> fun (V16) -> case V7 of [E12 | E13] -> (fun (V17, V18) -> begin (V19 = (((V11(V0))(('Idris.Idris2.Builtin':'un--snd'(V17))))(V16))), case V19 of {'Idris.Prelude.Types.Left', E14} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V21) -> (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V21, V18))(V16)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V8, V9, V10, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (((V11(V22))(V23))(V24))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V27, V7))(V24)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}} end end end(E6, E7, E8, E9)); {'Idris.Core.TT.Let', E16, E17, E18, E19} -> (fun (V28, V29, V30, V31) -> begin (V32 = {'Idris.Core.TT.Let', V28, V29, V30, V31}), fun (V33) -> case case case case V1 of {'Idris.Core.Value.MkEvalOpts', E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41) -> V34 end(E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V1 of {'Idris.Core.Value.MkEvalOpts', E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49) -> V43 end(E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case case V1 of {'Idris.Core.Value.MkEvalOpts', E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57) -> V54 end(E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V8, V9, V32, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (((V11(V58))(V59))(V60))), case V61 of {'Idris.Prelude.Types.Left', E20} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V63) -> (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V63, V7))(V60)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}}; 0 -> begin (V64 = (((V11(V0))(V30))(V33))), case V64 of {'Idris.Prelude.Types.Left', E22} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V66) -> (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V66, V7))(V33)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); _ -> fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V8, V9, V10, fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (((V11(V68))(V69))(V70))), case V71 of {'Idris.Prelude.Types.Left', E4} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V73) -> (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V73, V7))(V70)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}} end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E48, E49, E50} -> (fun (V74, V75, V76) -> case V75 of {'Idris.Core.Value.NRef', E51, E52} -> (fun (V77, V78) -> fun (V79) -> ('un--evalRef'(V0, V1, V2, V3, V4, 0, V74, V77, V78, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V76, V7)), fun () -> {'Idris.Core.Value.NApp', V74, {'Idris.Core.Value.NRef', V77, V78}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V76, V7))} end, V79)) end end(E51, E52)); {'Idris.Core.Value.NLocal', E53, E54} -> (fun (V80, V81) -> ('un--evalLocal'(V0, V1, V2, V3, V4, V74, V80, V81, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V76, V7)), {'Idris.Core.Value.Nil'})) end(E53, E54)); {'Idris.Core.Value.NMeta', E55, E56, E57} -> (fun (V82, V83, V84) -> ('un--evalMeta'(V0, V1, V2, V3, V4, V74, V82, V83, V84, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V76, V7)))) end(E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49, E50)); {'Idris.Core.Value.NDCon', E58, E59, E60, E61, E62} -> (fun (V85, V86, V87, V88, V89) -> fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDCon', V85, V86, V87, V88, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V89, V7))}} end end(E58, E59, E60, E61, E62)); {'Idris.Core.Value.NTCon', E63, E64, E65, E66, E67} -> (fun (V91, V92, V93, V94, V95) -> fun (V96) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NTCon', V91, V92, V93, V94, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V95, V7))}} end end(E63, E64, E65, E66, E67)); {'Idris.Core.Value.NAs', E68, E69, E70, E71} -> (fun (V97, V98, V99, V100) -> case case V1 of {'Idris.Core.Value.MkEvalOpts', E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V101, V102, V103, V104, V105, V106, V107, V108) -> V103 end(E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--applyToStack'(V0, V1, V2, V3, V4, V5, V100, V7)); 0 -> fun (V109) -> begin (V110 = (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V99, []))(V109))), case V110 of {'Idris.Prelude.Types.Left', E72} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V112) -> begin (V113 = (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V100, V7))(V109))), case V113 of {'Idris.Prelude.Types.Left', E74} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V115) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NAs', V97, V98, V112, V115}} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69, E70, E71)); {'Idris.Core.Value.NDelayed', E84, E85, E86} -> (fun (V116, V117, V118) -> fun (V119) -> begin (V120 = (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V118, V7))(V119))), case V120 of {'Idris.Prelude.Types.Left', E87} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V122) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDelayed', V116, V117, V122}} end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E84, E85, E86)); {'Idris.Core.Value.NDelay', E89, E90, E91, E92} -> (fun (V123, V124, V125, V126) -> fun (V127) -> {'Idris.Prelude.Types.Right', V6} end end(E89, E90, E91, E92)); {'Idris.Core.Value.NForce', E93, E94, E95, E96} -> (fun (V128, V129, V130, V131) -> fun (V132) -> begin (V133 = (('un--applyToStack'(V0, V1, V2, V3, V4, V5, V130, []))(V132))), case V133 of {'Idris.Prelude.Types.Left', E97} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V135) -> case V135 of {'Idris.Core.Value.NDelay', E99, E100, E101, E102} -> (fun (V136, V137, V138, V139) -> (('un--eval'(V0, V1, V2, V3, [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"fvar"/utf8>>}} | []], V4, {'Idris.Core.Value.::', V139, {'Idris.Core.Value.Nil'}}, {'Idris.Core.TT.Local', V136, {'Idris.Prelude.Types.Nothing'}, 0}, V7))(V132)) end(E99, E100, E101, E102)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NForce', V128, V129, V135, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V131, V7))}} end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94, E95, E96)); {'Idris.Core.Value.NPrimVal', E103, E104} -> (fun (V140, V141) -> fun (V142) -> {'Idris.Prelude.Types.Right', V6} end end(E103, E104)); {'Idris.Core.Value.NErased', E105, E106} -> (fun (V143, V144) -> fun (V145) -> {'Idris.Prelude.Types.Right', V6} end end(E105, E106)); {'Idris.Core.Value.NType', E107} -> (fun (V146) -> fun (V147) -> {'Idris.Prelude.Types.Right', V6} end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
