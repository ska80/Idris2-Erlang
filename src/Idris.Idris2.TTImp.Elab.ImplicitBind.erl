-module('Idris.Idris2.TTImp.Elab.ImplicitBind').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkBindVar-12659'/18,
  'case--getToBind,normImps-11704'/16,
  'case--bindUnsolved,makeBoundVar-9748'/18,
  'case--mkPatternHole-9602'/15,
  'case--mkOuterHole-9253'/13,
  'nested--10416-10956--in--un--tidyName'/8,
  'nested--9683-10340--in--un--swapP'/3,
  'nested--11076-11514--in--un--normImps'/12,
  'nested--11076-11513--in--un--normBindingTy'/12,
  'nested--10931-11383--in--un--nHoles'/11,
  'nested--9016-9728--in--un--mkImplicit'/12,
  'nested--8692-9492--in--un--mkArgs'/12,
  'nested--9016-9727--in--un--makeBoundVar'/17,
  'nested--10344-10890--in--un--liftImps\x{27}'/6,
  'nested--11920-12259--in--un--isIncompatible'/14,
  'nested--11076-11515--in--un--insert'/13,
  'nested--10416-10957--in--un--getBinds'/11,
  'nested--11076-11516--in--un--depSort'/11,
  'nested--11920-12260--in--un--combine'/16,
  'nested--8692-9493--in--un--bindInner'/14,
  'un--swapVars'/2,
  'un--swapIsVarH'/1,
  'un--swapIsVar'/2,
  'un--solvePolyConstraint'/4,
  'un--push'/5,
  'un--normaliseHolesScope'/6,
  'un--mkPatternHole'/11,
  'un--mkOuterHole'/10,
  'un--liftImps'/3,
  'un--implicitBind'/4,
  'un--getToBind'/10,
  'un--checkPolyConstraint'/3,
  'un--checkBindVar'/12,
  'un--checkBindHere'/14,
  'un--bindUnsolved'/8,
  'un--bindImplicits'/10,
  'un--bindImplVars'/7
]).
'case--case block in checkBindVar-12659'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V24 = ('un--mkPatternHole'(V0, V8, V11, V9, V3, V7, V14, V4, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V18, V19, V20, V21, V22, V23) -> V19 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V17))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> begin (V38 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V31, V32, V33, V34, V35, V36) -> case V32 of {'Idris.TTImp.TTImp.PI', E18} -> (fun (V37) -> ('Idris.Idris2.Core.Unify':'un--setInvertible'(V11, V3, V14, V17)) end(E18)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V38 of {'Idris.Prelude.Types.Left', E19} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V40) -> begin (V131 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Added Bound implicit "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V42, V43)) end end}, {'Idris.Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V46, V47)) end end}, {'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V50, V51)) end end}, {'Idris.Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V53) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V53)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V54, V55)) end end}, {'Idris.Prelude.Show.MkShow', fun (V56) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V57, V58)) end end}}, V52)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V61) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V62, V63)) end end}, {'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V65, V66)) end end}}, V59, V60)) end end}}, V48)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V70, V71)) end end}, {'Idris.Prelude.Show.MkShow', fun (V72) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V74, V75)) end end}, {'Idris.Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V77, V78)) end end}}, V72)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V81) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V81)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V82, V83)) end end}, {'Idris.Prelude.Show.MkShow', fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V84)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V85, V86)) end end}}, V79, V80)) end end}}, V67, V68)) end end}}, V44)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V89)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V90, V91)) end end}, {'Idris.Prelude.Show.MkShow', fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V94, V95)) end end}, {'Idris.Prelude.Show.MkShow', fun (V96) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V98, V99)) end end}, {'Idris.Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V101, V102)) end end}}, V96)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V106, V107)) end end}, {'Idris.Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V109, V110)) end end}}, V103, V104)) end end}}, V92)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V114, V115)) end end}, {'Idris.Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V118, V119)) end end}, {'Idris.Prelude.Show.MkShow', fun (V120) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V121, V122)) end end}}, V116)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V125) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V126, V127)) end end}, {'Idris.Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V129, V130)) end end}}, V123, V124)) end end}}, V111, V112)) end end}}, V87, V88)) end end}}, {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V29, V30}}}})))) end, V17))), case V131 of {'Idris.Prelude.Types.Left', E21} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V133) -> begin (V135 = begin (V134 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E23} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V137) -> begin (V153 = begin (V152 = ('erlang':'put'(V8, case V137 of {'Idris.TTImp.Elab.Check.MkEState', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151) -> {'Idris.TTImp.Elab.Check.MkEState', V138, V139, V140, V141, [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V27, V29}} | V142], [{'Idris.Builtin.MkPair', V14, {'Idris.TTImp.Elab.Check.NameBinding', V0, V7, {'Idris.Core.TT.Explicit'}, V27, V30}} | V143], V144, V145, V146, V147, V148, V149, V150, V151} end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V152} end), case V153 of {'Idris.Prelude.Types.Left', E39} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V155) -> begin (V156 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"checkBindVar is adding \x{2193}"/utf8>> end, V17))), case V156 of {'Idris.Prelude.Types.Left', E41} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V158) -> begin (V159 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V11, V10, V3, {'Idris.Core.Name.UN', V2}, V4, V29, V17))), case V159 of {'Idris.Prelude.Types.Left', E43} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V161) -> begin (V162 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V10, V11, V3, {'Idris.Core.Name.UN', V2}, V17))), case V162 of {'Idris.Prelude.Types.Left', E45} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V164) -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V11, V9, V8, V7, V6, V4, V3, V27, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, V29)), V1, V17)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E47} -> (fun (V165) -> begin (V166 = ('nested--11920-12260--in--un--combine'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, {'Idris.Core.Name.UN', V2}, V7, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingRig'(V165)), V17))), case V166 of {'Idris.Prelude.Types.Left', E48} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V168) -> begin (V169 = ('Idris.Idris2.TTImp.Elab.Check':'un--bindingTerm'(V165))), begin (V170 = ('Idris.Idris2.TTImp.Elab.Check':'un--bindingType'(V165))), begin (V171 = ('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"checkBindVar is adding \x{2193}"/utf8>> end, V17))), case V171 of {'Idris.Prelude.Types.Left', E50} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V173) -> begin (V174 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V11, V10, V3, {'Idris.Core.Name.UN', V2}, V4, V170, V17))), case V174 of {'Idris.Prelude.Types.Left', E52} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V176) -> begin (V177 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V10, V11, V3, {'Idris.Core.Name.UN', V2}, V17))), case V177 of {'Idris.Prelude.Types.Left', E54} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V179) -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V11, V9, V8, V7, V6, V4, V3, V169, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, V170)), V1, V17)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getToBind,normImps-11704'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> case V16 of {'Idris.Core.TT.Meta', E2, E3, E4, E5} -> (fun (V18, V19, V20, V21) -> fun (V22) -> begin (V23 = ('Idris.Idris2.Core.UnifyState':'un--isCurrentHole'(V6, V20, V22))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> case case V25 of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V28, V29)) end end}, V19, V12)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V30 = (('nested--11076-11514--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, [V19 | V12], V11))(V22))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V33 = ('nested--11076-11513--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V10, V22))), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V19, V35} | V32]} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> (('nested--11076-11514--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11))(V22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> ('nested--11076-11514--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)) end end(E0, E1)); _ -> ('nested--11076-11514--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V12, V11)) end.
'case--bindUnsolved,makeBoundVar-9748'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V24 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V6, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V21, V22, V23)) end end end}, V9, V17))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t bind implicit "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V8, V26))))))))}, V17)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V6, V3, ('Idris.Idris2.Core.Name':'un--nameRoot'(V15)), V17))), case V28 of {'Idris.Prelude.Types.Left', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V7, V6, V3, V2, V14, V12, V30, V27, V17))), case V31 of {'Idris.Prelude.Types.Left', E5} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V33) -> begin (V35 = begin (V34 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E7} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.TT':'un--forgetDef'(V13))), begin (V54 = begin (V53 = ('erlang':'put'(V5, case V37 of {'Idris.TTImp.Elab.Check.MkEState', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.TTImp.Elab.Check.MkEState', V39, V40, V41, V42, V43, [{'Idris.Builtin.MkPair', V30, {'Idris.TTImp.Elab.Check.NameBinding', V4, V14, V38, ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V33)), ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V27))}} | V44], V45, V46, V47, V48, V49, V50, V51, V52} end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E23} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--embedSub'(V11, V33))} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkPatternHole-9602'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> ('un--mkPatternHole'(V0, V9, V8, V7, V6, V5, V4, V3, V2, {'Idris.Prelude.Types.Nothing'}, V15)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> fun (V17) -> begin (V32 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V10 of {'Idris.TTImp.Elab.Check.MkEState', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V18 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8, V7, V6, V5, V12, V4, V16, V17))), case V32 of {'Idris.Prelude.Types.Left', E15} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--apply'(V6, ('Idris.Idris2.Core.TT':'un--embedSub'(V11, V34)), ('nested--8692-9492--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V0, V11)))), {'Idris.Builtin.MkPair', V13, ('Idris.Idris2.Core.TT':'un--embedSub'(V11, V16))}}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkOuterHole-9253'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> ('un--mkOuterHole'(V0, V8, V7, V6, V5, V4, V3, V2, {'Idris.Prelude.Types.Nothing'}, V13)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> begin (V29 = case V9 of {'Idris.TTImp.Elab.Check.MkEState', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V17 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V30) -> begin (V45 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V9 of {'Idris.TTImp.Elab.Check.MkEState', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V31 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V6, V5, V4, V29, V3, V14, V30))), case V45 of {'Idris.Prelude.Types.Left', E29} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V47)), ('Idris.Idris2.Core.TT':'un--embedSub'(V10, V14))}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10416-10956--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V8, V9) -> ('nested--10416-10956--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V9)) end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V10, V11) -> ('nested--10416-10956--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V10)) end(E2, E3)); {'Idris.Core.Name.Nested', E4, E5} -> (fun (V12, V13) -> ('nested--10416-10956--in--un--tidyName'(V0, V1, V2, V3, V4, V5, V6, V13)) end(E4, E5)); _ -> V7 end.
'nested--9683-10340--in--un--swapP'(V0, V1, V2) -> case V2 of 0 -> 0; _ -> begin (V3 = (V2 - 1)), (1 + (1 + V3)) end end.
'nested--11076-11514--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V13, V14) -> fun (V15) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> case V16 of {'Idris.Core.Name.PV', E8, E9} -> (fun (V18, V19) -> begin (V20 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V1, V8, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Implicit pattern var "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'({'Idris.Core.Name.PV', V18, V19})))) end, V2, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingType'(V17)), V15))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V25, V26)) end end}, {'Idris.Core.Name.PV', V18, V19}, V10)) of 1 -> (('nested--11076-11514--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14))(V15)); 0 -> begin (V27 = (('nested--11076-11514--in--un--normImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, [{'Idris.Core.Name.PV', V18, V19} | V10], V14))(V15))), case V27 of {'Idris.Prelude.Types.Left', E12} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V29) -> begin (V30 = ('nested--11076-11513--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V17, V15))), case V30 of {'Idris.Prelude.Types.Left', E14} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V32) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', {'Idris.Core.Name.PV', V18, V19}, V32} | V29]} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, ('Idris.Idris2.TTImp.Elab.Check':'un--bindingTerm'(V17)), V15))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V8, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Normalising implicit "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)))) end, V35, V15))), case V36 of {'Idris.Prelude.Types.Left', E6} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V38) -> (('case--getToBind,normImps-11704'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V16, V17, V14, V10, V9, V35, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V35))))(V15)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11076-11513--in--un--normBindingTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V12, V13, V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, V16, V11))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Check.NameBinding', V1, V13, V14, V15, V19}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E7, E8, E9, E10, E11, E12} -> (fun (V20, V21, V22, V23, V24, V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, V24, V11))), case V26 of {'Idris.Prelude.Types.Left', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V1, V9, V2, V25, V11))), case V29 of {'Idris.Prelude.Types.Left', E15} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Check.AsBinding', V1, V21, V22, V23, V28, V31}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10931-11383--in--un--nHoles'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V12 of {'Idris.TTImp.Elab.Check.NameBinding', E2, E3, E4, E5, E6} -> (fun (V13, V14, V15, V16, V17) -> begin (V18 = ('un--normaliseHolesScope'(V8, V0, V5, V4, V17, V10))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, {'Idris.TTImp.Elab.Check.NameBinding', V0, V14, V15, V16, V20}}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5, E6)); {'Idris.TTImp.Elab.Check.AsBinding', E9, E10, E11, E12, E13, E14} -> (fun (V21, V22, V23, V24, V25, V26) -> begin (V27 = ('un--normaliseHolesScope'(V8, V0, V5, V4, V25, V10))), case V27 of {'Idris.Prelude.Types.Left', E15} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, {'Idris.TTImp.Elab.Check.AsBinding', V0, V22, V23, V24, V29, V26}}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9016-9728--in--un--mkImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> fun (V22) -> case V21 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V25, V26) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V12, case V8 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V27 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22))), case V57 of {'Idris.Prelude.Types.Left', E44} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V59) -> case V59 of {'Idris.Prelude.Types.Just', E46} -> (fun (V60) -> case V60 of {'Idris.Core.Context.Context.Hole', E47, E48} -> (fun (V61, V62) -> begin (V66 = begin (V63 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V6, V16, V8, V18, V25, V22))), case V63 of {'Idris.Prelude.Types.Left', E49} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V65) -> ('nested--9016-9727--in--un--makeBoundVar'(V0, V1, V2, V3, V4, V5, V6, V7, V16, V12, V14, V20, V9, V26, V10, V65, V22)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V66 of {'Idris.Prelude.Types.Left', E51} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V16, V6, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Added unbound implicit"/utf8>> end, V68, V22))), case V69 of {'Idris.Prelude.Types.Left', E53} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V71) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V72) -> case V72 of {'Idris.Prelude.Types.Left', E55} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V74) -> {'Idris.Prelude.Types.Right', 0} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V75, V76, V77, V78, V79, V80, V81, V82, V83)) end end end end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V84, V85, V86, V87, V88, V89, V90, V91, V92)) end end end end end end end end end}, V16, V6, V3, case V1 of {'Idris.TTImp.Elab.Check.InLHS', E57} -> (fun (V93) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E57)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end, V2, V18))(V23))(V68)), V22)) end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47, E48)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E46)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8692-9492--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.TT.SubRefl'} -> (fun () -> [] end()); _ -> case V10 of [E0 | E1] -> (fun (V12, V13) -> case V11 of {'Idris.Core.TT.DropCons', E2} -> (fun (V14) -> [{'Idris.Core.TT.Local', V6, {'Idris.Prelude.Types.Nothing'}, 0} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V15)) end, ('nested--8692-9492--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V14))))] end(E2)); _ -> [] end end(E0, E1)); _ -> [] end end.
'nested--9016-9727--in--un--makeBoundVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> ('case--bindUnsolved,makeBoundVar-9748'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V14, V13, V12, V11, V10, V9, ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V15, V13)), V16)).
'nested--10344-10890--in--un--liftImps\x{27}'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V7 of {'Idris.Core.Name.PV', E8, E9} -> (fun (V10, V11) -> case V8 of {'Idris.Core.TT.Pi', E14, E15, E16, E17} -> (fun (V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Core.TT.Bind', V6, {'Idris.Core.Name.PV', V10, V11}, V8, ('nested--10344-10890--in--un--liftImps\x{27}'(V0, V1, V2, V3, [{'Idris.Core.Name.PV', V10, V11} | V4], V9))} end()); _ -> case V8 of {'Idris.Core.TT.Pi', E18, E19, E20, E21} -> (fun (V16, V17, V18, V19) -> ('un--push'(V4, V6, V7, V8, ('nested--10344-10890--in--un--liftImps\x{27}'(V0, V1, V2, V3, [V7 | V4], V9)))) end(E18, E19, E20, E21)); _ -> V5 end end end(E14, E15, E16, E17)); _ -> case V8 of {'Idris.Core.TT.Pi', E10, E11, E12, E13} -> (fun (V20, V21, V22, V23) -> ('un--push'(V4, V6, V7, V8, ('nested--10344-10890--in--un--liftImps\x{27}'(V0, V1, V2, V3, [V7 | V4], V9)))) end(E10, E11, E12, E13)); _ -> V5 end end end(E8, E9)); _ -> case V8 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V24, V25, V26, V27) -> ('un--push'(V4, V6, V7, V8, ('nested--10344-10890--in--un--liftImps\x{27}'(V0, V1, V2, V3, [V7 | V4], V9)))) end(E4, E5, E6, E7)); _ -> V5 end end end(E0, E1, E2, E3)); _ -> V5 end.
'nested--11920-12259--in--un--isIncompatible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V12)) of 1 -> 1; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V28, V29)) end end}}, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Algebra.Preorder':'un--<'({'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V30, V31)) end end, fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V32)) end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V33, V34, V35, V36, V37)) end end end end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V40, V41)) end end}}, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V42, V43)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V12, V13)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11076-11515--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> [V9 | []]; _ -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V12 of [E2 | E3] -> (fun (V15, V16) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> begin (V24 = ('Idris.Idris2.Data.List':'un--filter'(fun (V19) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V22, V23)) end end}, V19, V10)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.TTImp.Elab.Check':'un--bindingMetas'(V18))))))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, V13, V24)) of 1 -> [{'Idris.Builtin.MkPair', V13, V14} | [{'Idris.Builtin.MkPair', V17, V18} | V16]]; 0 -> [{'Idris.Builtin.MkPair', V17, V18} | ('nested--11076-11515--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, {'Idris.Builtin.MkPair', V13, V14}, V10, [V17 | V11], V16))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10416-10957--in--un--getBinds'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V7 of [] -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V9)), ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V10))}; [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> case V16 of {'Idris.TTImp.Elab.Check.NameBinding', E6, E7, E8, E9, E10} -> (fun (V17, V18, V19, V20, V21) -> case ('nested--10416-10957--in--un--getBinds'(V0, V1, V2, V3, V4, V5, V6, V12, {'Idris.Core.TT.Bounds.Add', V13, V15, V8}, V9, V10)) of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V22, V23) -> begin (V24 = ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V21))), case V5 of {'Idris.TTImp.TTImp.PI', E13} -> (fun (V25) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V6, V13, {'Idris.Core.TT.Pi', V6, V25, {'Idris.Core.TT.Implicit'}, V24}, V22}, {'Idris.Core.TT.TType', V6}} end(E13)); _ -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V6, V13, {'Idris.Core.TT.PVar', V6, V18, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_PiInfo'(fun (V26) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.Bounds':'un--sizeOf'(V8)), V26)) end, V19)), V24}, V22}, {'Idris.Core.TT.Bind', V6, V13, {'Idris.Core.TT.PVTy', V6, V18, V24}, V23}} end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8, E9, E10)); {'Idris.TTImp.Elab.Check.AsBinding', E14, E15, E16, E17, E18, E19} -> (fun (V27, V28, V29, V30, V31, V32) -> case ('nested--10416-10957--in--un--getBinds'(V0, V1, V2, V3, V4, V5, V6, V12, {'Idris.Core.TT.Bounds.Add', V13, V15, V8}, V9, V10)) of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V33, V34) -> begin (V35 = ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V31))), begin (V36 = ('Idris.Idris2.Core.TT':'un--refsToLocals'(V8, V32))), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V6, V13, {'Idris.Core.TT.PLet', V6, V28, V36, V35}, V33}, {'Idris.Core.TT.Bind', V6, V13, {'Idris.Core.TT.PLet', V6, V28, V36, V35}, V34}} end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11076-11516--in--un--depSort'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> []; [E0 | E1] -> (fun (V11, V12) -> ('nested--11076-11515--in--un--insert'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V9, [], ('nested--11076-11516--in--un--depSort'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11920-12260--in--un--combine'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case ('nested--11920-12259--in--un--isIncompatible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, V14)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearUsed', V3, (1 + (1 + 0)), V12}, V15)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8692-9493--in--un--bindInner'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Prelude.Types.Just', V12} end()); _ -> case V10 of [E0 | E1] -> (fun (V14, V15) -> case V11 of {'Idris.Core.Env.::', E2, E3} -> (fun (V16, V17) -> case V13 of {'Idris.Core.TT.DropCons', E4} -> (fun (V18) -> ('nested--8692-9493--in--un--bindInner'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15, V17, {'Idris.Core.TT.Bind', V6, V14, V16, V12}, V18)) end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end.
'un--swapVars'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Core.TT.Local', V2, V3, ('un--swapIsVar'(V0, V4))} end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V5, V6, V7) -> {'Idris.Core.TT.Ref', V5, V6, V7} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> {'Idris.Core.TT.Meta', V8, V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--swapVars'(V0, V12)) end, V11))} end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V13, V14, V15, V16) -> {'Idris.Core.TT.Bind', V13, V14, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V17) -> ('un--swapVars'(V0, V17)) end, V15)), ('un--swapVars'([V14 | V0], V16))} end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V18, V19, V20) -> {'Idris.Core.TT.App', V18, ('un--swapVars'(V0, V19)), ('un--swapVars'(V0, V20))} end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.TT.As', V21, V22, ('un--swapVars'(V0, V23)), ('un--swapVars'(V0, V24))} end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V25, V26, V27) -> {'Idris.Core.TT.TDelayed', V25, V26, ('un--swapVars'(V0, V27))} end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V28, V29, V30, V31) -> {'Idris.Core.TT.TDelay', V28, V29, ('un--swapVars'(V0, V30)), ('un--swapVars'(V0, V31))} end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V32, V33, V34) -> {'Idris.Core.TT.TForce', V32, V33, ('un--swapVars'(V0, V34))} end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V35, V36) -> {'Idris.Core.TT.PrimVal', V35, V36} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V37, V38) -> {'Idris.Core.TT.Erased', V37, V38} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V39) -> {'Idris.Core.TT.TType', V39} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--swapIsVarH'(V0) -> case V0 of 0 -> (1 + 0); _ -> begin (V1 = (V0 - 1)), ('nested--9683-10340--in--un--swapP'(V1, V0, V1)) end end.
'un--swapIsVar'(V0, V1) -> case V0 of [] -> ('un--swapIsVarH'(V1)); [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> 0; _ -> begin (V4 = (V1 - 1)), (1 + ('un--swapIsVar'(V3, V4))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--solvePolyConstraint'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.UnifyState.MkPolyConstraint', E0, E1, E2, E3, E4, E5} -> (fun (V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V4, V13, V6, V8))(V3))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> case V16 of {'Idris.Core.Value.NApp', E14, E15, E16} -> (fun (V17, V18, V19) -> case V18 of {'Idris.Core.Value.NMeta', E21, E22, E23} -> (fun (V20, V21, V22) -> {'Idris.Prelude.Types.Right', 0} end(E21, E22, E23)); _ -> begin (V42 = begin (V23 = (('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V4, V13, V6, V9))(V3))), case V23 of {'Idris.Prelude.Types.Left', E17} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V25) -> (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V26, V27, V28, V29, V30, V31, V32, V33)) end end end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V34, V35, V36, V37, V38, V39, V40, V41)) end end end end end end end end}, V4, V0, V1, ('Idris.Idris2.Core.Unify':'un--inLHS'()), V5, V6))(V16))(V25))(V3)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V42 of {'Idris.Prelude.Types.Left', E19} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V44) -> {'Idris.Prelude.Types.Right', 0} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16)); _ -> begin (V64 = begin (V45 = (('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V4, V13, V6, V9))(V3))), case V45 of {'Idris.Prelude.Types.Left', E10} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V47) -> (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V48, V49, V50, V51, V52, V53, V54, V55)) end end end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V56, V57, V58, V59, V60, V61, V62, V63)) end end end end end end end end}, V4, V0, V1, ('Idris.Idris2.Core.Unify':'un--inLHS'()), V5, V6))(V16))(V47))(V3)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V64 of {'Idris.Prelude.Types.Left', E12} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V66) -> {'Idris.Prelude.Types.Right', 0} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--push'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V6 of {'Idris.Core.Name.PV', E4, E5} -> (fun (V9, V10) -> case V7 of {'Idris.Core.TT.Pi', E6, E7, E8, E9} -> (fun (V11, V12, V13, V14) -> case V13 of {'Idris.Core.TT.Implicit'} -> (fun () -> begin (V15 = {'Idris.Core.TT.Bind', V5, {'Idris.Core.Name.PV', V9, V10}, {'Idris.Core.TT.Pi', V11, V12, {'Idris.Core.TT.Implicit'}, V14}, V8}), case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V14, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Bind', V1, V2, V3, V15} end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V16) -> {'Idris.Core.TT.Bind', V5, {'Idris.Core.Name.PV', V9, V10}, {'Idris.Core.TT.Pi', V11, V12, {'Idris.Core.TT.Implicit'}, V16}, ('un--push'([{'Idris.Core.Name.PV', V9, V10} | V0], V1, V2, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V17) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V17)) end, V3)), ('un--swapVars'([], V8))))} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end end(E6, E7, E8, E9)); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end end(E4, E5)); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end end(E0, E1, E2, E3)); _ -> {'Idris.Core.TT.Bind', V1, V2, V3, V4} end.
'un--normaliseHolesScope'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> begin (V10 = ('un--normaliseHolesScope'(V0, [V7 | V1], V2, {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V6, ('Idris.Idris2.Core.TT':'un--multiplicity'(V8)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V8))}, V3}, V9, V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V6, V7, V8, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V1, V2, V3, V4, V5)) end.
'un--mkPatternHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V8 of {'Idris.TTImp.TTImp.PI', E33} -> (fun (V11) -> begin (V12 = ('un--mkOuterHole'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V10))), case V12 of {'Idris.Prelude.Types.Left', E34} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V16, V16}}} end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E1} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V21) -> begin (V36 = case V21 of {'Idris.TTImp.Elab.Check.MkEState', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V25 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V51 = case V21 of {'Idris.TTImp.Elab.Check.MkEState', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V39 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V52 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V17))(V10))), case V52 of {'Idris.Prelude.Types.Left', E31} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V54) -> (('case--mkPatternHole-9602'(V0, V17, V8, V7, V6, V5, V4, V3, V2, V1, V21, V36, V51, V54, ('nested--8692-9493--in--un--bindInner'(V0, V17, V8, V7, V6, V5, V4, V3, V2, V1, V0, V7, V54, V36))))(V10)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown type for pattern variable "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))))}, V10)) end end.
'un--mkOuterHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> begin (V29 = case V14 of {'Idris.TTImp.Elab.Check.MkEState', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V18 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V30 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V10))(V9))), case V30 of {'Idris.Prelude.Types.Left', E17} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V32) -> (('case--mkOuterHole-9253'(V0, V10, V7, V6, V5, V4, V3, V2, V1, V14, V29, V32, ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V32, V29))))(V9)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V34 = begin (V33 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E19} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V36) -> begin (V51 = case V36 of {'Idris.TTImp.Elab.Check.MkEState', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V40 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V66 = case V36 of {'Idris.TTImp.Elab.Check.MkEState', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V54 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V67 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V2, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"type_of_"/utf8>>, ('Idris.Idris2.Core.Name':'un--nameRoot'(V6)))), V9))), case V67 of {'Idris.Prelude.Types.Left', E49} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V69) -> begin (V88 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(case V36 of {'Idris.TTImp.Elab.Check.MkEState', E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V70 end(E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V84) -> fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V84, V85)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V86, V87)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V66, V69, {'Idris.Core.TT.TType', V4}, V9))), case V88 of {'Idris.Prelude.Types.Left', E65} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V90) -> begin (V91 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Made metavariable for type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V69)))))))) end, V9))), case V91 of {'Idris.Prelude.Types.Left', E67} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V93) -> begin (V95 = begin (V94 = ('erlang':'put'(V1, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V69, V5, {'Idris.Core.TT.Explicit'}, V7, ('Idris.Idris2.Core.TT':'un--embedSub'(V51, V90)), {'Idris.Core.TT.TType', V4}, V36))))), {'Idris.Prelude.Types.Right', V94} end), case V95 of {'Idris.Prelude.Types.Left', E69} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V97) -> begin (V112 = ('Idris.Idris2.TTImp.Elab.Check':'un--implBindVar'(case V36 of {'Idris.TTImp.Elab.Check.MkEState', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V98 end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, V4, V5, V66, V6, V90, V9))), case V112 of {'Idris.Prelude.Types.Left', E85} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'un--embedSub'(V51, V114)), ('Idris.Idris2.Core.TT':'un--embedSub'(V51, V90))}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--liftImps'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.PI', E0} -> (fun (V3) -> case V2 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V4, V5) -> case V5 of {'Idris.Core.TT.TType', E3} -> (fun (V6) -> {'Idris.Builtin.MkPair', ('nested--10344-10890--in--un--liftImps\x{27}'(V0, V3, V4, V6, V0, V4)), {'Idris.Core.TT.TType', V6}} end(E3)); _ -> V2 end end(E1, E2)); _ -> V2 end end(E0)); _ -> V2 end.
'un--implicitBind'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> case V41 of {'Idris.Core.Context.Context.Hole', E35, E36} -> (fun (V42, V43) -> begin (V45 = ('Idris.Idris2.Core.Context':'un--updateDef'(V0, V2, fun (V44) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.ImpBind'}} end, V3))), case V45 of {'Idris.Prelude.Types.Left', E37} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V47) -> ('Idris.Idris2.Core.UnifyState':'un--removeHoleName'(V0, V1, V2, V3)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35, E36)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E34)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getToBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V6 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> begin (V11 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, case V5 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V10) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end, 0, V9))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V14 = ('un--bindUnsolved'(V0, V1, V2, V3, V4, V5, V6, V9))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V18 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, case V5 of {'Idris.TTImp.Elab.Check.InLHS', E5} -> (fun (V17) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E5)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end, 0, V9))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V48 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.List':'un--filter'(fun (V29) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V32, V33)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V29)), V8)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V28 of {'Idris.TTImp.Elab.Check.MkEState', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V39 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V49 = (('nested--11076-11514--in--un--normImps'(V8, V0, V7, V6, V5, V4, V3, V2, V1, V24, [], V48))(V9))), case V49 of {'Idris.Prelude.Types.Left', E26} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V51) -> begin (V53 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V52) -> ('Idris.Idris2.Builtin':'un--fst'(V52)) end, V51))), begin (V54 = ('nested--11076-11516--in--un--depSort'(V8, V0, V7, V6, V5, V4, V3, V2, V1, V53, V51))), begin (V70 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bound names: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V57, V58)) end end}, {'Idris.Prelude.Show.MkShow', fun (V59) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V60, V61)) end end}}, V55)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V65, V66)) end end}, {'Idris.Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V68, V69)) end end}}, V62, V63)) end end}, V51)))) end, V9))), case V70 of {'Idris.Prelude.Types.Left', E28} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V72) -> begin (V88 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Sorted: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V75, V76)) end end}, {'Idris.Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V78, V79)) end end}}, V73)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V82)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V83, V84)) end end}, {'Idris.Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V86, V87)) end end}}, V80, V81)) end end}, V54)))) end, V9))), case V88 of {'Idris.Prelude.Types.Left', E30} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V90) -> {'Idris.Prelude.Types.Right', V54} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--checkPolyConstraint'(V0, V1, V2) -> case V1 of {'Idris.Core.UnifyState.MkPolyConstraint', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = (('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V3, V12, V5, V7))(V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> case V15 of {'Idris.Core.Value.NApp', E10, E11, E12} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.Value.NMeta', E13, E14, E15} -> (fun (V19, V20, V21) -> begin (V22 = (('Idris.Idris2.Core.Normalise.Eval':'un--continueNF'(V0, V3, V12, V5, V8))(V2))), case V22 of {'Idris.Prelude.Types.Left', E16} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.TTImp.Elab.Check':'un--concrete'(V12, V5, V24, V2))), case V25 of {'Idris.Prelude.Types.Left', E18} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V27) -> case V27 of 1 -> begin (V28 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V12, V2))), case V28 of {'Idris.Prelude.Types.Left', E20} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.MatchTooSpecific', V3, V4, V5, V6}, V2)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13, E14, E15)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E10, E11, E12)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--checkBindVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V18 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> V12 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E47, E48, E49, E50, E51, E52} -> (fun (V19, V20, V21, V22, V23, V24) -> case V20 of {'Idris.TTImp.TTImp.PI', E53} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V26) -> 1 end end, ('Idris.Idris2.Core.Env':'un--defined'(V0, {'Idris.Core.Name.UN', V10}, V8)))) end(E53)); _ -> 0 end end(E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> fun (V27) -> begin (V29 = begin (V28 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> begin (V46 = {'Idris.Core.Name.PV', {'Idris.Core.Name.UN', V10}, case V31 of {'Idris.TTImp.Elab.Check.MkEState', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V33 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V47 = ('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'(V4, V18, {'Idris.Core.Name.UN', V10}, V27))), case V47 of {'Idris.Prelude.Types.Left', E22} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'(V4, V46, V27))), case V50 of {'Idris.Prelude.Types.Left', E24} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E26} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V56) -> begin (V61 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V9)) of {'Idris.Prelude.Types.Just', E28} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"getNameType is adding Bound: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)))) end, V27))), case V58 of {'Idris.Prelude.Types.Left', E29} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V60) -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V2, V1, [{'Idris.Builtin.MkPair', V57, {'Idris.Builtin.MkPair', 5, {'Idris.Prelude.Types.Just', V46}}} | []], V27)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V61 of {'Idris.Prelude.Types.Left', E31} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V63) -> ('case--case block in checkBindVar-12659'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V18, V31, V46, V56, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V66, V67)) end end}, V46, case V56 of {'Idris.TTImp.Elab.Check.MkEState', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V72 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V27)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V82) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, {'Idris.TTImp.TTImp.IVar', V9, {'Idris.Core.Name.UN', V10}}, V11, V82)) end end end.
'un--checkBindHere'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V32 = case V17 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V20 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V47 = case V17 of {'Idris.TTImp.Elab.Check.MkEState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V36 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V62 = case V17 of {'Idris.TTImp.Elab.Check.MkEState', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V54 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V78 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V63) -> ('Idris.Idris2.Builtin':'un--fst'(V63)) end, case V17 of {'Idris.TTImp.Elab.Check.MkEState', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V69 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V80 = begin (V79 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--updateEnv'(V0, V8, {'Idris.Core.TT.SubRefl'}, [], V17))))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E58} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V1, V13))), case V83 of {'Idris.Prelude.Types.Left', E60} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V85) -> begin (V92 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E62, E63, E64, E65, E66, E67} -> (fun (V86, V87, V88, V89, V90, V91) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V86, V10, V88, 1, V90, V91} end(E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V8, V11, V12, V13))), case V92 of {'Idris.Prelude.Types.Left', E68} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V94) -> case V94 of {'Idris.Builtin.MkPair', E70, E71} -> (fun (V95, V96) -> begin (V104 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E72, E73, E74, E75, E76, E77} -> (fun (V97, V98, V99, V100, V101, V102) -> case V97 of {'Idris.TTImp.Elab.Check.InLHS', E78} -> (fun (V103) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E78)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end(E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V105 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V104, 0, V13))), case V105 of {'Idris.Prelude.Types.Left', E79} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V107) -> begin (V109 = begin (V108 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V108} end), case V109 of {'Idris.Prelude.Types.Left', E81} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V111) -> begin (V147 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V112) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--retryDelayed'(V0, V1, V2, V3, V4, V104, case V111 of {'Idris.Core.UnifyState.MkUState', E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V123 end(E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V112)) end, fun (V125) -> fun (V126) -> begin (V128 = begin (V127 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V127} end), case V128 of {'Idris.Prelude.Types.Left', E95} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V130) -> begin (V144 = begin (V143 = ('erlang':'put'(V3, case V130 of {'Idris.Core.UnifyState.MkUState', E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142) -> {'Idris.Core.UnifyState.MkUState', V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, [], V142} end(E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V143} end), case V144 of {'Idris.Prelude.Types.Left', E109} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V146) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V125, V126)) end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13))), case V147 of {'Idris.Prelude.Types.Left', E111} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V149) -> begin (V151 = begin (V150 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V150} end), case V151 of {'Idris.Prelude.Types.Left', E113} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V153) -> begin (V166 = case V153 of {'Idris.Core.UnifyState.MkUState', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126} -> (fun (V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165) -> V160 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V180 = begin (V179 = ('erlang':'put'(V3, case V153 of {'Idris.Core.UnifyState.MkUState', E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138} -> (fun (V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178) -> {'Idris.Core.UnifyState.MkUState', V167, V168, V169, V170, V171, V172, [], V174, V175, V176, V177, V178} end(E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V179} end), case V180 of {'Idris.Prelude.Types.Left', E139} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V182) -> begin (V185 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V183) -> fun (V184) -> ('un--solvePolyConstraint'(V1, V3, V183, V184)) end end, V166, V13))), case V185 of {'Idris.Prelude.Types.Left', E141} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V187) -> begin (V190 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V188) -> fun (V189) -> ('un--checkPolyConstraint'(V1, V188, V189)) end end, V166, V13))), case V190 of {'Idris.Prelude.Types.Left', E143} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V192) -> begin (V200 = ('Idris.Idris2.Core.Unify':'un--solveConstraintsAfter'(V1, V3, V85, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E145, E146, E147, E148, E149, E150} -> (fun (V193, V194, V195, V196, V197, V198) -> case V193 of {'Idris.TTImp.Elab.Check.InLHS', E151} -> (fun (V199) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E151)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end(E145, E146, E147, E148, E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 1, V13))), case V200 of {'Idris.Prelude.Types.Left', E152} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V202) -> begin (V203 = ('Idris.Idris2.Core.Unify':'un--checkDots'(V3, V1, V13))), case V203 of {'Idris.Prelude.Types.Left', E154} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V205) -> begin (V206 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Binding names"/utf8>> end, V95, V13))), case V206 of {'Idris.Prelude.Types.Left', E156} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V208) -> begin (V209 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Normalised"/utf8>> end, V8, V95, V13))), case V209 of {'Idris.Prelude.Types.Left', E158} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V211) -> begin (V218 = ('un--getToBind'(V0, V1, V4, V3, V9, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E160, E161, E162, E163, E164, E165} -> (fun (V212, V213, V214, V215, V216, V217) -> V212 end(E160, E161, E162, E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10, V8, V78, V13))), case V218 of {'Idris.Prelude.Types.Left', E166} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V220) -> begin (V221 = ('Idris.Idris2.TTImp.Elab.Check':'un--clearToBind'(V4, V78, V13))), case V221 of {'Idris.Prelude.Types.Left', E168} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V223) -> begin (V225 = begin (V224 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V224} end), case V225 of {'Idris.Prelude.Types.Left', E170} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V227) -> begin (V257 = begin (V256 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--updateEnv'(case V17 of {'Idris.TTImp.Elab.Check.MkEState', E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185} -> (fun (V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241) -> V228 end(E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V32, V47, V62, case V227 of {'Idris.TTImp.Elab.Check.MkEState', E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199} -> (fun (V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255) -> {'Idris.TTImp.Elab.Check.MkEState', V242, V243, V244, V245, [], V247, V248, V249, V250, V251, V252, V253, V254, V255} end(E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), {'Idris.Prelude.Types.Right', V256} end), case V257 of {'Idris.Prelude.Types.Left', E200} -> (fun (V258) -> {'Idris.Prelude.Types.Left', V258} end(E200)); {'Idris.Prelude.Types.Right', E201} -> (fun (V259) -> begin (V260 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V96))(V13))), case V260 of {'Idris.Prelude.Types.Left', E202} -> (fun (V261) -> {'Idris.Prelude.Types.Left', V261} end(E202)); {'Idris.Prelude.Types.Right', E203} -> (fun (V262) -> begin (V264 = begin (V263 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V263} end), case V264 of {'Idris.Prelude.Types.Left', E204} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V266) -> begin (V273 = begin (V267 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V266, V8, V95, V13))), case V267 of {'Idris.Prelude.Types.Left', E206} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V269) -> begin (V270 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V266, V8, V262, V13))), case V270 of {'Idris.Prelude.Types.Left', E208} -> (fun (V271) -> {'Idris.Prelude.Types.Left', V271} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V272) -> ('un--bindImplicits'(V1, V0, V9, V10, V266, V8, V220, V269, V272, V13)) end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V273 of {'Idris.Prelude.Types.Left', E210} -> (fun (V274) -> {'Idris.Prelude.Types.Left', V274} end(E210)); {'Idris.Prelude.Types.Right', E211} -> (fun (V275) -> case V275 of {'Idris.Builtin.MkPair', E212, E213} -> (fun (V276, V277) -> begin (V281 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V278) -> fun (V279) -> ('un--implicitBind'(V1, V3, V278, V279)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V280) -> ('Idris.Idris2.Builtin':'un--fst'(V280)) end, V220)), V13))), case V281 of {'Idris.Prelude.Types.Left', E214} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E214)); {'Idris.Prelude.Types.Right', E215} -> (fun (V283) -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V276, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V277)), V12, V13)) end(E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindUnsolved'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> begin (V9 = begin (V8 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V30 = case V11 of {'Idris.TTImp.Elab.Check.MkEState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V22 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bindable unsolved implicits: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V32, V33)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V34) -> ('Idris.Idris2.Builtin':'un--fst'(V34)) end, V30)))))) end, V7))), case V35 of {'Idris.Prelude.Types.Left', E18} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V38) -> ('nested--9016-9728--in--un--mkImplicit'(V6, V5, V4, V3, V0, V2, V1, case V11 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V39 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, case V11 of {'Idris.TTImp.Elab.Check.MkEState', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V55 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V11 of {'Idris.TTImp.Elab.Check.MkEState', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V70 end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V38)) end, case V11 of {'Idris.TTImp.Elab.Check.MkEState', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94) -> V87 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--bindImplicits'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V3 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V8}} end()); _ -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('nested--10931-11383--in--un--nHoles'(V1, V8, V7, V6, V5, V4, V3, V2, V0, V10, V11)) end end, V6, [], V9))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('un--liftImps'(V1, V3, ('un--bindImplVars'(V2, V3, V4, V5, V14, V7, V8))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--bindImplVars'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of {'Idris.TTImp.TTImp.NONE'} -> (fun () -> {'Idris.Builtin.MkPair', V5, V6} end()); _ -> begin (V10 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> {'Idris.Builtin.MkPair', ('nested--10416-10956--in--un--tidyName'(V6, V5, V4, V3, V2, V1, V0, V8)), {'Idris.Builtin.MkPair', V8, V9}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V4))), ('nested--10416-10957--in--un--getBinds'(V6, V5, V4, V3, V2, V1, V0, V10, {'Idris.Core.TT.Bounds.None'}, V5, V6)) end end.
