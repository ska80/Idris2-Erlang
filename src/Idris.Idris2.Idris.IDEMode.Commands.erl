-module('Idris.Idris2.Idris.IDEMode.Commands').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--toSExp-4760'/4,
  'nested--6452-4217--in--un--getMode'/5,
  'nested--5816-3699--in--un--getMode'/5,
  'nested--6944-4536--in--un--escapeChar'/1,
  'dn--un--toSExp_SExpable_String'/1,
  'dn--un--toSExp_SExpable_SExp'/1,
  'dn--un--toSExp_SExpable_Nat'/1,
  'dn--un--toSExp_SExpable_Name'/1,
  'dn--un--toSExp_SExpable_Integer'/1,
  'dn--un--toSExp_SExpable_Int'/1,
  'dn--un--toSExp_SExpable_IDECommand'/1,
  'dn--un--toSExp_SExpable_Bool'/1,
  'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/2,
  'dn--un--toSExp_SExpable_(Maybe $a)'/2,
  'dn--un--toSExp_SExpable_(List $a)'/2,
  'dn--un--show_Show_SExp'/1,
  'dn--un--showPrec_Show_SExp'/2,
  'dn--un--__Impl_Show_SExp'/0,
  'dn--un--__Impl_SExpable_String'/1,
  'dn--un--__Impl_SExpable_SExp'/1,
  'dn--un--__Impl_SExpable_Nat'/1,
  'dn--un--__Impl_SExpable_Name'/1,
  'dn--un--__Impl_SExpable_Integer'/1,
  'dn--un--__Impl_SExpable_Int'/1,
  'dn--un--__Impl_SExpable_IDECommand'/1,
  'dn--un--__Impl_SExpable_Bool'/1,
  'dn--un--__Impl_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/2,
  'dn--un--__Impl_SExpable_(Maybe $a)'/2,
  'dn--un--__Impl_SExpable_(List $a)'/2,
  'un--version'/2,
  'un--toSExp'/2,
  'un--sendStr'/3,
  'un--send'/4,
  'un--readHints'/1,
  'un--putIDECommand'/1,
  'un--getMsg'/1,
  'un--getIDECommand'/1,
  'un--escape'/1
]).
'case--toSExp-4760'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.IDEMode.Commands.SExpList', E0} -> (fun (V4) -> {'Idris.Idris.IDEMode.Commands.SExpList', [(('Idris.Idris2.Builtin':'un--fst'(V0))(V1)) | V4]} end(E0)); _ -> {'Idris.Idris.IDEMode.Commands.SExpList', [(('Idris.Idris2.Builtin':'un--fst'(V0))(V1)) | [V3 | []]]} end.
'nested--6452-4217--in--un--getMode'(V0, V1, V2, V3, V4) -> case V4 of 1 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"all"/utf8>>}; 0 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"other"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5816-3699--in--un--getMode'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, <<"all"/utf8>>)).
'nested--6944-4536--in--un--escapeChar'(V0) -> case V0 of $\x{5c} -> [$\x{5c} | [$\x{5c} | []]]; $\x{22} -> [$\x{5c} | [$\x{22} | []]]; _ -> [V0 | []] end.
'dn--un--toSExp_SExpable_String'(V0) -> {'Idris.Idris.IDEMode.Commands.StringAtom', V0}.
'dn--un--toSExp_SExpable_SExp'(V0) -> V0.
'dn--un--toSExp_SExpable_Nat'(V0) -> {'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V0))}.
'dn--un--toSExp_SExpable_Name'(V0) -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))}.
'dn--un--toSExp_SExpable_Integer'(V0) -> {'Idris.Idris.IDEMode.Commands.IntegerAtom', V0}.
'dn--un--toSExp_SExpable_Int'(V0) -> {'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V0))}.
'dn--un--toSExp_SExpable_IDECommand'(V0) -> ('un--putIDECommand'(V0)).
'dn--un--toSExp_SExpable_Bool'(V0) -> {'Idris.Idris.IDEMode.Commands.BoolAtom', V0}.
'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> ('case--toSExp-4760'(V0, V2, V3, (('Idris.Idris2.Builtin':'un--snd'(V0))(V3)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_(Maybe $a)'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', []} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> (V0(V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_(List $a)'(V0, V1) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> (V0(V2)) end, V1))}.
'dn--un--show_Show_SExp'(V0) -> case V0 of {'Idris.Idris.IDEMode.Commands.SExpList', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('dn--un--show_Show_SExp'(V2)) end, V1)))), <<")"/utf8>>)))) end(E0)); {'Idris.Idris.IDEMode.Commands.StringAtom', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--escape'(V3)), <<"\x{22}"/utf8>>)))) end(E1)); {'Idris.Idris.IDEMode.Commands.BoolAtom', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V4)))) end(E2)); {'Idris.Idris.IDEMode.Commands.IntegerAtom', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V5)) end(E3)); {'Idris.Idris.IDEMode.Commands.SymbolAtom', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, V6)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_SExp'(V0, V1) -> ('dn--un--show_Show_SExp'(V1)).
'dn--un--__Impl_Show_SExp'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SExp'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SExp'(V1, V2)) end end}.
'dn--un--__Impl_SExpable_String'(V0) -> ('dn--un--toSExp_SExpable_String'(V0)).
'dn--un--__Impl_SExpable_SExp'(V0) -> ('dn--un--toSExp_SExpable_SExp'(V0)).
'dn--un--__Impl_SExpable_Nat'(V0) -> ('dn--un--toSExp_SExpable_Nat'(V0)).
'dn--un--__Impl_SExpable_Name'(V0) -> ('dn--un--toSExp_SExpable_Name'(V0)).
'dn--un--__Impl_SExpable_Integer'(V0) -> ('dn--un--toSExp_SExpable_Integer'(V0)).
'dn--un--__Impl_SExpable_Int'(V0) -> ('dn--un--toSExp_SExpable_Int'(V0)).
'dn--un--__Impl_SExpable_IDECommand'(V0) -> ('dn--un--toSExp_SExpable_IDECommand'(V0)).
'dn--un--__Impl_SExpable_Bool'(V0) -> ('dn--un--toSExp_SExpable_Bool'(V0)).
'dn--un--__Impl_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1) -> ('dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1)).
'dn--un--__Impl_SExpable_(Maybe $a)'(V0, V1) -> ('dn--un--toSExp_SExpable_(Maybe $a)'(V0, V1)).
'dn--un--__Impl_SExpable_(List $a)'(V0, V1) -> ('dn--un--toSExp_SExpable_(List $a)'(V0, V1)).
'un--version'(V0, V1) -> ('dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V2) -> ('dn--un--toSExp_SExpable_SExp'(V2)) end, fun (V3) -> ('dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V4) -> ('dn--un--toSExp_SExpable_Int'(V4)) end, fun (V5) -> ('dn--un--toSExp_SExpable_Int'(V5)) end}, V3)) end}, {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"protocol-version"/utf8>>}, {'Idris.Builtin.MkPair', V0, V1}})).
'un--toSExp'(V0, V1) -> (V0(V1)).
'un--sendStr'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> 0 end, ('Idris.Idris2.Erlang.System.File':'un--fPutStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V0, V1)), V2)).
'un--send'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_SExp'((V1(V3)))), <<"\x{a}"/utf8>>))), fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"ide-mode.send"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> V4 end, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('un--sendStr'(V2, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)))))))), V5))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V14 = begin (V13 = ('un--sendStr'(V2, V4, V5))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V44 = (('Idris.Idris2.Erlang.System.File':'un--fflush'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, V2))(V5))), {'Idris.Prelude.Types.Right', V44} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--readHints'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Just', []}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.IDEMode.Commands.StringAtom', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--readHints'(V2)), fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([V3 | V4])) end)) end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--putIDECommand'(V0) -> case V0 of {'Idris.Idris.IDEMode.Commands.Interpret', E0} -> (fun (V1) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"interpret"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V1} | []]]} end(E0)); {'Idris.Idris.IDEMode.Commands.LoadFile', E1, E2} -> (fun (V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"load-file"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V2} | []]]} end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V4) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"load-file"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V2} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V4} | []]]]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); {'Idris.Idris.IDEMode.Commands.TypeOf', E4, E5} -> (fun (V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"type-of"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V5} | []]]} end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V8, V9) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"type-of"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V5} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V8} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V9} | []]]]]} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); {'Idris.Idris.IDEMode.Commands.NameAt', E9, E10} -> (fun (V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"name-at"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V10} | []]]} end()); {'Idris.Prelude.Types.Just', E11} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V13, V14) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"name-at"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V10} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V13} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V14} | []]]]]} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); {'Idris.Idris.IDEMode.Commands.CaseSplit', E14, E15, E16} -> (fun (V15, V16, V17) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"case-split"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V15} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V16} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V17} | []]]]]} end(E14, E15, E16)); {'Idris.Idris.IDEMode.Commands.AddClause', E17, E18} -> (fun (V18, V19) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"add-clause"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V18} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V19} | []]]]} end(E17, E18)); {'Idris.Idris.IDEMode.Commands.AddMissing', E19, E20} -> (fun (V20, V21) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"add-missing"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V20} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V21} | []]]]} end(E19, E20)); {'Idris.Idris.IDEMode.Commands.ExprSearch', E21, E22, E23, E24} -> (fun (V22, V23, V24, V25) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"proof-search"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V22} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V23} | [{'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> {'Idris.Idris.IDEMode.Commands.StringAtom', V26} end, V24))} | [('nested--6452-4217--in--un--getMode'(V25, V24, V23, V22, V25)) | []]]]]]} end(E21, E22, E23, E24)); {'Idris.Idris.IDEMode.Commands.ExprSearchNext'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"proof-search-next"/utf8>>} end()); {'Idris.Idris.IDEMode.Commands.GenerateDef', E25, E26} -> (fun (V27, V28) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"generate-def"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V27} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V28} | []]]]} end(E25, E26)); {'Idris.Idris.IDEMode.Commands.GenerateDefNext'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"generate-def-next"/utf8>>} end()); {'Idris.Idris.IDEMode.Commands.MakeLemma', E27, E28} -> (fun (V29, V30) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"make-lemma"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V29} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V30} | []]]]} end(E27, E28)); {'Idris.Idris.IDEMode.Commands.MakeCase', E29, E30} -> (fun (V31, V32) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"make-case"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V31} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V32} | []]]]} end(E29, E30)); {'Idris.Idris.IDEMode.Commands.MakeWith', E31, E32} -> (fun (V33, V34) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"make-with"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V33} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V34} | []]]]} end(E31, E32)); {'Idris.Idris.IDEMode.Commands.DocsFor', E33, E34} -> (fun (V35, V36) -> begin (V38 = case V36 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E35} -> (fun (V37) -> case V37 of 0 -> [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"overview"/utf8>>} | []]; 1 -> [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"full"/utf8>>} | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"docs-for"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V35} | V38]]} end end(E33, E34)); {'Idris.Idris.IDEMode.Commands.Apropos', E36} -> (fun (V39) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"apropos"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V39} | []]]} end(E36)); {'Idris.Idris.IDEMode.Commands.Metavariables', E37} -> (fun (V40) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"metavariables"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', V40} | []]]} end(E37)); {'Idris.Idris.IDEMode.Commands.WhoCalls', E38} -> (fun (V41) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"who-calls"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V41} | []]]} end(E38)); {'Idris.Idris.IDEMode.Commands.CallsWho', E39} -> (fun (V42) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"calls-who"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V42} | []]]} end(E39)); {'Idris.Idris.IDEMode.Commands.BrowseNamespace', E40} -> (fun (V43) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"browse-namespace"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V43} | []]]} end(E40)); {'Idris.Idris.IDEMode.Commands.NormaliseTerm', E41} -> (fun (V44) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"normalise-term"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V44} | []]]} end(E41)); {'Idris.Idris.IDEMode.Commands.ShowTermImplicits', E42} -> (fun (V45) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-term-implicits"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V45} | []]]} end(E42)); {'Idris.Idris.IDEMode.Commands.HideTermImplicits', E43} -> (fun (V46) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"hide-term-implicits"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V46} | []]]} end(E43)); {'Idris.Idris.IDEMode.Commands.ElaborateTerm', E44} -> (fun (V47) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"elaborate-term"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V47} | []]]} end(E44)); {'Idris.Idris.IDEMode.Commands.PrintDefinition', E45} -> (fun (V48) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"print-definition"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V48} | []]]} end(E45)); {'Idris.Idris.IDEMode.Commands.ReplCompletions', E46} -> (fun (V49) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"repl-completions"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V49} | []]]} end(E46)); {'Idris.Idris.IDEMode.Commands.Directive', E47} -> (fun (V50) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"directive"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V50} | []]]} end(E47)); {'Idris.Idris.IDEMode.Commands.EnableSyntax', E48} -> (fun (V51) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"enable-syntax"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.BoolAtom', V51} | []]]} end(E48)); {'Idris.Idris.IDEMode.Commands.GetOptions'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"get-options"/utf8>>} | []]} end()); {'Idris.Idris.IDEMode.Commands.Version'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"version"/utf8>>} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getMsg'(V0) -> case V0 of {'Idris.Idris.IDEMode.Commands.SExpList', E0} -> (fun (V1) -> case V1 of [E1 | E2] -> (fun (V2, V3) -> case V3 of [E3 | E4] -> (fun (V4, V5) -> case V4 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E5} -> (fun (V6) -> case V5 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--getIDECommand'(V2)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V7, V6})) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getIDECommand'(V0) -> case V0 of {'Idris.Idris.IDEMode.Commands.SExpList', E0} -> (fun (V1) -> case V1 of [E1 | E2] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.IDEMode.Commands.SymbolAtom', E3} -> (fun (V4) -> case V4 of <<"interpret"/utf8>> -> case V3 of [E4 | E5] -> (fun (V5, V6) -> case V5 of {'Idris.Idris.IDEMode.Commands.StringAtom', E6} -> (fun (V7) -> case V6 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.Interpret', V7}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"load-file"/utf8>> -> case V3 of [E7 | E8] -> (fun (V8, V9) -> case V8 of {'Idris.Idris.IDEMode.Commands.StringAtom', E9} -> (fun (V10) -> case V9 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.LoadFile', V10, {'Idris.Prelude.Types.Nothing'}}}; [E10 | E11] -> (fun (V11, V12) -> case V11 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E12} -> (fun (V13) -> case V12 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.LoadFile', V10, {'Idris.Prelude.Types.Just', V13}}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"type-of"/utf8>> -> case V3 of [E13 | E14] -> (fun (V14, V15) -> case V14 of {'Idris.Idris.IDEMode.Commands.StringAtom', E15} -> (fun (V16) -> case V15 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.TypeOf', V16, {'Idris.Prelude.Types.Nothing'}}}; [E16 | E17] -> (fun (V17, V18) -> case V17 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E18} -> (fun (V19) -> case V18 of [E19 | E20] -> (fun (V20, V21) -> case V20 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E21} -> (fun (V22) -> case V21 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.TypeOf', V16, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V19, V22}}}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E19, E20)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13, E14)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"name-at"/utf8>> -> case V3 of [E22 | E23] -> (fun (V23, V24) -> case V23 of {'Idris.Idris.IDEMode.Commands.StringAtom', E24} -> (fun (V25) -> case V24 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.NameAt', V25, {'Idris.Prelude.Types.Nothing'}}}; [E25 | E26] -> (fun (V26, V27) -> case V26 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E27} -> (fun (V28) -> case V27 of [E28 | E29] -> (fun (V29, V30) -> case V29 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E30} -> (fun (V31) -> case V30 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.NameAt', V25, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V28, V31}}}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E30)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E28, E29)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E27)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E25, E26)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22, E23)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"case-split"/utf8>> -> case V3 of [E31 | E32] -> (fun (V32, V33) -> case V32 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E33} -> (fun (V34) -> case V33 of [E34 | E35] -> (fun (V35, V36) -> case V35 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E36} -> (fun (V37) -> case V36 of [E37 | E38] -> (fun (V38, V39) -> case V38 of {'Idris.Idris.IDEMode.Commands.StringAtom', E39} -> (fun (V40) -> case V39 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.CaseSplit', V34, V37, V40}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E39)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E37, E38)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E36)); {'Idris.Idris.IDEMode.Commands.StringAtom', E40} -> (fun (V41) -> case V36 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.CaseSplit', V34, 0, V41}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E40)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E34, E35)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E33)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E31, E32)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"add-clause"/utf8>> -> case V3 of [E41 | E42] -> (fun (V42, V43) -> case V42 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E43} -> (fun (V44) -> case V43 of [E44 | E45] -> (fun (V45, V46) -> case V45 of {'Idris.Idris.IDEMode.Commands.StringAtom', E46} -> (fun (V47) -> case V46 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.AddClause', V44, V47}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E46)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E44, E45)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E43)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E41, E42)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"add-missing"/utf8>> -> case V3 of [E47 | E48] -> (fun (V48, V49) -> case V48 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E49} -> (fun (V50) -> case V49 of [E50 | E51] -> (fun (V51, V52) -> case V51 of {'Idris.Idris.IDEMode.Commands.StringAtom', E52} -> (fun (V53) -> case V52 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.AddMissing', V50, V53}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E52)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E50, E51)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E49)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E47, E48)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"proof-search"/utf8>> -> case V3 of [E53 | E54] -> (fun (V54, V55) -> case V54 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E55} -> (fun (V56) -> case V55 of [E56 | E57] -> (fun (V57, V58) -> case V57 of {'Idris.Idris.IDEMode.Commands.StringAtom', E58} -> (fun (V59) -> case V58 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.ExprSearch', V56, V59, [], 0}}; [E59 | E60] -> (fun (V60, V61) -> case V60 of {'Idris.Idris.IDEMode.Commands.SExpList', E61} -> (fun (V62) -> case V61 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V65, V66)) end end end end, fun (V67) -> {'Idris.Idris.IDEMode.Commands.ExprSearch', V56, V59, V67, 0} end, ('un--readHints'(V62)))); [E62 | E63] -> (fun (V68, V69) -> case V68 of {'Idris.Idris.IDEMode.Commands.SymbolAtom', E64} -> (fun (V70) -> case V69 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V73, V74)) end end end end, fun (V75) -> {'Idris.Idris.IDEMode.Commands.ExprSearch', V56, V59, V75, ('nested--5816-3699--in--un--getMode'(V56, V59, V62, V70, V70))} end, ('un--readHints'(V62)))); _ -> {'Idris.Prelude.Types.Nothing'} end end(E64)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E62, E63)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E61)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E59, E60)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E58)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E56, E57)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E55)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E53, E54)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"generate-def"/utf8>> -> case V3 of [E65 | E66] -> (fun (V76, V77) -> case V76 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E67} -> (fun (V78) -> case V77 of [E68 | E69] -> (fun (V79, V80) -> case V79 of {'Idris.Idris.IDEMode.Commands.StringAtom', E70} -> (fun (V81) -> case V80 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.GenerateDef', V78, V81}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E70)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E68, E69)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E67)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E65, E66)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"make-lemma"/utf8>> -> case V3 of [E71 | E72] -> (fun (V82, V83) -> case V82 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E73} -> (fun (V84) -> case V83 of [E74 | E75] -> (fun (V85, V86) -> case V85 of {'Idris.Idris.IDEMode.Commands.StringAtom', E76} -> (fun (V87) -> case V86 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.MakeLemma', V84, V87}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E76)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E74, E75)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E73)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E71, E72)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"make-case"/utf8>> -> case V3 of [E77 | E78] -> (fun (V88, V89) -> case V88 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E79} -> (fun (V90) -> case V89 of [E80 | E81] -> (fun (V91, V92) -> case V91 of {'Idris.Idris.IDEMode.Commands.StringAtom', E82} -> (fun (V93) -> case V92 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.MakeCase', V90, V93}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E82)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E80, E81)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E79)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E77, E78)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"make-with"/utf8>> -> case V3 of [E83 | E84] -> (fun (V94, V95) -> case V94 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E85} -> (fun (V96) -> case V95 of [E86 | E87] -> (fun (V97, V98) -> case V97 of {'Idris.Idris.IDEMode.Commands.StringAtom', E88} -> (fun (V99) -> case V98 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.MakeWith', V96, V99}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E88)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E86, E87)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E85)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E83, E84)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"docs-for"/utf8>> -> case V3 of [E89 | E90] -> (fun (V100, V101) -> case V100 of {'Idris.Idris.IDEMode.Commands.StringAtom', E91} -> (fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(case V101 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}}; [E92 | E93] -> (fun (V103, V104) -> case V103 of {'Idris.Idris.IDEMode.Commands.SymbolAtom', E94} -> (fun (V105) -> case V105 of <<"overview"/utf8>> -> case V104 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', 0}}; _ -> {'Idris.Prelude.Types.Nothing'} end; <<"full"/utf8>> -> case V104 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', 1}}; _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> {'Idris.Prelude.Types.Nothing'} end end(E94)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E92, E93)); _ -> {'Idris.Prelude.Types.Nothing'} end, fun (V106) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.DocsFor', V102, V106}} end)) end(E91)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E89, E90)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"apropos"/utf8>> -> case V3 of [E95 | E96] -> (fun (V107, V108) -> case V107 of {'Idris.Idris.IDEMode.Commands.StringAtom', E97} -> (fun (V109) -> case V108 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.Apropos', V109}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E97)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E95, E96)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"directive"/utf8>> -> case V3 of [E98 | E99] -> (fun (V110, V111) -> case V110 of {'Idris.Idris.IDEMode.Commands.StringAtom', E100} -> (fun (V112) -> case V111 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.Directive', V112}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E100)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E98, E99)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"metavariables"/utf8>> -> case V3 of [E101 | E102] -> (fun (V113, V114) -> case V113 of {'Idris.Idris.IDEMode.Commands.IntegerAtom', E103} -> (fun (V115) -> case V114 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.Metavariables', V115}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E103)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E101, E102)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"who-calls"/utf8>> -> case V3 of [E104 | E105] -> (fun (V116, V117) -> case V116 of {'Idris.Idris.IDEMode.Commands.StringAtom', E106} -> (fun (V118) -> case V117 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.WhoCalls', V118}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E106)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E104, E105)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"calls-who"/utf8>> -> case V3 of [E107 | E108] -> (fun (V119, V120) -> case V119 of {'Idris.Idris.IDEMode.Commands.StringAtom', E109} -> (fun (V121) -> case V120 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.CallsWho', V121}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E109)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E107, E108)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"browse-namespace"/utf8>> -> case V3 of [E110 | E111] -> (fun (V122, V123) -> case V122 of {'Idris.Idris.IDEMode.Commands.StringAtom', E112} -> (fun (V124) -> case V123 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.BrowseNamespace', V124}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E112)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E110, E111)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"normalise-term"/utf8>> -> case V3 of [E113 | E114] -> (fun (V125, V126) -> case V125 of {'Idris.Idris.IDEMode.Commands.StringAtom', E115} -> (fun (V127) -> case V126 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.NormaliseTerm', V127}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E115)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E113, E114)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"show-term-implicits"/utf8>> -> case V3 of [E116 | E117] -> (fun (V128, V129) -> case V128 of {'Idris.Idris.IDEMode.Commands.StringAtom', E118} -> (fun (V130) -> case V129 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.ShowTermImplicits', V130}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E118)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E116, E117)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"hide-term-implicits"/utf8>> -> case V3 of [E119 | E120] -> (fun (V131, V132) -> case V131 of {'Idris.Idris.IDEMode.Commands.StringAtom', E121} -> (fun (V133) -> case V132 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.HideTermImplicits', V133}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E121)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E119, E120)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"elaborate-term"/utf8>> -> case V3 of [E122 | E123] -> (fun (V134, V135) -> case V134 of {'Idris.Idris.IDEMode.Commands.StringAtom', E124} -> (fun (V136) -> case V135 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.ElaborateTerm', V136}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E124)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E122, E123)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"print-definition"/utf8>> -> case V3 of [E125 | E126] -> (fun (V137, V138) -> case V137 of {'Idris.Idris.IDEMode.Commands.StringAtom', E127} -> (fun (V139) -> case V138 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.PrintDefinition', V139}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E127)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E125, E126)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"repl-completions"/utf8>> -> case V3 of [E128 | E129] -> (fun (V140, V141) -> case V140 of {'Idris.Idris.IDEMode.Commands.StringAtom', E130} -> (fun (V142) -> case V141 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.ReplCompletions', V142}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E130)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E128, E129)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"enable-syntax"/utf8>> -> case V3 of [E131 | E132] -> (fun (V143, V144) -> case V143 of {'Idris.Idris.IDEMode.Commands.BoolAtom', E133} -> (fun (V145) -> case V144 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.EnableSyntax', V145}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E133)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E131, E132)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"get-options"/utf8>> -> case V3 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.GetOptions'}}; _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> {'Idris.Prelude.Types.Nothing'} end end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Idris.IDEMode.Commands.SymbolAtom', E134} -> (fun (V146) -> case V146 of <<"proof-search-next"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.ExprSearchNext'}}; <<"generate-def-next"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.GenerateDefNext'}}; <<"version"/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Idris.IDEMode.Commands.Version'}}; _ -> {'Idris.Prelude.Types.Nothing'} end end(E134)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--escape'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V29) -> ('nested--6944-4536--in--un--escapeChar'(V29)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
