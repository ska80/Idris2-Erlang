-module('Idris.Idris2.Core.UnifyState').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in dumpHole-7581'/13,
  'case--dumpHole,dumpConstraint-7170'/10,
  'case--case block in checkValidHole-6334'/12,
  'case--max-3170'/3,
  'case--min-3156'/3,
  'nested--7162-3205--in--un--tag'/3,
  'nested--11300-6935--in--un--nameEq'/6,
  'nested--10060-5853--in--un--envArgs'/8,
  'nested--9969-5764--in--un--envArgs'/10,
  'nested--9852-5644--in--un--envArgs'/9,
  'nested--9565-5388--in--un--envArgs'/11,
  'nested--11517-7147--in--un--dumpConstraint'/7,
  'nested--10504-6265--in--un--checkRef'/8,
  'dn--un--min_Ord_DelayReason'/2,
  'dn--un--max_Ord_DelayReason'/2,
  'dn--un--compare_Ord_DelayReason'/2,
  'dn--un--__Impl_Ord_DelayReason'/0,
  'dn--un--__Impl_Eq_DelayReason'/0,
  'dn--un-->_Ord_DelayReason'/2,
  'dn--un-->=_Ord_DelayReason'/2,
  'dn--un--==_Eq_DelayReason'/2,
  'dn--un--<_Ord_DelayReason'/2,
  'dn--un--<=_Ord_DelayReason'/2,
  'dn--un--/=_Eq_DelayReason'/2,
  'un--tryUnify'/5,
  'un--tryErrorUnify'/4,
  'un--setConstraint'/4,
  'un--saveHoles'/2,
  'un--restoreHoles'/3,
  'un--resetNextVar'/2,
  'un--removeNoSolve'/3,
  'un--removeHoleName'/4,
  'un--removeHole'/3,
  'un--removeGuess'/3,
  'un--newSearch'/10,
  'un--newMetaLets'/11,
  'un--newMeta'/10,
  'un--newDelayed'/8,
  'un--newConstant'/9,
  'un--mkConstantAppArgsSub'/6,
  'un--mkConstantAppArgsOthers'/6,
  'un--mkConstantAppArgs'/5,
  'un--mkConstant'/4,
  'un--isHole'/3,
  'un--isCurrentHole'/3,
  'un--initUState'/0,
  'un--handleUnify'/5,
  'un--getHoles'/2,
  'un--getGuesses'/2,
  'un--getCurrentHoles'/2,
  'un--genWithName'/4,
  'un--genVarName'/4,
  'un--genName'/4,
  'un--genMVName'/4,
  'un--genCaseName'/4,
  'un--dumpHole'/6,
  'un--dumpConstraints'/6,
  'un--deleteConstraint'/3,
  'un--checkValidHole'/4,
  'un--checkUserHolesAfter'/5,
  'un--checkUserHoles'/4,
  'un--checkNoGuards'/3,
  'un--checkDelayedHoles'/3,
  'un--applyToSub'/5,
  'un--applyToOthers'/5,
  'un--applyToFull'/4,
  'un--applyTo'/4,
  'un--addPolyConstraint'/8,
  'un--addNoSolve'/3,
  'un--addHoleName'/5,
  'un--addGuessName'/5,
  'un--addDot'/10,
  'un--addDelayedHoleName'/3,
  'un--addConstraint'/4
]).
'case--case block in dumpHole-7581'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V13 of {'Idris.Core.Context.Context.Guess', E2, E3, E4} -> (fun (V15, V16, V17) -> begin (V92 = begin (V18 = ('Idris.Idris2.Core.Context':'un--getFullName'(V3, {'Idris.Core.Name.Resolved', V1}, V12))), case V18 of {'Idris.Prelude.Types.Left', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V8, {'Idris.Core.Env.Nil'}, V14, V12))), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V24, V25, V26)) end end end, fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V27, V28, V29)) end end end}, V23, V12))), case V30 of {'Idris.Prelude.Types.Left', E9} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V8, {'Idris.Core.Env.Nil'}, V15, V12))), case V33 of {'Idris.Prelude.Types.Left', E11} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V35) -> case V0 of <<""/utf8>> -> begin (V63 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"!"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V32)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}  = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V35)), <<"\x{a}\x{9}when"/utf8>>))))))))))))))))))))(V12))), {'Idris.Prelude.Types.Right', V63} end; _ -> begin (V91 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> V70 end end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), begin (V78 = (V75(V76))), (V77(V78)) end end end end end end end}, fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V81(V83))), ((V82(V84))(V83)) end end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V86(V87))), (V88(V87)) end end end end}, fun (V89) -> fun (V90) -> V90 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"!"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V32)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}  = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V35)), <<"\x{a}\x{9}when"/utf8>>))))))))))))))))))))))))(V12))), {'Idris.Prelude.Types.Right', V91} end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V92 of {'Idris.Prelude.Types.Left', E13} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V94) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V95) -> fun (V96) -> ('nested--11517-7147--in--un--dumpConstraint'(V0, V1, V2, V3, V4, V95, V96)) end end, V17, V12)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4)); {'Idris.Core.Context.Context.Hole', E15, E16} -> (fun (V97, V98) -> begin (V99 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V8, {'Idris.Core.Env.Nil'}, V14, V12))), case V99 of {'Idris.Prelude.Types.Left', E17} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V101) -> case V0 of <<""/utf8>> -> begin (V171 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> V108 end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), begin (V116 = (V113(V114))), (V115(V116)) end end end end end end end}, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), ((V120(V122))(V121)) end end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V124(V125))), (V126(V125)) end end end end}, fun (V127) -> fun (V128) -> V128 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V9 of {'Idris.Core.Context.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148) -> V130 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V101)), case case V98 of {'Idris.Core.Context.Context.MkHoleFlags', E101, E102} -> (fun (V149, V150) -> V149 end(E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<" (ImplBind)"/utf8>>; 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<""/utf8>>, case case V9 of {'Idris.Core.Context.Context.MkGlobalDef', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100} -> (fun (V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170) -> V165 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<" (Invertible)"/utf8>>; 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))))(V12))), {'Idris.Prelude.Types.Right', V171} end; _ -> begin (V241 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V174, V175, V176)) end end end end end, fun (V177) -> fun (V178) -> fun (V179) -> V178 end end end, fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> begin (V185 = (V182(V184))), begin (V186 = (V183(V184))), (V185(V186)) end end end end end end end}, fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> begin (V192 = (V189(V191))), ((V190(V192))(V191)) end end end end end end, fun (V193) -> fun (V194) -> fun (V195) -> begin (V196 = (V194(V195))), (V196(V195)) end end end end}, fun (V197) -> fun (V198) -> V198 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V9 of {'Idris.Core.Context.Context.MkGlobalDef', E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218) -> V200 end(E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V101)), case case V98 of {'Idris.Core.Context.Context.MkHoleFlags', E59, E60} -> (fun (V219, V220) -> V219 end(E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<" (ImplBind)"/utf8>>; 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<""/utf8>>, case case V9 of {'Idris.Core.Context.Context.MkGlobalDef', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240) -> V235 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<" (Invertible)"/utf8>>; 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))))))))(V12))), {'Idris.Prelude.Types.Right', V241} end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16)); {'Idris.Core.Context.Context.BySearch', E103, E104, E105} -> (fun (V242, V243, V244) -> begin (V245 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V8, {'Idris.Core.Env.Nil'}, V14, V12))), case V245 of {'Idris.Prelude.Types.Left', E106} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V247) -> begin (V254 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V248, V249, V250)) end end end, fun (V251) -> fun (V252) -> fun (V253) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V251, V252, V253)) end end end}, V247, V12))), case V254 of {'Idris.Prelude.Types.Left', E108} -> (fun (V255) -> {'Idris.Prelude.Types.Left', V255} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V256) -> case V0 of <<""/utf8>> -> begin (V284 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V259, V260, V261)) end end end end end, fun (V262) -> fun (V263) -> fun (V264) -> V263 end end end, fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> fun (V269) -> begin (V270 = (V267(V269))), begin (V271 = (V268(V269))), (V270(V271)) end end end end end end end}, fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> begin (V277 = (V274(V276))), ((V275(V277))(V276)) end end end end end end, fun (V278) -> fun (V279) -> fun (V280) -> begin (V281 = (V279(V280))), (V281(V280)) end end end end}, fun (V282) -> fun (V283) -> V283 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V256))))))))))))))))(V12))), {'Idris.Prelude.Types.Right', V284} end; _ -> begin (V312 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V287, V288, V289)) end end end end end, fun (V290) -> fun (V291) -> fun (V292) -> V291 end end end, fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> begin (V298 = (V295(V297))), begin (V299 = (V296(V297))), (V298(V299)) end end end end end end end}, fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> fun (V304) -> begin (V305 = (V302(V304))), ((V303(V305))(V304)) end end end end end end, fun (V306) -> fun (V307) -> fun (V308) -> begin (V309 = (V307(V308))), (V309(V308)) end end end end}, fun (V310) -> fun (V311) -> V311 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V256))))))))))))))))))))(V12))), {'Idris.Prelude.Types.Right', V312} end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103, E104, E105)); {'Idris.Core.Context.Context.PMDef', E110, E111, E112, E113, E114} -> (fun (V313, V314, V315, V316, V317) -> begin (V318 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V8, {'Idris.Core.Env.Nil'}, V14, V12))), case V318 of {'Idris.Prelude.Types.Left', E115} -> (fun (V319) -> {'Idris.Prelude.Types.Left', V319} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V320) -> begin (V321 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V8, {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V1}}, V12))), case V321 of {'Idris.Prelude.Types.Left', E117} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V323) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, (1 + (1 + (1 + (1 + 0)))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Solved: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V320)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V323)))))))))))) end, V12)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110, E111, E112, E113, E114)); {'Idris.Core.Context.Context.ImpBind'} -> (fun () -> begin (V324 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V8, {'Idris.Core.Env.Nil'}, V14, V12))), case V324 of {'Idris.Prelude.Types.Left', E119} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V326) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, (1 + (1 + (1 + (1 + 0)))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bound: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V326)))))))) end, V12)) end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.Context.Context.Delayed'} -> (fun () -> begin (V327 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V3, [], V8, {'Idris.Core.Env.Nil'}, V14, V12))), case V327 of {'Idris.Prelude.Types.Left', E121} -> (fun (V328) -> {'Idris.Prelude.Types.Left', V328} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V329) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, (1 + (1 + (1 + (1 + 0)))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Delayed elaborator : "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V329)))) end, V12)) end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'case--dumpHole,dumpConstraint-7170'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case V10 of {'Idris.Core.UnifyState.Resolved'} -> (fun () -> case V0 of <<""/utf8>> -> begin (V38 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, <<"\x{9}Resolved"/utf8>>))))))))(V9))), {'Idris.Prelude.Types.Right', V38} end; _ -> begin (V66 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, <<"\x{9}Resolved"/utf8>>))))))))))))(V9))), {'Idris.Prelude.Types.Right', V66} end end end()); {'Idris.Core.UnifyState.MkConstraint', E1, E2, E3, E4, E5, E6} -> (fun (V67, V68, V69, V70, V71, V72) -> begin (V153 = begin (V73 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V67, V7, V70, V71, V9))), case V73 of {'Idris.Prelude.Types.Left', E7} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V75) -> begin (V82 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V76, V77, V78)) end end end, fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V79, V80, V81)) end end end}, V75, V9))), case V82 of {'Idris.Prelude.Types.Left', E9} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V67, V7, V70, V72, V9))), case V85 of {'Idris.Prelude.Types.Left', E11} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V87) -> begin (V94 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V88, V89, V90)) end end end, fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V91, V92, V93)) end end end}, V87, V9))), case V94 of {'Idris.Prelude.Types.Left', E13} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V96) -> case V0 of <<""/utf8>> -> begin (V124 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V99, V100, V101)) end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> V103 end end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> begin (V110 = (V107(V109))), begin (V111 = (V108(V109))), (V110(V111)) end end end end end end end}, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> begin (V117 = (V114(V116))), ((V115(V117))(V116)) end end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> begin (V121 = (V119(V120))), (V121(V120)) end end end end}, fun (V122) -> fun (V123) -> V123 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{9}  "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V67, V84)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" =?= "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V67, V96))))))))))))))))(V9))), {'Idris.Prelude.Types.Right', V124} end; _ -> begin (V152 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V127, V128, V129)) end end end end end, fun (V130) -> fun (V131) -> fun (V132) -> V131 end end end, fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> begin (V138 = (V135(V137))), begin (V139 = (V136(V137))), (V138(V139)) end end end end end end end}, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> begin (V145 = (V142(V144))), ((V143(V145))(V144)) end end end end end end, fun (V146) -> fun (V147) -> fun (V148) -> begin (V149 = (V147(V148))), (V149(V148)) end end end end}, fun (V150) -> fun (V151) -> V151 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{9}  "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V67, V84)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" =?= "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V67, V96))))))))))))))))))))(V9))), {'Idris.Prelude.Types.Right', V152} end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V153 of {'Idris.Prelude.Types.Left', E15} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V155) -> begin (V156 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V7, V9))), case V156 of {'Idris.Prelude.Types.Left', E17} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V158) -> begin (V159 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V67, V158, V70, V71, V9))), case V159 of {'Idris.Prelude.Types.Left', E19} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V161) -> begin (V168 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V162, V163, V164)) end end end, fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V165, V166, V167)) end end end}, V161, V9))), case V168 of {'Idris.Prelude.Types.Left', E21} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V170) -> begin (V171 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V3, V67, V158, V70, V72, V9))), case V171 of {'Idris.Prelude.Types.Left', E23} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V173) -> begin (V180 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V174, V175, V176)) end end end, fun (V177) -> fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V177, V178, V179)) end end end}, V173, V9))), case V180 of {'Idris.Prelude.Types.Left', E25} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V182) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V3, V0, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{9}    from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V67, V170)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" =?= "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V67, V182)), case V69 of 1 -> <<"\x{a}\x{9}(lazy allowed)"/utf8>>; 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V9)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2, E3, E4, E5, E6)); {'Idris.Core.UnifyState.MkSeqConstraint', E27, E28, E29, E30, E31} -> (fun (V183, V184, V185, V186, V187) -> case V0 of <<""/utf8>> -> begin (V221 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V190, V191, V192)) end end end end end, fun (V193) -> fun (V194) -> fun (V195) -> V194 end end end, fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> begin (V201 = (V198(V200))), begin (V202 = (V199(V200))), (V201(V202)) end end end end end end end}, fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V205(V207))), ((V206(V208))(V207)) end end end end end end, fun (V209) -> fun (V210) -> fun (V211) -> begin (V212 = (V210(V211))), (V212(V211)) end end end end}, fun (V213) -> fun (V214) -> V214 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{9}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V215) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V183, V215)) end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V183, V216, V217)) end end}, V186)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" =?= "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V218) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V183, V218)) end, fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V183, V219, V220)) end end}, V187))))))))))))))))(V9))), {'Idris.Prelude.Types.Right', V221} end; _ -> begin (V255 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V224, V225, V226)) end end end end end, fun (V227) -> fun (V228) -> fun (V229) -> V228 end end end, fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> begin (V235 = (V232(V234))), begin (V236 = (V233(V234))), (V235(V236)) end end end end end end end}, fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> begin (V242 = (V239(V241))), ((V240(V242))(V241)) end end end end end end, fun (V243) -> fun (V244) -> fun (V245) -> begin (V246 = (V244(V245))), (V246(V245)) end end end end}, fun (V247) -> fun (V248) -> V248 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{9}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V249) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V183, V249)) end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V183, V250, V251)) end end}, V186)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" =?= "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V252) -> ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V183, V252)) end, fun (V253) -> fun (V254) -> ('Idris.Idris2.Core.Value':'dn--un--showPrec_Show_(NF $free)'(V183, V253, V254)) end end}, V187))))))))))))))))))))(V9))), {'Idris.Prelude.Types.Right', V255} end end end(E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkValidHole-6334'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Core.Context.Context.BySearch', E22, E23, E24} -> (fun (V12, V13, V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E25} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V18) -> begin (V49 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V2, case V18 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V19 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V49 of {'Idris.Prelude.Types.Left', E57} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V51) -> case V51 of {'Idris.Prelude.Types.Just', E59} -> (fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V1, case V18 of {'Idris.Core.Context.MkDefs', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V53 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V52, {'Idris.Prelude.Types.Nothing'}}, V11)) end(E59)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23, E24)); {'Idris.Core.Context.Context.Guess', E90, E91, E92} -> (fun (V83, V84, V85) -> case V85 of [E115 | E116] -> (fun (V86, V87) -> begin (V89 = begin (V88 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V88} end), case V89 of {'Idris.Prelude.Types.Left', E117} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V91) -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V86, case V91 of {'Idris.Core.UnifyState.MkUState', E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246} -> (fun (V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V96 end(E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E119} -> (fun (V104) -> case V104 of {'Idris.Core.UnifyState.MkConstraint', E120, E121, E122, E123, E124, E125} -> (fun (V105, V106, V107, V108, V109, V110) -> begin (V124 = begin (V123 = ('erlang':'put'(V4, case V91 of {'Idris.Core.UnifyState.MkUState', E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> {'Idris.Core.UnifyState.MkUState', V111, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V113, V114, V115, V116, V117, V118, V119, V120, V121, V122} end(E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V123} end), case V124 of {'Idris.Prelude.Types.Left', E138} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V126) -> begin (V127 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V6, V11))), case V127 of {'Idris.Prelude.Types.Left', E140} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V129) -> begin (V130 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V105, V129, V108, V109, V11))), case V130 of {'Idris.Prelude.Types.Left', E142} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V132) -> begin (V133 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V105, V129, V108, V110, V11))), case V133 of {'Idris.Prelude.Types.Left', E144} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V135) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveEq', V105, V106, case V6 of {'Idris.Core.Context.MkDefs', E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175} -> (fun (V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165) -> V136 end(E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V108, V132, V135}, V11)) end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120, E121, E122, E123, E124, E125)); {'Idris.Core.UnifyState.MkSeqConstraint', E176, E177, E178, E179, E180} -> (fun (V166, V167, V168, V169, V170) -> case V169 of [E181 | E182] -> (fun (V171, V172) -> case V170 of [E183 | E184] -> (fun (V173, V174) -> begin (V188 = begin (V187 = ('erlang':'put'(V4, case V91 of {'Idris.Core.UnifyState.MkUState', E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196} -> (fun (V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186) -> {'Idris.Core.UnifyState.MkUState', V175, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V177, V178, V179, V180, V181, V182, V183, V184, V185, V186} end(E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V187} end), case V188 of {'Idris.Prelude.Types.Left', E197} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V190) -> begin (V191 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V6, V11))), case V191 of {'Idris.Prelude.Types.Left', E199} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V193) -> begin (V194 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V166, V193, V168, V171, V11))), case V194 of {'Idris.Prelude.Types.Left', E201} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V196) -> begin (V197 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V166, V193, V168, V173, V11))), case V197 of {'Idris.Prelude.Types.Left', E203} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V199) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveEq', V166, V167, case V6 of {'Idris.Core.Context.MkDefs', E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234} -> (fun (V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229) -> V200 end(E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V168, V196, V199}, V11)) end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E183, E184)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E181, E182)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E176, E177, E178, E179, E180)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E119)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115, E116)); _ -> begin (V252 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V230, V231)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Idris.Core.Name.Resolved', -1}, case V8 of {'Idris.Core.Context.Context.MkGlobalDef', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251) -> V234 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), [], V11))), case V252 of {'Idris.Prelude.Types.Left', E113} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V254) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V255) -> fun (V256) -> ('nested--10504-6265--in--un--checkRef'(V0, V1, V2, V3, V4, V5, V255, V256)) end end, V254, V11)) end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E90, E91, E92)); _ -> begin (V279 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V257, V258)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Idris.Core.Name.Resolved', -1}, case V8 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278) -> V261 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), [], V11))), case V279 of {'Idris.Prelude.Types.Left', E20} -> (fun (V280) -> {'Idris.Prelude.Types.Left', V280} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V281) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V282) -> fun (V283) -> ('nested--10504-6265--in--un--checkRef'(V0, V1, V2, V3, V4, V5, V282, V283)) end end, V281, V11)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'case--max-3170'(V0, V1, V2) -> case V2 of 1 -> V1; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-3156'(V0, V1, V2) -> case V2 of 1 -> V1; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7162-3205--in--un--tag'(V0, V1, V2) -> case V2 of 0 -> 1; 1 -> 2; 4 -> 3; 2 -> 4; 3 -> 5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11300-6935--in--un--nameEq'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V12, V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V13)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10060-5853--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 0, V5, V3, []))))), V8 end.
'nested--9969-5764--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 0, V7, V3, []))))), V10 end.
'nested--9852-5644--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V1, 1, V6, V4, []))))), V9 end.
'nested--9565-5388--in--un--envArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V3, V0, V8, V6, []))))), V11 end.
'nested--11517-7147--in--un--dumpConstraint'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> ('case--dumpHole,dumpConstraint-7170'(V0, V1, V2, V3, V4, V5, V10, V14, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V5, case V10 of {'Idris.Core.UnifyState.MkUState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V19 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10504-6265--in--un--checkRef'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Name.PV', E0, E1} -> (fun (V8, V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Hole cannot depend on an unbound implicit "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8))))}, V7)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'dn--un--min_Ord_DelayReason'(V0, V1) -> case ('dn--un--<_Ord_DelayReason'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_DelayReason'(V0, V1) -> case ('dn--un-->_Ord_DelayReason'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7162-3205--in--un--tag'(V1, V0, V0)), ('nested--7162-3205--in--un--tag'(V1, V0, V1)))).
'dn--un--__Impl_Ord_DelayReason'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DelayReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DelayReason'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_DelayReason'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_DelayReason'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_DelayReason'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_DelayReason'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_DelayReason'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_DelayReason'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_DelayReason'(V16, V17)) end end}.
'dn--un--__Impl_Eq_DelayReason'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DelayReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DelayReason'(V2, V3)) end end}.
'dn--un-->_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 2)).
'dn--un-->=_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 0)).
'dn--un--==_Eq_DelayReason'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; 4 -> case V1 of 4 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--<_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 0)).
'dn--un--<=_Ord_DelayReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_DelayReason'(V0, V1)), 2)).
'dn--un--/=_Eq_DelayReason'(V0, V1) -> case ('dn--un--==_Eq_DelayReason'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryUnify'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--tryErrorUnify'(V0, V1, V2, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', V8} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> (V3(V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tryErrorUnify'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V11) -> begin (V12 = (V2(V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--commit'(V0, V11))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V18) -> fun (V19) -> begin (V21 = begin (V20 = ('erlang':'put'(V1, V7))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V89 = begin (V88 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.Context.MkDefs', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, case V27 of {'Idris.Core.Context.MkDefs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V85 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V56, V57} end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V88} end), case V89 of {'Idris.Prelude.Types.Left', E72} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V91) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V18}} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setConstraint'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V20 = ('erlang':'put'(V0, case V7 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.UnifyState.MkUState', V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V1, V2, V12)), V13, V14, V15, V16, V17, V18, V19} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V20} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--saveHoles'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V19 = begin (V18 = ('erlang':'put'(V0, case V5 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.UnifyState.MkUState', V6, V7, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V9, V10, V11, V12, V13, V14, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E14} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V21) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V24 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--restoreHoles'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V19 = ('erlang':'put'(V0, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Core.UnifyState.MkUState', V7, V8, V1, V10, V11, V12, V13, V14, V15, V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resetNextVar'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V18 = ('erlang':'put'(V0, case V5 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.UnifyState.MkUState', V6, V7, V8, V9, V10, V11, V12, V13, 0, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V18} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--removeNoSolve'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V19 = ('erlang':'put'(V0, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Core.UnifyState.MkUState', V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V12)), V13, V14, V15, V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--removeHoleName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case ('Idris.Idris2.Core.Context':'un--getNameID'(V2, case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V38) -> ('un--removeHole'(V1, V38, V3)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--removeHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V19 = ('erlang':'put'(V0, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Core.UnifyState.MkUState', ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V7)), V8, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V9)), ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V10)), V11, V12, V13, V14, V15, V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--removeGuess'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V19 = ('erlang':'put'(V0, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Core.UnifyState.MkUState', V7, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V8)), V9, V10, V11, V12, V13, V14, V15, V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--newSearch'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V3, V7, V9))), begin (V11 = ('Idris.Idris2.Core.Context':'un--newDef'(V3, V8, V4, [], V10, 2, {'Idris.Core.Context.Context.BySearch', V4, V5, V6}))), fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding new search "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)))))))) end, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"unify.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"New search type"/utf8>> end, {'Idris.Core.Env.Nil'}, V10, V12))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V8, V11, V12))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V22 = ('un--addGuessName'(V2, V3, V8, V21, V12))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V21, {'Idris.Core.TT.Meta', V3, V8, V21, ('nested--9969-5764--in--un--envArgs'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1))}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--newMetaLets'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = case V10 of 1 -> ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V3, V5, V7)); 0 -> ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V3, V5, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V32 = case ('Idris.Idris2.Core.Context':'un--newDef'(V3, V6, V4, [], V11, 2, V8)) of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V9, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V33) -> begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.meta"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding new meta "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V35, V36)) end end}, {'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V38) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V38)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V39, V40)) end end}, {'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V42, V43)) end end}}, V37)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V47, V48)) end end}, {'Idris.Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V50, V51)) end end}}, V44, V45)) end end}}, {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V3, V4}})))) end, V33))), case V52 of {'Idris.Prelude.Types.Left', E20} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"unify.meta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"New meta type "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)))) end, V11, V33))), case V55 of {'Idris.Prelude.Types.Left', E22} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E24} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V6, V32, V33))), case V62 of {'Idris.Prelude.Types.Left', E26} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V64) -> begin (V65 = ('un--addHoleName'(V2, V3, V6, V64, V33))), case V65 of {'Idris.Prelude.Types.Left', E28} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V64, {'Idris.Core.TT.Meta', V3, V6, V64, ('nested--9565-5388--in--un--envArgs'(V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1))}}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('un--newMetaLets'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 0)).
'un--newDelayed'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V3, V5, V7))), begin (V9 = ('Idris.Idris2.Core.Context':'un--newDef'(V3, V6, V4, [], V8, 2, {'Idris.Core.Context.Context.Delayed'}))), fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--addDef'(V2, V6, V9, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V20 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"unify.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Added delayed elaborator "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)) end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V15, V16)) end end}, {'Idris.Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V18, V19)) end end}}, {'Idris.Builtin.MkPair', V6, V13})))) end, V10))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = ('un--addHoleName'(V1, V3, V6, V13, V10))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, {'Idris.Core.TT.Meta', V3, V6, V13, ('nested--10060-5853--in--un--envArgs'(V0, V7, V6, V5, V4, V3, V2, V1))}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--newConstant'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--mkConstant'(V0, V3, V5, V6))), begin (V10 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V3, V5, V7))), fun (V11) -> begin (V12 = ('un--genName'(V2, V1, <<"postpone"/utf8>>, V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--newDef'(V3, V14, V4, [], V10, 2, {'Idris.Core.Context.Context.Guess', V9, ('Idris.Idris2.Core.Env':'un--length'(V5)), V8}))), begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"unify.constant"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding new constant "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V17, V18)) end end}, {'Idris.Prelude.Show.MkShow', fun (V19) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V21, V22)) end end}, {'Idris.Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V24, V25)) end end}}, V19)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V28) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V28)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V29, V30)) end end}, {'Idris.Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V32, V33)) end end}}, V26, V27)) end end}}, {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V3, V4}})))) end, V11))), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V2, <<"unify.constant"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"New constant type "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end, V10, V11))), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--addDef'(V2, V14, V15, V11))), case V40 of {'Idris.Prelude.Types.Left', E6} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V42) -> begin (V43 = ('un--addGuessName'(V1, V3, V14, V42, V11))), case V43 of {'Idris.Prelude.Types.Left', E8} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V3, V14, V42, ('nested--9852-5644--in--un--envArgs'(V8, V0, V7, V6, V5, V4, V3, V2, V1))}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--mkConstantAppArgsSub'(V0, V1, V2, V3, V4, V5) -> case V0 of [] -> case V3 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V6, V7) -> case V3 of {'Idris.Core.Env.::', E2, E3} -> (fun (V8, V9) -> case V4 of {'Idris.Core.TT.SubRefl'} -> (fun () -> ('un--mkConstantAppArgs'(V7, V1, V2, V9, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))) end()); {'Idris.Core.TT.DropCons', E4} -> (fun (V10) -> ('un--mkConstantAppArgsSub'(V7, V1, V2, V9, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))) end(E4)); {'Idris.Core.TT.KeepCons', E5} -> (fun (V11) -> begin (V12 = ('un--mkConstantAppArgsSub'(V7, V1, V2, V9, V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []]))))), case case V1 of 1 -> 1; 0 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V8)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> [{'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V8))}, ('Idris.Idris2.Prelude.Types.List':'un--length'(V5))} | V12]; 0 -> V12; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkConstantAppArgsOthers'(V0, V1, V2, V3, V4, V5) -> case V0 of [] -> case V3 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V6, V7) -> case V3 of {'Idris.Core.Env.::', E2, E3} -> (fun (V8, V9) -> case V4 of {'Idris.Core.TT.SubRefl'} -> (fun () -> ('un--mkConstantAppArgsOthers'(V7, V1, V2, V9, {'Idris.Core.TT.SubRefl'}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))) end()); {'Idris.Core.TT.KeepCons', E4} -> (fun (V10) -> ('un--mkConstantAppArgsOthers'(V7, V1, V2, V9, V10, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []])))) end(E4)); {'Idris.Core.TT.DropCons', E5} -> (fun (V11) -> begin (V12 = ('un--mkConstantAppArgsOthers'(V7, V1, V2, V9, V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, [V6 | []]))))), case case V1 of 1 -> 1; 0 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V8)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> [{'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V8))}, ('Idris.Idris2.Prelude.Types.List':'un--length'(V5))} | V12]; 0 -> V12; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkConstantAppArgs'(V0, V1, V2, V3, V4) -> case V0 of [] -> case V3 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V5, V6) -> case V3 of {'Idris.Core.Env.::', E2, E3} -> (fun (V7, V8) -> begin (V9 = ('un--mkConstantAppArgs'(V6, V1, V2, V8, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, [V5 | []]))))), case case V1 of 1 -> 1; 0 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V7)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> [{'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'(V7))}, ('Idris.Idris2.Prelude.Types.List':'un--length'(V4))} | V9]; 0 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkConstant'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> V3 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V6, V7) -> begin (V8 = ('Idris.Idris2.Core.TT':'un--binderType'(V6))), ('un--mkConstant'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, {'Idris.Core.TT.Lam', V1, ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Idris.Core.TT.Explicit'}, V8}, V3})) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V7) -> 1 end end, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V1, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isCurrentHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V7) -> 1 end end, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V1, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initUState'() -> {'Idris.Core.UnifyState.MkUState', ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), [], [], 0, 0, [], 0}.
'un--handleUnify'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--tryErrorUnify'(V0, V1, V2, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', V8} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> ((V3(V9))(V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getHoles'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getGuesses'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getCurrentHoles'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genWithName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V21 = begin (V20 = ('erlang':'put'(V1, case V7 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.UnifyState.MkUState', V8, V9, V10, V11, V12, V13, V14, V15, ((V16 + 1) rem 9223372036854775808), V17, V18, V19} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Idris.Core.Name.WithBlock', V2, case V7 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V32 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V3)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genVarName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V21 = begin (V20 = ('erlang':'put'(V1, case V7 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.UnifyState.MkUState', V8, V9, V10, V11, V12, V13, V14, V15, ((V16 + 1) rem 9223372036854775808), V17, V18, V19} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', V2, case V7 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V32 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V21 = begin (V20 = ('erlang':'put'(V1, case V7 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.UnifyState.MkUState', V8, V9, V10, V11, V12, V13, V14, V15, ((V16 + 1) rem 9223372036854775808), V17, V18, V19} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Idris.Core.Name.MN', V2, case V7 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V32 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V3))), case V36 of {'Idris.Prelude.Types.Left', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V38) -> {'Idris.Prelude.Types.Right', V38} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genMVName'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Name.UN', E30} -> (fun (V4) -> ('un--genName'(V0, V1, ('Idris.Idris2.Core.Name':'un--displayUserName'(V4)), V3)) end(E30)); {'Idris.Core.Name.MN', E31, E32} -> (fun (V5, V6) -> ('un--genName'(V0, V1, V5, V3)) end(E31, E32)); _ -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V24 = begin (V23 = ('erlang':'put'(V1, case V10 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Core.UnifyState.MkUState', V11, V12, V13, V14, V15, V16, V17, V18, ((V19 + 1) rem 9223372036854775808), V20, V21, V22} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> begin (V39 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), case V10 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V35 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V3))), case V39 of {'Idris.Prelude.Types.Left', E28} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V41) -> {'Idris.Prelude.Types.Right', V41} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--genCaseName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V21 = begin (V20 = ('erlang':'put'(V1, case V7 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.UnifyState.MkUState', V8, V9, V10, V11, V12, V13, V14, V15, ((V16 + 1) rem 9223372036854775808), V17, V18, V19} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, {'Idris.Core.Name.CaseBlock', V2, case V7 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V32 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V3)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpHole'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getSession'(V1, V5))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V51 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V4}, case V20 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V21 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V51 of {'Idris.Prelude.Types.Left', E38} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V53) -> case V53 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E40} -> (fun (V54) -> begin (V55 = {'Idris.Prelude.Types.Just', V54}), ('case--case block in dumpHole-7581'(V2, V4, V3, V1, V0, V9, V13, V16, V20, V54, V55, {'Idris.Builtin.MkPair', case V54 of {'Idris.Core.Context.Context.MkGlobalDef', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V73 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V54 of {'Idris.Core.Context.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V78 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V5)) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpConstraints'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getSession'(V1, V5))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V5))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> case V19 of 1 -> ((begin (V56 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V9 of {'Idris.Core.UnifyState.MkUState', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V21 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V4 of 1 -> case V9 of {'Idris.Core.UnifyState.MkUState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V32 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V9 of {'Idris.Core.UnifyState.MkUState', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V46 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), fun () -> fun (V57) -> case ('Idris.Idris2.Data.List':'un--isNil'(V56)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V114 = case V2 of <<""/utf8>> -> begin (V85 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, <<"--- CONSTRAINTS AND HOLES ---"/utf8>>))))))))(V57))), {'Idris.Prelude.Types.Right', V85} end; _ -> begin (V113 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V88, V89, V90)) end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> V92 end end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> begin (V99 = (V96(V98))), begin (V100 = (V97(V98))), (V99(V100)) end end end end end end end}, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> begin (V106 = (V103(V105))), ((V104(V106))(V105)) end end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> begin (V110 = (V108(V109))), (V110(V109)) end end end end}, fun (V111) -> fun (V112) -> V112 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, <<"--- CONSTRAINTS AND HOLES ---"/utf8>>))))))))))))(V57))), {'Idris.Prelude.Types.Right', V113} end end), case V114 of {'Idris.Prelude.Types.Left', E44} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V116) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V117) -> fun (V118) -> ('un--dumpHole'(V0, V1, V2, V3, V117, V118)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V119) -> ('Idris.Idris2.Builtin':'un--fst'(V119)) end, V56)), V57)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end())(V5)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--deleteConstraint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V19 = ('erlang':'put'(V0, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Core.UnifyState.MkUState', V7, V8, V9, V10, ('Idris.Idris2.Libraries.Data.IntMap':'un--delete'(V1, V11)), V12, V13, V14, V15, V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkValidHole'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V4, V2)) of 1 -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V47 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V4}, case V12 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V17 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V47 of {'Idris.Prelude.Types.Left', E38} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V49) -> case V49 of {'Idris.Prelude.Types.Just', E40} -> (fun (V50) -> begin (V51 = {'Idris.Prelude.Types.Just', V50}), ('case--case block in checkValidHole-6334'(V4, V7, V8, V2, V1, V0, V12, V16, V50, V51, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V69 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6)) end end(E40)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkUserHolesAfter'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--getGuesses'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(V7))), begin (V48 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.unsolved"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unsolved guesses "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V11, V12)) end end}, {'Idris.Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V14) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V14)) end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V15, V16)) end end}, {'Idris.Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V18, V19)) end end}}, V13)) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V23, V24)) end end}, {'Idris.Prelude.Show.MkShow', fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V26, V27)) end end}}, V20, V21)) end end}}, V9)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V31, V32)) end end}, {'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V35, V36)) end end}, {'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V38, V39)) end end}}, V33)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V43, V44)) end end}, {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}}, V40, V41)) end end}}, V28, V29)) end end}, V8)))) end, V4))), case V48 of {'Idris.Prelude.Types.Left', E2} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V50) -> begin (V52 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V51) -> ('un--checkValidHole'(V1, V0, V2, V51)) end, V8, V4))), case V52 of {'Idris.Prelude.Types.Left', E4} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V54) -> begin (V55 = ('un--getCurrentHoles'(V0, V4))), case V55 of {'Idris.Prelude.Types.Left', E6} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(V57))), begin (V87 = case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V74, V75, V76, V77)) end end end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V79)) end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V82, V83, V84)) end end end end end}, fun (V85) -> ('Idris.Idris2.Core.Name':'un--isUserName'(V85)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V86) -> ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V86)))) end, V58)))) of 1 -> []; 0 -> V58; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V91 = case case V3 of 1 -> case ('Idris.Idris2.Data.List':'un--isNil'(V87)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.UnsolvedHoles', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V88) -> ('Idris.Idris2.Builtin':'un--snd'(V88)) end, ('Idris.Idris2.Data.List':'un--nubBy'(fun (V89) -> fun (V90) -> ('nested--11300-6935--in--un--nameEq'(V3, V2, V1, V0, V89, V90)) end end, V58))))}, V4)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V91 of {'Idris.Prelude.Types.Left', E8} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V93) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V94) -> fun (V95) -> ('un--addDelayedHoleName'(V0, V94, V95)) end end, V87, V4)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkUserHoles'(V0, V1, V2, V3) -> ('un--checkUserHolesAfter'(V0, V1, 0, V2, V3)).
'un--checkNoGuards'(V0, V1, V2) -> ('un--checkUserHoles'(V0, V1, 0, V2)).
'un--checkDelayedHoles'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V19 = ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), case ('Idris.Idris2.Data.List':'un--isNil'(V19)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Core.UnsolvedHoles', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'(V20)) end, V19))}}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--applyToSub'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgsSub'(V0, 1, V1, V3, V4, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V5)) end.
'un--applyToOthers'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgsOthers'(V0, 1, V1, V3, V4, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V5)) end.
'un--applyToFull'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 1, V1, V3, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V4)) end.
'un--applyTo'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--mkConstantAppArgs'(V0, 0, V1, V3, []))))), ('Idris.Idris2.Core.TT':'un--apply'(V1, V2, V4)) end.
'un--addPolyConstraint'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V8, V9, V10) -> case V9 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V31 = ('erlang':'put'(V1, begin (V18 = {'Idris.Core.Value.NApp', V8, {'Idris.Core.Value.NMeta', V11, V12, V13}, V10}), case V17 of {'Idris.Core.UnifyState.MkUState', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.UnifyState.MkUState', V19, V20, V21, V22, V23, V24, [{'Idris.Core.UnifyState.MkPolyConstraint', V0, V2, V3, V4, V18, V6} | V25], V26, V27, V28, V29, V30} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))), {'Idris.Prelude.Types.Right', V31} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--addNoSolve'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V19 = ('erlang':'put'(V0, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Core.UnifyState.MkUState', V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V1, 0, V12)), V13, V14, V15, V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHoleName'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V21 = ('erlang':'put'(V0, case V8 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Core.UnifyState.MkUState', ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V3, {'Idris.Builtin.MkPair', V1, V2}, V9)), V10, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V3, {'Idris.Builtin.MkPair', V1, V2}, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addGuessName'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V21 = ('erlang':'put'(V0, case V8 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Core.UnifyState.MkUState', V9, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V3, {'Idris.Builtin.MkPair', V1, V2}, V10)), V11, V12, V13, V14, V15, V16, V17, V18, V19, V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDot'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V17, V4, V6))(V9))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V17, V4, V8))(V9))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V36 = ('erlang':'put'(V2, case V13 of {'Idris.Core.UnifyState.MkUState', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.UnifyState.MkUState', V24, V25, V26, V27, V28, V29, V30, [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V7, {'Idris.Core.UnifyState.MkConstraint', V0, V3, 0, V4, V20, V23}}} | V31], V32, V33, V34, V35} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDelayedHoleName'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V21 = ('erlang':'put'(V0, case V8 of {'Idris.Core.UnifyState.MkUState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Core.UnifyState.MkUState', V9, V10, V11, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V3, V4, V12)), V13, V14, V15, V16, V17, V18, V19, V20} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addConstraint'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V20 = case V7 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V17 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V34 = begin (V33 = ('erlang':'put'(V0, case V7 of {'Idris.Core.UnifyState.MkUState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.UnifyState.MkUState', V21, V22, V23, V24, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V20, V2, V25)), V26, V27, V28, V29, ((V20 + 1) rem 9223372036854775808), V31, V32} end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E26} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Right', V20} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
