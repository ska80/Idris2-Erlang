-module('Idris.Idris2.TTImp.Elab.Rewrite').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--rewriteErr'/1,
  'un--getRewriteTerms'/7,
  'un--findRewriteLemma'/4,
  'un--elabRewrite'/8,
  'un--checkRewrite'/14
]).
'un--rewriteErr'(V0) -> case V0 of {'Idris.Core.Core.NotRewriteRule', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> 1 end(E0, E1, E2, E3)); {'Idris.Core.Core.RewriteNoChange', E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9) -> 1 end(E4, E5, E6, E7, E8)); {'Idris.Core.Core.InType', E9, E10, E11} -> (fun (V10, V11, V12) -> ('un--rewriteErr'(V12)) end(E9, E10, E11)); {'Idris.Core.Core.InCon', E12, E13, E14} -> (fun (V13, V14, V15) -> ('un--rewriteErr'(V15)) end(E12, E13, E14)); {'Idris.Core.Core.InLHS', E15, E16, E17} -> (fun (V16, V17, V18) -> ('un--rewriteErr'(V18)) end(E15, E16, E17)); {'Idris.Core.Core.InRHS', E18, E19, E20} -> (fun (V19, V20, V21) -> ('un--rewriteErr'(V21)) end(E18, E19, E20)); {'Idris.Core.Core.WhenUnifying', E21, E22, E23, E24, E25, E26, E27} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> ('un--rewriteErr'(V28)) end(E21, E22, E23, E24, E25, E26, E27)); _ -> 0 end.
'un--getRewriteTerms'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--isEqualTy'(V1, V8, V6))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> case V14 of 1 -> case ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('Idris.Idris2.Builtin':'un--snd'(V15)) end, V11)))) of [E7 | E8] -> (fun (V16, V17) -> case V17 of [E9 | E10] -> (fun (V18, V19) -> case V19 of [E11 | E12] -> (fun (V20, V21) -> case V21 of [E13 | E14] -> (fun (V22, V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V3, V18))(V6))), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V3, V16))(V6))), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> begin (V30 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V3, V22))(V6))), case V30 of {'Idris.Prelude.Types.Left', E19} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V26, {'Idris.Builtin.MkPair', V29, V32}}} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13, E14)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V6)) end end(E11, E12)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V6)) end end(E9, E10)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V6)) end end(E7, E8)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V6)) end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V5, V6)) end.
'un--findRewriteLemma'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getRewrite'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"No rewrite lemma defined"/utf8>>}, V3)) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--elabRewrite'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V2, <<"rwarg"/utf8>>, V7))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V11, V4, V6))(V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V18 = ('un--getRewriteTerms'(V0, V1, V3, V11, V17, {'Idris.Core.Core.NotRewriteRule', V0, V3, V4, V6}, V7))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V23, V24) -> begin (V25 = ('un--findRewriteLemma'(V1, V3, V6, V7))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V11, V4, V5))(V7))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.rewrite"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Rewriting"/utf8>> end, V4, V21, V7))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.rewrite"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Rewriting in"/utf8>> end, V4, V30, V7))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise':'un--replace'(V1, V0, V11, V4, V21, {'Idris.Core.TT.Ref', V3, {'Idris.Core.TT.Bound'}, V14}, V30, V7))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.rewrite"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Rewritten to"/utf8>> end, V39, V7))), case V40 of {'Idris.Prelude.Types.Left', E22} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V11, V7))), case V43 of {'Idris.Prelude.Types.Left', E24} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V45, V4, V24, V7))), case V46 of {'Idris.Prelude.Types.Left', E26} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V48) -> begin (V49 = {'Idris.Core.TT.Bind', V3, V14, {'Idris.Core.TT.Lam', V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V48}, ('Idris.Idris2.Core.TT':'un--refsToLocals'({'Idris.Core.TT.Bounds.Add', V14, V14, {'Idris.Core.TT.Bounds.None'}}, V39))}), begin (V50 = (('Idris.Idris2.Core.GetType':'un--getType'(V0, V1, V4, V49))(V7))), case V50 of {'Idris.Prelude.Types.Left', E28} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V52) -> begin (V53 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V52))(V7))), case V53 of {'Idris.Prelude.Types.Left', E30} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Term'(V1, V0, V11, V4, V5, V7))), case V56 of {'Idris.Prelude.Types.Left', E32} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V58) -> begin (V62 = begin (V59 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Term'(V1, V0, V11, V4, V39, V58, V7))), case V59 of {'Idris.Prelude.Types.Left', E34} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V61) -> case V61 of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.RewriteNoChange', V0, V3, V4, V6, V58}, V7)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E36} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V49, V55}}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkRewrite'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V9, <<"Can\x{27}t infer a type for rewrite"/utf8>>}, V13)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V9, V5, V8, {'Idris.Prelude.Types.Just', V14}, fun (V15) -> ('un--rewriteErr'(V15)) end, 3, fun (V16) -> begin (V17 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V9))), fun (V18) -> begin (V23 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V6, V7, V8, V10, {'Idris.Prelude.Types.Nothing'}, V18))), case V23 of {'Idris.Prelude.Types.Left', E1} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V26, V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V27))(V18))), case V28 of {'Idris.Prelude.Types.Left', E5} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V14))(V18))), case V31 of {'Idris.Prelude.Types.Left', E7} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V33) -> begin (V34 = case V16 of 1 -> ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.rewrite"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Retrying rewrite"/utf8>> end, V18)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V34 of {'Idris.Prelude.Types.Left', E9} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V36) -> begin (V37 = ('un--elabRewrite'(V0, V1, V3, V17, V8, V33, V30, V18))), case V37 of {'Idris.Prelude.Types.Left', E11} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V40, V41) -> case V41 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V42, V43) -> begin (V44 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"_"/utf8>>, V18))), case V44 of {'Idris.Prelude.Types.Left', E17} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"_"/utf8>>, V18))), case V47 of {'Idris.Prelude.Types.Left', E19} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V49) -> begin (V54 = {'Idris.Core.TT.Let', V17, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V50, V51)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V52) -> fun (V53) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V52, V53)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V42, V43}), begin (V59 = {'Idris.Core.TT.Let', V17, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V55) -> fun (V56) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V55, V56)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V57) -> fun (V58) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V57, V58)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V26)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V30))}), begin (V60 = {'Idris.Core.Env.::', V59, {'Idris.Core.Env.::', V54, V8}}), begin (V66 = ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V49, V0, V1, V4, V17, {'Idris.Core.Env.::', V54, V8}, fun (V61) -> fun (V62) -> ('Idris.Idris2.TTImp.Elab.Check':'un--inScope'(V46, [V49 | V0], V1, V61, V17, V60, fun (V63) -> begin (V64 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V46 | [V49 | []]]))), fun (V65) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'([V46 | [V49 | V0]], V1, V2, V3, V63, V5, V6, ('Idris.Idris2.TTImp.TTImp':'dn--un--weakenNs_Weaken_NestedNames'(V64, V7)), V60, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V17, V40}, [{'Idris.TTImp.TTImp.IVar', V17, V49} | [{'Idris.TTImp.TTImp.IVar', V17, V46} | [V11 | []]]])), {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([V46 | [V49 | V0]], V60, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V64, V33))))}, V65)) end end end, V62)) end end, V18))), case V66 of {'Idris.Prelude.Types.Left', E21} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V68) -> case V68 of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V69, V70) -> begin (V71 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V70))(V18))), case V71 of {'Idris.Prelude.Types.Left', E25} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V73) -> begin (V75 = fun (V74) -> {'Idris.Core.TT.Bind', V17, V49, V54, {'Idris.Core.TT.Bind', V17, V46, V59, V74}} end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', (V75(V69)), ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, (V75(V73))))}} end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V13)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
