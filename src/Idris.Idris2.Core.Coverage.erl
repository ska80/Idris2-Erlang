-module('Idris.Idris2.Core.Coverage').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--eraseApps-5879'/3,
  'case--case block in conflict-3522'/10,
  'nested--11085-6079--in--un--tryClauses'/6,
  'nested--9965-5028--in--un--rep'/8,
  'nested--10405-5440--in--un--notCovering'/6,
  'nested--9233-4544--in--un--noneOf'/8,
  'nested--10405-5439--in--un--noAssert'/4,
  'nested--10995-5992--in--un--mkSubstEnv'/9,
  'nested--10405-5438--in--un--isCase'/4,
  'nested--7126-2481--in--un--findN'/6,
  'nested--9051-4157--in--un--emptyRHSalt'/6,
  'nested--9965-5029--in--un--dropRep'/7,
  'nested--10812-5817--in--un--dropPos'/6,
  'nested--7126-2482--in--un--conflictTm'/6,
  'nested--7631-2934--in--un--conflictNF'/9,
  'nested--7631-2933--in--un--conflictArgs'/10,
  'nested--7126-2483--in--un--conflictArgs'/7,
  'nested--10995-5993--in--un--close'/9,
  'nested--7126-2480--in--un--clash'/6,
  'nested--10071-5119--in--un--buildArgsAlt'/15,
  'nested--10071-5118--in--un--buildArgAlt'/14,
  'nested--8762-3915--in--un--addTy'/10,
  'un--weakenNs'/2,
  'un--tagIsNot'/2,
  'un--tagIs'/2,
  'un--replaceDefaults'/7,
  'un--mkAlt'/4,
  'un--match'/2,
  'un--isEmpty'/6,
  'un--getNonCoveringRefs'/4,
  'un--getMissingAlts'/6,
  'un--getMissing'/6,
  'un--getCons'/5,
  'un--freeEnv'/2,
  'un--findTag'/3,
  'un--eraseApps'/2,
  'un--emptyRHS'/2,
  'un--conflictMatch'/2,
  'un--conflict'/7,
  'un--clauseMatches'/6,
  'un--checkMatched'/4,
  'un--buildArgs'/8,
  'un--altMatch'/2,
  'un--addNot'/4
]).
'case--eraseApps-5879'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> fun (V5) -> case V3 of {'Idris.Core.TT.Ref', E4, E5, E6} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.TT.Bound'} -> (fun () -> begin (V10 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> ('un--eraseApps'(V1, V9)) end, V4, [], V5))), case V10 of {'Idris.Prelude.Types.Left', E63} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(V6, {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Bound'}, V8}, V12))} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> begin (V47 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V8, case V16 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V17 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V47 of {'Idris.Prelude.Types.Left', E39} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V49) -> begin (V71 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V50) -> case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V54 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V49))), begin (V73 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V72) -> ('un--eraseApps'(V1, V72)) end, ('nested--10812-5817--in--un--dropPos'(V0, V1, V6, 0, V71, V4)), [], V5))), case V73 of {'Idris.Prelude.Types.Left', E61} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V75) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(V6, {'Idris.Core.TT.Ref', V6, V7, V8}, V75))} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6)); _ -> begin (V77 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V76) -> ('un--eraseApps'(V1, V76)) end, V4, [], V5))), case V77 of {'Idris.Prelude.Types.Left', E2} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(('Idris.Idris2.Core.TT':'un--getLoc'(V3)), V3, V79))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in conflict-3522'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> case V10 of {'Idris.Core.Context.Context.DCon', E2, E3, E4} -> (fun (V12, V13, V14) -> begin (V18 = begin (V15 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V5, [], V4, {'Idris.Core.Env.Nil'}, V11))(V9))), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> (('nested--7631-2934--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, 0, V2, V17))(V9)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> case V20 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('un--conflictMatch'(V0, V21))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'nested--11085-6079--in--un--tryClauses'(V0, V1, V2, V3, V4, V5) -> case V3 of [] -> begin (V6 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V2, <<"coverage"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing matches"/utf8>> end, {'Idris.Core.Env.Nil'}, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E2 | E3] -> (fun (V9, V10) -> case V9 of {'Idris.Core.Context.Context.MkClause', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> begin (V15 = ('un--clauseMatches'(V11, V2, V12, V13, V4, V5))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> case V17 of 1 -> begin (V18 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V11, V2, <<"coverage"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Yes"/utf8>> end, V12, V13, V5))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V21 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V11, V2, <<"coverage"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"No match"/utf8>> end, V12, V13, V5))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> ('nested--11085-6079--in--un--tryClauses'(V0, V1, V2, V10, V4, V5)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9965-5028--in--un--rep'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.CaseTree.DefaultCase', E0} -> (fun (V8) -> begin (V9 = ('un--getCons'(V5, V0, V3, V2, V7))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--mkAlt'(V0, V4, V8, ('Idris.Idris2.Builtin':'un--snd'(V12)))) end, V11))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', [V6 | []]} end.
'nested--10405-5440--in--un--notCovering'(V0, V1, V2, V3, V4, V5) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> case V39 of {'Idris.Core.Context.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> case V50 of {'Idris.Core.TT.MkTotality', E53, E54} -> (fun (V60, V61) -> case V61 of {'Idris.Core.TT.IsCovering'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> {'Idris.Prelude.Types.Right', 1} end end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9233-4544--in--un--noneOf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, fun (V34) -> ('un--altMatch'(V7, V34)) end, V6)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10405-5439--in--un--noAssert'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of 1 -> {'Idris.Prelude.Types.Nothing'}; 0 -> {'Idris.Prelude.Types.Just', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10995-5992--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of [] -> case V8 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.TT.SubstEnv.Nil'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V9, V10) -> case V8 of {'Idris.Core.Env.::', E2, E3} -> (fun (V11, V12) -> {'Idris.Core.TT.SubstEnv.::', {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', <<"cov"/utf8>>, V7}}, ('nested--10995-5992--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V10, V6, ((V7 + 1) rem 9223372036854775808), V12))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10405-5438--in--un--isCase'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> ('nested--10405-5438--in--un--isCase'(V0, V1, V2, V5)) end(E0, E1)); {'Idris.Core.Name.CaseBlock', E2, E3} -> (fun (V6, V7) -> 1 end(E2, E3)); _ -> 0 end.
'nested--7126-2481--in--un--findN'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Local', E7, E8, E9} -> (fun (V6, V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V4, V8)) end(E7, E8, E9)); _ -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V9 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V11, V12, V13) -> case V12 of {'Idris.Core.TT.DataCon', E5, E6} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, fun (V42) -> ('nested--7126-2481--in--un--findN'(V0, V1, V2, V3, V4, V42)) end, V10)) end(E5, E6)); _ -> 0 end end(E2, E3, E4)); _ -> 0 end end(E0, E1)); _ -> 0 end end.
'nested--9051-4157--in--un--emptyRHSalt'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.CaseTree.ConCase', V6, V7, V8, ('un--emptyRHS'(V4, V9))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V10, V11, V12) -> {'Idris.Core.CaseTree.DelayCase', V10, V11, ('un--emptyRHS'(V4, V12))} end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V13, V14) -> {'Idris.Core.CaseTree.ConstCase', V13, ('un--emptyRHS'(V4, V14))} end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V15) -> {'Idris.Core.CaseTree.DefaultCase', ('un--emptyRHS'(V4, V15))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9965-5029--in--un--dropRep'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> []; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Core.CaseTree.ConCase', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> [V7 | ('nested--9965-5029--in--un--dropRep'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Data.List':'un--filter'(fun (V13) -> case ('un--tagIs'(V10, V13)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V8))))] end(E2, E3, E4, E5)); _ -> [V7 | ('nested--9965-5029--in--un--dropRep'(V0, V1, V2, V3, V4, V5, V8))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10812-5817--in--un--dropPos'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V10, V11)) end end}, V3, V4)) of 1 -> [{'Idris.Core.TT.Erased', V2, 0} | ('nested--10812-5817--in--un--dropPos'(V0, V1, V2, (1 + V3), V4, V7))]; 0 -> [V6 | ('nested--10812-5817--in--un--dropPos'(V0, V1, V2, (1 + V3), V4, V7))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7126-2482--in--un--conflictTm'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Local', E14, E15, E16} -> (fun (V6, V7, V8) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)) of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V9, V10) -> case V9 of {'Idris.Core.TT.Ref', E19, E20, E21} -> (fun (V11, V12, V13) -> case V12 of {'Idris.Core.TT.DataCon', E22, E23} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, fun (V42) -> ('nested--7126-2481--in--un--findN'(V0, V1, V2, V3, V8, V42)) end, V10)) end(E22, E23)); _ -> 0 end end(E19, E20, E21)); _ -> 0 end end(E17, E18)); _ -> 0 end end(E14, E15, E16)); _ -> case V5 of {'Idris.Core.TT.Local', E4, E5, E6} -> (fun (V43, V44, V45) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)) of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V46, V47) -> case V46 of {'Idris.Core.TT.Ref', E9, E10, E11} -> (fun (V48, V49, V50) -> case V49 of {'Idris.Core.TT.DataCon', E12, E13} -> (fun (V51, V52) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V64)) end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V68, V69, V70, V71)) end end end end end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V73)) end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V76, V77, V78)) end end end end end}, fun (V79) -> ('nested--7126-2481--in--un--findN'(V0, V1, V2, V3, V45, V79)) end, V47)) end(E12, E13)); _ -> 0 end end(E9, E10, E11)); _ -> 0 end end(E7, E8)); _ -> 0 end end(E4, E5, E6)); _ -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V80, V81) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V82, V83) -> case ('nested--7126-2480--in--un--clash'(V0, V1, V2, V3, V80, V82)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V91, V92, V93)) end end end end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V95)) end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V99, V100, V101, V102)) end end end end end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V104)) end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V107, V108, V109)) end end end end end}, fun (V110) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V111) -> fun (V112) -> ('nested--7126-2482--in--un--conflictTm'(V0, V1, V2, V3, V111, V112)) end end, V110)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V81, V83)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--7631-2934--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NBind', E24, E25, E26, E27} -> (fun (V9, V10, V11, V12) -> begin (V13 = {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), V6}), fun (V14) -> begin (V15 = (((V12(V4))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V9, {'Idris.Core.TT.Bound'}, V13}))))(V14))), case V15 of {'Idris.Prelude.Types.Left', E28} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V17) -> (('nested--7631-2934--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, ((V6 + 1) rem 9223372036854775808), V7, V17))(V14)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E24, E25, E26, E27)); {'Idris.Core.Value.NApp', E30, E31, E32} -> (fun (V18, V19, V20) -> case V19 of {'Idris.Core.Value.NRef', E57, E58} -> (fun (V21, V22) -> case V21 of {'Idris.Core.TT.Bound'} -> (fun () -> case V20 of [] -> fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V23))), case V24 of {'Idris.Prelude.Types.Left', E107} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V5, V0, V26, V3, V7, V23))), case V27 of {'Idris.Prelude.Types.Left', E109} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', [{'Idris.Builtin.MkPair', V22, V29} | []]}} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V7 of {'Idris.Core.Value.NDCon', E83, E84, E85, E86, E87} -> (fun (V30, V31, V32, V33, V34) -> case V8 of {'Idris.Core.Value.NDCon', E88, E89, E90, E91, E92} -> (fun (V35, V36, V37, V38, V39) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V32, V37)) of 1 -> fun (V40) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V41) -> ('Idris.Idris2.Builtin':'un--snd'(V41)) end, V34)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V42) -> ('Idris.Idris2.Builtin':'un--snd'(V42)) end, V39)), V40)) end; 0 -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88, E89, E90, E91, E92)); _ -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E83, E84, E85, E86, E87)); {'Idris.Core.Value.NTCon', E93, E94, E95, E96, E97} -> (fun (V45, V46, V47, V48, V49) -> case V8 of {'Idris.Core.Value.NTCon', E98, E99, E100, E101, E102} -> (fun (V50, V51, V52, V53, V54) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V46, V51)) of 1 -> fun (V55) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V56) -> ('Idris.Idris2.Builtin':'un--snd'(V56)) end, V49)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> ('Idris.Idris2.Builtin':'un--snd'(V57)) end, V54)), V55)) end; 0 -> fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E98, E99, E100, E101, E102)); _ -> fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E93, E94, E95, E96, E97)); {'Idris.Core.Value.NPrimVal', E103, E104} -> (fun (V60, V61) -> fun (V62) -> case V8 of {'Idris.Core.Value.NPrimVal', E105, E106} -> (fun (V63, V64) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V61, V64)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E105, E106)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E103, E104)); _ -> fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end end()); _ -> case V7 of {'Idris.Core.Value.NDCon', E59, E60, E61, E62, E63} -> (fun (V66, V67, V68, V69, V70) -> case V8 of {'Idris.Core.Value.NDCon', E64, E65, E66, E67, E68} -> (fun (V71, V72, V73, V74, V75) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V68, V73)) of 1 -> fun (V76) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V77) -> ('Idris.Idris2.Builtin':'un--snd'(V77)) end, V70)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V78) -> ('Idris.Idris2.Builtin':'un--snd'(V78)) end, V75)), V76)) end; 0 -> fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E64, E65, E66, E67, E68)); _ -> fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E59, E60, E61, E62, E63)); {'Idris.Core.Value.NTCon', E69, E70, E71, E72, E73} -> (fun (V81, V82, V83, V84, V85) -> case V8 of {'Idris.Core.Value.NTCon', E74, E75, E76, E77, E78} -> (fun (V86, V87, V88, V89, V90) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V82, V87)) of 1 -> fun (V91) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V92) -> ('Idris.Idris2.Builtin':'un--snd'(V92)) end, V85)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V93) -> ('Idris.Idris2.Builtin':'un--snd'(V93)) end, V90)), V91)) end; 0 -> fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E74, E75, E76, E77, E78)); _ -> fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E69, E70, E71, E72, E73)); {'Idris.Core.Value.NPrimVal', E79, E80} -> (fun (V96, V97) -> fun (V98) -> case V8 of {'Idris.Core.Value.NPrimVal', E81, E82} -> (fun (V99, V100) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V97, V100)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E81, E82)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E79, E80)); _ -> fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end end(E57, E58)); _ -> case V7 of {'Idris.Core.Value.NDCon', E33, E34, E35, E36, E37} -> (fun (V102, V103, V104, V105, V106) -> case V8 of {'Idris.Core.Value.NDCon', E38, E39, E40, E41, E42} -> (fun (V107, V108, V109, V110, V111) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V104, V109)) of 1 -> fun (V112) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V113) -> ('Idris.Idris2.Builtin':'un--snd'(V113)) end, V106)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V114) -> ('Idris.Idris2.Builtin':'un--snd'(V114)) end, V111)), V112)) end; 0 -> fun (V115) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39, E40, E41, E42)); _ -> fun (V116) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E33, E34, E35, E36, E37)); {'Idris.Core.Value.NTCon', E43, E44, E45, E46, E47} -> (fun (V117, V118, V119, V120, V121) -> case V8 of {'Idris.Core.Value.NTCon', E48, E49, E50, E51, E52} -> (fun (V122, V123, V124, V125, V126) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V118, V123)) of 1 -> fun (V127) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V128) -> ('Idris.Idris2.Builtin':'un--snd'(V128)) end, V121)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V129) -> ('Idris.Idris2.Builtin':'un--snd'(V129)) end, V126)), V127)) end; 0 -> fun (V130) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49, E50, E51, E52)); _ -> fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E43, E44, E45, E46, E47)); {'Idris.Core.Value.NPrimVal', E53, E54} -> (fun (V132, V133) -> fun (V134) -> case V8 of {'Idris.Core.Value.NPrimVal', E55, E56} -> (fun (V135, V136) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V133, V136)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E53, E54)); _ -> fun (V137) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end end(E30, E31, E32)); _ -> case V7 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V138, V139, V140, V141, V142) -> case V8 of {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V143, V144, V145, V146, V147) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V140, V145)) of 1 -> fun (V148) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V149) -> ('Idris.Idris2.Builtin':'un--snd'(V149)) end, V142)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V150) -> ('Idris.Idris2.Builtin':'un--snd'(V150)) end, V147)), V148)) end; 0 -> fun (V151) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); _ -> fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V153, V154, V155, V156, V157) -> case V8 of {'Idris.Core.Value.NTCon', E15, E16, E17, E18, E19} -> (fun (V158, V159, V160, V161, V162) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V154, V159)) of 1 -> fun (V163) -> ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V164) -> ('Idris.Idris2.Builtin':'un--snd'(V164)) end, V157)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V165) -> ('Idris.Idris2.Builtin':'un--snd'(V165)) end, V162)), V163)) end; 0 -> fun (V166) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17, E18, E19)); _ -> fun (V167) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V168, V169) -> fun (V170) -> case V8 of {'Idris.Core.Value.NPrimVal', E22, E23} -> (fun (V171, V172) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V169, V172)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end(E20, E21)); _ -> fun (V173) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end end.
'nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of [] -> case V8 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; [E0 | E1] -> (fun (V10, V11) -> case V8 of [E2 | E3] -> (fun (V12, V13) -> begin (V14 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V5, V0, V4, V10))(V9))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V5, [], V4, V12))(V9))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = (('nested--7631-2934--in--un--conflictNF'(V0, V1, V2, V3, V4, V5, V6, V16, V19))(V9))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> case V22 of {'Idris.Prelude.Types.Just', E10} -> (fun (V23) -> begin (V24 = ('nested--7631-2933--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6, V11, V13, V9))), case V24 of {'Idris.Prelude.Types.Left', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V26) -> case V26 of {'Idris.Prelude.Types.Just', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V23, V27))}} end(E13)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end.
'nested--7126-2483--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> 0; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V9)) of 1 -> ('nested--7126-2482--in--un--conflictTm'(V0, V1, V2, V3, V5, V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> ('nested--7126-2483--in--un--conflictArgs'(V0, V1, V2, V3, V4, V5, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10995-5993--in--un--close'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(('nested--10995-5992--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, V6, 0, V7)), V8)).
'nested--7126-2480--in--un--clash'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.TT.DataCon', E6, E7} -> (fun (V9, V10) -> case V5 of {'Idris.Core.TT.Ref', E11, E12, E13} -> (fun (V11, V12, V13) -> case V12 of {'Idris.Core.TT.DataCon', E17, E18} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V9, V14)) end(E17, E18)); _ -> case V5 of {'Idris.Core.TT.PrimVal', E14, E15} -> (fun (V16, V17) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E14, E15)); {'Idris.Core.TT.TType', E16} -> (fun (V18) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E16)); _ -> 0 end end end(E11, E12, E13)); _ -> case V5 of {'Idris.Core.TT.PrimVal', E8, E9} -> (fun (V19, V20) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E8, E9)); {'Idris.Core.TT.TType', E10} -> (fun (V21) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E10)); _ -> 0 end end end(E6, E7)); {'Idris.Core.TT.TyCon', E19, E20} -> (fun (V22, V23) -> case V5 of {'Idris.Core.TT.Ref', E24, E25, E26} -> (fun (V24, V25, V26) -> case V25 of {'Idris.Core.TT.TyCon', E30, E31} -> (fun (V27, V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V22, V27)) end(E30, E31)); _ -> case V5 of {'Idris.Core.TT.PrimVal', E27, E28} -> (fun (V29, V30) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E27, E28)); {'Idris.Core.TT.TType', E29} -> (fun (V31) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E29)); _ -> 0 end end end(E24, E25, E26)); _ -> case V5 of {'Idris.Core.TT.PrimVal', E21, E22} -> (fun (V32, V33) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E21, E22)); {'Idris.Core.TT.TType', E23} -> (fun (V34) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E23)); _ -> 0 end end end(E19, E20)); _ -> case V5 of {'Idris.Core.TT.PrimVal', E3, E4} -> (fun (V35, V36) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E3, E4)); {'Idris.Core.TT.TType', E5} -> (fun (V37) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V7)))) end(E5)); _ -> 0 end end end(E0, E1, E2)); {'Idris.Core.TT.PrimVal', E32, E33} -> (fun (V38, V39) -> case V5 of {'Idris.Core.TT.PrimVal', E34, E35} -> (fun (V40, V41) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V39, V41)) end(E34, E35)); {'Idris.Core.TT.Ref', E36, E37, E38} -> (fun (V42, V43, V44) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V43)))) end(E36, E37, E38)); {'Idris.Core.TT.TType', E39} -> (fun (V45) -> 1 end(E39)); _ -> 0 end end(E32, E33)); {'Idris.Core.TT.TType', E40} -> (fun (V46) -> case V5 of {'Idris.Core.TT.Ref', E41, E42, E43} -> (fun (V47, V48, V49) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.TT':'un--isCon'(V48)))) end(E41, E42, E43)); {'Idris.Core.TT.PrimVal', E44, E45} -> (fun (V50, V51) -> 1 end(E44, E45)); _ -> 0 end end(E40)); _ -> 0 end.
'nested--10071-5119--in--un--buildArgsAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Idris.Core.CaseTree.ConCase', E6, E7, E8, E9} -> (fun (V17, V18, V19, V20) -> begin (V21 = (('nested--10071-5118--in--un--buildArgAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V15))(V14))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = ('nested--10071-5119--in--un--buildArgsAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('un--addNot'(V3, V0, V18, V12)), V16, V14))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V23, V26))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); _ -> begin (V27 = (('nested--10071-5118--in--un--buildArgAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V15))(V14))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> begin (V30 = ('nested--10071-5119--in--un--buildArgsAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V14))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V29, V32))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10071-5118--in--un--buildArgAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> begin (V18 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V16))), begin (V19 = {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.DataCon', V15, V18}, V14}), begin (V22 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Core.TT':'un--substName'(V4, ('Idris.Idris2.Core.TT':'un--apply'(V10, V19, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V21} end, V16)))), V20)) end, V6))), ('un--buildArgs'(V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V16, V0)), V10, V9, ('un--weakenNs'(V18, [{'Idris.Builtin.MkPair', V3, V15} | V8])), ('un--weakenNs'(V18, V12)), V22, V17)) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V23, V24, V25) -> begin (V26 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V23 | [V24 | []]]))), begin (V28 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('Idris.Idris2.Core.TT':'un--substName'(V4, {'Idris.Core.TT.TDelay', V10, 2, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V23}, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V24}}, V27)) end, V6))), ('un--buildArgs'(V11, [V23 | [V24 | V0]], V10, V9, ('un--weakenNs'(V26, V8)), ('un--weakenNs'(V26, V12)), V28, V25)) end end end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V29, V30) -> begin (V32 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('Idris.Idris2.Core.TT':'un--substName'(V4, {'Idris.Core.TT.PrimVal', V10, V29}, V31)) end, V6))), ('un--buildArgs'(V11, V0, V10, V9, V8, V12, V32, V30)) end end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V33) -> ('un--buildArgs'(V11, V0, V10, V9, V8, V12, V6, V33)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8762-3915--in--un--addTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V8, case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V40 of {'Idris.Prelude.Types.Left', E30} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E32} -> (fun (V43) -> case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> case V61 of {'Idris.Core.Context.Context.DCon', E53, E54, E55} -> (fun (V64, V65, V66) -> begin (V87 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V7, [], V6, {'Idris.Core.Env.Nil'}, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V69 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V87 of {'Idris.Prelude.Types.Left', E76} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V89, {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V64, V65}}}}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53, E54, E55)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--weakenNs'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Var'(V0, V4)), V5} | ('un--weakenNs'(V0, V3))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tagIsNot'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8, V9)) end end}, V3, V0)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.ConstCase', E4, E5} -> (fun (V10, V11) -> 1 end(E4, E5)); {'Idris.Core.CaseTree.DelayCase', E6, E7, E8} -> (fun (V12, V13, V14) -> 1 end(E6, E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V15) -> 0 end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tagIs'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V0, V3)) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.ConstCase', E4, E5} -> (fun (V6, V7) -> 0 end(E4, E5)); {'Idris.Core.CaseTree.DelayCase', E6, E7, E8} -> (fun (V8, V9, V10) -> 0 end(E6, E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V11) -> 1 end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--replaceDefaults'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', V5} end(E2, E3)); {'Idris.Core.Value.NType', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V5} end(E4)); _ -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('nested--9965-5028--in--un--rep'(V1, V5, V4, V3, V2, V0, V10, V11)) end end, V5, [], V6))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('nested--9965-5029--in--un--dropRep'(V1, V5, V4, V3, V2, V0, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V41, V42)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V14))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--mkAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Core.CaseTree.ConCase', V4, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> {'Idris.Core.Name.MN', <<"m"/utf8>>, V8} end, ('Idris.Idris2.Prelude.Types':'un--take'(V7, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFrom_Range_$a'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V9) -> fun (V10) -> ((V9 + V10) rem 9223372036854775808) end end, fun (V11) -> fun (V12) -> ((V11 * V12) rem 9223372036854775808) end end, fun (V13) -> V13 end}, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V16, V17)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V20, V21)) end end}, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V34, V35)) end end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V36) -> fun (V37) -> ((V36 + V37) rem 9223372036854775808) end end, fun (V38) -> fun (V39) -> ((V38 * V39) rem 9223372036854775808) end end, fun (V40) -> V40 end}, fun (V41) -> ((0 - V41) rem 9223372036854775808) end, fun (V42) -> fun (V43) -> ((V42 - V43) rem 9223372036854775808) end end}}}, 0)))))), ('Idris.Idris2.Core.CaseTree':'dn--un--weakenNs_Weaken_CaseTree'(('Idris.Idris2.Core.TT.SizeOf':'un--map'(('Idris.Idris2.Core.TT.SizeOf':'un--take'(V7)))), ('un--emptyRHS'(V1, V2))))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--match'(V0, V1) -> case V0 of {'Idris.Core.TT.Local', E4, E5, E6} -> (fun (V2, V3, V4) -> 1 end(E4, E5, E6)); {'Idris.Core.TT.Ref', E7, E8, E9} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Core.TT.Bound'} -> (fun () -> 1 end()); _ -> case V1 of {'Idris.Core.TT.Ref', E14, E15, E16} -> (fun (V8, V9, V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V10)) end(E14, E15, E16)); _ -> case V1 of {'Idris.Core.TT.Erased', E12, E13} -> (fun (V11, V12) -> 1 end(E12, E13)); _ -> case V0 of {'Idris.Core.TT.TType', E10} -> (fun (V13) -> case V1 of {'Idris.Core.TT.TType', E11} -> (fun (V14) -> 1 end(E11)); _ -> 0 end end(E10)); _ -> 0 end end end end end(E7, E8, E9)); {'Idris.Core.TT.App', E17, E18, E19} -> (fun (V15, V16, V17) -> case V1 of {'Idris.Core.TT.App', E24, E25, E26} -> (fun (V18, V19, V20) -> case ('un--match'(V16, V19)) of 1 -> ('un--match'(V17, V20)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> case V1 of {'Idris.Core.TT.Erased', E22, E23} -> (fun (V21, V22) -> 1 end(E22, E23)); _ -> case V0 of {'Idris.Core.TT.TType', E20} -> (fun (V23) -> case V1 of {'Idris.Core.TT.TType', E21} -> (fun (V24) -> 1 end(E21)); _ -> 0 end end(E20)); _ -> 0 end end end end(E17, E18, E19)); {'Idris.Core.TT.As', E27, E28, E29, E30} -> (fun (V25, V26, V27, V28) -> case V1 of {'Idris.Core.TT.As', E31, E32, E33, E34} -> (fun (V29, V30, V31, V32) -> ('un--match'(V28, V32)) end(E31, E32, E33, E34)); _ -> ('un--match'(V28, V1)) end end(E27, E28, E29, E30)); {'Idris.Core.TT.TDelayed', E35, E36, E37} -> (fun (V33, V34, V35) -> case V1 of {'Idris.Core.TT.TDelayed', E42, E43, E44} -> (fun (V36, V37, V38) -> ('un--match'(V35, V38)) end(E42, E43, E44)); _ -> case V1 of {'Idris.Core.TT.Erased', E40, E41} -> (fun (V39, V40) -> 1 end(E40, E41)); _ -> case V0 of {'Idris.Core.TT.TType', E38} -> (fun (V41) -> case V1 of {'Idris.Core.TT.TType', E39} -> (fun (V42) -> 1 end(E39)); _ -> 0 end end(E38)); _ -> 0 end end end end(E35, E36, E37)); {'Idris.Core.TT.TDelay', E45, E46, E47, E48} -> (fun (V43, V44, V45, V46) -> case V1 of {'Idris.Core.TT.TDelay', E53, E54, E55, E56} -> (fun (V47, V48, V49, V50) -> ('un--match'(V46, V50)) end(E53, E54, E55, E56)); _ -> case V1 of {'Idris.Core.TT.Erased', E51, E52} -> (fun (V51, V52) -> 1 end(E51, E52)); _ -> case V0 of {'Idris.Core.TT.TType', E49} -> (fun (V53) -> case V1 of {'Idris.Core.TT.TType', E50} -> (fun (V54) -> 1 end(E50)); _ -> 0 end end(E49)); _ -> 0 end end end end(E45, E46, E47, E48)); {'Idris.Core.TT.TForce', E57, E58, E59} -> (fun (V55, V56, V57) -> case V1 of {'Idris.Core.TT.TForce', E64, E65, E66} -> (fun (V58, V59, V60) -> ('un--match'(V57, V60)) end(E64, E65, E66)); _ -> case V1 of {'Idris.Core.TT.Erased', E62, E63} -> (fun (V61, V62) -> 1 end(E62, E63)); _ -> case V0 of {'Idris.Core.TT.TType', E60} -> (fun (V63) -> case V1 of {'Idris.Core.TT.TType', E61} -> (fun (V64) -> 1 end(E61)); _ -> 0 end end(E60)); _ -> 0 end end end end(E57, E58, E59)); {'Idris.Core.TT.PrimVal', E67, E68} -> (fun (V65, V66) -> case V1 of {'Idris.Core.TT.PrimVal', E73, E74} -> (fun (V67, V68) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V66, V68)) end(E73, E74)); _ -> case V1 of {'Idris.Core.TT.Erased', E71, E72} -> (fun (V69, V70) -> 1 end(E71, E72)); _ -> case V0 of {'Idris.Core.TT.TType', E69} -> (fun (V71) -> case V1 of {'Idris.Core.TT.TType', E70} -> (fun (V72) -> 1 end(E70)); _ -> 0 end end(E69)); _ -> 0 end end end end(E67, E68)); {'Idris.Core.TT.Erased', E75, E76} -> (fun (V73, V74) -> 1 end(E75, E76)); _ -> case V1 of {'Idris.Core.TT.Erased', E2, E3} -> (fun (V75, V76) -> 1 end(E2, E3)); _ -> case V0 of {'Idris.Core.TT.TType', E0} -> (fun (V77) -> case V1 of {'Idris.Core.TT.TType', E1} -> (fun (V78) -> 1 end(E1)); _ -> 0 end end(E0)); _ -> 0 end end end.
'un--isEmpty'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V7, case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V11 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V41 of {'Idris.Prelude.Types.Left', E35} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E37} -> (fun (V44) -> case V44 of {'Idris.Core.Context.Context.TCon', E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52) -> case case V49 of {'Idris.Core.Context.Context.MkTypeFlags', E46, E47} -> (fun (V53, V54) -> V54 end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'un--allM'(fun (V55) -> fun (V56) -> ('un--conflict'(V0, V1, V2, V3, {'Idris.Core.Value.NTCon', V6, V7, V8, V9, V10}, V55, V56)) end end, V51, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39, E40, E41, E42, E43, E44, E45)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E37)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--getNonCoveringRefs'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> begin (V43 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V42) -> ('nested--10405-5439--in--un--noAssert'(V2, V1, V0, V42)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(('Idris.Idris2.Core.Context.Context':'un--refersTo'(V41))))))), begin (V52 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V46, V47, V48)) end end end, fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V49, V50, V51)) end end end}, V44, V45)) end end, V43, [], V3))), case V52 of {'Idris.Prelude.Types.Left', E35} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V54) -> begin (V56 = ('Idris.Idris2.Data.List':'un--filter'(fun (V55) -> ('nested--10405-5438--in--un--isCase'(V2, V1, V0, V55)) end, V54))), begin (V59 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V57) -> fun (V58) -> ('un--getNonCoveringRefs'(V0, V1, V57, V58)) end end, V56, [], V3))), case V59 of {'Idris.Prelude.Types.Left', E37} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V61) -> begin (V64 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V62) -> fun (V63) -> ('nested--10405-5440--in--un--notCovering'(V2, V1, V0, V7, V62, V63)) end end, V43, V3))), case V64 of {'Idris.Prelude.Types.Left', E39} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V66) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V66, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V74, V75, V76)) end end end end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V78)) end end, fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V82, V83, V84, V85)) end end end end end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V87)) end end, fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V90, V91, V92)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V93, V94)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V61))))} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getMissingAlts'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NPrimVal', E6, E7} -> (fun (V6, V7) -> fun (V8) -> case V7 of {'Idris.Core.TT.WorldType'} -> (fun () -> case ('Idris.Idris2.Data.List':'un--isNil'(V5)) of 1 -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseTree.DefaultCase', {'Idris.Core.CaseTree.Unmatched', <<"Coverage check"/utf8>>}} | []]}; 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Looking for missing alts at type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V7)))) end, V8))), case V9 of {'Idris.Prelude.Types.Left', E8} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V11) -> case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V27, V28, V29, V30)) end end end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V35, V36, V37)) end end end end end}, fun (V38) -> ('Idris.Idris2.Core.CaseTree':'un--isDefault'(V38)) end, V5)) of 1 -> begin (V39 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Found default"/utf8>> end, V8))), case V39 of {'Idris.Prelude.Types.Left', E10} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V41) -> {'Idris.Prelude.Types.Right', []} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseTree.DefaultCase', {'Idris.Core.CaseTree.Unmatched', <<"Coverage check"/utf8>>}} | []]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6, E7)); {'Idris.Core.Value.NType', E12} -> (fun (V42) -> fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> <<"Looking for missing alts at type Type"/utf8>> end, V43))), case V44 of {'Idris.Prelude.Types.Left', E13} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V46) -> case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V62, V63, V64, V65)) end end end end end end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V67)) end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V70, V71, V72)) end end end end end}, fun (V73) -> ('Idris.Idris2.Core.CaseTree':'un--isDefault'(V73)) end, V5)) of 1 -> begin (V74 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Found default"/utf8>> end, V43))), case V74 of {'Idris.Prelude.Types.Left', E15} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V76) -> {'Idris.Prelude.Types.Right', []} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseTree.DefaultCase', {'Idris.Core.CaseTree.Unmatched', <<"Coverage check"/utf8>>}} | []]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> fun (V77) -> begin (V78 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.missing"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Getting constructors for: "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V1, V4)))) end, V77))), case V78 of {'Idris.Prelude.Types.Left', E0} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V80) -> begin (V81 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V1, V0, <<"coverage.missing"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Getting constructors for"/utf8>> end, ('Idris.Idris2.Core.Env':'un--mkEnv'(V2, V1)), V4, V77))), case V81 of {'Idris.Prelude.Types.Left', E2} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V83) -> begin (V84 = ('un--getCons'(V0, V1, V3, V4, V77))), case V84 of {'Idris.Prelude.Types.Left', E4} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V86) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V87) -> ('nested--9233-4544--in--un--noneOf'(V1, V5, V4, V3, V2, V0, V5, V87)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V88) -> ('un--mkAlt'(V1, V2, {'Idris.Core.CaseTree.Unmatched', <<"Coverage check"/utf8>>}, ('Idris.Idris2.Builtin':'un--snd'(V88)))) end, V86))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getMissing'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> {'Idris.Core.TT.Ref', V2, {'Idris.Core.TT.Bound'}, V10} end, V0))), begin (V12 = (('un--buildArgs'(V1, V0, V2, V9, [], [], V11, V4))(V5))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V43 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V41, V42)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V14))), begin (V63 = case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V43))()) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"coverage.missing"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun (V44) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V45) -> case V45 of {'Idris.Prelude.Types.Left', E4} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V47) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V47))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V48, V49, [], V50)) end end end, V43, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V53) -> case V53 of {'Idris.Prelude.Types.Left', E6} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V55) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V55))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V56) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V57, V58, V59)) end end end, fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V60, V61, V62)) end end end}, V51, V56)) end, V52)) end end)), V44)) end, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V63 of {'Idris.Prelude.Types.Left', E8} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V65) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V66) -> ('Idris.Idris2.Core.TT':'un--apply'(V2, {'Idris.Core.TT.Ref', V2, {'Idris.Core.TT.Func'}, V3}, V66)) end, V14))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getCons'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V6, case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V40 of {'Idris.Prelude.Types.Left', E35} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E37} -> (fun (V43) -> case V43 of {'Idris.Core.Context.Context.TCon', E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51) -> begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V52) -> fun (V53) -> ('nested--8762-3915--in--un--addTy'(V1, V5, V7, V8, V9, V6, V2, V0, V52, V53)) end end, V50, [], V4))), case V54 of {'Idris.Prelude.Types.Left', E46} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V57) -> V57 end, V56))} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Called `getCons` on something that is not a Type constructor"/utf8>>}, V4)) end end(E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Called `getCons` on something that is not a Type constructor"/utf8>>}, V4)) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', []} end.
'un--freeEnv'(V0, V1) -> case V1 of [] -> {'Idris.Core.Env.Nil'}; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Core.Env.::', {'Idris.Core.TT.PVar', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.Erased', V0, 0}}, ('un--freeEnv'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findTag'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case ('Idris.Idris2.Core.TT':'un--sameVar'(V0, V5)) of 1 -> {'Idris.Prelude.Types.Just', V6}; 0 -> ('un--findTag'(V0, V1, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--eraseApps'(V0, V1) -> ('case--eraseApps-5879'(V1, V0, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V1)))).
'un--emptyRHS'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.CaseTree.Case', V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('nested--9051-4157--in--un--emptyRHSalt'(V2, V5, V4, V3, V0, V6)) end, V5))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V7, V8) -> {'Idris.Core.CaseTree.STerm', V7, {'Idris.Core.TT.Erased', V0, 0}} end(E4, E5)); _ -> V1 end.
'un--conflictMatch'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case ('nested--7126-2483--in--un--conflictArgs'(V0, V4, V5, V3, V4, V5, V3)) of 1 -> 1; 0 -> ('un--conflictMatch'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--conflict'(V0, V1, V2, V3, V4, V5, V6) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V7 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V41 = {'Idris.Prelude.Types.Just', V40}), ('case--case block in conflict-3522'(V0, V5, V4, V3, V2, V1, V40, V41, {'Idris.Builtin.MkPair', case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V59 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V64 end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V6)) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clauseMatches'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('un--eraseApps'(V1, ('nested--10995-5993--in--un--close'(V0, V4, V3, V2, V1, V0, ('Idris.Idris2.Core.TT':'un--getLoc'(V3)), V2, V3))))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = V8), begin (V16 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V10, V11, V12)) end end end, fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V13, V14, V15)) end end end}, V9, V5))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V19, V20, V21)) end end end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V22, V23, V24)) end end end}, V4, V5))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> {'Idris.Prelude.Types.Right', ('un--match'(V18, V27))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkMatched'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"coverage"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Checking coverage for"/utf8>> end, V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V17 = begin (V13 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V10, V11, V12)) end end end}, V2, V3))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"coverage"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(raw term: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V15)), <<")"/utf8>>))))} end, V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('un--eraseApps'(V0, V2))(V3))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"coverage"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Erased to"/utf8>> end, V22, V3))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V39 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"coverage"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V26) -> begin (V35 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V29, V30, V31)) end end end, fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V32, V33, V34)) end end end}, V27, V28)) end end, V1, [], V26))), case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Against clauses:\x{a}"/utf8>>, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V38) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Clause'(V38)))) end, V37))))))))))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V3))), case V39 of {'Idris.Prelude.Types.Left', E12} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V41) -> ('nested--11085-6079--in--un--tryClauses'(V2, V1, V0, V1, V22, V3)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> begin (V12 = ('un--freeEnv'(V2, V1))), fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V3, V12, V10))(V13))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('un--replaceDefaults'(V0, V1, V2, V3, V16, V11, V13))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = (('un--getMissingAlts'(V0, V1, V2, V3, V16, V19))(V13))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V22))), begin (V26 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V23 end, fun () -> fun (V24) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V25) -> ('un--tagIs'(V24, V25)) end, V23)) end end, ('un--findTag'(V9, V1, V4))))), begin (V29 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V26 end, fun () -> fun (V27) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V28) -> ('un--tagIsNot'(V27, V28)) end, V26)) end end, ('un--findTag'(V9, V1, V5))))), ('nested--10071-5119--in--un--buildArgsAlt'(V1, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V0, V5, V29, V13)) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E10, E11} -> (fun (V30, V31) -> fun (V32) -> {'Idris.Prelude.Types.Right', []} end end(E10, E11)); {'Idris.Core.CaseTree.Unmatched', E12} -> (fun (V33) -> fun (V34) -> {'Idris.Prelude.Types.Right', [V6 | []]} end end(E12)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> fun (V35) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--altMatch'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.DefaultCase', E18} -> (fun (V2) -> 1 end(E18)); _ -> case V0 of {'Idris.Core.CaseTree.DelayCase', E0, E1, E2} -> (fun (V3, V4, V5) -> case V1 of {'Idris.Core.CaseTree.DelayCase', E3, E4, E5} -> (fun (V6, V7, V8) -> 1 end(E3, E4, E5)); _ -> 0 end end(E0, E1, E2)); {'Idris.Core.CaseTree.ConCase', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> case V1 of {'Idris.Core.CaseTree.ConCase', E10, E11, E12, E13} -> (fun (V13, V14, V15, V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, V14)) end(E10, E11, E12, E13)); _ -> 0 end end(E6, E7, E8, E9)); {'Idris.Core.CaseTree.ConstCase', E14, E15} -> (fun (V17, V18) -> case V1 of {'Idris.Core.CaseTree.ConstCase', E16, E17} -> (fun (V19, V20) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V17, V19)) end(E16, E17)); _ -> 0 end end(E14, E15)); _ -> 0 end end.
'un--addNot'(V0, V1, V2, V3) -> case V3 of [] -> [{'Idris.Builtin.MkPair', V0, [V2 | []]} | []]; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case ('Idris.Idris2.Core.TT':'un--sameVar'(V0, V6)) of 1 -> [{'Idris.Builtin.MkPair', V6, [V2 | V7]} | V5]; 0 -> [{'Idris.Builtin.MkPair', V6, V7} | ('un--addNot'(V0, V1, V2, V5))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
