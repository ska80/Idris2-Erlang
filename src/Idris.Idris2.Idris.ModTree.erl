-module('Idris.Idris2.Idris.ModTree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--filterUsedByMods-2488'/4,
  'case--buildMod-1787'/13,
  'nested--14926-2426--in--un--getMods'/8,
  'nested--14926-2427--in--un--dropLater'/5,
  'dn--un--show_Show_BuildMod'/1,
  'dn--un--showPrec_Show_BuildMod'/2,
  'dn--un--__Impl_Show_BuildMod'/0,
  'un--needsBuildingTime'/4,
  'un--needsBuildingHash'/5,
  'un--needsBuilding'/6,
  'un--mkModTree'/8,
  'un--mkBuildMods'/4,
  'un--loadModules'/8,
  'un--getBuildMods'/6,
  'un--getAllBuildMods'/5,
  'un--filterUsedByMods'/2,
  'un--checkTotalReq'/5,
  'un--checkDepHashes'/3,
  'un--buildMods'/8,
  'un--buildMod'/8,
  'un--buildDeps'/7,
  'un--buildAll'/5
]).
'case--filterUsedByMods-2488'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, ('un--filterUsedByMods'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> case V6 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V4)))), V5)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--buildMod-1787'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> begin (V15 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Checking whether to rebuild "/utf8>> | [V7 | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<")"/utf8>>)))) | []]]])) end, V12))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V19 = ('un--needsBuilding'(V6, V4, V7, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('Idris.Idris2.Core.Directory':'un--filenameFromModuleLocation'(V18)) end, V14)), V12))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V12))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalIdrSrc', V8})), V12))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> begin (V29 = begin (V28 = ('erlang':'put'(V5, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E10} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V31) -> begin (V41 = case V21 of 1 -> ((begin (V32 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1)))) - ('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)))))))), begin (V36 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'(V32, $ )))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'(V2)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--slash'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'(V1)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Building"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_ModuleIdent'(case V0 of {'Idris.Idris.ModTree.MkBuildMod', E12, E13, E14} -> (fun (V33, V34, V35) -> V34 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V7))))))))))), fun () -> fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--log'(V6, <<"import.file"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing "/utf8>>, V7)) end, V37))), case V38 of {'Idris.Prelude.Types.Left', E15} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V40) -> ('Idris.Idris2.Idris.ProcessIdr':'un--process'(V6, V27, V24, V5, V4, V36, V7, V8, V37)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end())(V12)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V41 of {'Idris.Prelude.Types.Left', E17} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E19} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Idris.REPL.Common':'un--emitWarningsAndErrors'(V6, V4, V5, case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V43))()) of 1 -> V13; 0 -> V43; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12))), case V48 of {'Idris.Prelude.Types.Left', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V50) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V50, case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V43))()) of 1 -> V13; 0 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, V43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14926-2426--in--un--getMods'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V5}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--getBuildMods'(V3, V1, V4, V5, V8, V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('nested--14926-2426--in--un--getMods'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V5)), V9, V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14926-2427--in--un--dropLater'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> [V5 | ('nested--14926-2427--in--un--dropLater'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--filter'(fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(case V7 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V8, V9, V10) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Idris.ModTree.MkBuildMod', E5, E6, E7} -> (fun (V11, V12, V13) -> V11 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V6))))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_BuildMod'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.ModTree.MkBuildMod', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V4)) end, case V0 of {'Idris.Idris.ModTree.MkBuildMod', E3, E4, E5} -> (fun (V5, V6, V7) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), <<"]"/utf8>>)))))).
'dn--un--showPrec_Show_BuildMod'(V0, V1) -> ('dn--un--show_Show_BuildMod'(V1)).
'dn--un--__Impl_Show_BuildMod'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_BuildMod'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_BuildMod'(V1, V2)) end end}.
'un--needsBuildingTime'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--modTime'(V1, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Binary.Prims':'un--modTime'(V0, V3))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Binary.Prims':'un--modTime'(V10, V11)) end end, V2, [], V3))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V41, V6)) end, [V9 | V14]))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--needsBuildingHash'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V49 = ('Idris.Idris2.Core.Binary.Prims':'un--hashFileWith'(case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V13 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V48 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V4))), case V49 of {'Idris.Prelude.Types.Left', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V51) -> case V51 of {'Idris.Prelude.Types.Just', E44} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Binary':'un--readHashes'({'Idris.Core.Directory.LocalFile', V2}, V4))), case V53 of {'Idris.Prelude.Types.Left', E45} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V56, V57) -> case V56 of {'Idris.Prelude.Types.Just', E49} -> (fun (V58) -> begin (V92 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V59) -> case V59 of {'Idris.Prelude.Types.Left', E50} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V61) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V73)) end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V77, V78, V79, V80)) end end end end end end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V82)) end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V85, V86, V87)) end end end end end}, fun (V88) -> V88 end, V61))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V89) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V90) -> fun (V91) -> ('un--checkDepHashes'(V0, V90, V91)) end end, V3, [], V89)) end, V4))), case V92 of {'Idris.Prelude.Types.Left', E52} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V94) -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V52, V58)) of 1 -> 1; 0 -> V94; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E47, E48)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--needsBuilding'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--exists'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V3))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> case V36 of 1 -> begin (V66 = begin (V37 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V5))), case V37 of {'Idris.Prelude.Types.Left', E2} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V39) -> case case V39 of {'Idris.Core.Options.MkSessionOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V62 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--needsBuildingHash'(V0, V2, V3, V4, V5)); 0 -> ('un--needsBuildingTime'(V2, V3, V4, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V66 of {'Idris.Prelude.Types.Left', E30} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V68) -> case V68 of 0 -> begin (V69 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Hashes still valid for "/utf8>>, V2)) end, V5))), case V69 of {'Idris.Prelude.Types.Left', E32} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V71) -> begin (V93 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V72) -> case V72 of {'Idris.Prelude.Types.Left', E34} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V74) -> {'Idris.Prelude.Types.Right', case V74 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V77 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V91) -> begin (V92 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V92} end end, V5))), case V93 of {'Idris.Prelude.Types.Left', E52} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V95) -> case V95 of {'Idris.Prelude.Types.Just', E54} -> (fun (V96) -> begin (V125 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.requirement"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V99, V100, V101)) end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V108)) end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V112, V113, V114, V115)) end end end end end end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V117)) end end, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V120, V121, V122)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V123, V124)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, [<<"Checking totality requirement of "/utf8>> | [V2 | [<<" (main file is "/utf8>> | [V96 | [<<")"/utf8>> | []]]]]])) end, V5))), case V125 of {'Idris.Prelude.Types.Left', E55} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V127) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V96)) of 1 -> begin (V161 = begin (V158 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V128) -> case V128 of {'Idris.Prelude.Types.Left', E57} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V130) -> {'Idris.Prelude.Types.Right', case V130 of {'Idris.Core.Options.MkSessionOpts', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156) -> V132 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V157) -> ('Idris.Idris2.Core.Context':'un--getSession'(V0, V157)) end, V5))), case V158 of {'Idris.Prelude.Types.Left', E85} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V160) -> ('un--checkTotalReq'(V0, V2, V3, V160, V5)) end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V161 of {'Idris.Prelude.Types.Left', E87} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V163) -> case V163 of 1 -> begin (V192 = begin (V191 = (('Idris.Idris2.Erlang.System.File':'un--removeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> V170 end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), begin (V178 = (V175(V176))), (V177(V178)) end end end end end end end}, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), ((V182(V184))(V183)) end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V186(V187))), (V188(V187)) end end end end}, fun (V189) -> fun (V190) -> V190 end end}, V3))(V5))), {'Idris.Prelude.Types.Right', V191} end), case V192 of {'Idris.Prelude.Types.Left', E89} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V194) -> case V194 of {'Idris.Prelude.Types.Right', E91} -> (fun (V195) -> case V195 of 0 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E91)); {'Idris.Prelude.Types.Left', E92} -> (fun (V196) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V3, V196}, V5)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mkModTree'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V10, V11)) end end}, V6, V4)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CyclicImports', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, [V6 | []]))}, V7)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V19, V20)) end end}, V6, V16)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V24 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V21) -> ('Idris.Idris2.Core.Directory':'un--nsToSource'(V0, V3, V6, V21)) end end, fun () -> fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', V22} end end end, V5))(V12))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Idris.ProcessIdr':'un--readHeader'(V0, V1, V26, V6, V12))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V40 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V30) -> case V30 of {'Idris.Idris.Syntax.MkImport', E6, E7, E8, E9} -> (fun (V31, V32, V33, V34) -> V33 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V29 of {'Idris.Idris.Syntax.MkModule', E10, E11, E12, E13, E14} -> (fun (V35, V36, V37, V38, V39) -> V37 end(E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V43 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V41) -> fun (V42) -> ('un--mkModTree'(V0, V1, V2, V3, [V6 | V4], {'Idris.Prelude.Types.Nothing'}, V41, V42)) end end, V40, [], V12))), case V43 of {'Idris.Prelude.Types.Left', E15} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V45) -> begin (V46 = {'Idris.Idris.ModTree.MkModTree', V6, {'Idris.Prelude.Types.Just', V26}, V45}), begin (V48 = begin (V47 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E17} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V50) -> begin (V52 = begin (V51 = ('erlang':'put'(V2, [{'Idris.Builtin.MkPair', V6, V46} | V50]))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E19} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V54) -> {'Idris.Prelude.Types.Right', V46} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E21} -> (fun (V55) -> {'Idris.Prelude.Types.Right', V55} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V56) -> fun (V57) -> case V56 of {'Idris.Core.Core.CyclicImports', E22} -> (fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V56, V57)) end(E22)); {'Idris.Core.Core.ParseFail', E23} -> (fun (V59) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V56, V57)) end(E23)); {'Idris.Core.Core.LexFail', E24, E25} -> (fun (V60, V61) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V56, V57)) end(E24, E25)); {'Idris.Core.Core.LitFail', E26} -> (fun (V62) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V56, V57)) end(E26)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.ModTree.MkModTree', V6, {'Idris.Prelude.Types.Nothing'}, []}} end end end, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkBuildMods'(V0, V1, V2, V3) -> case V2 of {'Idris.Idris.ModTree.MkModTree', E0, E1, E2} -> (fun (V4, V5, V6) -> case V5 of {'Idris.Prelude.Types.Just', E3} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V7, V11)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', 0} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V18 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V13) -> fun (V14) -> ('un--mkBuildMods'(V0, V1, V13, V14)) end end, case V2 of {'Idris.Idris.ModTree.MkModTree', E7, E8, E9} -> (fun (V15, V16, V17) -> V17 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> begin (V36 = begin (V35 = ('erlang':'put'(V1, [{'Idris.Idris.ModTree.MkBuildMod', V7, case V2 of {'Idris.Idris.ModTree.MkModTree', E14, E15, E16} -> (fun (V25, V26, V27) -> V25 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> case V28 of {'Idris.Idris.ModTree.MkModTree', E17, E18, E19} -> (fun (V29, V30, V31) -> V29 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V2 of {'Idris.Idris.ModTree.MkModTree', E20, E21, E22} -> (fun (V32, V33, V34) -> V34 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | V24]))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E23} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E25} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V42) -> begin (V43 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V7, 0, V42))))), {'Idris.Prelude.Types.Right', V43} end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--loadModules'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0, V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'put'(V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalPkgSrc', V5}))))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Idris.ProcessIdr':'un--readModule'(V0, V3, V1, 1, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, V18, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V18)), V19)) end end, V6, V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getBuildMods'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.ModTree.AllMods'}, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V4, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V14, V15)) end end}, V11, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> case V16 of {'Idris.Idris.ModTree.MkBuildMod', E14, E15, E16} -> (fun (V17, V18, V19) -> V18 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)))) of 1 -> {'Idris.Prelude.Types.Right', []}; 0 -> begin (V20 = ('un--mkModTree'(V0, V1, V8, V2, [], {'Idris.Prelude.Types.Just', V4}, V11, V5))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.ModTree.DoneMod'}, ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), V5))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.ModTree.BuildOrder'}, [], V5))), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> begin (V29 = ('un--mkBuildMods'(V25, V28, V22, V5))), case V29 of {'Idris.Prelude.Types.Left', E10} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V28))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E12} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V35))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllBuildMods'(V0, V1, V2, V3, V4) -> begin (V5 = ('nested--14926-2426--in--un--getMods'(V3, V2, V1, V0, {'Idris.Core.FC.EmptyFC'}, [], V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('nested--14926-2427--in--un--dropLater'(V3, V2, V1, V0, V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--filterUsedByMods'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> ('case--filterUsedByMods-2488'(V2, V3, V1, ('Idris.Idris2.Data.List':'un--partition'(fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V7, V8)) end end}, V2, case V4 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V9, V10, V11) -> V11 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkTotalReq'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.requirement"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reading totalReq from "/utf8>>, V2)) end, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary':'un--readTotalReq'(V2, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Just', E4} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.requirement"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Got"/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V12)) | [<<"and expected"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V3)), <<":"/utf8>>)) | [<<"we"/utf8>> | [case ('Idris.Idris2.Core.TT':'dn--un--<_Ord_TotalReq'(V12, V3)) of 1 -> <<"should"/utf8>>; 0 -> <<"shouldn\x{27}t"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end | [<<"rebuild"/utf8>> | []]]]]]]])) end, V5))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--<_Ord_TotalReq'(V12, V3))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', 0} end end, V4)).
'un--checkDepHashes'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V48 = ('Idris.Idris2.Core.Binary.Prims':'un--hashFileWith'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V12 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V47 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V3))), case V48 of {'Idris.Prelude.Types.Left', E42} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Just', E44} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V1, <<"ttc"/utf8>>, V3))), case V52 of {'Idris.Prelude.Types.Left', E45} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Binary':'un--readHashes'({'Idris.Core.Directory.LocalFile', V54}, V3))), case V55 of {'Idris.Prelude.Types.Left', E47} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E49, E50} -> (fun (V58, V59) -> case V58 of {'Idris.Prelude.Types.Just', E51} -> (fun (V60) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V51, V60))} end(E51)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E49, E50)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V61) -> fun (V62) -> {'Idris.Prelude.Types.Right', 0} end end, V2)).
'un--buildMods'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--buildMod'(V0, V1, V2, V3, V4, V5, V8, V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> case V12 of [] -> ('un--buildMods'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V4)), V5, V9, V7)); _ -> {'Idris.Prelude.Types.Right', V12} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--buildMod'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0, V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--lazyActive'(V0, 1, V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V0, 1, V7))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V23 = case V6 of {'Idris.Idris.ModTree.MkBuildMod', E8, E9, E10} -> (fun (V20, V21, V22) -> V20 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V27 = case V6 of {'Idris.Idris.ModTree.MkBuildMod', E11, E12, E13} -> (fun (V24, V25, V26) -> V25 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V28 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V23, <<"ttc"/utf8>>, V7))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Directory':'un--nsToPath'(V0, V3, V31, V32)) end end, case V6 of {'Idris.Idris.ModTree.MkBuildMod', E16, E17, E18} -> (fun (V33, V34, V35) -> V35 end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V7))), case V36 of {'Idris.Prelude.Types.Left', E19} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V38) -> ('case--buildMod-1787'(V6, V5, V4, V3, V2, V1, V0, V23, V27, V30, V38, ('Idris.Idris2.Data.Either':'un--partitionEithers'(V38)), V7)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildDeps'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--getBuildMods'(V0, V4, {'Idris.Core.FC.EmptyFC'}, [], V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Needs to rebuild: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V10) -> ('dn--un--show_Show_BuildMod'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--showPrec_Show_BuildMod'(V11, V12)) end end}, V9)))) end, V6))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V16 = ('un--buildMods'(V0, V1, V4, {'Idris.Core.FC.EmptyFC'}, (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V9)), V9, V6))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> case V18 of [] -> begin (V19 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V6))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0, V6))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V5, V6))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V29 = begin (V28 = ('erlang':'put'(V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalIdrSrc', V27}))))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttc"/utf8>>, V6))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V34)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" from "/utf8>>, V5)))))) end, V6))), case V35 of {'Idris.Prelude.Types.Left', E16} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Idris.ProcessIdr':'un--readAsMain'(V0, V3, V1, V34, V6))), case V38 of {'Idris.Prelude.Types.Left', E18} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttm"/utf8>>, V6))), case V41 of {'Idris.Prelude.Types.Left', E20} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V43)))) end, V6))), case V44 of {'Idris.Prelude.Types.Left', E22} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Metadata':'un--readFromTTM'(V2, V43, V6))), case V47 of {'Idris.Prelude.Types.Left', E24} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V49) -> {'Idris.Prelude.Types.Right', []} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V18} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildAll'(V0, V1, V2, V3, V4) -> ('un--buildMods'(V0, V1, V2, {'Idris.Core.FC.EmptyFC'}, (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V3)), V3, V4)).
