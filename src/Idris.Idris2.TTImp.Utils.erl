-module('Idris.Idris2.TTImp.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--nameNum-2214'/2,
  'nested--8001-2278--in--un--usedName'/4,
  'nested--8001-2279--in--un--next'/4,
  'nested--6267-1198--in--un--getRawImp'/6,
  'nested--6267-1044--in--un--getRawImp'/7,
  'nested--5971-522--in--un--getParamTy'/2,
  'nested--5971-523--in--un--getFromTy'/2,
  'nested--5971-525--in--un--getFromPiInfo'/2,
  'nested--5971-526--in--un--getFromIField'/2,
  'nested--5971-524--in--un--getFromClause'/2,
  'un--uniqueName'/4,
  'un--substNamesTy\x{27}'/4,
  'un--substNamesDecl\x{27}'/4,
  'un--substNamesData\x{27}'/4,
  'un--substNamesClause\x{27}'/4,
  'un--substNamesClause'/3,
  'un--substNames\x{27}'/4,
  'un--substNames'/3,
  'un--substLocTy'/2,
  'un--substLocDecl'/2,
  'un--substLocData'/2,
  'un--substLocClause'/2,
  'un--substLoc'/2,
  'un--substBindVars'/3,
  'un--rawImpFromDecl'/1,
  'un--nameNum'/1,
  'un--getUnique'/2,
  'un--findUniqueBindableNames'/6,
  'un--findIBindVars'/1,
  'un--findBindableNamesQuot'/3,
  'un--findBindableNames'/4,
  'un--findAllNames'/2
]).
'case--nameNum-2214'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of <<""/utf8>> -> {'Idris.Builtin.MkPair', V0, 0}; _ -> case ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)) of [E2 | E3] -> (fun (V4, V5) -> case V4 of $_ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)))), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Int'(('Idris.Idris2.Prelude.Types':'un--reverse'(V2))))}; _ -> {'Idris.Builtin.MkPair', V0, 0} end end(E2, E3)); _ -> {'Idris.Builtin.MkPair', V0, 0} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8001-2278--in--un--usedName'(V0, V1, V2, V3) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--lookupTyName'({'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V0}}, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V34 of {'Idris.Prelude.Types.Left', E30} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V36) -> {'Idris.Prelude.Types.Right', case V36 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V39, V40)) end end}, V0, V1)); _ -> 1 end} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8001-2279--in--un--next'(V0, V1, V2, V3) -> case ('un--nameNum'(V3)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V5 + 1) rem 9223372036854775808))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6267-1198--in--un--getRawImp'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V6, V7) -> V7 end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E2, E3} -> (fun (V8, V9) -> V9 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6267-1044--in--un--getRawImp'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V7, V8, V9) -> [V8 | [V9 | []]] end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V15, fun (V16) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V12 | [V11 | []]], ('nested--6267-1044--in--un--getRawImp'(V0, V1, V2, V3, V4, V5, V16)))) end)) end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V17, V18) -> [V18 | []] end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5971-522--in--un--getParamTy'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> V7 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5971-523--in--un--getFromTy'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V5 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5971-525--in--un--getFromPiInfo'(V0, V1) -> case V1 of {'Idris.Core.TT.DefImplicit', E0} -> (fun (V2) -> [V2 | []] end(E0)); _ -> [] end.
'nested--5971-526--in--un--getFromIField'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--5971-525--in--un--getFromPiInfo'(V0, V4)), [V6 | []])) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5971-524--in--un--getFromClause'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V2, V3, V4) -> [V3 | [V4 | []]] end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V10, fun (V11) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V7 | [V6 | []]], ('nested--5971-524--in--un--getFromClause'(V0, V11)))) end)) end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V12, V13) -> [V13 | []] end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--uniqueName'(V0, V1, V2, V3) -> begin (V4 = ('nested--8001-2278--in--un--usedName'(V2, V1, V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 1 -> ('un--uniqueName'(V0, V1, ('nested--8001-2279--in--un--next'(V2, V1, V0, V2)), V3)); 0 -> {'Idris.Prelude.Types.Right', V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--substNamesTy\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> {'Idris.TTImp.TTImp.MkImpTy', V4, V5, V6, ('un--substNames\x{27}'(V0, V1, V2, V7))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesDecl\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IClaim', V4, V5, V6, V7, ('un--substNamesTy\x{27}'(V0, V1, V2, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IDef', V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V12)) end, V11))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V13, V14, V15) -> {'Idris.TTImp.TTImp.IData', V13, V14, ('un--substNamesData\x{27}'(V0, V1, V2, V15))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V16, V17, V18) -> {'Idris.TTImp.TTImp.INamespace', V16, V17, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V19)) end, V18))} end(E11, E12, E13)); _ -> V3 end.
'un--substNamesData\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.MkImpData', V4, V5, ('un--substNames\x{27}'(V0, V1, V2, V6)), V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('un--substNamesTy\x{27}'(V0, V1, V2, V9)) end, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V10, V11, V12) -> {'Idris.TTImp.TTImp.MkImpLater', V10, V11, ('un--substNames\x{27}'(V0, V1, V2, V12))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V4, V5, V6) -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V7}} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Builtin':'un--snd'(V8)) end, ('un--findBindableNames'(1, V1, [], V5)))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V5)), V1))))), {'Idris.TTImp.TTImp.PatClause', V4, ('un--substNames\x{27}'(V0, [], [], V5)), ('un--substNames\x{27}'(V0, V9, V2, V6))} end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15) -> begin (V18 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V16}} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('Idris.Idris2.Builtin':'un--snd'(V17)) end, ('un--findBindableNames'(1, V1, [], V11)))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V11)), V1))))), {'Idris.TTImp.TTImp.WithClause', V10, ('un--substNames\x{27}'(V0, [], [], V11)), ('un--substNames\x{27}'(V0, V18, V2, V12)), V13, V14, V15} end end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V19, V20) -> {'Idris.TTImp.TTImp.ImpossibleClause', V19, ('un--substNames\x{27}'(V0, V1, [], V20))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause'(V0, V1, V2) -> ('un--substNamesClause\x{27}'(0, V0, V1, V2)).
'un--substNames\x{27}'(V0, V1, V2, V3) -> case V0 of 0 -> case V3 of {'Idris.TTImp.TTImp.IVar', E118, E119} -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V8, V9)) end end}, V5, V1)) of 1 -> {'Idris.TTImp.TTImp.IVar', V4, V5}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V5, V2)) of {'Idris.Prelude.Types.Just', E120} -> (fun (V14) -> V14 end(E120)); _ -> {'Idris.TTImp.TTImp.IVar', V4, V5} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E118, E119)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E59, E60, E61, E62, E63, E64} -> (fun (V15, V16, V17, V18, V19, V20) -> begin (V22 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V21) -> [V21 | V1] end end, V18))), {'Idris.TTImp.TTImp.IPi', V15, V16, V17, V18, ('un--substNames\x{27}'(V0, V1, V2, V19)), ('un--substNames\x{27}'(V0, V22, V2, V20))} end end(E59, E60, E61, E62, E63, E64)); {'Idris.TTImp.TTImp.ILam', E65, E66, E67, E68, E69, E70} -> (fun (V23, V24, V25, V26, V27, V28) -> begin (V30 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V29) -> [V29 | V1] end end, V26))), {'Idris.TTImp.TTImp.ILam', V23, V24, V25, V26, ('un--substNames\x{27}'(V0, V1, V2, V27)), ('un--substNames\x{27}'(V0, V30, V2, V28))} end end(E65, E66, E67, E68, E69, E70)); {'Idris.TTImp.TTImp.ILet', E71, E72, E73, E74, E75, E76, E77} -> (fun (V31, V32, V33, V34, V35, V36, V37) -> begin (V38 = [V34 | V1]), {'Idris.TTImp.TTImp.ILet', V31, V32, V33, V34, ('un--substNames\x{27}'(V0, V1, V2, V35)), ('un--substNames\x{27}'(V0, V1, V2, V36)), ('un--substNames\x{27}'(V0, V38, V2, V37))} end end(E71, E72, E73, E74, E75, E76, E77)); {'Idris.TTImp.TTImp.ICase', E78, E79, E80, E81} -> (fun (V39, V40, V41, V42) -> {'Idris.TTImp.TTImp.ICase', V39, ('un--substNames\x{27}'(V0, V1, V2, V40)), ('un--substNames\x{27}'(V0, V1, V2, V41)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V43) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V43)) end, V42))} end(E78, E79, E80, E81)); {'Idris.TTImp.TTImp.ILocal', E82, E83, E84} -> (fun (V44, V45, V46) -> begin (V47 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V45)), V1))), {'Idris.TTImp.TTImp.ILocal', V44, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V48)) end, V45)), ('un--substNames\x{27}'(V0, V47, V2, V46))} end end(E82, E83, E84)); {'Idris.TTImp.TTImp.IApp', E85, E86, E87} -> (fun (V49, V50, V51) -> {'Idris.TTImp.TTImp.IApp', V49, ('un--substNames\x{27}'(V0, V1, V2, V50)), ('un--substNames\x{27}'(V0, V1, V2, V51))} end(E85, E86, E87)); {'Idris.TTImp.TTImp.INamedApp', E88, E89, E90, E91} -> (fun (V52, V53, V54, V55) -> {'Idris.TTImp.TTImp.INamedApp', V52, ('un--substNames\x{27}'(V0, V1, V2, V53)), V54, ('un--substNames\x{27}'(V0, V1, V2, V55))} end(E88, E89, E90, E91)); {'Idris.TTImp.TTImp.IAutoApp', E92, E93, E94} -> (fun (V56, V57, V58) -> {'Idris.TTImp.TTImp.IAutoApp', V56, ('un--substNames\x{27}'(V0, V1, V2, V57)), ('un--substNames\x{27}'(V0, V1, V2, V58))} end(E92, E93, E94)); {'Idris.TTImp.TTImp.IWithApp', E95, E96, E97} -> (fun (V59, V60, V61) -> {'Idris.TTImp.TTImp.IWithApp', V59, ('un--substNames\x{27}'(V0, V1, V2, V60)), ('un--substNames\x{27}'(V0, V1, V2, V61))} end(E95, E96, E97)); {'Idris.TTImp.TTImp.IAlternative', E98, E99, E100} -> (fun (V62, V63, V64) -> {'Idris.TTImp.TTImp.IAlternative', V62, V63, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V65) -> ('un--substNames\x{27}'(V0, V1, V2, V65)) end, V64))} end(E98, E99, E100)); {'Idris.TTImp.TTImp.ICoerced', E101, E102} -> (fun (V66, V67) -> {'Idris.TTImp.TTImp.ICoerced', V66, ('un--substNames\x{27}'(V0, V1, V2, V67))} end(E101, E102)); {'Idris.TTImp.TTImp.IAs', E103, E104, E105, E106, E107} -> (fun (V68, V69, V70, V71, V72) -> {'Idris.TTImp.TTImp.IAs', V68, V69, V70, V71, ('un--substNames\x{27}'(V0, V1, V2, V72))} end(E103, E104, E105, E106, E107)); {'Idris.TTImp.TTImp.IMustUnify', E108, E109, E110} -> (fun (V73, V74, V75) -> {'Idris.TTImp.TTImp.IMustUnify', V73, V74, ('un--substNames\x{27}'(V0, V1, V2, V75))} end(E108, E109, E110)); {'Idris.TTImp.TTImp.IDelayed', E111, E112, E113} -> (fun (V76, V77, V78) -> {'Idris.TTImp.TTImp.IDelayed', V76, V77, ('un--substNames\x{27}'(V0, V1, V2, V78))} end(E111, E112, E113)); {'Idris.TTImp.TTImp.IDelay', E114, E115} -> (fun (V79, V80) -> {'Idris.TTImp.TTImp.IDelay', V79, ('un--substNames\x{27}'(V0, V1, V2, V80))} end(E114, E115)); {'Idris.TTImp.TTImp.IForce', E116, E117} -> (fun (V81, V82) -> {'Idris.TTImp.TTImp.IForce', V81, ('un--substNames\x{27}'(V0, V1, V2, V82))} end(E116, E117)); _ -> V3 end end; 1 -> case V3 of {'Idris.TTImp.TTImp.IBindVar', E180, E181} -> (fun (V83, V84) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V87, V88)) end end}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V84}}, V1)) of 1 -> {'Idris.TTImp.TTImp.IBindVar', V83, V84}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V91, V92)) end end}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V84}}, V2)) of {'Idris.Prelude.Types.Just', E182} -> (fun (V93) -> V93 end(E182)); _ -> {'Idris.TTImp.TTImp.IBindVar', V83, V84} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E180, E181)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E121, E122, E123, E124, E125, E126} -> (fun (V94, V95, V96, V97, V98, V99) -> begin (V101 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V100) -> [V100 | V1] end end, V97))), {'Idris.TTImp.TTImp.IPi', V94, V95, V96, V97, ('un--substNames\x{27}'(V0, V1, V2, V98)), ('un--substNames\x{27}'(V0, V101, V2, V99))} end end(E121, E122, E123, E124, E125, E126)); {'Idris.TTImp.TTImp.ILam', E127, E128, E129, E130, E131, E132} -> (fun (V102, V103, V104, V105, V106, V107) -> begin (V109 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V108) -> [V108 | V1] end end, V105))), {'Idris.TTImp.TTImp.ILam', V102, V103, V104, V105, ('un--substNames\x{27}'(V0, V1, V2, V106)), ('un--substNames\x{27}'(V0, V109, V2, V107))} end end(E127, E128, E129, E130, E131, E132)); {'Idris.TTImp.TTImp.ILet', E133, E134, E135, E136, E137, E138, E139} -> (fun (V110, V111, V112, V113, V114, V115, V116) -> begin (V117 = [V113 | V1]), {'Idris.TTImp.TTImp.ILet', V110, V111, V112, V113, ('un--substNames\x{27}'(V0, V1, V2, V114)), ('un--substNames\x{27}'(V0, V1, V2, V115)), ('un--substNames\x{27}'(V0, V117, V2, V116))} end end(E133, E134, E135, E136, E137, E138, E139)); {'Idris.TTImp.TTImp.ICase', E140, E141, E142, E143} -> (fun (V118, V119, V120, V121) -> {'Idris.TTImp.TTImp.ICase', V118, ('un--substNames\x{27}'(V0, V1, V2, V119)), ('un--substNames\x{27}'(V0, V1, V2, V120)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V122) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V122)) end, V121))} end(E140, E141, E142, E143)); {'Idris.TTImp.TTImp.ILocal', E144, E145, E146} -> (fun (V123, V124, V125) -> begin (V126 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V124)), V1))), {'Idris.TTImp.TTImp.ILocal', V123, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V127) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V127)) end, V124)), ('un--substNames\x{27}'(V0, V126, V2, V125))} end end(E144, E145, E146)); {'Idris.TTImp.TTImp.IApp', E147, E148, E149} -> (fun (V128, V129, V130) -> {'Idris.TTImp.TTImp.IApp', V128, ('un--substNames\x{27}'(V0, V1, V2, V129)), ('un--substNames\x{27}'(V0, V1, V2, V130))} end(E147, E148, E149)); {'Idris.TTImp.TTImp.INamedApp', E150, E151, E152, E153} -> (fun (V131, V132, V133, V134) -> {'Idris.TTImp.TTImp.INamedApp', V131, ('un--substNames\x{27}'(V0, V1, V2, V132)), V133, ('un--substNames\x{27}'(V0, V1, V2, V134))} end(E150, E151, E152, E153)); {'Idris.TTImp.TTImp.IAutoApp', E154, E155, E156} -> (fun (V135, V136, V137) -> {'Idris.TTImp.TTImp.IAutoApp', V135, ('un--substNames\x{27}'(V0, V1, V2, V136)), ('un--substNames\x{27}'(V0, V1, V2, V137))} end(E154, E155, E156)); {'Idris.TTImp.TTImp.IWithApp', E157, E158, E159} -> (fun (V138, V139, V140) -> {'Idris.TTImp.TTImp.IWithApp', V138, ('un--substNames\x{27}'(V0, V1, V2, V139)), ('un--substNames\x{27}'(V0, V1, V2, V140))} end(E157, E158, E159)); {'Idris.TTImp.TTImp.IAlternative', E160, E161, E162} -> (fun (V141, V142, V143) -> {'Idris.TTImp.TTImp.IAlternative', V141, V142, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V144) -> ('un--substNames\x{27}'(V0, V1, V2, V144)) end, V143))} end(E160, E161, E162)); {'Idris.TTImp.TTImp.ICoerced', E163, E164} -> (fun (V145, V146) -> {'Idris.TTImp.TTImp.ICoerced', V145, ('un--substNames\x{27}'(V0, V1, V2, V146))} end(E163, E164)); {'Idris.TTImp.TTImp.IAs', E165, E166, E167, E168, E169} -> (fun (V147, V148, V149, V150, V151) -> {'Idris.TTImp.TTImp.IAs', V147, V148, V149, V150, ('un--substNames\x{27}'(V0, V1, V2, V151))} end(E165, E166, E167, E168, E169)); {'Idris.TTImp.TTImp.IMustUnify', E170, E171, E172} -> (fun (V152, V153, V154) -> {'Idris.TTImp.TTImp.IMustUnify', V152, V153, ('un--substNames\x{27}'(V0, V1, V2, V154))} end(E170, E171, E172)); {'Idris.TTImp.TTImp.IDelayed', E173, E174, E175} -> (fun (V155, V156, V157) -> {'Idris.TTImp.TTImp.IDelayed', V155, V156, ('un--substNames\x{27}'(V0, V1, V2, V157))} end(E173, E174, E175)); {'Idris.TTImp.TTImp.IDelay', E176, E177} -> (fun (V158, V159) -> {'Idris.TTImp.TTImp.IDelay', V158, ('un--substNames\x{27}'(V0, V1, V2, V159))} end(E176, E177)); {'Idris.TTImp.TTImp.IForce', E178, E179} -> (fun (V160, V161) -> {'Idris.TTImp.TTImp.IForce', V160, ('un--substNames\x{27}'(V0, V1, V2, V161))} end(E178, E179)); _ -> V3 end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V162, V163, V164, V165, V166, V167) -> begin (V169 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V168) -> [V168 | V1] end end, V165))), {'Idris.TTImp.TTImp.IPi', V162, V163, V164, V165, ('un--substNames\x{27}'(V0, V1, V2, V166)), ('un--substNames\x{27}'(V0, V169, V2, V167))} end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V170, V171, V172, V173, V174, V175) -> begin (V177 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V176) -> [V176 | V1] end end, V173))), {'Idris.TTImp.TTImp.ILam', V170, V171, V172, V173, ('un--substNames\x{27}'(V0, V1, V2, V174)), ('un--substNames\x{27}'(V0, V177, V2, V175))} end end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ILet', E12, E13, E14, E15, E16, E17, E18} -> (fun (V178, V179, V180, V181, V182, V183, V184) -> begin (V185 = [V181 | V1]), {'Idris.TTImp.TTImp.ILet', V178, V179, V180, V181, ('un--substNames\x{27}'(V0, V1, V2, V182)), ('un--substNames\x{27}'(V0, V1, V2, V183)), ('un--substNames\x{27}'(V0, V185, V2, V184))} end end(E12, E13, E14, E15, E16, E17, E18)); {'Idris.TTImp.TTImp.ICase', E19, E20, E21, E22} -> (fun (V186, V187, V188, V189) -> {'Idris.TTImp.TTImp.ICase', V186, ('un--substNames\x{27}'(V0, V1, V2, V187)), ('un--substNames\x{27}'(V0, V1, V2, V188)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V190) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V190)) end, V189))} end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.ILocal', E23, E24, E25} -> (fun (V191, V192, V193) -> begin (V194 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V192)), V1))), {'Idris.TTImp.TTImp.ILocal', V191, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V195) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V195)) end, V192)), ('un--substNames\x{27}'(V0, V194, V2, V193))} end end(E23, E24, E25)); {'Idris.TTImp.TTImp.IApp', E26, E27, E28} -> (fun (V196, V197, V198) -> {'Idris.TTImp.TTImp.IApp', V196, ('un--substNames\x{27}'(V0, V1, V2, V197)), ('un--substNames\x{27}'(V0, V1, V2, V198))} end(E26, E27, E28)); {'Idris.TTImp.TTImp.INamedApp', E29, E30, E31, E32} -> (fun (V199, V200, V201, V202) -> {'Idris.TTImp.TTImp.INamedApp', V199, ('un--substNames\x{27}'(V0, V1, V2, V200)), V201, ('un--substNames\x{27}'(V0, V1, V2, V202))} end(E29, E30, E31, E32)); {'Idris.TTImp.TTImp.IAutoApp', E33, E34, E35} -> (fun (V203, V204, V205) -> {'Idris.TTImp.TTImp.IAutoApp', V203, ('un--substNames\x{27}'(V0, V1, V2, V204)), ('un--substNames\x{27}'(V0, V1, V2, V205))} end(E33, E34, E35)); {'Idris.TTImp.TTImp.IWithApp', E36, E37, E38} -> (fun (V206, V207, V208) -> {'Idris.TTImp.TTImp.IWithApp', V206, ('un--substNames\x{27}'(V0, V1, V2, V207)), ('un--substNames\x{27}'(V0, V1, V2, V208))} end(E36, E37, E38)); {'Idris.TTImp.TTImp.IAlternative', E39, E40, E41} -> (fun (V209, V210, V211) -> {'Idris.TTImp.TTImp.IAlternative', V209, V210, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V212) -> ('un--substNames\x{27}'(V0, V1, V2, V212)) end, V211))} end(E39, E40, E41)); {'Idris.TTImp.TTImp.ICoerced', E42, E43} -> (fun (V213, V214) -> {'Idris.TTImp.TTImp.ICoerced', V213, ('un--substNames\x{27}'(V0, V1, V2, V214))} end(E42, E43)); {'Idris.TTImp.TTImp.IAs', E44, E45, E46, E47, E48} -> (fun (V215, V216, V217, V218, V219) -> {'Idris.TTImp.TTImp.IAs', V215, V216, V217, V218, ('un--substNames\x{27}'(V0, V1, V2, V219))} end(E44, E45, E46, E47, E48)); {'Idris.TTImp.TTImp.IMustUnify', E49, E50, E51} -> (fun (V220, V221, V222) -> {'Idris.TTImp.TTImp.IMustUnify', V220, V221, ('un--substNames\x{27}'(V0, V1, V2, V222))} end(E49, E50, E51)); {'Idris.TTImp.TTImp.IDelayed', E52, E53, E54} -> (fun (V223, V224, V225) -> {'Idris.TTImp.TTImp.IDelayed', V223, V224, ('un--substNames\x{27}'(V0, V1, V2, V225))} end(E52, E53, E54)); {'Idris.TTImp.TTImp.IDelay', E55, E56} -> (fun (V226, V227) -> {'Idris.TTImp.TTImp.IDelay', V226, ('un--substNames\x{27}'(V0, V1, V2, V227))} end(E55, E56)); {'Idris.TTImp.TTImp.IForce', E57, E58} -> (fun (V228, V229) -> {'Idris.TTImp.TTImp.IForce', V228, ('un--substNames\x{27}'(V0, V1, V2, V229))} end(E57, E58)); _ -> V3 end end.
'un--substNames'(V0, V1, V2) -> ('un--substNames\x{27}'(0, V0, V1, V2)).
'un--substLocTy'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.TTImp.TTImp.MkImpTy', V0, V0, V4, ('un--substLoc'(V0, V5))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocDecl'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.IClaim', V0, V3, V4, V5, ('un--substLocTy'(V0, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V7, V8, V9) -> {'Idris.TTImp.TTImp.IDef', V0, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--substLocClause'(V0, V10)) end, V9))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V11, V12, V13) -> {'Idris.TTImp.TTImp.IData', V0, V12, ('un--substLocData'(V0, V13))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V14, V15, V16) -> {'Idris.TTImp.TTImp.INamespace', V0, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('un--substLocDecl'(V0, V17)) end, V16))} end(E11, E12, E13)); _ -> V1 end.
'un--substLocData'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.MkImpData', V0, V3, ('un--substLoc'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('un--substLocTy'(V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V8, V9, V10) -> {'Idris.TTImp.TTImp.MkImpLater', V0, V9, ('un--substLoc'(V0, V10))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocClause'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.TTImp.TTImp.PatClause', V0, ('un--substLoc'(V0, V3)), ('un--substLoc'(V0, V4))} end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9, V10) -> {'Idris.TTImp.TTImp.WithClause', V0, ('un--substLoc'(V0, V6)), ('un--substLoc'(V0, V7)), V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('un--substLocClause'(V0, V11)) end, V10))} end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V12, V13) -> {'Idris.TTImp.TTImp.ImpossibleClause', V0, ('un--substLoc'(V0, V13))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLoc'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> {'Idris.TTImp.TTImp.IVar', V0, V3} end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> {'Idris.TTImp.TTImp.IPi', V0, V5, V6, V7, ('un--substLoc'(V0, V8)), ('un--substLoc'(V0, V9))} end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.ILam', V0, V11, V12, V13, ('un--substLoc'(V0, V14)), ('un--substLoc'(V0, V15))} end(E8, E9, E10, E11, E12, E13)); {'Idris.TTImp.TTImp.ILet', E14, E15, E16, E17, E18, E19, E20} -> (fun (V16, V17, V18, V19, V20, V21, V22) -> {'Idris.TTImp.TTImp.ILet', V0, V0, V18, V19, ('un--substLoc'(V0, V20)), ('un--substLoc'(V0, V21)), ('un--substLoc'(V0, V22))} end(E14, E15, E16, E17, E18, E19, E20)); {'Idris.TTImp.TTImp.ICase', E21, E22, E23, E24} -> (fun (V23, V24, V25, V26) -> {'Idris.TTImp.TTImp.ICase', V0, ('un--substLoc'(V0, V24)), ('un--substLoc'(V0, V25)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('un--substLocClause'(V0, V27)) end, V26))} end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.ILocal', E25, E26, E27} -> (fun (V28, V29, V30) -> {'Idris.TTImp.TTImp.ILocal', V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('un--substLocDecl'(V0, V31)) end, V29)), ('un--substLoc'(V0, V30))} end(E25, E26, E27)); {'Idris.TTImp.TTImp.IApp', E28, E29, E30} -> (fun (V32, V33, V34) -> {'Idris.TTImp.TTImp.IApp', V0, ('un--substLoc'(V0, V33)), ('un--substLoc'(V0, V34))} end(E28, E29, E30)); {'Idris.TTImp.TTImp.INamedApp', E31, E32, E33, E34} -> (fun (V35, V36, V37, V38) -> {'Idris.TTImp.TTImp.INamedApp', V0, ('un--substLoc'(V0, V36)), V37, ('un--substLoc'(V0, V38))} end(E31, E32, E33, E34)); {'Idris.TTImp.TTImp.IAutoApp', E35, E36, E37} -> (fun (V39, V40, V41) -> {'Idris.TTImp.TTImp.IAutoApp', V0, ('un--substLoc'(V0, V40)), ('un--substLoc'(V0, V41))} end(E35, E36, E37)); {'Idris.TTImp.TTImp.IWithApp', E38, E39, E40} -> (fun (V42, V43, V44) -> {'Idris.TTImp.TTImp.IWithApp', V0, ('un--substLoc'(V0, V43)), ('un--substLoc'(V0, V44))} end(E38, E39, E40)); {'Idris.TTImp.TTImp.IAlternative', E41, E42, E43} -> (fun (V45, V46, V47) -> {'Idris.TTImp.TTImp.IAlternative', V0, V46, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('un--substLoc'(V0, V48)) end, V47))} end(E41, E42, E43)); {'Idris.TTImp.TTImp.ICoerced', E44, E45} -> (fun (V49, V50) -> {'Idris.TTImp.TTImp.ICoerced', V0, ('un--substLoc'(V0, V50))} end(E44, E45)); {'Idris.TTImp.TTImp.IAs', E46, E47, E48, E49, E50} -> (fun (V51, V52, V53, V54, V55) -> {'Idris.TTImp.TTImp.IAs', V0, V0, V53, V54, ('un--substLoc'(V0, V55))} end(E46, E47, E48, E49, E50)); {'Idris.TTImp.TTImp.IMustUnify', E51, E52, E53} -> (fun (V56, V57, V58) -> {'Idris.TTImp.TTImp.IMustUnify', V0, V57, ('un--substLoc'(V0, V58))} end(E51, E52, E53)); {'Idris.TTImp.TTImp.IDelayed', E54, E55, E56} -> (fun (V59, V60, V61) -> {'Idris.TTImp.TTImp.IDelayed', V0, V60, ('un--substLoc'(V0, V61))} end(E54, E55, E56)); {'Idris.TTImp.TTImp.IDelay', E57, E58} -> (fun (V62, V63) -> {'Idris.TTImp.TTImp.IDelay', V0, ('un--substLoc'(V0, V63))} end(E57, E58)); {'Idris.TTImp.TTImp.IForce', E59, E60} -> (fun (V64, V65) -> {'Idris.TTImp.TTImp.IForce', V0, ('un--substLoc'(V0, V65))} end(E59, E60)); _ -> V1 end.
'un--substBindVars'(V0, V1, V2) -> ('un--substNames\x{27}'(1, V0, V1, V2)).
'un--rawImpFromDecl'(V0) -> case V0 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> [('nested--5971-523--in--un--getFromTy'(V0, V5)) | []] end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.MkImpData', E8, E9, E10, E11, E12} -> (fun (V9, V10, V11, V12, V13) -> [V11 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('nested--5971-523--in--un--getFromTy'(V0, V14)) end, V13))] end(E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.MkImpLater', E13, E14, E15} -> (fun (V15, V16, V17) -> [V17 | []] end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7)); {'Idris.TTImp.TTImp.IDef', E16, E17, E18} -> (fun (V18, V19, V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V20, fun (V21) -> ('nested--5971-524--in--un--getFromClause'(V0, V21)) end)) end(E16, E17, E18)); {'Idris.TTImp.TTImp.IParameters', E19, E20, E21} -> (fun (V22, V23, V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V24, fun (V25) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--rawImpFromDecl'(V25)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('nested--5971-522--in--un--getParamTy'(V0, V26)) end, V23)))) end)) end(E19, E20, E21)); {'Idris.TTImp.TTImp.IRecord', E22, E23, E24, E25} -> (fun (V27, V28, V29, V30) -> case V30 of {'Idris.TTImp.TTImp.MkImpRecord', E26, E27, E28, E29, E30} -> (fun (V31, V32, V33, V34, V35) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V36) -> ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V36)))) end, V33)), fun (V37) -> begin (V38 = {'Idris.TTImp.TTImp.IRecord', V27, V28, V29, {'Idris.TTImp.TTImp.MkImpRecord', V31, V32, V33, V34, V35}}), case V37 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V39, V40) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V35, fun (V41) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--5971-525--in--un--getFromPiInfo'(V38, V39)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V40 | []], ('nested--5971-526--in--un--getFromIField'(V38, V41)))))) end)) end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23, E24, E25)); {'Idris.TTImp.TTImp.INamespace', E33, E34, E35} -> (fun (V42, V43, V44) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V44, fun (V45) -> ('un--rawImpFromDecl'(V45)) end)) end(E33, E34, E35)); {'Idris.TTImp.TTImp.ITransform', E36, E37, E38, E39} -> (fun (V46, V47, V48, V49) -> [V48 | [V49 | []]] end(E36, E37, E38, E39)); {'Idris.TTImp.TTImp.IRunElabDecl', E40, E41} -> (fun (V50, V51) -> [] end(E40, E41)); {'Idris.TTImp.TTImp.IPragma', E42, E43} -> (fun (V52, V53) -> [] end(E42, E43)); {'Idris.TTImp.TTImp.ILog', E44} -> (fun (V54) -> [] end(E44)); {'Idris.TTImp.TTImp.IBuiltin', E45, E46, E47} -> (fun (V55, V56, V57) -> [] end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nameNum'(V0) -> ('case--nameNum-2214'(V0, ('Idris.Idris2.Data.String':'un--span'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V1)) end, ('Idris.Idris2.Prelude.Types':'un--reverse'(V0)))))).
'un--getUnique'(V0, V1) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V4, V5)) end end}, V1, V0)) of 1 -> ('un--getUnique'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"\x{27}"/utf8>>)))); 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findUniqueBindableNames'(V0, V1, V2, V3, V4, V5) -> begin (V26 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V24, V25)) end end}, V16, V17)) end end}, ('un--findBindableNames'(V2, V3, V4, V5))))), fun (V27) -> begin (V144 = begin (V28 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V27))), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> case case V30 of {'Idris.Core.Options.MkSessionOpts', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V52 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V58 = begin (V57 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E2} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V60) -> begin (V91 = case V60 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V61 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V140 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V92) -> case V92 of {'Idris.Prelude.Types.Left', E34} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V94) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--catMaybes'(V94))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V95, V96, [], V97)) end end end, V26, fun (V98) -> fun (V99) -> case V98 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V100, V101) -> begin (V102 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'({'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V100}}, V91))(V99))), case V102 of {'Idris.Prelude.Types.Left', E38} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V104) -> begin (V134 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V105) -> fun (V106) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(V105, V106)) end end, V104, fun (V107) -> case V107 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V108, V109) -> case V109 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V110, V111) -> case V111 of {'Idris.Core.Context.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> case V129 of {'Idris.Core.Context.Context.Hole', E64, E65} -> (fun (V132, V133) -> {'Idris.Prelude.Types.Nothing'} end(E64, E65)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V108)) end end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V137, V138)) end end end end, fun (V139) -> {'Idris.Builtin.MkPair', V100, V139} end, ('Idris.Idris2.Data.List1':'un--fromList'(V134))))} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)), V27))), case V140 of {'Idris.Prelude.Types.Left', E66} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V142) -> case ('Idris.Idris2.Data.List1':'un--fromList'(V142)) of {'Idris.Prelude.Types.Just', E68} -> (fun (V143) -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Idris.Core.Core.ShadowingGlobalDefs', V1, V143}, V27)) end(E68)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V144 of {'Idris.Prelude.Types.Left', E95} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V146) -> {'Idris.Prelude.Types.Right', V26} end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--findIBindVars'(V0) -> case V0 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V5)), ('un--findIBindVars'(V6)))) end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V7, V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V11)), ('un--findIBindVars'(V12)))) end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IApp', E12, E13, E14} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V14)), ('un--findIBindVars'(V15)))) end(E12, E13, E14)); {'Idris.TTImp.TTImp.INamedApp', E15, E16, E17, E18} -> (fun (V16, V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V17)), ('un--findIBindVars'(V19)))) end(E15, E16, E17, E18)); {'Idris.TTImp.TTImp.IAutoApp', E19, E20, E21} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V21)), ('un--findIBindVars'(V22)))) end(E19, E20, E21)); {'Idris.TTImp.TTImp.IWithApp', E22, E23, E24} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBindVars'(V24)), ('un--findIBindVars'(V25)))) end(E22, E23, E24)); {'Idris.TTImp.TTImp.IBindVar', E25, E26} -> (fun (V26, V27) -> [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V27}} | []] end(E25, E26)); {'Idris.TTImp.TTImp.IDelayed', E27, E28, E29} -> (fun (V28, V29, V30) -> ('un--findIBindVars'(V30)) end(E27, E28, E29)); {'Idris.TTImp.TTImp.IDelay', E30, E31} -> (fun (V31, V32) -> ('un--findIBindVars'(V32)) end(E30, E31)); {'Idris.TTImp.TTImp.IForce', E32, E33} -> (fun (V33, V34) -> ('un--findIBindVars'(V34)) end(E32, E33)); {'Idris.TTImp.TTImp.IAlternative', E34, E35, E36} -> (fun (V35, V36, V37) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V49)) end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V53, V54, V55, V56)) end end end end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V61, V62, V63)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V64, V65)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V66) -> ('un--findIBindVars'(V66)) end, V37)) end(E34, E35, E36)); _ -> [] end.
'un--findBindableNamesQuot'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V7 | [V8 | []]], fun (V9) -> ('un--findBindableNamesQuot'(V0, V1, V9)) end)) end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14, V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V14 | [V15 | []]], fun (V16) -> ('un--findBindableNamesQuot'(V0, V1, V16)) end)) end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ILet', E12, E13, E14, E15, E16, E17, E18} -> (fun (V17, V18, V19, V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V21 | [V22 | [V23 | []]]], fun (V24) -> ('un--findBindableNamesQuot'(V0, V1, V24)) end)) end(E12, E13, E14, E15, E16, E17, E18)); {'Idris.TTImp.TTImp.ICase', E19, E20, E21, E22} -> (fun (V25, V26, V27, V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V28, fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V26 | [V27 | []]], ('nested--6267-1044--in--un--getRawImp'(V28, V27, V26, V25, V1, V0, V29)))), fun (V30) -> ('un--findBindableNamesQuot'(V0, V1, V30)) end)) end)) end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.ILocal', E23, E24, E25} -> (fun (V31, V32, V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V32, fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V33 | ('un--rawImpFromDecl'(V34))], fun (V35) -> ('un--findBindableNamesQuot'(V0, V1, V35)) end)) end)) end(E23, E24, E25)); {'Idris.TTImp.TTImp.ICaseLocal', E26, E27, E28, E29, E30} -> (fun (V36, V37, V38, V39, V40) -> ('un--findBindableNamesQuot'(V0, V1, V40)) end(E26, E27, E28, E29, E30)); {'Idris.TTImp.TTImp.IApp', E31, E32, E33} -> (fun (V41, V42, V43) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V42 | [V43 | []]], fun (V44) -> ('un--findBindableNamesQuot'(V0, V1, V44)) end)) end(E31, E32, E33)); {'Idris.TTImp.TTImp.INamedApp', E34, E35, E36, E37} -> (fun (V45, V46, V47, V48) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V46 | [V48 | []]], fun (V49) -> ('un--findBindableNamesQuot'(V0, V1, V49)) end)) end(E34, E35, E36, E37)); {'Idris.TTImp.TTImp.IAutoApp', E38, E39, E40} -> (fun (V50, V51, V52) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V51 | [V52 | []]], fun (V53) -> ('un--findBindableNamesQuot'(V0, V1, V53)) end)) end(E38, E39, E40)); {'Idris.TTImp.TTImp.IWithApp', E41, E42, E43} -> (fun (V54, V55, V56) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V55 | [V56 | []]], fun (V57) -> ('un--findBindableNamesQuot'(V0, V1, V57)) end)) end(E41, E42, E43)); {'Idris.TTImp.TTImp.IRewrite', E44, E45, E46} -> (fun (V58, V59, V60) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V59 | [V60 | []]], fun (V61) -> ('un--findBindableNamesQuot'(V0, V1, V61)) end)) end(E44, E45, E46)); {'Idris.TTImp.TTImp.ICoerced', E47, E48} -> (fun (V62, V63) -> ('un--findBindableNamesQuot'(V0, V1, V63)) end(E47, E48)); {'Idris.TTImp.TTImp.IBindHere', E49, E50, E51} -> (fun (V64, V65, V66) -> ('un--findBindableNamesQuot'(V0, V1, V66)) end(E49, E50, E51)); {'Idris.TTImp.TTImp.IUpdate', E52, E53, E54} -> (fun (V67, V68, V69) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'([V69 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V70) -> ('nested--6267-1198--in--un--getRawImp'(V69, V68, V67, V1, V0, V70)) end, V68))], fun (V71) -> ('un--findBindableNamesQuot'(V0, V1, V71)) end)) end(E52, E53, E54)); {'Idris.TTImp.TTImp.IAs', E55, E56, E57, E58, E59} -> (fun (V72, V73, V74, V75, V76) -> ('un--findBindableNamesQuot'(V0, V1, V76)) end(E55, E56, E57, E58, E59)); {'Idris.TTImp.TTImp.IDelayed', E60, E61, E62} -> (fun (V77, V78, V79) -> ('un--findBindableNamesQuot'(V0, V1, V79)) end(E60, E61, E62)); {'Idris.TTImp.TTImp.IDelay', E63, E64} -> (fun (V80, V81) -> ('un--findBindableNamesQuot'(V0, V1, V81)) end(E63, E64)); {'Idris.TTImp.TTImp.IForce', E65, E66} -> (fun (V82, V83) -> ('un--findBindableNamesQuot'(V0, V1, V83)) end(E65, E66)); {'Idris.TTImp.TTImp.IUnquote', E67, E68} -> (fun (V84, V85) -> ('un--findBindableNames'(1, V0, V1, V85)) end(E67, E68)); {'Idris.TTImp.TTImp.IWithUnambigNames', E69, E70, E71} -> (fun (V86, V87, V88) -> ('un--findBindableNamesQuot'(V0, V1, V88)) end(E69, E70, E71)); {'Idris.TTImp.TTImp.IVar', E72, E73} -> (fun (V89, V90) -> [] end(E72, E73)); {'Idris.TTImp.TTImp.ISearch', E74, E75} -> (fun (V91, V92) -> [] end(E74, E75)); {'Idris.TTImp.TTImp.IAlternative', E76, E77, E78} -> (fun (V93, V94, V95) -> [] end(E76, E77, E78)); {'Idris.TTImp.TTImp.IBindVar', E79, E80} -> (fun (V96, V97) -> [] end(E79, E80)); {'Idris.TTImp.TTImp.IPrimVal', E81, E82} -> (fun (V98, V99) -> [] end(E81, E82)); {'Idris.TTImp.TTImp.IType', E83} -> (fun (V100) -> [] end(E83)); {'Idris.TTImp.TTImp.IHole', E84, E85} -> (fun (V101, V102) -> [] end(E84, E85)); {'Idris.TTImp.TTImp.Implicit', E86, E87} -> (fun (V103, V104) -> [] end(E86, E87)); {'Idris.TTImp.TTImp.IMustUnify', E88, E89, E90} -> (fun (V105, V106, V107) -> ('un--findBindableNamesQuot'(V0, V1, V107)) end(E88, E89, E90)); {'Idris.TTImp.TTImp.IUnifyLog', E91, E92, E93} -> (fun (V108, V109, V110) -> ('un--findBindableNamesQuot'(V0, V1, V110)) end(E91, E92, E93)); {'Idris.TTImp.TTImp.IQuote', E94, E95} -> (fun (V111, V112) -> [] end(E94, E95)); {'Idris.TTImp.TTImp.IQuoteName', E96, E97} -> (fun (V113, V114) -> [] end(E96, E97)); {'Idris.TTImp.TTImp.IQuoteDecl', E98, E99} -> (fun (V115, V116) -> [] end(E98, E99)); {'Idris.TTImp.TTImp.IRunElab', E100, E101} -> (fun (V117, V118) -> [] end(E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findBindableNames'(V0, V1, V2, V3) -> case V0 of 1 -> case V3 of {'Idris.TTImp.TTImp.IVar', E102, E103} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E155} -> (fun (V6) -> case V6 of {'Idris.Core.Name.Basic', E207} -> (fun (V7) -> begin (V8 = {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V7}}), case case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V8, V1)) of 1 -> 0; 0 -> ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> [{'Idris.Builtin.MkPair', V7, ('un--getUnique'(V2, V7))} | []]; 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E207)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E156, E157, E158, E159, E160, E161} -> (fun (V13, V14, V15, V16, V17, V18) -> begin (V20 = case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E162} -> (fun (V19) -> [V19 | V1] end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V17)), ('un--findBindableNames'(1, V20, V2, V18)))) end end(E156, E157, E158, E159, E160, E161)); {'Idris.TTImp.TTImp.ILam', E163, E164, E165, E166, E167, E168} -> (fun (V21, V22, V23, V24, V25, V26) -> begin (V28 = case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E169} -> (fun (V27) -> [V27 | V1] end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V25)), ('un--findBindableNames'(1, V28, V2, V26)))) end end(E163, E164, E165, E166, E167, E168)); {'Idris.TTImp.TTImp.IApp', E170, E171, E172} -> (fun (V29, V30, V31) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V30)), ('un--findBindableNames'(1, V1, V2, V31)))) end(E170, E171, E172)); {'Idris.TTImp.TTImp.INamedApp', E173, E174, E175, E176} -> (fun (V32, V33, V34, V35) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V33)), ('un--findBindableNames'(1, V1, V2, V35)))) end(E173, E174, E175, E176)); {'Idris.TTImp.TTImp.IAutoApp', E177, E178, E179} -> (fun (V36, V37, V38) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V37)), ('un--findBindableNames'(1, V1, V2, V38)))) end(E177, E178, E179)); {'Idris.TTImp.TTImp.IWithApp', E180, E181, E182} -> (fun (V39, V40, V41) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V40)), ('un--findBindableNames'(1, V1, V2, V41)))) end(E180, E181, E182)); {'Idris.TTImp.TTImp.IAs', E183, E184, E185, E186, E187} -> (fun (V42, V43, V44, V45, V46) -> case V45 of {'Idris.Core.Name.UN', E188} -> (fun (V47) -> case V47 of {'Idris.Core.Name.Basic', E189} -> (fun (V48) -> [{'Idris.Builtin.MkPair', V48, ('un--getUnique'(V2, V48))} | ('un--findBindableNames'(V0, V1, V2, V46))] end(E189)); _ -> ('un--findBindableNames'(V0, V1, V2, V46)) end end(E188)); _ -> ('un--findBindableNames'(V0, V1, V2, V46)) end end(E183, E184, E185, E186, E187)); {'Idris.TTImp.TTImp.IMustUnify', E190, E191, E192} -> (fun (V49, V50, V51) -> ('un--findBindableNames'(V0, V1, V2, V51)) end(E190, E191, E192)); {'Idris.TTImp.TTImp.IDelayed', E193, E194, E195} -> (fun (V52, V53, V54) -> ('un--findBindableNames'(V0, V1, V2, V54)) end(E193, E194, E195)); {'Idris.TTImp.TTImp.IDelay', E196, E197} -> (fun (V55, V56) -> ('un--findBindableNames'(V0, V1, V2, V56)) end(E196, E197)); {'Idris.TTImp.TTImp.IForce', E198, E199} -> (fun (V57, V58) -> ('un--findBindableNames'(V0, V1, V2, V58)) end(E198, E199)); {'Idris.TTImp.TTImp.IQuote', E200, E201} -> (fun (V59, V60) -> ('un--findBindableNamesQuot'(V1, V2, V60)) end(E200, E201)); {'Idris.TTImp.TTImp.IQuoteDecl', E202, E203} -> (fun (V61, V62) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V62, fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--rawImpFromDecl'(V63)), fun (V64) -> ('un--findBindableNamesQuot'(V1, V2, V64)) end)) end)) end(E202, E203)); {'Idris.TTImp.TTImp.IAlternative', E204, E205, E206} -> (fun (V65, V66, V67) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V79)) end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V83, V84, V85, V86)) end end end end end end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V88)) end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V91, V92, V93)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V94, V95)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V96) -> ('un--findBindableNames'(V0, V1, V2, V96)) end, V67)) end(E204, E205, E206)); _ -> [] end end end(E155)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E104, E105, E106, E107, E108, E109} -> (fun (V97, V98, V99, V100, V101, V102) -> begin (V104 = case V100 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E110} -> (fun (V103) -> [V103 | V1] end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V101)), ('un--findBindableNames'(1, V104, V2, V102)))) end end(E104, E105, E106, E107, E108, E109)); {'Idris.TTImp.TTImp.ILam', E111, E112, E113, E114, E115, E116} -> (fun (V105, V106, V107, V108, V109, V110) -> begin (V112 = case V108 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E117} -> (fun (V111) -> [V111 | V1] end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V109)), ('un--findBindableNames'(1, V112, V2, V110)))) end end(E111, E112, E113, E114, E115, E116)); {'Idris.TTImp.TTImp.IApp', E118, E119, E120} -> (fun (V113, V114, V115) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V114)), ('un--findBindableNames'(1, V1, V2, V115)))) end(E118, E119, E120)); {'Idris.TTImp.TTImp.INamedApp', E121, E122, E123, E124} -> (fun (V116, V117, V118, V119) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V117)), ('un--findBindableNames'(1, V1, V2, V119)))) end(E121, E122, E123, E124)); {'Idris.TTImp.TTImp.IAutoApp', E125, E126, E127} -> (fun (V120, V121, V122) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V121)), ('un--findBindableNames'(1, V1, V2, V122)))) end(E125, E126, E127)); {'Idris.TTImp.TTImp.IWithApp', E128, E129, E130} -> (fun (V123, V124, V125) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V124)), ('un--findBindableNames'(1, V1, V2, V125)))) end(E128, E129, E130)); {'Idris.TTImp.TTImp.IAs', E131, E132, E133, E134, E135} -> (fun (V126, V127, V128, V129, V130) -> case V129 of {'Idris.Core.Name.UN', E136} -> (fun (V131) -> case V131 of {'Idris.Core.Name.Basic', E137} -> (fun (V132) -> [{'Idris.Builtin.MkPair', V132, ('un--getUnique'(V2, V132))} | ('un--findBindableNames'(V0, V1, V2, V130))] end(E137)); _ -> ('un--findBindableNames'(V0, V1, V2, V130)) end end(E136)); _ -> ('un--findBindableNames'(V0, V1, V2, V130)) end end(E131, E132, E133, E134, E135)); {'Idris.TTImp.TTImp.IMustUnify', E138, E139, E140} -> (fun (V133, V134, V135) -> ('un--findBindableNames'(V0, V1, V2, V135)) end(E138, E139, E140)); {'Idris.TTImp.TTImp.IDelayed', E141, E142, E143} -> (fun (V136, V137, V138) -> ('un--findBindableNames'(V0, V1, V2, V138)) end(E141, E142, E143)); {'Idris.TTImp.TTImp.IDelay', E144, E145} -> (fun (V139, V140) -> ('un--findBindableNames'(V0, V1, V2, V140)) end(E144, E145)); {'Idris.TTImp.TTImp.IForce', E146, E147} -> (fun (V141, V142) -> ('un--findBindableNames'(V0, V1, V2, V142)) end(E146, E147)); {'Idris.TTImp.TTImp.IQuote', E148, E149} -> (fun (V143, V144) -> ('un--findBindableNamesQuot'(V1, V2, V144)) end(E148, E149)); {'Idris.TTImp.TTImp.IQuoteDecl', E150, E151} -> (fun (V145, V146) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V146, fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--rawImpFromDecl'(V147)), fun (V148) -> ('un--findBindableNamesQuot'(V1, V2, V148)) end)) end)) end(E150, E151)); {'Idris.TTImp.TTImp.IAlternative', E152, E153, E154} -> (fun (V149, V150, V151) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V154, V155, V156)) end end end end end, fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V163)) end end, fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V167, V168, V169, V170)) end end end end end end end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V172)) end end, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V175, V176, V177)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V178, V179)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V180) -> ('un--findBindableNames'(V0, V1, V2, V180)) end, V151)) end(E152, E153, E154)); _ -> [] end end end(E102, E103)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E51, E52, E53, E54, E55, E56} -> (fun (V181, V182, V183, V184, V185, V186) -> begin (V188 = case V184 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E57} -> (fun (V187) -> [V187 | V1] end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V185)), ('un--findBindableNames'(1, V188, V2, V186)))) end end(E51, E52, E53, E54, E55, E56)); {'Idris.TTImp.TTImp.ILam', E58, E59, E60, E61, E62, E63} -> (fun (V189, V190, V191, V192, V193, V194) -> begin (V196 = case V192 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E64} -> (fun (V195) -> [V195 | V1] end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V193)), ('un--findBindableNames'(1, V196, V2, V194)))) end end(E58, E59, E60, E61, E62, E63)); {'Idris.TTImp.TTImp.IApp', E65, E66, E67} -> (fun (V197, V198, V199) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V198)), ('un--findBindableNames'(1, V1, V2, V199)))) end(E65, E66, E67)); {'Idris.TTImp.TTImp.INamedApp', E68, E69, E70, E71} -> (fun (V200, V201, V202, V203) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V201)), ('un--findBindableNames'(1, V1, V2, V203)))) end(E68, E69, E70, E71)); {'Idris.TTImp.TTImp.IAutoApp', E72, E73, E74} -> (fun (V204, V205, V206) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V205)), ('un--findBindableNames'(1, V1, V2, V206)))) end(E72, E73, E74)); {'Idris.TTImp.TTImp.IWithApp', E75, E76, E77} -> (fun (V207, V208, V209) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V208)), ('un--findBindableNames'(1, V1, V2, V209)))) end(E75, E76, E77)); {'Idris.TTImp.TTImp.IAs', E78, E79, E80, E81, E82} -> (fun (V210, V211, V212, V213, V214) -> case V213 of {'Idris.Core.Name.UN', E83} -> (fun (V215) -> case V215 of {'Idris.Core.Name.Basic', E84} -> (fun (V216) -> [{'Idris.Builtin.MkPair', V216, ('un--getUnique'(V2, V216))} | ('un--findBindableNames'(V0, V1, V2, V214))] end(E84)); _ -> ('un--findBindableNames'(V0, V1, V2, V214)) end end(E83)); _ -> ('un--findBindableNames'(V0, V1, V2, V214)) end end(E78, E79, E80, E81, E82)); {'Idris.TTImp.TTImp.IMustUnify', E85, E86, E87} -> (fun (V217, V218, V219) -> ('un--findBindableNames'(V0, V1, V2, V219)) end(E85, E86, E87)); {'Idris.TTImp.TTImp.IDelayed', E88, E89, E90} -> (fun (V220, V221, V222) -> ('un--findBindableNames'(V0, V1, V2, V222)) end(E88, E89, E90)); {'Idris.TTImp.TTImp.IDelay', E91, E92} -> (fun (V223, V224) -> ('un--findBindableNames'(V0, V1, V2, V224)) end(E91, E92)); {'Idris.TTImp.TTImp.IForce', E93, E94} -> (fun (V225, V226) -> ('un--findBindableNames'(V0, V1, V2, V226)) end(E93, E94)); {'Idris.TTImp.TTImp.IQuote', E95, E96} -> (fun (V227, V228) -> ('un--findBindableNamesQuot'(V1, V2, V228)) end(E95, E96)); {'Idris.TTImp.TTImp.IQuoteDecl', E97, E98} -> (fun (V229, V230) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V230, fun (V231) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--rawImpFromDecl'(V231)), fun (V232) -> ('un--findBindableNamesQuot'(V1, V2, V232)) end)) end)) end(E97, E98)); {'Idris.TTImp.TTImp.IAlternative', E99, E100, E101} -> (fun (V233, V234, V235) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V238, V239, V240)) end end end end end, fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V243, V244, V245)) end end end end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V247)) end end, fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V251, V252, V253, V254)) end end end end end end end, fun (V255) -> fun (V256) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V256)) end end, fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V259, V260, V261)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V262, V263)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V264) -> ('un--findBindableNames'(V0, V1, V2, V264)) end, V235)) end(E99, E100, E101)); _ -> [] end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V265, V266, V267, V268, V269, V270) -> begin (V272 = case V268 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V271) -> [V271 | V1] end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V269)), ('un--findBindableNames'(1, V272, V2, V270)))) end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E7, E8, E9, E10, E11, E12} -> (fun (V273, V274, V275, V276, V277, V278) -> begin (V280 = case V276 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E13} -> (fun (V279) -> [V279 | V1] end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(1, V1, V2, V277)), ('un--findBindableNames'(1, V280, V2, V278)))) end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.IApp', E14, E15, E16} -> (fun (V281, V282, V283) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V282)), ('un--findBindableNames'(1, V1, V2, V283)))) end(E14, E15, E16)); {'Idris.TTImp.TTImp.INamedApp', E17, E18, E19, E20} -> (fun (V284, V285, V286, V287) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V285)), ('un--findBindableNames'(1, V1, V2, V287)))) end(E17, E18, E19, E20)); {'Idris.TTImp.TTImp.IAutoApp', E21, E22, E23} -> (fun (V288, V289, V290) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V289)), ('un--findBindableNames'(1, V1, V2, V290)))) end(E21, E22, E23)); {'Idris.TTImp.TTImp.IWithApp', E24, E25, E26} -> (fun (V291, V292, V293) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findBindableNames'(0, V1, V2, V292)), ('un--findBindableNames'(1, V1, V2, V293)))) end(E24, E25, E26)); {'Idris.TTImp.TTImp.IAs', E27, E28, E29, E30, E31} -> (fun (V294, V295, V296, V297, V298) -> case V297 of {'Idris.Core.Name.UN', E32} -> (fun (V299) -> case V299 of {'Idris.Core.Name.Basic', E33} -> (fun (V300) -> [{'Idris.Builtin.MkPair', V300, ('un--getUnique'(V2, V300))} | ('un--findBindableNames'(V0, V1, V2, V298))] end(E33)); _ -> ('un--findBindableNames'(V0, V1, V2, V298)) end end(E32)); _ -> ('un--findBindableNames'(V0, V1, V2, V298)) end end(E27, E28, E29, E30, E31)); {'Idris.TTImp.TTImp.IMustUnify', E34, E35, E36} -> (fun (V301, V302, V303) -> ('un--findBindableNames'(V0, V1, V2, V303)) end(E34, E35, E36)); {'Idris.TTImp.TTImp.IDelayed', E37, E38, E39} -> (fun (V304, V305, V306) -> ('un--findBindableNames'(V0, V1, V2, V306)) end(E37, E38, E39)); {'Idris.TTImp.TTImp.IDelay', E40, E41} -> (fun (V307, V308) -> ('un--findBindableNames'(V0, V1, V2, V308)) end(E40, E41)); {'Idris.TTImp.TTImp.IForce', E42, E43} -> (fun (V309, V310) -> ('un--findBindableNames'(V0, V1, V2, V310)) end(E42, E43)); {'Idris.TTImp.TTImp.IQuote', E44, E45} -> (fun (V311, V312) -> ('un--findBindableNamesQuot'(V1, V2, V312)) end(E44, E45)); {'Idris.TTImp.TTImp.IQuoteDecl', E46, E47} -> (fun (V313, V314) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V314, fun (V315) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--rawImpFromDecl'(V315)), fun (V316) -> ('un--findBindableNamesQuot'(V1, V2, V316)) end)) end)) end(E46, E47)); {'Idris.TTImp.TTImp.IAlternative', E48, E49, E50} -> (fun (V317, V318, V319) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V320) -> fun (V321) -> fun (V322) -> fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V322, V323, V324)) end end end end end, fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V327, V328, V329)) end end end end end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V331)) end end, fun (V332) -> fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> fun (V338) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V335, V336, V337, V338)) end end end end end end end, fun (V339) -> fun (V340) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V340)) end end, fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> fun (V345) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V343, V344, V345)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V346) -> fun (V347) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V346, V347)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V348) -> ('un--findBindableNames'(V0, V1, V2, V348)) end, V319)) end(E48, E49, E50)); _ -> [] end end.
'un--findAllNames'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V3, V0)) of 1 -> []; 0 -> [V3 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12, V13) -> begin (V15 = case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V14) -> [V14 | V0] end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V12)), ('un--findAllNames'(V15, V13)))) end end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E9, E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20, V21) -> begin (V23 = case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E15} -> (fun (V22) -> [V22 | V0] end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V23, V20)), ('un--findAllNames'(V23, V21)))) end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.IApp', E16, E17, E18} -> (fun (V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V25)), ('un--findAllNames'(V0, V26)))) end(E16, E17, E18)); {'Idris.TTImp.TTImp.INamedApp', E19, E20, E21, E22} -> (fun (V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V28)), ('un--findAllNames'(V0, V30)))) end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.IAutoApp', E23, E24, E25} -> (fun (V31, V32, V33) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V32)), ('un--findAllNames'(V0, V33)))) end(E23, E24, E25)); {'Idris.TTImp.TTImp.IWithApp', E26, E27, E28} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findAllNames'(V0, V35)), ('un--findAllNames'(V0, V36)))) end(E26, E27, E28)); {'Idris.TTImp.TTImp.IAs', E29, E30, E31, E32, E33} -> (fun (V37, V38, V39, V40, V41) -> [V40 | ('un--findAllNames'(V0, V41))] end(E29, E30, E31, E32, E33)); {'Idris.TTImp.TTImp.IMustUnify', E34, E35, E36} -> (fun (V42, V43, V44) -> ('un--findAllNames'(V0, V44)) end(E34, E35, E36)); {'Idris.TTImp.TTImp.IDelayed', E37, E38, E39} -> (fun (V45, V46, V47) -> ('un--findAllNames'(V0, V47)) end(E37, E38, E39)); {'Idris.TTImp.TTImp.IDelay', E40, E41} -> (fun (V48, V49) -> ('un--findAllNames'(V0, V49)) end(E40, E41)); {'Idris.TTImp.TTImp.IForce', E42, E43} -> (fun (V50, V51) -> ('un--findAllNames'(V0, V51)) end(E42, E43)); {'Idris.TTImp.TTImp.IQuote', E44, E45} -> (fun (V52, V53) -> ('un--findAllNames'(V0, V53)) end(E44, E45)); {'Idris.TTImp.TTImp.IUnquote', E46, E47} -> (fun (V54, V55) -> ('un--findAllNames'(V0, V55)) end(E46, E47)); {'Idris.TTImp.TTImp.IAlternative', E48, E49, E50} -> (fun (V56, V57, V58) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V74, V75, V76, V77)) end end end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V79)) end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V82, V83, V84)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V85, V86)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V87) -> ('un--findAllNames'(V0, V87)) end, V58)) end(E48, E49, E50)); _ -> [] end.
