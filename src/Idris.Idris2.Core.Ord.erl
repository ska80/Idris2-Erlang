-module('Idris.Idris2.Core.Ord').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7049-3541--in--un--tag'/3,
  'nested--5619-1799--in--un--tag'/3,
  'nested--4474-742--in--un--tag'/3,
  'dn--un--min_Ord_LazyReason'/2,
  'dn--un--min_Ord_Constant'/2,
  'dn--un--min_Ord_(Var $vars)'/2,
  'dn--un--min_Ord_(CExp $vars)'/2,
  'dn--un--min_Ord_(CConstAlt $vars)'/2,
  'dn--un--min_Ord_(CConAlt $vars)'/2,
  'dn--un--max_Ord_LazyReason'/2,
  'dn--un--max_Ord_Constant'/2,
  'dn--un--max_Ord_(Var $vars)'/2,
  'dn--un--max_Ord_(CExp $vars)'/2,
  'dn--un--max_Ord_(CConstAlt $vars)'/2,
  'dn--un--max_Ord_(CConAlt $vars)'/2,
  'dn--un--compare_Ord_LazyReason'/2,
  'dn--un--compare_Ord_Constant'/2,
  'dn--un--compare_Ord_(Var $vars)'/2,
  'dn--un--compare_Ord_(CExp $vars)'/2,
  'dn--un--compare_Ord_(CConstAlt $vars)'/2,
  'dn--un--compare_Ord_(CConAlt $vars)'/2,
  'dn--un--__Impl_Ord_LazyReason'/0,
  'dn--un--__Impl_Ord_Constant'/0,
  'dn--un--__Impl_Ord_(Var $vars)'/0,
  'dn--un--__Impl_Ord_(CExp $vars)'/0,
  'dn--un--__Impl_Ord_(CConstAlt $vars)'/0,
  'dn--un--__Impl_Ord_(CConAlt $vars)'/0,
  'dn--un--__Impl_Eq_(Var $vars)'/0,
  'dn--un--__Impl_Eq_(CExp $vars)'/0,
  'dn--un--__Impl_Eq_(CConstAlt $vars)'/0,
  'dn--un--__Impl_Eq_(CConAlt $vars)'/0,
  'dn--un-->_Ord_LazyReason'/2,
  'dn--un-->_Ord_Constant'/2,
  'dn--un-->_Ord_(Var $vars)'/2,
  'dn--un-->_Ord_(CExp $vars)'/2,
  'dn--un-->_Ord_(CConstAlt $vars)'/2,
  'dn--un-->_Ord_(CConAlt $vars)'/2,
  'dn--un-->=_Ord_LazyReason'/2,
  'dn--un-->=_Ord_Constant'/2,
  'dn--un-->=_Ord_(Var $vars)'/2,
  'dn--un-->=_Ord_(CExp $vars)'/2,
  'dn--un-->=_Ord_(CConstAlt $vars)'/2,
  'dn--un-->=_Ord_(CConAlt $vars)'/2,
  'dn--un--==_Eq_(Var $vars)'/2,
  'dn--un--==_Eq_(CExp $vars)'/2,
  'dn--un--==_Eq_(CConstAlt $vars)'/2,
  'dn--un--==_Eq_(CConAlt $vars)'/2,
  'dn--un--<_Ord_LazyReason'/2,
  'dn--un--<_Ord_Constant'/2,
  'dn--un--<_Ord_(Var $vars)'/2,
  'dn--un--<_Ord_(CExp $vars)'/2,
  'dn--un--<_Ord_(CConstAlt $vars)'/2,
  'dn--un--<_Ord_(CConAlt $vars)'/2,
  'dn--un--<=_Ord_LazyReason'/2,
  'dn--un--<=_Ord_Constant'/2,
  'dn--un--<=_Ord_(Var $vars)'/2,
  'dn--un--<=_Ord_(CExp $vars)'/2,
  'dn--un--<=_Ord_(CConstAlt $vars)'/2,
  'dn--un--<=_Ord_(CConAlt $vars)'/2,
  'dn--un--/=_Eq_(Var $vars)'/2,
  'dn--un--/=_Eq_(CExp $vars)'/2,
  'dn--un--/=_Eq_(CConstAlt $vars)'/2,
  'dn--un--/=_Eq_(CConAlt $vars)'/2,
  'un--thenCmp'/2,
  'un--primFnEq'/2,
  'un--primFnCmp'/2,
  'un--lrTag'/1
]).
'nested--7049-3541--in--un--tag'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V3, V4) -> 0 end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V5, V6) -> 1 end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V7, V8, V9) -> 2 end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14) -> 3 end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V15, V16, V17) -> 4 end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V18, V19, V20, V21, V22) -> 5 end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V23, V24, V25, V26) -> 6 end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V27, V28, V29) -> 7 end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V30, V31, V32) -> 8 end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V33, V34, V35) -> 9 end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V36, V37, V38, V39) -> 10 end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V40, V41, V42, V43) -> 11 end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V44, V45) -> 12 end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V46) -> 13 end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V47, V48) -> 14 end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5619-1799--in--un--tag'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Add', E0} -> (fun (V3) -> 0 end(E0)); {'Idris.Core.TT.Sub', E1} -> (fun (V4) -> 1 end(E1)); {'Idris.Core.TT.Mul', E2} -> (fun (V5) -> 2 end(E2)); {'Idris.Core.TT.Div', E3} -> (fun (V6) -> 3 end(E3)); {'Idris.Core.TT.Mod', E4} -> (fun (V7) -> 4 end(E4)); {'Idris.Core.TT.Neg', E5} -> (fun (V8) -> 5 end(E5)); {'Idris.Core.TT.ShiftL', E6} -> (fun (V9) -> 6 end(E6)); {'Idris.Core.TT.ShiftR', E7} -> (fun (V10) -> 7 end(E7)); {'Idris.Core.TT.BAnd', E8} -> (fun (V11) -> 8 end(E8)); {'Idris.Core.TT.BOr', E9} -> (fun (V12) -> 9 end(E9)); {'Idris.Core.TT.BXOr', E10} -> (fun (V13) -> 10 end(E10)); {'Idris.Core.TT.LT', E11} -> (fun (V14) -> 11 end(E11)); {'Idris.Core.TT.LTE', E12} -> (fun (V15) -> 12 end(E12)); {'Idris.Core.TT.EQ', E13} -> (fun (V16) -> 13 end(E13)); {'Idris.Core.TT.GTE', E14} -> (fun (V17) -> 14 end(E14)); {'Idris.Core.TT.GT', E15} -> (fun (V18) -> 15 end(E15)); {'Idris.Core.TT.StrLength'} -> (fun () -> 16 end()); {'Idris.Core.TT.StrHead'} -> (fun () -> 17 end()); {'Idris.Core.TT.StrTail'} -> (fun () -> 18 end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> 19 end()); {'Idris.Core.TT.StrCons'} -> (fun () -> 20 end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> 21 end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> 22 end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> 23 end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> 24 end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> 25 end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> 26 end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> 27 end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> 28 end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> 29 end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> 30 end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> 31 end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> 32 end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> 33 end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> 34 end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> 35 end()); {'Idris.Core.TT.Cast', E16, E17} -> (fun (V19, V20) -> 36 end(E16, E17)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> 37 end()); {'Idris.Core.TT.Crash'} -> (fun () -> 38 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4474-742--in--un--tag'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.I', E0} -> (fun (V3) -> 0 end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V4) -> 1 end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V5) -> 2 end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V6) -> 3 end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V7) -> 4 end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V8) -> 5 end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V9) -> 6 end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V10) -> 7 end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V11) -> 8 end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V12) -> 9 end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V13) -> 10 end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V14) -> 11 end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V15) -> 12 end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> 13 end()); {'Idris.Core.TT.IntType'} -> (fun () -> 14 end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> 15 end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> 16 end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> 17 end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> 18 end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> 19 end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> 20 end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> 21 end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> 22 end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> 23 end()); {'Idris.Core.TT.StringType'} -> (fun () -> 24 end()); {'Idris.Core.TT.CharType'} -> (fun () -> 25 end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> 26 end()); {'Idris.Core.TT.WorldType'} -> (fun () -> 27 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_LazyReason'(V0, V1) -> case ('dn--un--<_Ord_LazyReason'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_Constant'(V0, V1) -> case ('dn--un--<_Ord_Constant'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(Var $vars)'(V0, V1) -> case ('dn--un--<_Ord_(Var $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(CExp $vars)'(V0, V1) -> case ('dn--un--<_Ord_(CExp $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(CConstAlt $vars)'(V0, V1) -> case ('dn--un--<_Ord_(CConstAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(CConAlt $vars)'(V0, V1) -> case ('dn--un--<_Ord_(CConAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_LazyReason'(V0, V1) -> case ('dn--un-->_Ord_LazyReason'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_Constant'(V0, V1) -> case ('dn--un-->_Ord_Constant'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_(Var $vars)'(V0, V1) -> case ('dn--un-->_Ord_(Var $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_(CExp $vars)'(V0, V1) -> case ('dn--un-->_Ord_(CExp $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_(CConstAlt $vars)'(V0, V1) -> case ('dn--un-->_Ord_(CConstAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_(CConAlt $vars)'(V0, V1) -> case ('dn--un-->_Ord_(CConAlt $vars)'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--lrTag'(V0)), ('un--lrTag'(V1)))).
'dn--un--compare_Ord_Constant'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V2, V3)) end(E1)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V4, V5)) end(E3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V6, V7)) end(E5)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V8, V9)) end(E7)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V10, V11)) end(E9)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V12, V13)) end(E11)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V14, V15)) end(E13)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V16, V17)) end(E15)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V18, V19)) end(E17)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V20, V21)) end(E19)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E18)); {'Idris.Core.TT.Str', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Str', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V22, V23)) end(E21)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E20)); {'Idris.Core.TT.Ch', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Ch', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Char'(V24, V25)) end(E23)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E22)); {'Idris.Core.TT.Db', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Db', E25} -> (fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Double'(V26, V27)) end(E25)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end end(E24)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--4474-742--in--un--tag'(V1, V0, V0)), ('nested--4474-742--in--un--tag'(V1, V0, V1)))) end.
'dn--un--compare_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_Nat'(V0, V1)).
'dn--un--compare_Ord_(CExp $vars)'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.CompileExpr.CLocal', E2, E3} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_Nat'(V2, V4)) end(E2, E3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E4, E5} -> (fun (V6, V7) -> case V1 of {'Idris.Core.CompileExpr.CRef', E6, E7} -> (fun (V8, V9) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V7, V9)) end(E6, E7)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E4, E5)); {'Idris.Core.CompileExpr.CLam', E8, E9, E10} -> (fun (V10, V11, V12) -> case V1 of {'Idris.Core.CompileExpr.CLam', E11, E12, E13} -> (fun (V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V11, V14)) of {'Idris.Prelude.Types.Just', E14} -> (fun (V16) -> case V16 of 0 -> ('dn--un--compare_Ord_(CExp $vars)'(V12, V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V11, V14)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E8, E9, E10)); {'Idris.Core.CompileExpr.CLet', E15, E16, E17, E18, E19} -> (fun (V17, V18, V19, V20, V21) -> case V1 of {'Idris.Core.CompileExpr.CLet', E20, E21, E22, E23, E24} -> (fun (V22, V23, V24, V25, V26) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V18, V23)) of {'Idris.Prelude.Types.Just', E25} -> (fun (V27) -> case V27 of 0 -> ('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V20, V25)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V21, V26)) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V18, V23)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22, E23, E24)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.CApp', E26, E27, E28} -> (fun (V28, V29, V30) -> case V1 of {'Idris.Core.CompileExpr.CApp', E29, E30, E31} -> (fun (V31, V32, V33) -> ('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V29, V32)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('dn--un--==_Eq_(CExp $vars)'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('dn--un--/=_Eq_(CExp $vars)'(V36, V37)) end end}, fun (V38) -> fun (V39) -> ('dn--un--compare_Ord_(CExp $vars)'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('dn--un--<_Ord_(CExp $vars)'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('dn--un-->_Ord_(CExp $vars)'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('dn--un--<=_Ord_(CExp $vars)'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('dn--un-->=_Ord_(CExp $vars)'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--max_Ord_(CExp $vars)'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('dn--un--min_Ord_(CExp $vars)'(V50, V51)) end end}, V30, V33)) end)) end(E29, E30, E31)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E26, E27, E28)); {'Idris.Core.CompileExpr.CCon', E32, E33, E34, E35, E36} -> (fun (V52, V53, V54, V55, V56) -> case V1 of {'Idris.Core.CompileExpr.CCon', E37, E38, E39, E40, E41} -> (fun (V57, V58, V59, V60, V61) -> ('un--thenCmp'(('un--thenCmp'(('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V64, V65)) end end}, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V78, V79)) end end}, V55, V60)), fun () -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V53, V58)) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V80) -> fun (V81) -> ('dn--un--==_Eq_(CExp $vars)'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('dn--un--/=_Eq_(CExp $vars)'(V82, V83)) end end}, fun (V84) -> fun (V85) -> ('dn--un--compare_Ord_(CExp $vars)'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('dn--un--<_Ord_(CExp $vars)'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('dn--un-->_Ord_(CExp $vars)'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('dn--un--<=_Ord_(CExp $vars)'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('dn--un-->=_Ord_(CExp $vars)'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('dn--un--max_Ord_(CExp $vars)'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('dn--un--min_Ord_(CExp $vars)'(V96, V97)) end end}, V56, V61)) end)) end(E37, E38, E39, E40, E41)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E32, E33, E34, E35, E36)); {'Idris.Core.CompileExpr.COp', E42, E43, E44, E45} -> (fun (V98, V99, V100, V101) -> case V1 of {'Idris.Core.CompileExpr.COp', E46, E47, E48, E49} -> (fun (V102, V103, V104, V105) -> case ('un--primFnEq'(V100, V104)) of {'Idris.Prelude.Types.Just', E50} -> (fun (V106) -> case V106 of 0 -> ('Idris.Idris2.Data.Vect':'dn--un--compare_Ord_((Vect $len) $elem)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V107) -> fun (V108) -> ('dn--un--==_Eq_(CExp $vars)'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('dn--un--/=_Eq_(CExp $vars)'(V109, V110)) end end}, fun (V111) -> fun (V112) -> ('dn--un--compare_Ord_(CExp $vars)'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('dn--un--<_Ord_(CExp $vars)'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('dn--un-->_Ord_(CExp $vars)'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('dn--un--<=_Ord_(CExp $vars)'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('dn--un-->=_Ord_(CExp $vars)'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('dn--un--max_Ord_(CExp $vars)'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('dn--un--min_Ord_(CExp $vars)'(V123, V124)) end end}, V101, V105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--primFnCmp'(V100, V104)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47, E48, E49)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E42, E43, E44, E45)); {'Idris.Core.CompileExpr.CExtPrim', E51, E52, E53} -> (fun (V125, V126, V127) -> case V1 of {'Idris.Core.CompileExpr.CExtPrim', E54, E55, E56} -> (fun (V128, V129, V130) -> ('un--thenCmp'(('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V126, V129)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V131) -> fun (V132) -> ('dn--un--==_Eq_(CExp $vars)'(V131, V132)) end end, fun (V133) -> fun (V134) -> ('dn--un--/=_Eq_(CExp $vars)'(V133, V134)) end end}, fun (V135) -> fun (V136) -> ('dn--un--compare_Ord_(CExp $vars)'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('dn--un--<_Ord_(CExp $vars)'(V137, V138)) end end, fun (V139) -> fun (V140) -> ('dn--un-->_Ord_(CExp $vars)'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('dn--un--<=_Ord_(CExp $vars)'(V141, V142)) end end, fun (V143) -> fun (V144) -> ('dn--un-->=_Ord_(CExp $vars)'(V143, V144)) end end, fun (V145) -> fun (V146) -> ('dn--un--max_Ord_(CExp $vars)'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('dn--un--min_Ord_(CExp $vars)'(V147, V148)) end end}, V127, V130)) end)) end(E54, E55, E56)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E51, E52, E53)); {'Idris.Core.CompileExpr.CForce', E57, E58, E59} -> (fun (V149, V150, V151) -> case V1 of {'Idris.Core.CompileExpr.CForce', E60, E61, E62} -> (fun (V152, V153, V154) -> ('un--thenCmp'(('dn--un--compare_Ord_LazyReason'(V150, V153)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V151, V154)) end)) end(E60, E61, E62)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E57, E58, E59)); {'Idris.Core.CompileExpr.CDelay', E63, E64, E65} -> (fun (V155, V156, V157) -> case V1 of {'Idris.Core.CompileExpr.CDelay', E66, E67, E68} -> (fun (V158, V159, V160) -> ('un--thenCmp'(('dn--un--compare_Ord_LazyReason'(V156, V159)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V157, V160)) end)) end(E66, E67, E68)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E63, E64, E65)); {'Idris.Core.CompileExpr.CConCase', E69, E70, E71, E72} -> (fun (V161, V162, V163, V164) -> case V1 of {'Idris.Core.CompileExpr.CConCase', E73, E74, E75, E76} -> (fun (V165, V166, V167, V168) -> ('un--thenCmp'(('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V162, V166)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V169) -> fun (V170) -> ('dn--un--==_Eq_(CConAlt $vars)'(V169, V170)) end end, fun (V171) -> fun (V172) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V171, V172)) end end}, fun (V173) -> fun (V174) -> ('dn--un--compare_Ord_(CConAlt $vars)'(V173, V174)) end end, fun (V175) -> fun (V176) -> ('dn--un--<_Ord_(CConAlt $vars)'(V175, V176)) end end, fun (V177) -> fun (V178) -> ('dn--un-->_Ord_(CConAlt $vars)'(V177, V178)) end end, fun (V179) -> fun (V180) -> ('dn--un--<=_Ord_(CConAlt $vars)'(V179, V180)) end end, fun (V181) -> fun (V182) -> ('dn--un-->=_Ord_(CConAlt $vars)'(V181, V182)) end end, fun (V183) -> fun (V184) -> ('dn--un--max_Ord_(CConAlt $vars)'(V183, V184)) end end, fun (V185) -> fun (V186) -> ('dn--un--min_Ord_(CConAlt $vars)'(V185, V186)) end end}, V163, V167)) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V187) -> fun (V188) -> ('dn--un--==_Eq_(CExp $vars)'(V187, V188)) end end, fun (V189) -> fun (V190) -> ('dn--un--/=_Eq_(CExp $vars)'(V189, V190)) end end}, fun (V191) -> fun (V192) -> ('dn--un--compare_Ord_(CExp $vars)'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('dn--un--<_Ord_(CExp $vars)'(V193, V194)) end end, fun (V195) -> fun (V196) -> ('dn--un-->_Ord_(CExp $vars)'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('dn--un--<=_Ord_(CExp $vars)'(V197, V198)) end end, fun (V199) -> fun (V200) -> ('dn--un-->=_Ord_(CExp $vars)'(V199, V200)) end end, fun (V201) -> fun (V202) -> ('dn--un--max_Ord_(CExp $vars)'(V201, V202)) end end, fun (V203) -> fun (V204) -> ('dn--un--min_Ord_(CExp $vars)'(V203, V204)) end end}, V164, V168)) end)) end(E73, E74, E75, E76)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E69, E70, E71, E72)); {'Idris.Core.CompileExpr.CConstCase', E77, E78, E79, E80} -> (fun (V205, V206, V207, V208) -> case V1 of {'Idris.Core.CompileExpr.CConstCase', E81, E82, E83, E84} -> (fun (V209, V210, V211, V212) -> ('un--thenCmp'(('un--thenCmp'(('dn--un--compare_Ord_(CExp $vars)'(V206, V210)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V213) -> fun (V214) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V213, V214)) end end, fun (V215) -> fun (V216) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V215, V216)) end end}, fun (V217) -> fun (V218) -> ('dn--un--compare_Ord_(CConstAlt $vars)'(V217, V218)) end end, fun (V219) -> fun (V220) -> ('dn--un--<_Ord_(CConstAlt $vars)'(V219, V220)) end end, fun (V221) -> fun (V222) -> ('dn--un-->_Ord_(CConstAlt $vars)'(V221, V222)) end end, fun (V223) -> fun (V224) -> ('dn--un--<=_Ord_(CConstAlt $vars)'(V223, V224)) end end, fun (V225) -> fun (V226) -> ('dn--un-->=_Ord_(CConstAlt $vars)'(V225, V226)) end end, fun (V227) -> fun (V228) -> ('dn--un--max_Ord_(CConstAlt $vars)'(V227, V228)) end end, fun (V229) -> fun (V230) -> ('dn--un--min_Ord_(CConstAlt $vars)'(V229, V230)) end end}, V207, V211)) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V231) -> fun (V232) -> ('dn--un--==_Eq_(CExp $vars)'(V231, V232)) end end, fun (V233) -> fun (V234) -> ('dn--un--/=_Eq_(CExp $vars)'(V233, V234)) end end}, fun (V235) -> fun (V236) -> ('dn--un--compare_Ord_(CExp $vars)'(V235, V236)) end end, fun (V237) -> fun (V238) -> ('dn--un--<_Ord_(CExp $vars)'(V237, V238)) end end, fun (V239) -> fun (V240) -> ('dn--un-->_Ord_(CExp $vars)'(V239, V240)) end end, fun (V241) -> fun (V242) -> ('dn--un--<=_Ord_(CExp $vars)'(V241, V242)) end end, fun (V243) -> fun (V244) -> ('dn--un-->=_Ord_(CExp $vars)'(V243, V244)) end end, fun (V245) -> fun (V246) -> ('dn--un--max_Ord_(CExp $vars)'(V245, V246)) end end, fun (V247) -> fun (V248) -> ('dn--un--min_Ord_(CExp $vars)'(V247, V248)) end end}, V208, V212)) end)) end(E81, E82, E83, E84)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E77, E78, E79, E80)); {'Idris.Core.CompileExpr.CPrimVal', E85, E86} -> (fun (V249, V250) -> case V1 of {'Idris.Core.CompileExpr.CPrimVal', E87, E88} -> (fun (V251, V252) -> ('dn--un--compare_Ord_Constant'(V250, V252)) end(E87, E88)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E85, E86)); {'Idris.Core.CompileExpr.CErased', E89} -> (fun (V253) -> case V1 of {'Idris.Core.CompileExpr.CErased', E90} -> (fun (V254) -> 1 end(E90)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E89)); {'Idris.Core.CompileExpr.CCrash', E91, E92} -> (fun (V255, V256) -> case V1 of {'Idris.Core.CompileExpr.CCrash', E93, E94} -> (fun (V257, V258) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V256, V258)) end(E93, E94)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end end(E91, E92)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7049-3541--in--un--tag'(V1, V0, V0)), ('nested--7049-3541--in--un--tag'(V1, V0, V1)))) end.
'dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E2, E3} -> (fun (V4, V5) -> ('un--thenCmp'(('dn--un--compare_Ord_Constant'(V2, V4)), fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V3, V5)) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_(CConAlt $vars)'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E5, E6, E7, E8, E9} -> (fun (V7, V8, V9, V10, V11) -> ('un--thenCmp'(('un--thenCmp'(('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V28, V29)) end end}, V4, V9)), fun () -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V2, V7)) end)), case ('Idris.Idris2.Core.Name':'un--namesEq'(V5, V10)) of {'Idris.Prelude.Types.Just', E10} -> (fun (V30) -> case V30 of 0 -> fun () -> ('dn--un--compare_Ord_(CExp $vars)'(V6, V11)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(List $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V33, V34)) end end}, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V47, V48)) end end}, V5, V10)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Ord_LazyReason'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_LazyReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_LazyReason'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_LazyReason'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_LazyReason'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_LazyReason'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_LazyReason'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_LazyReason'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_LazyReason'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_LazyReason'(V16, V17)) end end}.
'dn--un--__Impl_Ord_Constant'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Constant'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Constant'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Constant'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Constant'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Constant'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Constant'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Constant'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(Var $vars)'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(Var $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(Var $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(Var $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(Var $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(Var $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(Var $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(Var $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(Var $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(Var $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(CExp $vars)'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CExp $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CExp $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(CExp $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(CExp $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(CExp $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(CExp $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(CExp $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(CExp $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(CExp $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(CConstAlt $vars)'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(CConstAlt $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(CConstAlt $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(CConstAlt $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(CConstAlt $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(CConstAlt $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(CConstAlt $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(CConstAlt $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(CConAlt $vars)'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_(CConAlt $vars)'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_(CConAlt $vars)'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_(CConAlt $vars)'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_(CConAlt $vars)'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_(CConAlt $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_(CConAlt $vars)'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_(CConAlt $vars)'(V16, V17)) end end}.
'dn--un--__Impl_Eq_(Var $vars)'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(Var $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(Var $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(CExp $vars)'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CExp $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CExp $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(CConstAlt $vars)'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(CConAlt $vars)'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_(CConAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V2, V3)) end end}.
'dn--un-->_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 2)).
'dn--un-->_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 2)).
'dn--un-->_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 2)).
'dn--un-->_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 2)).
'dn--un-->_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 2)).
'dn--un-->_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 2)).
'dn--un-->=_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 0)).
'dn--un-->=_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 0)).
'dn--un-->=_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 0)).
'dn--un-->=_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 0)).
'dn--un-->=_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 0)).
'dn--un-->=_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 0)).
'dn--un--==_Eq_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V1)).
'dn--un--==_Eq_(CExp $vars)'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.CompileExpr.CLocal', E2, E3} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V2, V4)) end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E4, E5} -> (fun (V6, V7) -> case V1 of {'Idris.Core.CompileExpr.CRef', E6, E7} -> (fun (V8, V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V9)) end(E6, E7)); _ -> 0 end end(E4, E5)); {'Idris.Core.CompileExpr.CLam', E8, E9, E10} -> (fun (V10, V11, V12) -> case V1 of {'Idris.Core.CompileExpr.CLam', E11, E12, E13} -> (fun (V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V11, V14)) of {'Idris.Prelude.Types.Just', E14} -> (fun (V16) -> case V16 of 0 -> ('dn--un--==_Eq_(CExp $vars)'(V12, V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); _ -> 0 end end(E8, E9, E10)); {'Idris.Core.CompileExpr.CLet', E15, E16, E17, E18, E19} -> (fun (V17, V18, V19, V20, V21) -> case V1 of {'Idris.Core.CompileExpr.CLet', E20, E21, E22, E23, E24} -> (fun (V22, V23, V24, V25, V26) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V18, V23)) of {'Idris.Prelude.Types.Just', E25} -> (fun (V27) -> case V27 of 0 -> case ('dn--un--==_Eq_(CExp $vars)'(V20, V25)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V21, V26)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22, E23, E24)); _ -> 0 end end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.CApp', E26, E27, E28} -> (fun (V28, V29, V30) -> case V1 of {'Idris.Core.CompileExpr.CApp', E29, E30, E31} -> (fun (V31, V32, V33) -> case ('dn--un--==_Eq_(CExp $vars)'(V29, V32)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('dn--un--==_Eq_(CExp $vars)'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('dn--un--/=_Eq_(CExp $vars)'(V36, V37)) end end}, V30, V33)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31)); _ -> 0 end end(E26, E27, E28)); {'Idris.Core.CompileExpr.CCon', E32, E33, E34, E35, E36} -> (fun (V38, V39, V40, V41, V42) -> case V1 of {'Idris.Core.CompileExpr.CCon', E37, E38, E39, E40, E41} -> (fun (V43, V44, V45, V46, V47) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V50, V51)) end end}, V41, V46)) of 1 -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V39, V44)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V52) -> fun (V53) -> ('dn--un--==_Eq_(CExp $vars)'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('dn--un--/=_Eq_(CExp $vars)'(V54, V55)) end end}, V42, V47)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37, E38, E39, E40, E41)); _ -> 0 end end(E32, E33, E34, E35, E36)); {'Idris.Core.CompileExpr.COp', E42, E43, E44, E45} -> (fun (V56, V57, V58, V59) -> case V1 of {'Idris.Core.CompileExpr.COp', E46, E47, E48, E49} -> (fun (V60, V61, V62, V63) -> case ('un--primFnEq'(V58, V62)) of {'Idris.Prelude.Types.Just', E50} -> (fun (V64) -> case V64 of 0 -> ('Idris.Idris2.Data.Vect':'dn--un--==_Eq_((Vect $n) $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V65) -> fun (V66) -> ('dn--un--==_Eq_(CExp $vars)'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('dn--un--/=_Eq_(CExp $vars)'(V67, V68)) end end}, V59, V63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47, E48, E49)); _ -> 0 end end(E42, E43, E44, E45)); {'Idris.Core.CompileExpr.CExtPrim', E51, E52, E53} -> (fun (V69, V70, V71) -> case V1 of {'Idris.Core.CompileExpr.CExtPrim', E54, E55, E56} -> (fun (V72, V73, V74) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V70, V73)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V75) -> fun (V76) -> ('dn--un--==_Eq_(CExp $vars)'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--/=_Eq_(CExp $vars)'(V77, V78)) end end}, V71, V74)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55, E56)); _ -> 0 end end(E51, E52, E53)); {'Idris.Core.CompileExpr.CForce', E57, E58, E59} -> (fun (V79, V80, V81) -> case V1 of {'Idris.Core.CompileExpr.CForce', E60, E61, E62} -> (fun (V82, V83, V84) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_LazyReason'(V80, V83)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V81, V84)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60, E61, E62)); _ -> 0 end end(E57, E58, E59)); {'Idris.Core.CompileExpr.CDelay', E63, E64, E65} -> (fun (V85, V86, V87) -> case V1 of {'Idris.Core.CompileExpr.CDelay', E66, E67, E68} -> (fun (V88, V89, V90) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_LazyReason'(V86, V89)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V87, V90)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66, E67, E68)); _ -> 0 end end(E63, E64, E65)); {'Idris.Core.CompileExpr.CConCase', E69, E70, E71, E72} -> (fun (V91, V92, V93, V94) -> case V1 of {'Idris.Core.CompileExpr.CConCase', E73, E74, E75, E76} -> (fun (V95, V96, V97, V98) -> case ('dn--un--==_Eq_(CExp $vars)'(V92, V96)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V99) -> fun (V100) -> ('dn--un--==_Eq_(CConAlt $vars)'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('dn--un--/=_Eq_(CConAlt $vars)'(V101, V102)) end end}, V93, V97)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V103) -> fun (V104) -> ('dn--un--==_Eq_(CExp $vars)'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--/=_Eq_(CExp $vars)'(V105, V106)) end end}, V94, V98)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73, E74, E75, E76)); _ -> 0 end end(E69, E70, E71, E72)); {'Idris.Core.CompileExpr.CConstCase', E77, E78, E79, E80} -> (fun (V107, V108, V109, V110) -> case V1 of {'Idris.Core.CompileExpr.CConstCase', E81, E82, E83, E84} -> (fun (V111, V112, V113, V114) -> case ('dn--un--==_Eq_(CExp $vars)'(V108, V112)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V115) -> fun (V116) -> ('dn--un--==_Eq_(CConstAlt $vars)'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('dn--un--/=_Eq_(CConstAlt $vars)'(V117, V118)) end end}, V109, V113)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V119) -> fun (V120) -> ('dn--un--==_Eq_(CExp $vars)'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('dn--un--/=_Eq_(CExp $vars)'(V121, V122)) end end}, V110, V114)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E81, E82, E83, E84)); _ -> 0 end end(E77, E78, E79, E80)); {'Idris.Core.CompileExpr.CPrimVal', E85, E86} -> (fun (V123, V124) -> case V1 of {'Idris.Core.CompileExpr.CPrimVal', E87, E88} -> (fun (V125, V126) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V124, V126)) end(E87, E88)); _ -> 0 end end(E85, E86)); {'Idris.Core.CompileExpr.CErased', E89} -> (fun (V127) -> case V1 of {'Idris.Core.CompileExpr.CErased', E90} -> (fun (V128) -> 1 end(E90)); _ -> 0 end end(E89)); {'Idris.Core.CompileExpr.CCrash', E91, E92} -> (fun (V129, V130) -> case V1 of {'Idris.Core.CompileExpr.CCrash', E93, E94} -> (fun (V131, V132) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V130, V132)) end(E93, E94)); _ -> 0 end end(E91, E92)); _ -> 0 end.
'dn--un--==_Eq_(CConstAlt $vars)'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E2, E3} -> (fun (V4, V5) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V2, V4)) of 1 -> ('dn--un--==_Eq_(CExp $vars)'(V3, V5)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_(CConAlt $vars)'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E5, E6, E7, E8, E9} -> (fun (V7, V8, V9, V10, V11) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, V4, V9)) of 1 -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V7)) of 1 -> (case ('Idris.Idris2.Core.Name':'un--namesEq'(V5, V10)) of {'Idris.Prelude.Types.Just', E10} -> (fun (V16) -> case V16 of 0 -> fun () -> ('dn--un--==_Eq_(CExp $vars)'(V6, V11)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun () -> 0 end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end()); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 0)).
'dn--un--<_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 0)).
'dn--un--<_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 0)).
'dn--un--<_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 0)).
'dn--un--<_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 0)).
'dn--un--<_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 0)).
'dn--un--<=_Ord_LazyReason'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_LazyReason'(V0, V1)), 2)).
'dn--un--<=_Ord_Constant'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Constant'(V0, V1)), 2)).
'dn--un--<=_Ord_(Var $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(Var $vars)'(V0, V1)), 2)).
'dn--un--<=_Ord_(CExp $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CExp $vars)'(V0, V1)), 2)).
'dn--un--<=_Ord_(CConstAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConstAlt $vars)'(V0, V1)), 2)).
'dn--un--<=_Ord_(CConAlt $vars)'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(CConAlt $vars)'(V0, V1)), 2)).
'dn--un--/=_Eq_(Var $vars)'(V0, V1) -> case ('dn--un--==_Eq_(Var $vars)'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(CExp $vars)'(V0, V1) -> case ('dn--un--==_Eq_(CExp $vars)'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(CConstAlt $vars)'(V0, V1) -> case ('dn--un--==_Eq_(CConstAlt $vars)'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(CConAlt $vars)'(V0, V1) -> case ('dn--un--==_Eq_(CConAlt $vars)'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--thenCmp'(V0, V1) -> case V0 of 0 -> 0; 1 -> (V1()); 2 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--primFnEq'(V0, V1) -> case V0 of {'Idris.Core.TT.Add', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.Add', E1} -> (fun (V3) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V2, V3)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.Sub', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.Sub', E3} -> (fun (V5) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V4, V5)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.Mul', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.Mul', E5} -> (fun (V7) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V6, V7)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.Div', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.Div', E7} -> (fun (V9) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V8, V9)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.Mod', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.Mod', E9} -> (fun (V11) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V10, V11)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.Neg', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.Neg', E11} -> (fun (V13) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V12, V13)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.ShiftL', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.ShiftL', E13} -> (fun (V15) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V14, V15)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.ShiftR', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.ShiftR', E15} -> (fun (V17) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V16, V17)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.BAnd', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.BAnd', E17} -> (fun (V19) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V18, V19)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.BOr', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.BOr', E19} -> (fun (V21) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V20, V21)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.BXOr', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.BXOr', E21} -> (fun (V23) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V22, V23)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.LT', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.LT', E23} -> (fun (V25) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V24, V25)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); {'Idris.Core.TT.LTE', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.LTE', E25} -> (fun (V27) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V26, V27)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); {'Idris.Core.TT.EQ', E26} -> (fun (V28) -> case V1 of {'Idris.Core.TT.EQ', E27} -> (fun (V29) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V28, V29)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E26)); {'Idris.Core.TT.GTE', E28} -> (fun (V30) -> case V1 of {'Idris.Core.TT.GTE', E29} -> (fun (V31) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V30, V31)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E28)); {'Idris.Core.TT.GT', E30} -> (fun (V32) -> case V1 of {'Idris.Core.TT.GT', E31} -> (fun (V33) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V32, V33)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E30)); {'Idris.Core.TT.StrLength'} -> (fun () -> case V1 of {'Idris.Core.TT.StrLength'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> case V1 of {'Idris.Core.TT.StrHead'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> case V1 of {'Idris.Core.TT.StrTail'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V1 of {'Idris.Core.TT.StrIndex'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V1 of {'Idris.Core.TT.StrCons'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V1 of {'Idris.Core.TT.StrAppend'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> case V1 of {'Idris.Core.TT.StrReverse'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V1 of {'Idris.Core.TT.StrSubstr'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleExp'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleLog'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> case V1 of {'Idris.Core.TT.DoublePow'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleSin'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleCos'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleTan'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleASin'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleACos'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleATan'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleFloor'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> case V1 of {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.Cast', E32, E33} -> (fun (V34, V35) -> case V1 of {'Idris.Core.TT.Cast', E34, E35} -> (fun (V36, V37) -> case case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V34, V36)) of 1 -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V35, V37)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E32, E33)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V1 of {'Idris.Core.TT.BelieveMe'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V1 of {'Idris.Core.TT.Crash'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--primFnCmp'(V0, V1) -> case V0 of {'Idris.Core.TT.Add', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.Add', E1} -> (fun (V3) -> ('dn--un--compare_Ord_Constant'(V2, V3)) end(E1)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E0)); {'Idris.Core.TT.Sub', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.Sub', E3} -> (fun (V5) -> ('dn--un--compare_Ord_Constant'(V4, V5)) end(E3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E2)); {'Idris.Core.TT.Mul', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.Mul', E5} -> (fun (V7) -> ('dn--un--compare_Ord_Constant'(V6, V7)) end(E5)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E4)); {'Idris.Core.TT.Div', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.Div', E7} -> (fun (V9) -> ('dn--un--compare_Ord_Constant'(V8, V9)) end(E7)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E6)); {'Idris.Core.TT.Mod', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.Mod', E9} -> (fun (V11) -> ('dn--un--compare_Ord_Constant'(V10, V11)) end(E9)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E8)); {'Idris.Core.TT.Neg', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.Neg', E11} -> (fun (V13) -> ('dn--un--compare_Ord_Constant'(V12, V13)) end(E11)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E10)); {'Idris.Core.TT.ShiftL', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.ShiftL', E13} -> (fun (V15) -> ('dn--un--compare_Ord_Constant'(V14, V15)) end(E13)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E12)); {'Idris.Core.TT.ShiftR', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.ShiftR', E15} -> (fun (V17) -> ('dn--un--compare_Ord_Constant'(V16, V17)) end(E15)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E14)); {'Idris.Core.TT.BAnd', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.BAnd', E17} -> (fun (V19) -> ('dn--un--compare_Ord_Constant'(V18, V19)) end(E17)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E16)); {'Idris.Core.TT.BOr', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.BOr', E19} -> (fun (V21) -> ('dn--un--compare_Ord_Constant'(V20, V21)) end(E19)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E18)); {'Idris.Core.TT.BXOr', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.BXOr', E21} -> (fun (V23) -> ('dn--un--compare_Ord_Constant'(V22, V23)) end(E21)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E20)); {'Idris.Core.TT.LT', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.LT', E23} -> (fun (V25) -> ('dn--un--compare_Ord_Constant'(V24, V25)) end(E23)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E22)); {'Idris.Core.TT.LTE', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.LTE', E25} -> (fun (V27) -> ('dn--un--compare_Ord_Constant'(V26, V27)) end(E25)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E24)); {'Idris.Core.TT.EQ', E26} -> (fun (V28) -> case V1 of {'Idris.Core.TT.EQ', E27} -> (fun (V29) -> ('dn--un--compare_Ord_Constant'(V28, V29)) end(E27)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E26)); {'Idris.Core.TT.GTE', E28} -> (fun (V30) -> case V1 of {'Idris.Core.TT.GTE', E29} -> (fun (V31) -> ('dn--un--compare_Ord_Constant'(V30, V31)) end(E29)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E28)); {'Idris.Core.TT.GT', E30} -> (fun (V32) -> case V1 of {'Idris.Core.TT.GT', E31} -> (fun (V33) -> ('dn--un--compare_Ord_Constant'(V32, V33)) end(E31)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E30)); {'Idris.Core.TT.Cast', E32, E33} -> (fun (V34, V35) -> case V1 of {'Idris.Core.TT.Cast', E34, E35} -> (fun (V36, V37) -> ('un--thenCmp'(('dn--un--compare_Ord_Constant'(V34, V36)), fun () -> ('dn--un--compare_Ord_Constant'(V35, V37)) end)) end(E34, E35)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end end(E32, E33)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--5619-1799--in--un--tag'(V1, V0, V0)), ('nested--5619-1799--in--un--tag'(V1, V0, V1)))) end.
'un--lrTag'(V0) -> case V0 of 0 -> 0; 1 -> 1; 2 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
