-module('Idris.Idris2.Compiler.ES.TailRec').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6611-2864--in--un--toTc'/7,
  'nested--6825-3053--in--un--toFun'/4,
  'nested--6764-2991--in--un--toFun'/5,
  'nested--6764-2989--in--un--tcFun'/4,
  'nested--6611-2862--in--un--tcDone'/7,
  'nested--6611-2863--in--un--tcContinue'/8,
  'nested--6764-2990--in--un--local'/5,
  'nested--6397-2676--in--un--fun'/4,
  'nested--6910-3130--in--un--def'/3,
  'nested--6611-2866--in--un--const'/7,
  'nested--6611-2865--in--un--con'/7,
  'un--zipWithIndices'/1,
  'un--toGroup'/2,
  'un--tcFunction'/1,
  'un--tcDoneName'/1,
  'un--tcContinueName'/2,
  'un--tcArgName'/0,
  'un--tailRecOptim'/3,
  'un--tailCalls'/1,
  'un--tailCallGroups'/1,
  'un--indices'/1,
  'un--hasTailCalls'/2,
  'un--functions'/2,
  'un--convertTcGroup'/2,
  'un--conAlt'/2
]).
'nested--6611-2864--in--un--toTc'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.NmLet', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> {'Idris.Core.CompileExpr.NmLet', V7, V8, V9, ('nested--6611-2864--in--un--toTc'(V0, V1, V2, V3, V4, V5, V10))} end(E0, E1, E2, E3)); {'Idris.Core.CompileExpr.NmApp', E4, E5, E6} -> (fun (V11, V12, V13) -> case V12 of {'Idris.Core.CompileExpr.NmRef', E7, E8} -> (fun (V14, V15) -> begin (V16 = {'Idris.Core.CompileExpr.NmApp', V11, {'Idris.Core.CompileExpr.NmRef', V14, V15}, V13}), case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V15, V0)) of {'Idris.Prelude.Types.Just', E9} -> (fun (V17) -> ('nested--6611-2863--in--un--tcContinue'(V0, V1, V2, V3, V4, V5, case V17 of {'Idris.Compiler.ES.TailRec.MkTcFunction', E10, E11, E12, E13} -> (fun (V18, V19, V20, V21) -> V19 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13)) end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--6611-2862--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V16)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> ('nested--6611-2862--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V6)) end end(E4, E5, E6)); {'Idris.Core.CompileExpr.NmConCase', E14, E15, E16, E17} -> (fun (V22, V23, V24, V25) -> {'Idris.Core.CompileExpr.NmConCase', V22, V23, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('nested--6611-2865--in--un--con'(V0, V1, V2, V3, V4, V5, V26)) end, V24)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V27) -> ('nested--6611-2864--in--un--toTc'(V0, V1, V2, V3, V4, V5, V27)) end, V25))} end(E14, E15, E16, E17)); {'Idris.Core.CompileExpr.NmConstCase', E18, E19, E20, E21} -> (fun (V28, V29, V30, V31) -> {'Idris.Core.CompileExpr.NmConstCase', V28, V29, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V32) -> ('nested--6611-2866--in--un--const'(V0, V1, V2, V3, V4, V5, V32)) end, V30)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V33) -> ('nested--6611-2864--in--un--toTc'(V0, V1, V2, V3, V4, V5, V33)) end, V31))} end(E18, E19, E20, E21)); {'Idris.Core.CompileExpr.NmCrash', E22, E23} -> (fun (V34, V35) -> V6 end(E22, E23)); _ -> ('nested--6611-2862--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V6)) end.
'nested--6825-3053--in--un--toFun'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V4, V2)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Nothing'} end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.TailRec.MkFunction', V4, V6, V7}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6764-2991--in--un--toFun'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Compiler.ES.TailRec.MkTcFunction', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> begin (V10 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('nested--6764-2990--in--un--local'(V0, V1, V2, V3, V9)) end, V7))), begin (V11 = {'Idris.Core.CompileExpr.NmCon', {'Idris.Core.FC.EmptyFC'}, ('un--tcContinueName'(V1, V6)), 0, {'Idris.Prelude.Types.Just', V6}, V10}), begin (V12 = {'Idris.Core.CompileExpr.NmRef', {'Idris.Core.FC.EmptyFC'}, ('nested--6764-2989--in--un--tcFun'(V0, V1, V2, V3))}), begin (V13 = {'Idris.Core.CompileExpr.NmApp', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.CompileExpr.NmRef', {'Idris.Core.FC.EmptyFC'}, V3}, [V12 | [V11 | []]]}), {'Idris.Compiler.ES.TailRec.MkFunction', V5, V7, V13} end end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6764-2989--in--un--tcFun'(V0, V1, V2, V3) -> ('un--tcFunction'(V1)).
'nested--6611-2862--in--un--tcDone'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Core.CompileExpr.NmCon', {'Idris.Core.FC.EmptyFC'}, ('un--tcDoneName'(V1)), 0, {'Idris.Prelude.Types.Just', 0}, [V6 | []]}.
'nested--6611-2863--in--un--tcContinue'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Core.CompileExpr.NmCon', {'Idris.Core.FC.EmptyFC'}, ('un--tcContinueName'(V1, V6)), 0, {'Idris.Prelude.Types.Just', V6}, V7}.
'nested--6764-2990--in--un--local'(V0, V1, V2, V3, V4) -> {'Idris.Core.CompileExpr.NmLocal', {'Idris.Core.FC.EmptyFC'}, V4}.
'nested--6397-2676--in--un--fun'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V5, V2)), fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V5, {'Idris.Compiler.ES.TailRec.MkTcFunction', V5, V4, V9, V10}})) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6910-3130--in--un--def'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Core.CompileExpr.MkNmFun', E4, E5} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V7, V8}}} end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--6611-2866--in--un--const'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.MkNConstAlt', E0, E1} -> (fun (V7, V8) -> {'Idris.Core.CompileExpr.MkNConstAlt', V7, ('nested--6611-2864--in--un--toTc'(V0, V1, V2, V3, V4, V5, V8))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6611-2865--in--un--con'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> {'Idris.Core.CompileExpr.MkNConAlt', V7, V8, V9, V10, ('nested--6611-2864--in--un--toTc'(V0, V1, V2, V3, V4, V5, V11))} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--zipWithIndices'(V0) -> ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(('un--indices'(V0)), V0)).
'un--toGroup'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> begin (V4 = ('un--zipWithIndices'(('Idris.Idris2.Data.List1':'un--forget'(V3))))), begin (V24 = {'Idris.Compiler.ES.TailRec.MkTcGroup', V2, ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V7, V8)) end end}, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V21, V22)) end end}, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V23) -> ('nested--6397-2676--in--un--fun'(V2, V3, V0, V23)) end, V4))))}), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V27, V28)) end end end end, fun (V29) -> {'Idris.Builtin.MkPair', V29, V24} end, ('Idris.Idris2.Data.List1':'un--forget'(V3)))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tcFunction'(V0) -> {'Idris.Core.Name.MN', <<"$tcOpt"/utf8>>, V0}.
'un--tcDoneName'(V0) -> {'Idris.Core.Name.MN', <<"TcDone"/utf8>>, V0}.
'un--tcContinueName'(V0, V1) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TcContinue"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V0)))), V1}.
'un--tcArgName'() -> {'Idris.Core.Name.MN', <<"$a"/utf8>>, 0}.
'un--tailRecOptim'(V0, V1, V2) -> begin (V4 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V3) -> ('nested--6825-3053--in--un--toFun'(V2, V1, V0, V3)) end, V2))), begin (V34 = ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V31, V32)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V33) -> ('un--convertTcGroup'(V1, V33)) end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--values'(V0))))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V34, V4)) end end.
'un--tailCalls'(V0) -> case V0 of {'Idris.Core.CompileExpr.NmLet', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('un--tailCalls'(V4)) end(E0, E1, E2, E3)); {'Idris.Core.CompileExpr.NmApp', E4, E5, E6} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Core.CompileExpr.NmRef', E7, E8} -> (fun (V8, V9) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--singleton'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V26, V27)) end end}, V9)) end(E7, E8)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V44, V45)) end end})) end end(E4, E5, E6)); {'Idris.Core.CompileExpr.NmConCase', E9, E10, E11, E12} -> (fun (V46, V47, V48, V49) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V52, V53)) end end}, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V66, V67)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V79)) end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V83, V84, V85, V86)) end end end end end end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V88)) end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V91, V92, V93)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V94) -> fun (V95) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V98, V99)) end end}, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V100, V101)) end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V104, V105)) end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V112, V113)) end end}, V94, V95)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V116, V117)) end end}, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V124, V125)) end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V130, V131)) end end}))}}, fun (V132) -> case V132 of {'Idris.Core.CompileExpr.MkNConAlt', E13, E14, E15, E16, E17} -> (fun (V133, V134, V135, V136, V137) -> ('un--tailCalls'(V137)) end(E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V48)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'(V140, V141, V142)) end end end end end, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'(V145, V146, V147)) end end end end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'(V149)) end end, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_Maybe'(V153, V154, V155, V156)) end end end end end end end, fun (V157) -> fun (V158) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(V158)) end end, fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'(V161, V162, V163)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V164) -> fun (V165) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V168, V169)) end end}, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V176, V177)) end end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V178, V179)) end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V180, V181)) end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V182, V183)) end end}, V164, V165)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V186, V187)) end end}, fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V198, V199)) end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V200, V201)) end end}))}}, fun (V202) -> ('un--tailCalls'(V202)) end, V49)))) end(E9, E10, E11, E12)); {'Idris.Core.CompileExpr.NmConstCase', E18, E19, E20, E21} -> (fun (V203, V204, V205, V206) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V207, V208)) end end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V209, V210)) end end}, fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V211, V212)) end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V213, V214)) end end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V215, V216)) end end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V217, V218)) end end, fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V219, V220)) end end, fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V221, V222)) end end, fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V223, V224)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V227, V228, V229)) end end end end end, fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V232, V233, V234)) end end end end end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V236)) end end, fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V240, V241, V242, V243)) end end end end end end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V245)) end end, fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V248, V249, V250)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V251) -> fun (V252) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V253) -> fun (V254) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V253, V254)) end end, fun (V255) -> fun (V256) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V255, V256)) end end}, fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V257, V258)) end end, fun (V259) -> fun (V260) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V259, V260)) end end, fun (V261) -> fun (V262) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V261, V262)) end end, fun (V263) -> fun (V264) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V263, V264)) end end, fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V265, V266)) end end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V267, V268)) end end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V269, V270)) end end}, V251, V252)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V271) -> fun (V272) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V271, V272)) end end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V273, V274)) end end}, fun (V275) -> fun (V276) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V275, V276)) end end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V277, V278)) end end, fun (V279) -> fun (V280) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V279, V280)) end end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V281, V282)) end end, fun (V283) -> fun (V284) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V283, V284)) end end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V285, V286)) end end, fun (V287) -> fun (V288) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V287, V288)) end end}))}}, fun (V289) -> case V289 of {'Idris.Core.CompileExpr.MkNConstAlt', E22, E23} -> (fun (V290, V291) -> ('un--tailCalls'(V291)) end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V205)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'(V294, V295, V296)) end end end end end, fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'(V299, V300, V301)) end end end end end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'(V303)) end end, fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> fun (V310) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_Maybe'(V307, V308, V309, V310)) end end end end end end end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(V312)) end end, fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> fun (V317) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'(V315, V316, V317)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V318) -> fun (V319) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V320) -> fun (V321) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V320, V321)) end end, fun (V322) -> fun (V323) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V322, V323)) end end}, fun (V324) -> fun (V325) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V324, V325)) end end, fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V326, V327)) end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V328, V329)) end end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V330, V331)) end end, fun (V332) -> fun (V333) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V332, V333)) end end, fun (V334) -> fun (V335) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V334, V335)) end end, fun (V336) -> fun (V337) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V336, V337)) end end}, V318, V319)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V338) -> fun (V339) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V338, V339)) end end, fun (V340) -> fun (V341) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V340, V341)) end end}, fun (V342) -> fun (V343) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V342, V343)) end end, fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V344, V345)) end end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V346, V347)) end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V348, V349)) end end, fun (V350) -> fun (V351) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V350, V351)) end end, fun (V352) -> fun (V353) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V352, V353)) end end, fun (V354) -> fun (V355) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V354, V355)) end end}))}}, fun (V356) -> ('un--tailCalls'(V356)) end, V206)))) end(E18, E19, E20, E21)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V357) -> fun (V358) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V357, V358)) end end, fun (V359) -> fun (V360) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V359, V360)) end end}, fun (V361) -> fun (V362) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V361, V362)) end end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V363, V364)) end end, fun (V365) -> fun (V366) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V365, V366)) end end, fun (V367) -> fun (V368) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V367, V368)) end end, fun (V369) -> fun (V370) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V369, V370)) end end, fun (V371) -> fun (V372) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V371, V372)) end end, fun (V373) -> fun (V374) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V373, V374)) end end})) end.
'un--tailCallGroups'(V0) -> begin (V20 = ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V17, V18)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V19)), V19} end, V0))))), begin (V26 = ('Idris.Idris2.Libraries.Data.SortedMap':'dn--un--map_Functor_(SortedMap $k)'(fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> ('un--tailCalls'(V25)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V20))), begin (V46 = ('Idris.Idris2.Data.List':'un--filter'(fun (V27) -> ('un--hasTailCalls'(V26, V27)) end, ('Idris.Idris2.Libraries.Data.Graph':'un--tarjan'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V44, V45)) end end}, V26))))), ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V49, V50)) end end}, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V63, V64)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V67, V68, V69)) end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V76)) end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V80, V81, V82, V83)) end end end end end end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V85)) end end, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V88, V89, V90)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V91, V92)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V93) -> ('un--toGroup'(V20, V93)) end, ('un--zipWithIndices'(V46)))))) end end end.
'un--indices'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V1) -> fun (V2) -> ((V1 + V2) rem 9223372036854775808) end end, fun (V3) -> fun (V4) -> ((V3 * V4) rem 9223372036854775808) end end, fun (V5) -> V5 end}, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V8, V9)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V12, V13)) end end}, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V26, V27)) end end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V28) -> fun (V29) -> ((V28 + V29) rem 9223372036854775808) end end, fun (V30) -> fun (V31) -> ((V30 * V31) rem 9223372036854775808) end end, fun (V32) -> V32 end}, fun (V33) -> ((0 - V33) rem 9223372036854775808) end, fun (V34) -> fun (V35) -> ((V34 - V35) rem 9223372036854775808) end end}}}, 1, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'(V0)))))).
'un--hasTailCalls'(V0, V1) -> case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V4) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(V2, V4)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V2, V0)))); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--functions'(V0, V1) -> begin (V3 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V2) -> ('nested--6910-3130--in--un--def'(V1, V0, V2)) end, V1))), ('un--tailRecOptim'(('un--tailCallGroups'(V3)), V0, V3)) end.
'un--convertTcGroup'(V0, V1) -> case V1 of {'Idris.Compiler.ES.TailRec.MkTcGroup', E0, E1} -> (fun (V2, V3) -> begin (V29 = ('Idris.Idris2.Data.List':'un--sortBy'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'un--comparing'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V22, V23)) end end}, fun (V24) -> case V24 of {'Idris.Compiler.ES.TailRec.MkTcFunction', E2, E3, E4, E5} -> (fun (V25, V26, V27, V28) -> V26 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V4, V5)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--values'(V3))))), begin (V31 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V30) -> ('un--conAlt'(V1, V30)) end, V29))), begin (V32 = {'Idris.Core.CompileExpr.NmConCase', {'Idris.Core.FC.EmptyFC'}, ('nested--6764-2990--in--un--local'(V3, V2, V1, V0, ('un--tcArgName'()))), V31, {'Idris.Prelude.Types.Nothing'}}), [{'Idris.Compiler.ES.TailRec.MkFunction', ('nested--6764-2989--in--un--tcFun'(V3, V2, V1, V0)), [('un--tcArgName'()) | []], V32} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V33) -> ('nested--6764-2991--in--un--toFun'(V3, V2, V1, V0, V33)) end, V29))] end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--conAlt'(V0, V1) -> case V0 of {'Idris.Compiler.ES.TailRec.MkTcGroup', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Compiler.ES.TailRec.MkTcFunction', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> begin (V8 = ('un--tcContinueName'(V2, V5))), {'Idris.Core.CompileExpr.MkNConAlt', V8, 0, {'Idris.Prelude.Types.Just', V5}, V6, ('nested--6611-2864--in--un--toTc'(V3, V2, V7, V6, V5, V4, V7))} end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
