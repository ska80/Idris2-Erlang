-module('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToPrimTerm').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--genTypeSpecifierList'/1,
  'un--genPattern'/1,
  'un--genMapFieldExact'/2,
  'un--genMapFieldAssoc'/2,
  'un--genLiteral'/1,
  'un--genLine'/1,
  'un--genGuardAlt'/1,
  'un--genGuard'/1,
  'un--genFunClause'/1,
  'un--genExpr'/1,
  'un--genExportFun'/1,
  'un--genDecl'/1,
  'un--genCatchClause'/1,
  'un--genCaseClause'/1,
  'un--genBitUnit'/1,
  'un--genBitType'/1,
  'un--genBitSize'/1,
  'un--genBitSignedness'/1,
  'un--genBitSegment'/2,
  'un--genBitPattern'/1,
  'un--genBitEndianness'/1
]).
'un--genTypeSpecifierList'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V5) -> ('un--genBitSignedness'(V5)) end, V1)))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V6) -> ('un--genBitEndianness'(V6)) end, V2)))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V7) -> ('un--genBitType'(V7)) end, V3)))), ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V8) -> ('un--genBitUnit'(V8)) end, V4))))))))))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.APLiteral', E0} -> (fun (V1) -> ('un--genLiteral'(V1)) end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', E1, E2} -> (fun (V2, V3) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin"/utf8>>} | [('un--genLine'(V2)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genBitPattern'(V5)) end, V4)) end, V3))} | []]]]} end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APCons', E3, E4, E5} -> (fun (V6, V7, V8) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V6)) | [('un--genPattern'(V7)) | [('un--genPattern'(V8)) | []]]]]} end(E3, E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APMap', E6, E7} -> (fun (V9, V10) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map"/utf8>>} | [('un--genLine'(V9)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('un--genMapFieldExact'(fun (V12) -> ('un--genPattern'(V12)) end, V11)) end, V10))} | []]]]} end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APNil', E8} -> (fun (V13) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V13)) | []]]} end(E8)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', E9, E10} -> (fun (V14, V15) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V14)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> ('un--genPattern'(V16)) end, V15))} | []]]]} end(E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APUniversal', E11} -> (fun (V17) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V17)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"_"/utf8>>} | []]]]} end(E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', E12, E13} -> (fun (V18, V19) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V18)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V19} | []]]]} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldExact'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkExact', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map_field_exact"/utf8>>} | [('un--genLine'(V2)) | [(V0(V3)) | [(V0(V4)) | []]]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldAssoc'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkAssoc', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map_field_assoc"/utf8>>} | [('un--genLine'(V2)) | [(V0(V3)) | [(V0(V4)) | []]]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genLiteral'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"atom"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V2} | []]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALChar', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"char"/utf8>>} | [('un--genLine'(V3)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PChar', V4} | []]]]} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALFloat', E4, E5} -> (fun (V5, V6) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"float"/utf8>>} | [('un--genLine'(V5)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PFloat', V6} | []]]]} end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', E6, E7} -> (fun (V7, V8) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V7)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V8} | []]]]} end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALCharlist', E8, E9} -> (fun (V9, V10) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"string"/utf8>>} | [('un--genLine'(V9)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PCharlist', V10} | []]]]} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genLine'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V0))}.
'un--genGuardAlt'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('un--genGuard'(V1)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V0))))}.
'un--genGuard'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AGLiteral', E0} -> (fun (V1) -> ('un--genLiteral'(V1)) end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGCons', E1, E2, E3} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V2)) | [('un--genGuard'(V3)) | [('un--genGuard'(V4)) | []]]]]} end(E1, E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', E4, E5, E6} -> (fun (V5, V6, V7) -> begin (V8 = {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"remote"/utf8>>} | [('un--genLine'(V5)) | [('un--genLiteral'({'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', V5, <<"erlang"/utf8>>})) | [('un--genLiteral'({'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', V5, V6})) | []]]]]}), {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"call"/utf8>>} | [('un--genLine'(V5)) | [V8 | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('un--genGuard'(V9)) end, V7))} | []]]]]} end end(E4, E5, E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGNil', E7} -> (fun (V10) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V10)) | []]]} end(E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"op"/utf8>>} | [('un--genLine'(V11)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V12} | [('un--genGuard'(V13)) | [('un--genGuard'(V14)) | []]]]]]} end(E8, E9, E10, E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGTuple', E12, E13} -> (fun (V15, V16) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V15)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('un--genGuard'(V17)) end, V16))} | []]]]} end(E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', E14, E15} -> (fun (V18, V19) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V18)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V19} | []]]]} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genFunClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V5) -> ('un--genPattern'(V5)) end, V2))))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('un--genGuardAlt'(V6)) end, V3))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('un--genExpr'(V7)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V4))))} | []]]]]]} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExpr'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', E0} -> (fun (V1) -> ('un--genLiteral'(V1)) end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', E1, E2} -> (fun (V2, V3) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin"/utf8>>} | [('un--genLine'(V2)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('un--genBitSegment'(fun (V5) -> ('un--genExpr'(V5)) end, V4)) end, V3))} | []]]]} end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBlock', E3, E4} -> (fun (V6, V7) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"block"/utf8>>} | [('un--genLine'(V6)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('un--genExpr'(V8)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V7))))} | []]]]} end(E3, E4)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECase', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"case"/utf8>>} | [('un--genLine'(V9)) | [('un--genExpr'(V10)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--genCaseClause'(V12)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V11))))} | []]]]]} end(E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECons', E8, E9, E10} -> (fun (V13, V14, V15) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V13)) | [('un--genExpr'(V14)) | [('un--genExpr'(V15)) | []]]]]} end(E8, E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', E11, E12, E13} -> (fun (V16, V17, V18) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"fun"/utf8>>} | [('un--genLine'(V16)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clauses"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('un--genFunClause'(V19)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V18))))} | []]]} | []]]]} end(E11, E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', E14, E15, E16} -> (fun (V20, V21, V22) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"call"/utf8>>} | [('un--genLine'(V20)) | [('un--genExpr'(V21)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V23) -> ('un--genExpr'(V23)) end, V22))} | []]]]]} end(E14, E15, E16)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AERemoteRef', E17, E18, E19} -> (fun (V24, V25, V26) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"remote"/utf8>>} | [('un--genLine'(V24)) | [('un--genExpr'(V25)) | [('un--genExpr'(V26)) | []]]]]} end(E17, E18, E19)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMapNew', E20, E21} -> (fun (V27, V28) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map"/utf8>>} | [('un--genLine'(V27)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('un--genMapFieldAssoc'(fun (V30) -> ('un--genExpr'(V30)) end, V29)) end, V28))} | []]]]} end(E20, E21)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', E22, E23, E24} -> (fun (V31, V32, V33) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"match"/utf8>>} | [('un--genLine'(V31)) | [('un--genPattern'(V32)) | [('un--genExpr'(V33)) | []]]]]} end(E22, E23, E24)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AENil', E25} -> (fun (V34) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V34)) | []]]} end(E25)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', E26, E27, E28, E29} -> (fun (V35, V36, V37, V38) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"op"/utf8>>} | [('un--genLine'(V35)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V36} | [('un--genExpr'(V37)) | [('un--genExpr'(V38)) | []]]]]]} end(E26, E27, E28, E29)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEReceive', E30, E31, E32} -> (fun (V39, V40, V41) -> case V41 of {'Idris.Compiler.Erlang.IR.AbstractFormat.NoTimeout'} -> (fun () -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"receive"/utf8>>} | [('un--genLine'(V39)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V42) -> ('un--genCaseClause'(V42)) end, V40))} | []]]]} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.TimeoutAfter', E33, E34} -> (fun (V43, V44) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"receive"/utf8>>} | [('un--genLine'(V39)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('un--genCaseClause'(V45)) end, V40))} | [('un--genExpr'(V43)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('un--genExpr'(V46)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V44))))} | []]]]]]} end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', E35, E36} -> (fun (V47, V48) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V47)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('un--genExpr'(V49)) end, V48))} | []]]]} end(E35, E36)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETry', E37, E38, E39, E40, E41} -> (fun (V50, V51, V52, V53, V54) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"try"/utf8>>} | [('un--genLine'(V50)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V55) -> ('un--genExpr'(V55)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V51))))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V56) -> ('un--genCaseClause'(V56)) end, V52))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> ('un--genCatchClause'(V57)) end, V53))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V58) -> ('un--genExpr'(V58)) end, V54))} | []]]]]]]} end(E37, E38, E39, E40, E41)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', E42, E43} -> (fun (V59, V60) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V59)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V60} | []]]]} end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExportFun'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V1} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genDecl'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ADExport', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"export"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('un--genExportFun'(V3)) end, V2))} | []]]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADModule', E2, E3} -> (fun (V4, V5) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V4)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"module"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V5} | []]]]]} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADFunDef', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"function"/utf8>>} | [('un--genLine'(V6)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V7} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V8} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--genFunClause'(V10)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V9))))} | []]]]]]} end(E4, E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADAttribute', E8, E9, E10} -> (fun (V11, V12, V13) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V11)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V12} | [V13 | []]]]]} end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCatchClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCatchClause', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--genPattern'({'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V1, [V2 | [V3 | [V4 | []]]]}))), {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', [V7 | []]} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('un--genGuardAlt'(V8)) end, V5))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('un--genExpr'(V9)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V6))))} | []]]]]]} end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCaseClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCaseClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', [('un--genPattern'(V2)) | []]} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('un--genGuardAlt'(V5)) end, V3))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('un--genExpr'(V6)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V4))))} | []]]]]]} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitUnit'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"unit"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', (('Idris.Idris2.Data.Fin':'dn--un--cast_Cast_(Fin $n)_Integer'(V0)) + 1)} | []]]}.
'un--genBitType'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', case V0 of 0 -> <<"integer"/utf8>>; 1 -> <<"float"/utf8>>; 2 -> <<"binary"/utf8>>; 3 -> <<"bytes"/utf8>>; 4 -> <<"bitstring"/utf8>>; 5 -> <<"bits"/utf8>>; 6 -> <<"utf8"/utf8>>; 7 -> <<"utf16"/utf8>>; 8 -> <<"utf32"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--genBitSize'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'} -> (fun () -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"default"/utf8>>} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V3)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V4} | []]]]} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSignedness'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', case V0 of 0 -> <<"unsigned"/utf8>>; 1 -> <<"signed"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--genBitSegment'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin_element"/utf8>>} | [('un--genLine'(V2)) | [(V0(V3)) | [('un--genBitSize'(V4)) | [('un--genTypeSpecifierList'(V5)) | []]]]]]} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPFloat', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"float"/utf8>>} | [('un--genLine'(V3)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PFloat', V4} | []]]]} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPCharlist', E4, E5} -> (fun (V5, V6) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"string"/utf8>>} | [('un--genLine'(V5)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PCharlist', V6} | []]]]} end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', E6} -> (fun (V7) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V7)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"_"/utf8>>} | []]]]} end(E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', E7, E8} -> (fun (V8, V9) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V8)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V9} | []]]]} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitEndianness'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', case V0 of 0 -> <<"big"/utf8>>; 1 -> <<"little"/utf8>>; 2 -> <<"native"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
