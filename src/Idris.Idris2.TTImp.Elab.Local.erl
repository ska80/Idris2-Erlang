-module('Idris.Idris2.TTImp.Elab.Local').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getLocalTerm-10293'/9,
  'nested--8576-9235--in--un--updateTyName'/11,
  'nested--8576-9237--in--un--updateName'/11,
  'nested--8576-9236--in--un--updateDataName'/11,
  'nested--8576-9238--in--un--setPublic'/10,
  'nested--8576-9239--in--un--setErased'/10,
  'nested--8576-9234--in--un--newName'/11,
  'nested--8576-9232--in--un--dropLinear'/10,
  'nested--8576-9233--in--un--applyEnv'/12,
  'un--localHelper'/10,
  'un--getLocalTerm'/6,
  'un--checkLocal'/14,
  'un--checkCaseLocal'/16
]).
'case--getLocalTerm-10293'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Env.MkIsDefined', E1, E2} -> (fun (V10, V11) -> begin (V12 = (('un--getLocalTerm'(V0, V6, V5, V4, {'Idris.Core.TT.App', V5, V3, {'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Nothing'}, V10}}, V2))(V8))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, [V10 | V16]}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Case Local failed"/utf8>>}, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8576-9235--in--un--updateTyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> {'Idris.TTImp.TTImp.MkImpTy', V11, V12, ('nested--8576-9234--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13)), V14} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8576-9237--in--un--updateName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V11, V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.IClaim', V11, V12, V13, V14, ('nested--8576-9235--in--un--updateTyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V16, V17, V18) -> {'Idris.TTImp.TTImp.IDef', V16, ('nested--8576-9234--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V17)), V18} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V19, V20, V21) -> {'Idris.TTImp.TTImp.IData', V19, V20, ('nested--8576-9236--in--un--updateDataName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V21))} end(E8, E9, E10)); _ -> V10 end.
'nested--8576-9236--in--un--updateDataName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V11, V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.MkImpData', V11, ('nested--8576-9234--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12)), V13, V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> ('nested--8576-9235--in--un--updateTyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V16)) end, V15))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V17, V18, V19) -> {'Idris.TTImp.TTImp.MkImpLater', V17, ('nested--8576-9234--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V18)), V19} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8576-9238--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> {'Idris.TTImp.TTImp.IClaim', V10, V11, 2, V13, V14} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V15, V16, V17) -> {'Idris.TTImp.TTImp.IData', V15, 2, V17} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IRecord', E8, E9, E10, E11} -> (fun (V18, V19, V20, V21) -> {'Idris.TTImp.TTImp.IRecord', V18, V19, 2, V21} end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IParameters', E12, E13, E14} -> (fun (V22, V23, V24) -> {'Idris.TTImp.TTImp.IParameters', V22, V23, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V25) -> ('nested--8576-9238--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V25)) end, V24))} end(E12, E13, E14)); {'Idris.TTImp.TTImp.INamespace', E15, E16, E17} -> (fun (V26, V27, V28) -> {'Idris.TTImp.TTImp.INamespace', V26, V27, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('nested--8576-9238--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V29)) end, V28))} end(E15, E16, E17)); _ -> V9 end.
'nested--8576-9239--in--un--setErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> {'Idris.TTImp.TTImp.IClaim', V10, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V12, V13, V14} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IParameters', E5, E6, E7} -> (fun (V19, V20, V21) -> {'Idris.TTImp.TTImp.IParameters', V19, V20, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('nested--8576-9239--in--un--setErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V22)) end, V21))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamespace', E8, E9, E10} -> (fun (V23, V24, V25) -> {'Idris.TTImp.TTImp.INamespace', V23, V24, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('nested--8576-9239--in--un--setErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V26)) end, V25))} end(E8, E9, E10)); _ -> V9 end.
'nested--8576-9234--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V10, V9)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V16, V17) -> case V16 of {'Idris.Prelude.Types.Just', E3} -> (fun (V18) -> V18 end(E3)); _ -> V10 end end(E1, E2)); _ -> V10 end end(E0)); _ -> V10 end.
'nested--8576-9232--in--un--dropLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V10, V11) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V18, V19)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V10)))) of 1 -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V10, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), ('nested--8576-9232--in--un--dropLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))}; 0 -> {'Idris.Core.Env.::', V10, ('nested--8576-9232--in--un--dropLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8576-9233--in--un--applyEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V29 = begin (V28 = ('erlang':'put'(V6, case V15 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.UnifyState.MkUState', V16, V17, V18, V19, V20, V21, V22, V23, ((V24 + 1) rem 9223372036854775808), V25, V26, V27} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V44 = {'Idris.Core.Name.Nested', {'Idris.Builtin.MkPair', V9, case V15 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V40 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V10}), begin (V45 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V8, V44, V11))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Context':'un--addName'(V8, V47, V11))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V47}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Core.Env':'un--allVars'(V0, V3)))), fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V0, V51, {'Idris.Core.TT.Ref', V51, V52, {'Idris.Core.Name.Resolved', V50}}, V3)) end end}}}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--localHelper'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V28 = case V13 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V15 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V30 = begin (V29 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> begin (V77 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', case V13 of {'Idris.TTImp.Elab.Check.MkEState', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V34 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, case V32 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V47 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V77 of {'Idris.Prelude.Types.Left', E62} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V79) -> begin (V101 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 2 end, fun () -> fun (V80) -> case V80 of {'Idris.Core.Context.Context.MkGlobalDef', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V90 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V79))), begin (V127 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V102) -> fun (V103) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V102, V103)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V104) -> fun (V105) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V104, V105)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})) end, fun () -> fun (V106) -> case V106 of {'Idris.Core.Context.Context.MkGlobalDef', E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> V114 end(E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V79))), begin (V129 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(V101, 2)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V128) -> ('nested--8576-9238--in--un--setPublic'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V128)) end, V7)); 0 -> V7; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V135 = case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V127, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V130) -> fun (V131) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V130, V131)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V132) -> fun (V133) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V132, V133)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V134) -> ('nested--8576-9239--in--un--setErased'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V134)) end, V129)); 0 -> V129; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V136 = ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V135))), begin (V143 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V137) -> fun (V138) -> ('nested--8576-9233--in--un--applyEnv'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V28, V137, V138)) end end, ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V141, V142)) end end}, V136)), [], V9))), case V143 of {'Idris.Prelude.Types.Left', E104} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V145) -> begin (V146 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V145, V5))), begin (V147 = ('nested--8576-9232--in--un--dropLinear'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V6))), begin (V149 = begin (V148 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V148} end), case V149 of {'Idris.Prelude.Types.Left', E106} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V151) -> begin (V164 = case V151 of {'Idris.Core.UnifyState.MkUState', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119} -> (fun (V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163) -> V162 end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V178 = begin (V177 = ('erlang':'put'(V3, case V151 of {'Idris.Core.UnifyState.MkUState', E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131} -> (fun (V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176) -> {'Idris.Core.UnifyState.MkUState', V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, [], V176} end(E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V177} end), case V178 of {'Idris.Prelude.Types.Left', E132} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V180) -> begin (V182 = begin (V181 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V181} end), case V182 of {'Idris.Prelude.Types.Left', E134} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V184) -> begin (V215 = case V184 of {'Idris.Core.Context.MkDefs', E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165} -> (fun (V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214) -> V195 end(E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V217 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V216) -> ('nested--8576-9237--in--un--updateName'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V146, V216)) end, V135))), begin (V227 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.def.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V218) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V219) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V219)) end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V220, V221)) end end}, V218)) end, fun (V222) -> fun (V223) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V224) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V224)) end, fun (V225) -> fun (V226) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V225, V226)) end end}, V222, V223)) end end}, V217)) end, V9))), case V227 of {'Idris.Prelude.Types.Left', E166} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V229) -> begin (V231 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V230) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, [], V146, V147, V230)) end, V217, V9))), case V231 of {'Idris.Prelude.Types.Left', E168} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V233) -> begin (V235 = begin (V234 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V234} end), case V235 of {'Idris.Prelude.Types.Left', E170} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V237) -> begin (V251 = begin (V250 = ('erlang':'put'(V3, case V237 of {'Idris.Core.UnifyState.MkUState', E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183} -> (fun (V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249) -> {'Idris.Core.UnifyState.MkUState', V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V164, V249} end(E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V250} end), case V251 of {'Idris.Prelude.Types.Left', E184} -> (fun (V252) -> {'Idris.Prelude.Types.Left', V252} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V253) -> begin (V255 = begin (V254 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V254} end), case V255 of {'Idris.Prelude.Types.Left', E186} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V257) -> begin (V258 = ((V8(V146))(V9))), case V258 of {'Idris.Prelude.Types.Left', E188} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V260) -> begin (V262 = begin (V261 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V261} end), case V262 of {'Idris.Prelude.Types.Left', E190} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E190)); {'Idris.Prelude.Types.Right', E191} -> (fun (V264) -> begin (V296 = begin (V295 = ('erlang':'put'(V1, case V264 of {'Idris.Core.Context.MkDefs', E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221} -> (fun (V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294) -> {'Idris.Core.Context.MkDefs', V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V215, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294} end(E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V295} end), case V296 of {'Idris.Prelude.Types.Left', E222} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V298) -> {'Idris.Prelude.Types.Right', V260} end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getLocalTerm'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, []}} end; [E0 | E1] -> (fun (V7, V8) -> fun (V9) -> ('case--getLocalTerm-10293'(V0, V7, V8, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V7, V3)), V9)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('un--localHelper'(V0, V1, V2, V3, V4, V7, V8, V10, fun (V14) -> fun (V15) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V14, V8, V11, V12, V15)) end end, V13)).
'un--checkCaseLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V50 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V11, case V19 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V20 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15))), case V50 of {'Idris.Prelude.Types.Left', E32} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V52) -> case V52 of {'Idris.Prelude.Types.Just', E34} -> (fun (V53) -> begin (V74 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Core.TT.Func'} end, ('Idris.Idris2.Core.Context.Context':'un--defNameType'(case V53 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V71 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V75 = {'Idris.Core.TT.Ref', V9, V74, V11}), begin (V76 = (('un--getLocalTerm'(V0, V1, V9, V8, V75, V12))(V15))), case V76 of {'Idris.Prelude.Types.Left', E55} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V78) -> case V78 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V79, V80) -> begin (V84 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updating case local "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V81) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V81)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V82, V83)) end end}, V80)))))))) end, V15))), case V84 of {'Idris.Prelude.Types.Left', E59} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"To"/utf8>> end, V8, V79, V15))), case V87 of {'Idris.Prelude.Types.Left', E61} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V89) -> begin (V92 = [{'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V11}, {'Idris.Builtin.MkPair', V80, fun (V90) -> fun (V91) -> V79 end end}}} | V7]), ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V92, V8, V13, V14, V15)) end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V14, V15)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
