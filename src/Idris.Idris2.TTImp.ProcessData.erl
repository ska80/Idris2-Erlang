-module('Idris.Idris2.TTImp.ProcessData').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in calcNaty-11719'/14,
  'case--case block in case block in case block in calcNaty-11683'/12,
  'case--case block in case block in calcNaty-11654'/11,
  'nested--8932-9491--in--un--updateNSApp'/4,
  'nested--11119-11476--in--un--isNullary'/5,
  'nested--9415-9915--in--un--getRetType'/5,
  'nested--9415-9916--in--un--getPats'/5,
  'nested--9508-10027--in--un--getDisjointPos'/6,
  'nested--9508-10023--in--un--disjointArgs'/5,
  'nested--9508-10024--in--un--disjoint'/5,
  'nested--9508-10025--in--un--allDisjointWith'/5,
  'nested--9508-10026--in--un--allDisjoint'/5,
  'un--updateNS'/3,
  'un--typeCon'/1,
  'un--shaped'/4,
  'un--processDataOpt'/5,
  'un--processData'/11,
  'un--hasArgs'/2,
  'un--getRelevantArg'/7,
  'un--getIndexPats'/3,
  'un--getDetags'/4,
  'un--firstArg'/1,
  'un--findNewtype'/3,
  'un--checkRetType'/4,
  'un--checkIsType'/5,
  'un--checkFamily'/6,
  'un--checkCon'/12,
  'un--calcRecord'/4,
  'un--calcNaty'/4,
  'un--calcMaybe'/3,
  'un--calcListy'/3,
  'un--calcEnum'/4,
  'un--calcConInfo'/5
]).
'case--case block in case block in case block in case block in calcNaty-11719'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V3)) of 1 -> begin (V15 = ('Idris.Idris2.Core.Context':'un--setFlag'(V5, V4, V6, {'Idris.Core.Context.Context.ConType', 8}, V13))), case V15 of {'Idris.Prelude.Types.Left', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--setFlag'(V5, V4, V8, {'Idris.Core.Context.Context.ConType', 9}, V13))), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Right', 1} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in calcNaty-11683'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> fun (V13) -> ('case--case block in case block in case block in case block in calcNaty-11719'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, ('un--typeCon'(V12)), V13)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in calcNaty-11654'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> ('case--case block in case block in case block in calcNaty-11683'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, ('un--firstArg'(case V11 of {'Idris.Core.Context.Context.MkCon', E1, E2, E3, E4} -> (fun (V12, V13, V14, V15) -> V15 end(E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8932-9491--in--un--updateNSApp'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V2)) of 1 -> {'Idris.TTImp.TTImp.IVar', V4, V1}; 0 -> {'Idris.TTImp.TTImp.IVar', V4, V5}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V6, V7, V8) -> {'Idris.TTImp.TTImp.IApp', V6, ('nested--8932-9491--in--un--updateNSApp'(V0, V1, V2, V7)), V8} end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IAutoApp', V9, ('nested--8932-9491--in--un--updateNSApp'(V0, V1, V2, V10)), V11} end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.INamedApp', V12, ('nested--8932-9491--in--un--updateNSApp'(V0, V1, V2, V13)), V14, V15} end(E8, E9, E10, E11)); _ -> V3 end.
'nested--11119-11476--in--un--isNullary'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V13 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V2, [], V8, {'Idris.Core.Env.Nil'}, case V3 of {'Idris.Core.Context.Context.MkCon', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> V12 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('un--hasArgs'(0, V15))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9415-9915--in--un--getRetType'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> begin (V13 = (((V8(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 0}))))(V4))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> ('nested--9415-9915--in--un--getRetType'(V0, V1, V2, V15, V4)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', V3} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', V3} end.
'nested--9415-9916--in--un--getPats'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, [], V2, ('Idris.Idris2.Builtin':'un--snd'(V10)))) end, V9, [], V4)) end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', []} end.
'nested--9508-10027--in--un--getDisjointPos'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V6, V7) -> begin (V8 = ('nested--9508-10027--in--un--getDisjointPos'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), V7, V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('nested--9508-10026--in--un--allDisjoint'(V0, V1, V2, V6, V5))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> case V13 of 1 -> {'Idris.Prelude.Types.Right', [V3 | V10]}; 0 -> {'Idris.Prelude.Types.Right', V10}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9508-10023--in--un--disjointArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 0} end; _ -> case V4 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', 0} end; _ -> fun (V7) -> case V3 of [E0 | E1] -> (fun (V8, V9) -> case V4 of [E2 | E3] -> (fun (V10, V11) -> begin (V12 = (('nested--9508-10024--in--un--disjoint'(V0, V1, V2, V8, V10))(V7))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> (('nested--9508-10023--in--un--disjointArgs'(V0, V1, V2, V9, V11))(V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--9508-10024--in--un--disjoint'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7, V13)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V20) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'(V20)))) end, V9, [], V10))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V25 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V24) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'(V24)))) end, V15, [], V10))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> (('nested--9508-10023--in--un--disjointArgs'(V0, V1, V2, V23, V27))(V10)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NTCon', E16, E17, E18, E19, E20} -> (fun (V28, V29, V30, V31, V32) -> fun (V33) -> case V4 of {'Idris.Core.Value.NDCon', E21, E22, E23, E24, E25} -> (fun (V34, V35, V36, V37, V38) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V29, V35)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> begin (V40 = begin (V39 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E26} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V42) -> begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V43) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V42, ('Idris.Idris2.Builtin':'un--snd'(V43)))) end, V32, [], V33))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> begin (V48 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V42, ('Idris.Idris2.Builtin':'un--snd'(V47)))) end, V38, [], V33))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> (('nested--9508-10023--in--un--disjointArgs'(V0, V1, V2, V46, V50))(V33)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23, E24, E25)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NPrimVal', E32, E33} -> (fun (V51, V52) -> fun (V53) -> case V4 of {'Idris.Core.Value.NPrimVal', E34, E35} -> (fun (V54, V55) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V52, V55))} end(E34, E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E32, E33)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', 0} end end.
'nested--9508-10025--in--un--allDisjointWith'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 1} end; _ -> fun (V6) -> case V3 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', 0} end(E4, E5)); _ -> case V4 of [E0 | E1] -> (fun (V9, V10) -> begin (V11 = (('nested--9508-10024--in--un--disjoint'(V0, V1, V2, V3, V9))(V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of 1 -> (('nested--9508-10025--in--un--allDisjointWith'(V0, V1, V2, V3, V10))(V6)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--9508-10026--in--un--allDisjoint'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', 1}; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', 0} end(E4, E5)); _ -> begin (V9 = ('nested--9508-10026--in--un--allDisjoint'(V0, V1, V2, V6, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case V11 of 1 -> (('nested--9508-10025--in--un--allDisjointWith'(V0, V1, V2, V5, V6))(V4)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateNS'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V7, ('un--updateNS'(V0, V1, V8))} end(E0, E1, E2, E3, E4, E5)); _ -> ('nested--8932-9491--in--un--updateNSApp'(V2, V1, V0, V2)) end.
'un--typeCon'(V0) -> case V0 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V1, V2, V3) -> case V2 of {'Idris.Core.TT.TyCon', E3, E4} -> (fun (V4, V5) -> {'Idris.Prelude.Types.Just', V3} end(E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2)); {'Idris.Core.TT.App', E5, E6, E7} -> (fun (V6, V7, V8) -> ('un--typeCon'(V7)) end(E5, E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--shaped'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; [E0 | E1] -> (fun (V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V14 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V0, [], V9, {'Idris.Core.Env.Nil'}, case V4 of {'Idris.Core.Context.Context.MkCon', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> V13 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> case ((V1('erased'))(V16)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', case V4 of {'Idris.Core.Context.Context.MkCon', E10, E11, E12, E13} -> (fun (V17, V18, V19, V20) -> V18 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}; 0 -> ('un--shaped'(V0, fun (V21) -> (V1('erased')) end, V5, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processDataOpt'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.TTImp.TTImp.NoHints'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.TTImp.TTImp.SearchBy', E0} -> (fun (V5) -> ('Idris.Idris2.Core.Context':'un--setDetermining'(V0, V1, V2, V5, V4)) end(E0)); {'Idris.TTImp.TTImp.UniqueSearch'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setUniqueSearch'(V0, V1, V2, 1, V4)) end()); {'Idris.TTImp.TTImp.External'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setExternal'(V0, V1, V2, 1, V4)) end()); {'Idris.TTImp.TTImp.NoNewtype'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.TTImp.TTImp.NoEnum'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.TTImp.TTImp.MkImpLater', E0, E1, E2} -> (fun (V11, V12, V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V12, V10))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V7, [], V0, V13, V10))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> begin (V54 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V23 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V24 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V54 of {'Idris.Prelude.Types.Left', E39} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V56) -> case V56 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V65 = begin (V57 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V16, V10))), case V57 of {'Idris.Prelude.Types.Left', E41} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V59) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V60) -> {'Idris.Core.Core.InCon', V7, V16, V60} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V59, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V61, V62)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V63) -> fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V63, V64)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V19}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V11))}))))(V10)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E43} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V68, V69) -> begin (V70 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V11, V6, V68))), begin (V71 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)))) end, {'Idris.Core.Env.Nil'}, V70, V10))), case V71 of {'Idris.Prelude.Types.Left', E47} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V73) -> begin (V77 = begin (V74 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V23, V6, V68))(V10))), case V74 of {'Idris.Prelude.Types.Left', E49} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V76) -> (('un--checkIsType'(V1, V7, V16, V6, V76))(V10)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V77 of {'Idris.Prelude.Types.Left', E51} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V23, {'Idris.Core.Env.Nil'}, V70, V10))), case V80 of {'Idris.Prelude.Types.Left', E53} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V82) -> begin (V87 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V16, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V16, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V83) -> fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V83, V84)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V85) -> fun (V86) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V85, V86)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V0, V70, V8, {'Idris.Core.Context.Context.TCon', 0, V82, [], [], ('Idris.Idris2.Core.Context.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V10))), case V87 of {'Idris.Prelude.Types.Left', E55} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V89) -> begin (V90 = ('Idris.Idris2.Core.Context':'un--addMutData'(V1, {'Idris.Core.Name.Resolved', V89}, V10))), case V90 of {'Idris.Prelude.Types.Left', E57} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V92) -> begin (V94 = begin (V93 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E59} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V96) -> begin (V159 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, V97, case V96 of {'Idris.Core.Context.MkDefs', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128) -> V100 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V98)) end end, case V96 of {'Idris.Core.Context.MkDefs', E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120} -> (fun (V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158) -> V130 end(E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V159 of {'Idris.Prelude.Types.Left', E121} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V161) -> begin (V164 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V162, V163)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V68)))), V10))), case V164 of {'Idris.Prelude.Types.Left', E123} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V166) -> begin (V167 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V16, V10))), case V167 of {'Idris.Prelude.Types.Left', E125} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V169) -> begin (V173 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V171, V172)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V68)))))))))))) end, V10))), case V173 of {'Idris.Prelude.Types.Left', E127} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V175) -> case V8 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> begin (V185 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V176) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V176)) end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V177, V178)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V179) -> fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V179, V180, V181)) end end end, fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V182, V183, V184)) end end end}, V16, V10))), case V185 of {'Idris.Prelude.Types.Left', E129} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V187) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V188) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V188)) end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V189, V190)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V191) -> fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V191, V192, V193)) end end end, fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V194, V195, V196)) end end end}, V70, V10)) end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E131} -> (fun (V197) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V16}, V10)) end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.MkImpData', E132, E133, E134, E135, E136} -> (fun (V198, V199, V200, V201, V202) -> begin (V203 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V199, V10))), case V203 of {'Idris.Prelude.Types.Left', E137} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V205) -> begin (V206 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V7, [], V0, V200, V10))), case V206 of {'Idris.Prelude.Types.Left', E139} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V208) -> begin (V209 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V205)))) end, V10))), case V209 of {'Idris.Prelude.Types.Left', E141} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V211) -> begin (V213 = begin (V212 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V212} end), case V213 of {'Idris.Prelude.Types.Left', E143} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V215) -> begin (V224 = begin (V216 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V205, V10))), case V216 of {'Idris.Prelude.Types.Left', E145} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V218) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V219) -> {'Idris.Core.Core.InCon', V7, V205, V219} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V218, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V220) -> fun (V221) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V220, V221)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V222) -> fun (V223) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V222, V223)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V208}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V198))}))))(V10)) end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V224 of {'Idris.Prelude.Types.Left', E147} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V226) -> case V226 of {'Idris.Builtin.MkPair', E149, E150} -> (fun (V227, V228) -> begin (V229 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V198, V6, V227))), begin (V260 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V205, case V215 of {'Idris.Core.Context.MkDefs', E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180} -> (fun (V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259) -> V230 end(E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V260 of {'Idris.Prelude.Types.Left', E181} -> (fun (V261) -> {'Idris.Prelude.Types.Left', V261} end(E181)); {'Idris.Prelude.Types.Right', E182} -> (fun (V262) -> begin (V341 = case V262 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E183} -> (fun (V263) -> case V263 of {'Idris.Core.Context.Context.MkGlobalDef', E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203} -> (fun (V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283) -> case V281 of {'Idris.Core.Context.Context.TCon', E204, E205, E206, E207, E208, E209, E210, E211} -> (fun (V284, V285, V286, V287, V288, V289, V290, V291) -> case V290 of [] -> begin (V312 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Term'(V1, [], V215, {'Idris.Core.Env.Nil'}, V229, case V263 of {'Idris.Core.Context.Context.MkGlobalDef', E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231} -> (fun (V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311) -> V294 end(E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V312 of {'Idris.Prelude.Types.Left', E232} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E232)); {'Idris.Prelude.Types.Right', E233} -> (fun (V314) -> case V314 of 1 -> {'Idris.Prelude.Types.Right', V289}; 0 -> begin (V335 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Previous"/utf8>> end, {'Idris.Core.Env.Nil'}, case V263 of {'Idris.Core.Context.Context.MkGlobalDef', E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253} -> (fun (V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334) -> V317 end(E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V335 of {'Idris.Prelude.Types.Left', E254} -> (fun (V336) -> {'Idris.Prelude.Types.Left', V336} end(E254)); {'Idris.Prelude.Types.Right', E255} -> (fun (V337) -> begin (V338 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Now"/utf8>> end, {'Idris.Core.Env.Nil'}, V229, V10))), case V338 of {'Idris.Prelude.Types.Left', E256} -> (fun (V339) -> {'Idris.Prelude.Types.Left', V339} end(E256)); {'Idris.Prelude.Types.Right', E257} -> (fun (V340) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V205}, V10)) end(E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V205}, V10)) end end(E204, E205, E206, E207, E208, E209, E210, E211)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V205}, V10)) end end(E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V341 of {'Idris.Prelude.Types.Left', E258} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V343) -> begin (V344 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V205)))) end, {'Idris.Core.Env.Nil'}, V229, V10))), case V344 of {'Idris.Prelude.Types.Left', E260} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V346) -> begin (V350 = begin (V347 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V215, V6, V227))(V10))), case V347 of {'Idris.Prelude.Types.Left', E262} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E262)); {'Idris.Prelude.Types.Right', E263} -> (fun (V349) -> (('un--checkIsType'(V1, V7, V205, V6, V349))(V10)) end(E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V350 of {'Idris.Prelude.Types.Left', E264} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E264)); {'Idris.Prelude.Types.Right', E265} -> (fun (V352) -> begin (V353 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V215, {'Idris.Core.Env.Nil'}, V229, V10))), case V353 of {'Idris.Prelude.Types.Left', E266} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E266)); {'Idris.Prelude.Types.Right', E267} -> (fun (V355) -> begin (V360 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V205, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V205, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V356) -> fun (V357) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V356, V357)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V358) -> fun (V359) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V358, V359)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V0, V229, V8, {'Idris.Core.Context.Context.TCon', 0, V355, [], [], ('Idris.Idris2.Core.Context.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V10))), case V360 of {'Idris.Prelude.Types.Left', E268} -> (fun (V361) -> {'Idris.Prelude.Types.Left', V361} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V362) -> begin (V384 = case V8 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> begin (V372 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V363) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V363)) end, fun (V364) -> fun (V365) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V364, V365)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V366) -> fun (V367) -> fun (V368) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V366, V367, V368)) end end end, fun (V369) -> fun (V370) -> fun (V371) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V369, V370, V371)) end end end}, V205, V10))), case V372 of {'Idris.Prelude.Types.Left', E270} -> (fun (V373) -> {'Idris.Prelude.Types.Left', V373} end(E270)); {'Idris.Prelude.Types.Right', E271} -> (fun (V374) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V375) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V375)) end, fun (V376) -> fun (V377) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V376, V377)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V378) -> fun (V379) -> fun (V380) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V378, V379, V380)) end end end, fun (V381) -> fun (V382) -> fun (V383) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V381, V382, V383)) end end end}, V229, V10)) end(E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V384 of {'Idris.Prelude.Types.Left', E272} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E272)); {'Idris.Prelude.Types.Right', E273} -> (fun (V386) -> begin (V387 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(V8, 1)) of 1 -> 0; 0 -> V8; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V390 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V388) -> fun (V389) -> ('un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V387, V199, {'Idris.Core.Name.Resolved', V362}, V388, V389)) end end, V202, [], V10))), case V390 of {'Idris.Prelude.Types.Left', E274} -> (fun (V391) -> {'Idris.Prelude.Types.Left', V391} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V392) -> begin (V393 = {'Idris.Core.Context.Context.MkData', {'Idris.Core.Context.Context.MkCon', V198, V205, V355, V229}, V392}), begin (V398 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V394) -> case V394 of {'Idris.Prelude.Types.Left', E276} -> (fun (V395) -> {'Idris.Prelude.Types.Left', V395} end(E276)); {'Idris.Prelude.Types.Right', E277} -> (fun (V396) -> {'Idris.Prelude.Types.Right', 0} end(E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V397) -> ('Idris.Idris2.Core.Context.Data':'un--addData'(V1, V0, V8, V362, V393, V397)) end, V10))), case V398 of {'Idris.Prelude.Types.Left', E278} -> (fun (V399) -> {'Idris.Prelude.Types.Left', V399} end(E278)); {'Idris.Prelude.Types.Right', E279} -> (fun (V400) -> begin (V405 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V401) -> fun (V402) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V401, V402)) end end, fun (V403) -> fun (V404) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V403, V404)) end end}, {'Idris.TTImp.TTImp.NoNewtype'}, V201)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('un--findNewtype'(V1, V392, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V405 of {'Idris.Prelude.Types.Left', E280} -> (fun (V406) -> {'Idris.Prelude.Types.Left', V406} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V407) -> begin (V409 = begin (V408 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V408} end), case V409 of {'Idris.Prelude.Types.Left', E282} -> (fun (V410) -> {'Idris.Prelude.Types.Left', V410} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V411) -> begin (V415 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V205)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" defined in a mutual block with "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V412) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V412)) end, fun (V413) -> fun (V414) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V413, V414)) end end}, V343)))))) end, V10))), case V415 of {'Idris.Prelude.Types.Left', E284} -> (fun (V416) -> {'Idris.Prelude.Types.Left', V416} end(E284)); {'Idris.Prelude.Types.Right', E285} -> (fun (V417) -> begin (V418 = ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, {'Idris.Core.Name.Resolved', V362}, V343, V10))), case V418 of {'Idris.Prelude.Types.Left', E286} -> (fun (V419) -> {'Idris.Prelude.Types.Left', V419} end(E286)); {'Idris.Prelude.Types.Right', E287} -> (fun (V420) -> begin (V423 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V421) -> fun (V422) -> ('un--processDataOpt'(V1, V7, {'Idris.Core.Name.Resolved', V362}, V421, V422)) end end, V201, V10))), case V423 of {'Idris.Prelude.Types.Left', E288} -> (fun (V424) -> {'Idris.Prelude.Types.Left', V424} end(E288)); {'Idris.Prelude.Types.Right', E289} -> (fun (V425) -> begin (V426 = ('Idris.Idris2.Core.Context':'un--dropMutData'(V1, {'Idris.Core.Name.Resolved', V362}, V10))), case V426 of {'Idris.Prelude.Types.Left', E290} -> (fun (V427) -> {'Idris.Prelude.Types.Left', V427} end(E290)); {'Idris.Prelude.Types.Right', E291} -> (fun (V428) -> begin (V434 = ('un--getDetags'(V1, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V429) -> case V429 of {'Idris.Core.Context.Context.MkCon', E292, E293, E294, E295} -> (fun (V430, V431, V432, V433) -> V433 end(E292, E293, E294, E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V392)), V10))), case V434 of {'Idris.Prelude.Types.Left', E296} -> (fun (V435) -> {'Idris.Prelude.Types.Left', V435} end(E296)); {'Idris.Prelude.Types.Right', E297} -> (fun (V436) -> begin (V437 = ('Idris.Idris2.Core.Context':'un--setDetags'(V1, V7, {'Idris.Core.Name.Resolved', V362}, V436, V10))), case V437 of {'Idris.Prelude.Types.Left', E298} -> (fun (V438) -> {'Idris.Prelude.Types.Left', V438} end(E298)); {'Idris.Prelude.Types.Right', E299} -> (fun (V439) -> begin (V442 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V440) -> fun (V441) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V440, V441)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V227)))), V10))), case V442 of {'Idris.Prelude.Types.Left', E300} -> (fun (V443) -> {'Idris.Prelude.Types.Left', V443} end(E300)); {'Idris.Prelude.Types.Right', E301} -> (fun (V444) -> begin (V445 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V205, V10))), case V445 of {'Idris.Prelude.Types.Left', E302} -> (fun (V446) -> {'Idris.Prelude.Types.Left', V446} end(E302)); {'Idris.Prelude.Types.Right', E303} -> (fun (V447) -> begin (V451 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V205)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V448) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V448)) end, fun (V449) -> fun (V450) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V449, V450)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V227)))))))))))) end, V10))), case V451 of {'Idris.Prelude.Types.Left', E304} -> (fun (V452) -> {'Idris.Prelude.Types.Left', V452} end(E304)); {'Idris.Prelude.Types.Right', E305} -> (fun (V453) -> begin (V459 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V454) -> case V454 of {'Idris.Core.Context.Context.MkCon', E306, E307, E308, E309} -> (fun (V455, V456, V457, V458) -> V456 end(E306, E307, E308, E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V392))), begin (V466 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V460) -> fun (V461) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V460, V461)) end end, fun (V462) -> fun (V463) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V462, V463)) end end}, {'Idris.TTImp.TTImp.NoHints'}, V201)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V464) -> fun (V465) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V1, V7, {'Idris.Core.Name.Resolved', V362}, V464, 1, 0, V465)) end end, V459, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V466 of {'Idris.Prelude.Types.Left', E310} -> (fun (V467) -> {'Idris.Prelude.Types.Left', V467} end(E310)); {'Idris.Prelude.Types.Right', E311} -> (fun (V468) -> begin (V473 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V469) -> fun (V470) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V469, V470)) end end, fun (V471) -> fun (V472) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V471, V472)) end end}, {'Idris.TTImp.TTImp.NoEnum'}, V201)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('un--calcConInfo'(V1, V7, {'Idris.Core.Name.Resolved', V362}, V392, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V473 of {'Idris.Prelude.Types.Left', E312} -> (fun (V474) -> {'Idris.Prelude.Types.Left', V474} end(E312)); {'Idris.Prelude.Types.Right', E313} -> (fun (V475) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V476) -> fun (V477) -> ('Idris.Idris2.TTImp.Elab.Utils':'un--updateErasable'(V1, V476, V477)) end end, [{'Idris.Core.Name.Resolved', V362} | V459], V10)) end(E313)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E311)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E303)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E301)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E297)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132, E133, E134, E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--hasArgs'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.TT.Bind', E8, E9, E10, E11} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V6, V7, V8, V9) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V7)) of 1 -> ('un--hasArgs'(0, V5)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14, E15)); _ -> 1 end end(E8, E9, E10, E11)); _ -> 1 end; _ -> begin (V18 = (V0 - 1)), case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V19, V20, V21, V22) -> case V21 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V23, V24, V25, V26) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V33, V34)) end end}}, V24)) of 1 -> ('un--hasArgs'((1 + V18), V22)); 0 -> ('un--hasArgs'(V18, V22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); _ -> 0 end end end.
'un--getRelevantArg'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> begin (V15 = (((V10(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V7, 0}))))(V6))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, [], V1, V14))(V6))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> (('Idris.Idris2.Algebra.Semiring':'un--branchZero'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V27, V28)) end end}}, fun () -> fun (V29) -> ('un--getRelevantArg'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2)), V3, V4, V17, V29)) end end, case V20 of {'Idris.Core.Value.NPrimVal', E14, E15} -> (fun (V30, V31) -> case V31 of {'Idris.Core.TT.WorldType'} -> (fun () -> fun () -> fun (V32) -> begin (V33 = (((V10(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V7, 0}))))(V32))), case V33 of {'Idris.Prelude.Types.Left', E18} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V35) -> ('un--getRelevantArg'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2)), V3, 0, V35, V32)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V36) -> begin (V37 = (((V10(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V7, 0}))))(V36))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> ('un--getRelevantArg'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2)), {'Idris.Prelude.Types.Just', V2}, 0, V39, V36)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V40) -> fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V3)) end end end(E14, E15)); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V42) -> begin (V43 = (((V10(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V7, 0}))))(V42))), case V43 of {'Idris.Prelude.Types.Left', E12} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V45) -> ('un--getRelevantArg'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2)), {'Idris.Prelude.Types.Just', V2}, 0, V45, V42)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V46) -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V3)) end end, V12))(V6)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V48) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V48}} end end, V3))} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V49) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V49}} end end, V3))} end.
'un--getIndexPats'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V6, {'Idris.Core.Env.Nil'}, V1))(V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('nested--9415-9915--in--un--getRetType'(V1, V0, V6, V9, V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> ('nested--9415-9916--in--un--getPats'(V1, V0, V6, V12, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDetags'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; [E4 | E5] -> (fun (V4, V5) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; _ -> begin (V8 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V6) -> fun (V7) -> ('un--getIndexPats'(V0, V6, V7)) end end, V2, [], V3))), case V8 of {'Idris.Prelude.Types.Left', E6} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V10) -> begin (V11 = ('nested--9508-10027--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'(V10)), V3))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> case V13 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V13}} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> fun (V15) -> ('un--getIndexPats'(V0, V14, V15)) end end, V2, [], V3))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = ('nested--9508-10027--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'(V18)), V3))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> case V21 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--firstArg'(V0) -> case V0 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V15, V16)) end end}}, V6)) of 1 -> ('un--firstArg'(V4)); 0 -> {'Idris.Prelude.Types.Just', V8}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--findNewtype'(V0, V1, V2) -> case V1 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V16 = begin (V13 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V8, {'Idris.Core.Env.Nil'}, case V3 of {'Idris.Core.Context.Context.MkCon', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> V12 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> ('un--getRelevantArg'(V0, V8, 0, {'Idris.Prelude.Types.Nothing'}, 1, V15, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E12} -> (fun (V19) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V0, case V3 of {'Idris.Core.Context.Context.MkCon', E13, E14, E15, E16} -> (fun (V20, V21, V22, V23) -> V21 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V24) -> case V24 of {'Idris.Core.Context.Context.DCon', E17, E18, E19} -> (fun (V25, V26, V27) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.DCon', V25, V26, {'Idris.Prelude.Types.Just', V19}}} end(E17, E18, E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V2)) end(E12)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--checkRetType'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = (((V7(V16))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Idris.Core.TT.Erased', V4, 0}))))(V12))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> (('un--checkRetType'(V0, V1, V19, V3))(V12)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> (V3(V2)) end end(E0, E1, E2, E3)); _ -> (V3(V2)) end.
'un--checkIsType'(V0, V1, V2, V3, V4) -> ('un--checkRetType'(V0, V3, V4, fun (V5) -> fun (V6) -> case V5 of {'Idris.Core.Value.NType', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Right', 0} end(E0)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadTypeConType', V1, V2}, V6)) end end end)).
'un--checkFamily'(V0, V1, V2, V3, V4, V5) -> ('un--checkRetType'(V0, V4, V5, fun (V6) -> fun (V7) -> case V6 of {'Idris.Core.Value.NType', E0} -> (fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadDataConType', V1, V2, V3}, V7)) end(E0)); {'Idris.Core.Value.NTCon', E1, E2, E3, E4, E5} -> (fun (V9, V10, V11, V12, V13) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V10)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadDataConType', V1, V2, V3}, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3, E4, E5)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadDataConType', V1, V2, V3}, V7)) end end end)).
'un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V12, V13, V14, V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V14, V11))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('un--updateNS'(V8, V9, V15))), begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking constructor type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V21, V22)) end end}, V19)))))))) end, V11))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updated "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}, {'Idris.Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V30, V31)) end end}}, {'Idris.Builtin.MkPair', V8, V9})))) end, V11))), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E10} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V38) -> begin (V69 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V18, case V38 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V39 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V69 of {'Idris.Prelude.Types.Left', E42} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V71) -> case V71 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V81 = begin (V72 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V18, V11))), case V72 of {'Idris.Prelude.Types.Left', E44} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V74) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V75) -> {'Idris.Core.Core.InCon', V12, V18, V75} end, fun (V76) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V74, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V12, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V77) -> fun (V78) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V77, V78)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V79, V80)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V19}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V12)), V76)) end))(V11)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V81 of {'Idris.Prelude.Types.Left', E46} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V83) -> begin (V87 = begin (V84 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V38, V6, V83))(V11))), case V84 of {'Idris.Prelude.Types.Left', E48} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V86) -> (('un--checkFamily'(V1, V12, V18, V9, V6, V86))(V11)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V87 of {'Idris.Prelude.Types.Left', E50} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V89) -> begin (V90 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V12, V6, V83))), begin (V91 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)))) end, {'Idris.Core.Env.Nil'}, V90, V11))), case V91 of {'Idris.Prelude.Types.Left', E52} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V93) -> begin (V96 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V94, V95)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V83)))), V11))), case V96 of {'Idris.Prelude.Types.Left', E54} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V98) -> begin (V99 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V18, V11))), case V99 of {'Idris.Prelude.Types.Left', E56} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V101) -> begin (V105 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V103, V104)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V83)))))))))))) end, V11))), case V105 of {'Idris.Prelude.Types.Left', E58} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V107) -> begin (V129 = case V7 of 2 -> begin (V117 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V108) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V109, V110)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V111, V112, V113)) end end end, fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V114, V115, V116)) end end end}, V18, V11))), case V117 of {'Idris.Prelude.Types.Left', E60} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V119) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V120) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V121, V122)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V123, V124, V125)) end end end, fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V126, V127, V128)) end end end}, V90, V11)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end), case V129 of {'Idris.Prelude.Types.Left', E62} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V131) -> begin (V132 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V38, {'Idris.Core.Env.Nil'}, V90, V11))), case V132 of {'Idris.Prelude.Types.Left', E64} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V134) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkCon', V12, V18, V134, V90}} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E66} -> (fun (V135) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V12, V18}, V11)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--calcRecord'(V0, V1, V2, V3) -> case V2 of [E0 | E1] -> (fun (V4, V5) -> case V5 of [] -> begin (V10 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, case V4 of {'Idris.Core.Context.Context.MkCon', E2, E3, E4, E5} -> (fun (V6, V7, V8, V9) -> V7 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Context.Context.ConType', 7}, V3))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', 1} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--calcNaty'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> case V5 of [E2 | E3] -> (fun (V7, V8) -> case V8 of [] -> begin (V11 = ('un--shaped'(V0, fun (V9) -> fun (V10) -> ('un--hasArgs'(0, V10)) end end, V3, V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = [V4 | [V7 | []]]), case V13 of {'Idris.Prelude.Types.Just', E6} -> (fun (V15) -> begin (V18 = ('un--shaped'(V0, fun (V16) -> fun (V17) -> ('un--hasArgs'((1 + 0), V17)) end end, V14, V6))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> begin (V21 = {'Idris.Prelude.Types.Just', V15}), case V20 of {'Idris.Prelude.Types.Just', E9} -> (fun (V22) -> begin (V23 = {'Idris.Prelude.Types.Just', V22}), (('case--case block in case block in calcNaty-11654'(V7, V4, V14, V2, V1, V0, V15, V21, V22, V23, ('Idris.Idris2.Data.List':'un--find'(fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(case V24 of {'Idris.Core.Context.Context.MkCon', E10, E11, E12, E13} -> (fun (V25, V26, V27, V28) -> V26 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22)) end, V14))))(V6)) end end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--calcMaybe'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> case V4 of [E2 | E3] -> (fun (V6, V7) -> case V7 of [] -> begin (V10 = ('un--shaped'(V0, fun (V8) -> fun (V9) -> ('un--hasArgs'(0, V9)) end end, V2, V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = [V3 | [V6 | []]]), case V12 of {'Idris.Prelude.Types.Just', E6} -> (fun (V14) -> begin (V17 = ('un--shaped'(V0, fun (V15) -> fun (V16) -> ('un--hasArgs'((1 + 0), V16)) end end, V13, V5))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> case V19 of {'Idris.Prelude.Types.Just', E9} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V14, {'Idris.Core.Context.Context.ConType', 5}, V5))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V20, {'Idris.Core.Context.Context.ConType', 6}, V5))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Right', 1} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--calcListy'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> case V4 of [] -> begin (V8 = ('un--shaped'(V0, fun (V6) -> fun (V7) -> ('un--hasArgs'((1 + (1 + 0)), V7)) end end, V2, V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E4} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V11, {'Idris.Core.Context.Context.ConType', 3}, V5))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', 1} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E7 | E8] -> (fun (V15, V16) -> case V16 of [] -> begin (V19 = ('un--shaped'(V0, fun (V17) -> fun (V18) -> ('un--hasArgs'(0, V18)) end end, V2, V5))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> begin (V22 = [V3 | [V15 | []]]), case V21 of {'Idris.Prelude.Types.Just', E11} -> (fun (V23) -> begin (V26 = ('un--shaped'(V0, fun (V24) -> fun (V25) -> ('un--hasArgs'((1 + (1 + 0)), V25)) end end, V22, V5))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> case V28 of {'Idris.Prelude.Types.Just', E14} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V23, {'Idris.Core.Context.Context.ConType', 2}, V5))), case V30 of {'Idris.Prelude.Types.Left', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V29, {'Idris.Core.Context.Context.ConType', 3}, V5))), case V33 of {'Idris.Prelude.Types.Left', E17} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Right', 1} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--calcEnum'(V0, V1, V2, V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--allM'(fun (V4) -> fun (V5) -> ('nested--11119-11476--in--un--isNullary'(V2, V1, V0, V4, V5)) end end, V2, V3))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of 1 -> begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V9, {'Idris.Core.Context.Context.ConType', 4}, V10)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> case V11 of {'Idris.Core.Context.Context.MkCon', E2, E3, E4, E5} -> (fun (V12, V13, V14, V15) -> V13 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)), V3))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Right', 1} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--calcConInfo'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--calcNaty'(V0, V1, V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of 0 -> begin (V8 = (('un--calcListy'(V0, V1, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V10 of 0 -> begin (V11 = (('un--calcMaybe'(V0, V1, V3))(V4))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> case V13 of 0 -> begin (V14 = ('un--calcEnum'(V0, V1, V3, V4))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> case V16 of 0 -> begin (V17 = ('un--calcRecord'(V0, V1, V3, V4))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> case V19 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
