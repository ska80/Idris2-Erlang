-module('Idris.Idris2.TTImp.ProcessBuiltin').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in processIntegerToNat-21183'/20,
  'case--case block in case block in case block in processIntegerToNat-21137'/17,
  'case--case block in processIntegerToNat-21041'/12,
  'case--case block in case block in case block in processNatToInteger-20515'/19,
  'case--case block in case block in processNatToInteger-20469'/16,
  'case--case block in processNatToInteger-20413'/11,
  'case--case block in case block in processBuiltinNatural-20195'/11,
  'case--case block in checkNatCons,checkCon-19679'/11,
  'nested--8669-19281--in--un--isNatFlag'/4,
  'nested--7929-18601--in--un--isInteger'/5,
  'nested--8669-19282--in--un--hasNatFlag'/4,
  'nested--8805-19407--in--un--checkTyS'/6,
  'nested--8805-19408--in--un--checkCon'/7,
  'un--termConMatch'/2,
  'un--showDefType'/1,
  'un--processNatToInteger'/3,
  'un--processIntegerToNat'/3,
  'un--processBuiltinNatural'/4,
  'un--processBuiltin'/6,
  'un--isStrict'/1,
  'un--isNatural'/4,
  'un--getTypeCons'/2,
  'un--getReturnType'/2,
  'un--getNEIntegerIndex'/1,
  'un--getNEIndex'/1,
  'un--getNEArgs'/2,
  'un--getFirstNEType'/2,
  'un--getConsGDef'/4,
  'un--checkNatCons'/5
]).
'case--case block in case block in case block in case block in processIntegerToNat-21183'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> begin (V21 = ('un--isNatural'(V0, V2, V20, V19))), case V21 of {'Idris.Prelude.Types.Left', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V23) -> case V23 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V2, {'Idris.Core.Name.Resolved', V6}, {'Idris.Core.Context.Context.Identity', V15}, V19)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, <<"Return type is not a \x{27}Nat\x{27}-like type"/utf8>>}, V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No type constructor found for return type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V19)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processIntegerToNat-21137'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> case V17 of {'Idris.Builtin.DPair.MkDPair', E1, E2} -> (fun (V18, V19) -> fun (V20) -> ('case--case block in case block in case block in case block in processIntegerToNat-21183'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V19, ('un--getTypeCons'(V18, V19)), V20)) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V9))))}, V21)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processIntegerToNat-21041'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V12, V13, V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"builtin.IntegerToNatural"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, V3)) end, V9, V11))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> case ('un--getNEIntegerIndex'(V9)) of {'Idris.Prelude.Types.Just', E7} -> (fun (V20) -> case V20 of [E8 | E9] -> (fun (V21, V22) -> case V22 of [] -> (('case--case block in case block in case block in processIntegerToNat-21137'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V13, V14, V15, V16, V21, ('un--getReturnType'([], V9))))(V11)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than one unrestricted arguments of type `Integer` found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V11)) end end(E8, E9)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No unrestricted arguments of type `Integer` found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V11)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than one unrestricted arguments of type `Integer` found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V11)) end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected arity while processing %builtin IntegerToNatural "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<" (getNEIntegerIndex returned Nothing)"/utf8>>))))}, V11)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected function definition, found "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showDefType'(V10)), <<"."/utf8>>))))}, V11)) end.
'case--case block in case block in case block in processNatToInteger-20515'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> begin (V20 = ('un--isNatural'(V0, V2, V19, V18))), case V20 of {'Idris.Prelude.Types.Left', E1} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V22) -> case V22 of 1 -> case ('un--getNEIndex'(V14)) of {'Idris.Prelude.Types.Just', E3} -> (fun (V23) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V2, {'Idris.Core.Name.Resolved', V6}, {'Idris.Core.Context.Context.Identity', V23}, V18)) end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Couldn\x{27}t find non-erased argument."/utf8>>}, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, <<"Non-erased argument is not a \x{27}Nat\x{27}-like type."/utf8>>}, V18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No type constructor found for non-erased arguement of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processNatToInteger-20469'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V18, V19) -> case V17 of [] -> fun (V20) -> ('case--case block in case block in case block in processNatToInteger-20515'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V18, V19, ('un--getTypeCons'(V18, V19)), V20)) end; _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than 1 non-erased arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V21)) end end end(E2, E3)); _ -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than 1 non-erased arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V22)) end end end(E0, E1)); [] -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V23)) end; _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than 1 non-erased arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>))))}, V24)) end end.
'case--case block in processNatToInteger-20413'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V11, V12, V13, V14, V15) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V19, V20, V21)) end end end}, case V7 of {'Idris.Core.Context.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V24 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V42 of {'Idris.Prelude.Types.Left', E25} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"builtin.NaturalToInteger"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, V3)) end, V44, V10))), case V45 of {'Idris.Prelude.Types.Left', E27} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V47) -> (('case--case block in case block in processNatToInteger-20469'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V12, V13, V15, V14, V44, ('un--getNEArgs'([], V44))))(V10)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected function definition, found "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showDefType'(V9)), <<"."/utf8>>))))}, V10)) end.
'case--case block in case block in processBuiltinNatural-20195'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.Context.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V19 = ('un--getConsGDef'(V0, V2, V17, V10))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> ('un--checkNatCons'(case V3 of {'Idris.Core.Context.MkDefs', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V22 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V21, V5, V2, V10)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected a type constructor, found "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showDefType'(V9)), <<"."/utf8>>))))}, V10)) end.
'case--case block in checkNatCons,checkCon-19679'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Context.Context.DCon', E0, E1, E2} -> (fun (V11, V12, V13) -> case ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V12 - ('Idris.Idris2.Prelude.Types.List':'un--length'(case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V17 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))) of 0 -> fun (V34) -> case V7 of {'Idris.Prelude.Types.Just', E26} -> (fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Multiple \x{27}Z\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>))))}, V34)) end(E26)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, V8}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V56 = (('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V12 - ('Idris.Idris2.Prelude.Types.List':'un--length'(case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V39 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))) - 1)), fun (V57) -> case V56 of 0 -> case V8 of {'Idris.Prelude.Types.Just', E23} -> (fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Multiple \x{27}S\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>))))}, V57)) end(E23)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V59 = (('nested--8805-19407--in--un--checkTyS'(V0, V1, V2, V3, V4, V5))(V57))), case V59 of {'Idris.Prelude.Types.Left', E24} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, {'Idris.Prelude.Types.Just', V4}}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), <<" doesn\x{27}t match any pattern for Natural."/utf8>>))))}, V57)) end end end end end(E0, E1, E2)); _ -> fun (V62) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected data constructor, found:"/utf8>>, ('un--showDefType'(V10))))}, V62)) end end.
'nested--8669-19281--in--un--isNatFlag'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Context.Context.ConType', E0} -> (fun (V4) -> case V4 of 8 -> 1; 9 -> 1; _ -> 0 end end(E0)); _ -> 0 end.
'nested--7929-18601--in--un--isInteger'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.PrimVal', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Core.TT.IntegerType'} -> (fun () -> 1 end()); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--8669-19282--in--un--hasNatFlag'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, fun (V32) -> ('nested--8669-19281--in--un--isNatFlag'(V0, V1, V2, V32)) end, case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V44 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8805-19407--in--un--checkTyS'(V0, V1, V2, V3, V4, V5) -> begin (V26 = case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('un--getFirstNEType'([], V26)) of {'Idris.Prelude.Types.Just', E20} -> (fun (V27) -> case V27 of {'Idris.Builtin.DPair.MkDPair', E21, E22} -> (fun (V28, V29) -> fun (V30) -> case ('un--getReturnType'([], V26)) of {'Idris.Prelude.Types.Just', E23} -> (fun (V31) -> case V31 of {'Idris.Builtin.DPair.MkDPair', E24, E25} -> (fun (V32, V33) -> begin (V34 = case ('un--termConMatch'(V29, V33)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Incorrect type for \x{27}S\x{27}-like constructor for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>))))}, V30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V34 of {'Idris.Prelude.Types.Left', E26} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V36) -> begin (V37 = case ('un--isStrict'(V29)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, <<"Natural builtin does not support lazy types."/utf8>>}, V30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V37 of {'Idris.Prelude.Types.Left', E28} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Right', 0} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V26))))}, V30)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V40) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Expected a non-erased argument, found none."/utf8>>}, V40)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8805-19408--in--un--checkCon'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V9 = (V5(V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = {'Idris.Builtin.MkPair', V12, V13}), (('case--case block in checkNatCons,checkCon-19679'(V0, V1, V2, V3, V7, V8, V5, V12, V13, V14, case V8 of {'Idris.Core.Context.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V32 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--termConMatch'(V0, V1) -> case V0 of {'Idris.Core.TT.Local', E40, E41, E42} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.TT.Local', E83, E84, E85} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V4, V7)) end(E83, E84, E85)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E80, E81, E82} -> (fun (V8, V9, V10) -> ('un--termConMatch'(V0, V10)) end(E80, E81, E82)); _ -> case V0 of {'Idris.Core.TT.TDelay', E56, E57, E58, E59} -> (fun (V11, V12, V13, V14) -> case V1 of {'Idris.Core.TT.TDelay', E73, E74, E75, E76} -> (fun (V15, V16, V17, V18) -> case ('un--termConMatch'(V13, V17)) of 1 -> ('un--termConMatch'(V14, V18)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73, E74, E75, E76)); _ -> case V1 of {'Idris.Core.TT.TForce', E70, E71, E72} -> (fun (V19, V20, V21) -> ('un--termConMatch'(V0, V21)) end(E70, E71, E72)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E60, E61} -> (fun (V22, V23) -> case V1 of {'Idris.Core.TT.PrimVal', E62, E63} -> (fun (V24, V25) -> 1 end(E62, E63)); _ -> 0 end end(E60, E61)); {'Idris.Core.TT.Erased', E64, E65} -> (fun (V26, V27) -> case V1 of {'Idris.Core.TT.Erased', E66, E67} -> (fun (V28, V29) -> 1 end(E66, E67)); _ -> 0 end end(E64, E65)); {'Idris.Core.TT.TType', E68} -> (fun (V30) -> case V1 of {'Idris.Core.TT.TType', E69} -> (fun (V31) -> 1 end(E69)); _ -> 0 end end(E68)); _ -> 0 end end end end(E56, E57, E58, E59)); {'Idris.Core.TT.TForce', E77, E78, E79} -> (fun (V32, V33, V34) -> ('un--termConMatch'(V34, V1)) end(E77, E78, E79)); _ -> case V1 of {'Idris.Core.TT.TForce', E53, E54, E55} -> (fun (V35, V36, V37) -> ('un--termConMatch'(V0, V37)) end(E53, E54, E55)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E43, E44} -> (fun (V38, V39) -> case V1 of {'Idris.Core.TT.PrimVal', E45, E46} -> (fun (V40, V41) -> 1 end(E45, E46)); _ -> 0 end end(E43, E44)); {'Idris.Core.TT.Erased', E47, E48} -> (fun (V42, V43) -> case V1 of {'Idris.Core.TT.Erased', E49, E50} -> (fun (V44, V45) -> 1 end(E49, E50)); _ -> 0 end end(E47, E48)); {'Idris.Core.TT.TType', E51} -> (fun (V46) -> case V1 of {'Idris.Core.TT.TType', E52} -> (fun (V47) -> 1 end(E52)); _ -> 0 end end(E51)); _ -> 0 end end end end end end(E40, E41, E42)); {'Idris.Core.TT.Ref', E86, E87, E88} -> (fun (V48, V49, V50) -> case V1 of {'Idris.Core.TT.Ref', E129, E130, E131} -> (fun (V51, V52, V53) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V50, V53)) end(E129, E130, E131)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E126, E127, E128} -> (fun (V54, V55, V56) -> ('un--termConMatch'(V0, V56)) end(E126, E127, E128)); _ -> case V0 of {'Idris.Core.TT.TDelay', E102, E103, E104, E105} -> (fun (V57, V58, V59, V60) -> case V1 of {'Idris.Core.TT.TDelay', E119, E120, E121, E122} -> (fun (V61, V62, V63, V64) -> case ('un--termConMatch'(V59, V63)) of 1 -> ('un--termConMatch'(V60, V64)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E119, E120, E121, E122)); _ -> case V1 of {'Idris.Core.TT.TForce', E116, E117, E118} -> (fun (V65, V66, V67) -> ('un--termConMatch'(V0, V67)) end(E116, E117, E118)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E106, E107} -> (fun (V68, V69) -> case V1 of {'Idris.Core.TT.PrimVal', E108, E109} -> (fun (V70, V71) -> 1 end(E108, E109)); _ -> 0 end end(E106, E107)); {'Idris.Core.TT.Erased', E110, E111} -> (fun (V72, V73) -> case V1 of {'Idris.Core.TT.Erased', E112, E113} -> (fun (V74, V75) -> 1 end(E112, E113)); _ -> 0 end end(E110, E111)); {'Idris.Core.TT.TType', E114} -> (fun (V76) -> case V1 of {'Idris.Core.TT.TType', E115} -> (fun (V77) -> 1 end(E115)); _ -> 0 end end(E114)); _ -> 0 end end end end(E102, E103, E104, E105)); {'Idris.Core.TT.TForce', E123, E124, E125} -> (fun (V78, V79, V80) -> ('un--termConMatch'(V80, V1)) end(E123, E124, E125)); _ -> case V1 of {'Idris.Core.TT.TForce', E99, E100, E101} -> (fun (V81, V82, V83) -> ('un--termConMatch'(V0, V83)) end(E99, E100, E101)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E89, E90} -> (fun (V84, V85) -> case V1 of {'Idris.Core.TT.PrimVal', E91, E92} -> (fun (V86, V87) -> 1 end(E91, E92)); _ -> 0 end end(E89, E90)); {'Idris.Core.TT.Erased', E93, E94} -> (fun (V88, V89) -> case V1 of {'Idris.Core.TT.Erased', E95, E96} -> (fun (V90, V91) -> 1 end(E95, E96)); _ -> 0 end end(E93, E94)); {'Idris.Core.TT.TType', E97} -> (fun (V92) -> case V1 of {'Idris.Core.TT.TType', E98} -> (fun (V93) -> 1 end(E98)); _ -> 0 end end(E97)); _ -> 0 end end end end end end(E86, E87, E88)); {'Idris.Core.TT.Meta', E132, E133, E134, E135} -> (fun (V94, V95, V96, V97) -> case V1 of {'Idris.Core.TT.Meta', E176, E177, E178, E179} -> (fun (V98, V99, V100, V101) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V96, V100)) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V109, V110, V111)) end end end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V113)) end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V117, V118, V119, V120)) end end end end end end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V122)) end end, fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V125, V126, V127)) end end end end end}, fun (V128) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V129) -> fun (V130) -> ('un--termConMatch'(V129, V130)) end end, V128)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V97, V101)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E176, E177, E178, E179)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E173, E174, E175} -> (fun (V131, V132, V133) -> ('un--termConMatch'(V0, V133)) end(E173, E174, E175)); _ -> case V0 of {'Idris.Core.TT.TDelay', E149, E150, E151, E152} -> (fun (V134, V135, V136, V137) -> case V1 of {'Idris.Core.TT.TDelay', E166, E167, E168, E169} -> (fun (V138, V139, V140, V141) -> case ('un--termConMatch'(V136, V140)) of 1 -> ('un--termConMatch'(V137, V141)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E166, E167, E168, E169)); _ -> case V1 of {'Idris.Core.TT.TForce', E163, E164, E165} -> (fun (V142, V143, V144) -> ('un--termConMatch'(V0, V144)) end(E163, E164, E165)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E153, E154} -> (fun (V145, V146) -> case V1 of {'Idris.Core.TT.PrimVal', E155, E156} -> (fun (V147, V148) -> 1 end(E155, E156)); _ -> 0 end end(E153, E154)); {'Idris.Core.TT.Erased', E157, E158} -> (fun (V149, V150) -> case V1 of {'Idris.Core.TT.Erased', E159, E160} -> (fun (V151, V152) -> 1 end(E159, E160)); _ -> 0 end end(E157, E158)); {'Idris.Core.TT.TType', E161} -> (fun (V153) -> case V1 of {'Idris.Core.TT.TType', E162} -> (fun (V154) -> 1 end(E162)); _ -> 0 end end(E161)); _ -> 0 end end end end(E149, E150, E151, E152)); {'Idris.Core.TT.TForce', E170, E171, E172} -> (fun (V155, V156, V157) -> ('un--termConMatch'(V157, V1)) end(E170, E171, E172)); _ -> case V1 of {'Idris.Core.TT.TForce', E146, E147, E148} -> (fun (V158, V159, V160) -> ('un--termConMatch'(V0, V160)) end(E146, E147, E148)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E136, E137} -> (fun (V161, V162) -> case V1 of {'Idris.Core.TT.PrimVal', E138, E139} -> (fun (V163, V164) -> 1 end(E138, E139)); _ -> 0 end end(E136, E137)); {'Idris.Core.TT.Erased', E140, E141} -> (fun (V165, V166) -> case V1 of {'Idris.Core.TT.Erased', E142, E143} -> (fun (V167, V168) -> 1 end(E142, E143)); _ -> 0 end end(E140, E141)); {'Idris.Core.TT.TType', E144} -> (fun (V169) -> case V1 of {'Idris.Core.TT.TType', E145} -> (fun (V170) -> 1 end(E145)); _ -> 0 end end(E144)); _ -> 0 end end end end end end(E132, E133, E134, E135)); {'Idris.Core.TT.Bind', E180, E181, E182, E183} -> (fun (V171, V172, V173, V174) -> case V1 of {'Idris.Core.TT.Bind', E224, E225, E226, E227} -> (fun (V175, V176, V177, V178) -> case ('Idris.Idris2.Core.TT':'un--eqBinderBy'(fun (V179) -> fun (V180) -> ('un--termConMatch'(V179, V180)) end end, V173, V177)) of 1 -> ('un--termConMatch'(V174, V178)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E224, E225, E226, E227)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E221, E222, E223} -> (fun (V181, V182, V183) -> ('un--termConMatch'(V0, V183)) end(E221, E222, E223)); _ -> case V0 of {'Idris.Core.TT.TDelay', E197, E198, E199, E200} -> (fun (V184, V185, V186, V187) -> case V1 of {'Idris.Core.TT.TDelay', E214, E215, E216, E217} -> (fun (V188, V189, V190, V191) -> case ('un--termConMatch'(V186, V190)) of 1 -> ('un--termConMatch'(V187, V191)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E214, E215, E216, E217)); _ -> case V1 of {'Idris.Core.TT.TForce', E211, E212, E213} -> (fun (V192, V193, V194) -> ('un--termConMatch'(V0, V194)) end(E211, E212, E213)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E201, E202} -> (fun (V195, V196) -> case V1 of {'Idris.Core.TT.PrimVal', E203, E204} -> (fun (V197, V198) -> 1 end(E203, E204)); _ -> 0 end end(E201, E202)); {'Idris.Core.TT.Erased', E205, E206} -> (fun (V199, V200) -> case V1 of {'Idris.Core.TT.Erased', E207, E208} -> (fun (V201, V202) -> 1 end(E207, E208)); _ -> 0 end end(E205, E206)); {'Idris.Core.TT.TType', E209} -> (fun (V203) -> case V1 of {'Idris.Core.TT.TType', E210} -> (fun (V204) -> 1 end(E210)); _ -> 0 end end(E209)); _ -> 0 end end end end(E197, E198, E199, E200)); {'Idris.Core.TT.TForce', E218, E219, E220} -> (fun (V205, V206, V207) -> ('un--termConMatch'(V207, V1)) end(E218, E219, E220)); _ -> case V1 of {'Idris.Core.TT.TForce', E194, E195, E196} -> (fun (V208, V209, V210) -> ('un--termConMatch'(V0, V210)) end(E194, E195, E196)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E184, E185} -> (fun (V211, V212) -> case V1 of {'Idris.Core.TT.PrimVal', E186, E187} -> (fun (V213, V214) -> 1 end(E186, E187)); _ -> 0 end end(E184, E185)); {'Idris.Core.TT.Erased', E188, E189} -> (fun (V215, V216) -> case V1 of {'Idris.Core.TT.Erased', E190, E191} -> (fun (V217, V218) -> 1 end(E190, E191)); _ -> 0 end end(E188, E189)); {'Idris.Core.TT.TType', E192} -> (fun (V219) -> case V1 of {'Idris.Core.TT.TType', E193} -> (fun (V220) -> 1 end(E193)); _ -> 0 end end(E192)); _ -> 0 end end end end end end(E180, E181, E182, E183)); {'Idris.Core.TT.App', E228, E229, E230} -> (fun (V221, V222, V223) -> case V1 of {'Idris.Core.TT.App', E271, E272, E273} -> (fun (V224, V225, V226) -> ('un--termConMatch'(V222, V225)) end(E271, E272, E273)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E268, E269, E270} -> (fun (V227, V228, V229) -> ('un--termConMatch'(V0, V229)) end(E268, E269, E270)); _ -> case V0 of {'Idris.Core.TT.TDelay', E244, E245, E246, E247} -> (fun (V230, V231, V232, V233) -> case V1 of {'Idris.Core.TT.TDelay', E261, E262, E263, E264} -> (fun (V234, V235, V236, V237) -> case ('un--termConMatch'(V232, V236)) of 1 -> ('un--termConMatch'(V233, V237)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E261, E262, E263, E264)); _ -> case V1 of {'Idris.Core.TT.TForce', E258, E259, E260} -> (fun (V238, V239, V240) -> ('un--termConMatch'(V0, V240)) end(E258, E259, E260)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E248, E249} -> (fun (V241, V242) -> case V1 of {'Idris.Core.TT.PrimVal', E250, E251} -> (fun (V243, V244) -> 1 end(E250, E251)); _ -> 0 end end(E248, E249)); {'Idris.Core.TT.Erased', E252, E253} -> (fun (V245, V246) -> case V1 of {'Idris.Core.TT.Erased', E254, E255} -> (fun (V247, V248) -> 1 end(E254, E255)); _ -> 0 end end(E252, E253)); {'Idris.Core.TT.TType', E256} -> (fun (V249) -> case V1 of {'Idris.Core.TT.TType', E257} -> (fun (V250) -> 1 end(E257)); _ -> 0 end end(E256)); _ -> 0 end end end end(E244, E245, E246, E247)); {'Idris.Core.TT.TForce', E265, E266, E267} -> (fun (V251, V252, V253) -> ('un--termConMatch'(V253, V1)) end(E265, E266, E267)); _ -> case V1 of {'Idris.Core.TT.TForce', E241, E242, E243} -> (fun (V254, V255, V256) -> ('un--termConMatch'(V0, V256)) end(E241, E242, E243)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E231, E232} -> (fun (V257, V258) -> case V1 of {'Idris.Core.TT.PrimVal', E233, E234} -> (fun (V259, V260) -> 1 end(E233, E234)); _ -> 0 end end(E231, E232)); {'Idris.Core.TT.Erased', E235, E236} -> (fun (V261, V262) -> case V1 of {'Idris.Core.TT.Erased', E237, E238} -> (fun (V263, V264) -> 1 end(E237, E238)); _ -> 0 end end(E235, E236)); {'Idris.Core.TT.TType', E239} -> (fun (V265) -> case V1 of {'Idris.Core.TT.TType', E240} -> (fun (V266) -> 1 end(E240)); _ -> 0 end end(E239)); _ -> 0 end end end end end end(E228, E229, E230)); {'Idris.Core.TT.As', E274, E275, E276, E277} -> (fun (V267, V268, V269, V270) -> case V1 of {'Idris.Core.TT.As', E318, E319, E320, E321} -> (fun (V271, V272, V273, V274) -> case ('un--termConMatch'(V269, V273)) of 1 -> ('un--termConMatch'(V270, V274)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E318, E319, E320, E321)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E315, E316, E317} -> (fun (V275, V276, V277) -> ('un--termConMatch'(V0, V277)) end(E315, E316, E317)); _ -> case V0 of {'Idris.Core.TT.TDelay', E291, E292, E293, E294} -> (fun (V278, V279, V280, V281) -> case V1 of {'Idris.Core.TT.TDelay', E308, E309, E310, E311} -> (fun (V282, V283, V284, V285) -> case ('un--termConMatch'(V280, V284)) of 1 -> ('un--termConMatch'(V281, V285)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E308, E309, E310, E311)); _ -> case V1 of {'Idris.Core.TT.TForce', E305, E306, E307} -> (fun (V286, V287, V288) -> ('un--termConMatch'(V0, V288)) end(E305, E306, E307)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E295, E296} -> (fun (V289, V290) -> case V1 of {'Idris.Core.TT.PrimVal', E297, E298} -> (fun (V291, V292) -> 1 end(E297, E298)); _ -> 0 end end(E295, E296)); {'Idris.Core.TT.Erased', E299, E300} -> (fun (V293, V294) -> case V1 of {'Idris.Core.TT.Erased', E301, E302} -> (fun (V295, V296) -> 1 end(E301, E302)); _ -> 0 end end(E299, E300)); {'Idris.Core.TT.TType', E303} -> (fun (V297) -> case V1 of {'Idris.Core.TT.TType', E304} -> (fun (V298) -> 1 end(E304)); _ -> 0 end end(E303)); _ -> 0 end end end end(E291, E292, E293, E294)); {'Idris.Core.TT.TForce', E312, E313, E314} -> (fun (V299, V300, V301) -> ('un--termConMatch'(V301, V1)) end(E312, E313, E314)); _ -> case V1 of {'Idris.Core.TT.TForce', E288, E289, E290} -> (fun (V302, V303, V304) -> ('un--termConMatch'(V0, V304)) end(E288, E289, E290)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E278, E279} -> (fun (V305, V306) -> case V1 of {'Idris.Core.TT.PrimVal', E280, E281} -> (fun (V307, V308) -> 1 end(E280, E281)); _ -> 0 end end(E278, E279)); {'Idris.Core.TT.Erased', E282, E283} -> (fun (V309, V310) -> case V1 of {'Idris.Core.TT.Erased', E284, E285} -> (fun (V311, V312) -> 1 end(E284, E285)); _ -> 0 end end(E282, E283)); {'Idris.Core.TT.TType', E286} -> (fun (V313) -> case V1 of {'Idris.Core.TT.TType', E287} -> (fun (V314) -> 1 end(E287)); _ -> 0 end end(E286)); _ -> 0 end end end end end end(E274, E275, E276, E277)); {'Idris.Core.TT.TDelayed', E322, E323, E324} -> (fun (V315, V316, V317) -> ('un--termConMatch'(V317, V1)) end(E322, E323, E324)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E37, E38, E39} -> (fun (V318, V319, V320) -> ('un--termConMatch'(V0, V320)) end(E37, E38, E39)); _ -> case V0 of {'Idris.Core.TT.TDelay', E13, E14, E15, E16} -> (fun (V321, V322, V323, V324) -> case V1 of {'Idris.Core.TT.TDelay', E30, E31, E32, E33} -> (fun (V325, V326, V327, V328) -> case ('un--termConMatch'(V323, V327)) of 1 -> ('un--termConMatch'(V324, V328)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33)); _ -> case V1 of {'Idris.Core.TT.TForce', E27, E28, E29} -> (fun (V329, V330, V331) -> ('un--termConMatch'(V0, V331)) end(E27, E28, E29)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E17, E18} -> (fun (V332, V333) -> case V1 of {'Idris.Core.TT.PrimVal', E19, E20} -> (fun (V334, V335) -> 1 end(E19, E20)); _ -> 0 end end(E17, E18)); {'Idris.Core.TT.Erased', E21, E22} -> (fun (V336, V337) -> case V1 of {'Idris.Core.TT.Erased', E23, E24} -> (fun (V338, V339) -> 1 end(E23, E24)); _ -> 0 end end(E21, E22)); {'Idris.Core.TT.TType', E25} -> (fun (V340) -> case V1 of {'Idris.Core.TT.TType', E26} -> (fun (V341) -> 1 end(E26)); _ -> 0 end end(E25)); _ -> 0 end end end end(E13, E14, E15, E16)); {'Idris.Core.TT.TForce', E34, E35, E36} -> (fun (V342, V343, V344) -> ('un--termConMatch'(V344, V1)) end(E34, E35, E36)); _ -> case V1 of {'Idris.Core.TT.TForce', E10, E11, E12} -> (fun (V345, V346, V347) -> ('un--termConMatch'(V0, V347)) end(E10, E11, E12)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E0, E1} -> (fun (V348, V349) -> case V1 of {'Idris.Core.TT.PrimVal', E2, E3} -> (fun (V350, V351) -> 1 end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Core.TT.Erased', E4, E5} -> (fun (V352, V353) -> case V1 of {'Idris.Core.TT.Erased', E6, E7} -> (fun (V354, V355) -> 1 end(E6, E7)); _ -> 0 end end(E4, E5)); {'Idris.Core.TT.TType', E8} -> (fun (V356) -> case V1 of {'Idris.Core.TT.TType', E9} -> (fun (V357) -> 1 end(E9)); _ -> 0 end end(E8)); _ -> 0 end end end end end.
'un--showDefType'(V0) -> case V0 of {'Idris.Core.Context.Context.None'} -> (fun () -> <<"undefined"/utf8>> end()); {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> <<"function"/utf8>> end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.ExternDef', E5} -> (fun (V6) -> <<"external function"/utf8>> end(E5)); {'Idris.Core.Context.Context.ForeignDef', E6, E7} -> (fun (V7, V8) -> <<"foreign function"/utf8>> end(E6, E7)); {'Idris.Core.Context.Context.Builtin', E8, E9} -> (fun (V9, V10) -> <<"builtin function"/utf8>> end(E8, E9)); {'Idris.Core.Context.Context.DCon', E10, E11, E12} -> (fun (V11, V12, V13) -> <<"data constructor"/utf8>> end(E10, E11, E12)); {'Idris.Core.Context.Context.TCon', E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21) -> <<"type constructor"/utf8>> end(E13, E14, E15, E16, E17, E18, E19, E20)); {'Idris.Core.Context.Context.Hole', E21, E22} -> (fun (V22, V23) -> <<"hole"/utf8>> end(E21, E22)); {'Idris.Core.Context.Context.BySearch', E23, E24, E25} -> (fun (V24, V25, V26) -> <<"search"/utf8>> end(E23, E24, E25)); {'Idris.Core.Context.Context.Guess', E26, E27, E28} -> (fun (V27, V28, V29) -> <<"guess"/utf8>> end(E26, E27, E28)); {'Idris.Core.Context.Context.ImpBind'} -> (fun () -> <<"bound name"/utf8>> end()); {'Idris.Core.Context.Context.Delayed'} -> (fun () -> <<"delayed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processNatToInteger'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))), fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.NaturalToInteger"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing %builtin NaturalToInteger "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>)))) end, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V2, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V42 of {'Idris.Prelude.Types.Left', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V44) -> case V44 of [E40 | E41] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V47, V48) -> case V48 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V49, V50) -> case V46 of [] -> begin (V51 = [{'Idris.Builtin.MkPair', V47, {'Idris.Builtin.MkPair', V49, V50}} | []]), ('case--case block in processNatToInteger-20413'(V0, V2, V1, V3, V8, V47, V49, V50, V51, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V69 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V74, V75)) end end end end, fun (V76) -> case V76 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V77, V78) -> case V78 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V79, V80) -> V77 end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E52, E53)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V83, V84)) end end end end, fun (V85) -> case V85 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V86, V87) -> case V87 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V88, V89) -> V86 end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E46, E47)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V92, V93)) end end end end, fun (V94) -> case V94 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V95, V96) -> case V96 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V97, V98) -> V95 end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E40, E41)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V101, V102)) end end end end, fun (V103) -> case V103 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V104, V105) -> case V105 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V106, V107) -> V104 end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--processIntegerToNat'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))), fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.IntegerToNatural"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing %builtin IntegerToNatural "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"."/utf8>>)))) end, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V2, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V42 of {'Idris.Prelude.Types.Left', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V44) -> case V44 of [E40 | E41] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V47, V48) -> case V48 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V49, V50) -> case V46 of [] -> begin (V77 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V51, V52, V53)) end end end, fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V54, V55, V56)) end end end}, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V59 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V77 of {'Idris.Prelude.Types.Left', E78} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V79) -> begin (V80 = [{'Idris.Builtin.MkPair', V47, {'Idris.Builtin.MkPair', V49, V50}} | []]), ('case--case block in processIntegerToNat-21041'(V0, V2, V1, V3, V8, V47, V49, V50, V80, V79, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V98 end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V103, V104)) end end end end, fun (V105) -> case V105 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V106, V107) -> case V107 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V108, V109) -> V106 end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E52, E53)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V112, V113)) end end end end, fun (V114) -> case V114 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V115, V116) -> case V116 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V117, V118) -> V115 end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E46, E47)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V121, V122)) end end end end, fun (V123) -> case V123 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V124, V125) -> case V125 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V126, V127) -> V124 end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E40, E41)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V130, V131)) end end end end, fun (V132) -> case V132 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V133, V134) -> case V134 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V135, V136) -> V133 end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44))}, V4)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--processBuiltinNatural'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.Natural"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing %builtin Natural "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<"."/utf8>>)))) end, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V41 of {'Idris.Prelude.Types.Left', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V43) -> case V43 of [E40 | E41] -> (fun (V44, V45) -> case V44 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V46, V47) -> case V47 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V48, V49) -> case V45 of [] -> begin (V50 = ('un--isNatural'(V0, V1, V46, V3))), case V50 of {'Idris.Prelude.Types.Left', E58} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V52) -> begin (V53 = [{'Idris.Builtin.MkPair', V46, {'Idris.Builtin.MkPair', V48, V49}} | []]), case V52 of 0 -> begin (V54 = 0), ('case--case block in case block in processBuiltinNatural-20195'(V0, V2, V1, V7, V48, V46, V49, V53, V54, case V49 of {'Idris.Core.Context.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V72 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)) end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V77, V78)) end end end end, fun (V79) -> case V79 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V80, V81) -> case V81 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V82, V83) -> V80 end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V43))}, V3)) end end(E52, E53)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V86, V87)) end end end end, fun (V88) -> case V88 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V89, V90) -> case V90 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V91, V92) -> V89 end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V43))}, V3)) end end(E46, E47)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V95, V96)) end end end end, fun (V97) -> case V97 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V98, V99) -> case V99 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V100, V101) -> V98 end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V43))}, V3)) end end(E40, E41)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V2, V3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V104, V105)) end end end end, fun (V106) -> case V106 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V107, V108) -> case V108 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V109, V110) -> V107 end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V43))}, V3)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processBuiltin'(V0, V1, V2, V3, V4, V5) -> case V4 of 0 -> fun (V6) -> ('un--processBuiltinNatural'(V0, V3, V5, V6)) end; 1 -> ('un--processNatToInteger'(V0, V3, V5)); 2 -> ('un--processIntegerToNat'(V0, V3, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isStrict'(V0) -> case V0 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V1, V2, V3) -> 1 end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V4, V5, V6) -> 1 end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, fun (V37) -> ('un--isStrict'(V37)) end, V10)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V38, V39, V40, V41) -> case ('un--isStrict'(('Idris.Idris2.Core.TT':'un--binderType'(V40)))) of 1 -> ('un--isStrict'(V41)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V42, V43, V44) -> case ('un--isStrict'(V43)) of 1 -> ('un--isStrict'(V44)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V45, V46, V47, V48) -> case ('un--isStrict'(V47)) of 1 -> ('un--isStrict'(V48)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V49, V50, V51) -> 0 end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V52, V53, V54, V55) -> case ('un--isStrict'(V54)) of 1 -> ('un--isStrict'(V55)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V56, V57, V58) -> ('un--isStrict'(V58)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V59, V60) -> 1 end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V61, V62) -> 1 end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V63) -> 1 end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isNatural'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V59 of {'Idris.Core.Context.Context.TCon', E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69) -> begin (V70 = ('un--getConsGDef'(V0, V1, V68, V3))), case V70 of {'Idris.Prelude.Types.Left', E63} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V72) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V80, V81, V82)) end end end end end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V84)) end end, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V88, V89, V90, V91)) end end end end end end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V93)) end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V96, V97, V98)) end end end end end}, fun (V99) -> ('nested--8669-19282--in--un--hasNatFlag'(V0, V2, V1, V99)) end, V72))} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55, E56, E57, E58, E59, E60, E61, E62)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, {'Idris.Core.FC.EmptyFC'}, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTypeCons'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V4))} end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V5, V6, V7) -> {'Idris.Prelude.Types.Just', V7} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> {'Idris.Prelude.Types.Nothing'} end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V16, V17, V18, V19) -> ('un--getTypeCons'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V18, V15)))) end(E14, E15, E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E18, E19, E20} -> (fun (V20, V21, V22) -> ('un--getTypeCons'(V0, V21)) end(E18, E19, E20)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getReturnType'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--getReturnType'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> ('un--getReturnType'([V3 | V0], V5)) end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V0, V1}} end.
'un--getNEIntegerIndex'(V0) -> case V0 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> ('un--getNEIntegerIndex'(('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V7, V4)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> begin (V13 = {'Idris.Core.TT.Pi', V9, V10, V11, V12}), case case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V10)) of 1 -> 0; 0 -> ('nested--7929-18601--in--un--isInteger'(V1, V2, V4, V13, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V24, V25)) end end end end, fun (V26) -> [0 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V27, (1 + 0))) end, V26))] end, ('un--getNEIntegerIndex'(V4)))); 0 -> ('un--getNEIntegerIndex'(V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Just', []} end.
'un--getNEIndex'(V0) -> case V0 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> ('un--getNEIndex'(('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V7, V4)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V20)) end end}}, V10)) of 1 -> ('un--getNEIndex'(V4)); 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getNEArgs'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--getNEArgs'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V11)) of 1 -> ('un--getNEArgs'([V3 | V0], V5)); 0 -> [{'Idris.Builtin.DPair.MkDPair', V0, V13} | ('un--getNEArgs'([V3 | V0], V5))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10, E11)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'un--getFirstNEType'(V0, V1) -> case ('un--getNEArgs'(V0, V1)) of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Prelude.Types.Just', V2} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getConsGDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V39, V40, [], V41)) end end end, V2, fun (V42) -> fun (V43) -> begin (V44 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V42, V38))(V43))), case V44 of {'Idris.Prelude.Types.Left', E32} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V46) -> case V46 of [E38 | E39] -> (fun (V47, V48) -> case V47 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V49, V50) -> case V50 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V51, V52) -> case V48 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V49, V52}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V55, V56)) end end end end, fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V58, V59) -> case V59 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V60, V61) -> V58 end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V46))}, V43)) end end(E50, E51)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V64, V65)) end end end end, fun (V66) -> case V66 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V67, V68) -> case V68 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V69, V70) -> V67 end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V46))}, V43)) end end(E44, E45)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V73, V74)) end end end end, fun (V75) -> case V75 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V76, V77) -> case V77 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V78, V79) -> V76 end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V46))}, V43)) end end(E38, E39)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V42, V43)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V82, V83)) end end end end, fun (V84) -> case V84 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V85, V86) -> case V86 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V87, V88) -> V85 end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V46))}, V43)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end))(V3)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkNatCons'(V0, V1, V2, V3, V4) -> begin (V9 = (('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V5) -> fun (V6) -> fun (V7) -> ('nested--8805-19408--in--un--checkCon'(V3, V2, V1, V0, V5, V6, V7)) end end end, fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}} end, V1))(V4))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Types.Just', E4} -> (fun (V14) -> case V13 of {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', 0} end(E5)); _ -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No \x{27}S\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<"."/utf8>>))))}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No \x{27}Z\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<"."/utf8>>))))}, V4)) end()); _ -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No \x{27}S\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<"."/utf8>>))))}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
