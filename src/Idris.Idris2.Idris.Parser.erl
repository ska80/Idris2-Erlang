-module('Idris.Idris2.Idris.Parser').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--collectDefs-17279'/4,
  'case--multilineStr,toLines-10525'/8,
  'case--doAct-9905'/4,
  'case--nonEmptyTuple,mergePairs-6230'/9,
  'nested--10746-3836--in--un--underscore'/4,
  'nested--10809-10294--in--un--toPStr'/4,
  'nested--10810-10509--in--un--toLines'/6,
  'nested--10747-4307--in--un--singleName'/2,
  'nested--10797-9198--in--un--recFieldCompat'/3,
  'nested--18429-11444--in--un--parseWithArg'/4,
  'nested--26758-19394--in--un--parse'/3,
  'nested--26687-19320--in--un--parse'/3,
  'nested--26638-19268--in--un--parse'/3,
  'nested--26555-19181--in--un--parse'/3,
  'nested--26453-19075--in--un--parse'/4,
  'nested--26402-19021--in--un--parse'/3,
  'nested--26351-18968--in--un--parse'/3,
  'nested--26302-18917--in--un--parse'/3,
  'nested--26253-18866--in--un--parse'/3,
  'nested--26203-18814--in--un--parse'/3,
  'nested--26166-18776--in--un--parse'/3,
  'nested--10763-6135--in--un--optionalPair'/6,
  'nested--23590-16206--in--un--oldParamDecls'/4,
  'nested--23590-16207--in--un--newParamDecls'/4,
  'nested--26758-19393--in--un--names'/3,
  'nested--26687-19319--in--un--names'/3,
  'nested--26638-19267--in--un--names'/3,
  'nested--26555-19179--in--un--names'/3,
  'nested--26453-19074--in--un--names'/4,
  'nested--26402-19020--in--un--names'/3,
  'nested--26351-18967--in--un--names'/3,
  'nested--26302-18916--in--un--names'/3,
  'nested--26253-18865--in--un--names'/3,
  'nested--26203-18813--in--un--names'/3,
  'nested--26166-18775--in--un--names'/3,
  'nested--10747-4308--in--un--nameList'/2,
  'nested--10806-10132--in--un--mkPi'/5,
  'nested--10763-6136--in--un--mergePairs'/7,
  'nested--10789-8547--in--un--letDecl'/2,
  'nested--10789-8546--in--un--letBinder'/2,
  'nested--10763-6133--in--un--lams'/6,
  'nested--10797-9197--in--un--fieldName'/4,
  'nested--22941-15554--in--un--fieldBody'/4,
  'nested--20035-12627--in--un--drop'/3,
  'nested--10788-8380--in--un--continueLamCase'/3,
  'nested--10788-8379--in--un--continueLam'/2,
  'nested--18429-11443--in--un--clauseLHS'/7,
  'nested--10763-6134--in--un--buildOutput'/6,
  'nested--10746-3837--in--un--braceArgs'/5,
  'nested--10776-7584--in--un--binderName'/2,
  'nested--10788-8378--in--un--bindAll'/4,
  'nested--26555-19180--in--un--autoNumber'/3,
  'nested--10745-3586--in--un--applyExpImp'/7,
  'dn--un--show_Show_CmdArg'/1,
  'dn--un--showPrec_Show_CmdArg'/2,
  'dn--un--__Impl_Show_CmdArg'/0,
  'un--with_'/2,
  'un--withFlags'/0,
  'un--whereBlock'/2,
  'un--visibility'/1,
  'un--visOption'/1,
  'un--visOpt'/1,
  'un--validPatternVar'/1,
  'un--usingDecls'/2,
  'un--typedArg'/2,
  'un--typeExpr'/3,
  'un--tyDecls'/4,
  'un--tuple'/4,
  'un--transformDecl'/2,
  'un--totalityOpt'/1,
  'un--topDecl'/2,
  'un--stripBraces'/1,
  'un--stringArgCmd'/3,
  'un--snocListExpr'/3,
  'un--singlelineStr'/3,
  'un--simplerExpr'/2,
  'un--simpleExpr'/2,
  'un--simpleData'/4,
  'un--simpleCon'/3,
  'un--setVarOption'/0,
  'un--setOption'/1,
  'un--runParseCmd'/1,
  'un--runElabDecl'/2,
  'un--rewrite_'/2,
  'un--replCmd'/1,
  'un--record_'/2,
  'un--recordParam'/2,
  'un--recordDecl'/2,
  'un--recordConstructor'/1,
  'un--progHdr'/1,
  'un--prog'/1,
  'un--pnowith'/0,
  'un--pnoeq'/1,
  'un--plhs'/0,
  'un--pibindListName'/2,
  'un--pibindList'/2,
  'un--pibindAll'/4,
  'un--pdef'/0,
  'un--patAlt'/2,
  'un--parserCommandsForHelp'/0,
  'un--parseRHS'/6,
  'un--parseMode'/0,
  'un--paramDecls'/2,
  'un--optArgCmd'/4,
  'un--opExpr'/3,
  'un--onoff'/0,
  'un--onOffArgCmd'/3,
  'un--nonEmptyTuple'/4,
  'un--nonEmptyCommand'/0,
  'un--noArgCmd'/3,
  'un--nestedDpair'/3,
  'un--namespaceHead'/1,
  'un--namespaceDecl'/2,
  'un--nameArgCmd'/3,
  'un--mutualDecls'/2,
  'un--multiplicity'/1,
  'un--multilineStr'/3,
  'un--moduleArgCmd'/3,
  'un--mkTyConType'/3,
  'un--mkDataConType'/3,
  'un--loggingArgCmd'/3,
  'un--logLevel'/0,
  'un--listRange'/4,
  'un--listExpr'/3,
  'un--let_'/2,
  'un--letBlock'/2,
  'un--lazy'/2,
  'un--lam'/2,
  'un--interpBlock'/3,
  'un--import_'/2,
  'un--implicitPi'/2,
  'un--implDecl'/2,
  'un--implBinds'/2,
  'un--ifaceParam'/2,
  'un--ifaceDecl'/2,
  'un--if_'/2,
  'un--iOperator'/0,
  'un--help'/0,
  'un--getVisibility'/2,
  'un--getInitRange'/1,
  'un--gadtData'/5,
  'un--forall_'/2,
  'un--fnOpt'/1,
  'un--fnDirectOpt'/1,
  'un--fixDecl'/2,
  'un--fix'/0,
  'un--fieldDecl'/2,
  'un--field'/3,
  'un--extractNames'/1,
  'un--extension'/0,
  'un--exprArgCmd'/3,
  'un--expr'/3,
  'un--explicitPi'/2,
  'un--eval'/0,
  'un--editCmd'/0,
  'un--dpairType'/3,
  'un--doBlock'/2,
  'un--doAct'/2,
  'un--directiveDecl'/2,
  'un--directive'/2,
  'un--dependentDecorate'/3,
  'un--definition'/2,
  'un--defaultImplicitPi'/2,
  'un--decorationFromBounded'/3,
  'un--decoratedSymbol'/2,
  'un--decoratedSimpleBinderName'/1,
  'un--decoratedKeyword'/2,
  'un--decoratedDataTypeName'/1,
  'un--decoratedDataConstructorName'/1,
  'un--decorateKeywords'/2,
  'un--decorateBoundedNames'/3,
  'un--decorate'/3,
  'un--declsArgCmd'/3,
  'un--dataOpt'/0,
  'un--dataDeclBody'/2,
  'un--dataDecl'/2,
  'un--dataBody'/6,
  'un--continueWithDecorated'/3,
  'un--continueWith'/2,
  'un--constraints'/2,
  'un--compileArgsCmd'/3,
  'un--commitKeyword'/3,
  'un--command'/0,
  'un--collectDefs'/1,
  'un--clause'/4,
  'un--claims'/2,
  'un--case_'/2,
  'un--caseRHS'/4,
  'un--caseAlt'/2,
  'un--builtinDecl'/2,
  'un--bracketedExpr'/3,
  'un--boundedNameDecoration'/3,
  'un--binder'/2,
  'un--bindSymbol'/1,
  'un--bindList'/2,
  'un--autoNumberArgCmd'/3,
  'un--autoImplicitPi'/2,
  'un--atom'/1,
  'un--argExpr'/3,
  'un--appExpr'/3
]).
'case--collectDefs-17279'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V35 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V34) -> ('Idris.Idris2.Builtin':'un--snd'(V34)) end, V4))))))), begin (V39 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V36) -> fun (V37) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Core.FC.EmptyFC'} end, ('Idris.Idris2.Core.FC':'un--mergeFC'(V36, V37)))) end end, V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V38) -> ('Idris.Idris2.Builtin':'un--fst'(V38)) end, V4))))), [{'Idris.Idris.Syntax.PDef', V39, V35} | ('un--collectDefs'(V5))] end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--multilineStr,toLines-10525'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> ('nested--10810-10509--in--un--toLines'(V0, V1, V2, V4, ('Idris.Idris2.Data.List':'un--snoc'(V6, {'Idris.Idris.Syntax.StrInterp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V8})), V5)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V10, V11) -> case V11 of [] -> ('nested--10810-10509--in--un--toLines'(V0, V1, V2, V4, ('Idris.Idris2.Data.List':'un--snoc'(V6, {'Idris.Idris.Syntax.StrLiteral', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V10})), V5)); [E4 | E5] -> (fun (V12, V13) -> ('nested--10810-10509--in--un--toLines'(V0, V1, V2, V4, [{'Idris.Idris.Syntax.StrLiteral', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), ('Idris.Idris2.Data.List':'un--last'(V11))} | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Data.List':'un--snoc'(V5, ('Idris.Idris2.Data.List':'un--snoc'(V6, {'Idris.Idris.Syntax.StrLiteral', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V10})))), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V16, V17)) end end end end, fun (V18) -> [{'Idris.Idris.Syntax.StrLiteral', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V18} | []] end, begin (V19 = [V12 | V13]), ('Idris.Idris2.Data.List':'un--init'(V19)) end)))))) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doAct-9905'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoBind', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V2)), ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V4)), case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V6, V7, V8) -> V6 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5} | []]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nonEmptyTuple,mergePairs-6230'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case ('nested--10763-6136--in--un--mergePairs'(V0, V1, V2, V3, V9, V4, V5)) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V11, V13)), {'Idris.Idris.Syntax.PPair', ('Idris.Idris2.Builtin':'un--fst'(V4)), V12, V14}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10746-3836--in--un--underscore'(V0, V1, V2, V3) -> {'Idris.Idris.Parser.NamedArg', {'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}}, {'Idris.Idris.Syntax.PImplicit', V3}}.
'nested--10809-10294--in--un--toPStr'(V0, V1, V2, V3) -> case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of {'Idris.Data.List1.:::', E4, E5} -> (fun (V8, V9) -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.StrLiteral', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V8}}; _ -> {'Idris.Prelude.Types.Left', <<"Multi-line string is expected to begin with \x{22}\x{22}\x{22}"/utf8>>} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Left', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.StrInterp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), V10}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10810-10509--in--un--toLines'(V0, V1, V2, V3, V4, V5) -> case V3 of [] -> ('Idris.Idris2.Data.List':'un--snoc'(V5, V4)); [E0 | E1] -> (fun (V6, V7) -> ('case--multilineStr,toLines-10525'(V0, V1, V2, V6, V7, V5, V4, case V6 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V8, V9, V10) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10747-4307--in--un--singleName'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V2 | []]} end end}.
'nested--10797-9198--in--un--recFieldCompat'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'()))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V3) -> fun (V4) -> V4 end end, ('un--decoratedSymbol'(V1, <<"->"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, ('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))) end} end}.
'nested--18429-11444--in--un--parseWithArg'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"|"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--expr'(('un--plhs'()), V1, V0))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V4)), case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end}.
'nested--26758-19394--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--logLevel'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26687-19320--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--expr'(('un--pdef'()), {'Idris.Core.FC.Virtual', 0}, ('Idris.Idris2.Parser.Rule.Source':'un--init'())))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', ((V1(V4))(V3))} end end} end end} end} end}.
'nested--26638-19268--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--onOffLit'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26555-19181--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('nested--26555-19180--in--un--autoNumber'(V0, V1, V2))}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26453-19075--in--un--parse'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V3)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--setOption'(V1))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V2(V4))} end end} end} end}.
'nested--26402-19021--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--topDecl'({'Idris.Core.FC.Virtual', 0}, ('Idris.Idris2.Parser.Rule.Source':'un--init'())))}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26351-18968--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), {'Idris.Core.FC.Virtual', 0}, ('Idris.Idris2.Parser.Rule.Source':'un--init'())))}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26302-18917--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26253-18866--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26203-18814--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end end} end} end}.
'nested--26166-18776--in--un--parse'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--runParseCmd'(V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V1} end} end}.
'nested--10763-6135--in--un--optionalPair'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E2} -> (fun (V8) -> {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', [], V8}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V9 = {'Idris.Idris.Syntax.PRef', V6, {'Idris.Core.Name.MN', <<"__infixTupleSection"/utf8>>, V4}}), {'Idris.Builtin.MkPair', ((V4 + 1) rem 9223372036854775808), {'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V6, V9} | []], V9}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--23590-16206--in--un--oldParamDecls'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V2, <<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V2, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, fun (V8) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V8}} end, ('un--decoratedSimpleBinderName'(V2)))), fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V2, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V2, V3)), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Explicit'}, V10}}}} end end} end} end end})), fun (V11) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V2, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V11} end} end} end}.
'nested--23590-16207--in--un--newParamDecls'(V0, V1, V2, V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V28, V29, V30)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V31, V32)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V4)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--typedArg'(V2, V3)))))).
'nested--26758-19393--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26687-19319--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26638-19267--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26555-19179--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26453-19074--in--un--names'(V0, V1, V2, V3) -> ('un--extractNames'(V3)).
'nested--26402-19020--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26351-18967--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26302-18916--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26253-18865--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26203-18813--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--26166-18775--in--un--names'(V0, V1, V2) -> ('un--extractNames'(V2)).
'nested--10747-4308--in--un--nameList'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"["/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V1, <<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V1, <<"]"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'un--forget'(V2))} end} end end}} end}.
'nested--10806-10132--in--un--mkPi'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> {'Idris.Idris.Syntax.PPi', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V9, {'Idris.Prelude.Types.Nothing'}, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V11, V12, V13) -> V11 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10763-6136--in--un--mergePairs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> ('Idris.Idris2.Builtin':'un--snd'(('nested--10763-6135--in--un--optionalPair'(V0, V1, V2, V3, V4, V5)))); [E0 | E1] -> (fun (V7, V8) -> ('case--nonEmptyTuple,mergePairs-6230'(V0, V1, V2, V3, V7, V8, V5, V4, ('nested--10763-6135--in--un--optionalPair'(V0, V1, V2, V3, V4, V5)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10789-8547--in--un--letDecl'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end, fun (V6) -> ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V30, V31, V32)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V33, V34)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V6)))) end, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V35) -> {'Idris.Libraries.Text.Parser.Core.Try', ('un--topDecl'(V1, V35))} end)))).
'nested--10789-8546--in--un--letBinder'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V4, V5)) end end end end, fun (V6) -> fun (V7) -> {'Idris.Builtin.MkPair', V6, V7} end end, ('un--multiplicity'(V1)))), fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V8, ('un--expr'(('un--plhs'()), V1, V0)))) end}}, fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Empty', case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V10, V11, V12) -> V10 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V9))))}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V16) -> fun (V17) -> V17 end end, ('un--decoratedSymbol'(V1, <<":"/utf8>>)))), fun (V18) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V18, ('un--typeExpr'(('un--pnoeq'(('un--pdef'()))), V1, V0)))) end})), fun (V19) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--decoratedSymbol'(V1, <<"="/utf8>>)), fun () -> ('un--decoratedSymbol'(V1, <<":="/utf8>>)) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pnowith'()), V1, V0)), fun () -> fun (V20) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V21) -> ('un--patAlt'(V1, V21)) end)), fun (V22) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Parser.Let.MkLetBinder', V14, V15, V19, V20, V22}} end} end end} end} end} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'nested--10763-6133--in--un--lams'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> V5; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V10 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V8))), {'Idris.Idris.Syntax.PLam', V10, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V9, {'Idris.Idris.Syntax.PInfer', V10}, ('nested--10763-6133--in--un--lams'(V0, V1, V2, V3, V7, V5))} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10797-9197--in--un--fieldName'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.UN', E0} -> (fun (V4) -> case V4 of {'Idris.Core.Name.Basic', E1} -> (fun (V5) -> V5 end(E1)); {'Idris.Core.Name.Field', E2} -> (fun (V6) -> V6 end(E2)); _ -> <<"_impossible"/utf8>> end end(E0)); _ -> <<"_impossible"/utf8>> end.
'nested--22941-15554--in--un--fieldBody'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V1)), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V1, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', V5} end end})), fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V1, V0)), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> {'Idris.Idris.Syntax.MkField', V8, V2, V4, V3, V9, V7} end, ('Idris.Idris2.Data.List1':'un--forget'(V6)))) end} end end} end} end end} end}}, fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', case V10 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V11, V12, V13) -> (V11(('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V10)))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'nested--20035-12627--in--un--drop'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, V3)) of 1 -> ('nested--20035-12627--in--un--drop'(V0, V1, V4)); 0 -> [V3 | V4]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10788-8380--in--un--continueLamCase'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, fun (V7) -> ('Idris.Idris2.Data.List1':'un--forget'(V7)) end, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V8) -> ('un--caseAlt'(V1, V8)) end))))}, fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', begin (V10 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V9))), begin (V11 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V2))))), begin (V12 = {'Idris.Core.Name.MN', <<"lcase"/utf8>>, 0}), {'Idris.Idris.Syntax.PLam', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PRef', V11, V12}, {'Idris.Idris.Syntax.PInfer', V11}, {'Idris.Idris.Syntax.PCase', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V10)), {'Idris.Idris.Syntax.PRef', V11, V12}, case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V13, V14, V15) -> V13 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end end} end end}.
'nested--10788-8379--in--un--continueLam'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--bindList'(V1, V0)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"=>"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V0, {'Idris.Prelude.Types.Nothing'})), {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V1, V0)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('nested--10788-8378--in--un--bindAll'(V0, V1, V2, V3))} end end}} end} end end}.
'nested--18429-11443--in--un--clauseLHS'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Libraries.Data.IMaybe.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V9, V10)) end end end end, fun (V11) -> {'Idris.Builtin.MkPair', V11, []} end, ('un--opExpr'(('un--plhs'()), V4, V0)))) end()); {'Idris.Libraries.Data.IMaybe.Just', E0} -> (fun (V12) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--opExpr'(('un--plhs'()), V4, V0)), fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', case V13 of {'Idris.Idris.Syntax.PImplicit', E1} -> (fun (V14) -> V12 end(E1)); _ -> {'Idris.Builtin.MkPair', V13, []} end} end end} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10763-6134--in--un--buildOutput'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> ('nested--10763-6133--in--un--lams'(V0, V1, V2, V3, V6, {'Idris.Idris.Syntax.PPair', V4, V0, V7})) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10746-3837--in--un--braceArgs'(V0, V1, V2, V3, V4) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V3, <<"{"/utf8>>))}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V3, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V8, V9)) end end end end, fun (V10) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V10}} end, ('un--decoratedSimpleBinderName'(V3))))}, fun () -> fun (V11) -> begin (V12 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V3, V11))), ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Idris.Idris.Parser.NamedArg', case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V13, V14, V15) -> V13 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Idris.Syntax.PRef', V12, case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V16, V17, V18) -> V16 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V19) -> fun (V20) -> V20 end end, ('un--decoratedSymbol'(V3, <<"="/utf8>>)))), fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V21, ('un--typeExpr'(('un--pdef'()), V3, V4)))) end}, fun () -> fun (V22) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Parser.NamedArg', case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V23, V24, V25) -> V23 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22}} end end})) end end end})), fun (V26) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], case ('Idris.Idris2.Data.List':'un--isCons'(V26)) of 1 -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V3, <<","/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V3, <<"_"/utf8>>))}, fun () -> fun (V27) -> {'Idris.Libraries.Text.Parser.Core.Empty', [('nested--10746-3836--in--un--underscore'(V0, V1, V2, ('Idris.Idris2.Core.FC':'un--boundToFC'(V3, V27)))) | []]} end end} end}; 0 -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"non-empty list required"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V28) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V3, <<"}"/utf8>>))}, fun () -> fun (V29) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, begin (V30 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V5, V29))))), {'Idris.Libraries.Text.Parser.Core.Empty', case ('Idris.Idris2.Data.List':'un--isNil'(V26)) of 1 -> [('nested--10746-3836--in--un--underscore'(V0, V1, V2, V30)) | []]; 0 -> V28; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, fun (V31) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V31, V26))} end} end end} end} end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V3, <<"@{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V3, V4)), fun () -> fun (V32) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V3, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedAutoArg', V32} | []]} end} end end}} end} end}.
'nested--10776-7584--in--un--binderName'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end, fun (V6) -> {'Idris.Core.Name.Basic', V6} end, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V9, V10)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>)), {'Idris.Core.Name.Underscore'})) end}.
'nested--10788-8378--in--un--bindAll'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> {'Idris.Idris.Syntax.PLam', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V8)), V6, {'Idris.Core.TT.Explicit'}, case V8 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V10, V11, V12) -> V10 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, ('nested--10788-8378--in--un--bindAll'(V0, V1, V5, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--26555-19180--in--un--autoNumber'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"auto"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V9, V10)) end end end end, fun (V11) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V11))} end, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))) end}.
'nested--10745-3586--in--un--applyExpImp'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> V5; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Idris.Parser.UnnamedExpArg', E2} -> (fun (V9) -> ('nested--10745-3586--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PApp', {'Idris.Core.FC.MkFC', V1, V3, V4}, V5, V9}, V8)) end(E2)); {'Idris.Idris.Parser.UnnamedAutoArg', E3} -> (fun (V10) -> ('nested--10745-3586--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PAutoApp', {'Idris.Core.FC.MkFC', V1, V3, V4}, V5, V10}, V8)) end(E3)); {'Idris.Idris.Parser.NamedArg', E4, E5} -> (fun (V11, V12) -> begin (V13 = {'Idris.Core.FC.MkFC', V1, V3, V4}), ('nested--10745-3586--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PNamedApp', V13, V5, V11, V12}, V8)) end end(E4, E5)); {'Idris.Idris.Parser.WithArg', E6} -> (fun (V14) -> ('nested--10745-3586--in--un--applyExpImp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PWithApp', {'Idris.Core.FC.MkFC', V1, V3, V4}, V5, V14}, V8)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_CmdArg'(V0) -> case V0 of {'Idris.Idris.Parser.NoArg'} -> (fun () -> <<""/utf8>> end()); {'Idris.Idris.Parser.NameArg'} -> (fun () -> <<"<name>"/utf8>> end()); {'Idris.Idris.Parser.ExprArg'} -> (fun () -> <<"<expr>"/utf8>> end()); {'Idris.Idris.Parser.DeclsArg'} -> (fun () -> <<"<decls>"/utf8>> end()); {'Idris.Idris.Parser.NumberArg'} -> (fun () -> <<"<number>"/utf8>> end()); {'Idris.Idris.Parser.AutoNumberArg'} -> (fun () -> <<"<number|auto>"/utf8>> end()); {'Idris.Idris.Parser.OptionArg'} -> (fun () -> <<"<option>"/utf8>> end()); {'Idris.Idris.Parser.FileArg'} -> (fun () -> <<"<file>"/utf8>> end()); {'Idris.Idris.Parser.ModuleArg'} -> (fun () -> <<"<module>"/utf8>> end()); {'Idris.Idris.Parser.StringArg'} -> (fun () -> <<"<string>"/utf8>> end()); {'Idris.Idris.Parser.OnOffArg'} -> (fun () -> <<"(on|off)"/utf8>> end()); {'Idris.Idris.Parser.Args', E0} -> (fun (V1) -> ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('dn--un--show_Show_CmdArg'(V2)) end, V1)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_CmdArg'(V0, V1) -> ('dn--un--show_Show_CmdArg'(V1)).
'dn--un--__Impl_Show_CmdArg'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_CmdArg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_CmdArg'(V1, V2)) end end}.
'un--with_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"with"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--10747-4307--in--un--singleName'(V1, V0)), fun () -> ('nested--10747-4308--in--un--nameList'(V1, V0)) end}, fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V4}} end end} end} end end}} end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PWithUnambigNames', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V11}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--withFlags'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"syntactic"/utf8>>)))), fun (V2) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V5, V6)) end end end end, fun (V7) -> [0 | V7] end, ('un--withFlags'()))))) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', []} end}.
'un--whereBlock'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedKeyword'(V0, <<"where"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V1, fun (V2) -> ('un--topDecl'(V0, V2)) end)), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V30, V31)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V3))))} end} end}.
'un--visibility'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, ('un--visOption'(V0)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 0} end}.
'un--visOption'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V1) -> fun (V2) -> V2 end end, ('un--decoratedKeyword'(V0, <<"public"/utf8>>)))), fun (V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, ('un--decoratedKeyword'(V0, <<"export"/utf8>>)), 2)))) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, V11)) end end end end, ('un--decoratedKeyword'(V0, <<"export"/utf8>>)), 1)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end, ('un--decoratedKeyword'(V0, <<"private"/utf8>>)), 0)) end} end}.
'un--visOpt'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--visOption'(V0)), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Left', V1}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--fnOpt'(V0)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Right', V2}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--fnDirectOpt'(V0)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Right', V3}} end end} end} end}.
'un--validPatternVar'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> case V1 of {'Idris.Core.Name.Underscore'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 0} end()); {'Idris.Core.Name.Basic', E1} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.Parser':'un--when'(case ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Not a pattern variable"/utf8>>} end)) end(E1)); _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Not a pattern variable"/utf8>>} end end(E0)); _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Not a pattern variable"/utf8>>} end.
'un--usingDecls'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"using"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V2}}} end} end end})), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, V4}} end end} end})), fun (V5) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V6) -> ('un--topDecl'(V0, V6)) end)), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V5, V7}} end end} end} end} end}} end}}, fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V8 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V9, V10, V11) -> V9 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V13, V14) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUsing', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V8)), V13, ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V38, V39, V40)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V41, V42)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V14))))}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--typedArg'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindListName'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', case V6 of {'Idris.Libraries.Text.Bounded.MkBounded', E4, E5, E6} -> (fun (V8, V9, V10) -> V8 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', {'Idris.Core.TT.Explicit'}, V7}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2))} end} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, fun (V11) -> fun (V12) -> V11 end end, {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Core.TT.AutoImplicit'}})), fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, ('un--decoratedKeyword'(V0, <<"auto"/utf8>>)))) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V14) -> fun (V15) -> V15 end end, ('un--decoratedKeyword'(V0, <<"default"/utf8>>)))), fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V19, V20)) end end end end, fun (V21) -> {'Idris.Core.TT.DefImplicit', V21} end, ('un--simpleExpr'(V0, V1)))))) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Core.TT.Implicit'}} end} end}, fun (V22) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindListName'(V0, V1)), fun () -> fun (V23) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V27, V28) -> {'Idris.Builtin.MkPair', case V27 of {'Idris.Libraries.Text.Bounded.MkBounded', E11, E12, E13} -> (fun (V29, V30, V31) -> V29 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V25, {'Idris.Builtin.MkPair', V22, V28}}} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V23))} end} end end} end}} end} end}.
'un--typeExpr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--binder'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--expr'(V0, V1, V2))}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--bindSymbol'(V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(V0, V1, V2))}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, V5}} end end} end end}})), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('nested--10806-10132--in--un--mkPi'(V2, V1, V0, V3, V6))} end} end end} end}.
'un--tyDecls'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V2, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', fun (V4) -> fun (V5) -> {'Idris.Builtin.MkPair', V4, V5} end end}, fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V6, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))))) end}, fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, {'Idris.Libraries.Text.Parser.Core.Bounds', V0})) end})), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V2, <<":"/utf8>>))}, fun () -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V10, V11, V12) -> V12 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"Expected a type declaration"/utf8>>, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V2, V3)), fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V15, V16) -> {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', case V16 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V17, V18, V19) -> V17 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V2, V16)), V13}}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V8))} end end})) end end} end end}, fun () -> fun (V20) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V3)), {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V26, V27) -> {'Idris.Idris.Syntax.MkPTy', V26, V26, V24, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, V22)), V27} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V20))}} end end}.
'un--tuple'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nonEmptyTuple'(V0, V1, V2, V3)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--continueWithDecorated'(V0, V2, <<")"/utf8>>))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Idris.Builtin.MkPair', 4, {'Idris.Prelude.Types.Nothing'}}} | []]}, {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PBracketed', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V4)))), V3}}} end end} end}.
'un--transformDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"transform"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--plhs'()), V0, V1)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"="/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pnowith'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end end} end} end end} end end} end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PTransform', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V12, V13}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--totalityOpt'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, V4)) end end end end, ('un--decoratedKeyword'(V0, <<"partial"/utf8>>)), 2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end, ('un--decoratedKeyword'(V0, <<"total"/utf8>>)), 0)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, V12)) end end end end, ('un--decoratedKeyword'(V0, <<"covering"/utf8>>)), 1)) end} end}.
'un--topDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--dataDecl'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V2 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--claims'(V0, V1)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'un--forget'(V3))} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--definition'(V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V4 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--fixDecl'(V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--ifaceDecl'(V0, V1)), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V5 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--implDecl'(V0, V1)), fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V6 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--recordDecl'(V0, V1)), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V7 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--namespaceDecl'(V0, V1)), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V8 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--mutualDecls'(V0, V1)), fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V9 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--paramDecls'(V0, V1)), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V10 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--usingDecls'(V0, V1)), fun () -> fun (V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V11 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--builtinDecl'(V0, V1)), fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V12 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--runElabDecl'(V0, V1)), fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V13 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--transformDecl'(V0, V1)), fun () -> fun (V14) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V14 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--directiveDecl'(V0, V1)), fun () -> fun (V15) -> {'Idris.Libraries.Text.Parser.Core.Empty', [V15 | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.Terminal', <<"Expected CG directive"/utf8>>, fun (V16) -> case V16 of {'Idris.Parser.Lexer.Source.CGDirective', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Just', V17} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end end}}, fun () -> fun (V18) -> {'Idris.Libraries.Text.Parser.Core.Empty', [begin (V23 = ('Idris.Idris2.Data.String':'un--span'(fun (V19) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V19)) end, case V18 of {'Idris.Libraries.Text.Bounded.MkBounded', E1, E2, E3} -> (fun (V20, V21, V22) -> V20 end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Idris.Syntax.PDirective', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V18)), {'Idris.Idris.Syntax.CGAction', ('Idris.Idris2.Builtin':'un--fst'(V23)), ('un--stripBraces'(('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Builtin':'un--snd'(V23))))))}} end | []]} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Couldn\x{27}t parse declaration"/utf8>>} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--stripBraces'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('nested--20035-12627--in--un--drop'(V0, ${, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('nested--20035-12627--in--un--drop'(V0, $}, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))))))))).
'un--stringArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26253-18865--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.StringArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26253-18866--in--un--parse'(V2, V1, V0))}}}.
'un--snocListExpr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V7, V8)) end end end end, V3, V4))} end end} end end})), fun (V9) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V9, V10}} end end} end})), fun (V11) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>))}, fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Empty', begin (V20 = case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, [('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V18, V19)) end end end end, V15, V12)) | []])) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V21 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V12))))), begin (V22 = case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20))()) of 1 -> V21; 0 -> ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Idris.Syntax.PSnocList', V21, V22, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V23) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V23)), case V23 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V24, V25, V26) -> V24 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V20))} end end end} end end} end}.
'un--singlelineStr'(V0, V1, V2) -> ('un--decorate'(V1, 3, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--strBegin'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Libraries.Text.Parser.Core':'un--<||>'(1, 1, ('un--interpBlock'(V0, V1, V2)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--strLitLines'()) end))})), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, case ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', (V7(V10))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V12} end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> case V16 of {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Right', (V18(V19))} end(E9)); {'Idris.Prelude.Types.Left', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V21) -> ('nested--10809-10294--in--un--toPStr'(V2, V1, V0, V21)) end, V4)) of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Just', case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E1, E2, E3} -> (fun (V23, V24, V25) -> V25 end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, 1, V22} end(E0)); {'Idris.Prelude.Types.Right', E4} -> (fun (V26) -> {'Idris.Libraries.Text.Parser.Core.Empty', V26} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V27) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--strEnd'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V27} end} end} end}} end end}}, fun () -> fun (V28) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PString', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V28)), case V28 of {'Idris.Libraries.Text.Bounded.MkBounded', E11, E12, E13} -> (fun (V29, V30, V31) -> V29 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end})).
'un--simplerExpr'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end, fun (V6) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V6}} end, ('un--decoratedSimpleBinderName'(V0))))}, fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"@"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V0, V1)), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V7, V8}} end end}} end} end end}}, fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V10, V11, V12) -> V10 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PAs', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V9)), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V14)), case V14 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V16, V17, V18) -> V16 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--atom'(V0)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--record_'(V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--singlelineStr'(('un--pdef'()), V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--multilineStr'(('un--pdef'()), V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<".("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V19} end} end end}} end}}, fun () -> fun (V20) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDotted', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V20)), case V20 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V21, V22, V23) -> V21 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"`("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V24) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V24} end} end end} end}}, fun () -> fun (V25) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuote', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V25)), case V25 of {'Idris.Libraries.Text.Bounded.MkBounded', E11, E12, E13} -> (fun (V26, V27, V28) -> V26 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"`{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V29) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V29} end} end end} end}}, fun () -> fun (V30) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuoteName', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V30)), case V30 of {'Idris.Libraries.Text.Bounded.MkBounded', E14, E15, E16} -> (fun (V31, V32, V33) -> V31 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"`["/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V34) -> ('un--topDecl'(V0, V34)) end)), fun () -> fun (V35) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V35} end} end end} end}}, fun () -> fun (V36) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PQuoteDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V36)), ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V48)) end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V52, V53, V54, V55)) end end end end end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V57)) end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V60, V61, V62)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V63, V64)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, case V36 of {'Idris.Libraries.Text.Bounded.MkBounded', E17, E18, E19} -> (fun (V65, V66, V67) -> V65 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V68) -> fun (V69) -> V69 end end, ('un--decoratedSymbol'(V0, <<"~"/utf8>>)))), fun (V70) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V70, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V71) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnquote', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V71)), case V71 of {'Idris.Libraries.Text.Bounded.MkBounded', E20, E21, E22} -> (fun (V72, V73, V74) -> V72 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>))}, fun () -> fun (V75) -> ('un--bracketedExpr'(V0, V75, V1)) end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"[<"/utf8>>))}, fun () -> fun (V76) -> ('un--snocListExpr'(V0, V76, V1)) end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"[>"/utf8>>)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"["/utf8>>)) end}}, fun () -> fun (V77) -> ('un--listExpr'(V0, V77, V1)) end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V78) -> fun (V79) -> V79 end end, ('un--decoratedSymbol'(V0, <<"!"/utf8>>)))), fun (V80) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V80, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V81) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PBang', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V81)))), case V81 of {'Idris.Libraries.Text.Bounded.MkBounded', E23, E24, E25} -> (fun (V82, V83, V84) -> V82 end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"[|"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V85) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"|]"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V85} end} end end} end}}, fun () -> fun (V86) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PIdiom', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V86)), case V86 of {'Idris.Libraries.Text.Bounded.MkBounded', E26, E27, E28} -> (fun (V87, V88, V89) -> V87 end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"logging"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V92, V93)) end end end end, fun (V94) -> ('Idris.Idris2.Data.String':'un--split'(fun (V95) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'($., V95)) end, V94)) end, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()))))), fun (V96) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V97) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V98) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Options.Log':'un--mkLogLevel\x{27}'(V96, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V97)))), V98}} end end} end end} end} end}}, fun () -> fun (V99) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V99 of {'Idris.Libraries.Text.Bounded.MkBounded', E29, E30, E31} -> (fun (V100, V101, V102) -> V100 end(E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V103) -> case V103 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V104, V105) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnifyLog', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V99)), V104, V105}} end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--lam'(V0, V1))}, fun (V106) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Warning', {'Idris.Prelude.Types.Just', case V106 of {'Idris.Libraries.Text.Bounded.MkBounded', E34, E35, E36} -> (fun (V107, V108, V109) -> V109 end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, <<"DEPRECATED: trailing lambda. Use a $ or parens"/utf8>>}, {'Idris.Libraries.Text.Parser.Core.Empty', case V106 of {'Idris.Libraries.Text.Bounded.MkBounded', E37, E38, E39} -> (fun (V110, V111, V112) -> V110 end(E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--simpleExpr'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--simplerExpr'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())})), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V3}} end} end end}}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> begin (V15 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11)), case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V12, V13, V14) -> V12 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V10))), {'Idris.Libraries.Text.Parser.Core.Empty', case V15 of [] -> V9; _ -> {'Idris.Idris.Syntax.PPostfixApp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V9, V15} end} end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V18, V19)) end end end end, fun (V20) -> ('Idris.Idris2.Data.List1':'un--forget'(V20)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--some'({'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())}))))}, fun () -> fun (V21) -> {'Idris.Libraries.Text.Parser.Core.Empty', begin (V29 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V22)), case V22 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V23, V24, V25) -> V23 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, case V21 of {'Idris.Libraries.Text.Bounded.MkBounded', E11, E12, E13} -> (fun (V26, V27, V28) -> V26 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Idris.Syntax.PPostfixAppPartial', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V21)), V29} end} end end} end}.
'un--simpleData'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'())))})), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V0, <<"="/utf8>>))}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.MustWork', begin (V6 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5))))), begin (V10 = {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V15 = fun (V11) -> {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11)), case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V12, V13, V14) -> V12 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end), begin (V16 = ('Idris.Idris2.Idris.Syntax':'un--papply'(V6, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V15, V4))))), {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<"|"/utf8>>)), ('un--simpleCon'(V0, V16, V3)))), fun () -> fun (V17) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V6, ('Idris.Idris2.Data.List1':'un--forget'(V17))}}} end end} end end end end} end end} end}}, fun () -> fun (V18) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V18 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V19, V20, V21) -> V19 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V25, V26) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V18)))), case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E13, E14, E15} -> (fun (V27, V28, V29) -> V27 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--mkTyConType'(V0, V25, V23)), [], V26}} end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--simpleCon'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedDataConstructorName'(V0))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--argExpr'(('un--plhs'()), V0, V2)))), fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V5}}}} end} end end} end}}, fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V10, V11, V12) -> V10 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V18, V19) -> begin (V20 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V9))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Named arguments not allowed in ADT constructors"/utf8>>} end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V23, V24)) end end end end, fun (V25) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPTy', V20, V18, V16, V14, V25}} end, ('un--mkDataConType'(V20, V1, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V37)) end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V41, V42, V43, V44)) end end end end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V49, V50, V51)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V52, V53)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V19)))))))) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end}} end end}.
'un--setVarOption'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"eval"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--parseMode'()), fun () -> fun (V0) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.EvalMode', V0}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"editor"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Editor', V1}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"cg"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.CG', V2}} end end} end} end} end}.
'un--setOption'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"showimplicits"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ShowImplicits', V0}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"shownamespace"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ShowNamespace', V0}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"showtypes"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ShowTypes', V0}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"profile"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Profile', V0}} end}, case V0 of 1 -> fun () -> ('un--setVarOption'()) end; 0 -> fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Unrecognised option"/utf8>>} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end} end} end}.
'un--runParseCmd'(V0) -> case V0 of {'Idris.Idris.Parser.ParseREPLCmd', E0} -> (fun (V1) -> ('un--replCmd'(V1)) end(E0)); {'Idris.Idris.Parser.ParseKeywordCmd', E1} -> (fun (V2) -> ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(V2)) end(E1)); {'Idris.Idris.Parser.ParseIdentCmd', E2} -> (fun (V3) -> ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(V3)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--runElabDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, ('un--expr'(('un--pnowith'()), V0, V1)))) end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRunElabDecl', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}.
'un--rewrite_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"rewrite"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"in"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V3}} end end} end} end end} end}}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRewrite', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V9, V10}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--replCmd'(V0) -> case V0 of [] -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Unrecognised command"/utf8>>}; [E0 | E1] -> (fun (V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)), fun () -> ('un--replCmd'(V2)) end} end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--record_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end, ('un--decoratedKeyword'(V0, <<"record"/utf8>>)), 1)))), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--field'(V6, V0, V1)))), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'un--forget'(V7))} end} end end}} end} end}}, fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUpdate', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V8)), case V8 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V9, V10, V11) -> V9 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}.
'un--recordParam'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--typedArg'(V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2))}}}} | []]} end end} end}.
'un--recordDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--visibility'(V0)), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"record"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--decoratedDataTypeName'(V0))}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--recordParam'(V0, V1)))), fun (V6) -> begin (V35 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V33, V34)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V6))), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedKeyword'(V0, <<"where"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockWithOptHeaderAfter'(V4, fun (V36) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V37) -> fun (V38) -> V37 end end, ('un--recordConstructor'(V0)))), fun (V39) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V39, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V36)))) end} end, fun (V40) -> ('un--fieldDecl'(V0, V40)) end)), fun (V41) -> {'Idris.Libraries.Text.Parser.Core.Empty', fun (V42) -> {'Idris.Idris.Syntax.PRecord', V42, V2, V3, V5, V35, ('Idris.Idris2.Builtin':'un--fst'(V41)), ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V54)) end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V58, V59, V60, V61)) end end end end end end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V63)) end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V66, V67, V68)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V69, V70)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, ('Idris.Idris2.Builtin':'un--snd'(V41))))} end} end} end} end end} end end} end} end} end} end}}, fun () -> fun (V71) -> {'Idris.Libraries.Text.Parser.Core.Empty', case V71 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V72, V73, V74) -> (V72(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V71)))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'un--recordConstructor'(V0) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"constructor"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--decoratedDataConstructorName'(V0))}, fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', V1} end end} end}.
'un--progHdr'(V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()))), {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"module"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())} end})), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V3) -> ('un--import_'(V0, V3)) end)), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, V4}}} end} end} end}}, fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V12, V13, V10, []}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end}.
'un--prog'(V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()))), {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"module"/utf8>>)), fun () -> ('un--decorate'(V0, 8, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())})) end})), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V3) -> ('un--import_'(V0, V3)) end)), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, V4}}} end} end} end}}, fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V6) -> ('un--topDecl'(V0, V6)) end)), fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V8, V9, V10) -> V8 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V14, V15) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkModule', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V14, V15, V12, ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V42, V43)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V7))))}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end}.
'un--pnowith'() -> {'Idris.Idris.Parser.MkParseOpts', 1, 0}.
'un--pnoeq'(V0) -> case V0 of {'Idris.Idris.Parser.MkParseOpts', E0, E1} -> (fun (V1, V2) -> {'Idris.Idris.Parser.MkParseOpts', 0, V2} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--plhs'() -> {'Idris.Idris.Parser.MkParseOpts', 0, 0}.
'un--pibindListName'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, fun (V7) -> {'Idris.Core.Name.UN', V7} end, ('nested--10776-7584--in--un--binderName'(V1, V0))))})), fun () -> fun (V8) -> begin (V9 = ('Idris.Idris2.Data.List1':'un--forget'(V8))), {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('un--decorateBoundedNames'(V0, 5, V9)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V11, V10}} end, V9))}} end end} end}} end end end} end}, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end, fun (V16) -> ('Idris.Idris2.Data.List1':'un--forget'(V16)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V17) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 5, ('nested--10776-7584--in--un--binderName'(V1, V0))))}, fun () -> fun (V18) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(fun (V20) -> {'Idris.Core.Name.UN', V20} end, V18)), V19}}} end end} end} end end} end})))) end}.
'un--pibindList'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--pibindListName'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(fun (V8) -> {'Idris.Prelude.Types.Just', V8} end, V6)), V7}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2))} end end}.
'un--pibindAll'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> {'Idris.Idris.Syntax.PPi', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V8)), V6, V1, case V8 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V10, V11, V12) -> V10 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, ('un--pibindAll'(V0, V1, V5, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pdef'() -> {'Idris.Idris.Parser.MkParseOpts', 1, 1}.
'un--patAlt'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"|"/utf8>>)), fun () -> ('un--caseAlt'(V0, V1)) end}.
'un--parserCommandsForHelp'() -> [('un--exprArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"t"/utf8>> | [<<"type"/utf8>> | []]]}, fun (V0) -> {'Idris.Idris.Syntax.Check', V0} end, <<"Check the type of an expression"/utf8>>)) | [('un--exprArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"ti"/utf8>> | []]}, fun (V1) -> {'Idris.Idris.Syntax.CheckWithImplicits', V1} end, <<"Check the type of an expression, showing implicit arguments"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"printdef"/utf8>> | []]}, fun (V2) -> {'Idris.Idris.Syntax.PrintDef', V2} end, <<"Show the definition of a function"/utf8>>)) | [('un--exprArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"s"/utf8>> | [<<"search"/utf8>> | []]]}, fun (V3) -> {'Idris.Idris.Syntax.TypeSearch', V3} end, <<"Search for values by type"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"di"/utf8>>}, fun (V4) -> {'Idris.Idris.Syntax.DebugInfo', V4} end, <<"Show debugging information for a name"/utf8>>)) | [('un--moduleArgCmd'({'Idris.Idris.Parser.ParseKeywordCmd', <<"module"/utf8>>}, fun (V5) -> {'Idris.Idris.Syntax.ImportMod', V5} end, <<"Import an extra module"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"q"/utf8>> | [<<"quit"/utf8>> | [<<"exit"/utf8>> | []]]]}, {'Idris.Idris.Syntax.Quit'}, <<"Exit the Idris system"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"cwd"/utf8>> | []]}, {'Idris.Idris.Syntax.CWD'}, <<"Displays the current working directory"/utf8>>)) | [('un--optArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"set"/utf8>>}, fun (V6) -> {'Idris.Idris.Syntax.SetOpt', V6} end, 1, <<"Set an option"/utf8>>)) | [('un--optArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"unset"/utf8>>}, fun (V7) -> {'Idris.Idris.Syntax.SetOpt', V7} end, 0, <<"Unset an option"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"opts"/utf8>> | []]}, {'Idris.Idris.Syntax.GetOpts'}, <<"Show current options settings"/utf8>>)) | [('un--compileArgsCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"c"/utf8>> | [<<"compile"/utf8>> | []]]}, fun (V8) -> fun (V9) -> {'Idris.Idris.Syntax.Compile', V8, V9} end end, <<"Compile to an executable"/utf8>>)) | [('un--exprArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"exec"/utf8>>}, fun (V10) -> {'Idris.Idris.Syntax.Exec', V10} end, <<"Compile to an executable and run"/utf8>>)) | [('un--stringArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"directive"/utf8>>}, fun (V11) -> {'Idris.Idris.Syntax.CGDirective', V11} end, <<"Set a codegen-specific directive"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"r"/utf8>> | [<<"reload"/utf8>> | []]]}, {'Idris.Idris.Syntax.Reload'}, <<"Reload current file"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"e"/utf8>> | [<<"edit"/utf8>> | []]]}, {'Idris.Idris.Syntax.Edit'}, <<"Edit current file using $EDITOR or $VISUAL"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"miss"/utf8>> | [<<"missing"/utf8>> | []]]}, fun (V12) -> {'Idris.Idris.Syntax.Missing', V12} end, <<"Show missing clauses"/utf8>>)) | [('un--nameArgCmd'({'Idris.Idris.Parser.ParseKeywordCmd', <<"total"/utf8>>}, fun (V13) -> {'Idris.Idris.Syntax.Total', V13} end, <<"Check the totality of a name"/utf8>>)) | [('un--exprArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"doc"/utf8>>}, fun (V14) -> {'Idris.Idris.Syntax.Doc', V14} end, <<"Show documentation for a name or primitive"/utf8>>)) | [('un--moduleArgCmd'({'Idris.Idris.Parser.ParseIdentCmd', <<"browse"/utf8>>}, fun (V15) -> {'Idris.Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V15))} end, <<"Browse contents of a namespace"/utf8>>)) | [('un--loggingArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"log"/utf8>> | [<<"logging"/utf8>> | []]]}, fun (V16) -> {'Idris.Idris.Syntax.SetLog', V16} end, <<"Set logging level"/utf8>>)) | [('un--autoNumberArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"consolewidth"/utf8>> | []]}, fun (V17) -> {'Idris.Idris.Syntax.SetConsoleWidth', V17} end, <<"Set the width of the console output (0 for unbounded) (auto by default)"/utf8>>)) | [('un--onOffArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"color"/utf8>> | [<<"colour"/utf8>> | []]]}, fun (V18) -> {'Idris.Idris.Syntax.SetColor', V18} end, <<"Whether to use color for the console output (enabled by default)"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"m"/utf8>> | [<<"metavars"/utf8>> | []]]}, {'Idris.Idris.Syntax.Metavars'}, <<"Show remaining proof obligations (metavariables or holes)"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"version"/utf8>> | []]}, {'Idris.Idris.Syntax.ShowVersion'}, <<"Display the Idris version"/utf8>>)) | [('un--noArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"?"/utf8>> | [<<"h"/utf8>> | [<<"help"/utf8>> | []]]]}, {'Idris.Idris.Syntax.Help'}, <<"Display this help text"/utf8>>)) | [('un--declsArgCmd'({'Idris.Idris.Parser.ParseKeywordCmd', <<"let"/utf8>>}, fun (V19) -> {'Idris.Idris.Syntax.NewDefn', V19} end, <<"Define a new value"/utf8>>)) | [('un--stringArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"lp"/utf8>> | [<<"loadpackage"/utf8>> | []]]}, fun (V20) -> {'Idris.Idris.Syntax.ImportPackage', V20} end, <<"Load all modules of the package"/utf8>>)) | [('un--exprArgCmd'({'Idris.Idris.Parser.ParseREPLCmd', [<<"fs"/utf8>> | [<<"fsearch"/utf8>> | []]]}, fun (V21) -> {'Idris.Idris.Syntax.FuzzyTypeSearch', V21} end, <<"Search for global definitions by sketching the names distribution of the wanted type(s)."/utf8>>)) | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--parseRHS'(V0, V1, V2, V3, V4, V5) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"="/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.MustWork', {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V1, V4)), fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], ('un--whereBlock'(V1, V3)))), fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V6, V7}} end} end end}} end}}, fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V4)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V8 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V9, V10, V11) -> V9 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V13, V14) -> begin (V15 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V8))))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPatClause', V15, ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V16) -> fun (V17) -> ('Idris.Idris2.Idris.Syntax':'un--applyArgs'(V16, V17)) end end, V5)), V13, V14}} end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V1, <<"with"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--withFlags'()), fun (V18) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V1, <<"("/utf8>>))}, fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--bracketedExpr'(V1, V19, V4)), fun () -> fun (V20) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V21) -> fun (V22) -> V22 end end, ('un--decoratedKeyword'(V1, <<"proof"/utf8>>)))), fun (V23) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V23, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V26, V27)) end end end end, fun (V28) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V28}} end, ('un--decoratedSimpleBinderName'(V1)))))) end})), fun (V29) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlockAfter'(V3, fun (V30) -> ('un--clause'((1 + V0), {'Idris.Libraries.Data.IMaybe.Just', V5}, V1, V30)) end))}, fun () -> fun (V31) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V29, {'Idris.Builtin.MkPair', V18, {'Idris.Builtin.MkPair', V20, ('Idris.Idris2.Data.List1':'un--forget'(V31))}}}} end end} end} end end} end end} end}} end}}, fun () -> fun (V32) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V32 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V33, V34, V35) -> V33 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V36) -> case V36 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V37, V38) -> case V38 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V39, V40) -> case V40 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V41, V42) -> begin (V43 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V32))))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkWithClause', V43, ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V44) -> fun (V45) -> ('Idris.Idris2.Idris.Syntax':'un--applyArgs'(V44, V45)) end end, V5)), V41, V37, V39, V42}} end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V1, <<"impossible"/utf8>>))}, fun () -> fun (V46) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V4)), {'Idris.Libraries.Text.Parser.Core.Empty', begin (V47 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V46))))), {'Idris.Idris.Syntax.MkImpossible', V47, ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V48) -> fun (V49) -> ('Idris.Idris2.Idris.Syntax':'un--applyArgs'(V48, V49)) end end, V5))} end}} end end} end} end}.
'un--parseMode'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"typecheck"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 0} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"tc"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 0} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"normalise"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 1} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"normalize"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 1} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"execute"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 2} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"exec"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 2} end} end} end} end} end} end}.
'un--paramDecls'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V0, <<"parameters"/utf8>>))}, fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--23590-16207--in--un--newParamDecls'(V1, V0, V0, V1)), fun () -> ('nested--23590-16206--in--un--oldParamDecls'(V1, V0, V0, V1)) end}}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V4) -> ('un--topDecl'(V0, V4)) end))}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V3, V5))))}, fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PParameters', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V6)), case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V25, V26, V27, V28)) end end end end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V33, V34, V35)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V36, V37)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V38, V39, V40) -> V38 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end} end end}} end end}} end end}.
'un--optArgCmd'(V0, V1, V2, V3) -> {'Idris.Builtin.MkPair', ('nested--26453-19074--in--un--names'(V3, V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.OptionArg'}, {'Idris.Builtin.MkPair', V3, ('nested--26453-19075--in--un--parse'(V3, V2, V1, V0))}}}.
'un--opExpr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--appExpr'(V0, V1, V2))}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, case case V0 of {'Idris.Idris.Parser.MkParseOpts', E6, E7} -> (fun (V4, V5) -> V4 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V6) -> fun (V7) -> V7 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, fun (V8) -> fun (V9) -> V9 end end, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)))), fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, ('un--decoratedSymbol'(V1, <<"="/utf8>>)))) end})), fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, ('un--opExpr'(V0, V1, V2)))) end}}, fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Empty', begin (V13 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V3, V12))))), begin (V14 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V13))), {'Idris.Idris.Syntax.POp', V13, V14, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"="/utf8>>}}, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V15, V16, V17) -> V15 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V18, V19, V20) -> V18 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end} end end}; 0 -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"= not allowed"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())}, fun () -> fun (V21) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, case V21 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Core.Name.UN', E11} -> (fun (V25) -> case V25 of {'Idris.Core.Name.Basic', E12} -> (fun (V26) -> case V26 of <<"$"/utf8>> -> ('un--typeExpr'(V0, V1, V2)); _ -> ('un--expr'(V0, V1, V2)) end end(E12)); _ -> ('un--expr'(V0, V1, V2)) end end(E11)); _ -> ('un--expr'(V0, V1, V2)) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> fun (V27) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V21, V27}} end end} end end}}}, fun () -> fun (V28) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V28 of {'Idris.Libraries.Text.Bounded.MkBounded', E13, E14, E15} -> (fun (V29, V30, V31) -> V29 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V33, V34) -> begin (V35 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V3, V28))))), begin (V36 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V33))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.POp', V35, V36, case V33 of {'Idris.Libraries.Text.Bounded.MkBounded', E18, E19, E20} -> (fun (V37, V38, V39) -> V37 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E21, E22, E23} -> (fun (V40, V41, V42) -> V40 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34}} end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E24, E25, E26} -> (fun (V43, V44, V45) -> V43 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end} end} end end}.
'un--onoff'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V2, V3)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"on"/utf8>>)), 1)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"off"/utf8>>)), 0)) end}.
'un--onOffArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26638-19267--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.OnOffArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26638-19268--in--un--parse'(V2, V1, V0))}}}.
'un--nonEmptyTuple'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'({'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--typeExpr'(('un--pdef'()), V0, V2)))), fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V5}} end} end end})), fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--continueWithDecorated'(V0, V2, <<")"/utf8>>)), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Idris.Builtin.MkPair', 4, {'Idris.Prelude.Types.Nothing'}}} | []]}, {'Idris.Libraries.Text.Parser.Core.Empty', case V6 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V8, V9) -> ('nested--10763-6134--in--un--buildOutput'(V3, V2, V1, V0, ('Idris.Idris2.Builtin':'un--fst'(V8)), ('nested--10763-6136--in--un--mergePairs'(V3, V2, V1, V0, 0, V8, V9)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end}.
'un--nonEmptyCommand'() -> ('Idris.Idris2.Libraries.Text.Parser':'un--choice'({'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V23, V24, V25)) end end end end end}, 1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V31, V32) -> V32 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parserCommandsForHelp'()))))).
'un--noArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26166-18775--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.NoArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26166-18776--in--un--parse'(V2, V1, V0))}}}.
'un--nestedDpair'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--dpairType'(V0, V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nestedDpair'(V0, V4, V2)), fun () -> ('un--expr'(('un--pdef'()), V0, V2)) end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5)))), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V3, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5))))}, case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end} end end} end}.
'un--namespaceHead'(V0) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"namespace"/utf8>>)), fun () -> ('un--decorate'(V0, 6, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--namespaceId'())})) end}.
'un--namespaceDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--namespaceHead'(V0)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V3, fun (V5) -> ('un--topDecl'(V0, V5)) end)), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, V6}}} end} end end} end} end}}, fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V7 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V8, V9, V10) -> V8 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V14, V15) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PNamespace', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V7)), V14, ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V42, V43)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V15))))}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--nameArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26203-18813--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.NameArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26203-18814--in--un--parse'(V2, V1, V0))}}}.
'un--mutualDecls'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V2) -> fun (V3) -> V3 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V4) -> fun (V5) -> V5 end end, ('un--decoratedKeyword'(V0, <<"mutual"/utf8>>)))), fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V6, {'Idris.Libraries.Text.Parser.Core.Commit'})) end})), fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V8) -> ('un--topDecl'(V0, V8)) end)))) end}}, fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PMutual', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V9)), ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V25, V26, V27, V28)) end end end end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V33, V34, V35)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V36, V37)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V38, V39, V40) -> V38 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}} end end}.
'un--multiplicity'(V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))))), fun (V1) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V2 of 0 -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V3, V4)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V6)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}; 1 -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}; _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())} end()); _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Invalid multiplicity (must be 0 or 1)"/utf8>>} end end}.
'un--multilineStr'(V0, V1, V2) -> ('un--decorate'(V1, 3, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--multilineBegin'()), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Libraries.Text.Parser.Core':'un--<||>'(1, 1, ('un--interpBlock'(V0, V1, V2)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--strLitLines'()) end))})), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--strEnd'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, ('nested--10810-10509--in--un--toLines'(V2, V1, V0, V3, [], []))}} end} end} end}} end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V11, V12) -> {'Idris.Idris.Syntax.PMultiline', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V5)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V12)))), V10} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end})).
'un--moduleArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26302-18916--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.ModuleArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26302-18917--in--un--parse'(V2, V1, V0))}}}.
'un--mkTyConType'(V0, V1, V2) -> case V2 of [] -> {'Idris.Idris.Syntax.PType', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V1))}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V3))), {'Idris.Idris.Syntax.PPi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Idris.Syntax.PType', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V1))}, ('un--mkTyConType'(V0, V1, V4))} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkDataConType'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Just', V1}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Idris.Parser.UnnamedExpArg', E2} -> (fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V8, V9)) end end end end, fun (V10) -> {'Idris.Idris.Syntax.PPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Nothing'}, V5, V10} end, ('un--mkDataConType'(V0, V1, V4)))) end(E2)); {'Idris.Idris.Parser.UnnamedAutoArg', E3} -> (fun (V11) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end, fun (V16) -> {'Idris.Idris.Syntax.PPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.AutoImplicit'}, {'Idris.Prelude.Types.Nothing'}, V11, V16} end, ('un--mkDataConType'(V0, V1, V4)))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--loggingArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26758-19393--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.Args', [{'Idris.Idris.Parser.StringArg'} | [{'Idris.Idris.Parser.NumberArg'} | []]]}, {'Idris.Builtin.MkPair', V2, ('nested--26758-19394--in--un--parse'(V2, V1, V0))}}}.
'un--logLevel'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V2, V3)) end end end end, {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"off"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, fun (V8) -> ('Idris.Idris2.Data.String':'un--split'(fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'($., V9)) end, V8)) end, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()))))), fun (V10) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Options.Log':'un--mkLogLevel\x{27}'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V11))))}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"expected a log level"/utf8>>} end} end}.
'un--listRange'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V0, <<"]"/utf8>>))}, fun () -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V4))))), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getInitRange'(V3)), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('un--decorateKeywords'(V0, V3)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRangeStream', V5, ('Idris.Idris2.Builtin':'un--fst'(V6)), ('Idris.Idris2.Builtin':'un--snd'(V6))}}} end} end end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V7) -> fun (V8) -> V7 end end, ('un--expr'(('un--pdef'()), V0, V2)))), fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V9, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)))) end}}, fun () -> fun (V10) -> begin (V11 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V10))))), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--getInitRange'(V3)), fun (V12) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('un--decorateKeywords'(V0, V3)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRange', V11, ('Idris.Idris2.Builtin':'un--fst'(V12)), ('Idris.Idris2.Builtin':'un--snd'(V12)), case V10 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V13, V14, V15) -> V13 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}} end} end end end} end}.
'un--listExpr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pnowith'()), V0, V2)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"|"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--doAct'(V0, V2)))), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, V4}} end} end end} end} end end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PComprehension', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5)))), V10, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V27, V28, V29, V30)) end end end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V35, V36, V37)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V38, V39)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V11))}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V40) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'({'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<","/utf8>>))}, fun () -> fun (V41) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V42) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V45, V46)) end end end end, V42, V41))} end end} end end})), fun (V47) -> {'Idris.Libraries.Text.Parser.Core.Empty', [('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V50, V51)) end end end end, V40, V1)) | V47]} end} end end})), fun (V52) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<".."/utf8>>)), fun () -> ('un--listRange'(V0, V1, V2, V52)) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"]"/utf8>>))}, fun () -> fun (V53) -> {'Idris.Libraries.Text.Parser.Core.Empty', begin (V54 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V53))))), begin (V55 = case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V52))()) of 1 -> V54; 0 -> ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Idris.Syntax.PList', V54, V55, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V56) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V56)), case V56 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V57, V58, V59) -> V57 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V52))} end end} end end} end} end} end}.
'un--let_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"let"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V2) -> ('un--letBlock'(V0, V2)) end)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"in"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Idris.Parser.Let':'un--mkLets'(V0, V3, V4))} end end} end} end end}} end}.
'un--letBlock'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Libraries.Text.Parser.Core':'un--<||>'(1, 1, ('nested--10789-8546--in--un--letBinder'(V1, V0)), fun () -> ('nested--10789-8547--in--un--letDecl'(V1, V0)) end))}.
'un--lazy'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V2) -> fun (V3) -> V3 end end, ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Lazy"/utf8>>)))))), fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDelayed', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), 1, case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V9) -> fun (V10) -> V10 end end, ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Inf"/utf8>>)))))), fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDelayed', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V12)), 0, case V12 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V13, V14, V15) -> V13 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V16) -> fun (V17) -> V17 end end, ('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Delay"/utf8>>)))))), fun (V18) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V18, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDelay', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V19)), case V19 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V20, V21, V22) -> V20 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V23) -> fun (V24) -> V24 end end, ('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Force"/utf8>>)))))), fun (V25) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V25, ('un--simpleExpr'(V0, V1)))) end}}, fun () -> fun (V26) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PForce', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V26)), case V26 of {'Idris.Libraries.Text.Bounded.MkBounded', E9, E10, E11} -> (fun (V27, V28, V29) -> V27 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end} end} end}.
'un--lam'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"\x{5c}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V0, <<"case"/utf8>>))})), fun (V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10788-8379--in--un--continueLam'(V1, V0)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('nested--10788-8380--in--un--continueLamCase'(V1, V0, V3)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end}} end}.
'un--interpBlock'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V3) -> fun (V4) -> V3 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V5) -> fun (V6) -> V6 end end, ('Idris.Idris2.Parser.Rule.Source':'un--interpBegin'()))), fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--expr'(V0, V1, V2))})) end})), fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V8, ('Idris.Idris2.Parser.Rule.Source':'un--interpEnd'()))) end}.
'un--import_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"import"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end, ('un--decoratedKeyword'(V0, <<"public"/utf8>>)), 1)))), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 8, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--moduleIdent'())})), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V7)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"as"/utf8>>)), fun () -> ('un--decorate'(V0, 6, {'Idris.Libraries.Text.Parser.Core.MustWork', ('Idris.Idris2.Parser.Rule.Source':'un--namespaceId'())})) end})), fun (V8) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V7, V8}}} end} end end} end} end}}, fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V10, V11, V12) -> V10 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V9)), V14, V16, V17}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end}} end end}.
'un--implicitPi'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V2} end} end end} end}}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V4, V5, V6) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"Cannot return an implicit argument"/utf8>>, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Idris.Core.TT.Implicit'}, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))} end end} end} end end}.
'un--implDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--visOpt'(V0)))), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getVisibility'({'Idris.Prelude.Types.Nothing'}, V3)), fun (V4) -> begin (V6 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V5) -> ('Idris.Idris2.Data.Either':'un--getRight'(V5)) end, V3))), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V7) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('un--decoratedKeyword'(V0, <<"implementation"/utf8>>)))), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V8) -> fun (V9) -> V8 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V10) -> fun (V11) -> V11 end end, ('un--decoratedSymbol'(V0, <<"["/utf8>>)))), fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V12, ('un--decorate'(V0, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))) end})), fun (V13) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)))) end})), fun (V14) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--implBinds'(V0, V1)), fun (V15) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--constraints'(V0, V1)), fun (V16) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V17) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--simpleExpr'(V0, V1)))), fun (V18) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V19) -> fun (V20) -> V20 end end, ('un--decoratedKeyword'(V0, <<"using"/utf8>>)))), fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V21, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V24, V25)) end end end end, fun (V26) -> ('Idris.Idris2.Data.List1':'un--forget'(V26)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--decorate'(V0, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))))))) end})), fun (V27) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V28) -> fun (V29) -> V29 end end, ('un--decoratedKeyword'(V0, <<"where"/utf8>>)))), fun (V30) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V30, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V7, fun (V31) -> ('un--topDecl'(V0, V31)) end)))) end})), fun (V32) -> {'Idris.Libraries.Text.Parser.Core.Empty', fun (V33) -> {'Idris.Idris.Syntax.PImplementation', V33, V4, V6, 0, V15, V16, V17, V18, V14, V27, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V34) -> ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V50, V51, V52, V53)) end end end end end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V55)) end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V58, V59, V60)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V61, V62)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V34)))) end, V32))} end} end} end} end} end end} end} end} end}} end} end end} end} end}}, fun () -> fun (V63) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', case V63 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V64, V65, V66) -> (V64(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V63)))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}.
'un--implBinds'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--implBinds'(V0, V1)), fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, V4}} | V5]} end} end} end} end end} end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', []} end}.
'un--ifaceParam'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List1':'un--forget'(V3)), {'Idris.Builtin.MkPair', V2, V4}}} end} end end} end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'())))}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', [case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | []], {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5))}}}} end end} end}.
'un--ifaceDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--visibility'(V0)), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"interface"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--constraints'(V0, V1)), fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--ifaceParam'(V0, V1)))), fun (V7) -> begin (V40 = ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V19)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V23, V24, V25, V26)) end end end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V31, V32, V33)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V34, V35)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V36) -> case V36 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V37, V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V39) -> {'Idris.Builtin.MkPair', V39, V38} end, V37)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7))), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V41) -> fun (V42) -> V42 end end, ('un--decoratedSymbol'(V0, <<"|"/utf8>>)))), fun (V43) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V43, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))))) end})), fun (V44) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedKeyword'(V0, <<"where"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--recordConstructor'(V0)))), fun (V45) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V4, fun (V46) -> ('un--topDecl'(V0, V46)) end)), fun (V47) -> {'Idris.Libraries.Text.Parser.Core.Empty', fun (V48) -> {'Idris.Idris.Syntax.PInterface', V48, V3, V5, V6, V2, V40, V44, V45, ('un--collectDefs'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V56, V57, V58)) end end end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V60)) end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V64, V65, V66, V67)) end end end end end end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V69)) end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V72, V73, V74)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V75, V76)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V47))))} end} end} end} end} end} end end} end end} end}} end} end} end} end}}, fun () -> fun (V77) -> {'Idris.Libraries.Text.Parser.Core.Empty', case V77 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V78, V79, V80) -> (V78(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V77)))) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'un--if_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"if"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"then"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--commitKeyword'(V0, V1, <<"else"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end end} end} end end} end} end end} end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PIfThenElse', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V12, V13}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end}} end end}.
'un--iOperator'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--operator'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V0) -> fun (V1) -> V0 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))) end})), fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"`"/utf8>>)))) end} end}.
'un--help'() -> [{'Idris.Builtin.MkPair', [<<"<expr>"/utf8>> | []], {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.NoArg'}, <<"Evaluate an expression"/utf8>>}} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, V7)) end, V1)), {'Idris.Builtin.MkPair', V3, V5}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parserCommandsForHelp'())))].
'un--getVisibility'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V1 of [] -> {'Idris.Libraries.Text.Parser.Core.Empty', 0}; [E4 | E5] -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Types.Left', E8} -> (fun (V4) -> ('un--getVisibility'({'Idris.Prelude.Types.Just', V4}, V3)) end(E8)); _ -> case V1 of [E6 | E7] -> (fun (V5, V6) -> ('un--getVisibility'(V0, V6)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> case V1 of [E2 | E3] -> (fun (V7, V8) -> ('un--getVisibility'(V0, V8)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V9) -> case V1 of [] -> {'Idris.Libraries.Text.Parser.Core.Empty', V9}; [E12 | E13] -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Types.Left', E16} -> (fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Multiple visibility modifiers"/utf8>>} end(E16)); _ -> case V1 of [E14 | E15] -> (fun (V13, V14) -> ('un--getVisibility'(V0, V14)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> case V1 of [E10 | E11] -> (fun (V15, V16) -> ('un--getVisibility'(V0, V16)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> case V1 of [E0 | E1] -> (fun (V17, V18) -> ('un--getVisibility'(V0, V18)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getInitRange'(V0) -> case V0 of [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V3, V4, V5) -> V3 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Prelude.Types.Nothing'}}}; [E5 | E6] -> (fun (V6, V7) -> case V7 of [] -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E7, E8, E9} -> (fun (V8, V9, V10) -> V8 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Prelude.Types.Just', case V6 of {'Idris.Libraries.Text.Bounded.MkBounded', E10, E11, E12} -> (fun (V11, V12, V13) -> V11 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}; _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Invalid list range syntax"/utf8>>} end end(E5, E6)); _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Invalid list range syntax"/utf8>>} end end(E0, E1)); _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Invalid list range syntax"/utf8>>} end.
'un--gadtData'(V0, V1, V2, V3, V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--decoratedSymbol'(V0, <<":"/utf8>>))}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V4)), fun () -> fun (V5) -> ('un--dataBody'(V0, V1, V2, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5)) end end}} end}.
'un--forall_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"forall"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSimpleBinderName'(V0))})), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(fun (V8) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V8}}} end, V3)), {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V3))}}} end, ('Idris.Idris2.Data.List1':'un--forget'(V2))))} end end}} end}}, fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V10, V11, V12) -> V12 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"Cannot return a forall quantifier"/utf8>>, ('un--decoratedSymbol'(V0, <<"."/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Idris.Core.TT.Implicit'}, case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V14, V15, V16) -> V14 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13))} end end} end} end end}.
'un--fnOpt'(V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--totalityOpt'(V0)), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Totality', V1}}} end end}.
'un--fnDirectOpt'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"hint"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Hint', 1}}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"globalhint"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.GlobalHint', 0}}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"defaulthint"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.GlobalHint', 1}}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"inline"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Inline'}}}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"tcinline"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.TCInline'}}}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"extern"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.ExternFn'}}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"macro"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.Macro'}}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"spec"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.IFnOpt', {'Idris.TTImp.TTImp.SpecArgs', V1}}} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"foreign"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V2) -> ('un--expr'(('un--pdef'()), V0, V2)) end)), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PForeign', V3}} end} end} end} end} end} end} end} end} end} end}.
'un--fixDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 4, ('un--fix'()))), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--iOperator'()))), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end end} end end}} end end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> {'Idris.Idris.Syntax.PFixity', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V12)), V14} end, ('Idris.Idris2.Data.List1':'un--forget'(V13))))} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--fix'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V2, V3)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infixl"/utf8>>)), 0)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infixr"/utf8>>)), 1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, V11)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"infix"/utf8>>)), 2)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V14, V15)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"prefix"/utf8>>)), 3)) end} end} end}.
'un--fieldDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Idris.Core.TT.Implicit'}, ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, {'Idris.Core.TT.AutoImplicit'}, ('un--decoratedKeyword'(V0, <<"auto"/utf8>>)))))), fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('nested--22941-15554--in--un--fieldBody'(V1, V0, V2, V7)), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', V8}} end} end end} end}} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V9) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('nested--22941-15554--in--un--fieldBody'(V1, V0, V9, {'Idris.Core.TT.Explicit'})), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', V10}} end end} end} end}.
'un--field'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('nested--10797-9197--in--un--fieldName'(V2, V1, V0, V8)) end, V7)) end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Empty', fun (V9) -> fun (V10) -> [V9 | V10] end end}, fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, ('un--decorate'(V1, 2, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))))) end}, fun (V12) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V12, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('nested--10797-9198--in--un--recFieldCompat'(V2, V1, V0)))))) end})), fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, V17)) end end end end, case V0 of 1 -> ('un--decoratedSymbol'(V1, <<"="/utf8>>)); 0 -> ('un--decoratedSymbol'(V1, <<":="/utf8>>)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V18) -> fun (V19) -> {'Idris.Idris.Syntax.PSetField', V18, V19} end end)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V22, V23)) end end end end, ('un--decoratedSymbol'(V1, <<"$="/utf8>>)), fun (V24) -> fun (V25) -> {'Idris.Idris.Syntax.PSetFieldApp', V24, V25} end end)) end}, fun () -> fun (V26) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--plhs'()), V1, V2)), fun () -> fun (V27) -> {'Idris.Libraries.Text.Parser.Core.Empty', ((V26(V13))(V27))} end end} end end} end end}.
'un--extractNames'(V0) -> case V0 of {'Idris.Idris.Parser.ParseREPLCmd', E0} -> (fun (V1) -> V1 end(E0)); {'Idris.Idris.Parser.ParseKeywordCmd', E1} -> (fun (V2) -> [V2 | []] end(E1)); {'Idris.Idris.Parser.ParseIdentCmd', E2} -> (fun (V3) -> [V3 | []] end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extension'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V2, V3)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"ElabReflection"/utf8>>)), 0)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Borrowing"/utf8>>)), 1)) end}.
'un--exprArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26351-18967--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.ExprArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26351-18968--in--un--parse'(V2, V1, V0))}}}.
'un--expr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--let_'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--rewrite_'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)))), fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, ('un--expr'(('un--pdef'()), V1, V2)))) end}}, fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRunElab', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V6)), case V6 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> ('un--opExpr'(V0, V1, V2)) end} end} end}.
'un--explicitPi'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V2} end} end end} end}}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V4, V5, V6) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"Cannot return a named argument"/utf8>>, ('un--bindSymbol'(V0)))), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, V7, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))} end end} end end} end end}.
'un--eval'() -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), {'Idris.Core.FC.Virtual', 0}, ('Idris.Idris2.Parser.Rule.Source':'un--init'()))), fun () -> fun (V0) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Eval', V0}} end end}.
'un--editCmd'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"typeat"/utf8>> | []])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.TypeAt', V0, V1, V2}} end end} end end} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"cs"/utf8>> | []])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)), 1)))), fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.CaseSplit', V7, V8, V9, V10}} end end} end end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"ac"/utf8>> | []])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, V14)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)), 1)))), fun (V15) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V16) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V17) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.AddClause', V15, V16, V17}} end end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"ps"/utf8>> | [<<"proofsearch"/utf8>> | []]])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V20, V21)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)), 1)))), fun (V22) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V23) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V24) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ExprSearch', V22, V23, V24, []}} end end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--replCmd'([<<"psnext"/utf8>> | []])), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.ExprSearchNext'}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"gd"/utf8>> | []])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V27, V28)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)), 1)))), fun (V29) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V30) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V31) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun (V32) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.GenerateDef', V29, V30, V31, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V32))}} end} end end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--replCmd'([<<"gdnext"/utf8>> | []])), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.GenerateDefNext'}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"ml"/utf8>> | [<<"makelemma"/utf8>> | []]])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V35, V36)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)), 1)))), fun (V37) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V38) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V39) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MakeLemma', V37, V38, V39}} end end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"mc"/utf8>> | [<<"makecase"/utf8>> | []]])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V42, V43)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)), 1)))), fun (V44) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V45) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V46) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MakeCase', V44, V45, V46}} end end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--replCmd'([<<"mw"/utf8>> | [<<"makewith"/utf8>> | []]])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V49, V50)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"!"/utf8>>)), 1)))), fun (V51) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V52) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V53) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MakeWith', V51, V52, V53}} end end} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Unrecognised command"/utf8>>} end} end} end} end} end} end} end} end} end} end}.
'un--dpairType'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, fun (V7) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V7}} end, ('un--decoratedSimpleBinderName'(V0)))), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--typeExpr'(('un--pdef'()), V0, V2)), fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V8, V9}} end end} end} end end}}, fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Empty', case V10 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V11, V12, V13) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V15, V16) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V17) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nestedDpair'(V0, V10, V2)), fun () -> ('un--typeExpr'(('un--pdef'()), V0, V2)) end}}, fun () -> fun (V18) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V18)))), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V17)), {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V10)), V15}, V16, case V18 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V19, V20, V21) -> V19 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--doBlock'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(<<"do"/utf8>>)))), fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V4, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V5) -> ('un--doAct'(V0, V5)) end)))) end}}, fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDoBlock', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V6)))), {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V33, V34)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, case V6 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V35, V36, V37) -> V35 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--namespacedIdent'())}, fun () -> fun (V38) -> case V38 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V39, V40, V41) -> case V39 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V42, V43) -> case V43 of <<"do"/utf8>> -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V44) -> ('un--doAct'(V0, V44)) end))}, fun (V45) -> begin (V46 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V38, V45))))))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDoBlock', V46, V42, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V62, V63, V64, V65)) end end end end end end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V67)) end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V70, V71, V72)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V73, V74)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, case V45 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V75, V76, V77) -> V75 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}} end end}}; _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Not a namespaced \x{27}do\x{27}"/utf8>>} end end(E6, E7)); _ -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Not a namespaced \x{27}do\x{27}"/utf8>>} end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end} end}.
'un--doAct'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end, {'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}}, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"_"/utf8>>)))) end}}, fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('un--validPatternVar'(case V6 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"<-"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V6, V10}} end end} end}} end end}}, fun () -> fun (V11) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), ('case--doAct-9905'(V1, V0, V11, case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V12, V13, V14) -> V12 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"let"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--nonEmptyBlock'(fun (V15) -> ('un--letBlock'(V0, V15)) end)), fun () -> fun (V16) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Idris.Parser.Let':'un--mkDoLets'(V0, V16))}} end end}} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V17) -> fun (V18) -> V18 end end, ('un--decoratedKeyword'(V0, <<"rewrite"/utf8>>)))), fun (V19) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V19, ('un--expr'(('un--pdef'()), V0, V1)))) end}}, fun () -> fun (V20) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoRewrite', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V20)), case V20 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V21, V22, V23) -> V21 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | []]}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--expr'(('un--plhs'()), V0, V1))}, fun () -> fun (V24) -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V27, V28)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), [{'Idris.Idris.Syntax.DoExp', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V24)))), case V24 of {'Idris.Libraries.Text.Bounded.MkBounded', E9, E10, E11} -> (fun (V29, V30, V31) -> V29 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | []])), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V32) -> fun (V33) -> V33 end end, ('un--decoratedSymbol'(V0, <<"<-"/utf8>>)))), fun (V34) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V34, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Empty', fun (V35) -> fun (V36) -> {'Idris.Builtin.MkPair', V35, V36} end end}, fun (V37) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V37, ('un--expr'(('un--pnowith'()), V0, V1)))) end}, fun (V38) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V38, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V39) -> ('un--patAlt'(V0, V39)) end)))) end})) end}}, fun () -> fun (V40) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), case V40 of {'Idris.Libraries.Text.Bounded.MkBounded', E12, E13, E14} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V44, V45) -> begin (V46 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V24, V40))))))), {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Syntax.DoBindPat', V46, case V24 of {'Idris.Libraries.Text.Bounded.MkBounded', E17, E18, E19} -> (fun (V47, V48, V49) -> V47 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44, V45} | []]} end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end} end} end end} end} end} end}.
'un--directiveDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--directive'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', fun (V3) -> {'Idris.Idris.Syntax.PDirective', V3, V2} end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"runElab"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', fun (V5) -> {'Idris.Idris.Syntax.PReflect', V5, V4} end}} end end} end} end}}, fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', case V6 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V7, V8, V9) -> (V7(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V6)))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end}.
'un--directive'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"hide"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Hide', V2}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"logging"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--logLevel'()), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Logging', V3}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"auto_lazy"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--onoff'()), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.LazyOn', V4}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"unbound_implicits"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--onoff'()), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.UnboundImplicits', V5}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"prefix_record_projections"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--onoff'()), fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrefixRecordProjections', V6}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"ambiguity_depth"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.AmbigDepth', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V7))}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"auto_implicit_depth"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.AutoImplicitDepth', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V8))}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"nf_metavar_threshold"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.NFMetavarThreshold', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V9))}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"search_timeout"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()))), fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.SearchTimeout', V10}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"pair"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V11) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PairNames', V11, V12, V13}}} end end} end end} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"rewrite"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V14) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V15) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.RewriteName', V14, V15}}} end end} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"integerLit"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V16) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrimInteger', V16}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"stringLit"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V17) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrimString', V17}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"charLit"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V18) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrimChar', V18}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"doubleLit"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PrimDouble', V19}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"name"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V20) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--decoratedSimpleBinderName'(V0)))), fun () -> fun (V21) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Names', V20, ('Idris.Idris2.Data.List1':'un--forget'(V21))}}} end end} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"start"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V22) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.StartExpr', V22}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"allow_overloads"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V23) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Overloadable', V23}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"language"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--extension'()), fun () -> fun (V24) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.Extension', V24}}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"default"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--totalityOpt'(V0)), fun () -> fun (V25) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V1)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.DefaultTotality', V25}}} end end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--dependentDecorate'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V1}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V3)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V3))}}, {'Idris.Builtin.MkPair', (V2(case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V4, V5, V6) -> V4 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), {'Idris.Prelude.Types.Nothing'}}} | []]}, {'Idris.Libraries.Text.Parser.Core.Empty', case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V7, V8, V9) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}.
'un--definition'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--clause'(0, {'Idris.Libraries.Data.IMaybe.Nothing'}, V0, V1))}, fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), [case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | []]}} end end}.
'un--defaultImplicitPi'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"default"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--simpleExpr'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V1)), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V3}} end} end end} end end}} end} end}}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"Cannot return a default implicit argument"/utf8>>, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.Empty', case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V12, V13) -> ('un--pibindAll'(V0, {'Idris.Core.TT.DefImplicit', V12}, V13, V8)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end} end} end end}.
'un--decorationFromBounded'(V0, V1, V2) -> {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V2)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V2))}}, {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Types.Nothing'}}}.
'un--decoratedSymbol'(V0, V1) -> ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)))).
'un--decoratedSimpleBinderName'(V0) -> ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()))).
'un--decoratedKeyword'(V0, V1) -> ('un--decorate'(V0, 4, ('Idris.Idris2.Parser.Rule.Source':'un--keyword'(V1)))).
'un--decoratedDataTypeName'(V0) -> ('un--decorate'(V0, 1, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--opNonNS'()), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--capitalisedName'()) end})).
'un--decoratedDataConstructorName'(V0) -> ('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--dataConstructorName'()))).
'un--decorateKeywords'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Act', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('un--decorationFromBounded'(V0, 4, V2)) end, V1))}.
'un--decorateBoundedNames'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Act', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('un--boundedNameDecoration'(V0, V1, V3)) end, V2))}.
'un--decorate'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V2}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V3)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V3))}}, {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Types.Nothing'}}} | []]}, {'Idris.Libraries.Text.Parser.Core.Empty', case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V4, V5, V6) -> V4 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}.
'un--declsArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26402-19020--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.DeclsArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26402-19021--in--un--parse'(V2, V1, V0))}}}.
'un--dataOpt'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V2, V3)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noHints"/utf8>>)), {'Idris.TTImp.TTImp.NoHints'})), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"uniqueSearch"/utf8>>)), {'Idris.TTImp.TTImp.UniqueSearch'})), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V8) -> fun (V9) -> V9 end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"search"/utf8>>)))), fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, V14)) end end end end, fun (V15) -> {'Idris.TTImp.TTImp.SearchBy', V15} end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V18, V19)) end end end end, fun (V20) -> ('Idris.Idris2.Data.List1':'un--forget'(V20)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('Idris.Idris2.Parser.Rule.Source':'un--name'()))))))))) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V23, V24)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"external"/utf8>>)), {'Idris.TTImp.TTImp.External'})), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V27, V28)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noNewtype"/utf8>>)), {'Idris.TTImp.TTImp.NoNewtype'})), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V31, V32)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"noEnum"/utf8>>)), {'Idris.TTImp.TTImp.NoEnum'})) end} end} end} end} end}.
'un--dataDeclBody'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"data"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedDataTypeName'(V0))}}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V3}} end end} end} end}}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Empty', case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--simpleData'(V0, V4, V10, V1)), fun () -> ('un--gadtData'(V0, V9, V4, V10, V1)) end} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--dataDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--visibility'(V0)), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--dataDeclBody'(V0, V1)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end end} end} end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PData', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)), V10, V12, V13}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--dataBody'(V0, V1, V2, V3, V4, V5) -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 1, {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEndIndent'(V4)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPLater', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), V3, V5}}}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedKeyword'(V0, <<"where"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, [], {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V6) -> fun (V7) -> V6 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V8) -> fun (V9) -> V9 end end, ('un--decoratedSymbol'(V0, <<"["/utf8>>)))), fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, V14)) end end end end, fun (V15) -> ('Idris.Idris2.Data.List1':'un--forget'(V15)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), ('un--dataOpt'()))))))) end})), fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, ('un--decoratedSymbol'(V0, <<"]"/utf8>>)))) end})), fun (V17) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--blockAfter'(V1, fun (V18) -> ('un--tyDecls'({'Idris.Libraries.Text.Parser.Core.MustWork', ('un--decoratedDataConstructorName'(V0))}, <<""/utf8>>, V0, V18)) end)), fun (V19) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V17, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V35, V36, V37, V38)) end end end end end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V40)) end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V43, V44, V45)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V46, V47)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V48) -> ('Idris.Idris2.Data.List1':'un--forget'(V48)) end, V19))}} end} end} end}}, fun () -> fun (V49) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V49 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V50, V51, V52) -> V50 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V53) -> case V53 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V54, V55) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPData', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V2, V49)))), V3, V5, V54, V55}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end} end}.
'un--continueWithDecorated'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, fun (V3) -> fun (V4) -> V4 end end, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Idris.Prelude.Types.Just', V2})))), fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, ('un--decoratedSymbol'(V0, V2)))) end}.
'un--continueWith'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, fun (V2) -> fun (V3) -> V3 end end, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V0, {'Idris.Prelude.Types.Just', V1})))), fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(V1)))) end}.
'un--constraints'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--appExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"=>"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--constraints'(V0, V1)), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} | V3]} end} end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 0, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--decorate'(V0, 5, ('Idris.Idris2.Parser.Rule.Source':'un--name'()))), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--typeExpr'(('un--pdef'()), V0, V1)), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"=>"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('un--constraints'(V0, V1)), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, V5} | V6]} end} end} end} end end} end} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', []} end} end}.
'un--compileArgsCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26687-19319--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.Args', [{'Idris.Idris.Parser.FileArg'} | [{'Idris.Idris.Parser.ExprArg'} | []]]}, {'Idris.Builtin.MkPair', V2, ('nested--26687-19320--in--un--parse'(V2, V1, V0))}}}.
'un--commitKeyword'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Idris.Prelude.Types.Just', V2})), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedKeyword'(V0, V2)), fun () -> ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V1, {'Idris.Prelude.Types.Nothing'})) end}}.
'un--command'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V2, V3)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), {'Idris.Idris.Syntax.NOP'})), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nonEmptyCommand'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V6, V7)) end end end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":?"/utf8>>)), {'Idris.Idris.Syntax.Help'})), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V8) -> fun (V9) -> V9 end end, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)))), fun (V10) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V10, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V13, V14)) end end end end, fun (V15) -> {'Idris.Idris.Syntax.Editing', V15} end, ('un--editCmd'()))))) end}, fun () -> ('un--eval'()) end} end} end} end}.
'un--collectDefs'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.Syntax.PDef', E2, E3} -> (fun (V3, V4) -> ('case--collectDefs-17279'(V4, V3, V2, ('Idris.Idris2.Data.List':'un--spanBy'(fun (V5) -> ('Idris.Idris2.Idris.Syntax':'un--isPDef'(V5)) end, V2)))) end(E2, E3)); {'Idris.Idris.Syntax.PNamespace', E4, E5, E6} -> (fun (V6, V7, V8) -> [{'Idris.Idris.Syntax.PNamespace', V6, V7, ('un--collectDefs'(V8))} | ('un--collectDefs'(V2))] end(E4, E5, E6)); {'Idris.Idris.Syntax.PMutual', E7, E8} -> (fun (V9, V10) -> [{'Idris.Idris.Syntax.PMutual', V9, ('un--collectDefs'(V10))} | ('un--collectDefs'(V2))] end(E7, E8)); _ -> [V1 | ('un--collectDefs'(V2))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--clause'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--column'()), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('nested--18429-11443--in--un--clauseLHS'(V3, V2, V0, V1, V2, V3, V1)), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('nested--18429-11444--in--un--parseWithArg'(V3, V2, V0, V1)))), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V4, case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', V7, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end} end end} end}}, fun () -> fun (V9) -> begin (V13 = ('Idris.Idris2.Builtin':'un--fst'(case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V10, V11, V12) -> V10 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V17 = ('Idris.Idris2.Builtin':'un--snd'(case V9 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V14, V15, V16) -> V14 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V18 = ('Idris.Idris2.Builtin':'un--snd'(V17))), case ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V0, ('Idris.Idris2.Prelude.Types.List':'un--length'(V18)))) of 1 -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Wrong number of \x{27}with\x{27} arguments:"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" expected "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" but got "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V18))))))))))))}; 0 -> ('un--parseRHS'(V0, V2, V9, V13, V3, V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}.
'un--claims'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, <<""/utf8>>, ('Idris.Idris2.Parser.Rule.Source':'un--documentation'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--visOpt'(V0)))), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--getVisibility'({'Idris.Prelude.Types.Nothing'}, V3)), fun (V4) -> begin (V6 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V5) -> ('Idris.Idris2.Data.Either':'un--getRight'(V5)) end, V3))), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--tyDecls'(('un--dependentDecorate'(V0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun (V8) -> case ('Idris.Idris2.Core.Name':'un--isUnsafeBuiltin'(V8)) of 1 -> 7; 0 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)), V2, V0, V1)), fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V10) -> {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V7, V10}}}} end, V9))} end end} end} end end} end} end}}, fun () -> fun (V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V19, V20) -> {'Idris.Idris.Syntax.PClaim', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11)), V19, V15, V17, V20} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V21, V22, V23) -> V21 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end}.
'un--case_'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"case"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--commitKeyword'(V0, V1, <<"of"/utf8>>))}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--block'(fun (V3) -> ('un--caseAlt'(V0, V3)) end)), fun (V4) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V4}} end} end} end end} end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PCase', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)))), V10, V11}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--caseRHS'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V4) -> fun (V5) -> V5 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V6) -> fun (V7) -> V7 end end, ('un--decoratedSymbol'(V0, <<"=>"/utf8>>)))), fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V8, ('Idris.Idris2.Parser.Rule.Source':'un--mustContinue'(V2, {'Idris.Prelude.Types.Nothing'})))) end})), fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V9, ('un--typeExpr'(('un--pdef'()), V0, V2)))) end}}, fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), begin (V11 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V10))))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkPatClause', V11, V3, case V10 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V12, V13, V14) -> V12 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []}} end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedKeyword'(V0, <<"impossible"/utf8>>))}, fun () -> fun (V15) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--atEnd'(V2)), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.MkImpossible', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V15)))), V3}}} end end} end}.
'un--caseAlt'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--opExpr'(('un--plhs'()), V0, V1))}, fun () -> fun (V2) -> ('un--caseRHS'(V0, V2, V1, case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end}.
'un--builtinDecl'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"builtin"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--builtinType'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--name'()), fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V3}} end end} end end}} end}}, fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PBuiltin', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), V9, V10}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}.
'un--bracketedExpr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--expr'(('un--pdef'()), V0, V2)), fun () -> fun (V4) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--continueWithDecorated'(V0, V2, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V3, V4}} end} end end} end end}}, fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Idris.Builtin.MkPair', 4, {'Idris.Prelude.Types.Nothing'}}} | []]}, begin (V12 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V5))))), begin (V13 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V10))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PSectionL', V12, V13, case V10 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V14, V15, V16) -> V14 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11}} end end} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V19, V20)) end end end end, fun (V21) -> ('Idris.Idris2.Data.List1':'un--forget'(V21)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--some'({'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--postfixProj'())}))))}, fun () -> fun (V22) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Idris.Builtin.MkPair', 4, {'Idris.Prelude.Types.Nothing'}}} | []]}, begin (V30 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V23) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V23)), case V23 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V24, V25, V26) -> V24 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, case V22 of {'Idris.Libraries.Text.Bounded.MkBounded', E11, E12, E13} -> (fun (V27, V28, V29) -> V27 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPostfixAppPartial', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V22)), V30}} end} end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--continueWith'(V2, <<")"/utf8>>))}, fun () -> fun (V31) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PUnit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V31))))}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V32) -> fun (V33) -> V32 end end, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V34) -> fun (V35) -> V34 end end, ('un--dpairType'(V0, V1, V2)))), fun (V36) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V36, ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))))) end})), fun (V37) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V37, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Idris.Builtin.MkPair', 1, {'Idris.Prelude.Types.Nothing'}}} | []]})) end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--typeExpr'(('un--pdef'()), V0, V2))}, fun () -> fun (V38) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"**"/utf8>>))}, fun () -> fun (V39) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V40) -> fun (V41) -> V40 end end, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--nestedDpair'(V0, V39, V2)), fun () -> ('un--expr'(('un--pdef'()), V0, V2)) end})), fun (V42) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V42, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)))) end}}, fun () -> fun (V43) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PDPair', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V43)))), ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V39)), case V38 of {'Idris.Libraries.Text.Bounded.MkBounded', E14, E15, E16} -> (fun (V44, V45, V46) -> V44 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V43))))}, case V43 of {'Idris.Libraries.Text.Bounded.MkBounded', E17, E18, E19} -> (fun (V47, V48, V49) -> V47 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V50) -> fun (V51) -> V50 end end, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())})), fun (V52) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V52, ('un--decoratedSymbol'(V0, <<")"/utf8>>)))) end}}, fun () -> fun (V53) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Act', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1)))), {'Idris.Builtin.MkPair', 4, {'Idris.Prelude.Types.Nothing'}}} | []]}, begin (V54 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V1, V53))))), begin (V58 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, case V53 of {'Idris.Libraries.Text.Bounded.MkBounded', E20, E21, E22} -> (fun (V55, V56, V57) -> V55 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PSectionR', V54, V58, case V38 of {'Idris.Libraries.Text.Bounded.MkBounded', E23, E24, E25} -> (fun (V59, V60, V61) -> V59 end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V53 of {'Idris.Libraries.Text.Bounded.MkBounded', E26, E27, E28} -> (fun (V62, V63, V64) -> case V62 of {'Idris.Libraries.Text.Bounded.MkBounded', E29, E30, E31} -> (fun (V65, V66, V67) -> V65 end(E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end}, fun () -> ('un--tuple'(V0, V1, V2, case V38 of {'Idris.Libraries.Text.Bounded.MkBounded', E32, E33, E34} -> (fun (V68, V69, V70) -> V68 end(E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end} end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V71) -> begin (V72 = {'Idris.Core.FC.MkFC', V0, V71, V71}), begin (V73 = {'Idris.Idris.Syntax.PRef', V72, {'Idris.Core.Name.MN', <<"__leftTupleSection"/utf8>>, 0}}), {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--nonEmptyTuple'(V0, V1, V2, V73))}, fun () -> fun (V74) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PLam', V72, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V73, {'Idris.Idris.Syntax.PInfer', V72}, case V74 of {'Idris.Libraries.Text.Bounded.MkBounded', E35, E36, E37} -> (fun (V75, V76, V77) -> V75 end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end} end end end} end} end} end} end} end}.
'un--boundedNameDecoration'(V0, V1, V2) -> {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V2)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V2))}}, {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Types.Just', case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}.
'un--binder'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--autoImplicitPi'(V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--defaultImplicitPi'(V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--forall_'(V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--implicitPi'(V0, V1)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--explicitPi'(V0, V1)), fun () -> ('un--lam'(V0, V1)) end} end} end} end} end}.
'un--bindSymbol'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V3, V4)) end end end end, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)), {'Idris.Core.TT.Explicit'})), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V7, V8)) end end end end, ('un--decoratedSymbol'(V0, <<"=>"/utf8>>)), {'Idris.Core.TT.AutoImplicit'})) end}.
'un--bindList'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V4, V5)) end end end end, fun (V6) -> ('Idris.Idris2.Data.List1':'un--forget'(V6)) end, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('un--decoratedSymbol'(V0, <<","/utf8>>)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('un--multiplicity'(V0)), fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--simpleExpr'(V0, V1))}, fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--option'(1, {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V8))}, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V9) -> fun (V10) -> V10 end end, ('un--decoratedSymbol'(V0, <<":"/utf8>>)))), fun (V11) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V11, ('un--opExpr'(('un--pdef'()), V0, V1)))) end})), fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V8, V12}}} end} end end} end})))).
'un--autoNumberArgCmd'(V0, V1, V2) -> {'Idris.Builtin.MkPair', ('nested--26555-19179--in--un--names'(V2, V1, V0)), {'Idris.Builtin.MkPair', {'Idris.Idris.Parser.AutoNumberArg'}, {'Idris.Builtin.MkPair', V2, ('nested--26555-19181--in--un--parse'(V2, V1, V0))}}}.
'un--autoImplicitPi'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V0, <<"{"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedKeyword'(V0, <<"auto"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, {'Idris.Libraries.Text.Parser.Core.Commit'}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--pibindList'(V0, V1)), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('un--decoratedSymbol'(V0, <<"}"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V2} end} end end}} end} end}}, fun () -> fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--mustWorkBecause'(1, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V4, V5, V6) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"Cannot return an auto implicit argument"/utf8>>, ('un--decoratedSymbol'(V0, <<"->"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--typeExpr'(('un--pdef'()), V0, V1))}, fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('un--pibindAll'(V0, {'Idris.Core.TT.AutoImplicit'}, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))} end end} end} end end}.
'un--atom'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"Type"/utf8>>))))}, fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PType', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V1))}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--name'())}, fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V2)), case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--dependentDecorate'(V0, ('Idris.Idris2.Parser.Rule.Source':'un--constant'()), fun (V6) -> case ('Idris.Idris2.Core.TT':'un--isPrimType'(V6)) of 1 -> 1; 0 -> 3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))}, fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V7)), case V7 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decoratedSymbol'(V0, <<"_"/utf8>>))}, fun () -> fun (V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PImplicit', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V11))}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"?"/utf8>>))}, fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PInfer', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V12))}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--holeName'())}, fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PHole', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V13)), 0, case V13 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V14, V15, V16) -> V14 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 3, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"MkWorld"/utf8>>))))}, fun () -> fun (V17) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V17)), {'Idris.Core.TT.WorldVal'}}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--decorate'(V0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"World"/utf8>>))))}, fun () -> fun (V18) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V18)), {'Idris.Core.TT.WorldType'}}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', ('Idris.Idris2.Parser.Rule.Source':'un--pragma'(<<"search"/utf8>>))}, fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PSearch', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V19)), (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))))))))))))))))))))))))))))}} end end} end} end} end} end} end} end} end} end}.
'un--argExpr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--simpleExpr'(V1, V2)), fun () -> fun (V3) -> case V3 of {'Idris.Idris.Syntax.PHole', E0, E1, E2} -> (fun (V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedExpArg', {'Idris.Idris.Syntax.PHole', V4, 1, V6}} | []]} end(E0, E1, E2)); _ -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.UnnamedExpArg', V3} | []]} end end end}}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), ('nested--10746-3837--in--un--braceArgs'(V2, V1, V0, V1, V2))}, case case V0 of {'Idris.Idris.Parser.MkParseOpts', E5, E6} -> (fun (V7, V8) -> V8 end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Parser.Rule.Source':'un--continue'(V2)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--decoratedSymbol'(V1, <<"|"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--expr'(case V0 of {'Idris.Idris.Parser.MkParseOpts', E3, E4} -> (fun (V9, V10) -> {'Idris.Idris.Parser.MkParseOpts', V9, 0} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2)), fun () -> fun (V11) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Parser.WithArg', V11} | []]} end end} end}} end; 0 -> fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"| not allowed here"/utf8>>} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end}.
'un--appExpr'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--case_'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--doBlock'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--lam'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--lazy'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--if_'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--with_'(V1, V2)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V5, V6)) end end end end, fun (V7) -> fun (V8) -> {'Idris.Builtin.MkPair', V7, V8} end end, ('un--simpleExpr'(V1, V2)))), fun (V9) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(0, V9, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--argExpr'(V0, V1, V2)))))) end}}, fun () -> fun (V10) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V10 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V11, V12, V13) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V15, V16) -> {'Idris.Libraries.Text.Parser.Core.Empty', ('nested--10745-3586--in--un--applyExpImp'(V2, V1, V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V10)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V10)), V15, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V32, V33, V34, V35)) end end end end end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V37)) end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V40, V41, V42)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V43, V44)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V16))))} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Bounds', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V47, V48)) end end end end, fun (V49) -> fun (V50) -> {'Idris.Builtin.MkPair', V49, V50} end end, {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--iOperator'())})), fun (V51) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V51, ('un--expr'(('un--pdef'()), V1, V2)))) end}}, fun () -> fun (V52) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Empty', case V52 of {'Idris.Libraries.Text.Bounded.MkBounded', E5, E6, E7} -> (fun (V53, V54, V55) -> V53 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V56) -> case V56 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V57, V58) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Syntax.PPrefixOp', ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V52)), ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V57)), case V57 of {'Idris.Libraries.Text.Bounded.MkBounded', E10, E11, E12} -> (fun (V59, V60, V61) -> V59 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Expected \x{27}case\x{27}, \x{27}if\x{27}, \x{27}do\x{27}, application or operator expression"/utf8>>} end} end} end} end} end} end} end} end}.
