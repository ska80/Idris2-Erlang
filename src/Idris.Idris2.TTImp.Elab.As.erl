-module('Idris.Idris2.TTImp.Elab.As').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8591-9236--in--un--rigPat\x{27}'/16,
  'nested--8591-9237--in--un--rigPat'/15,
  'nested--8591-9238--in--un--rigAs\x{27}'/16,
  'nested--8591-9239--in--un--rigAs'/15,
  'un--checkAs'/15
]).
'nested--8591-9236--in--un--rigPat\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V10)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V26, V27)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V34, V35)) end end}}, V10)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V36, V37)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V38, V39)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8591-9237--in--un--rigPat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('nested--8591-9236--in--un--rigPat\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V4)).
'nested--8591-9238--in--un--rigAs\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V10)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V26, V27)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V34, V35)) end end}}, V10)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V36, V37)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V38, V39)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8591-9239--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('nested--8591-9238--in--un--rigAs\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V4)).
'un--checkAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V21 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V15, V16, V17, V18, V19, V20) -> V15 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V22) -> case V21 of {'Idris.TTImp.Elab.Check.InLHS', E8} -> (fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> begin (V42 = {'Idris.Core.Name.PV', V12, case V27 of {'Idris.TTImp.Elab.Check.MkEState', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V29 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V43 = ('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'(V4, V21, V12, V22))), case V43 of {'Idris.Prelude.Types.Left', E25} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'(V4, V42, V22))), case V46 of {'Idris.Prelude.Types.Left', E27} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V48) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V51, V52)) end end}, V42, case V27 of {'Idris.TTImp.Elab.Check.MkEState', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V57 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V67 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('nested--8591-9237--in--un--rigPat'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), V6, V7, V8, V13, V14, V22))), case V67 of {'Idris.Prelude.Types.Left', E29} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V69) -> case V69 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V70, V71) -> begin (V78 = ('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--mkPatternHole'(V0, V4, V1, V3, V10, V5, V42, V8, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E33, E34, E35, E36, E37, E38} -> (fun (V72, V73, V74, V75, V76, V77) -> V73 end(E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14, V22))), case V78 of {'Idris.Prelude.Types.Left', E39} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V80) -> case V80 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V81, V82) -> case V82 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V83, V84) -> begin (V175 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.as"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Added as pattern name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V86, V87)) end end}, {'Idris.Prelude.Show.MkShow', fun (V88) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V89)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V90, V91)) end end}, {'Idris.Prelude.Show.MkShow', fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V94, V95)) end end}, {'Idris.Prelude.Show.MkShow', fun (V96) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V98, V99)) end end}, {'Idris.Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V101, V102)) end end}}, V96)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V106, V107)) end end}, {'Idris.Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V109, V110)) end end}}, V103, V104)) end end}}, V92)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V114, V115)) end end}, {'Idris.Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V118, V119)) end end}, {'Idris.Prelude.Show.MkShow', fun (V120) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V121, V122)) end end}}, V116)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V125) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V126, V127)) end end}, {'Idris.Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V129, V130)) end end}}, V123, V124)) end end}}, V111, V112)) end end}}, V88)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V133) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V133)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V134, V135)) end end}, {'Idris.Prelude.Show.MkShow', fun (V136) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V137) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V137)) end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V138, V139)) end end}, {'Idris.Prelude.Show.MkShow', fun (V140) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V141) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V141)) end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V142, V143)) end end}, {'Idris.Prelude.Show.MkShow', fun (V144) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V144)) end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V145, V146)) end end}}, V140)) end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V149) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V149)) end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V150, V151)) end end}, {'Idris.Prelude.Show.MkShow', fun (V152) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V152)) end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V153, V154)) end end}}, V147, V148)) end end}}, V136)) end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V157) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V157)) end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V158, V159)) end end}, {'Idris.Prelude.Show.MkShow', fun (V160) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V161) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V161)) end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V162, V163)) end end}, {'Idris.Prelude.Show.MkShow', fun (V164) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V164)) end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V165, V166)) end end}}, V160)) end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V169) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V169)) end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V170, V171)) end end}, {'Idris.Prelude.Show.MkShow', fun (V172) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V172)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V173, V174)) end end}}, V167, V168)) end end}}, V155, V156)) end end}}, V131, V132)) end end}}, {'Idris.Builtin.MkPair', V42, {'Idris.Builtin.MkPair', ('nested--8591-9239--in--un--rigAs'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), {'Idris.Builtin.MkPair', V81, {'Idris.Builtin.MkPair', V83, V84}}}})))) end, V22))), case V175 of {'Idris.Prelude.Types.Left', E45} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V177) -> begin (V179 = begin (V178 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V178} end), case V179 of {'Idris.Prelude.Types.Left', E47} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V181) -> begin (V183 = begin (V182 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V182} end), case V183 of {'Idris.Prelude.Types.Left', E49} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V185) -> begin (V203 = begin (V202 = ('erlang':'put'(V4, case V185 of {'Idris.TTImp.Elab.Check.MkEState', E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199) -> {'Idris.TTImp.Elab.Check.MkEState', V186, V187, V188, V189, begin (V200 = V0), [{'Idris.Builtin.MkPair', V42, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--8591-9239--in--un--rigAs'(V200, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), {'Idris.Core.TT.Explicit'}, V81, V83, V70}} | V190] end, begin (V201 = V0), [{'Idris.Builtin.MkPair', V42, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--8591-9239--in--un--rigAs'(V201, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), {'Idris.Core.TT.Explicit'}, V81, V84, V70}} | V191] end, V192, V193, V194, V195, V196, V197, V198, V199} end(E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V202} end), case V203 of {'Idris.Prelude.Types.Left', E65} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V205) -> begin (V206 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V10, V81, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V83)), {'Idris.Prelude.Types.Just', V71}, V22))), case V206 of {'Idris.Prelude.Types.Left', E67} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V208) -> case V208 of {'Idris.Builtin.MkPair', E69, E70} -> (fun (V209, V210) -> begin (V211 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"checkAs is adding \x{2193}"/utf8>> end, V22))), case V211 of {'Idris.Prelude.Types.Left', E71} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V213) -> begin (V217 = begin (V214 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V210))(V22))), case V214 of {'Idris.Prelude.Types.Left', E73} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V216) -> ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V10, V12, V8, V216, V22)) end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V217 of {'Idris.Prelude.Types.Left', E75} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V219) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V9, V11, V209, V70}, V71}} end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E77} -> (fun (V220) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NonLinearPattern', V9, V12}, V22)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> begin (V224 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.as"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bad @-pattern "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V221) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V221)) end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V222, V223)) end end}, V13)))) end, V22))), case V224 of {'Idris.Prelude.Types.Left', E6} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V226) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V9, <<"@-patterns only allowed in pattern clauses"/utf8>>}, V22)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
