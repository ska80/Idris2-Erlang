-module('Idris.Idris2.Prelude.Types').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--rangeFromThen-5706'/4,
  'case--case block in rangeFromThenTo-5612'/5,
  'case--rangeFromThenTo-5553'/5,
  'case--rangeFromTo-5461'/4,
  'case--rangeFromThen-5386'/3,
  'case--case block in rangeFromThenTo-5339'/4,
  'case--case block in rangeFromThenTo-5299'/4,
  'case--rangeFromThenTo-5285'/4,
  'case--rangeFromTo-5235'/3,
  'case--takeBefore-5117'/4,
  'case--takeUntil-5076'/4,
  'case--toLower-4875'/2,
  'case--toUpper-4861'/2,
  'case--unpack-4718'/2,
  'case--substr-4665'/4,
  'case--compare-3913'/6,
  'case--max-3808'/4,
  'case--min-3780'/4,
  'case--max-2502'/4,
  'case--min-2467'/4,
  'case--max-1373'/4,
  'case--min-1345'/4,
  'case-->>=-1071'/5,
  'case--count-538'/4,
  'case--max-461'/3,
  'case--min-447'/3,
  'case--integerToNat-331'/2,
  'nested--6031-4887--in--un--hexChars'/1,
  'dn--un--uninhabited_Uninhabited_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/2,
  'dn--un--uninhabited_Uninhabited_(|((=== Nothing) (Just $x)),((~=~ Nothing) (Just $x))|)'/1,
  'dn--un--uninhabited_Uninhabited_(|((=== (Just $x)) Nothing),((~=~ (Just $x)) Nothing)|)'/1,
  'dn--un--uninhabited_Uninhabited_((Either $a) $b)'/3,
  'dn--un--uninhabited_Uninhabited_((=== (Yes $p)) (No $q))'/1,
  'dn--un--uninhabited_Uninhabited_((=== (Right $p)) (Left $q))'/1,
  'dn--un--uninhabited_Uninhabited_((=== (No $p)) (Yes $q))'/1,
  'dn--un--uninhabited_Uninhabited_((=== (Left $p)) (Right $q))'/1,
  'dn--un--traverse_Traversable_Maybe'/3,
  'dn--un--traverse_Traversable_List'/3,
  'dn--un--traverse_Traversable_(Either $e)'/3,
  'dn--un--toList_Foldable_Maybe'/1,
  'dn--un--toList_Foldable_List'/1,
  'dn--un--toList_Foldable_(Either $e)'/1,
  'dn--un--rangeFrom_Range_Nat'/1,
  'dn--un--rangeFrom_Range_$a'/2,
  'dn--un--rangeFromTo_Range_Nat'/2,
  'dn--un--rangeFromTo_Range_$a'/3,
  'dn--un--rangeFromThen_Range_Nat'/2,
  'dn--un--rangeFromThen_Range_$a'/3,
  'dn--un--rangeFromThenTo_Range_Nat'/3,
  'dn--un--rangeFromThenTo_Range_$a'/4,
  'dn--un--pure_Applicative_Maybe'/1,
  'dn--un--pure_Applicative_List'/1,
  'dn--un--pure_Applicative_(Pair $a)'/2,
  'dn--un--pure_Applicative_(Either $e)'/1,
  'dn--un--null_Foldable_Maybe'/1,
  'dn--un--null_Foldable_List'/1,
  'dn--un--null_Foldable_(Either $e)'/1,
  'dn--un--neutral_Monoid_String'/0,
  'dn--un--neutral_Monoid_(Maybe $a)'/0,
  'dn--un--neutral_Monoid_(List $a)'/0,
  'dn--un--min_Ord_Nat'/2,
  'dn--un--min_Ord_(Maybe $a)'/3,
  'dn--un--min_Ord_(List $a)'/3,
  'dn--un--min_Ord_((Either $a) $b)'/3,
  'dn--un--max_Ord_Nat'/2,
  'dn--un--max_Ord_(Maybe $a)'/3,
  'dn--un--max_Ord_(List $a)'/3,
  'dn--un--max_Ord_((Either $a) $b)'/3,
  'dn--un--map_Functor_Stream'/2,
  'dn--un--map_Functor_Maybe'/2,
  'dn--un--map_Functor_List'/2,
  'dn--un--map_Functor_(Pair $a)'/2,
  'dn--un--map_Functor_(Either $e)'/2,
  'dn--un--mapSnd_Bifunctor_Pair'/2,
  'dn--un--mapSnd_Bifunctor_Either'/2,
  'dn--un--mapFst_Bifunctor_Pair'/2,
  'dn--un--mapFst_Bifunctor_Either'/2,
  'dn--un--join_Monad_Maybe'/1,
  'dn--un--join_Monad_List'/1,
  'dn--un--join_Monad_(Pair $a)'/2,
  'dn--un--join_Monad_(Either $e)'/1,
  'dn--un--fromInteger_Num_Nat'/1,
  'dn--un--foldr_Foldable_Maybe'/3,
  'dn--un--foldr_Foldable_List'/3,
  'dn--un--foldr_Foldable_(Either $e)'/3,
  'dn--un--foldl_Foldable_Maybe'/3,
  'dn--un--foldl_Foldable_List'/3,
  'dn--un--foldl_Foldable_(Either $e)'/3,
  'dn--un--foldlM_Foldable_Maybe'/4,
  'dn--un--foldlM_Foldable_List'/4,
  'dn--un--foldlM_Foldable_(Either $e)'/4,
  'dn--un--foldMap_Foldable_Maybe'/3,
  'dn--un--foldMap_Foldable_List'/3,
  'dn--un--foldMap_Foldable_(Either $e)'/3,
  'dn--un--empty_Alternative_Maybe'/0,
  'dn--un--empty_Alternative_List'/0,
  'dn--un--compare_Ord_Nat'/2,
  'dn--un--compare_Ord_(Maybe $a)'/3,
  'dn--un--compare_Ord_(List $a)'/3,
  'dn--un--compare_Ord_((Either $a) $b)'/3,
  'dn--un--bitraverse_Bitraversable_Pair'/4,
  'dn--un--bitraverse_Bitraversable_Either'/4,
  'dn--un--binull_Bifoldable_Pair'/1,
  'dn--un--binull_Bifoldable_Either'/1,
  'dn--un--bimap_Bifunctor_Pair'/3,
  'dn--un--bimap_Bifunctor_Either'/3,
  'dn--un--bifoldr_Bifoldable_Pair'/4,
  'dn--un--bifoldr_Bifoldable_Either'/4,
  'dn--un--bifoldl_Bifoldable_Pair'/4,
  'dn--un--bifoldl_Bifoldable_Either'/4,
  'dn--un--__Impl_Uninhabited_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/2,
  'dn--un--__Impl_Uninhabited_(|((=== Nothing) (Just $x)),((~=~ Nothing) (Just $x))|)'/1,
  'dn--un--__Impl_Uninhabited_(|((=== (Just $x)) Nothing),((~=~ (Just $x)) Nothing)|)'/1,
  'dn--un--__Impl_Uninhabited_((Either $a) $b)'/3,
  'dn--un--__Impl_Uninhabited_((=== (Yes $p)) (No $q))'/1,
  'dn--un--__Impl_Uninhabited_((=== (Right $p)) (Left $q))'/1,
  'dn--un--__Impl_Uninhabited_((=== (No $p)) (Yes $q))'/1,
  'dn--un--__Impl_Uninhabited_((=== (Left $p)) (Right $q))'/1,
  'dn--un--__Impl_Traversable_Maybe'/0,
  'dn--un--__Impl_Traversable_List'/0,
  'dn--un--__Impl_Traversable_(Either $e)'/0,
  'dn--un--__Impl_Semigroup_String'/2,
  'dn--un--__Impl_Semigroup_(Maybe $a)'/2,
  'dn--un--__Impl_Semigroup_(List $a)'/2,
  'dn--un--__Impl_Range_Nat'/0,
  'dn--un--__Impl_Range_$a'/1,
  'dn--un--__Impl_Ord_Nat'/0,
  'dn--un--__Impl_Ord_(Maybe $a)'/1,
  'dn--un--__Impl_Ord_(List $a)'/1,
  'dn--un--__Impl_Ord_((Either $a) $b)'/1,
  'dn--un--__Impl_Num_Nat'/0,
  'dn--un--__Impl_Monoid_String'/0,
  'dn--un--__Impl_Monoid_(Maybe $a)'/0,
  'dn--un--__Impl_Monoid_(List $a)'/0,
  'dn--un--__Impl_Monad_Maybe'/0,
  'dn--un--__Impl_Monad_List'/0,
  'dn--un--__Impl_Monad_(Pair $a)'/1,
  'dn--un--__Impl_Monad_(Either $e)'/0,
  'dn--un--__Impl_Functor_Stream'/4,
  'dn--un--__Impl_Functor_Maybe'/4,
  'dn--un--__Impl_Functor_List'/4,
  'dn--un--__Impl_Functor_(Pair $a)'/4,
  'dn--un--__Impl_Functor_(Either $e)'/4,
  'dn--un--__Impl_Foldable_Maybe'/0,
  'dn--un--__Impl_Foldable_List'/0,
  'dn--un--__Impl_Foldable_(Either $e)'/0,
  'dn--un--__Impl_Eq_Nat'/0,
  'dn--un--__Impl_Eq_(Maybe $a)'/1,
  'dn--un--__Impl_Eq_(List $a)'/1,
  'dn--un--__Impl_Eq_((Either $a) $b)'/1,
  'dn--un--__Impl_Bitraversable_Pair'/0,
  'dn--un--__Impl_Bitraversable_Either'/0,
  'dn--un--__Impl_Bifunctor_Pair'/0,
  'dn--un--__Impl_Bifunctor_Either'/0,
  'dn--un--__Impl_Bifoldable_Pair'/0,
  'dn--un--__Impl_Bifoldable_Either'/0,
  'dn--un--__Impl_Applicative_Maybe'/0,
  'dn--un--__Impl_Applicative_List'/0,
  'dn--un--__Impl_Applicative_(Pair $a)'/1,
  'dn--un--__Impl_Applicative_(Either $e)'/0,
  'dn--un--__Impl_Alternative_Maybe'/0,
  'dn--un--__Impl_Alternative_List'/0,
  'dn--un-->_Ord_Nat'/2,
  'dn--un-->_Ord_(Maybe $a)'/3,
  'dn--un-->_Ord_(List $a)'/3,
  'dn--un-->_Ord_((Either $a) $b)'/3,
  'dn--un-->>=_Monad_Maybe'/2,
  'dn--un-->>=_Monad_List'/2,
  'dn--un-->>=_Monad_(Pair $a)'/3,
  'dn--un-->>=_Monad_(Either $e)'/2,
  'dn--un-->=_Ord_Nat'/2,
  'dn--un-->=_Ord_(Maybe $a)'/3,
  'dn--un-->=_Ord_(List $a)'/3,
  'dn--un-->=_Ord_((Either $a) $b)'/3,
  'dn--un--==_Eq_Nat'/2,
  'dn--un--==_Eq_(Maybe $a)'/3,
  'dn--un--==_Eq_(List $a)'/3,
  'dn--un--==_Eq_((Either $a) $b)'/3,
  'dn--un--<|>_Alternative_Maybe'/2,
  'dn--un--<|>_Alternative_List'/2,
  'dn--un--<_Ord_Nat'/2,
  'dn--un--<_Ord_(Maybe $a)'/3,
  'dn--un--<_Ord_(List $a)'/3,
  'dn--un--<_Ord_((Either $a) $b)'/3,
  'dn--un--<=_Ord_Nat'/2,
  'dn--un--<=_Ord_(Maybe $a)'/3,
  'dn--un--<=_Ord_(List $a)'/3,
  'dn--un--<=_Ord_((Either $a) $b)'/3,
  'dn--un--<+>_Semigroup_String'/2,
  'dn--un--<+>_Semigroup_(Maybe $a)'/2,
  'dn--un--<+>_Semigroup_(List $a)'/2,
  'dn--un--<*>_Applicative_Maybe'/2,
  'dn--un--<*>_Applicative_List'/2,
  'dn--un--<*>_Applicative_(Pair $a)'/3,
  'dn--un--<*>_Applicative_(Either $e)'/2,
  'dn--un--/=_Eq_Nat'/2,
  'dn--un--/=_Eq_(Maybe $a)'/3,
  'dn--un--/=_Eq_(List $a)'/3,
  'dn--un--/=_Eq_((Either $a) $b)'/3,
  'dn--un--+_Num_Nat'/2,
  'dn--un--*_Num_Nat'/2,
  'un--whenJust'/3,
  'un--unpack'/1,
  'un--toUpper'/1,
  'un--toLower'/1,
  'un--tanh'/1,
  'un--tan'/1,
  'un--takeUntil'/2,
  'un--takeBefore'/2,
  'un--take'/2,
  'un--tail'/1,
  'un--substr'/3,
  'un--strUncons'/1,
  'un--strCons'/2,
  'un--sqrt'/1,
  'un--sinh'/1,
  'un--sin'/1,
  'un--reverse'/1,
  'un--rangeFromTo'/3,
  'un--rangeFromThenTo'/4,
  'un--rangeFromThen'/3,
  'un--rangeFrom'/2,
  'un--prim__integerToNat'/1,
  'un--pow'/2,
  'un--plus'/2,
  'un--pi'/0,
  'un--pack'/1,
  'un--ord'/1,
  'un--natToInteger'/1,
  'un--mult'/2,
  'un--minus'/2,
  'un--maybe'/3,
  'un--log'/1,
  'un--isUpper'/1,
  'un--isSpace'/1,
  'un--isOctDigit'/1,
  'un--isNL'/1,
  'un--isLower'/1,
  'un--isHexDigit'/1,
  'un--isDigit'/1,
  'un--isControl'/1,
  'un--isAlphaNum'/1,
  'un--isAlpha'/1,
  'un--integerToNat'/1,
  'un--head'/1,
  'un--getAt'/2,
  'un--floor'/1,
  'un--fastUnpack'/1,
  'un--fastPack'/1,
  'un--fastConcat'/1,
  'un--exp'/1,
  'un--euler'/0,
  'un--equalNat'/2,
  'un--elem'/3,
  'un--either'/3,
  'un--countFrom'/2,
  'un--count'/3,
  'un--cosh'/1,
  'un--cos'/1,
  'un--compareNat'/2,
  'un--chr'/1,
  'un--ceiling'/1,
  'un--atan'/1,
  'un--asin'/1,
  'un--acos'/1
]).
'case--rangeFromThen-5706'(V0, V1, V2, V3) -> case V3 of 1 -> ('un--countFrom'(V1, fun (V4) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Num.MkNum', E3, E4, E5} -> (fun (V8, V9, V10) -> ((V8(V4))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E6, E7, E8} -> (fun (V11, V12, V13) -> ((V13(V2))(V1)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)); 0 -> ('un--countFrom'(V1, fun (V14) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E9, E10, E11} -> (fun (V15, V16, V17) -> ((V17(V14))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E12, E13, E14} -> (fun (V18, V19, V20) -> ((V20(V1))(V2)) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in rangeFromThenTo-5612'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('dn--un--pure_Applicative_List'(V3)); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--rangeFromThenTo-5553'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('un--takeBefore'(fun (V5) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13) -> ((V8(V5))(V3)) end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V14) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E8, E9, E10} -> (fun (V15, V16, V17) -> ((V17(V14))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E11, E12, E13} -> (fun (V18, V19, V20) -> ((V20(V1))(V2)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); 1 -> case case case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28) -> case V21 of {'Idris.Prelude.EqOrd.MkEq', E32, E33} -> (fun (V29, V30) -> ((V29(V1))(V2)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38) -> case V31 of {'Idris.Prelude.EqOrd.MkEq', E22, E23} -> (fun (V39, V40) -> ((V39(V2))(V3)) end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('dn--un--pure_Applicative_List'(V1)); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> ('un--takeBefore'(fun (V41) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49) -> ((V45(V41))(V3)) end(E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V50) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E42, E43, E44} -> (fun (V51, V52, V53) -> case V51 of {'Idris.Prelude.Num.MkNum', E45, E46, E47} -> (fun (V54, V55, V56) -> ((V54(V50))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E48, E49, E50} -> (fun (V57, V58, V59) -> ((V59(V2))(V1)) end(E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--rangeFromTo-5461'(V0, V1, V2, V3) -> case V3 of 0 -> ('un--takeUntil'(fun (V4) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12) -> ((V10(V4))(V2)) end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V13) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E8, E9, E10} -> (fun (V14, V15, V16) -> case V14 of {'Idris.Prelude.Num.MkNum', E11, E12, E13} -> (fun (V17, V18, V19) -> ((V17(V13))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E14, E15, E16} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Num.MkNum', E17, E18, E19} -> (fun (V23, V24, V25) -> (V25(1)) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); 1 -> ('dn--un--pure_Applicative_List'(V1)); 2 -> ('un--takeUntil'(fun (V26) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34) -> ((V31(V26))(V2)) end(E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V35) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E28, E29, E30} -> (fun (V36, V37, V38) -> ((V38(V35))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E31, E32, E33} -> (fun (V39, V40, V41) -> case V39 of {'Idris.Prelude.Num.MkNum', E34, E35, E36} -> (fun (V42, V43, V44) -> (V44(1)) end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--rangeFromThen-5386'(V0, V1, V2) -> case V2 of 1 -> ('un--countFrom'(V1, fun (V3) -> (('un--prim__integerToNat'((V0 - V1))) + V3) end)); 0 -> ('un--countFrom'(V1, fun (V4) -> ('un--prim__integerToNat'((V4 - ('un--prim__integerToNat'((V1 - V0)))))) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in rangeFromThenTo-5339'(V0, V1, V2, V3) -> case V3 of 1 -> ('dn--un--pure_Applicative_List'(V2)); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in rangeFromThenTo-5299'(V0, V1, V2, V3) -> case V3 of 1 -> ('un--takeBefore'(fun (V4) -> ('dn--un-->_Ord_Nat'(V4, V0)) end, ('un--countFrom'(V2, fun (V5) -> (('un--prim__integerToNat'((V1 - V2))) + V5) end)))); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--rangeFromThenTo-5285'(V0, V1, V2, V3) -> case V3 of 0 -> case ('dn--un-->=_Ord_Nat'(V0, V2)) of 1 -> ('un--takeBefore'(fun (V4) -> ('dn--un-->_Ord_Nat'(V4, V0)) end, ('un--countFrom'(V2, fun (V5) -> (('un--prim__integerToNat'((V1 - V2))) + V5) end)))); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case ('dn--un--==_Eq_Nat'(V2, V0)) of 1 -> ('dn--un--pure_Applicative_List'(V2)); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> ('un--takeBefore'(fun (V6) -> ('dn--un--<_Ord_Nat'(V6, V0)) end, ('un--countFrom'(V2, fun (V7) -> ('un--prim__integerToNat'((V7 - ('un--prim__integerToNat'((V2 - V1)))))) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--rangeFromTo-5235'(V0, V1, V2) -> case V2 of 0 -> ('un--takeUntil'(fun (V3) -> ('dn--un-->=_Ord_Nat'(V3, V0)) end, ('un--countFrom'(V1, fun (V4) -> (1 + V4) end)))); 1 -> ('dn--un--pure_Applicative_List'(V1)); 2 -> ('un--takeUntil'(fun (V5) -> ('dn--un--<=_Ord_Nat'(V5, V0)) end, ('un--countFrom'(V1, fun (V6) -> ('un--prim__integerToNat'((V6 - (1 + 0)))) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--takeBefore-5117'(V0, V1, V2, V3) -> case V3 of 1 -> []; 0 -> [V0 | ('un--takeBefore'(V2, (V1())))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--takeUntil-5076'(V0, V1, V2, V3) -> case V3 of 1 -> [V0 | []]; 0 -> [V0 | ('un--takeUntil'(V2, (V1())))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toLower-4875'(V0, V1) -> case V1 of 1 -> case ((case V0 of E1 when (((erlang:'is_integer'(E1)) andalso (E1 >= 0)) andalso (E1 =< 1114111)) -> E1; _ -> 65533 end + 32) rem 9223372036854775808) of E0 when (((erlang:'is_integer'(E0)) andalso (E0 >= 0)) andalso (E0 =< 1114111)) -> E0; _ -> 65533 end; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toUpper-4861'(V0, V1) -> case V1 of 1 -> case ((case V0 of E1 when (((erlang:'is_integer'(E1)) andalso (E1 >= 0)) andalso (E1 =< 1114111)) -> E1; _ -> 65533 end - 32) rem 9223372036854775808) of E0 when (((erlang:'is_integer'(E0)) andalso (E0 >= 0)) andalso (E0 =< 1114111)) -> E0; _ -> 65533 end; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unpack-4718'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V2 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V3, V4) -> [V3 | ('un--unpack'(V4))] end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--substr-4665'(V0, V1, V2, V3) -> case V3 of 1 -> ('string':'slice'(V0, V2, V1)); 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compare-3913'(V0, V1, V2, V3, V4, V5) -> case V5 of 1 -> ('dn--un--compare_Ord_(List $a)'(V0, V2, V4)); _ -> V5 end.
'case--max-3808'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-3780'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-2502'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-2467'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-1373'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-1345'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case-->>=-1071'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> ((V7(V1))(V5)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--count-538'(V0, V1, V2, V3) -> case V3 of 1 -> (1 + 0); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-461'(V0, V1, V2) -> case V2 of 1 -> V1; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-447'(V0, V1, V2) -> case V2 of 1 -> V1; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--integerToNat-331'(V0, V1) -> case V1 of 1 -> 0; 0 -> (1 + ('un--prim__integerToNat'((V0 - 1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6031-4887--in--un--hexChars'(V0) -> [$0 | [$1 | [$2 | [$3 | [$4 | [$5 | [$6 | [$7 | [$8 | [$9 | [$A | [$B | [$C | [$D | [$E | [$F | []]]]]]]]]]]]]]]]].
'dn--un--uninhabited_Uninhabited_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> case V1 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V3, V4) -> (V2(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Right', E3} -> (fun (V5) -> case V1 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> (V5(V7)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--uninhabited_Uninhabited_(|((=== Nothing) (Just $x)),((~=~ Nothing) (Just $x))|)'(V0) -> ('erlang':'throw'("No clauses")).
'dn--un--uninhabited_Uninhabited_(|((=== (Just $x)) Nothing),((~=~ (Just $x)) Nothing)|)'(V0) -> ('erlang':'throw'("No clauses")).
'dn--un--uninhabited_Uninhabited_((Either $a) $b)'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> (V0(V3)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> (V1(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--uninhabited_Uninhabited_((=== (Yes $p)) (No $q))'(V0) -> ('erlang':'throw'("No clauses")).
'dn--un--uninhabited_Uninhabited_((=== (Right $p)) (Left $q))'(V0) -> ('erlang':'throw'("No clauses")).
'dn--un--uninhabited_Uninhabited_((=== (No $p)) (Yes $q))'(V0) -> ('erlang':'throw'("No clauses")).
'dn--un--uninhabited_Uninhabited_((=== (Left $p)) (Right $q))'(V0) -> ('erlang':'throw'("No clauses")).
'dn--un--traverse_Traversable_Maybe'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V3, V4, V5) -> ((V4('erased'))({'Idris.Prelude.Types.Nothing'})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V6) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E4, E5, E6} -> (fun (V7, V8, V9) -> V7 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V10) -> {'Idris.Prelude.Types.Just', V10} end, (V1(V6)))) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--traverse_Traversable_List'(V0, V1, V2) -> case V2 of [] -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V3, V4, V5) -> ((V4('erased'))([])) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E3 | E4] -> (fun (V6, V7) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V8, V9, V10) -> ((((V10('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E8, E9, E10} -> (fun (V11, V12, V13) -> ((((V13('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V14, V15, V16) -> ((V15('erased'))(fun (V17) -> fun (V18) -> [V17 | V18] end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))((V1(V6)))) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('dn--un--traverse_Traversable_List'(V0, V1, V7)))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--traverse_Traversable_(Either $e)'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E1, E2, E3} -> (fun (V4, V5, V6) -> ((V5('erased'))({'Idris.Prelude.Types.Left', V3})) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Right', E4} -> (fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V8, V9, V10) -> V8 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V11) -> {'Idris.Prelude.Types.Right', V11} end, (V1(V7)))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toList_Foldable_Maybe'(V0) -> ('dn--un--foldr_Foldable_Maybe'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--toList_Foldable_List'(V0) -> V0.
'dn--un--toList_Foldable_(Either $e)'(V0) -> ('dn--un--foldr_Foldable_(Either $e)'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--rangeFrom_Range_Nat'(V0) -> ('un--countFrom'(V0, fun (V1) -> (1 + V1) end)).
'dn--un--rangeFrom_Range_$a'(V0, V1) -> ('un--countFrom'(V1, fun (V2) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Num.MkNum', E3, E4, E5} -> (fun (V6, V7, V8) -> ((V6(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E6, E7, E8} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Num.MkNum', E9, E10, E11} -> (fun (V12, V13, V14) -> (V14(1)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'dn--un--rangeFromTo_Range_Nat'(V0, V1) -> case ('dn--un--compare_Ord_Nat'(V0, V1)) of 0 -> ('un--takeUntil'(fun (V2) -> ('dn--un-->=_Ord_Nat'(V2, V1)) end, ('un--countFrom'(V0, fun (V3) -> (1 + V3) end)))); 1 -> ('dn--un--pure_Applicative_List'(V0)); 2 -> ('un--takeUntil'(fun (V4) -> ('dn--un--<=_Ord_Nat'(V4, V1)) end, ('un--countFrom'(V0, fun (V5) -> ('un--prim__integerToNat'((V5 - (1 + 0)))) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--rangeFromTo_Range_$a'(V0, V1, V2) -> case case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10) -> ((V4(V1))(V2)) end(E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> ('un--takeUntil'(fun (V11) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19) -> ((V17(V11))(V2)) end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V20) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E8, E9, E10} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Num.MkNum', E11, E12, E13} -> (fun (V24, V25, V26) -> ((V24(V20))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E14, E15, E16} -> (fun (V27, V28, V29) -> case V27 of {'Idris.Prelude.Num.MkNum', E17, E18, E19} -> (fun (V30, V31, V32) -> (V32(1)) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); 1 -> ('dn--un--pure_Applicative_List'(V1)); 2 -> ('un--takeUntil'(fun (V33) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41) -> ((V38(V33))(V2)) end(E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V42) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E28, E29, E30} -> (fun (V43, V44, V45) -> ((V45(V42))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E31, E32, E33} -> (fun (V46, V47, V48) -> case V46 of {'Idris.Prelude.Num.MkNum', E34, E35, E36} -> (fun (V49, V50, V51) -> (V51(1)) end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--rangeFromThen_Range_Nat'(V0, V1) -> case ('dn--un-->_Ord_Nat'(V1, V0)) of 1 -> ('un--countFrom'(V0, fun (V2) -> (('un--prim__integerToNat'((V1 - V0))) + V2) end)); 0 -> ('un--countFrom'(V0, fun (V3) -> ('un--prim__integerToNat'((V3 - ('un--prim__integerToNat'((V0 - V1)))))) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--rangeFromThen_Range_$a'(V0, V1, V2) -> case case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10) -> ((V6(V2))(V1)) end(E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--countFrom'(V1, fun (V11) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E0, E1, E2} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Num.MkNum', E3, E4, E5} -> (fun (V15, V16, V17) -> ((V15(V11))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E6, E7, E8} -> (fun (V18, V19, V20) -> ((V20(V2))(V1)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)); 0 -> ('un--countFrom'(V1, fun (V21) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E9, E10, E11} -> (fun (V22, V23, V24) -> ((V24(V21))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E12, E13, E14} -> (fun (V25, V26, V27) -> ((V27(V1))(V2)) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--rangeFromThenTo_Range_Nat'(V0, V1, V2) -> case ('dn--un--compare_Ord_Nat'(V0, V1)) of 0 -> case ('dn--un-->=_Ord_Nat'(V2, V0)) of 1 -> ('un--takeBefore'(fun (V3) -> ('dn--un-->_Ord_Nat'(V3, V2)) end, ('un--countFrom'(V0, fun (V4) -> (('un--prim__integerToNat'((V1 - V0))) + V4) end)))); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case ('dn--un--==_Eq_Nat'(V0, V2)) of 1 -> ('dn--un--pure_Applicative_List'(V0)); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> ('un--takeBefore'(fun (V5) -> ('dn--un--<_Ord_Nat'(V5, V2)) end, ('un--countFrom'(V0, fun (V6) -> ('un--prim__integerToNat'((V6 - ('un--prim__integerToNat'((V0 - V1)))))) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--rangeFromThenTo_Range_$a'(V0, V1, V2, V3) -> case case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11) -> ((V5(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E59, E60, E61} -> (fun (V15, V16, V17) -> ((V17(V3))(V1)) end(E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E62, E63, E64} -> (fun (V12, V13, V14) -> ((V14(V3))(V2)) end(E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> ('un--takeBefore'(fun (V18) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26) -> ((V21(V18))(V3)) end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V27) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E8, E9, E10} -> (fun (V28, V29, V30) -> ((V30(V27))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E11, E12, E13} -> (fun (V31, V32, V33) -> ((V33(V1))(V2)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); 1 -> case case case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41) -> case V34 of {'Idris.Prelude.EqOrd.MkEq', E32, E33} -> (fun (V42, V43) -> ((V42(V1))(V2)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51) -> case V44 of {'Idris.Prelude.EqOrd.MkEq', E22, E23} -> (fun (V52, V53) -> ((V52(V2))(V3)) end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('dn--un--pure_Applicative_List'(V1)); 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> ('un--takeBefore'(fun (V54) -> case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.EqOrd.MkOrd', E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62) -> ((V58(V54))(V3)) end(E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--countFrom'(V1, fun (V63) -> case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E42, E43, E44} -> (fun (V64, V65, V66) -> case V64 of {'Idris.Prelude.Num.MkNum', E45, E46, E47} -> (fun (V67, V68, V69) -> ((V67(V63))(case ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Num.MkNeg', E48, E49, E50} -> (fun (V70, V71, V72) -> ((V72(V2))(V1)) end(E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pure_Applicative_Maybe'(V0) -> {'Idris.Prelude.Types.Just', V0}.
'dn--un--pure_Applicative_List'(V0) -> [V0 | []].
'dn--un--pure_Applicative_(Pair $a)'(V0, V1) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V2, V3) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}.
'dn--un--pure_Applicative_(Either $e)'(V0) -> {'Idris.Prelude.Types.Right', V0}.
'dn--un--null_Foldable_Maybe'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun () -> 1 end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> fun () -> 0 end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--null_Foldable_List'(V0) -> case V0 of [] -> fun () -> 1 end; [E0 | E1] -> (fun (V1, V2) -> fun () -> 0 end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--null_Foldable_(Either $e)'(V0) -> case V0 of {'Idris.Prelude.Types.Left', E0} -> (fun (V1) -> fun () -> 1 end end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V2) -> fun () -> 0 end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--neutral_Monoid_String'() -> <<""/utf8>>.
'dn--un--neutral_Monoid_(Maybe $a)'() -> {'Idris.Prelude.Types.Nothing'}.
'dn--un--neutral_Monoid_(List $a)'() -> [].
'dn--un--min_Ord_Nat'(V0, V1) -> case ('dn--un--<_Ord_Nat'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(Maybe $a)'(V0, V1, V2) -> case ('dn--un--<_Ord_(Maybe $a)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(List $a)'(V0, V1, V2) -> case ('dn--un--<_Ord_(List $a)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_((Either $a) $b)'(V0, V1, V2) -> case ('dn--un--<_Ord_((Either $a) $b)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_Nat'(V0, V1) -> case ('dn--un-->_Ord_Nat'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_(Maybe $a)'(V0, V1, V2) -> case ('dn--un-->_Ord_(Maybe $a)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_(List $a)'(V0, V1, V2) -> case ('dn--un-->_Ord_(List $a)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_((Either $a) $b)'(V0, V1, V2) -> case ('dn--un-->_Ord_((Either $a) $b)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_Stream'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Stream.::', E0, E1} -> (fun (V2, V3) -> {'Idris.Prelude.Types.Stream.::', (V0(V2)), fun () -> ('dn--un--map_Functor_Stream'(V0, (V3()))) end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_Maybe'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Just', (V0(V2))} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_List'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> [(V0(V2)) | ('dn--un--map_Functor_List'(V0, V3))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_(Pair $a)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> {'Idris.Builtin.MkPair', V2, (V0(V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_(Either $e)'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', (V0(V3))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--mapSnd_Bifunctor_Pair'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> {'Idris.Builtin.MkPair', V2, (V0(V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--mapSnd_Bifunctor_Either'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', (V0(V3))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--mapFst_Bifunctor_Pair'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> {'Idris.Builtin.MkPair', (V0(V2)), V3} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--mapFst_Bifunctor_Either'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', (V0(V2))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V3} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_Maybe'(V0) -> ('dn--un-->>=_Monad_Maybe'(V0, fun (V1) -> V1 end)).
'dn--un--join_Monad_List'(V0) -> ('dn--un-->>=_Monad_List'(V0, fun (V1) -> V1 end)).
'dn--un--join_Monad_(Pair $a)'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E4, E5} -> (fun (V6, V7) -> ((V6(V2))(V4)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_(Either $e)'(V0) -> ('dn--un-->>=_Monad_(Either $e)'(V0, fun (V1) -> V1 end)).
'dn--un--fromInteger_Num_Nat'(V0) -> ('un--prim__integerToNat'(V0)).
'dn--un--foldr_Foldable_Maybe'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ((V0(V3))(V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldr_Foldable_List'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ((V0(V3))(('dn--un--foldr_Foldable_List'(V0, V1, V4)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldr_Foldable_(Either $e)'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> V1 end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> ((V0(V4))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldl_Foldable_Maybe'(V0, V1, V2) -> (('dn--un--foldr_Foldable_Maybe'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldl_Foldable_List'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('dn--un--foldl_Foldable_List'(V0, ((V0(V1))(V3)), V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldl_Foldable_(Either $e)'(V0, V1, V2) -> (('dn--un--foldr_Foldable_(Either $e)'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldlM_Foldable_Maybe'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_Maybe'(fun (V4) -> fun (V5) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))(V2)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)).
'dn--un--foldlM_Foldable_List'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_List'(fun (V4) -> fun (V5) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))(V2)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)).
'dn--un--foldlM_Foldable_(Either $e)'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_(Either $e)'(fun (V4) -> fun (V5) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))(V2)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)).
'dn--un--foldMap_Foldable_Maybe'(V0, V1, V2) -> ('dn--un--foldr_Foldable_Maybe'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V5, V6) -> ((V5((V1(V3))))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--foldMap_Foldable_List'(V0, V1, V2) -> ('dn--un--foldl_Foldable_List'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V5, V6) -> ((V5(V3))((V1(V4)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--foldMap_Foldable_(Either $e)'(V0, V1, V2) -> ('dn--un--foldr_Foldable_(Either $e)'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V5, V6) -> ((V5((V1(V3))))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--empty_Alternative_Maybe'() -> {'Idris.Prelude.Types.Nothing'}.
'dn--un--empty_Alternative_List'() -> [].
'dn--un--compare_Ord_Nat'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'un--compareInteger'(V0, V1)).
'dn--un--compare_Ord_(Maybe $a)'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> 0 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V4) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 2 end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> case V0 of {'Idris.Prelude.EqOrd.MkOrd', E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13) -> ((V7(V4))(V5)) end(E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_(List $a)'(V0, V1, V2) -> case V1 of [] -> case V2 of [] -> 1; [E0 | E1] -> (fun (V3, V4) -> 0 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E2 | E3] -> (fun (V5, V6) -> case V2 of [] -> 2; [E4 | E5] -> (fun (V7, V8) -> ('case--compare-3913'(V0, V5, V6, V7, V8, case V0 of {'Idris.Prelude.EqOrd.MkOrd', E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16) -> ((V10(V5))(V7)) end(E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_((Either $a) $b)'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> case V2 of {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.EqOrd.MkOrd', E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12) -> ((V6(V3))(V4)) end(E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); {'Idris.Prelude.Types.Right', E10} -> (fun (V13) -> 0 end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Right', E11} -> (fun (V14) -> case V2 of {'Idris.Prelude.Types.Left', E12} -> (fun (V15) -> 2 end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V16) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.EqOrd.MkOrd', E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24) -> ((V18(V14))(V16)) end(E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--bitraverse_Bitraversable_Pair'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V8('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V9, V10, V11) -> ((((V11('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E8, E9, E10} -> (fun (V12, V13, V14) -> ((V13('erased'))(fun (V15) -> fun (V16) -> {'Idris.Builtin.MkPair', V15, V16} end end)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))((V1(V4)))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))((V2(V5)))) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--bitraverse_Bitraversable_Either'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E1, E2, E3} -> (fun (V5, V6, V7) -> V5 end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V8) -> {'Idris.Prelude.Types.Left', V8} end, (V1(V4)))) end(E0)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> V10 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V13) -> {'Idris.Prelude.Types.Right', V13} end, (V2(V9)))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--binull_Bifoldable_Pair'(V0) -> fun () -> 0 end.
'dn--un--binull_Bifoldable_Either'(V0) -> fun () -> 0 end.
'dn--un--bimap_Bifunctor_Pair'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', (V0(V3)), (V1(V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--bimap_Bifunctor_Either'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', (V0(V3))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', (V1(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--bifoldr_Bifoldable_Pair'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ((V0(V4))(((V1(V5))(V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--bifoldr_Bifoldable_Either'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> ((V0(V4))(V2)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ((V1(V5))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--bifoldl_Bifoldable_Pair'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ((V1(((V0(V2))(V4))))(V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--bifoldl_Bifoldable_Either'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> ((V0(V2))(V4)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ((V1(V2))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Uninhabited_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1) -> ('dn--un--uninhabited_Uninhabited_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1)).
'dn--un--__Impl_Uninhabited_(|((=== Nothing) (Just $x)),((~=~ Nothing) (Just $x))|)'(V0) -> ('dn--un--uninhabited_Uninhabited_(|((=== Nothing) (Just $x)),((~=~ Nothing) (Just $x))|)'(V0)).
'dn--un--__Impl_Uninhabited_(|((=== (Just $x)) Nothing),((~=~ (Just $x)) Nothing)|)'(V0) -> ('dn--un--uninhabited_Uninhabited_(|((=== (Just $x)) Nothing),((~=~ (Just $x)) Nothing)|)'(V0)).
'dn--un--__Impl_Uninhabited_((Either $a) $b)'(V0, V1, V2) -> ('dn--un--uninhabited_Uninhabited_((Either $a) $b)'(V0, V1, V2)).
'dn--un--__Impl_Uninhabited_((=== (Yes $p)) (No $q))'(V0) -> ('dn--un--uninhabited_Uninhabited_((=== (Yes $p)) (No $q))'(V0)).
'dn--un--__Impl_Uninhabited_((=== (Right $p)) (Left $q))'(V0) -> ('dn--un--uninhabited_Uninhabited_((=== (Right $p)) (Left $q))'(V0)).
'dn--un--__Impl_Uninhabited_((=== (No $p)) (Yes $q))'(V0) -> ('dn--un--uninhabited_Uninhabited_((=== (No $p)) (Yes $q))'(V0)).
'dn--un--__Impl_Uninhabited_((=== (Left $p)) (Right $q))'(V0) -> ('dn--un--uninhabited_Uninhabited_((=== (Left $p)) (Right $q))'(V0)).
'dn--un--__Impl_Traversable_Maybe'() -> {'Idris.Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_Maybe'(V2, V3)) end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_Maybe'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_Maybe'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_Maybe'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_Maybe'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_Maybe'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_Maybe'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_Maybe'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Traversable_List'() -> {'Idris.Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_List'(V2, V3)) end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_List'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Traversable_(Either $e)'() -> {'Idris.Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V2(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--foldr_Foldable_(Either $e)'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--foldl_Foldable_(Either $e)'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('dn--un--null_Foldable_(Either $e)'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('dn--un--foldlM_Foldable_(Either $e)'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('dn--un--toList_Foldable_(Either $e)'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('dn--un--foldMap_Foldable_(Either $e)'(V29, V30, V31)) end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--traverse_Traversable_(Either $e)'(V35, V36, V37)) end end end end end end}.
'dn--un--__Impl_Semigroup_String'(V0, V1) -> ('dn--un--<+>_Semigroup_String'(V0, V1)).
'dn--un--__Impl_Semigroup_(Maybe $a)'(V0, V1) -> ('dn--un--<+>_Semigroup_(Maybe $a)'(V0, V1)).
'dn--un--__Impl_Semigroup_(List $a)'(V0, V1) -> ('dn--un--<+>_Semigroup_(List $a)'(V0, V1)).
'dn--un--__Impl_Range_Nat'() -> {'Idris.Prelude.Types.MkRange', fun (V0) -> fun (V1) -> ('dn--un--rangeFromTo_Range_Nat'(V0, V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--rangeFromThenTo_Range_Nat'(V2, V3, V4)) end end end, fun (V5) -> ('dn--un--rangeFrom_Range_Nat'(V5)) end, fun (V6) -> fun (V7) -> ('dn--un--rangeFromThen_Range_Nat'(V6, V7)) end end}.
'dn--un--__Impl_Range_$a'(V0) -> {'Idris.Prelude.Types.MkRange', fun (V1) -> fun (V2) -> ('dn--un--rangeFromTo_Range_$a'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--rangeFromThenTo_Range_$a'(V0, V3, V4, V5)) end end end, fun (V6) -> ('dn--un--rangeFrom_Range_$a'(V0, V6)) end, fun (V7) -> fun (V8) -> ('dn--un--rangeFromThen_Range_$a'(V0, V7, V8)) end end}.
'dn--un--__Impl_Ord_Nat'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Nat'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Nat'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Nat'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Nat'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Nat'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Nat'(V16, V17)) end end}.
'dn--un--__Impl_Ord_(Maybe $a)'(V0) -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(Maybe $a)'(case V0 of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2)) end end, fun (V11) -> fun (V12) -> ('dn--un--/=_Eq_(Maybe $a)'(case V0 of {'Idris.Prelude.EqOrd.MkOrd', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20) -> V13 end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11, V12)) end end}, fun (V21) -> fun (V22) -> ('dn--un--compare_Ord_(Maybe $a)'(V0, V21, V22)) end end, fun (V23) -> fun (V24) -> ('dn--un--<_Ord_(Maybe $a)'(V0, V23, V24)) end end, fun (V25) -> fun (V26) -> ('dn--un-->_Ord_(Maybe $a)'(V0, V25, V26)) end end, fun (V27) -> fun (V28) -> ('dn--un--<=_Ord_(Maybe $a)'(V0, V27, V28)) end end, fun (V29) -> fun (V30) -> ('dn--un-->=_Ord_(Maybe $a)'(V0, V29, V30)) end end, fun (V31) -> fun (V32) -> ('dn--un--max_Ord_(Maybe $a)'(V0, V31, V32)) end end, fun (V33) -> fun (V34) -> ('dn--un--min_Ord_(Maybe $a)'(V0, V33, V34)) end end}.
'dn--un--__Impl_Ord_(List $a)'(V0) -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(List $a)'(case V0 of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2)) end end, fun (V11) -> fun (V12) -> ('dn--un--/=_Eq_(List $a)'(case V0 of {'Idris.Prelude.EqOrd.MkOrd', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20) -> V13 end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11, V12)) end end}, fun (V21) -> fun (V22) -> ('dn--un--compare_Ord_(List $a)'(V0, V21, V22)) end end, fun (V23) -> fun (V24) -> ('dn--un--<_Ord_(List $a)'(V0, V23, V24)) end end, fun (V25) -> fun (V26) -> ('dn--un-->_Ord_(List $a)'(V0, V25, V26)) end end, fun (V27) -> fun (V28) -> ('dn--un--<=_Ord_(List $a)'(V0, V27, V28)) end end, fun (V29) -> fun (V30) -> ('dn--un-->=_Ord_(List $a)'(V0, V29, V30)) end end, fun (V31) -> fun (V32) -> ('dn--un--max_Ord_(List $a)'(V0, V31, V32)) end end, fun (V33) -> fun (V34) -> ('dn--un--min_Ord_(List $a)'(V0, V33, V34)) end end}.
'dn--un--__Impl_Ord_((Either $a) $b)'(V0) -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_((Either $a) $b)'({'Idris.Builtin.MkPair', case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.EqOrd.MkOrd', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18) -> V11 end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V1, V2)) end end, fun (V19) -> fun (V20) -> ('dn--un--/=_Eq_((Either $a) $b)'({'Idris.Builtin.MkPair', case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.EqOrd.MkOrd', E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28) -> V21 end(E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.EqOrd.MkOrd', E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36) -> V29 end(E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V19, V20)) end end}, fun (V37) -> fun (V38) -> ('dn--un--compare_Ord_((Either $a) $b)'(V0, V37, V38)) end end, fun (V39) -> fun (V40) -> ('dn--un--<_Ord_((Either $a) $b)'(V0, V39, V40)) end end, fun (V41) -> fun (V42) -> ('dn--un-->_Ord_((Either $a) $b)'(V0, V41, V42)) end end, fun (V43) -> fun (V44) -> ('dn--un--<=_Ord_((Either $a) $b)'(V0, V43, V44)) end end, fun (V45) -> fun (V46) -> ('dn--un-->=_Ord_((Either $a) $b)'(V0, V45, V46)) end end, fun (V47) -> fun (V48) -> ('dn--un--max_Ord_((Either $a) $b)'(V0, V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--min_Ord_((Either $a) $b)'(V0, V49, V50)) end end}.
'dn--un--__Impl_Num_Nat'() -> {'Idris.Prelude.Num.MkNum', fun (V0) -> fun (V1) -> ('dn--un--+_Num_Nat'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--*_Num_Nat'(V2, V3)) end end, fun (V4) -> ('dn--un--fromInteger_Num_Nat'(V4)) end}.
'dn--un--__Impl_Monoid_String'() -> {'Idris.Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> ('dn--un--<+>_Semigroup_String'(V0, V1)) end end, ('dn--un--neutral_Monoid_String'())}.
'dn--un--__Impl_Monoid_(Maybe $a)'() -> {'Idris.Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> ('dn--un--<+>_Semigroup_(Maybe $a)'(V0, V1)) end end, ('dn--un--neutral_Monoid_(Maybe $a)'())}.
'dn--un--__Impl_Monoid_(List $a)'() -> {'Idris.Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> ('dn--un--<+>_Semigroup_(List $a)'(V0, V1)) end end, ('dn--un--neutral_Monoid_(List $a)'())}.
'dn--un--__Impl_Monad_Maybe'() -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_Maybe'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> ('dn--un--pure_Applicative_Maybe'(V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--<*>_Applicative_Maybe'(V8, V9)) end end end end}, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un-->>=_Monad_Maybe'(V12, V13)) end end end end, fun (V14) -> fun (V15) -> ('dn--un--join_Monad_Maybe'(V15)) end end}.
'dn--un--__Impl_Monad_List'() -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_List'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> ('dn--un--pure_Applicative_List'(V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--<*>_Applicative_List'(V8, V9)) end end end end}, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un-->>=_Monad_List'(V12, V13)) end end end end, fun (V14) -> fun (V15) -> ('dn--un--join_Monad_List'(V15)) end end}.
'dn--un--__Impl_Monad_(Pair $a)'(V0) -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V5, (V3(V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V7) -> fun (V8) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V9, V10) -> V10 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8} end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> case V13 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E8, E9} -> (fun (V19, V20) -> ((V19(V15))(V17)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, (V16(V18))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> case V23 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V25, V26) -> case (V24(V26)) of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V27, V28) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E14, E15} -> (fun (V29, V30) -> ((V29(V25))(V27)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V28} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V31) -> fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V33, V34) -> case V34 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E20, E21} -> (fun (V37, V38) -> ((V37(V33))(V35)) end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V36} end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end}.
'dn--un--__Impl_Monad_(Either $e)'() -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V2(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', V7} end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V11 of {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Right', (V13(V14))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un-->>=_Monad_(Either $e)'(V18, V19)) end end end end, fun (V20) -> fun (V21) -> ('dn--un--join_Monad_(Either $e)'(V21)) end end}.
'dn--un--__Impl_Functor_Stream'(V0, V1, V2, V3) -> ('dn--un--map_Functor_Stream'(V2, V3)).
'dn--un--__Impl_Functor_Maybe'(V0, V1, V2, V3) -> ('dn--un--map_Functor_Maybe'(V2, V3)).
'dn--un--__Impl_Functor_List'(V0, V1, V2, V3) -> ('dn--un--map_Functor_List'(V2, V3)).
'dn--un--__Impl_Functor_(Pair $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Builtin.MkPair', V4, (V2(V5))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Functor_(Either $e)'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V2(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Foldable_Maybe'() -> {'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_Maybe'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_Maybe'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_Maybe'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_Maybe'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_Maybe'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_Maybe'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Foldable_List'() -> {'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_List'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_List'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_List'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_List'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Foldable_(Either $e)'() -> {'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_(Either $e)'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_(Either $e)'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_(Either $e)'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_(Either $e)'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_(Either $e)'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_(Either $e)'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Eq_Nat'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Nat'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Nat'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(Maybe $a)'(V0) -> {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(Maybe $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(Maybe $a)'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_(List $a)'(V0) -> {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(List $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(List $a)'(V0, V3, V4)) end end}.
'dn--un--__Impl_Eq_((Either $a) $b)'(V0) -> {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_((Either $a) $b)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_((Either $a) $b)'(V0, V3, V4)) end end}.
'dn--un--__Impl_Bitraversable_Pair'() -> {'Idris.Prelude.Interfaces.MkBitraversable', {'Idris.Prelude.Interfaces.MkBifunctor', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', (V4(V7)), (V5(V8))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', (V12(V14)), V15} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V21, V22) -> {'Idris.Builtin.MkPair', V21, (V19(V22))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, {'Idris.Prelude.Interfaces.MkBifoldable', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V30, V31) -> ((V26(V30))(((V27(V31))(V28)))) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V39, V40) -> ((V36(((V35(V37))(V39))))(V40)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun () -> 0 end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> case V52 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V53, V54) -> case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V55, V56, V57) -> ((((V57('erased'))('erased'))(case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E15, E16, E17} -> (fun (V58, V59, V60) -> ((((V60('erased'))('erased'))(case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V61, V62, V63) -> ((V62('erased'))(fun (V64) -> fun (V65) -> {'Idris.Builtin.MkPair', V64, V65} end end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))((V50(V53)))) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))((V51(V54)))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end end}.
'dn--un--__Impl_Bitraversable_Either'() -> {'Idris.Prelude.Interfaces.MkBitraversable', {'Idris.Prelude.Interfaces.MkBifunctor', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', (V4(V7))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', (V5(V8))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', (V12(V14))} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', V15} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> {'Idris.Prelude.Types.Right', (V19(V22))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, {'Idris.Prelude.Interfaces.MkBifoldable', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> ((V26(V30))(V28)) end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> ((V27(V31))(V28)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> case V38 of {'Idris.Prelude.Types.Left', E8} -> (fun (V39) -> ((V35(V37))(V39)) end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V40) -> ((V36(V37))(V40)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun () -> 0 end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> case V52 of {'Idris.Prelude.Types.Left', E10} -> (fun (V53) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V54, V55, V56) -> V54 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V57) -> {'Idris.Prelude.Types.Left', V57} end, (V50(V53)))) end(E10)); {'Idris.Prelude.Types.Right', E14} -> (fun (V58) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E15, E16, E17} -> (fun (V59, V60, V61) -> V59 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V62) -> {'Idris.Prelude.Types.Right', V62} end, (V51(V58)))) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end end}.
'dn--un--__Impl_Bifunctor_Pair'() -> {'Idris.Prelude.Interfaces.MkBifunctor', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', (V4(V7)), (V5(V8))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', (V12(V14)), V15} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V21, V22) -> {'Idris.Builtin.MkPair', V21, (V19(V22))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}.
'dn--un--__Impl_Bifunctor_Either'() -> {'Idris.Prelude.Interfaces.MkBifunctor', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', (V4(V7))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', (V5(V8))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', (V12(V14))} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', V15} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> {'Idris.Prelude.Types.Right', (V19(V22))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}.
'dn--un--__Impl_Bifoldable_Pair'() -> {'Idris.Prelude.Interfaces.MkBifoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ((V3(V7))(((V4(V8))(V5)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> ((V13(((V12(V14))(V16))))(V17)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun () -> 0 end end end end}.
'dn--un--__Impl_Bifoldable_Either'() -> {'Idris.Prelude.Interfaces.MkBifoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> ((V3(V7))(V5)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ((V4(V8))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> ((V12(V14))(V16)) end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> ((V13(V14))(V17)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun () -> 0 end end end end}.
'dn--un--__Impl_Applicative_Maybe'() -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_Maybe'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> ('dn--un--pure_Applicative_Maybe'(V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--<*>_Applicative_Maybe'(V8, V9)) end end end end}.
'dn--un--__Impl_Applicative_List'() -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_List'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> ('dn--un--pure_Applicative_List'(V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--<*>_Applicative_List'(V8, V9)) end end end end}.
'dn--un--__Impl_Applicative_(Pair $a)'(V0) -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V5, (V3(V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V7) -> fun (V8) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V9, V10) -> V10 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8} end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> case V13 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E8, E9} -> (fun (V19, V20) -> ((V19(V15))(V17)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, (V16(V18))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}.
'dn--un--__Impl_Applicative_(Either $e)'() -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V2(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', V7} end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V11 of {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Right', (V13(V14))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}.
'dn--un--__Impl_Alternative_Maybe'() -> {'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_Maybe'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> ('dn--un--pure_Applicative_Maybe'(V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--<*>_Applicative_Maybe'(V8, V9)) end end end end}, fun (V10) -> ('dn--un--empty_Alternative_Maybe'()) end, fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--<|>_Alternative_Maybe'(V12, V13)) end end end}.
'dn--un--__Impl_Alternative_List'() -> {'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_List'(V2, V3)) end end end end, fun (V4) -> fun (V5) -> ('dn--un--pure_Applicative_List'(V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--<*>_Applicative_List'(V8, V9)) end end end end}, fun (V10) -> ('dn--un--empty_Alternative_List'()) end, fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--<|>_Alternative_List'(V12, V13)) end end end}.
'dn--un-->_Ord_Nat'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Nat'(V0, V1)), 2)).
'dn--un-->_Ord_(Maybe $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(Maybe $a)'(V0, V1, V2)), 2)).
'dn--un-->_Ord_(List $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(List $a)'(V0, V1, V2)), 2)).
'dn--un-->_Ord_((Either $a) $b)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_((Either $a) $b)'(V0, V1, V2)), 2)).
'dn--un-->>=_Monad_Maybe'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> (V1(V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un-->>=_Monad_List'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> ('dn--un--<+>_Semigroup_(List $a)'(V28, V29)) end end, ('dn--un--neutral_Monoid_(List $a)'())}}, V1, V0)).
'dn--un-->>=_Monad_(Pair $a)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case (V2(V4)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E4, E5} -> (fun (V7, V8) -> ((V7(V3))(V5)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un-->>=_Monad_(Either $e)'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> (V1(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un-->=_Ord_Nat'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Nat'(V0, V1)), 0)).
'dn--un-->=_Ord_(Maybe $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(Maybe $a)'(V0, V1, V2)), 0)).
'dn--un-->=_Ord_(List $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(List $a)'(V0, V1, V2)), 0)).
'dn--un-->=_Ord_((Either $a) $b)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_((Either $a) $b)'(V0, V1, V2)), 0)).
'dn--un--==_Eq_Nat'(V0, V1) -> case (V0 =:= V1) of 'false' -> 0; _ -> 1 end.
'dn--un--==_Eq_(Maybe $a)'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> 0 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V4) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> case V0 of {'Idris.Prelude.EqOrd.MkEq', E3, E4} -> (fun (V6, V7) -> ((V6(V4))(V5)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_(List $a)'(V0, V1, V2) -> case V1 of [] -> case V2 of [] -> 1; _ -> 0 end; [E0 | E1] -> (fun (V3, V4) -> case V2 of [E2 | E3] -> (fun (V5, V6) -> case case V0 of {'Idris.Prelude.EqOrd.MkEq', E4, E5} -> (fun (V7, V8) -> ((V7(V3))(V5)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('dn--un--==_Eq_(List $a)'(V0, V4, V6)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'dn--un--==_Eq_((Either $a) $b)'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> case V2 of {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.EqOrd.MkEq', E2, E3} -> (fun (V5, V6) -> ((V5(V3))(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> 0 end end(E0)); {'Idris.Prelude.Types.Right', E4} -> (fun (V7) -> case V2 of {'Idris.Prelude.Types.Right', E5} -> (fun (V8) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.EqOrd.MkEq', E6, E7} -> (fun (V9, V10) -> ((V9(V7))(V8)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> 0 end end(E4)); _ -> 0 end.
'dn--un--<|>_Alternative_Maybe'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (V1()) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<|>_Alternative_List'(V0, V1) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, (V1()))).
'dn--un--<_Ord_Nat'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Nat'(V0, V1)), 0)).
'dn--un--<_Ord_(Maybe $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(Maybe $a)'(V0, V1, V2)), 0)).
'dn--un--<_Ord_(List $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(List $a)'(V0, V1, V2)), 0)).
'dn--un--<_Ord_((Either $a) $b)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_((Either $a) $b)'(V0, V1, V2)), 0)).
'dn--un--<=_Ord_Nat'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Nat'(V0, V1)), 2)).
'dn--un--<=_Ord_(Maybe $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(Maybe $a)'(V0, V1, V2)), 2)).
'dn--un--<=_Ord_(List $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(List $a)'(V0, V1, V2)), 2)).
'dn--un--<=_Ord_((Either $a) $b)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_((Either $a) $b)'(V0, V1, V2)), 2)).
'dn--un--<+>_Semigroup_String'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, V1)).
'dn--un--<+>_Semigroup_(Maybe $a)'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<+>_Semigroup_(List $a)'(V0, V1) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1)).
'dn--un--<*>_Applicative_Maybe'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V1 of {'Idris.Prelude.Types.Just', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Just', (V2(V3))} end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'dn--un--<*>_Applicative_List'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> ('dn--un--<+>_Semigroup_(List $a)'(V28, V29)) end end, ('dn--un--neutral_Monoid_(List $a)'())}}, fun (V30) -> ('dn--un--map_Functor_List'(V30, V1)) end, V0)).
'dn--un--<*>_Applicative_(Pair $a)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E4, E5} -> (fun (V7, V8) -> ((V7(V3))(V5)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, (V4(V6))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<*>_Applicative_(Either $e)'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> case V1 of {'Idris.Prelude.Types.Right', E2} -> (fun (V4) -> {'Idris.Prelude.Types.Right', (V3(V4))} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_Nat'(V0, V1) -> case ('dn--un--==_Eq_Nat'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(Maybe $a)'(V0, V1, V2) -> case ('dn--un--==_Eq_(Maybe $a)'(V0, V1, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(List $a)'(V0, V1, V2) -> case ('dn--un--==_Eq_(List $a)'(V0, V1, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_((Either $a) $b)'(V0, V1, V2) -> case ('dn--un--==_Eq_((Either $a) $b)'(V0, V1, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--+_Num_Nat'(V0, V1) -> (V0 + V1).
'dn--un--*_Num_Nat'(V0, V1) -> (V0 * V1).
'un--whenJust'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> (V2(V3)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E1, E2, E3} -> (fun (V4, V5, V6) -> ((V5('erased'))(0)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unpack'(V0) -> case ('un--strUncons'(V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> case V1 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V2, V3) -> [V2 | ('un--unpack'(V3))] end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toUpper'(V0) -> case ('un--isLower'(V0)) of 1 -> case ((case V0 of E1 when (((erlang:'is_integer'(E1)) andalso (E1 >= 0)) andalso (E1 =< 1114111)) -> E1; _ -> 65533 end - 32) rem 9223372036854775808) of E0 when (((erlang:'is_integer'(E0)) andalso (E0 >= 0)) andalso (E0 =< 1114111)) -> E0; _ -> 65533 end; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toLower'(V0) -> case ('un--isUpper'(V0)) of 1 -> case ((case V0 of E1 when (((erlang:'is_integer'(E1)) andalso (E1 >= 0)) andalso (E1 =< 1114111)) -> E1; _ -> 65533 end + 32) rem 9223372036854775808) of E0 when (((erlang:'is_integer'(E0)) andalso (E0 >= 0)) andalso (E0 =< 1114111)) -> E0; _ -> 65533 end; 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tanh'(V0) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(('un--sinh'(V0)), ('un--cosh'(V0)))).
'un--tan'(V0) -> ('math':'tan'(V0)).
'un--takeUntil'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Stream.::', E0, E1} -> (fun (V2, V3) -> case (V0(V2)) of 1 -> [V2 | []]; 0 -> [V2 | ('un--takeUntil'(V0, (V3())))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--takeBefore'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Stream.::', E0, E1} -> (fun (V2, V3) -> case (V0(V2)) of 1 -> []; 0 -> [V2 | ('un--takeBefore'(V0, (V3())))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--take'(V0, V1) -> case V0 of 0 -> []; _ -> begin (V2 = (V0 - 1)), case V1 of {'Idris.Prelude.Types.Stream.::', E0, E1} -> (fun (V3, V4) -> [V3 | ('un--take'(V2, (V4())))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--tail'(V0) -> case V0 of {'Idris.Prelude.Types.Stream.::', E0, E1} -> (fun (V1, V2) -> (V2()) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substr'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V2)))) of 1 -> ('string':'slice'(V2, V0, V1)); 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--strUncons'(V0) -> case V0 of <<""/utf8>> -> {'Idris.Prelude.Types.Nothing'}; _ -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('erlang':'hd'(('string':'next_grapheme'(V0)))), case ('string':'next_grapheme'(V0)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> <<""/utf8>> end}} end.
'un--strCons'(V0, V1) -> (fun (Bin1, Bin2) -> <<Bin1/binary, Bin2/binary>> end(('unicode':'characters_to_binary'([V0 | []])), V1)).
'un--sqrt'(V0) -> ('math':'sqrt'(V0)).
'un--sinh'(V0) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'((('un--exp'(V0)) - ('un--exp'(('erlang':'-'(V0))))), 2.0)).
'un--sin'(V0) -> ('math':'sin'(V0)).
'un--reverse'(V0) -> ('unicode':'characters_to_binary'(('string':'reverse'(V0)))).
'un--rangeFromTo'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.MkRange', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ((V3(V1))(V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rangeFromThenTo'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Types.MkRange', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> (((V5(V1))(V2))(V3)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rangeFromThen'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.MkRange', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ((V6(V1))(V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rangeFrom'(V0, V1) -> case V0 of {'Idris.Prelude.Types.MkRange', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> (V4(V1)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__integerToNat'(V0) -> case case case (0 =< V0) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end of 1 -> ('Idris.Idris2.Builtin':'un--believe_me'(V0)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pow'(V0, V1) -> ('un--exp'(('Idris.Idris2.Prelude.Num':'dn--un--*_Num_Double'(V1, ('un--log'(V0)))))).
'un--plus'(V0, V1) -> case V0 of 0 -> V1; _ -> begin (V2 = (V0 - 1)), (1 + (V2 + V1)) end end.
'un--pi'() -> 3.141592653589793.
'un--pack'(V0) -> case V0 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V1, V2) -> ('un--strCons'(V1, ('un--pack'(V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ord'(V0) -> case V0 of E0 when (((erlang:'is_integer'(E0)) andalso (E0 >= 0)) andalso (E0 =< 1114111)) -> E0; _ -> 65533 end.
'un--natToInteger'(V0) -> case V0 of 0 -> 0; _ -> begin (V1 = (V0 - 1)), (1 + V1) end end.
'un--mult'(V0, V1) -> case V0 of 0 -> 0; _ -> begin (V2 = (V0 - 1)), (V1 + (V2 * V1)) end end.
'un--minus'(V0, V1) -> case V0 of 0 -> 0; _ -> case V1 of 0 -> V0; _ -> case V0 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V2 = (V0 - 1)), case V1 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V3 = (V1 - 1)), ('un--prim__integerToNat'((V2 - V3))) end end end end end end.
'un--maybe'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (V0()) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ((V1())(V3)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--log'(V0) -> ('math':'log'(V0)).
'un--isUpper'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V0, $A)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V0, $Z)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isSpace'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $ )) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{9})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{d})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{a})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{c})) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{b})) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{a0})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isOctDigit'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V0, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V0, $7)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isNL'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{d})) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V0, $\x{a})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isLower'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V0, $a)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V0, $z)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isHexDigit'(V0) -> ('un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V3, V4)) end end}, ('un--toUpper'(V0)), ('nested--6031-4887--in--un--hexChars'(V0)))).
'un--isDigit'(V0) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V0, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V0, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isControl'(V0) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V0, $\x{0})) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V0, $\x{1f})); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V0, $\x{7f})) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V0, $\x{9f})); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isAlphaNum'(V0) -> case ('un--isDigit'(V0)) of 1 -> 1; 0 -> ('un--isAlpha'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isAlpha'(V0) -> case ('un--isUpper'(V0)) of 1 -> 1; 0 -> ('un--isLower'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--integerToNat'(V0) -> case V0 of 0 -> 0; _ -> case case case (V0 =< 0) of 'false' -> 0; _ -> 1 end of 0 -> 0; _ -> 1 end of 1 -> 0; 0 -> (1 + ('un--prim__integerToNat'((V0 - 1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--head'(V0) -> case V0 of {'Idris.Prelude.Types.Stream.::', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getAt'(V0, V1) -> case V0 of 0 -> case V1 of [E2 | E3] -> (fun (V2, V3) -> {'Idris.Prelude.Types.Just', V2} end(E2, E3)); _ -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V4 = (V0 - 1)), case V1 of [E0 | E1] -> (fun (V5, V6) -> ('un--getAt'(V4, V6)) end(E0, E1)); _ -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--floor'(V0) -> ('erlang':'floor'(V0)).
'un--fastUnpack'(V0) -> ('string':'to_graphemes'(V0)).
'un--fastPack'(V0) -> ('unicode':'characters_to_binary'(V0)).
'un--fastConcat'(V0) -> ('unicode':'characters_to_binary'(V0)).
'un--exp'(V0) -> ('math':'pow'(2.718281828459045, V0)).
'un--euler'() -> 2.718281828459045.
'un--equalNat'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; _ -> begin (V2 = (V0 - 1)), case V1 of 0 -> 0; _ -> begin (V3 = (V1 - 1)), case (V2 =:= V3) of 'false' -> 0; _ -> 1 end end end end end.
'un--elem'(V0, V1, V2) -> case V2 of [] -> 0; [E0 | E1] -> (fun (V3, V4) -> case case V0 of {'Idris.Prelude.EqOrd.MkEq', E2, E3} -> (fun (V5, V6) -> ((V5(V1))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> ('un--elem'(V0, V1, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--either'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> ((V0())(V3)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> ((V1())(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--countFrom'(V0, V1) -> {'Idris.Prelude.Types.Stream.::', V0, fun () -> ('un--countFrom'((V1(V0)), V1)) end}.
'un--count'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkFoldable', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> (((((V8('erased'))('erased'))({'Idris.Prelude.Interfaces.MkMonoid', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Interfaces.Num.Semigroup':'dn--un--<+>_Semigroup_Additive$a'({'Idris.Prelude.Num.MkNum', fun (V12) -> fun (V13) -> ('dn--un--+_Num_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--*_Num_Nat'(V14, V15)) end end, fun (V16) -> ('dn--un--fromInteger_Num_Nat'(V16)) end}, V10, V11)) end end, ('Idris.Idris2.Prelude.Interfaces.Num.Monoid':'dn--un--neutral_Monoid_Additive$a'({'Idris.Prelude.Num.MkNum', fun (V17) -> fun (V18) -> ('dn--un--+_Num_Nat'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('dn--un--*_Num_Nat'(V19, V20)) end end, fun (V21) -> ('dn--un--fromInteger_Num_Nat'(V21)) end}))}))(fun (V9) -> case (V1(V9)) of 1 -> (1 + 0); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))(V2)) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cosh'(V0) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(('Idris.Idris2.Prelude.Num':'dn--un--+_Num_Double'(('un--exp'(V0)), ('un--exp'(('erlang':'-'(V0)))))), 2.0)).
'un--cos'(V0) -> ('math':'cos'(V0)).
'un--compareNat'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; _ -> begin (V2 = (V0 - 1)), case V1 of 0 -> 2; _ -> begin (V3 = (V1 - 1)), ('Idris.Idris2.Prelude.EqOrd':'un--compareInteger'(V2, V3)) end end end end.
'un--chr'(V0) -> case V0 of E0 when (((erlang:'is_integer'(E0)) andalso (E0 >= 0)) andalso (E0 =< 1114111)) -> E0; _ -> 65533 end.
'un--ceiling'(V0) -> ('erlang':'ceil'(V0)).
'un--atan'(V0) -> ('math':'atan'(V0)).
'un--asin'(V0) -> ('math':'asin'(V0)).
'un--acos'(V0) -> ('math':'acos'(V0)).
