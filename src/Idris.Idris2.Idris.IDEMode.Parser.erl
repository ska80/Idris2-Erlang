-module('Idris.Idris2.Idris.IDEMode.Parser').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--idelex-625'/2,
  'nested--5502-602--in--un--notComment'/2,
  'un--symbols'/0,
  'un--stringTokens'/0,
  'un--sexp'/0,
  'un--parseSExp'/1,
  'un--idelex'/1,
  'un--ideTokens'/0,
  'un--ideParser'/3
]).
'case--idelex-625'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V4 of {'Idris.Libraries.Text.Lexer.Tokenizer.EndInput'} -> (fun () -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Data.List':'un--filter'(fun (V10) -> ('nested--5502-602--in--un--notComment'(V0, V10)) end, V2)), [{'Idris.Libraries.Text.Bounded.MkBounded', {'Idris.Parser.Lexer.Source.EndInput'}, 0, {'Idris.Libraries.Text.Bounded.MkBounds', V6, V8, V6, V8}} | []]))} end(E6, E7)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Left', V3} end end()); _ -> {'Idris.Prelude.Types.Left', V3} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5502-602--in--un--notComment'(V0, V1) -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V2, V3, V4) -> case V2 of {'Idris.Parser.Lexer.Source.Comment'} -> (fun () -> 0 end()); _ -> 1 end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--symbols'() -> [<<"("/utf8>> | [<<":"/utf8>> | [<<")"/utf8>> | []]]].
'un--stringTokens'() -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--someUntil'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})), ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer':'un--escape'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{5c})), ('Idris.Idris2.Libraries.Text.Lexer':'un--any'()))), ('Idris.Idris2.Libraries.Text.Lexer':'un--any'()))))), fun (V0) -> {'Idris.Parser.Lexer.Source.StringLit', 0, V0} end)).
'un--sexp'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"True"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.BoolAtom', 1}} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"False"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.BoolAtom', 0}} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V0) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.IntegerAtom', V0}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.StringAtom', V1}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.SymbolAtom', V2}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--sexp'()))), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.SExpList', V3}} end} end} end} end} end} end} end} end}.
'un--parseSExp'(V0) -> ('un--ideParser'(1, V0, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--sexp'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), {'Idris.Libraries.Text.Parser.Core.Empty', V1}} end end})).
'un--idelex'(V0) -> ('case--idelex-625'(V0, ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--lex'(('un--ideTokens'()), V0)))).
'un--ideTokens'() -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--choice'(1, {'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V23, V24, V25)) end end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V28, V29)) end end end end, fun (V30) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V30)) end, ('un--symbols'()))))), fun (V31) -> {'Idris.Parser.Lexer.Source.Symbol', V31} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()), fun (V32) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Integer'(V32))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})), fun (V33) -> {'Idris.Parser.Lexer.Source.StringBegin', 1} end, fun (V34) -> 0 end, fun () -> fun (V35) -> ('un--stringTokens'()) end end, fun (V36) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})) end, fun (V37) -> {'Idris.Parser.Lexer.Source.StringEnd'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Parser.Lexer.Common':'un--identAllowDashes'()), fun (V38) -> {'Idris.Parser.Lexer.Source.Ident', V38} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()), fun (V39) -> {'Idris.Parser.Lexer.Source.Comment'} end)) end)) end)) end)) end)).
'un--ideParser'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('un--idelex'(V1)) of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromLexError'({'Idris.Core.FC.Virtual', 0}, V3))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', V4} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parseWith'({'Idris.Prelude.Interfaces.MkMonoid', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V6, V7)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}, V0, V2, V5)) of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromParsingErrors'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--show_Show_Token'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--showPrec_Show_Token'(V10, V11)) end end}, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V12) -> fun (V13) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--pretty_Pretty_Token'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--prettyPrec_Pretty_Token'(V15, V16)) end end end}}, {'Idris.Core.FC.Virtual', 0}, V8))} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Right', V17} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V23, V24) -> {'Idris.Prelude.Types.Right', V23} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)).
