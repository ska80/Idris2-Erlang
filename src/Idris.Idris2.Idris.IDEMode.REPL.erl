-module('Idris.Idris2.Idris.IDEMode.REPL').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in loop-6872'/13,
  'case--case block in case block in loop-6800'/11,
  'nested--17944-6046--in--un--versionSExp'/8,
  'nested--19103-6665--in--un--updateOutput'/7,
  'nested--17944-6045--in--un--tagSexp'/8,
  'nested--17944-6307--in--un--sexpOriginDesc'/10,
  'nested--17944-6044--in--un--semverSexp'/8,
  'nested--17944-6032--in--un--optionsSexp'/8,
  'nested--17944-6308--in--un--constructSExp'/9,
  'dn--un--toSExp_SExpable_REPLOpt'/1,
  'dn--un--toSExp_SExpable_REPLEval'/1,
  'dn--un--toSExp_SExpable_(Span $a)'/2,
  'dn--un--__Impl_SExpable_(Span $a)'/2,
  'un--todoCmd'/4,
  'un--socketToFile'/2,
  'un--returnFromIDE'/4,
  'un--replWrap'/2,
  'un--replIDE'/6,
  'un--processCatch'/7,
  'un--process'/6,
  'un--printIDEResultWithHighlight'/4,
  'un--printIDEResult'/4,
  'un--printIDEError'/6,
  'un--loop'/6,
  'un--initIDESocketFile'/3,
  'un--idePutStrLn'/4,
  'un--handleIDEResult'/8,
  'un--getNChars'/2,
  'un--getInput'/2,
  'un--getFLine'/2,
  'un--getChar'/2,
  'un--displayIDEResult'/8
]).
'case--case block in case block in case block in loop-6872'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V14, V15) -> begin (V16 = ('nested--19103-6665--in--un--updateOutput'(V0, V1, V2, V3, V4, V15, V12))), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V19 = ('un--processCatch'(V4, V3, V2, V1, V0, V14, V12))), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V22 = (('un--handleIDEResult'(V4, V3, V2, V1, V0, V5, V15, V21))(V12))), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V25 = ('un--printIDEError'(V0, V4, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Unrecognised command:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--show_Show_SExp'(V10)))))), V12))), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in loop-6800'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> fun (V12) -> begin (V16 = begin (V13 = (('Idris.Idris2.Idris.Error':'un--perror'(V4, V2, V0, V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> ('un--printIDEError'(V0, V4, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Parse error:"/utf8>>)), V15)), V12)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> fun (V20) -> ('case--case block in case block in case block in loop-6872'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19, ('Idris.Idris2.Idris.IDEMode.Commands':'un--getMsg'(V19)), V20)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17944-6046--in--un--versionSExp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', [('nested--17944-6044--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | [('nested--17944-6045--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | []]]}.
'nested--19103-6665--in--un--updateOutput'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Idris.REPL.Opts.IDEMode', E2, E3, E4} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V0, {'Idris.Idris.REPL.Opts.IDEMode', V5, V11, V12}, V6)) end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--17944-6045--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Libraries.Data.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', <<""/utf8>>} | []]} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V10) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', V10} | []]} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17944-6307--in--un--sexpOriginDesc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.FC.PhysicalIdrSrc', E0} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> begin (V65 = case V14 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> case V19 of {'Idris.Core.Options.MkOptions', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> case V45 of {'Idris.Core.Options.MkDirs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V55 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V117 = ('Idris.Idris2.Data.List':'un--filter'(fun (V66) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V66, <<"."/utf8>>)) end, case V14 of {'Idris.Core.Context.MkDefs', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96) -> case V71 of {'Idris.Core.Options.MkOptions', E83, E84, E85, E86, E87, E88, E89, E90, E91, E92} -> (fun (V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> case V97 of {'Idris.Core.Options.MkDirs', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V113 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83, E84, E85, E86, E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V119 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V118) -> ('Idris.Idris2.Core.Directory':'dn--un--show_Show_IdrSrcExt'(V118)) end, ('Idris.Idris2.Core.Directory':'un--listOfExtensions'())))), begin (V130 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V120) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V121) -> case V121 of {'Idris.Prelude.Types.Left', E103} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V123) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V65, V123))}} end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V124) -> ('Idris.Idris2.Core.Directory':'un--nsToSource'(V7, ('Idris.Idris2.Core.FC':'un--replFC'()), V10, V124)) end, V120)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Directory':'un--firstAvailable'(V7, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V117, fun (V127) -> begin (V128 = case ('Idris.Idris2.Libraries.Utils.Path':'un--isRelative'(V127)) of 1 -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V65, V127)); 0 -> V127; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V119, fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V128, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V10)), V129)))))) end)) end end)), V126)) end end, V9))), case V130 of {'Idris.Prelude.Types.Left', E105} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V132) -> case V132 of {'Idris.Prelude.Types.Just', E107} -> (fun (V133) -> {'Idris.Prelude.Types.Right', V133} end(E107)); _ -> {'Idris.Prelude.Types.Right', <<"(File-Not-Found)"/utf8>>} end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.FC.PhysicalPkgSrc', E108} -> (fun (V134) -> {'Idris.Prelude.Types.Right', V134} end(E108)); {'Idris.Core.FC.Virtual', E109} -> (fun (V135) -> case V135 of 0 -> {'Idris.Prelude.Types.Right', <<"(Interactive)"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17944-6044--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Libraries.Data.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Nat'(V14)) end, [V10 | [V12 | [V13 | []]]]))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17944-6032--in--un--optionsSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('dn--un--toSExp_SExpable_REPLOpt'(V8)) end, V0))}.
'nested--17944-6308--in--un--constructSExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> fun (V15) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V16, V17) -> case V14 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V18, V19) -> begin (V20 = ('Idris.Idris2.Idris.Pretty':'un--render'(V3, ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V9)), V15))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> begin (V23 = ('nested--17944-6307--in--un--sexpOriginDesc'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V15))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', V22} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V25} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V16))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V17))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V18))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V19))} | []]]]]]]}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-implicits"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V1)) | []]]} end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-namespace"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V2)) | []]]} end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-types"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V3)) | []]]} end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"eval"/utf8>>} | [('dn--un--toSExp_SExpable_REPLEval'(V4)) | []]]} end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"editor"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V5)) | []]]} end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"cg"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V6)) | []]]} end(E5)); {'Idris.Idris.Syntax.Profile', E6} -> (fun (V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"profile"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V7)) | []]]} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_REPLEval'(V0) -> case V0 of 0 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"typecheck"/utf8>>}; 1 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"normalise"/utf8>>}; 2 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"execute"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_(Span $a)'(V0, V1) -> case V1 of {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.MkSpan', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V2))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V3))} | [(V0(V4)) | []]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_SExpable_(Span $a)'(V0, V1) -> ('dn--un--toSExp_SExpable_(Span $a)'(V0, V1)).
'un--todoCmd'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<": command not yet implemented. Hopefully soon!"/utf8>>)))), V3)).
'un--socketToFile'(V0, V1) -> case V0 of {'Idris.Network.Socket.Data.MkSocket', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Prelude.Types.Left', <<"Failed to fdopen socket file descriptor"/utf8>>} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--returnFromIDE'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, fun (V4) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V4)) end, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"return"/utf8>>} | [V3 | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V2)) | []]]]})).
'un--replWrap'(V0, V1) -> begin (V2 = (V0(V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', V4}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replIDE'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Opts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPL.Common':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPL.Opts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, fun (V13) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V13)) end, V12, ('Idris.Idris2.Idris.IDEMode.Commands':'un--version'(2, 0))))(V5))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> ('un--loop'(V0, V1, V2, V3, V4, V5)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processCatch'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V22) -> begin (V23 = (('un--process'(V0, V1, V2, V3, V4, V5))(V22))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--commit'(V0, V22))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', V25} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'put'(V1, V13))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, V17))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V4, V21))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V29))(V30))), case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.REPLError', V49}}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.IDEMode.Commands.Interpret', E0} -> (fun (V6) -> fun (V7) -> ('un--replWrap'(fun (V8) -> ('Idris.Idris2.Idris.REPL':'un--interpret'(V0, V1, V2, V3, V4, V6, V8)) end, V7)) end end(E0)); {'Idris.Idris.IDEMode.Commands.LoadFile', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.Package':'un--findIpkg'(V0, V4, V2, {'Idris.Prelude.Types.Just', V9}, V11))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> begin (V16 = case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V9 end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> V15 end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--replWrap'(fun (V17) -> begin (V18 = (('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Load', V16}))(V17))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--outputSyntaxHighlighting'(V0, V3, V2, V4, V16, V20, V17)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V11)) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); {'Idris.Idris.IDEMode.Commands.NameAt', E8, E9} -> (fun (V21, V22) -> fun (V23) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V25 = begin (V24 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V58 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'({'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V21))}, case V27 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V28 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23))), case V58 of {'Idris.Prelude.Types.Left', E42} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V60) -> begin (V86 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V61) -> case V61 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V62, V63) -> case V63 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V64, V65) -> {'Idris.Builtin.MkPair', V62, case V65 of {'Idris.Core.Context.Context.MkGlobalDef', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V66 end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V60))), {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameLocList', V86}} end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E68} -> (fun (V87) -> begin (V88 = ('un--todoCmd'(V0, V4, <<"name-at <name> <line> <column>"/utf8>>, V23))), case V88 of {'Idris.Prelude.Types.Left', E69} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Edited', {'Idris.Idris.REPL.Common.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}}} end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); {'Idris.Idris.IDEMode.Commands.TypeOf', E71, E72} -> (fun (V91, V92) -> case V92 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V93) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Check', {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--replFC'()), {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V91))}}})), V93)) end end()); {'Idris.Prelude.Types.Just', E73} -> (fun (V94) -> fun (V95) -> case V94 of {'Idris.Builtin.MkPair', E74, E75} -> (fun (V96, V97) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.TypeAt', V96, V97, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V91))}}})), V95)) end(E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E71, E72)); {'Idris.Idris.IDEMode.Commands.CaseSplit', E76, E77, E78} -> (fun (V98, V99, V100) -> fun (V101) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.CaseSplit', 0, V98, V99, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V100))}}})), V101)) end end(E76, E77, E78)); {'Idris.Idris.IDEMode.Commands.AddClause', E79, E80} -> (fun (V102, V103) -> fun (V104) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.AddClause', 0, V102, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V103))}}})), V104)) end end(E79, E80)); {'Idris.Idris.IDEMode.Commands.AddMissing', E81, E82} -> (fun (V105, V106) -> fun (V107) -> begin (V108 = ('un--todoCmd'(V0, V4, <<"add-missing"/utf8>>, V107))), case V108 of {'Idris.Prelude.Types.Left', E83} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Edited', {'Idris.Idris.REPL.Common.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}}} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E81, E82)); {'Idris.Idris.IDEMode.Commands.ExprSearch', E85, E86, E87, E88} -> (fun (V111, V112, V113, V114) -> fun (V115) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearch', 0, V111, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V112}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V116) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V116}} end, V113))}})), V115)) end end(E85, E86, E87, E88)); {'Idris.Idris.IDEMode.Commands.ExprSearchNext'} -> (fun () -> fun (V117) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearchNext'}})), V117)) end end()); {'Idris.Idris.IDEMode.Commands.GenerateDef', E89, E90} -> (fun (V118, V119) -> fun (V120) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDef', 0, V118, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V119}}, 0}})), V120)) end end(E89, E90)); {'Idris.Idris.IDEMode.Commands.GenerateDefNext'} -> (fun () -> fun (V121) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDefNext'}})), V121)) end end()); {'Idris.Idris.IDEMode.Commands.MakeLemma', E91, E92} -> (fun (V122, V123) -> fun (V124) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeLemma', 0, V122, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V123))}}})), V124)) end end(E91, E92)); {'Idris.Idris.IDEMode.Commands.MakeCase', E93, E94} -> (fun (V125, V126) -> fun (V127) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeCase', 0, V125, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V126))}}})), V127)) end end(E93, E94)); {'Idris.Idris.IDEMode.Commands.MakeWith', E95, E96} -> (fun (V128, V129) -> fun (V130) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeWith', 0, V128, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V129))}}})), V130)) end end(E95, E96)); {'Idris.Idris.IDEMode.Commands.DocsFor', E97, E98} -> (fun (V131, V132) -> fun (V133) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Doc', {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--mkUserName'(V131))}}})), V133)) end end(E97, E98)); {'Idris.Idris.IDEMode.Commands.Apropos', E99} -> (fun (V134) -> fun (V135) -> begin (V136 = ('un--todoCmd'(V0, V4, <<"apropros"/utf8>>, V135))), case V136 of {'Idris.Prelude.Types.Left', E100} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V138) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}} end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E99)); {'Idris.Idris.IDEMode.Commands.Directive', E102} -> (fun (V139) -> fun (V140) -> begin (V141 = ('un--todoCmd'(V0, V4, <<"directive"/utf8>>, V140))), case V141 of {'Idris.Prelude.Types.Left', E103} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}} end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E102)); {'Idris.Idris.IDEMode.Commands.WhoCalls', E105} -> (fun (V144) -> fun (V145) -> begin (V146 = ('un--todoCmd'(V0, V4, <<"who-calls"/utf8>>, V145))), case V146 of {'Idris.Prelude.Types.Left', E106} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V148) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E105)); {'Idris.Idris.IDEMode.Commands.CallsWho', E108} -> (fun (V149) -> fun (V150) -> begin (V151 = ('un--todoCmd'(V0, V4, <<"calls-who"/utf8>>, V150))), case V151 of {'Idris.Prelude.Types.Left', E109} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V153) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E108)); {'Idris.Idris.IDEMode.Commands.BrowseNamespace', E111} -> (fun (V154) -> fun (V155) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V154))})), V155)) end end(E111)); {'Idris.Idris.IDEMode.Commands.NormaliseTerm', E112} -> (fun (V156) -> fun (V157) -> begin (V158 = ('un--todoCmd'(V0, V4, <<"normalise-term"/utf8>>, V157))), case V158 of {'Idris.Prelude.Types.Left', E113} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V160) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V156}} end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E112)); {'Idris.Idris.IDEMode.Commands.ShowTermImplicits', E115} -> (fun (V161) -> fun (V162) -> begin (V163 = ('un--todoCmd'(V0, V4, <<"show-term-implicits"/utf8>>, V162))), case V163 of {'Idris.Prelude.Types.Left', E116} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V165) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V161}} end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E115)); {'Idris.Idris.IDEMode.Commands.HideTermImplicits', E118} -> (fun (V166) -> fun (V167) -> begin (V168 = ('un--todoCmd'(V0, V4, <<"hide-term-implicits"/utf8>>, V167))), case V168 of {'Idris.Prelude.Types.Left', E119} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V170) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V166}} end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E118)); {'Idris.Idris.IDEMode.Commands.ElaborateTerm', E121} -> (fun (V171) -> fun (V172) -> begin (V173 = ('un--todoCmd'(V0, V4, <<"elaborate-term"/utf8>>, V172))), case V173 of {'Idris.Prelude.Types.Left', E122} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V175) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.TTTerm', V171}} end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E121)); {'Idris.Idris.IDEMode.Commands.PrintDefinition', E124} -> (fun (V176) -> fun (V177) -> begin (V178 = ('un--todoCmd'(V0, V4, <<"print-definition"/utf8>>, V177))), case V178 of {'Idris.Prelude.Types.Left', E125} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V180) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V176))}}} end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E124)); {'Idris.Idris.IDEMode.Commands.ReplCompletions', E127} -> (fun (V181) -> fun (V182) -> begin (V183 = ('un--todoCmd'(V0, V4, <<"repl-completions"/utf8>>, V182))), case V183 of {'Idris.Prelude.Types.Left', E128} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V185) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E127)); {'Idris.Idris.IDEMode.Commands.EnableSyntax', E130} -> (fun (V186) -> fun (V187) -> begin (V188 = ('Idris.Idris2.Idris.REPL.Opts':'un--setSynHighlightOn'(V4, V186, V187))), case V188 of {'Idris.Prelude.Types.Left', E131} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V190) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Syntax highlight option changed to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'(V186))))}}} end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E130)); {'Idris.Idris.IDEMode.Commands.Version'} -> (fun () -> fun (V191) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.ShowVersion'})), V191)) end end()); {'Idris.Idris.IDEMode.Commands.Metavariables', E133} -> (fun (V192) -> fun (V193) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Metavars'})), V193)) end end(E133)); {'Idris.Idris.IDEMode.Commands.GetOptions'} -> (fun () -> fun (V194) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.GetOpts'})), V194)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--printIDEResultWithHighlight'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('un--returnFromIDE'(V0, V1, V2, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [V4 | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_(List $a)'(fun (V6) -> ('dn--un--toSExp_SExpable_(Span $a)'(fun (V7) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'dn--un--toSExp_SExpable_Properties'(V7)) end, V6)) end, V5)) | []]]]})) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--printIDEResult'(V0, V1, V2, V3) -> ('un--returnFromIDE'(V0, V1, V2, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V3)) | []]]})).
'un--printIDEError'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.Pretty.Render':'un--renderWithoutColor'(V0, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('un--returnFromIDE'(V1, V2, V3, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"error"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V8)) | []]]}))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--loop'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Opts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPL.Common':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPL.Opts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = begin (V13 = ('un--getInput'(V11, V5))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = {'Idris.Idris.REPL.Opts.IDEMode', V10, V11, V12}), (('case--case block in case block in loop-6800'(V4, V3, V2, V1, V0, V12, V11, V10, V17, V16, ('Idris.Idris2.Idris.IDEMode.Parser':'un--parseSExp'(V16))))(V5)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initIDESocketFile'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Network.Socket':'un--socket'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, 2, 1, 0))(V2))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V31)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V111, V112, V113)) end end end end end, fun (V114) -> fun (V115) -> fun (V116) -> V115 end end end, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), begin (V123 = (V120(V121))), (V122(V123)) end end end end end end end}, fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> begin (V129 = (V126(V128))), ((V127(V129))(V128)) end end end end end end, fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V131(V132))), (V133(V132)) end end end end}, fun (V134) -> fun (V135) -> V135 end end}, <<"Failed to open socket"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V138, V139, V140)) end end end end end, fun (V141) -> fun (V142) -> fun (V143) -> V142 end end end, fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> begin (V149 = (V146(V148))), begin (V150 = (V147(V148))), (V149(V150)) end end end end end end end}, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V153(V155))), ((V154(V156))(V155)) end end end end end end, fun (V157) -> fun (V158) -> fun (V159) -> begin (V160 = (V158(V159))), (V160(V159)) end end end end}, fun (V161) -> fun (V162) -> V162 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end)) end))(V2)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V163) -> begin (V191 = (('Idris.Idris2.Network.Socket':'un--bind'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> V170 end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), begin (V178 = (V175(V176))), (V177(V178)) end end end end end end end}, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), ((V182(V184))(V183)) end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V186(V187))), (V188(V187)) end end end end}, fun (V189) -> fun (V190) -> V190 end end}, V163, {'Idris.Prelude.Types.Just', {'Idris.Network.Socket.Data.Hostname', V0}}, V1))(V2))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V191, 0)) of 1 -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to bind socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V191))))}; 0 -> begin (V219 = (('Idris.Idris2.Network.Socket':'un--listen'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V194, V195, V196)) end end end end end, fun (V197) -> fun (V198) -> fun (V199) -> V198 end end end, fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> begin (V205 = (V202(V204))), begin (V206 = (V203(V204))), (V205(V206)) end end end end end end end}, fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> begin (V212 = (V209(V211))), ((V210(V212))(V211)) end end end end end end, fun (V213) -> fun (V214) -> fun (V215) -> begin (V216 = (V214(V215))), (V216(V215)) end end end end}, fun (V217) -> fun (V218) -> V218 end end}, V163))(V2))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V219, 0)) of 1 -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to listen on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V219))))}; 0 -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V222, V223, V224)) end end end end end, fun (V225) -> fun (V226) -> fun (V227) -> V226 end end end, fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> begin (V233 = (V230(V232))), begin (V234 = (V231(V232))), (V233(V234)) end end end end end end end}, fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> begin (V240 = (V237(V239))), ((V238(V240))(V239)) end end end end end end, fun (V241) -> fun (V242) -> fun (V243) -> begin (V244 = (V242(V243))), (V244(V243)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V247, V248, V249)) end end end end end, fun (V250) -> fun (V251) -> fun (V252) -> V251 end end end, fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> begin (V258 = (V255(V257))), begin (V259 = (V256(V257))), (V258(V259)) end end end end end end end}, fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> begin (V265 = (V262(V264))), ((V263(V265))(V264)) end end end end end end, fun (V266) -> fun (V267) -> fun (V268) -> begin (V269 = (V267(V268))), (V269(V268)) end end end end}, fun (V270) -> fun (V271) -> V271 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V274, V275, V276)) end end end end end, fun (V277) -> fun (V278) -> fun (V279) -> V278 end end end, fun (V280) -> fun (V281) -> fun (V282) -> fun (V283) -> fun (V284) -> begin (V285 = (V282(V284))), begin (V286 = (V283(V284))), (V285(V286)) end end end end end end end}, fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> begin (V292 = (V289(V291))), ((V290(V292))(V291)) end end end end end end, fun (V293) -> fun (V294) -> fun (V295) -> begin (V296 = (V294(V295))), (V296(V295)) end end end end}, ('Idris.Idris2.Erlang.System.File':'un--fflush'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V299, V300, V301)) end end end end end, fun (V302) -> fun (V303) -> fun (V304) -> V303 end end end, fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> begin (V310 = (V307(V309))), begin (V311 = (V308(V309))), (V310(V311)) end end end end end end end}, fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> begin (V317 = (V314(V316))), ((V315(V317))(V316)) end end end end end end, fun (V318) -> fun (V319) -> fun (V320) -> begin (V321 = (V319(V320))), (V321(V320)) end end end end}, fun (V322) -> fun (V323) -> V323 end end}, ('Idris.Idris2.Erlang.System.File':'un--stdout'()))), fun () -> fun (V324) -> begin (V352 = (('Idris.Idris2.Network.Socket':'un--accept'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V327, V328, V329)) end end end end end, fun (V330) -> fun (V331) -> fun (V332) -> V331 end end end, fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> begin (V338 = (V335(V337))), begin (V339 = (V336(V337))), (V338(V339)) end end end end end end end}, fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> begin (V345 = (V342(V344))), ((V343(V345))(V344)) end end end end end end, fun (V346) -> fun (V347) -> fun (V348) -> begin (V349 = (V347(V348))), (V349(V348)) end end end end}, fun (V350) -> fun (V351) -> V351 end end}, V163))(V324))), case V352 of {'Idris.Prelude.Types.Left', E2} -> (fun (V353) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to accept on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V353))))} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V354) -> case V354 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V355, V356) -> ('un--socketToFile'(V355, V324)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end)) end))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--idePutStrLn'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, fun (V4) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V4)) end, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V3)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V2)) | []]]]})).
'un--handleIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Common.Exited'} -> (fun () -> ('un--idePutStrLn'(V0, V5, V6, <<"Bye for now!"/utf8>>)) end()); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end end(E0)); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'un--getNChars'(V0, V1) -> case V1 of 0 -> fun (V2) -> [] end; _ -> begin (V3 = (V1 - 1)), fun (V4) -> begin (V5 = ('un--getChar'(V0, V4))), begin (V6 = (('un--getNChars'(V0, V3))(V4))), [V5 | V6] end end end end end.
'un--getInput'(V0, V1) -> begin (V2 = (('un--getNChars'(V0, (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))(V1))), case ('Idris.Idris2.Libraries.Utils.Hex':'un--fromHexChars'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2)))) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V3 = ('un--getFLine'(V0, V1))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)), V3)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = (('un--getNChars'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V4))))(V1))), ('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFLine'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetLine'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> V30 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, <<"Failed to read a line"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, fun (V109) -> fun (V110) -> V110 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getChar'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetChar'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> V30 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, <<"Failed to read a character"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, fun (V109) -> fun (V110) -> V110 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Common.REPLError', E1} -> (fun (V9) -> fun (V10) -> ('un--printIDEError'(V4, V0, V5, V6, V9, V10)) end end(E1)); {'Idris.Idris.REPL.Common.RequestedHelp'} -> (fun () -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.REPL':'un--displayHelp'())})) end()); {'Idris.Idris.REPL.Common.Evaluated', E2, E3} -> (fun (V11, V12) -> fun (V13) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V15 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V14) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--syntaxToProperties'(V14)) end, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V11)), V13))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> (('un--printIDEResultWithHighlight'(V0, V5, V6, case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V18}, V19} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V20) -> begin (V22 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V21) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--syntaxToProperties'(V21)) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V11)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<":"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V20)))))), V13))), case V22 of {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V24) -> (('un--printIDEResultWithHighlight'(V0, V5, V6, case V24 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V25, V26) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V25}, V26} end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); {'Idris.Idris.REPL.Common.Printed', E13} -> (fun (V27) -> fun (V28) -> begin (V30 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V29) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--annToProperties'(V29)) end, V27, V28))), case V30 of {'Idris.Prelude.Types.Left', E14} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V32) -> (('un--printIDEResultWithHighlight'(V0, V5, V6, case V32 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V33, V34) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V33}, V34} end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V28)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); {'Idris.Idris.REPL.Common.PrintedDoc', E18} -> (fun (V35) -> fun (V36) -> begin (V38 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V37) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--docToProperties'(V37)) end, V35, V36))), case V38 of {'Idris.Prelude.Types.Left', E19} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V40) -> (('un--printIDEResultWithHighlight'(V0, V5, V6, case V40 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V41, V42) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V41}, V42} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V36)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18)); {'Idris.Idris.REPL.Common.TermChecked', E23, E24} -> (fun (V43, V44) -> fun (V45) -> begin (V47 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V46) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--syntaxToProperties'(V46)) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V43)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<":"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V44)))))), V45))), case V47 of {'Idris.Prelude.Types.Left', E25} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V49) -> (('un--printIDEResultWithHighlight'(V0, V5, V6, case V49 of {'Idris.Builtin.MkPair', E27, E28} -> (fun (V50, V51) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V50}, V51} end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V45)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23, E24)); {'Idris.Idris.REPL.Common.FileLoaded', E29} -> (fun (V52) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', []})) end(E29)); {'Idris.Idris.REPL.Common.ErrorLoadingFile', E30, E31} -> (fun (V53, V54) -> fun (V55) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Error loading file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V53)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V54)))))))), V55)) end end(E30, E31)); {'Idris.Idris.REPL.Common.ErrorsBuildingFile', E32, E33} -> (fun (V56, V57) -> fun (V58) -> begin (V60 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V59) -> ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V59)) end, V57, [], V58))), case V60 of {'Idris.Prelude.Types.Left', E34} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V62) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Error(s) building file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V56)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(V62)))))), V58)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33)); {'Idris.Idris.REPL.Common.NoFileLoaded'} -> (fun () -> fun (V63) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"No file can be reloaded"/utf8>>)), V63)) end end()); {'Idris.Idris.REPL.Common.CurrentDirectory', E36} -> (fun (V64) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Current working directory is \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V64, <<"\x{22}"/utf8>>))))})) end(E36)); {'Idris.Idris.REPL.Common.CompilationFailed'} -> (fun () -> fun (V65) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Compilation failed"/utf8>>)), V65)) end end()); {'Idris.Idris.REPL.Common.Compiled', E37} -> (fun (V66) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V66, <<" written"/utf8>>))))})) end(E37)); {'Idris.Idris.REPL.Common.ProofFound', E38} -> (fun (V67) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V67))})) end(E38)); {'Idris.Idris.REPL.Common.Missed', E39} -> (fun (V68) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V69) -> ('Idris.Idris2.Idris.REPL':'un--handleMissing\x{27}'(V69)) end, V68))))})) end(E39)); {'Idris.Idris.REPL.Common.CheckedTotal', E40} -> (fun (V70) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V72, V73) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V72)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Totality'(V73)))))) end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V70))))})) end(E40)); {'Idris.Idris.REPL.Common.FoundHoles', E43} -> (fun (V74) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), case V78 of {'Idris.Prelude.Types.Left', E44} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V80) -> ((V76(V80))(V77)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V81) -> ('un--printIDEResultWithHighlight'(V0, V5, V6, V81)) end, case V74 of [] -> fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', <<"No holes"/utf8>>}, []}} end; [E56 | E57] -> (fun (V83, V84) -> case V84 of [] -> begin (V91 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(case V83 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E68, E69, E70} -> (fun (V85, V86, V87) -> V85 end(E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(case V83 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E71, E72, E73} -> (fun (V88, V89, V90) -> V89 end(E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), fun (V92) -> begin (V94 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V93) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--syntaxToProperties'(V93)) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"1 hole"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), V91)), V92))), case V94 of {'Idris.Prelude.Types.Left', E74} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V96) -> {'Idris.Prelude.Types.Right', case V96 of {'Idris.Builtin.MkPair', E76, E77} -> (fun (V97, V98) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V97}, V98} end(E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> begin (V110 = ('Idris.Idris2.Prelude.Interfaces':'un--<&>'(fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V101, V102)) end end end end, V74, fun (V103) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(case V103 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E58, E59, E60} -> (fun (V104, V105, V106) -> V104 end(E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(case V103 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E61, E62, E63} -> (fun (V107, V108, V109) -> V108 end(E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))) end))), begin (V111 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V74)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"holes"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'())))))), fun (V112) -> begin (V115 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V113) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--syntaxToProperties'(V113)) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V111 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V114) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V114)) end, V110))])), V112))), case V115 of {'Idris.Prelude.Types.Left', E64} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V117) -> {'Idris.Prelude.Types.Right', case V117 of {'Idris.Builtin.MkPair', E66, E67} -> (fun (V118, V119) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V118}, V119} end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E56, E57)); _ -> begin (V131 = ('Idris.Idris2.Prelude.Interfaces':'un--<&>'(fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V122, V123)) end end end end, V74, fun (V124) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(case V124 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E46, E47, E48} -> (fun (V125, V126, V127) -> V125 end(E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(case V124 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E49, E50, E51} -> (fun (V128, V129, V130) -> V129 end(E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))) end))), begin (V132 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V74)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"holes"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'())))))), fun (V133) -> begin (V136 = ('Idris.Idris2.Idris.Pretty':'un--renderWithDecorations'(V0, V4, fun (V134) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--syntaxToProperties'(V134)) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V132 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V135) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V135)) end, V131))])), V133))), case V136 of {'Idris.Prelude.Types.Left', E52} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V138) -> {'Idris.Prelude.Types.Right', case V138 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V139, V140) -> {'Idris.Builtin.MkPair', {'Idris.Idris.IDEMode.Commands.StringAtom', V139}, V140} end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end)) end(E43)); {'Idris.Idris.REPL.Common.LogLevelSet', E78} -> (fun (V141) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Set loglevel to "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V142) -> ('Idris.Idris2.Core.Options.Log':'dn--un--show_Show_LogLevel'(V142)) end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Options.Log':'dn--un--showPrec_Show_LogLevel'(V143, V144)) end end}, V141))))})) end(E78)); {'Idris.Idris.REPL.Common.OptionsSet', E79} -> (fun (V145) -> ('un--printIDEResult'(V0, V5, V6, ('nested--17944-6032--in--un--optionsSexp'(V145, V6, V5, V4, V3, V2, V1, V0)))) end(E79)); {'Idris.Idris.REPL.Common.VersionIs', E80} -> (fun (V146) -> ('un--printIDEResult'(V0, V5, V6, ('nested--17944-6046--in--un--versionSExp'(V146, V6, V5, V4, V3, V2, V1, V0)))) end(E80)); {'Idris.Idris.REPL.Common.Edited', E81} -> (fun (V147) -> case V147 of {'Idris.Idris.REPL.Common.DisplayEdit', E82} -> (fun (V148) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(V148))})) end(E82)); {'Idris.Idris.REPL.Common.EditError', E83} -> (fun (V149) -> fun (V150) -> ('un--printIDEError'(V4, V0, V5, V6, V149, V150)) end end(E83)); {'Idris.Idris.REPL.Common.MadeLemma', E84, E85, E86, E87} -> (fun (V151, V152, V153, V154) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"metavariable-lemma"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"replace-metavariable"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V154} | []]]} | [{'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"definition-type"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Parser.Unlit':'un--relit'(V151, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V152)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V153))))))))} | []]]} | []]]]})) end(E84, E85, E86, E87)); {'Idris.Idris.REPL.Common.MadeWith', E88, E89} -> (fun (V155, V156) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V157) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V155, V157)) end, V156))))})) end(E88, E89)); {'Idris.Idris.REPL.Common.MadeCase', E90, E91} -> (fun (V158, V159) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V160) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V158, V160)) end, V159))))})) end(E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E81)); {'Idris.Idris.REPL.Common.ConsoleWidthSet', E92} -> (fun (V161) -> begin (V163 = case V161 of {'Idris.Prelude.Types.Just', E93} -> (fun (V162) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V162)) end(E93)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"auto"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Set consolewidth to "/utf8>>, V163))})) end end(E92)); {'Idris.Idris.REPL.Common.Done'} -> (fun () -> fun (V164) -> {'Idris.Prelude.Types.Right', 0} end end()); {'Idris.Idris.REPL.Common.Executed', E94} -> (fun (V165) -> fun (V166) -> {'Idris.Prelude.Types.Right', 0} end end(E94)); {'Idris.Idris.REPL.Common.ModuleLoaded', E95} -> (fun (V167) -> fun (V168) -> {'Idris.Prelude.Types.Right', 0} end end(E95)); {'Idris.Idris.REPL.Common.ErrorLoadingModule', E96, E97} -> (fun (V169, V170) -> fun (V171) -> {'Idris.Prelude.Types.Right', 0} end end(E96, E97)); {'Idris.Idris.REPL.Common.CompiledLibrary', E98} -> (fun (V172) -> fun (V173) -> {'Idris.Prelude.Types.Right', 0} end end(E98)); {'Idris.Idris.REPL.Common.ColorSet', E99} -> (fun (V174) -> fun (V175) -> {'Idris.Prelude.Types.Right', 0} end end(E99)); {'Idris.Idris.REPL.Common.DefDeclared'} -> (fun () -> fun (V176) -> {'Idris.Prelude.Types.Right', 0} end end()); {'Idris.Idris.REPL.Common.Exited'} -> (fun () -> fun (V177) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Idris.IDEMode.REPL.NameList', E100} -> (fun (V178) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V179) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Name'(V179)) end, V178))})) end(E100)); {'Idris.Idris.IDEMode.REPL.Term', E101} -> (fun (V180) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V180})) end(E101)); {'Idris.Idris.IDEMode.REPL.TTTerm', E102} -> (fun (V181) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V181})) end(E102)); {'Idris.Idris.IDEMode.REPL.NameLocList', E103} -> (fun (V182) -> fun (V183) -> begin (V187 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V184) -> ('nested--17944-6308--in--un--constructSExp'(V182, V6, V5, V4, V3, V2, V1, V0, case V184 of {'Idris.Builtin.MkPair', E104, E105} -> (fun (V185, V186) -> {'Idris.Builtin.MkPair', V185, ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V186))} end(E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V182, [], V183))), case V187 of {'Idris.Prelude.Types.Left', E106} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V189) -> (('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', V189}))(V183)) end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
