-module('Idris.Idris2.Libraries.Text.Lexer.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--tokenise-1693'/7,
  'case--tokenise,getFirstToken-1607'/11,
  'nested--3681-1494--in--un--getFirstToken'/8,
  'nested--3681-1493--in--un--getCols'/8,
  'nested--3681-1492--in--un--countNLs'/7,
  'un--tokenise'/6,
  'un--scan'/3,
  'un--reject'/1,
  'un--pred'/1,
  'un--lexTo'/3,
  'un--lex'/2,
  'un--fail'/0,
  'un--expect'/1,
  'un--empty'/0,
  'un--concatMap'/2,
  'un--TokenMap'/1,
  'un--Lexer'/0,
  'un--<|>'/2,
  'un--<+>'/3
]).
'case--tokenise-1693'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> case (V5(case V8 of {'Idris.Libraries.Text.Bounded.MkBounded', E7, E8, E9} -> (fun (V14, V15, V16) -> V14 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2)), {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V3, []}}}; 0 -> ('un--tokenise'(V5, V10, V12, [V8 | V2], V1, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2)), {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V3, V0}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tokenise,getFirstToken-1607'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V12, V13) -> begin (V14 = ((V4 + ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('nested--3681-1492--in--un--countNLs'(V0, V1, V2, V3, V4, V5, V12))))) rem 9223372036854775808)), begin (V15 = ('nested--3681-1493--in--un--getCols'(V0, V1, V2, V3, V4, V5, V12, V3))), {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', {'Idris.Libraries.Text.Bounded.MkBounded', (V7(('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V12)))))), 0, {'Idris.Libraries.Text.Bounded.MkBounds', V4, V3, V14, V15}}, {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V15, V13}}}} end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--3681-1494--in--un--getFirstToken'(V0, V1, V2, V3, V4, V5, V8, V9)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3681-1494--in--un--getFirstToken'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> ('case--tokenise,getFirstToken-1607'(V0, V1, V2, V3, V4, V5, V10, V11, V9, V7, ('un--scan'(V10, [], V7)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3681-1493--in--un--getCols'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Data.List':'un--span'(fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V8, $\x{a})) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V6)))) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of [] -> ((V7 + ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'(V9))))) rem 9223372036854775808); _ -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'(V9)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3681-1492--in--un--countNLs'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--length'(('Idris.Idris2.Data.List':'un--filter'(fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V7, $\x{a})) end, V6)))).
'un--tokenise'(V0, V1, V2, V3, V4, V5) -> ('case--tokenise-1693'(V5, V4, V3, V2, V1, V0, ('nested--3681-1494--in--un--getFirstToken'(V5, V4, V3, V2, V1, V0, V4, V5)))).
'un--scan'(V0, V1, V2) -> case V0 of {'Idris.Libraries.Text.Lexer.Core.Empty'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V1, V2})) end()); {'Idris.Libraries.Text.Lexer.Core.Fail'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Libraries.Text.Lexer.Core.Lookahead', E0, E1} -> (fun (V3, V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(('Idris.Idris2.Data.Maybe':'un--isJust'(('un--scan'(V4, V1, V2)))), V3)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V1, V2})); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.Libraries.Text.Lexer.Core.Pred', E2} -> (fun (V5) -> case V2 of [] -> {'Idris.Prelude.Types.Nothing'}; [E3 | E4] -> (fun (V6, V7) -> case (V5(V6)) of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', [V6 | V1], V7}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Libraries.Text.Lexer.Core.SeqEat', E5, E6} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--scan'(V8, V1, V2)), fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V11, V12) -> ('un--scan'((V9()), V11, V12)) end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E5, E6)); {'Idris.Libraries.Text.Lexer.Core.SeqEmpty', E9, E10} -> (fun (V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--scan'(V13, V1, V2)), fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V16, V17) -> ('un--scan'(V14, V16, V17)) end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E9, E10)); {'Idris.Libraries.Text.Lexer.Core.SeqSame', E13, E14} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--scan'(V18, V1, V2)), fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V21, V22) -> ('un--scan'(V19, V21, V22)) end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E13, E14)); {'Idris.Libraries.Text.Lexer.Core.Alt', E17, E18} -> (fun (V23, V24) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('un--scan'(V24, V1, V2)) end, fun () -> fun (V25) -> {'Idris.Prelude.Types.Just', V25} end end, ('un--scan'(V23, V1, V2)))) end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--reject'(V0) -> {'Idris.Libraries.Text.Lexer.Core.Lookahead', 0, V0}.
'un--pred'(V0) -> {'Idris.Libraries.Text.Lexer.Core.Pred', V0}.
'un--lexTo'(V0, V1, V2) -> case ('un--tokenise'(V0, 0, 0, [], V1, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)))) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V7, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V8))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lex'(V0, V1) -> case ('un--tokenise'(fun (V2) -> 0 end, 0, 0, [], V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V7, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V8))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fail'() -> {'Idris.Libraries.Text.Lexer.Core.Fail'}.
'un--expect'(V0) -> {'Idris.Libraries.Text.Lexer.Core.Lookahead', 1, V0}.
'un--empty'() -> {'Idris.Libraries.Text.Lexer.Core.Empty'}.
'un--concatMap'(V0, V1) -> case V1 of [] -> {'Idris.Libraries.Text.Lexer.Core.Empty'}; [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> (V0(V2)); [E2 | E3] -> (fun (V4, V5) -> {'Idris.Libraries.Text.Lexer.Core.SeqSame', (V0(V2)), ('un--concatMap'(V0, V3))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--TokenMap'(V0) -> {'Idris.Prelude.Basics.List', {'Idris.Builtin.Pair', ('un--Lexer'()), {'Idris.->', {'Idris.String'}, fun (V1) -> V0 end}}}.
'un--Lexer'() -> {'Idris.Libraries.Text.Lexer.Core.Recognise', 1}.
'un--<|>'(V0, V1) -> {'Idris.Libraries.Text.Lexer.Core.Alt', V0, V1}.
'un--<+>'(V0, V1, V2) -> case V0 of 0 -> {'Idris.Libraries.Text.Lexer.Core.SeqEmpty', V1, V2}; 1 -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', V1, V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
