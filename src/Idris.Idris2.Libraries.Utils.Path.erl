-module('Idris.Idris2.Libraries.Utils.Path').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--<.>-5130'/6,
  'case--case block in dropBase-4917'/7,
  'case--splitFileName-4632'/2,
  'case--splitParent\x{27}-4513'/2,
  'nested--5366-4421--in--un--splitRoot'/2,
  'nested--5366-4422--in--un--iterateBody'/3,
  'nested--5539-4584--in--un--findNormal'/2,
  'nested--6021-5026--in--un--filter'/3,
  'nested--5821-4857--in--un--dropBody'/4,
  'dn--un--tokValue_TokenKind_PathTokenKind'/2,
  'dn--un--show_Show_Volume'/1,
  'dn--un--show_Show_Path'/1,
  'dn--un--show_Show_Body'/1,
  'dn--un--showPrec_Show_Volume'/2,
  'dn--un--showPrec_Show_Path'/2,
  'dn--un--showPrec_Show_Body'/2,
  'dn--un--__Impl_Show_Volume'/0,
  'dn--un--__Impl_Show_Path'/0,
  'dn--un--__Impl_Show_Body'/0,
  'dn--un--__Impl_Eq_Volume'/0,
  'dn--un--__Impl_Eq_Path'/0,
  'dn--un--__Impl_Eq_Body'/0,
  'dn--un--TokType_TokenKind_PathTokenKind'/1,
  'dn--un--==_Eq_Volume'/2,
  'dn--un--==_Eq_PathTokenKind'/2,
  'dn--un--==_Eq_Path'/2,
  'dn--un--==_Eq_Body'/2,
  'dn--un--/=_Eq_Volume'/2,
  'dn--un--/=_Eq_PathTokenKind'/2,
  'dn--un--/=_Eq_Path'/2,
  'dn--un--/=_Eq_Body'/2,
  'un--verbatimUnc'/0,
  'un--verbatimDisk'/0,
  'un--verbatim'/0,
  'un--unc'/0,
  'un--splitPath\x{27}'/1,
  'un--splitPath'/1,
  'un--splitParent\x{27}'/1,
  'un--splitParent'/1,
  'un--splitFileName'/1,
  'un--setFileName\x{27}'/2,
  'un--setFileName'/2,
  'un--pathTokenMap'/0,
  'un--pathSeparator'/0,
  'un--pathLookup'/2,
  'un--parseVolume'/0,
  'un--parsePath'/0,
  'un--parseBody'/0,
  'un--parse'/1,
  'un--parents'/1,
  'un--parent\x{27}'/1,
  'un--parent'/1,
  'un--lexPath'/1,
  'un--joinPath'/1,
  'un--isRelative'/1,
  'un--isBaseOf'/2,
  'un--isAbsolute\x{27}'/1,
  'un--isAbsolute'/1,
  'un--fileStem'/1,
  'un--fileName\x{27}'/1,
  'un--fileName'/1,
  'un--extension'/1,
  'un--emptyPath'/0,
  'un--dropExtension'/1,
  'un--dropBase'/2,
  'un--disk'/0,
  'un--dirSeparator'/0,
  'un--bodySeparator'/0,
  'un--append\x{27}'/2,
  'un--</>'/2,
  'un--<.>'/2,
  'un--/>'/2
]).
'case--<.>-5130'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case ('un--splitFileName'(V6)) of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> ('dn--un--show_Show_Path'(('un--setFileName\x{27}'(('Idris.Idris2.Prelude.Types.String':'un--++'(V7, V4)), V2)))) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in dropBase-4917'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V19, V20)) end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V23, V24)) end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V26)) end end}, case case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('dn--un--==_Eq_Volume'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('dn--un--/=_Eq_Volume'(V29, V30)) end end}, V5, V7)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V4, V8)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--5821-4857--in--un--dropBody'(V0, V1, V3, V9)), fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('dn--un--show_Show_Path'({'Idris.Libraries.Utils.Path.MkPath', {'Idris.Prelude.Types.Nothing'}, 0, V31, V10})))) end)) end)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--splitFileName-4632'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of [] -> {'Idris.Builtin.MkPair', V0, <<""/utf8>>}; [E2 | E3] -> (fun (V4, V5) -> case V4 of $. -> case V5 of [] -> {'Idris.Builtin.MkPair', V0, <<""/utf8>>}; _ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))))} end; _ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))))} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--splitParent\x{27}-4513'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> begin (V8 = case V0 of {'Idris.Libraries.Utils.Path.MkPath', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> {'Idris.Libraries.Utils.Path.MkPath', V4, V5, ('Idris.Idris2.Data.List':'un--init'([V2 | V3])), 0} end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V13 = {'Idris.Libraries.Utils.Path.MkPath', {'Idris.Prelude.Types.Nothing'}, 0, [('Idris.Idris2.Data.List':'un--last'([V2 | V3])) | []], case V0 of {'Idris.Libraries.Utils.Path.MkPath', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> V12 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V8, V13}} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5366-4421--in--un--splitRoot'(V0, V1) -> case V1 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V3 of 0 -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V1}; _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Libraries.Utils.Path.MkPath', V2, V3, [], 0}}, {'Idris.Libraries.Utils.Path.MkPath', {'Idris.Prelude.Types.Nothing'}, 0, V4, V5}} end end()); _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Libraries.Utils.Path.MkPath', V2, V3, [], 0}}, {'Idris.Libraries.Utils.Path.MkPath', {'Idris.Prelude.Types.Nothing'}, 0, V4, V5}} end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5366-4422--in--un--iterateBody'(V0, V1, V2) -> case V1 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> [{'Idris.Libraries.Utils.Path.MkPath', {'Idris.Prelude.Types.Nothing'}, 0, [V3 | []], V2} | []]; [E2 | E3] -> (fun (V5, V6) -> [{'Idris.Libraries.Utils.Path.MkPath', {'Idris.Prelude.Types.Nothing'}, 0, [V3 | []], 0} | ('nested--5366-4422--in--un--iterateBody'(V0, [V5 | V6], V2))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5539-4584--in--un--findNormal'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Libraries.Utils.Path.Normal', E2} -> (fun (V4) -> {'Idris.Prelude.Types.Just', V4} end(E2)); {'Idris.Libraries.Utils.Path.CurDir'} -> (fun () -> ('nested--5539-4584--in--un--findNormal'(V0, V3)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--6021-5026--in--un--filter'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Data.Maybe':'un--toMaybe'((V1(V3)), fun () -> V3 end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5821-4857--in--un--dropBody'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Just', V3}; _ -> case V3 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> case V2 of [E0 | E1] -> (fun (V4, V5) -> case V3 of [E2 | E3] -> (fun (V6, V7) -> case ('dn--un--==_Eq_Body'(V4, V6)) of 1 -> ('nested--5821-4857--in--un--dropBody'(V0, V1, V5, V7)); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'dn--un--tokValue_TokenKind_PathTokenKind'(V0, V1) -> case V0 of {'Idris.Libraries.Utils.Path.PTText'} -> (fun () -> V1 end()); {'Idris.Libraries.Utils.Path.PTPunct', E0} -> (fun (V2) -> 0 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Volume'(V0) -> case V0 of {'Idris.Libraries.Utils.Path.UNC', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}"/utf8>>, V2)))))) end(E0, E1)); {'Idris.Libraries.Utils.Path.Disk', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Data.String':'un--singleton'(V3)), <<":"/utf8>>)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Path'(V0) -> begin (V1 = ('Idris.Idris2.Data.String':'un--singleton'(('un--dirSeparator'())))), begin (V7 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V2) -> ('dn--un--show_Show_Volume'(V2)) end end, case V0 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V12 = case case V0 of {'Idris.Libraries.Utils.Path.MkPath', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> V9 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> V1; 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V44 = ('Idris.Idris2.Libraries.Data.String.Extra':'un--join'(V1, {'Idris.Prelude.Interfaces.MkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V28, V29, V30, V31)) end end end end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V33)) end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V36, V37, V38)) end end end end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V39) -> ('dn--un--show_Show_Body'(V39)) end, case V0 of {'Idris.Libraries.Utils.Path.MkPath', E8, E9, E10, E11} -> (fun (V40, V41, V42, V43) -> V42 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V49 = case case V0 of {'Idris.Libraries.Utils.Path.MkPath', E12, E13, E14, E15} -> (fun (V45, V46, V47, V48) -> V48 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> V1; 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, ('Idris.Idris2.Prelude.Types.String':'un--++'(V44, V49)))))) end end end end end.
'dn--un--show_Show_Body'(V0) -> case V0 of {'Idris.Libraries.Utils.Path.CurDir'} -> (fun () -> <<"."/utf8>> end()); {'Idris.Libraries.Utils.Path.ParentDir'} -> (fun () -> <<".."/utf8>> end()); {'Idris.Libraries.Utils.Path.Normal', E0} -> (fun (V1) -> V1 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_Volume'(V0, V1) -> ('dn--un--show_Show_Volume'(V1)).
'dn--un--showPrec_Show_Path'(V0, V1) -> ('dn--un--show_Show_Path'(V1)).
'dn--un--showPrec_Show_Body'(V0, V1) -> ('dn--un--show_Show_Body'(V1)).
'dn--un--__Impl_Show_Volume'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Volume'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Volume'(V1, V2)) end end}.
'dn--un--__Impl_Show_Path'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Path'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Path'(V1, V2)) end end}.
'dn--un--__Impl_Show_Body'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Body'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Body'(V1, V2)) end end}.
'dn--un--__Impl_Eq_Volume'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Volume'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Volume'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Path'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Path'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Path'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Body'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Body'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Body'(V2, V3)) end end}.
'dn--un--TokType_TokenKind_PathTokenKind'(V0) -> case V0 of {'Idris.Libraries.Utils.Path.PTText'} -> (fun () -> {'Idris.String'} end()); {'Idris.Libraries.Utils.Path.PTPunct', E0} -> (fun (V1) -> {'Idris.Builtin.Unit'} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_Volume'(V0, V1) -> case V0 of {'Idris.Libraries.Utils.Path.UNC', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Libraries.Utils.Path.UNC', E2, E3} -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V4)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Libraries.Utils.Path.Disk', E4} -> (fun (V6) -> case V1 of {'Idris.Libraries.Utils.Path.Disk', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V6, V7)) end(E5)); _ -> 0 end end(E4)); _ -> 0 end.
'dn--un--==_Eq_PathTokenKind'(V0, V1) -> case V0 of {'Idris.Libraries.Utils.Path.PTText'} -> (fun () -> case V1 of {'Idris.Libraries.Utils.Path.PTText'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Libraries.Utils.Path.PTPunct', E0} -> (fun (V2) -> case V1 of {'Idris.Libraries.Utils.Path.PTPunct', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)) end(E1)); _ -> 0 end end(E0)); _ -> 0 end.
'dn--un--==_Eq_Path'(V0, V1) -> case V0 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V1 of {'Idris.Libraries.Utils.Path.MkPath', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('dn--un--==_Eq_Volume'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un--/=_Eq_Volume'(V12, V13)) end end}, V2, V6)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V3, V7)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_Body'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_Body'(V16, V17)) end end}, V4, V8)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_Body'(V0, V1) -> case V0 of {'Idris.Libraries.Utils.Path.CurDir'} -> (fun () -> case V1 of {'Idris.Libraries.Utils.Path.CurDir'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Libraries.Utils.Path.ParentDir'} -> (fun () -> case V1 of {'Idris.Libraries.Utils.Path.ParentDir'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Libraries.Utils.Path.Normal', E0} -> (fun (V2) -> case V1 of {'Idris.Libraries.Utils.Path.Normal', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end(E1)); _ -> 0 end end(E0)); _ -> 0 end.
'dn--un--/=_Eq_Volume'(V0, V1) -> case ('dn--un--==_Eq_Volume'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_PathTokenKind'(V0, V1) -> case ('dn--un--==_Eq_PathTokenKind'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_Path'(V0, V1) -> case ('dn--un--==_Eq_Path'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_Body'(V0, V1) -> case ('dn--un--==_Eq_Body'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--verbatimUnc'() -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--verbatim'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--bodySeparator'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('dn--un--==_Eq_PathTokenKind'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--/=_Eq_PathTokenKind'(V10, V11)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V12) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V12)) end, fun (V13) -> fun (V14) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V13, V14)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V15) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.UNC', V7, V15}} end end} end} end end} end}.
'un--verbatimDisk'() -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--verbatim'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--disk'()), fun () -> fun (V0) -> {'Idris.Libraries.Text.Parser.Core.Empty', V0} end end} end}.
'un--verbatim'() -> case ('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))) of {'Idris.Libraries.Text.Quantity.Qty', E4, E5} -> (fun (V0, V1) -> V0 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))) of {'Idris.Libraries.Text.Quantity.Qty', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V4) -> 0 end, ('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('dn--un--==_Eq_PathTokenKind'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('dn--un--/=_Eq_PathTokenKind'(V7, V8)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V9) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V9)) end, fun (V10) -> fun (V11) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V10, V11)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('dn--un--==_Eq_PathTokenKind'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--/=_Eq_PathTokenKind'(V14, V15)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V16) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V17, V18)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $?})), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('dn--un--==_Eq_PathTokenKind'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('dn--un--/=_Eq_PathTokenKind'(V21, V22)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V23) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V23)) end, fun (V24) -> fun (V25) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V24, V25)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}})), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 0} end} end} end}; 1 -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))) of {'Idris.Libraries.Text.Quantity.Qty', E2, E3} -> (fun (V26, V27) -> V26 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V28) -> 0 end, ('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('dn--un--==_Eq_PathTokenKind'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('dn--un--/=_Eq_PathTokenKind'(V31, V32)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V33) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V34, V35)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('dn--un--==_Eq_PathTokenKind'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--/=_Eq_PathTokenKind'(V38, V39)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V40) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V40)) end, fun (V41) -> fun (V42) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V41, V42)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $?})), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V43) -> fun (V44) -> ('dn--un--==_Eq_PathTokenKind'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('dn--un--/=_Eq_PathTokenKind'(V45, V46)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V47) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V47)) end, fun (V48) -> fun (V49) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V48, V49)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}})), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', 0} end} end} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unc'() -> case ('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))) of {'Idris.Libraries.Text.Quantity.Qty', E4, E5} -> (fun (V0, V1) -> V0 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))) of {'Idris.Libraries.Text.Quantity.Qty', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V4) -> 0 end, ('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('dn--un--==_Eq_PathTokenKind'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('dn--un--/=_Eq_PathTokenKind'(V7, V8)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V9) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V9)) end, fun (V10) -> fun (V11) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V10, V11)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('dn--un--==_Eq_PathTokenKind'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--/=_Eq_PathTokenKind'(V14, V15)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V16) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V17, V18)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--bodySeparator'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('dn--un--==_Eq_PathTokenKind'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('dn--un--/=_Eq_PathTokenKind'(V22, V23)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V24) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V24)) end, fun (V25) -> fun (V26) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V25, V26)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V27) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.UNC', V19, V27}} end end} end} end end} end}; 1 -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(('Idris.Idris2.Data.Nat':'un--isSucc'(case ('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))) of {'Idris.Libraries.Text.Quantity.Qty', E2, E3} -> (fun (V28, V29) -> V28 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V30) -> 0 end, ('Idris.Idris2.Libraries.Text.Parser':'un--count'(('Idris.Idris2.Libraries.Text.Quantity':'un--exactly'((1 + (1 + 0)))), ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('dn--un--==_Eq_PathTokenKind'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('dn--un--/=_Eq_PathTokenKind'(V33, V34)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V35) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V35)) end, fun (V36) -> fun (V37) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V36, V37)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}})))))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V38) -> fun (V39) -> ('dn--un--==_Eq_PathTokenKind'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('dn--un--/=_Eq_PathTokenKind'(V40, V41)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V42) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V42)) end, fun (V43) -> fun (V44) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V43, V44)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V45) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('un--bodySeparator'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> ('dn--un--==_Eq_PathTokenKind'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--/=_Eq_PathTokenKind'(V48, V49)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V50) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V50)) end, fun (V51) -> fun (V52) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V51, V52)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V53) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.UNC', V45, V53}} end end} end} end end} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--splitPath\x{27}'(V0) -> case ('nested--5366-4421--in--un--splitRoot'(V0, V0)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Types.Just', E2} -> (fun (V3) -> [V3 | ('nested--5366-4422--in--un--iterateBody'(V0, case V0 of {'Idris.Libraries.Utils.Path.MkPath', E3, E4, E5, E6} -> (fun (V4, V5, V6, V7) -> V6 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Libraries.Utils.Path.MkPath', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> V11 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))] end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--5366-4422--in--un--iterateBody'(V0, case V0 of {'Idris.Libraries.Utils.Path.MkPath', E11, E12, E13, E14} -> (fun (V12, V13, V14, V15) -> V14 end(E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Libraries.Utils.Path.MkPath', E15, E16, E17, E18} -> (fun (V16, V17, V18, V19) -> V19 end(E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--splitPath'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('dn--un--show_Show_Path'(V1)) end, ('un--splitPath\x{27}'(('un--parse'(V0)))))).
'un--splitParent\x{27}'(V0) -> ('case--splitParent\x{27}-4513'(V0, case V0 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--splitParent'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--splitParent\x{27}'(('un--parse'(V0)))), fun (V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', ('dn--un--show_Show_Path'(V2)), ('dn--un--show_Show_Path'(V3))})) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'un--splitFileName'(V0) -> ('case--splitFileName-4632'(V0, ('Idris.Idris2.Data.List':'un--break'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $.)) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))))).
'un--setFileName\x{27}'(V0, V1) -> case ('Idris.Idris2.Data.Maybe':'un--isJust'(('un--fileName\x{27}'(V1)))) of 1 -> ('un--append\x{27}'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('un--emptyPath'()) end, ('un--parent\x{27}'(V1)))), ('un--parse'(V0)))); 0 -> ('un--append\x{27}'(V1, ('un--parse'(V0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setFileName'(V0, V1) -> ('dn--un--show_Show_Path'(('un--setFileName\x{27}'(V0, ('un--parse'(V1)))))).
'un--pathTokenMap'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--toTokenMap'([{'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($/)), {'Idris.Libraries.Utils.Path.PTPunct', $/}} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{5c})), {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}}} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($:)), {'Idris.Libraries.Utils.Path.PTPunct', $:}} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($?)), {'Idris.Libraries.Utils.Path.PTPunct', $?}} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer':'un--non'(('Idris.Idris2.Libraries.Text.Lexer':'un--oneOf'(<<"/\x{5c}:?"/utf8>>)))))), {'Idris.Libraries.Utils.Path.PTText'}} | []]]]]])).
'un--pathSeparator'() -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> $;; 0 -> $:; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pathLookup'(V0, V1) -> begin (V29 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, <<"PATH"/utf8>>, 0))(V1))), begin (V30 = case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> [<<".exe"/utf8>> | [<<".cmd"/utf8>> | [<<".bat"/utf8>> | [<<""/utf8>> | []]]]]; 0 -> [<<""/utf8>> | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V32 = ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.String':'un--split'(fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V31, ('un--pathSeparator'()))) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<"/usr/bin:/usr/local/bin"/utf8>> end, V29))))))), begin (V36 = ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V32, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V0, fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V30, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Prelude.Types.String':'un--++'(V33, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V34, V35)))))))) end)) end)) end))), (('Idris.Idris2.Erlang.System.File':'un--firstExists'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, V36))(V1)) end end end end.
'un--parseVolume'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--verbatimUnc'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--verbatimDisk'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--unc'()), fun () -> ('un--disk'()) end} end} end}.
'un--parsePath'() -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('un--parseVolume'()))), fun (V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--bodySeparator'()))))), fun (V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--bodySeparator'()))), ('un--parseBody'()))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--optional'(1, ('Idris.Idris2.Libraries.Text.Parser':'un--some'(('un--bodySeparator'()))))), fun (V3) -> begin (V6 = ('Idris.Idris2.Data.List':'un--filter'(fun (V4) -> case V4 of {'Idris.Libraries.Utils.Path.Normal', E0} -> (fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.Data.String':'un--ltrim'(V5)), <<""/utf8>>)) end(E0)); _ -> 1 end end, V2))), begin (V13 = case V6 of [] -> []; [E1 | E2] -> (fun (V7, V8) -> [V7 | ('Idris.Idris2.Data.List':'un--delete'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('dn--un--==_Eq_Body'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('dn--un--/=_Eq_Body'(V11, V12)) end end}, {'Idris.Libraries.Utils.Path.CurDir'}, V8))] end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.MkPath', V0, ('Idris.Idris2.Data.Maybe':'un--isJust'(V1)), V13, ('Idris.Idris2.Data.Maybe':'un--isJust'(V3))}} end end end} end} end} end}.
'un--parseBody'() -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V7) -> case V7 of <<".."/utf8>> -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.ParentDir'}}; <<"."/utf8>> -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.CurDir'}}; _ -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.Normal', V7}} end end end}.
'un--parse'(V0) -> case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parse'(0, ('un--parsePath'()), ('un--lexPath'(V0)))) of {'Idris.Prelude.Types.Right', E0} -> (fun (V1) -> case V1 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V4, V5) -> V4 end(E3, E4)); _ -> ('un--emptyPath'()) end end(E1, E2)); _ -> ('un--emptyPath'()) end end(E0)); _ -> ('un--emptyPath'()) end.
'un--parents'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('dn--un--show_Show_Path'(V1)) end, ('Idris.Idris2.Data.List':'un--iterate'(fun (V2) -> ('un--parent\x{27}'(V2)) end, ('un--parse'(V0)))))).
'un--parent\x{27}'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V1) -> ('Idris.Idris2.Builtin':'un--fst'(V1)) end, ('un--splitParent\x{27}'(V0)))).
'un--parent'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V1) -> ('dn--un--show_Show_Path'(V1)) end, ('un--parent\x{27}'(('un--parse'(V0)))))).
'un--lexPath'(V0) -> case ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--lex'(('un--pathTokenMap'()), V0)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> V1 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--joinPath'(V0) -> ('dn--un--show_Show_Path'(('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V1) -> fun (V2) -> ('un--/>'(V1, V2)) end end, ('un--parse'(<<""/utf8>>)), V0)))).
'un--isRelative'(V0) -> case ('un--isAbsolute'(V0)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isBaseOf'(V0, V1) -> case ('un--parse'(V0)) of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case ('un--parse'(V1)) of {'Idris.Libraries.Utils.Path.MkPath', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('dn--un--==_Eq_Volume'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un--/=_Eq_Volume'(V12, V13)) end end}, V2, V6)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V3, V7)) of 1 -> ('Idris.Idris2.Data.List':'un--isPrefixOf'({'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_Body'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_Body'(V16, V17)) end end}, V4, V8)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isAbsolute\x{27}'(V0) -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> case V0 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V1 of {'Idris.Prelude.Types.Just', E4} -> (fun (V5) -> case V5 of {'Idris.Libraries.Utils.Path.UNC', E5, E6} -> (fun (V6, V7) -> 1 end(E5, E6)); {'Idris.Libraries.Utils.Path.Disk', E7} -> (fun (V8) -> case V0 of {'Idris.Libraries.Utils.Path.MkPath', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> V10 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Libraries.Utils.Path.MkPath', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> V14 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isAbsolute'(V0) -> ('un--isAbsolute\x{27}'(('un--parse'(V0)))).
'un--fileStem'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--fileName'(V0)), fun (V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('Idris.Idris2.Builtin':'un--fst'(('un--splitFileName'(V1)))))) end)).
'un--fileName\x{27}'(V0) -> ('nested--5539-4584--in--un--findNormal'(V0, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(case V0 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))).
'un--fileName'(V0) -> ('un--fileName\x{27}'(('un--parse'(V0)))).
'un--extension'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--fileName'(V0)), fun (V1) -> ('nested--6021-5026--in--un--filter'(V0, fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V2, <<""/utf8>>)) end, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Builtin':'un--snd'(('un--splitFileName'(V1))))})) end)).
'un--emptyPath'() -> {'Idris.Libraries.Utils.Path.MkPath', {'Idris.Prelude.Types.Nothing'}, 0, [], 0}.
'un--dropExtension'(V0) -> ('un--<.>'(V0, <<""/utf8>>)).
'un--dropBase'(V0, V1) -> case ('un--parse'(V0)) of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('case--case block in dropBase-4917'(V1, V0, V5, V4, V3, V2, ('un--parse'(V1)))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--disk'() -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Idris.Libraries.Utils.Path.PTText'})), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, case ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V7)) of [E0 | E1] -> (fun (V8, V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', V8} end(E0, E1)); [] -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Expects disk"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V10) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('dn--un--==_Eq_PathTokenKind'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--/=_Eq_PathTokenKind'(V13, V14)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V15) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V15)) end, fun (V16) -> fun (V17) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V16, V17)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $:})), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Libraries.Utils.Path.Disk', ('Idris.Idris2.Prelude.Types':'un--toUpper'(V10))}} end} end} end end}.
'un--dirSeparator'() -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> $\x{5c}; 0 -> $/; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bodySeparator'() -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PathTokenKind'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PathTokenKind'(V2, V3)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V4) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V5, V6)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $\x{5c}})), fun () -> ('Idris.Idris2.Libraries.Text.Parser':'un--match'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('dn--un--==_Eq_PathTokenKind'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--/=_Eq_PathTokenKind'(V9, V10)) end end}, {'Idris.Libraries.Text.Token.dn--un--__mkTokenKind', fun (V11) -> ('dn--un--TokType_TokenKind_PathTokenKind'(V11)) end, fun (V12) -> fun (V13) -> ('dn--un--tokValue_TokenKind_PathTokenKind'(V12, V13)) end end}}, {'Idris.Libraries.Utils.Path.PTPunct', $/})) end}.
'un--append\x{27}'(V0, V1) -> case case ('un--isAbsolute\x{27}'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Data.Maybe':'un--isJust'(case V1 of {'Idris.Libraries.Utils.Path.MkPath', E28, E29, E30, E31} -> (fun (V2, V3, V4, V5) -> V2 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> V1; 0 -> case case V1 of {'Idris.Libraries.Utils.Path.MkPath', E24, E25, E26, E27} -> (fun (V6, V7, V8, V9) -> V7 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case V1 of {'Idris.Libraries.Utils.Path.MkPath', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> {'Idris.Libraries.Utils.Path.MkPath', case V0 of {'Idris.Libraries.Utils.Path.MkPath', E4, E5, E6, E7} -> (fun (V14, V15, V16, V17) -> V14 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11, V12, V13} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Libraries.Utils.Path.MkPath', E8, E9, E10, E11} -> (fun (V18, V19, V20, V21) -> {'Idris.Libraries.Utils.Path.MkPath', V18, V19, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V0 of {'Idris.Libraries.Utils.Path.MkPath', E12, E13, E14, E15} -> (fun (V22, V23, V24, V25) -> V24 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Libraries.Utils.Path.MkPath', E16, E17, E18, E19} -> (fun (V26, V27, V28, V29) -> V28 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V1 of {'Idris.Libraries.Utils.Path.MkPath', E20, E21, E22, E23} -> (fun (V30, V31, V32, V33) -> V33 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--</>'(V0, V1) -> ('dn--un--show_Show_Path'(('un--/>'(('un--parse'(V0)), V1)))).
'un--<.>'(V0, V1) -> begin (V2 = ('un--parse'(V0))), begin (V4 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--dropWhile'(fun (V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V3, $.)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1))))))), begin (V5 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, <<""/utf8>>)) of 1 -> <<""/utf8>>; 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('case--<.>-5130'(V1, V0, V2, V4, V5, ('un--fileName\x{27}'(V2)))) end end end.
'un--/>'(V0, V1) -> ('un--append\x{27}'(V0, ('un--parse'(V1)))).
