-module('Idris.Idris2.Libraries.Data.IOMatrix').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--write'/5,
  'un--width'/1,
  'un--toPosition'/3,
  'un--read'/4,
  'un--new'/3,
  'un--height'/1
]).
'un--write'(V0, V1, V2, V3, V4) -> case ('un--toPosition'(V1, V2, V3)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> ((V11('erased'))(0)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V13) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$'(case V0 of {'Idris.Prelude.IO.MkHasIO', E9, E10} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E11, E12, E13} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Prelude.Interfaces.MkApplicative', E14, E15, E16} -> (fun (V19, V20, V21) -> V19 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 1, ('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'(V0, case V1 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E17, E18, E19} -> (fun (V22, V23, V24) -> V24 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13, V4)))) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--width'(V0) -> case V0 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPosition'(V0, V1, V2) -> case V0 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V8, V9)) end end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V14, V15)) end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V18, V19)) end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V21)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V24, V25)) end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V30, V31)) end end end end}, fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V34, V35)) end end end}, case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1, 0)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, 0)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1, V3)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(((((V1 * V4) rem 9223372036854775808) + V2) rem 9223372036854775808))) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--read'(V0, V1, V2, V3) -> case ('un--toPosition'(V1, V2, V3)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V9, V10, V11) -> ((V10('erased'))({'Idris.Prelude.Types.Nothing'})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V12) -> ('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'(V0, case V1 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E9, E10, E11} -> (fun (V13, V14, V15) -> V15 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--new'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'(V0, ((V1 * V2) rem 9223372036854775808)))))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V14, V15, V16) -> ((V15('erased'))({'Idris.Libraries.Data.IOMatrix.MkIOMatrix', V1, V2, V8})) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--height'(V0) -> case V0 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E0, E1, E2} -> (fun (V1, V2, V3) -> V2 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
