-module('Idris.Idris2.Erlang.System.Concurrency').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--erlSpawnLink'/2,
  'un--erlSpawn'/2,
  'un--erlSend'/3,
  'un--erlSelf'/1,
  'un--erlReceive'/4
]).
'un--erlSpawnLink'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))(('erlang':'apply'('erlang', 'spawn_link', [fun () -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'(fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> V11 end, V1, V10)) end)) end | []])))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--erlSpawn'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))(('erlang':'apply'('erlang', 'spawn', [fun () -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'(fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> V11 end, V1, V10)) end)) end | []])))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--erlSend'(V0, V1, V2) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V8, V9, V10) -> ((((V8('erased'))('erased'))(fun (V19) -> 0 end))(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V11, V12) -> case V11 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V16, V17, V18) -> ((V17('erased'))(('erlang':'apply'('erlang', 'send', [V1 | [V2 | []]])))) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--erlSelf'(V0) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V6, V7, V8) -> ((V7('erased'))(('erlang':'apply'('erlang', 'self', [])))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--erlReceive'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> ((V28('erased'))(fun (V29) -> receive E7 -> (fun (V30) -> {'Idris.Prelude.Types.Just', V30} end(E7)) after V1 -> {'Idris.Prelude.Types.Nothing'} end end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V9 of {'Idris.Prelude.Types.Just', E8} -> (fun (V10) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E9, E10} -> (fun (V11, V12) -> case V11 of {'Idris.Prelude.Interfaces.MkMonad', E11, E12, E13} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E14, E15, E16} -> (fun (V16, V17, V18) -> ((V17('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> V2 end, V3, V10)))) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E17, E18} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E22, E23, E24} -> (fun (V24, V25, V26) -> ((V25('erased'))(V2)) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
