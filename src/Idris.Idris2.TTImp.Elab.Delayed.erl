-module('Idris.Idris2.TTImp.Elab.Delayed').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8590-9253--in--un--newBinder'/7,
  'nested--9619-10104--in--un--mkExpected'/13,
  'nested--8845-9464--in--un--mkExpected'/14,
  'nested--12091-12267--in--un--hasPri'/8,
  'nested--11188-11518--in--un--better'/16,
  'dn--un--show_Show_RetryError'/1,
  'un--runDelays'/8,
  'un--retryDelayed\x{27}'/9,
  'un--retryDelayed'/8,
  'un--recoverable'/2,
  'un--mkClosedElab'/4,
  'un--mismatchNF'/5,
  'un--mismatch'/5,
  'un--delayOnFailure'/13,
  'un--delayElab'/12,
  'un--deeper'/3,
  'un--contra'/5,
  'un--ambiguous'/1
]).
'nested--8590-9253--in--un--newBinder'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> V6 end(E0, E1, E2, E3)); _ -> {'Idris.Core.TT.Lam', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))} end.
'nested--9619-10104--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Right', V13} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V14 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V10, V8, <<"delayTy"/utf8>>, V12))), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> begin (V21 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V10, V8, V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V16, {'Idris.Core.TT.TType', V6}, V12))), case V21 of {'Idris.Prelude.Types.Left', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, V23))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8845-9464--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Right', V14} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V15 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V11, V9, <<"delayTy"/utf8>>, V13))), case V15 of {'Idris.Prelude.Types.Left', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V17) -> begin (V22 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V11, V9, V7, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V5, V17, {'Idris.Core.TT.TType', V7}, V13))), case V22 of {'Idris.Prelude.Types.Left', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, V24))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12091-12267--in--un--hasPri'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> (V2(V8)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11188-11518--in--un--better'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Core.GenericMsg', E2, E3} -> (fun (V16, V17) -> V14 end(E2, E3)); _ -> case V14 of {'Idris.Core.Core.GenericMsg', E0, E1} -> (fun (V18, V19) -> V15 end(E0, E1)); _ -> V14 end end.
'dn--un--show_Show_RetryError'(V0) -> case V0 of 0 -> <<"RecoverableErrors"/utf8>>; 1 -> <<"AllErrors"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--runDelays'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V24 = case V11 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V22 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V38 = begin (V37 = ('erlang':'put'(V3, case V11 of {'Idris.Core.UnifyState.MkUState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.UnifyState.MkUState', V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, [], V36} end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E26} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V40) -> begin (V41 = (V6(V7))), case V41 of {'Idris.Prelude.Types.Left', E28} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E30} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.delay"/utf8>>, (1 + (1 + 0)), fun () -> <<"Rerunning delayed in elaborator"/utf8>> end, V7))), case V48 of {'Idris.Prelude.Types.Left', E32} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V50) -> begin (V86 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V51) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V52) -> case V52 of {'Idris.Prelude.Types.Left', E34} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V54) -> {'Idris.Prelude.Types.Right', 0} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, 1, 0, [], ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.List':'un--filter'(fun (V55) -> ('nested--12091-12267--in--un--hasPri'(V0, V6, V5, V4, V3, V2, V1, V55)) end, case V47 of {'Idris.Core.UnifyState.MkUState', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V66 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))), V51)) end, fun (V68) -> fun (V69) -> begin (V83 = begin (V82 = ('erlang':'put'(V3, case V47 of {'Idris.Core.UnifyState.MkUState', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> {'Idris.Core.UnifyState.MkUState', V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V24, V81} end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V82} end), case V83 of {'Idris.Prelude.Types.Left', E60} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V68, V69)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V7))), case V86 of {'Idris.Prelude.Types.Left', E62} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V88) -> begin (V90 = begin (V89 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E64} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V92) -> begin (V106 = begin (V105 = ('erlang':'put'(V3, case V92 of {'Idris.Core.UnifyState.MkUState', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> {'Idris.Core.UnifyState.MkUState', V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V103, V24)), V104} end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V105} end), case V106 of {'Idris.Prelude.Types.Left', E78} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V108) -> {'Idris.Prelude.Types.Right', V43} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V7))}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> fun (V14) -> case V13 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V53 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Idris.Core.Name.Resolved', V15}, case V22 of {'Idris.Core.Context.MkDefs', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V23 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V53 of {'Idris.Prelude.Types.Left', E40} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V55) -> begin (V56 = {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V17, V18}}}), case V55 of {'Idris.Prelude.Types.Just', E42} -> (fun (V57) -> case V57 of {'Idris.Core.Context.Context.Delayed'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V58) -> begin (V60 = begin (V59 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E43} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V62) -> begin (V80 = begin (V63 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V15}, V58))), case V63 of {'Idris.Prelude.Types.Left', E45} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V65) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(case V62 of {'Idris.TTImp.Elab.Check.MkEState', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79) -> V76 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": Retrying delayed hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V65)))))) end, V58)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V80 of {'Idris.Prelude.Types.Left', E61} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V82) -> begin (V84 = begin (V83 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V83} end), case V84 of {'Idris.Prelude.Types.Left', E63} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V86) -> begin (V100 = begin (V99 = ('erlang':'put'(V3, case V86 of {'Idris.Core.UnifyState.MkUState', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> {'Idris.Core.UnifyState.MkUState', V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, [], V98} end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V99} end), case V100 of {'Idris.Prelude.Types.Left', E77} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V102) -> begin (V104 = begin (V103 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V103} end), case V104 of {'Idris.Prelude.Types.Left', E79} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V106) -> begin (V138 = begin (V137 = ('erlang':'put'(V1, case V106 of {'Idris.Core.Context.MkDefs', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> {'Idris.Core.Context.MkDefs', V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V17, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136} end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V137} end), case V138 of {'Idris.Prelude.Types.Left', E111} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V140) -> begin (V141 = (V18(V58))), case V141 of {'Idris.Prelude.Types.Left', E113} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V143) -> begin (V145 = begin (V144 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V144} end), case V145 of {'Idris.Prelude.Types.Left', E115} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V147) -> begin (V160 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(case V147 of {'Idris.Core.UnifyState.MkUState', E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128} -> (fun (V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159) -> V158 end(E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V11))), begin (V162 = ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V15}, fun (V161) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.PMDef', {'Idris.Core.Context.Context.MkPMDefInfo', {'Idris.Core.Context.Context.NotHole'}, 1, 0}, [], {'Idris.Core.CaseTree.STerm', 0, V143}, {'Idris.Core.CaseTree.STerm', 0, V143}, []}} end, V58))), case V162 of {'Idris.Prelude.Types.Left', E129} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V164) -> begin (V165 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"elab.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Resolved delayed hole "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)))) end, V143, V58))), case V165 of {'Idris.Prelude.Types.Left', E131} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V167) -> begin (V168 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"elab.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Resolved delayed hole NF "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)))) end, {'Idris.Core.Env.Nil'}, V143, V58))), case V168 of {'Idris.Prelude.Types.Left', E133} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V170) -> begin (V171 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V3, V15, V58))), case V171 of {'Idris.Prelude.Types.Left', E135} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V173) -> (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, 1, V7, V160))(V58)) end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V174) -> fun (V175) -> begin (V179 = begin (V176 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V15}, V175))), case V176 of {'Idris.Prelude.Types.Left', E137} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V178) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_RetryError'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Error in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V178)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V174)))))))))) end, V175)) end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V179 of {'Idris.Prelude.Types.Left', E139} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V181) -> case V5 of 0 -> begin (V182 = (('un--recoverable'(V1, V174))(V175))), case V182 of {'Idris.Prelude.Types.Left', E141} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V184) -> begin (V185 = 0), case V184 of 1 -> (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V185, V6, [V56 | V7], V11))(V175)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V174, V175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V186) -> begin (V190 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V187) -> case V187 of {'Idris.Prelude.Types.Left', E143} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V189) -> {'Idris.Prelude.Types.Right', 0} end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, [], V11)), V186))), case V190 of {'Idris.Prelude.Types.Left', E145} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V192) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V174, V186)) end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--11188-11518--in--un--better'(V0, V12, V15, V17, V18, V56, V11, V7, V6, V5, V4, V3, V2, V1, V174, V193)), V194)) end end, V175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V14)) end()); _ -> (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V14)) end end(E42)); _ -> (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V14)) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--retryDelayed'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = (('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, 0, 0, [], V6))(V7))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V5, 0, V7))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> case V15 of 1 -> ('un--retryDelayed'(V0, V1, V2, V3, V4, V5, V16, V7)); 0 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Right', 0} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--retryDelayed\x{27}'(V0, V1, V2, V3, V4, 1, 0, [], V16)), V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--recoverable'(V0, V1) -> case V1 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V43 = case V12 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkDefs', V4, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V44 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V2, V43, V5, V6))(V8))), case V44 of {'Idris.Prelude.Types.Left', E38} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V2, V43, V5, V7))(V8))), case V47 of {'Idris.Prelude.Types.Left', E40} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V49) -> begin (V50 = (('un--contra'(V0, V2, V43, V46, V49))(V8))), case V50 of {'Idris.Prelude.Types.Left', E42} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V52) -> {'Idris.Prelude.Types.Right', case V52 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4, E5)); {'Idris.Core.Core.CantSolveEq', E44, E45, E46, E47, E48, E49} -> (fun (V53, V54, V55, V56, V57, V58) -> fun (V59) -> begin (V61 = begin (V60 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E50} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V63) -> begin (V94 = case V63 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> {'Idris.Core.Context.MkDefs', V55, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V95 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V53, V94, V56, V57))(V59))), case V95 of {'Idris.Prelude.Types.Left', E82} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V97) -> begin (V98 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V53, V94, V56, V58))(V59))), case V98 of {'Idris.Prelude.Types.Left', E84} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V100) -> begin (V101 = (('un--contra'(V0, V53, V94, V97, V100))(V59))), case V101 of {'Idris.Prelude.Types.Left', E86} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V103) -> {'Idris.Prelude.Types.Right', case V103 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E44, E45, E46, E47, E48, E49)); {'Idris.Core.Core.UndefinedName', E88, E89} -> (fun (V104, V105) -> fun (V106) -> {'Idris.Prelude.Types.Right', 0} end end(E88, E89)); {'Idris.Core.Core.LinearMisuse', E90, E91, E92, E93} -> (fun (V107, V108, V109, V110) -> fun (V111) -> {'Idris.Prelude.Types.Right', 0} end end(E90, E91, E92, E93)); {'Idris.Core.Core.InType', E94, E95, E96} -> (fun (V112, V113, V114) -> ('un--recoverable'(V0, V114)) end(E94, E95, E96)); {'Idris.Core.Core.InCon', E97, E98, E99} -> (fun (V115, V116, V117) -> ('un--recoverable'(V0, V117)) end(E97, E98, E99)); {'Idris.Core.Core.InLHS', E100, E101, E102} -> (fun (V118, V119, V120) -> ('un--recoverable'(V0, V120)) end(E100, E101, E102)); {'Idris.Core.Core.InRHS', E103, E104, E105} -> (fun (V121, V122, V123) -> ('un--recoverable'(V0, V123)) end(E103, E104, E105)); {'Idris.Core.Core.WhenUnifying', E106, E107, E108, E109, E110, E111, E112} -> (fun (V124, V125, V126, V127, V128, V129, V130) -> ('un--recoverable'(V0, V130)) end(E106, E107, E108, E109, E110, E111, E112)); _ -> fun (V131) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--mkClosedElab'(V0, V1, V2, V3) -> case V0 of [] -> fun (V4) -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> begin (V5 = (V3(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', V8} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E4 | E5] -> (fun (V10, V11) -> case V2 of {'Idris.Core.Env.::', E6, E7} -> (fun (V12, V13) -> ('un--mkClosedElab'(V11, V1, V13, fun (V14) -> begin (V15 = (V3(V14))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V18, V19) -> begin (V20 = ('nested--8590-9253--in--un--newBinder'(V10, V11, V13, V12, V3, V1, V12))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V1, V10, V20, V18}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V1))}} end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mismatchNF'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V12)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E16, E17, E18, E19, E20} -> (fun (V45, V46, V47, V48, V49) -> fun (V50) -> case V4 of {'Idris.Core.Value.NDCon', E21, E22, E23, E24, E25} -> (fun (V51, V52, V53, V54, V55) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V47, V53)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V56) -> fun (V57) -> ('un--mismatch'(V0, V1, V2, V56, V57)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V60) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V68, V69) -> {'Idris.Builtin.MkPair', (V65(V68)), (V66(V69))} end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case V74 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V75, V76) -> {'Idris.Builtin.MkPair', (V73(V75)), V76} end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V81 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V82, V83) -> {'Idris.Builtin.MkPair', V82, (V80(V83))} end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V84) -> ('Idris.Idris2.Builtin':'un--snd'(V84)) end, V60)) end, V58, V59)) end end, V49, V55)), V50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23, E24, E25)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NPrimVal', E32, E33} -> (fun (V85, V86) -> fun (V87) -> case V4 of {'Idris.Core.Value.NPrimVal', E34, E35} -> (fun (V88, V89) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V86, V89))} end(E34, E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E32, E33)); {'Idris.Core.Value.NDelayed', E36, E37, E38} -> (fun (V90, V91, V92) -> case V4 of {'Idris.Core.Value.NDelayed', E39, E40, E41} -> (fun (V93, V94, V95) -> ('un--mismatchNF'(V0, V1, V2, V92, V95)) end(E39, E40, E41)); _ -> fun (V96) -> {'Idris.Prelude.Types.Right', 0} end end end(E36, E37, E38)); {'Idris.Core.Value.NDelay', E42, E43, E44, E45} -> (fun (V97, V98, V99, V100) -> fun (V101) -> case V4 of {'Idris.Core.Value.NDelay', E46, E47, E48, E49} -> (fun (V102, V103, V104, V105) -> begin (V106 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V100))(V101))), case V106 of {'Idris.Prelude.Types.Left', E50} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V108) -> begin (V109 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V105))(V101))), case V109 of {'Idris.Prelude.Types.Left', E52} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V111) -> (('un--mismatchNF'(V0, V1, V2, V108, V111))(V101)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47, E48, E49)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E42, E43, E44, E45)); _ -> fun (V112) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--mismatch'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V5))(V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V6))(V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> (('un--mismatchNF'(V0, V1, V2, V9, V12))(V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--delayOnFailure'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V33 = case V20 of {'Idris.Core.UnifyState.MkUState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V26 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, (V11(0)), fun (V34) -> fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> begin (V40 = ('nested--8845-9464--in--un--mkExpected'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V8, V35))), case V40 of {'Idris.Prelude.Types.Left', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V42) -> case (V9(V34)) of 1 -> begin (V43 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayed"/utf8>>, V35))), case V43 of {'Idris.Prelude.Types.Left', E20} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V45) -> begin (V53 = begin (V46 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V42))(V35))), case V46 of {'Idris.Prelude.Types.Left', E22} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V48) -> (('Idris.Idris2.Core.UnifyState':'un--newDelayed'(V0, V3, V1, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V49, V50)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V51, V52)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V7, V45, V48))(V35)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V53 of {'Idris.Prelude.Types.Left', E24} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V56, V57) -> begin (V58 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postponing elaborator "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V5)), <<" for"/utf8>>)))))))) end, V7, V42, V35))), case V58 of {'Idris.Prelude.Types.Left', E28} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Due to error "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V34)))) end, V35))), case V61 of {'Idris.Prelude.Types.Left', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V63) -> begin (V65 = begin (V64 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E32} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V67) -> begin (V69 = begin (V68 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E34} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V71) -> begin (V173 = begin (V172 = ('erlang':'put'(V3, case V67 of {'Idris.Core.UnifyState.MkUState', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> {'Idris.Core.UnifyState.MkUState', V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, [{'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V56, {'Idris.Builtin.MkPair', case V71 of {'Idris.Core.Context.MkDefs', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V94 end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--mkClosedElab'(V0, V5, V7, fun (V114) -> ('un--deeper'(V4, fun (V115) -> begin (V117 = begin (V116 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V116} end), case V117 of {'Idris.Prelude.Types.Left', E78} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V119) -> begin (V132 = case V119 of {'Idris.Core.UnifyState.MkUState', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> V125 end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V146 = begin (V145 = ('erlang':'put'(V3, case V119 of {'Idris.Core.UnifyState.MkUState', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> {'Idris.Core.UnifyState.MkUState', V133, V134, V135, V136, V137, V33, V139, V140, V141, V142, V143, V144} end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V145} end), case V146 of {'Idris.Prelude.Types.Left', E104} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V148) -> begin (V149 = ((V11(1))(V115))), case V149 of {'Idris.Prelude.Types.Left', E106} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V151) -> begin (V153 = begin (V152 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V152} end), case V153 of {'Idris.Prelude.Types.Left', E108} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V155) -> begin (V169 = begin (V168 = ('erlang':'put'(V3, case V155 of {'Idris.Core.UnifyState.MkUState', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121} -> (fun (V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167) -> {'Idris.Core.UnifyState.MkUState', V156, V157, V158, V159, V160, V132, V162, V163, V164, V165, V166, V167} end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V168} end), case V169 of {'Idris.Prelude.Types.Left', E122} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V171) -> {'Idris.Prelude.Types.Right', V151} end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V114)) end))}}} | V82], V83} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V172} end), case V173 of {'Idris.Prelude.Types.Left', E124} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V175) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V57, V42}} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V34, V35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--delayElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V32 = case V19 of {'Idris.Core.UnifyState.MkUState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V25 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V33 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayed"/utf8>>, V11))), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> begin (V36 = ('nested--9619-10104--in--un--mkExpected'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V8, V11))), case V36 of {'Idris.Prelude.Types.Left', E18} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V38) -> begin (V46 = begin (V39 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V38))(V11))), case V39 of {'Idris.Prelude.Types.Left', E20} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V41) -> (('Idris.Idris2.Core.UnifyState':'un--newDelayed'(V0, V3, V1, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V42, V43)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V7, V35, V41))(V11)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V46 of {'Idris.Prelude.Types.Left', E22} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V48) -> case V48 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V49, V50) -> begin (V51 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postponing elaborator "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V35)), <<" for"/utf8>>)))) end, V7, V38, V11))), case V51 of {'Idris.Prelude.Types.Left', E26} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V53) -> begin (V55 = begin (V54 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E28} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E30} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V61) -> begin (V162 = begin (V161 = ('erlang':'put'(V3, case V57 of {'Idris.Core.UnifyState.MkUState', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> {'Idris.Core.UnifyState.MkUState', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, [{'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V49, {'Idris.Builtin.MkPair', case V61 of {'Idris.Core.Context.MkDefs', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V84 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--mkClosedElab'(V0, V5, V7, fun (V104) -> begin (V106 = begin (V105 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V105} end), case V106 of {'Idris.Prelude.Types.Left', E74} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V108) -> begin (V121 = case V108 of {'Idris.Core.UnifyState.MkUState', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> V114 end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V135 = begin (V134 = ('erlang':'put'(V3, case V108 of {'Idris.Core.UnifyState.MkUState', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133) -> {'Idris.Core.UnifyState.MkUState', V122, V123, V124, V125, V126, V32, V128, V129, V130, V131, V132, V133} end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E100} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V137) -> begin (V138 = (V10(V104))), case V138 of {'Idris.Prelude.Types.Left', E102} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V140) -> begin (V142 = begin (V141 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V141} end), case V142 of {'Idris.Prelude.Types.Left', E104} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V144) -> begin (V158 = begin (V157 = ('erlang':'put'(V3, case V144 of {'Idris.Core.UnifyState.MkUState', E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156) -> {'Idris.Core.UnifyState.MkUState', V145, V146, V147, V148, V149, V121, V151, V152, V153, V154, V155, V156} end(E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V157} end), case V158 of {'Idris.Prelude.Types.Left', E118} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V160) -> {'Idris.Prelude.Types.Right', V140} end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))}}} | V72], V73} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V161} end), case V162 of {'Idris.Prelude.Types.Left', E120} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V164) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V50, V38}} end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--deeper'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V21 = case V6 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V17 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V37 = begin (V36 = ('erlang':'put'(V0, case V6 of {'Idris.TTImp.Elab.Check.MkEState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.TTImp.Elab.Check.MkEState', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V21)), V33, V34, V35} end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> begin (V40 = (V1(V2))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E34} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V46) -> begin (V62 = begin (V61 = ('erlang':'put'(V0, case V46 of {'Idris.TTImp.Elab.Check.MkEState', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> {'Idris.TTImp.Elab.Check.MkEState', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V21, V58, V59, V60} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E50} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V64) -> {'Idris.Prelude.Types.Right', V42} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--contra'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V12)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E16, E17, E18, E19, E20} -> (fun (V45, V46, V47, V48, V49) -> fun (V50) -> case V4 of {'Idris.Core.Value.NDCon', E21, E22, E23, E24, E25} -> (fun (V51, V52, V53, V54, V55) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V47, V53)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V56) -> fun (V57) -> ('un--mismatch'(V0, V1, V2, V56, V57)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V60) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V68, V69) -> {'Idris.Builtin.MkPair', (V65(V68)), (V66(V69))} end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case V74 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V75, V76) -> {'Idris.Builtin.MkPair', (V73(V75)), V76} end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V81 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V82, V83) -> {'Idris.Builtin.MkPair', V82, (V80(V83))} end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V84) -> ('Idris.Idris2.Builtin':'un--snd'(V84)) end, V60)) end, V58, V59)) end end, V49, V55)), V50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23, E24, E25)); {'Idris.Core.Value.NPrimVal', E32, E33} -> (fun (V85, V86) -> {'Idris.Prelude.Types.Right', 1} end(E32, E33)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NPrimVal', E34, E35} -> (fun (V87, V88) -> fun (V89) -> case V4 of {'Idris.Core.Value.NPrimVal', E36, E37} -> (fun (V90, V91) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V88, V91))} end(E36, E37)); {'Idris.Core.Value.NDCon', E38, E39, E40, E41, E42} -> (fun (V92, V93, V94, V95, V96) -> {'Idris.Prelude.Types.Right', 1} end(E38, E39, E40, E41, E42)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E34, E35)); _ -> fun (V97) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--ambiguous'(V0) -> case V0 of {'Idris.Core.Core.AmbiguousElab', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> 1 end(E0, E1, E2, E3)); {'Idris.Core.Core.AmbiguousName', E4, E5} -> (fun (V5, V6) -> 1 end(E4, E5)); {'Idris.Core.Core.AmbiguityTooDeep', E6, E7, E8} -> (fun (V7, V8, V9) -> 1 end(E6, E7, E8)); {'Idris.Core.Core.InType', E9, E10, E11} -> (fun (V10, V11, V12) -> ('un--ambiguous'(V12)) end(E9, E10, E11)); {'Idris.Core.Core.InCon', E12, E13, E14} -> (fun (V13, V14, V15) -> ('un--ambiguous'(V15)) end(E12, E13, E14)); {'Idris.Core.Core.InLHS', E15, E16, E17} -> (fun (V16, V17, V18) -> ('un--ambiguous'(V18)) end(E15, E16, E17)); {'Idris.Core.Core.InRHS', E18, E19, E20} -> (fun (V19, V20, V21) -> ('un--ambiguous'(V21)) end(E18, E19, E20)); {'Idris.Core.Core.WhenUnifying', E21, E22, E23, E24, E25, E26, E27} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> ('un--ambiguous'(V28)) end(E21, E22, E23, E24, E25, E26, E27)); _ -> 0 end.
