-module('Idris.Idris2.Parser.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--runParser'/3,
  'un--parseFile'/3
]).
'un--runParser'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Parser.Lexer.Package':'un--lex'(V1)) of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromLexError'({'Idris.Core.FC.PhysicalPkgSrc', V0}, {'Idris.Builtin.MkPair', {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'}, V3}))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', V4} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parse'(1, V2, V5)) of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromParsingErrors'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--show_Show_Token'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--showPrec_Show_Token'(V8, V9)) end end}, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V10) -> fun (V11) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--pretty_Pretty_Token'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Parser.Lexer.Package':'dn--un--prettyPrec_Pretty_Token'(V13, V14)) end end end}}, {'Idris.Core.FC.PhysicalPkgSrc', V0}, V6))} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', V15} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V19, V20) -> {'Idris.Prelude.Types.Right', V19} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)).
'un--parseFile'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0))(V2))), case V30 of {'Idris.Prelude.Types.Right', E0} -> (fun (V31) -> ('un--runParser'(V0, V31, V1)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V32) -> {'Idris.Prelude.Types.Left', {'Idris.Core.Core.FileErr', V0, V32}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
