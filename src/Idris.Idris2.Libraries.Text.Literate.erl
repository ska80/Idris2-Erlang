-module('Idris.Idris2.Libraries.Text.Literate').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--isLiterateLine-4341'/5,
  'with--with block in reduce-4198'/10,
  'with--reduce-4189'/8,
  'case--extractCode-4276'/5,
  'un--untilEOL'/0,
  'un--unlit'/2,
  'un--relit'/2,
  'un--reduce'/2,
  'un--rawTokens'/2,
  'un--notCodeLine'/0,
  'un--line'/1,
  'un--isLiterateLine'/2,
  'un--extractCode'/2,
  'un--embedCode'/2,
  'un--block'/2
]).
'with--isLiterateLine-4341'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V5 of [E2 | E3] -> (fun (V7, V8) -> case V7 of {'Idris.Libraries.Text.Bounded.MkBounded', E4, E5, E6} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Libraries.Text.Literate.CodeLine', E7, E8} -> (fun (V12, V13) -> case V8 of [] -> case V6 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V16, V17) -> case V17 of <<""/utf8>> -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V12}, V13}; _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} end end(E11, E12)); _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} end end(E9, E10)); _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} end; _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} end end(E7, E8)); _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} end end(E4, E5, E6)); _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} end end(E2, E3)); _ -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V2} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in reduce-4198'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V0 of [] -> case V1 of {'Idris.Data.List.Views.Empty'} -> (fun () -> ('un--reduce'(V6, V5)) end()); _ -> case V1 of {'Idris.Data.List.Views.Snoc', E3, E4, E5} -> (fun (V10, V11, V12) -> ('un--reduce'(V6, [('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V11)), <<"\x{a}"/utf8>>)) | [<<"\x{a}"/utf8>> | V5]])) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V1 of {'Idris.Data.List.Views.Snoc', E0, E1, E2} -> (fun (V13, V14, V15) -> ('un--reduce'(V6, [('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V14)), <<"\x{a}"/utf8>>)) | [<<"\x{a}"/utf8>> | V5]])) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'with--reduce-4189'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V8, V9) -> ('with--with block in reduce-4198'(V9, ('Idris.Idris2.Data.List.Views':'un--snocList'(V9)), V2, V3, V8, V7, V6, V5, V4, V0)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extractCode-4276'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V10 of <<""/utf8>> -> {'Idris.Prelude.Types.Right', ('un--reduce'(V5, []))}; _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Literate.MkLitErr', V7, V9, V10}} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--untilEOL'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--manyUntil'(('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()), ('Idris.Idris2.Libraries.Text.Lexer':'un--any'()))).
'un--unlit'(V0, V1) -> ('un--extractCode'(V0, V1)).
'un--relit'(V0, V1) -> ('un--embedCode'(V0, V1)).
'un--reduce'(V0, V1) -> case V0 of [] -> ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)))); [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Libraries.Text.Literate.Any', E5} -> (fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, <<"\x{a}"/utf8>>)) of 1 -> ('un--reduce'(V3, [<<"\x{a}"/utf8>> | V1])); 0 -> ('un--reduce'(V3, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Libraries.Text.Literate.CodeLine', E6, E7} -> (fun (V8, V9) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, ('Idris.Idris2.Data.String':'un--trim'(V9)))) of 1 -> ('un--reduce'(V3, [<<"\x{a}"/utf8>> | V1])); 0 -> ('un--reduce'(V3, [('Idris.Idris2.Prelude.Types':'un--substr'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V8)), (1 + 0))), ('Idris.Idris2.Prelude.Types.String':'un--length'(V9)), V9)) | V1])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); {'Idris.Libraries.Text.Literate.CodeBlock', E8, E9, E10} -> (fun (V10, V11, V12) -> ('with--reduce-4189'(V12, ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V12)), V5, V6, V11, V10, V3, V1)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rawTokens'(V0, V1) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', ('un--block'(V3, V4)), fun (V5) -> {'Idris.Libraries.Text.Literate.CodeBlock', ('Idris.Idris2.Data.String':'un--trim'(V3)), ('Idris.Idris2.Data.String':'un--trim'(V4)), V5} end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> {'Idris.Builtin.MkPair', ('un--line'(V6)), fun (V7) -> {'Idris.Libraries.Text.Literate.CodeLine', ('Idris.Idris2.Data.String':'un--trim'(V6)), V7} end} end, V1)), [{'Idris.Builtin.MkPair', ('un--notCodeLine'()), fun (V8) -> {'Idris.Libraries.Text.Literate.Any', V8} end} | []])))).
'un--notCodeLine'() -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()), {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--any'()), fun () -> ('un--untilEOL'()) end})).
'un--line'(V0) -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V0)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()), {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--space'()), fun () -> ('un--untilEOL'()) end})) end}.
'un--isLiterateLine'(V0, V1) -> case V0 of {'Idris.Libraries.Text.Literate.MkLitStyle', E0, E1, E2} -> (fun (V2, V3, V4) -> ('with--isLiterateLine-4341'(V3, V2, V1, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--lex'(('un--rawTokens'(V2, V3)), V1)), V4)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractCode'(V0, V1) -> case V0 of {'Idris.Libraries.Text.Literate.MkLitStyle', E0, E1, E2} -> (fun (V2, V3, V4) -> ('case--extractCode-4276'(V4, V3, V2, V1, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--lex'(('un--rawTokens'(V2, V3)), V1)))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--embedCode'(V0, V1) -> case V0 of {'Idris.Libraries.Text.Literate.MkLitStyle', E0, E1, E2} -> (fun (V2, V3, V4) -> case V2 of [E3 | E4] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([V7 | [V1 | [V8 | []]]])) end(E5, E6)); _ -> V1 end end(E3, E4)); [] -> case V3 of [E7 | E8] -> (fun (V9, V10) -> ('Idris.Idris2.Data.String':'un--unwords'([V9 | [V1 | []]])) end(E7, E8)); _ -> V1 end; _ -> V1 end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--block'(V0, V1) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--surround'({'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V0)), fun () -> ('un--untilEOL'()) end}, {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V1)), fun () -> ('un--untilEOL'()) end}, ('Idris.Idris2.Libraries.Text.Lexer':'un--any'()))).
