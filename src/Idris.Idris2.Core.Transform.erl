-module('Idris.Idris2.Core.Transform').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--trans-9862'/8,
  'case--addMatch-9329'/4,
  'un--unload'/2,
  'un--tryReplace'/2,
  'un--tryApply'/2,
  'un--transLoop'/4,
  'un--trans'/6,
  'un--match'/3,
  'un--lookupMatch'/2,
  'un--applyTransforms'/3,
  'un--apply'/2,
  'un--addMatch'/3
]).
'case--trans-9862'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', ('un--unload'(V2, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Func'}, V0}))} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> begin (V10 = ('un--unload'(V2, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Func'}, V0}))), fun (V11) -> case ('un--apply'(V9, V10)) of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'put'(V4, case V17 of 1 -> 1; 0 -> V12; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Right', V13} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addMatch-9329'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Transform.Match', V2, V1, V0}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case ('Idris.Idris2.Core.TT':'un--eqTerm'(V1, V4)) of 1 -> {'Idris.Prelude.Types.Just', V0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unload'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> ('un--unload'(V3, {'Idris.Core.TT.App', V4, V1, V5})) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryReplace'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--lookupMatch'(V4, V0)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Ref', V5, V6, V7})) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V20, V21)) end end end end}, fun (V22) -> ('un--tryReplace'(V0, V22)) end, V11)), fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Meta', V8, V9, V10, V23})) end)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V24, V25, V26, V27) -> {'Idris.Prelude.Types.Nothing'} end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V28, V29, V30) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V29)), fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V30)), fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.App', V28, V31, V32})) end)) end)) end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V33, V34, V35, V36) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V35)), fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V36)), fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.As', V33, V34, V37, V38})) end)) end)) end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V39, V40, V41) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V41)), fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TDelayed', V39, V40, V42})) end)) end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V43, V44, V45, V46) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V45)), fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V46)), fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TDelay', V43, V44, V47, V48})) end)) end)) end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V49, V50, V51) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryReplace'(V0, V51)), fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TForce', V49, V50, V52})) end)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V53, V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.PrimVal', V53, V54})) end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V55, V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Erased', V55, V56})) end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TType', V57})) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryApply'(V0, V1) -> case V0 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> begin (V7 = {'Idris.Core.Context.MkTransform', V2, V3, V4, V5, V6}), case ('un--match'({'Idris.Core.Transform.None'}, V5, V1)) of {'Idris.Prelude.Types.Just', E5} -> (fun (V8) -> ('un--tryReplace'(V8, V6)) end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V1 of {'Idris.Core.TT.App', E6, E7, E8} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryApply'(V7, V10)), fun (V12) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.App', V9, V12, V11}} end)) end(E6, E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--transLoop'(V0, V1, V2, V3) -> case V1 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', V3} end; _ -> begin (V5 = (V1 - 1)), fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Transform.Upd'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('un--trans'(V0, V9, V2, [], V3, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> case V16 of 1 -> (('un--transLoop'(V0, V5, V2, V12))(V6)); 0 -> {'Idris.Prelude.Types.Right', V12}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--trans'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.TT.Func'} -> (fun () -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> (('case--trans-9862'(V8, V6, V3, V2, V1, V0, V12, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V8, case V12 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V26 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V5)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', ('un--unload'(V3, V4))} end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E35, E36, E37, E38} -> (fun (V43, V44, V45, V46) -> begin (V49 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> fun (V48) -> ('un--trans'(V0, V1, V2, [], V47, V48)) end end, V46, [], V5))), case V49 of {'Idris.Prelude.Types.Left', E39} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V51) -> {'Idris.Prelude.Types.Right', ('un--unload'(V3, {'Idris.Core.TT.Meta', V43, V44, V45, V51}))} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35, E36, E37, E38)); {'Idris.Core.TT.Bind', E41, E42, E43, E44} -> (fun (V52, V53, V54, V55) -> begin (V58 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V56) -> fun (V57) -> ('un--trans'(V0, V1, V2, [], V56, V57)) end end, V54, V5))), case V58 of {'Idris.Prelude.Types.Left', E45} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V60) -> begin (V61 = ('un--trans'(V0, V1, {'Idris.Core.Env.::', V60, V2}, [], V55, V5))), case V61 of {'Idris.Prelude.Types.Left', E47} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V63) -> {'Idris.Prelude.Types.Right', ('un--unload'(V3, {'Idris.Core.TT.Bind', V52, V53, V60, V63}))} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41, E42, E43, E44)); {'Idris.Core.TT.App', E49, E50, E51} -> (fun (V64, V65, V66) -> begin (V67 = ('un--trans'(V0, V1, V2, [], V66, V5))), case V67 of {'Idris.Prelude.Types.Left', E52} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V69) -> ('un--trans'(V0, V1, V2, [{'Idris.Builtin.MkPair', V64, V69} | V3], V65, V5)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50, E51)); {'Idris.Core.TT.TDelayed', E54, E55, E56} -> (fun (V70, V71, V72) -> begin (V73 = ('un--trans'(V0, V1, V2, [], V72, V5))), case V73 of {'Idris.Prelude.Types.Left', E57} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V75) -> {'Idris.Prelude.Types.Right', ('un--unload'(V3, {'Idris.Core.TT.TDelayed', V70, V71, V75}))} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55, E56)); {'Idris.Core.TT.TDelay', E59, E60, E61, E62} -> (fun (V76, V77, V78, V79) -> begin (V80 = ('un--trans'(V0, V1, V2, [], V78, V5))), case V80 of {'Idris.Prelude.Types.Left', E63} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V82) -> begin (V83 = ('un--trans'(V0, V1, V2, [], V79, V5))), case V83 of {'Idris.Prelude.Types.Left', E65} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V85) -> {'Idris.Prelude.Types.Right', ('un--unload'(V3, {'Idris.Core.TT.TDelay', V76, V77, V82, V85}))} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59, E60, E61, E62)); {'Idris.Core.TT.TForce', E67, E68, E69} -> (fun (V86, V87, V88) -> begin (V89 = ('un--trans'(V0, V1, V2, [], V88, V5))), case V89 of {'Idris.Prelude.Types.Left', E70} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V91) -> {'Idris.Prelude.Types.Right', ('un--unload'(V3, {'Idris.Core.TT.TForce', V86, V87, V91}))} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67, E68, E69)); _ -> {'Idris.Prelude.Types.Right', ('un--unload'(V3, V4))} end.
'un--match'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V3, V4, V5) -> ('un--addMatch'(V5, V2, V0)) end(E0, E1, E2)); {'Idris.Core.TT.App', E3, E4, E5} -> (fun (V6, V7, V8) -> case V2 of {'Idris.Core.TT.App', E6, E7, E8} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--match'(V0, V7, V10)), fun (V12) -> ('un--match'(V12, V8, V11)) end)) end(E6, E7, E8)); _ -> case ('Idris.Idris2.Core.TT':'un--eqTerm'(V1, V2)) of 1 -> {'Idris.Prelude.Types.Just', V0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> case ('Idris.Idris2.Core.TT':'un--eqTerm'(V1, V2)) of 1 -> {'Idris.Prelude.Types.Just', V0}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupMatch'(V0, V1) -> case V1 of {'Idris.Core.Transform.None'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.Transform.Match', E0, E1, E2} -> (fun (V2, V3, V4) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V2)) of 1 -> {'Idris.Prelude.Types.Just', V3}; 0 -> ('un--lookupMatch'(V0, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--applyTransforms'(V0, V1, V2) -> ('un--transLoop'(V0, (1 + (1 + (1 + (1 + (1 + 0))))), V1, V2)).
'un--apply'(V0, V1) -> case V0 of [] -> {'Idris.Builtin.MkPair', 0, V1}; [E0 | E1] -> (fun (V2, V3) -> case ('un--tryApply'(V2, V1)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--apply'(V3, V1)) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V4) -> {'Idris.Builtin.MkPair', 1, V4} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addMatch'(V0, V1, V2) -> ('case--addMatch-9329'(V2, V1, V0, ('un--lookupMatch'(V0, V2)))).
