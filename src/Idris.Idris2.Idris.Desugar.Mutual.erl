-module('Idris.Idris2.Idris.Desugar.Mutual').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7405-576--in--un--mkRecType'/9,
  'un--splitMutual'/1,
  'un--getDecl'/2
]).
'nested--7405-576--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> {'Idris.Idris.Syntax.PType', V6}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> {'Idris.Idris.Syntax.PPi', V6, V13, V15, {'Idris.Prelude.Types.Just', V11}, V16, ('nested--7405-576--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V10))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--splitMutual'(V0) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V1) -> ('un--getDecl'(1, V1)) end, V0)), ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V2) -> ('un--getDecl'(2, V2)) end, V0))}.
'un--getDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PImplementation', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PImplementation', V2, V3, V4, V0, V6, V7, V8, V9, V10, V11, V12}} end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); {'Idris.Idris.Syntax.PNamespace', E87, E88, E89} -> (fun (V13, V14, V15) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PNamespace', V13, V14, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V16) -> ('un--getDecl'(V0, V16)) end, V15))}} end(E87, E88, E89)); _ -> case V0 of 1 -> case V1 of {'Idris.Idris.Syntax.PClaim', E6, E7, E8, E9, E10} -> (fun (V17, V18, V19, V20, V21) -> {'Idris.Prelude.Types.Just', V1} end(E6, E7, E8, E9, E10)); {'Idris.Idris.Syntax.PData', E11, E12, E13, E14} -> (fun (V22, V23, V24, V25) -> case V25 of {'Idris.Idris.Syntax.MkPData', E15, E16, E17, E18, E19} -> (fun (V26, V27, V28, V29, V30) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V22, V23, V24, {'Idris.Idris.Syntax.MkPLater', V26, V27, V28}}} end(E15, E16, E17, E18, E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PInterface', E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Prelude.Types.Just', V1} end(E20, E21, E22, E23, E24, E25, E26, E27, E28)); {'Idris.Idris.Syntax.PRecord', E29, E30, E31, E32, E33, E34, E35} -> (fun (V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V40, V41, V42, {'Idris.Idris.Syntax.MkPLater', V40, V43, ('nested--7405-576--in--un--mkRecType'(V45, V46, V44, V43, V42, V41, V40, V1, V44))}}} end(E29, E30, E31, E32, E33, E34, E35)); {'Idris.Idris.Syntax.PFixity', E36, E37, E38, E39} -> (fun (V47, V48, V49, V50) -> {'Idris.Prelude.Types.Just', V1} end(E36, E37, E38, E39)); {'Idris.Idris.Syntax.PDirective', E40, E41} -> (fun (V51, V52) -> {'Idris.Prelude.Types.Just', V1} end(E40, E41)); _ -> {'Idris.Prelude.Types.Nothing'} end; 2 -> case V1 of {'Idris.Idris.Syntax.PClaim', E42, E43, E44, E45, E46} -> (fun (V53, V54, V55, V56, V57) -> {'Idris.Prelude.Types.Nothing'} end(E42, E43, E44, E45, E46)); {'Idris.Idris.Syntax.PData', E47, E48, E49, E50} -> (fun (V58, V59, V60, V61) -> case V61 of {'Idris.Idris.Syntax.MkPLater', E51, E52, E53} -> (fun (V62, V63, V64) -> {'Idris.Prelude.Types.Just', V1} end(E51, E52, E53)); _ -> {'Idris.Prelude.Types.Just', V1} end end(E47, E48, E49, E50)); {'Idris.Idris.Syntax.PInterface', E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73) -> {'Idris.Prelude.Types.Nothing'} end(E54, E55, E56, E57, E58, E59, E60, E61, E62)); {'Idris.Idris.Syntax.PRecord', E63, E64, E65, E66, E67, E68, E69} -> (fun (V74, V75, V76, V77, V78, V79, V80) -> {'Idris.Prelude.Types.Just', V1} end(E63, E64, E65, E66, E67, E68, E69)); {'Idris.Idris.Syntax.PFixity', E70, E71, E72, E73} -> (fun (V81, V82, V83, V84) -> {'Idris.Prelude.Types.Nothing'} end(E70, E71, E72, E73)); {'Idris.Idris.Syntax.PDirective', E74, E75} -> (fun (V85, V86) -> {'Idris.Prelude.Types.Nothing'} end(E74, E75)); _ -> {'Idris.Prelude.Types.Just', V1} end; _ -> case V1 of {'Idris.Idris.Syntax.PParameters', E0, E1, E2} -> (fun (V87, V88, V89) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PParameters', V87, V88, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V90) -> ('un--getDecl'(V0, V90)) end, V89))}} end(E0, E1, E2)); {'Idris.Idris.Syntax.PUsing', E3, E4, E5} -> (fun (V91, V92, V93) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PUsing', V91, V92, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V94) -> ('un--getDecl'(V0, V94)) end, V93))}} end(E3, E4, E5)); _ -> case V0 of 0 -> {'Idris.Prelude.Types.Just', V1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
