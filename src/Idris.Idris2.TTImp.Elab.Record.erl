-module('Idris.Idris2.TTImp.Elab.Record').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9524-19079--in--un--vloc'/12,
  'nested--9524-19080--in--un--mkClause'/13,
  'nested--8898-18551--in--un--mkArgs'/12,
  'nested--8599-18239--in--un--getExpNames'/5,
  'un--toRHS\x{27}'/2,
  'un--toRHS'/2,
  'un--toLHS\x{27}'/2,
  'un--toLHS'/2,
  'un--replace'/3,
  'un--recUpdate'/13,
  'un--needType'/1,
  'un--getSides'/7,
  'un--getRecordType'/2,
  'un--getAllSides'/8,
  'un--genFieldName'/3,
  'un--findPath'/8,
  'un--findFields'/4,
  'un--findConName'/3,
  'un--checkUpdate'/14,
  'un--applyImp'/2
]).
'nested--9524-19079--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V6)).
'nested--9524-19080--in--un--mkClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.TTImp.TTImp.PatClause', ('nested--9524-19079--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)), ('un--toLHS'(('nested--9524-19079--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)), V12)), ('un--toRHS'(('nested--9524-19079--in--un--vloc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)), V12))}.
'nested--8898-18551--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V13, V14) -> fun (V15) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V18, V19) -> begin (V20 = ('un--genFieldName'(V9, V16, V15))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = (('nested--8898-18551--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14))(V15))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V27 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V22}}} end, fun () -> fun (V26) -> {'Idris.TTImp.TTImp.Implicit', V8, 0} end end, V18))), {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V16, {'Idris.TTImp.Elab.Record.Field', V18, V22, V27}} | V25]} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8599-18239--in--un--getExpNames'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> begin (V16 = begin (V13 = (((V8(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 0}))))(V4))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> ('nested--8599-18239--in--un--getExpNames'(V0, V1, V2, V15, V4)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> begin (V19 = case V11 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> {'Idris.Prelude.Types.Just', V6} end), begin (V20 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, V12))(V4))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name':'un--nameRoot'(V6)), {'Idris.Builtin.MkPair', V19, ('un--getRecordType'({'Idris.Core.Env.Nil'}, V22))}} | V18]} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'un--toRHS\x{27}'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Record.Field', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Builtin.MkPair', V2, V4} end(E0, E1, E2)); {'Idris.TTImp.Elab.Record.Constr', E3, E4, E5} -> (fun (V5, V6, V7) -> begin (V9 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('un--toRHS\x{27}'(V0, ('Idris.Idris2.Builtin':'un--snd'(V8)))) end, V7))), {'Idris.Builtin.MkPair', V5, ('un--applyImp'({'Idris.TTImp.TTImp.IVar', V0, V6}, V9))} end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toRHS'(V0, V1) -> ('Idris.Idris2.Builtin':'un--snd'(('un--toRHS\x{27}'(V0, V1)))).
'un--toLHS\x{27}'(V0, V1) -> case V1 of {'Idris.TTImp.Elab.Record.Field', E0, E1, E2} -> (fun (V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Just', E3} -> (fun (V5) -> {'Idris.Builtin.MkPair', V2, {'Idris.TTImp.TTImp.IAs', V0, {'Idris.Core.FC.EmptyFC'}, 1, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V3}}, {'Idris.TTImp.TTImp.Implicit', V0, 1}}} end(E3)); _ -> {'Idris.Builtin.MkPair', V2, {'Idris.TTImp.TTImp.IBindVar', {'Idris.Core.FC.EmptyFC'}, V3}} end end(E0, E1, E2)); {'Idris.TTImp.Elab.Record.Constr', E4, E5, E6} -> (fun (V6, V7, V8) -> begin (V10 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('un--toLHS\x{27}'(V0, ('Idris.Idris2.Builtin':'un--snd'(V9)))) end, V8))), {'Idris.Builtin.MkPair', V6, ('un--applyImp'({'Idris.TTImp.TTImp.IVar', V0, V7}, V10))} end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toLHS'(V0, V1) -> ('Idris.Idris2.Builtin':'un--snd'(('un--toLHS\x{27}'(V0, V1)))).
'un--replace'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, V5)) of 1 -> [{'Idris.Builtin.MkPair', V0, V1} | V4]; 0 -> [{'Idris.Builtin.MkPair', V5, V6} | ('un--replace'(V0, V1, V4))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--recUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V17 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V11))(V12))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> case ('un--getRecordType'(V8, V19)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V20) -> begin (V21 = ('un--genFieldName'(V2, <<"__fld"/utf8>>, V12))), case V21 of {'Idris.Prelude.Types.Left', E5} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V23) -> begin (V24 = ('un--getAllSides'(V1, V2, V6, V9, V20, V10, {'Idris.TTImp.Elab.Record.Field', {'Idris.Prelude.Types.Nothing'}, V23, {'Idris.TTImp.TTImp.IVar', ('nested--9524-19079--in--un--vloc'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V23}}}}, V12))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', ('nested--9524-19079--in--un--vloc'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), V10, {'Idris.TTImp.TTImp.Implicit', ('nested--9524-19079--in--un--vloc'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)), 0}, [('nested--9524-19080--in--un--mkClause'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V26)) | []]}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.RecordTypeNeeded', V0, V6, V8}, V12)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--needType'(V0) -> case V0 of {'Idris.Core.Core.RecordTypeNeeded', E0, E1, E2} -> (fun (V1, V2, V3) -> 1 end(E0, E1, E2)); {'Idris.Core.Core.InType', E3, E4, E5} -> (fun (V4, V5, V6) -> ('un--needType'(V6)) end(E3, E4, E5)); {'Idris.Core.Core.InCon', E6, E7, E8} -> (fun (V7, V8, V9) -> ('un--needType'(V9)) end(E6, E7, E8)); {'Idris.Core.Core.InLHS', E9, E10, E11} -> (fun (V10, V11, V12) -> ('un--needType'(V12)) end(E9, E10, E11)); {'Idris.Core.Core.InRHS', E12, E13, E14} -> (fun (V13, V14, V15) -> ('un--needType'(V15)) end(E12, E13, E14)); {'Idris.Core.Core.WhenUnifying', E15, E16, E17, E18, E19, E20, E21} -> (fun (V16, V17, V18, V19, V20, V21, V22) -> ('un--needType'(V22)) end(E15, E16, E17, E18, E19, E20, E21)); _ -> 0 end.
'un--getSides'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V7, V8) -> ('un--findPath'(V0, V1, V2, V7, V7, {'Idris.Prelude.Types.Just', V4}, fun (V9) -> V8 end, V6)) end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E2, E3} -> (fun (V10, V11) -> ('un--findPath'(V0, V1, V2, V10, V10, {'Idris.Prelude.Types.Just', V4}, fun (V12) -> ('Idris.Idris2.TTImp.TTImp':'un--apply'(V11, [{'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V12}}} | []])) end, V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRecordType'(V0, V1) -> case V1 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Just', V3} end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getAllSides'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V3 of [] -> {'Idris.Prelude.Types.Right', V6}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = (('un--getSides'(V0, V1, V2, V8, V4, V5, V6))(V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('un--getAllSides'(V0, V1, V2, V9, V4, V5, V12, V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genFieldName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V20 = begin (V19 = ('erlang':'put'(V0, case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Core.UnifyState.MkUState', V7, V8, V9, V10, V11, V12, V13, V14, ((V15 + 1) rem 9223372036854775808), V16, V17, V18} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E14} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V6 of {'Idris.Core.UnifyState.MkUState', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V31 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findPath'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V3 of [] -> fun (V8) -> case V7 of {'Idris.TTImp.Elab.Record.Field', E0, E1, E2} -> (fun (V9, V10, V11) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Record.Field', V9, V10, (V6(V10))}} end(E0, E1, E2)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.IncompatibleFieldUpdate', V2, V4}, V8)) end end; [E3 | E4] -> (fun (V12, V13) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V7 of {'Idris.TTImp.Elab.Record.Field', E33, E34, E35} -> (fun (V14, V15, V16) -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordField', V2, V12, {'Idris.Prelude.Types.Nothing'}}, V17)) end end(E33, E34, E35)); _ -> fun (V18) -> case V7 of {'Idris.TTImp.Elab.Record.Constr', E19, E20, E21} -> (fun (V19, V20, V21) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V24, V25)) end end}, V12, V21)) of {'Idris.Prelude.Types.Just', E22} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E23} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V30) -> begin (V31 = ('un--findFields'(V0, V30, V20, V18))), case V31 of {'Idris.Prelude.Types.Left', E25} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Just', E27} -> (fun (V34) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V37, V38)) end end}, V12, V34)) of {'Idris.Prelude.Types.Just', E28} -> (fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V40, V41) -> begin (V42 = (('un--findPath'(V0, V1, V2, V13, V4, V41, V6, V26))(V18))), case V42 of {'Idris.Prelude.Types.Left', E31} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Record.Constr', V19, V20, ('un--replace'(V12, V44, V21))}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordField', V2, V12, V5}, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Record.Constr', V19, V20, V21}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordField', V2, V12, V5}, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E36} -> (fun (V45) -> case V7 of {'Idris.TTImp.Elab.Record.Field', E51, E52, E53} -> (fun (V46, V47, V48) -> fun (V49) -> begin (V51 = begin (V50 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E54} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V53) -> begin (V54 = ('un--findConName'(V53, V45, V49))), case V54 of {'Idris.Prelude.Types.Left', E56} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V56) -> case V56 of {'Idris.Prelude.Types.Just', E58} -> (fun (V57) -> begin (V58 = ('un--findFields'(V0, V53, V57, V49))), case V58 of {'Idris.Prelude.Types.Left', E59} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V60) -> case V60 of {'Idris.Prelude.Types.Just', E61} -> (fun (V61) -> begin (V62 = (('nested--8898-18551--in--un--mkArgs'(V12, V13, V45, V48, V47, V46, V6, V4, V2, V1, V0, V61))(V49))), case V62 of {'Idris.Prelude.Types.Left', E62} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V64) -> begin (V65 = {'Idris.TTImp.Elab.Record.Constr', V46, V57, V64}), (('un--findPath'(V0, V1, V2, [V12 | V13], V4, {'Idris.Prelude.Types.Just', V45}, V6, V65))(V49)) end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordType', V2, V45}, V49)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordType', V2, V45}, V49)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52, E53)); _ -> fun (V66) -> case V7 of {'Idris.TTImp.Elab.Record.Constr', E37, E38, E39} -> (fun (V67, V68, V69) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V72, V73)) end end}, V12, V69)) of {'Idris.Prelude.Types.Just', E40} -> (fun (V74) -> begin (V76 = begin (V75 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E41} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V78) -> begin (V79 = ('un--findFields'(V0, V78, V68, V66))), case V79 of {'Idris.Prelude.Types.Left', E43} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V81) -> case V81 of {'Idris.Prelude.Types.Just', E45} -> (fun (V82) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V85, V86)) end end}, V12, V82)) of {'Idris.Prelude.Types.Just', E46} -> (fun (V87) -> case V87 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V88, V89) -> begin (V90 = (('un--findPath'(V0, V1, V2, V13, V4, V89, V6, V74))(V66))), case V90 of {'Idris.Prelude.Types.Left', E49} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Record.Constr', V67, V68, ('un--replace'(V12, V92, V69))}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordField', V2, V12, V5}, V66)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Record.Constr', V67, V68, V69}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordField', V2, V12, V5}, V66)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> fun (V93) -> case V7 of {'Idris.TTImp.Elab.Record.Constr', E5, E6, E7} -> (fun (V94, V95, V96) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V99, V100)) end end}, V12, V96)) of {'Idris.Prelude.Types.Just', E8} -> (fun (V101) -> begin (V103 = begin (V102 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V102} end), case V103 of {'Idris.Prelude.Types.Left', E9} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V105) -> begin (V106 = ('un--findFields'(V0, V105, V95, V93))), case V106 of {'Idris.Prelude.Types.Left', E11} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V108) -> case V108 of {'Idris.Prelude.Types.Just', E13} -> (fun (V109) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V112, V113)) end end}, V12, V109)) of {'Idris.Prelude.Types.Just', E14} -> (fun (V114) -> case V114 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V115, V116) -> begin (V117 = (('un--findPath'(V0, V1, V2, V13, V4, V116, V6, V101))(V93))), case V117 of {'Idris.Prelude.Types.Left', E17} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V119) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Record.Constr', V94, V95, ('un--replace'(V12, V119, V96))}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordField', V2, V12, V5}, V93)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Elab.Record.Constr', V94, V95, V96}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotRecordField', V2, V12, V5}, V93)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findFields'(V0, V1, V2, V3) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V2, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V34 of {'Idris.Prelude.Types.Left', E30} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E32} -> (fun (V37) -> begin (V38 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V1, {'Idris.Core.Env.Nil'}, V37))(V3))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = ('nested--8599-18239--in--un--getExpNames'(V2, V1, V0, V40, V3))), case V41 of {'Idris.Prelude.Types.Left', E35} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V43}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findConName'(V0, V1, V2) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V1, case V0 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V33 of {'Idris.Prelude.Types.Left', E30} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E32} -> (fun (V36) -> case V36 of {'Idris.Core.Context.Context.TCon', E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44) -> case V43 of [E41 | E42] -> (fun (V45, V46) -> case V46 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V45}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E41, E42)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E33, E34, E35, E36, E37, E38, E39, E40)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E32)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V20 = case V12 of {'Idris.Prelude.Types.Just', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Right', V14} end(E4)); _ -> begin (V15 = ('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, {'Idris.Prelude.Types.Nothing'}, V13))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> {'Idris.Prelude.Types.Right', V19} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V20 of {'Idris.Prelude.Types.Left', E5} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V22) -> begin (V30 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E7, E8, E9, E10, E11, E12} -> (fun (V23, V24, V25, V26, V27, V28) -> case V23 of {'Idris.TTImp.Elab.Check.InLHS', E13} -> (fun (V29) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E13)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V9, V5, V8, {'Idris.Prelude.Types.Just', V22}, fun (V31) -> ('un--needType'(V31)) end, 2, fun (V32) -> fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V30, 0, V33))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V22))(V33))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> begin (V40 = case V32 of 1 -> ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V39)); 0 -> V22; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V44 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.record"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V32)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" record type "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V42, V43)) end end}, V11)))))) end, V8, V40, V33))), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V47 = ('un--recUpdate'(V0, V1, V3, V4, V5, V6, V9, V7, V8, V10, V11, V40, V33))), case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> begin (V53 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.record"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Record update: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V51, V52)) end end}, V49)))) end, V33))), case V53 of {'Idris.Prelude.Types.Left', E22} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V55) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V49, V12, V33)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13)) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--applyImp'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--applyImp'({'Idris.TTImp.TTImp.IApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V0)), V0, V5}, V3)) end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V6) -> ('un--applyImp'({'Idris.TTImp.TTImp.INamedApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V0)), V0, V6, V5}, V3)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
