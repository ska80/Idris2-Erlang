-module('Idris.Idris2.Core.Context.Context').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--show_Show_SizeChange'/1,
  'dn--un--show_Show_SCCall'/1,
  'dn--un--show_Show_DefFlag'/1,
  'dn--un--show_Show_Def'/1,
  'dn--un--show_Show_Clause'/1,
  'dn--un--showPrec_Show_SizeChange'/2,
  'dn--un--showPrec_Show_SCCall'/2,
  'dn--un--showPrec_Show_DefFlag'/2,
  'dn--un--showPrec_Show_Def'/2,
  'dn--un--showPrec_Show_Clause'/2,
  'dn--un--__Impl_Show_SizeChange'/0,
  'dn--un--__Impl_Show_SCCall'/0,
  'dn--un--__Impl_Show_DefFlag'/0,
  'dn--un--__Impl_Show_Def'/0,
  'dn--un--__Impl_Show_Clause'/0,
  'dn--un--__Impl_Eq_SizeChange'/0,
  'dn--un--__Impl_Eq_SCCall'/0,
  'dn--un--__Impl_Eq_DefFlag'/0,
  'dn--un--==_Eq_SizeChange'/2,
  'dn--un--==_Eq_SCCall'/2,
  'dn--un--==_Eq_DefFlag'/2,
  'dn--un--/=_Eq_SizeChange'/2,
  'dn--un--/=_Eq_SCCall'/2,
  'dn--un--/=_Eq_DefFlag'/2,
  'un--refersToRuntime'/1,
  'un--refersTo'/1,
  'un--holeInit'/1,
  'un--gDefKindedName'/1,
  'un--findSetTotal'/1,
  'un--defaultPI'/0,
  'un--defaultFlags'/0,
  'un--defNameType'/1
]).
'dn--un--show_Show_SizeChange'(V0) -> case V0 of 0 -> <<"Smaller"/utf8>>; 1 -> <<"Same"/utf8>>; 2 -> <<"Unknown"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_SCCall'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.Core.Context.Context.MkSCCall', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V6, V7)) end end}, {'Idris.Prelude.Show.MkShow', fun (V8) -> ('dn--un--show_Show_SizeChange'(V8)) end, fun (V9) -> fun (V10) -> ('dn--un--showPrec_Show_SizeChange'(V9, V10)) end end}}, V4)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V14, V15)) end end}, {'Idris.Prelude.Show.MkShow', fun (V16) -> ('dn--un--show_Show_SizeChange'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show_SizeChange'(V17, V18)) end end}}, V11, V12)) end end}, V3)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V23, V24)) end end}, {'Idris.Prelude.Show.MkShow', fun (V25) -> ('dn--un--show_Show_SizeChange'(V25)) end, fun (V26) -> fun (V27) -> ('dn--un--showPrec_Show_SizeChange'(V26, V27)) end end}}, V21)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V31, V32)) end end}, {'Idris.Prelude.Show.MkShow', fun (V33) -> ('dn--un--show_Show_SizeChange'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show_SizeChange'(V34, V35)) end end}}, V28, V29)) end end}, V19, V20)) end end}, case V0 of {'Idris.Core.Context.Context.MkSCCall', E2, E3} -> (fun (V36, V37) -> V37 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'dn--un--show_Show_DefFlag'(V0) -> case V0 of {'Idris.Core.Context.Context.Inline'} -> (fun () -> <<"inline"/utf8>> end()); {'Idris.Core.Context.Context.Invertible'} -> (fun () -> <<"invertible"/utf8>> end()); {'Idris.Core.Context.Context.Overloadable'} -> (fun () -> <<"overloadable"/utf8>> end()); {'Idris.Core.Context.Context.TCInline'} -> (fun () -> <<"tcinline"/utf8>> end()); {'Idris.Core.Context.Context.SetTotal', E0} -> (fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V1)) end(E0)); {'Idris.Core.Context.Context.BlockedHint'} -> (fun () -> <<"blockedhint"/utf8>> end()); {'Idris.Core.Context.Context.Macro'} -> (fun () -> <<"macro"/utf8>> end()); {'Idris.Core.Context.Context.PartialEval', E1} -> (fun (V2) -> <<"partialeval"/utf8>> end(E1)); {'Idris.Core.Context.Context.AllGuarded'} -> (fun () -> <<"allguarded"/utf8>> end()); {'Idris.Core.Context.Context.ConType', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"contype "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_ConInfo'(V3)))) end(E2)); {'Idris.Core.Context.Context.Identity', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"identity "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4)))) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Def'(V0) -> case V0 of {'Idris.Core.Context.Context.None'} -> (fun () -> <<"undefined"/utf8>> end()); {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V7, V8)) end end}, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<";\x{a}Compile time tree: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Run time tree: "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V4)))))))))) end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.DCon', E5, E6, E7} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DataCon "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V10)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Bool'(V14, V15)) end end}, {'Idris.Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V17, V18)) end end}}, V12)), <<")"/utf8>>)))) end end, V11)))))))))) end(E5, E6, E7)); {'Idris.Core.Context.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TyCon "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" params: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V28, V29)) end end}, V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" constructors: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V31, V32)) end end}, V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" mutual with: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V34, V35)) end end}, V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" detaggable by: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V38, V39)) end end}, V36)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V43, V44)) end end}, V40, V41)) end end}, V26)))))))))))))))))))))))) end(E8, E9, E10, E11, E12, E13, E14, E15)); {'Idris.Core.Context.Context.ExternDef', E16} -> (fun (V45) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<external def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V45)), <<">"/utf8>>)))) end(E16)); {'Idris.Core.Context.Context.ForeignDef', E17, E18} -> (fun (V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<foreign def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V49, V50)) end end}, V47)), <<">"/utf8>>)))))))) end(E17, E18)); {'Idris.Core.Context.Context.Builtin', E19, E20} -> (fun (V51, V52) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<builtin with arith "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V51)), <<">"/utf8>>)))) end(E19, E20)); {'Idris.Core.Context.Context.Hole', E21, E22} -> (fun (V53, V54) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Hole"/utf8>>, case case V54 of {'Idris.Core.Context.Context.MkHoleFlags', E23, E24} -> (fun (V55, V56) -> V55 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<" [impl]"/utf8>>; 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E21, E22)); {'Idris.Core.Context.Context.BySearch', E25, E26, E27} -> (fun (V57, V58, V59) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)))) end(E25, E26, E27)); {'Idris.Core.Context.Context.Guess', E28, E29, E30} -> (fun (V60, V61, V62) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Guess "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V60)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" when "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V64, V65)) end end}, V62)))))))) end(E28, E29, E30)); {'Idris.Core.Context.Context.ImpBind'} -> (fun () -> <<"Bound name"/utf8>> end()); {'Idris.Core.Context.Context.Delayed'} -> (fun () -> <<"Delayed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Clause'(V0) -> case V0 of {'Idris.Core.Context.Context.MkClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V6, V7)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V4)))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_SizeChange'(V0, V1) -> ('dn--un--show_Show_SizeChange'(V1)).
'dn--un--showPrec_Show_SCCall'(V0, V1) -> ('dn--un--show_Show_SCCall'(V1)).
'dn--un--showPrec_Show_DefFlag'(V0, V1) -> ('dn--un--show_Show_DefFlag'(V1)).
'dn--un--showPrec_Show_Def'(V0, V1) -> ('dn--un--show_Show_Def'(V1)).
'dn--un--showPrec_Show_Clause'(V0, V1) -> ('dn--un--show_Show_Clause'(V1)).
'dn--un--__Impl_Show_SizeChange'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SizeChange'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SizeChange'(V1, V2)) end end}.
'dn--un--__Impl_Show_SCCall'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SCCall'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SCCall'(V1, V2)) end end}.
'dn--un--__Impl_Show_DefFlag'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DefFlag'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DefFlag'(V1, V2)) end end}.
'dn--un--__Impl_Show_Def'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Def'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Def'(V1, V2)) end end}.
'dn--un--__Impl_Show_Clause'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Clause'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Clause'(V1, V2)) end end}.
'dn--un--__Impl_Eq_SizeChange'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SizeChange'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SizeChange'(V2, V3)) end end}.
'dn--un--__Impl_Eq_SCCall'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SCCall'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SCCall'(V2, V3)) end end}.
'dn--un--__Impl_Eq_DefFlag'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DefFlag'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DefFlag'(V2, V3)) end end}.
'dn--un--==_Eq_SizeChange'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_SCCall'(V0, V1) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(case V0 of {'Idris.Core.Context.Context.MkSCCall', E4, E5} -> (fun (V2, V3) -> V2 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.Context.MkSCCall', E6, E7} -> (fun (V4, V5) -> V4 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V12, V13)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_SizeChange'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_SizeChange'(V16, V17)) end end}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V22, V23)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('dn--un--==_Eq_SizeChange'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('dn--un--/=_Eq_SizeChange'(V26, V27)) end end}, V18, V19)) end end}, V6, V7)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V34, V35)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('dn--un--==_Eq_SizeChange'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--/=_Eq_SizeChange'(V38, V39)) end end}, V30, V31)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V44, V45)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> ('dn--un--==_Eq_SizeChange'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--/=_Eq_SizeChange'(V48, V49)) end end}, V40, V41)) end end}, V28, V29)) end end}, case V0 of {'Idris.Core.Context.Context.MkSCCall', E0, E1} -> (fun (V50, V51) -> V51 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.Context.MkSCCall', E2, E3} -> (fun (V52, V53) -> V53 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_DefFlag'(V0, V1) -> case V0 of {'Idris.Core.Context.Context.Inline'} -> (fun () -> case V1 of {'Idris.Core.Context.Context.Inline'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Context.Invertible'} -> (fun () -> case V1 of {'Idris.Core.Context.Context.Invertible'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Context.Overloadable'} -> (fun () -> case V1 of {'Idris.Core.Context.Context.Overloadable'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Context.TCInline'} -> (fun () -> case V1 of {'Idris.Core.Context.Context.TCInline'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Context.SetTotal', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Context.Context.SetTotal', E1} -> (fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_TotalReq'(V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.Core.Context.Context.BlockedHint'} -> (fun () -> case V1 of {'Idris.Core.Context.Context.BlockedHint'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Context.Macro'} -> (fun () -> case V1 of {'Idris.Core.Context.Context.Macro'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Context.PartialEval', E2} -> (fun (V4) -> case V1 of {'Idris.Core.Context.Context.PartialEval', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V24, V25)) end end}, V16, V17)) end end}, V4, V5)) end(E3)); _ -> 0 end end(E2)); {'Idris.Core.Context.Context.AllGuarded'} -> (fun () -> case V1 of {'Idris.Core.Context.Context.AllGuarded'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Context.ConType', E4} -> (fun (V26) -> case V1 of {'Idris.Core.Context.Context.ConType', E5} -> (fun (V27) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--==_Eq_ConInfo'(V26, V27)) end(E5)); _ -> 0 end end(E4)); {'Idris.Core.Context.Context.Identity', E6} -> (fun (V28) -> case V1 of {'Idris.Core.Context.Context.Identity', E7} -> (fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V28, V29)) end(E7)); _ -> 0 end end(E6)); _ -> 0 end.
'dn--un--/=_Eq_SizeChange'(V0, V1) -> case ('dn--un--==_Eq_SizeChange'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_SCCall'(V0, V1) -> case ('dn--un--==_Eq_SCCall'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_DefFlag'(V0, V1) -> case ('dn--un--==_Eq_DefFlag'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--refersToRuntime'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V15 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--refersTo'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--holeInit'(V0) -> {'Idris.Core.Context.Context.MkHoleFlags', V0, 0}.
'un--gDefKindedName'(V0) -> begin (V21 = case V0 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V2 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Core.TT.MkKindedName', ('un--defNameType'(case V0 of {'Idris.Core.Context.Context.MkGlobalDef', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V39 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V21, V21} end.
'un--findSetTotal'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Core.Context.Context.SetTotal', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--findSetTotal'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--defaultPI'() -> {'Idris.Core.Context.Context.MkPMDefInfo', {'Idris.Core.Context.Context.NotHole'}, 0, 0}.
'un--defaultFlags'() -> {'Idris.Core.Context.Context.MkTypeFlags', 0, 0}.
'un--defNameType'(V0) -> case V0 of {'Idris.Core.Context.Context.None'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Func'}} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.ExternDef', E5} -> (fun (V6) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Func'}} end(E5)); {'Idris.Core.Context.Context.ForeignDef', E6, E7} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Func'}} end(E6, E7)); {'Idris.Core.Context.Context.Builtin', E8, E9} -> (fun (V9, V10) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Func'}} end(E8, E9)); {'Idris.Core.Context.Context.DCon', E10, E11, E12} -> (fun (V11, V12, V13) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.DataCon', V11, V12}} end(E10, E11, E12)); {'Idris.Core.Context.Context.TCon', E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TyCon', V14, V15}} end(E13, E14, E15, E16, E17, E18, E19, E20)); {'Idris.Core.Context.Context.Hole', E21, E22} -> (fun (V22, V23) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Func'}} end(E21, E22)); {'Idris.Core.Context.Context.BySearch', E23, E24, E25} -> (fun (V24, V25, V26) -> {'Idris.Prelude.Types.Nothing'} end(E23, E24, E25)); {'Idris.Core.Context.Context.Guess', E26, E27, E28} -> (fun (V27, V28, V29) -> {'Idris.Prelude.Types.Nothing'} end(E26, E27, E28)); {'Idris.Core.Context.Context.ImpBind'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bound'}} end()); {'Idris.Core.Context.Context.Delayed'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
