-module('Idris.Idris2.Idris.Main').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'start'/0,
  'main'/1,
  'run'/1,
  'nested--3872-2211--in--un--toExitCode'/1,
  'un--tryMainWithCodegens'/2,
  'un--softExitDecoder'/0,
  'un--exports'/0,
  'un--erlRun'/1,
  'un--erlMain'/1,
  'un--erlInitStart'/1,
  'un--erlEscriptMain'/1,
  'un--codegens'/0
]).
'start'() -> (fun () -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'(fun (V0) -> ('un--erlInitStart'(V0)) end)) end()).
'main'(V2) -> (fun (V1) -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'((fun (V0) -> ('un--erlEscriptMain'(V0)) end(V1)))) end(V2)).
'run'(V2) -> (fun (V1) -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'((fun (V0) -> ('un--erlRun'(V0)) end(V1)))) end(V2)).
'nested--3872-2211--in--un--toExitCode'(V0) -> case ('Idris.Idris2.Data.So':'un--choose'(case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V0, 0)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Left', E0} -> (fun (V1) -> {'Idris.Erlang.System.ExitFailure', V0, V1} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V2) -> {'Idris.Erlang.System.ExitSuccess'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryMainWithCodegens'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, ('Idris.Idris2.Idris.Driver':'un--mainWithCodegens'(('un--codegens'()), V0))))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Right', 0} end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V31) -> case V31 of {E2, E3, E4} -> (fun (V32, V33, V34) -> case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Idris.Erlang.Types.ETErlTerm'}, ('un--softExitDecoder'()), V33)) of {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E5)); {'Idris.Prelude.Types.Left', E6} -> (fun (V36) -> {'Idris.Prelude.Types.Right', 0} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--softExitDecoder'() -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V2, V3, V4)) end end end end end, fun (V5) -> case V5 of {E0, E1} -> (fun (V6, V7) -> ('nested--3872-2211--in--un--toExitCode'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V7)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('Idris.Idris2.Erlang.Decode':'un--tuple2'(fun (V9) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, ('Idris.Idris2.Libraries.Utils.System':'un--softExitAtom'()), V9)) end, fun (V10) -> ('Idris.Idris2.Erlang.Decode':'un--integer'(V10)) end, V8)) end)).
'un--exports'() -> {'Idris.Erlang.IO.Combine', {'Idris.Erlang.IO.Combine', {'Idris.Erlang.IO.Fun', {'Idris.Erlang.Types.ETErlIOFun0', {'Idris.Erlang.Types.ETErlTypesCons', {'Idris.Builtin.MkPair', {'Idris.Erlang.Types.ETErlTerm'}, {'Idris.Erlang.Types.ETErlTypesNil'}}}}, <<"start"/utf8>>, fun () -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'(fun (V0) -> ('un--erlInitStart'(V0)) end)) end}, {'Idris.Erlang.IO.Fun', {'Idris.Erlang.Types.ETErlIOFun1', {'Idris.Erlang.Types.ETErlTypesCons', {'Idris.Builtin.MkPair', {'Idris.Erlang.Types.ETList', {'Idris.Erlang.Types.ETErlCharlist'}}, {'Idris.Erlang.Types.ETErlTypesCons', {'Idris.Builtin.MkPair', {'Idris.Erlang.Types.ETErlTerm'}, {'Idris.Erlang.Types.ETErlTypesNil'}}}}}}, <<"main"/utf8>>, fun (V2) -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'((fun (V1) -> ('un--erlEscriptMain'(V1)) end(V2)))) end}}, {'Idris.Erlang.IO.Fun', {'Idris.Erlang.Types.ETErlIOFun1', {'Idris.Erlang.Types.ETErlTypesCons', {'Idris.Builtin.MkPair', {'Idris.Erlang.Types.ETErlTerm'}, {'Idris.Erlang.Types.ETErlTypesCons', {'Idris.Builtin.MkPair', {'Idris.Erlang.Types.ETErlTerm'}, {'Idris.Erlang.Types.ETErlTypesNil'}}}}}}, <<"run"/utf8>>, fun (V4) -> ('Idris.Idris2.PrimIO':'un--unsafePerformIO'((fun (V3) -> ('un--erlRun'(V3)) end(V4)))) end}}.
'un--erlRun'(V0) -> begin (V10 = ('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> [] end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(fun (V1) -> ('Idris.Idris2.Erlang.Decode':'un--list'(fun (V2) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V2)) end, V1)) end, fun () -> fun (V3) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> case V5 of E0 -> (fun (V6) -> V6 end((fun (V7) -> ('unicode':'characters_to_binary'(V7)) end(E0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V4)) end, fun (V8) -> ('Idris.Idris2.Erlang.Decode':'un--list'(fun (V9) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V9)) end, V8)) end, V3)) end end)), V0))), fun (V11) -> begin (V12 = ('un--tryMainWithCodegens'(V10, V11))), case V12 of {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of 0 -> 'ok'; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> 'error' end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--erlMain'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V27) -> 0 end, fun (V28) -> ('erlang':'apply'('io', 'setopts', [[{'encoding', 'unicode'} | []] | []])) end, V26)) end, fun () -> fun (V29) -> begin (V30 = ('un--tryMainWithCodegens'(V0, V29))), case V30 of {'Idris.Prelude.Types.Right', E0} -> (fun (V31) -> case V31 of 0 -> 'ok'; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V32) -> (('Idris.Idris2.Erlang.System':'un--exitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V32))(V29)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end)).
'un--erlInitStart'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getArgs'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), case V28 of [E0 | E1] -> (fun (V29, V30) -> (('un--erlMain'(V30))(V0)) end(E0, E1)); _ -> {'error', 'invalid_args'} end end.
'un--erlEscriptMain'(V0) -> begin (V4 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> case V1 of E0 -> (fun (V2) -> V2 end((fun (V3) -> ('unicode':'characters_to_binary'(V3)) end(E0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0))), ('un--erlMain'(V4)) end.
'un--codegens'() -> [{'Idris.Builtin.MkPair', <<"erlang"/utf8>>, ('Idris.Idris2.Compiler.Erlang.Erlang':'un--codegenErlang'())} | []].
