-module('Idris.Idris2.Libraries.Data.SortedMap').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6030-3549--in--un--treeToList\x{27}'/2,
  'nested--7254-4795--in--un--inserted'/3,
  'dn--un--traverse_Traversable_(SortedMap $k)'/3,
  'dn--un--toList_Foldable_(SortedMap $k)'/1,
  'dn--un--show_Show_((SortedMap $k) $v)'/2,
  'dn--un--showPrec_Show_((SortedMap $k) $v)'/3,
  'dn--un--null_Foldable_(SortedMap $k)'/1,
  'dn--un--neutral_Monoid_((SortedMap $k) $v)'/1,
  'dn--un--map_Functor_(SortedMap $k)'/2,
  'dn--un--foldr_Foldable_(SortedMap $k)'/3,
  'dn--un--foldl_Foldable_(SortedMap $k)'/3,
  'dn--un--foldlM_Foldable_(SortedMap $k)'/4,
  'dn--un--foldMap_Foldable_(SortedMap $k)'/3,
  'dn--un--__Impl_Traversable_(SortedMap $k)'/0,
  'dn--un--__Impl_Show_((SortedMap $k) $v)'/1,
  'dn--un--__Impl_Semigroup_((SortedMap $k) $v)'/3,
  'dn--un--__Impl_Monoid_((SortedMap $k) $v)'/1,
  'dn--un--__Impl_Functor_(SortedMap $k)'/4,
  'dn--un--__Impl_Foldable_(SortedMap $k)'/0,
  'dn--un--<+>_Semigroup_((SortedMap $k) $v)'/3,
  'un--values'/1,
  'un--treeTraverse'/3,
  'un--treeToList'/1,
  'un--treeMap'/2,
  'un--treeLookup'/3,
  'un--treeInsert\x{27}'/4,
  'un--treeInsert'/4,
  'un--treeDelete'/4,
  'un--toList'/1,
  'un--singleton'/3,
  'un--mergeWith'/3,
  'un--mergeLeft'/2,
  'un--merge3'/5,
  'un--merge2'/5,
  'un--merge1'/5,
  'un--merge'/3,
  'un--lookup'/2,
  'un--keys'/1,
  'un--insertFrom'/3,
  'un--insert'/3,
  'un--fromList'/2,
  'un--empty'/1,
  'un--delete'/2,
  'un--branch7'/13,
  'un--branch6'/11,
  'un--branch5'/9,
  'un--branch4'/7,
  'un--adjust'/3
]).
'nested--6030-3549--in--un--treeToList\x{27}'(V0, V1) -> case V1 of {'Idris.Libraries.Data.SortedMap.Leaf', E0, E1} -> (fun (V2, V3) -> (V0({'Idris.Builtin.MkPair', V2, V3})) end(E0, E1)); {'Idris.Libraries.Data.SortedMap.Branch2', E2, E3, E4} -> (fun (V4, V5, V6) -> ('nested--6030-3549--in--un--treeToList\x{27}'(fun (V7) -> [V7 | ('nested--6030-3549--in--un--treeToList\x{27}'(V0, V6))] end, V4)) end(E2, E3, E4)); {'Idris.Libraries.Data.SortedMap.Branch3', E5, E6, E7, E8, E9} -> (fun (V8, V9, V10, V11, V12) -> ('nested--6030-3549--in--un--treeToList\x{27}'(fun (V13) -> [V13 | ('nested--6030-3549--in--un--treeToList\x{27}'(fun (V14) -> [V14 | ('nested--6030-3549--in--un--treeToList\x{27}'(V0, V12))] end, V10))] end, V8)) end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7254-4795--in--un--inserted'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--toList'(V0)), fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V7 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V6) -> V6 end end, fun () -> V2 end, ('un--lookup'(V4, V1))))(V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Idris.Builtin.MkPair', V4, V7})) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'dn--un--traverse_Traversable_(SortedMap $k)'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Data.SortedMap.Empty', E0} -> (fun (V3) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E1, E2, E3} -> (fun (V4, V5, V6) -> ((V5('erased'))({'Idris.Libraries.Data.SortedMap.Empty', V3})) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Libraries.Data.SortedMap.M', E4, E5, E6} -> (fun (V7, V8, V9) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V10, V11, V12) -> V10 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V13) -> {'Idris.Libraries.Data.SortedMap.M', V7, V8, V13} end, ('un--treeTraverse'(V0, V1, V9)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toList_Foldable_(SortedMap $k)'(V0) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--show_Show_((SortedMap $k) $v)'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fromList "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V2)) end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V3, V4)) end end}, ('un--toList'(V1)))))).
'dn--un--showPrec_Show_((SortedMap $k) $v)'(V0, V1, V2) -> ('dn--un--show_Show_((SortedMap $k) $v)'(V0, V2)).
'dn--un--null_Foldable_(SortedMap $k)'(V0) -> case V0 of {'Idris.Libraries.Data.SortedMap.Empty', E0} -> (fun (V1) -> fun () -> 1 end end(E0)); {'Idris.Libraries.Data.SortedMap.M', E1, E2, E3} -> (fun (V2, V3, V4) -> fun () -> 0 end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--neutral_Monoid_((SortedMap $k) $v)'(V0) -> ('un--empty'(('Idris.Idris2.Builtin':'un--fst'(V0)))).
'dn--un--map_Functor_(SortedMap $k)'(V0, V1) -> case V1 of {'Idris.Libraries.Data.SortedMap.Empty', E0} -> (fun (V2) -> {'Idris.Libraries.Data.SortedMap.Empty', V2} end(E0)); {'Idris.Libraries.Data.SortedMap.M', E1, E2, E3} -> (fun (V3, V4, V5) -> {'Idris.Libraries.Data.SortedMap.M', V3, V4, ('un--treeMap'(V0, V5))} end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldr_Foldable_(SortedMap $k)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V0, V1, ('un--values'(V2)))).
'dn--un--foldl_Foldable_(SortedMap $k)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V0, V1, ('un--values'(V2)))).
'dn--un--foldlM_Foldable_(SortedMap $k)'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_(SortedMap $k)'(fun (V4) -> fun (V5) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))(V2)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)).
'dn--un--foldMap_Foldable_(SortedMap $k)'(V0, V1, V2) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V5, V6) -> ((V5((V1(V3))))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--__Impl_Traversable_(SortedMap $k)'() -> {'Idris.Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_(SortedMap $k)'(V2, V3)) end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_(SortedMap $k)'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_(SortedMap $k)'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_(SortedMap $k)'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_(SortedMap $k)'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_(SortedMap $k)'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_(SortedMap $k)'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Show_((SortedMap $k) $v)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_((SortedMap $k) $v)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_((SortedMap $k) $v)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Semigroup_((SortedMap $k) $v)'(V0, V1, V2) -> ('dn--un--<+>_Semigroup_((SortedMap $k) $v)'(V0, V1, V2)).
'dn--un--__Impl_Monoid_((SortedMap $k) $v)'(V0) -> {'Idris.Prelude.Interfaces.MkMonoid', fun (V1) -> fun (V2) -> ('dn--un--<+>_Semigroup_((SortedMap $k) $v)'(('Idris.Idris2.Builtin':'un--snd'(V0)), V1, V2)) end end, ('dn--un--neutral_Monoid_((SortedMap $k) $v)'(V0))}.
'dn--un--__Impl_Functor_(SortedMap $k)'(V0, V1, V2, V3) -> ('dn--un--map_Functor_(SortedMap $k)'(V2, V3)).
'dn--un--__Impl_Foldable_(SortedMap $k)'() -> {'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_(SortedMap $k)'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_(SortedMap $k)'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_(SortedMap $k)'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_(SortedMap $k)'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_(SortedMap $k)'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_(SortedMap $k)'(V23, V24, V25)) end end end end end}.
'dn--un--<+>_Semigroup_((SortedMap $k) $v)'(V0, V1, V2) -> ('un--merge'(V0, V1, V2)).
'un--values'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Builtin':'un--snd'(V1)) end, ('un--toList'(V0)))).
'un--treeTraverse'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Data.SortedMap.Leaf', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E2, E3, E4} -> (fun (V5, V6, V7) -> V5 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V8) -> {'Idris.Libraries.Data.SortedMap.Leaf', V3, V8} end, (V1(V4)))) end(E0, E1)); {'Idris.Libraries.Data.SortedMap.Branch2', E5, E6, E7} -> (fun (V9, V10, V11) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E8, E9, E10} -> (fun (V12, V13, V14) -> ((((V14('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V15, V16, V17) -> ((((V17('erased'))('erased'))(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E14, E15, E16} -> (fun (V21, V22, V23) -> V21 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V24) -> fun (V25) -> fun (V26) -> {'Idris.Libraries.Data.SortedMap.Branch2', V24, V25, V26} end end end, ('un--treeTraverse'(V0, V1, V9))))))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E17, E18, E19} -> (fun (V18, V19, V20) -> ((V19('erased'))(V10)) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('un--treeTraverse'(V0, V1, V11)))) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7)); {'Idris.Libraries.Data.SortedMap.Branch3', E20, E21, E22, E23, E24} -> (fun (V27, V28, V29, V30, V31) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E25, E26, E27} -> (fun (V32, V33, V34) -> ((((V34('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V35, V36, V37) -> ((((V37('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E31, E32, E33} -> (fun (V41, V42, V43) -> ((((V43('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E34, E35, E36} -> (fun (V44, V45, V46) -> ((((V46('erased'))('erased'))(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E37, E38, E39} -> (fun (V50, V51, V52) -> V50 end(E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> {'Idris.Libraries.Data.SortedMap.Branch3', V53, V54, V55, V56, V57} end end end end end, ('un--treeTraverse'(V0, V1, V27))))))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E40, E41, E42} -> (fun (V47, V48, V49) -> ((V48('erased'))(V28)) end(E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('un--treeTraverse'(V0, V1, V29)))) end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E43, E44, E45} -> (fun (V38, V39, V40) -> ((V39('erased'))(V30)) end(E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('un--treeTraverse'(V0, V1, V31)))) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--treeToList'(V0) -> ('nested--6030-3549--in--un--treeToList\x{27}'(fun (V1) -> [V1 | []] end, V0)).
'un--treeMap'(V0, V1) -> case V1 of {'Idris.Libraries.Data.SortedMap.Leaf', E0, E1} -> (fun (V2, V3) -> {'Idris.Libraries.Data.SortedMap.Leaf', V2, (V0(V3))} end(E0, E1)); {'Idris.Libraries.Data.SortedMap.Branch2', E2, E3, E4} -> (fun (V4, V5, V6) -> {'Idris.Libraries.Data.SortedMap.Branch2', ('un--treeMap'(V0, V4)), V5, ('un--treeMap'(V0, V6))} end(E2, E3, E4)); {'Idris.Libraries.Data.SortedMap.Branch3', E5, E6, E7, E8, E9} -> (fun (V7, V8, V9, V10, V11) -> {'Idris.Libraries.Data.SortedMap.Branch3', ('un--treeMap'(V0, V7)), V8, ('un--treeMap'(V0, V9)), V10, ('un--treeMap'(V0, V11))} end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--treeLookup'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Data.SortedMap.Leaf', E0, E1} -> (fun (V3, V4) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12) -> case V5 of {'Idris.Prelude.EqOrd.MkEq', E10, E11} -> (fun (V13, V14) -> ((V13(V1))(V3)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', V4}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.Libraries.Data.SortedMap.Branch2', E12, E13, E14} -> (fun (V15, V16, V17) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> ((V22(V1))(V16)) end(E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--treeLookup'(V0, V1, V15)); 0 -> ('un--treeLookup'(V0, V1, V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14)); {'Idris.Libraries.Data.SortedMap.Branch3', E23, E24, E25, E26, E27} -> (fun (V26, V27, V28, V29, V30) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38) -> ((V35(V1))(V27)) end(E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--treeLookup'(V0, V1, V26)); 0 -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46) -> ((V43(V1))(V29)) end(E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--treeLookup'(V0, V1, V28)); 0 -> ('un--treeLookup'(V0, V1, V30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--treeInsert\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.Libraries.Data.SortedMap.Leaf', E0, E1} -> (fun (V4, V5) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13) -> ((V7(V1))(V4)) end(E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Libraries.Data.SortedMap.Leaf', V1, V2}, {'Idris.Builtin.MkPair', V1, {'Idris.Libraries.Data.SortedMap.Leaf', V4, V5}}}}; 1 -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Leaf', V1, V2}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Libraries.Data.SortedMap.Leaf', V4, V5}, {'Idris.Builtin.MkPair', V4, {'Idris.Libraries.Data.SortedMap.Leaf', V1, V2}}}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.Libraries.Data.SortedMap.Branch2', E10, E11, E12} -> (fun (V14, V15, V16) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24) -> ((V21(V1))(V15)) end(E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V14)) of {'Idris.Prelude.Types.Left', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V25, V15, V16}} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V29, V30) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V27, V29, V30, V15, V16}} end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V16)) of {'Idris.Prelude.Types.Left', E19} -> (fun (V31) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V14, V15, V31}} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V33, V34) -> case V34 of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V35, V36) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V14, V15, V33, V35, V36}} end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); {'Idris.Libraries.Data.SortedMap.Branch3', E33, E34, E35, E36, E37} -> (fun (V37, V38, V39, V40, V41) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49) -> ((V46(V1))(V38)) end(E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V37)) of {'Idris.Prelude.Types.Left', E38} -> (fun (V50) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V50, V38, V39, V40, V41}} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V51) -> case V51 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V52, V53) -> case V53 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V54, V55) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Libraries.Data.SortedMap.Branch2', V52, V54, V55}, {'Idris.Builtin.MkPair', V38, {'Idris.Libraries.Data.SortedMap.Branch2', V39, V40, V41}}}} end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63) -> ((V60(V1))(V40)) end(E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V39)) of {'Idris.Prelude.Types.Left', E44} -> (fun (V64) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V37, V38, V64, V40, V41}} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V65) -> case V65 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V66, V67) -> case V67 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V68, V69) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Libraries.Data.SortedMap.Branch2', V37, V38, V66}, {'Idris.Builtin.MkPair', V68, {'Idris.Libraries.Data.SortedMap.Branch2', V69, V40, V41}}}} end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case ('un--treeInsert\x{27}'(V0, V1, V2, V41)) of {'Idris.Prelude.Types.Left', E50} -> (fun (V70) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V37, V38, V39, V40, V70}} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V72, V73) -> case V73 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V74, V75) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Libraries.Data.SortedMap.Branch2', V37, V38, V39}, {'Idris.Builtin.MkPair', V40, {'Idris.Libraries.Data.SortedMap.Branch2', V72, V74, V75}}}} end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--treeInsert'(V0, V1, V2, V3) -> case ('un--treeInsert\x{27}'(V0, V1, V2, V3)) of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Data.SortedMap.Branch2', V6, V8, V9}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--treeDelete'(V0, V1, V2, V3) -> case V1 of 0 -> case V3 of {'Idris.Libraries.Data.SortedMap.Leaf', E100, E101} -> (fun (V4, V5) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E102, E103, E104, E105, E106, E107, E108, E109} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13) -> case V6 of {'Idris.Prelude.EqOrd.MkEq', E110, E111} -> (fun (V14, V15) -> ((V14(V2))(V4)) end(E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E102, E103, E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Leaf', V4, V5}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V16 = (V1 - 1)), case V16 of 0 -> case V3 of {'Idris.Libraries.Data.SortedMap.Branch2', E58, E59, E60} -> (fun (V17, V18, V19) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27) -> ((V24(V2))(V18)) end(E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeDelete'(V0, 0, V2, V17)) of {'Idris.Prelude.Types.Left', E61} -> (fun (V28) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V28, V18, V19}} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V29) -> case V29 of 0 -> {'Idris.Prelude.Types.Right', V19}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case ('un--treeDelete'(V0, 0, V2, V19)) of {'Idris.Prelude.Types.Left', E63} -> (fun (V30) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V17, V18, V30}} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V31) -> case V31 of 0 -> {'Idris.Prelude.Types.Right', V17}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58, E59, E60)); {'Idris.Libraries.Data.SortedMap.Branch3', E73, E74, E75, E76, E77} -> (fun (V32, V33, V34, V35, V36) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44) -> ((V41(V2))(V33)) end(E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeDelete'(V0, 0, V2, V32)) of {'Idris.Prelude.Types.Left', E78} -> (fun (V45) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V45, V33, V34, V35, V36}} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V46) -> case V46 of 0 -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V34, V35, V36}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54) -> ((V51(V2))(V35)) end(E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeDelete'(V0, 0, V2, V34)) of {'Idris.Prelude.Types.Left', E80} -> (fun (V55) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V32, V33, V55, V35, V36}} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V56) -> case V56 of 0 -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V32, V33, V36}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case ('un--treeDelete'(V0, 0, V2, V36)) of {'Idris.Prelude.Types.Left', E82} -> (fun (V57) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V32, V33, V34, V35, V57}} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V58) -> case V58 of 0 -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V32, V33, V34}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V59 = (V16 - 1)), case V3 of {'Idris.Libraries.Data.SortedMap.Branch2', E0, E1, E2} -> (fun (V60, V61, V62) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70) -> ((V67(V2))(V61)) end(E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeDelete'(V0, (1 + V59), V2, V60)) of {'Idris.Prelude.Types.Left', E3} -> (fun (V71) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V71, V61, V62}} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V72) -> case V62 of {'Idris.Libraries.Data.SortedMap.Branch2', E5, E6, E7} -> (fun (V73, V74, V75) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Data.SortedMap.Branch3', V72, V61, V73, V74, V75}} end(E5, E6, E7)); {'Idris.Libraries.Data.SortedMap.Branch3', E8, E9, E10, E11, E12} -> (fun (V76, V77, V78, V79, V80) -> {'Idris.Prelude.Types.Left', ('un--branch4'(V72, V61, V76, V77, V78, V79, V80))} end(E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case ('un--treeDelete'(V0, (1 + V59), V2, V62)) of {'Idris.Prelude.Types.Left', E13} -> (fun (V81) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch2', V60, V61, V81}} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V82) -> case V60 of {'Idris.Libraries.Data.SortedMap.Branch2', E15, E16, E17} -> (fun (V83, V84, V85) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Data.SortedMap.Branch3', V83, V84, V85, V61, V82}} end(E15, E16, E17)); {'Idris.Libraries.Data.SortedMap.Branch3', E18, E19, E20, E21, E22} -> (fun (V86, V87, V88, V89, V90) -> {'Idris.Prelude.Types.Left', ('un--branch4'(V86, V87, V88, V89, V90, V61, V82))} end(E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Libraries.Data.SortedMap.Branch3', E31, E32, E33, E34, E35} -> (fun (V91, V92, V93, V94, V95) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103) -> ((V100(V2))(V92)) end(E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeDelete'(V0, (1 + V59), V2, V91)) of {'Idris.Prelude.Types.Left', E36} -> (fun (V104) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V104, V92, V93, V94, V95}} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V105) -> {'Idris.Prelude.Types.Left', ('un--merge1'(V105, V92, V93, V94, V95))} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V106, V107, V108, V109, V110, V111, V112, V113) -> ((V110(V2))(V94)) end(E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('un--treeDelete'(V0, (1 + V59), V2, V93)) of {'Idris.Prelude.Types.Left', E38} -> (fun (V114) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V91, V92, V114, V94, V95}} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V115) -> {'Idris.Prelude.Types.Left', ('un--merge2'(V91, V92, V115, V94, V95))} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case ('un--treeDelete'(V0, (1 + V59), V2, V95)) of {'Idris.Prelude.Types.Left', E40} -> (fun (V116) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Data.SortedMap.Branch3', V91, V92, V93, V94, V116}} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V117) -> {'Idris.Prelude.Types.Left', ('un--merge3'(V91, V92, V93, V94, V117))} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--toList'(V0) -> case V0 of {'Idris.Libraries.Data.SortedMap.Empty', E0} -> (fun (V1) -> [] end(E0)); {'Idris.Libraries.Data.SortedMap.M', E1, E2, E3} -> (fun (V2, V3, V4) -> ('un--treeToList'(V4)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--singleton'(V0, V1, V2) -> ('un--insert'(V1, V2, ('un--empty'(V0)))).
'un--mergeWith'(V0, V1, V2) -> ('un--insertFrom'({'Idris.Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, ('nested--7254-4795--in--un--inserted'(V2, V1, V0)), V1)).
'un--mergeLeft'(V0, V1) -> ('un--mergeWith'(fun (V2) -> fun (V3) -> V2 end end, V0, V1)).
'un--merge3'(V0, V1, V2, V3, V4) -> case V0 of {'Idris.Libraries.Data.SortedMap.Branch2', E0, E1, E2} -> (fun (V5, V6, V7) -> case V2 of {'Idris.Libraries.Data.SortedMap.Branch2', E3, E4, E5} -> (fun (V8, V9, V10) -> ('un--branch5'(V5, V6, V7, V1, V8, V9, V10, V3, V4)) end(E3, E4, E5)); {'Idris.Libraries.Data.SortedMap.Branch3', E6, E7, E8, E9, E10} -> (fun (V11, V12, V13, V14, V15) -> ('un--branch6'(V5, V6, V7, V1, V11, V12, V13, V14, V15, V3, V4)) end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Libraries.Data.SortedMap.Branch3', E11, E12, E13, E14, E15} -> (fun (V16, V17, V18, V19, V20) -> case V2 of {'Idris.Libraries.Data.SortedMap.Branch2', E16, E17, E18} -> (fun (V21, V22, V23) -> ('un--branch6'(V16, V17, V18, V19, V20, V1, V21, V22, V23, V3, V4)) end(E16, E17, E18)); {'Idris.Libraries.Data.SortedMap.Branch3', E19, E20, E21, E22, E23} -> (fun (V24, V25, V26, V27, V28) -> ('un--branch7'(V16, V17, V18, V19, V20, V1, V24, V25, V26, V27, V28, V3, V4)) end(E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--merge2'(V0, V1, V2, V3, V4) -> case V0 of {'Idris.Libraries.Data.SortedMap.Branch2', E0, E1, E2} -> (fun (V5, V6, V7) -> case V4 of {'Idris.Libraries.Data.SortedMap.Branch2', E3, E4, E5} -> (fun (V8, V9, V10) -> ('un--branch5'(V5, V6, V7, V1, V2, V3, V8, V9, V10)) end(E3, E4, E5)); {'Idris.Libraries.Data.SortedMap.Branch3', E6, E7, E8, E9, E10} -> (fun (V11, V12, V13, V14, V15) -> ('un--branch6'(V5, V6, V7, V1, V2, V3, V11, V12, V13, V14, V15)) end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Libraries.Data.SortedMap.Branch3', E11, E12, E13, E14, E15} -> (fun (V16, V17, V18, V19, V20) -> case V4 of {'Idris.Libraries.Data.SortedMap.Branch2', E16, E17, E18} -> (fun (V21, V22, V23) -> ('un--branch6'(V16, V17, V18, V19, V20, V1, V2, V3, V21, V22, V23)) end(E16, E17, E18)); {'Idris.Libraries.Data.SortedMap.Branch3', E19, E20, E21, E22, E23} -> (fun (V24, V25, V26, V27, V28) -> ('un--branch7'(V16, V17, V18, V19, V20, V1, V2, V3, V24, V25, V26, V27, V28)) end(E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--merge1'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Libraries.Data.SortedMap.Branch2', E0, E1, E2} -> (fun (V5, V6, V7) -> case V4 of {'Idris.Libraries.Data.SortedMap.Branch2', E3, E4, E5} -> (fun (V8, V9, V10) -> ('un--branch5'(V0, V1, V5, V6, V7, V3, V8, V9, V10)) end(E3, E4, E5)); {'Idris.Libraries.Data.SortedMap.Branch3', E6, E7, E8, E9, E10} -> (fun (V11, V12, V13, V14, V15) -> ('un--branch6'(V0, V1, V5, V6, V7, V3, V11, V12, V13, V14, V15)) end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Libraries.Data.SortedMap.Branch3', E11, E12, E13, E14, E15} -> (fun (V16, V17, V18, V19, V20) -> case V4 of {'Idris.Libraries.Data.SortedMap.Branch2', E16, E17, E18} -> (fun (V21, V22, V23) -> ('un--branch6'(V0, V1, V16, V17, V18, V19, V20, V3, V21, V22, V23)) end(E16, E17, E18)); {'Idris.Libraries.Data.SortedMap.Branch3', E19, E20, E21, E22, E23} -> (fun (V24, V25, V26, V27, V28) -> ('un--branch7'(V0, V1, V16, V17, V18, V19, V20, V3, V24, V25, V26, V27, V28)) end(E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--merge'(V0, V1, V2) -> ('un--mergeWith'(fun (V3) -> fun (V4) -> ((V0(V3))(V4)) end end, V1, V2)).
'un--lookup'(V0, V1) -> case V1 of {'Idris.Libraries.Data.SortedMap.Empty', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Nothing'} end(E0)); {'Idris.Libraries.Data.SortedMap.M', E1, E2, E3} -> (fun (V3, V4, V5) -> ('un--treeLookup'(V3, V0, V5)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--keys'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Builtin':'un--fst'(V1)) end, ('un--toList'(V0)))).
'un--insertFrom'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkFoldable', E0, E1, E2, E3, E4, E5} -> (fun (V5, V6, V7, V8, V9, V10) -> (((((V6('erased'))('erased'))(fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V13) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V14) -> fun (V15) -> fun (V16) -> ('un--insert'(V14, V15, V16)) end end end, V13)) end, V11, V12)) end end))(V3))(V4)) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V1, V2)).
'un--insert'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Data.SortedMap.Empty', E0} -> (fun (V3) -> {'Idris.Libraries.Data.SortedMap.M', V3, 0, {'Idris.Libraries.Data.SortedMap.Leaf', V0, V1}} end(E0)); {'Idris.Libraries.Data.SortedMap.M', E1, E2, E3} -> (fun (V4, V5, V6) -> case ('un--treeInsert'(V4, V0, V1, V6)) of {'Idris.Prelude.Types.Left', E4} -> (fun (V7) -> {'Idris.Libraries.Data.SortedMap.M', V4, V5, V7} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V8) -> {'Idris.Libraries.Data.SortedMap.M', V4, (1 + V5), V8} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromList'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V5) -> fun (V6) -> fun (V7) -> ('un--insert'(V5, V6, V7)) end end end, V4)) end, V2, V3)) end end, ('un--empty'(V0)), V1)).
'un--empty'(V0) -> {'Idris.Libraries.Data.SortedMap.Empty', V0}.
'un--delete'(V0, V1) -> case V1 of {'Idris.Libraries.Data.SortedMap.Empty', E0} -> (fun (V2) -> {'Idris.Libraries.Data.SortedMap.Empty', V2} end(E0)); {'Idris.Libraries.Data.SortedMap.M', E1, E2, E3} -> (fun (V3, V4, V5) -> case V4 of 0 -> case ('un--treeDelete'(V3, 0, V0, V5)) of {'Idris.Prelude.Types.Left', E6} -> (fun (V6) -> {'Idris.Libraries.Data.SortedMap.M', V3, 0, V6} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V7) -> case V7 of 0 -> {'Idris.Libraries.Data.SortedMap.Empty', V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V8 = (V4 - 1)), case ('un--treeDelete'(V3, (1 + V8), V0, V5)) of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Libraries.Data.SortedMap.M', V3, (1 + V8), V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Libraries.Data.SortedMap.M', V3, V8, V10} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--branch7'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Libraries.Data.SortedMap.Branch3', {'Idris.Libraries.Data.SortedMap.Branch3', V0, V1, V2, V3, V4}, V5, {'Idris.Libraries.Data.SortedMap.Branch2', V6, V7, V8}, V9, {'Idris.Libraries.Data.SortedMap.Branch2', V10, V11, V12}}.
'un--branch6'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Libraries.Data.SortedMap.Branch3', {'Idris.Libraries.Data.SortedMap.Branch2', V0, V1, V2}, V3, {'Idris.Libraries.Data.SortedMap.Branch2', V4, V5, V6}, V7, {'Idris.Libraries.Data.SortedMap.Branch2', V8, V9, V10}}.
'un--branch5'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> {'Idris.Libraries.Data.SortedMap.Branch2', {'Idris.Libraries.Data.SortedMap.Branch2', V0, V1, V2}, V3, {'Idris.Libraries.Data.SortedMap.Branch3', V4, V5, V6, V7, V8}}.
'un--branch4'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Libraries.Data.SortedMap.Branch2', {'Idris.Libraries.Data.SortedMap.Branch2', V0, V1, V2}, V3, {'Idris.Libraries.Data.SortedMap.Branch2', V4, V5, V6}}.
'un--adjust'(V0, V1, V2) -> case ('un--lookup'(V0, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V2 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('un--insert'(V0, (V1(V3)), V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
