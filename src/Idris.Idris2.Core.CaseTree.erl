-module('Idris.Idris2.Core.CaseTree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6468-4074--in--un--getSet'/5,
  'nested--6468-4073--in--un--getAltSets'/5,
  'nested--6468-4072--in--un--getAltSet'/5,
  'dn--un--weaken_Weaken_CaseTree'/1,
  'dn--un--weakenNs_Weaken_CaseTree'/2,
  'dn--un--trimNS_StripNamespace_(CaseTree $vars)'/2,
  'dn--un--trimNS_StripNamespace_(CaseAlt $vars)'/2,
  'dn--un--show_Show_Pat'/1,
  'dn--un--show_Show_(CaseTree $vars)'/2,
  'dn--un--show_Show_(CaseAlt $vars)'/2,
  'dn--un--showPrec_Show_Pat'/2,
  'dn--un--showPrec_Show_(CaseTree $vars)'/3,
  'dn--un--showPrec_Show_(CaseAlt $vars)'/3,
  'dn--un--restoreNS_StripNamespace_(CaseTree $vars)'/2,
  'dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'/2,
  'dn--un--pretty_Pretty_Pat'/1,
  'dn--un--pretty_Pretty_(CaseTree $vars)'/2,
  'dn--un--pretty_Pretty_(CaseAlt $vars)'/2,
  'dn--un--prettyPrec_Pretty_Pat'/2,
  'dn--un--prettyPrec_Pretty_(CaseTree $vars)'/3,
  'dn--un--prettyPrec_Pretty_(CaseAlt $vars)'/3,
  'dn--un--__Impl_Weaken_CaseTree'/0,
  'dn--un--__Impl_StripNamespace_(CaseTree $vars)'/0,
  'dn--un--__Impl_StripNamespace_(CaseAlt $vars)'/0,
  'dn--un--__Impl_Show_Pat'/0,
  'dn--un--__Impl_Show_(CaseTree $vars)'/1,
  'dn--un--__Impl_Show_(CaseAlt $vars)'/1,
  'dn--un--__Impl_Pretty_Pat'/0,
  'dn--un--__Impl_Pretty_(CaseTree $vars)'/1,
  'dn--un--__Impl_Pretty_(CaseAlt $vars)'/1,
  'un--showCT'/3,
  'un--showCA'/3,
  'un--mkTerm'/2,
  'un--measureAlts'/1,
  'un--measure'/1,
  'un--isPConst'/1,
  'un--isDefault'/1,
  'un--insertCaseNames'/3,
  'un--insertCaseAltNames'/3,
  'un--getRefs'/2,
  'un--getNames'/3,
  'un--getMetas'/1,
  'un--eqTree'/2,
  'un--eqAlt'/2,
  'un--addRefs'/3
]).
'nested--6468-4074--in--un--getSet'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> ('nested--6468-4073--in--un--getAltSets'(V0, V1, V2, V3, V8)) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V9, V10) -> (((V2('erased'))(V3))(V10)) end(E4, E5)); {'Idris.Core.CaseTree.Unmatched', E6} -> (fun (V11) -> V3 end(E6)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> V3 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6468-4073--in--un--getAltSets'(V0, V1, V2, V3, V4) -> case V4 of [] -> V3; [E0 | E1] -> (fun (V5, V6) -> ('nested--6468-4073--in--un--getAltSets'(V0, V1, V2, ('nested--6468-4072--in--un--getAltSet'(V0, V1, V2, V3, V5)), V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6468-4072--in--un--getAltSet'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> ('nested--6468-4074--in--un--getSet'(V0, V1, V2, V3, V8)) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V9, V10, V11) -> ('nested--6468-4074--in--un--getSet'(V0, V1, V2, V3, V11)) end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V12, V13) -> ('nested--6468-4074--in--un--getSet'(V0, V1, V2, V3, V13)) end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V14) -> ('nested--6468-4074--in--un--getSet'(V0, V1, V2, V3, V14)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--weaken_Weaken_CaseTree'(V0) -> ('dn--un--weakenNs_Weaken_CaseTree'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weakenNs_Weaken_CaseTree'(V0, V1) -> ('un--insertCaseNames'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.CaseTree.Case', V2, V3, ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('dn--un--trimNS_StripNamespace_(CaseAlt $vars)'(V0, V6)) end, V5))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V7, V8) -> {'Idris.Core.CaseTree.STerm', V7, ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V0, V8))} end(E4, E5)); _ -> V1 end.
'dn--un--trimNS_StripNamespace_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.CaseTree.ConCase', V2, V3, V4, ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V5))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V6, V7, V8) -> {'Idris.Core.CaseTree.DelayCase', V6, V7, ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V8))} end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V9, V10) -> {'Idris.Core.CaseTree.ConstCase', V9, ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V10))} end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V11) -> {'Idris.Core.CaseTree.DefaultCase', ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V11))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Pat'(V0) -> case V0 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V1, V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Pat'(V3)), <<")"/utf8>>)))))) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V9) -> ('dn--un--show_Show_Pat'(V9)) end, fun (V10) -> fun (V11) -> ('dn--un--showPrec_Show_Pat'(V10, V11)) end end}, V8)))))))))) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<TyCon>"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V16) -> ('dn--un--show_Show_Pat'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show_Pat'(V17, V18)) end end}, V15)))))))) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V19, V20) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V20)) end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V21, V22, V23, V24) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Pat'(V23)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Pat'(V24)), <<")"/utf8>>)))))))) end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V25, V26, V27, V28) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Delay "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Pat'(V28)), <<")"/utf8>>)))) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V29, V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E24, E25} -> (fun (V31, V32) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<".("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V32)), <<")"/utf8>>)))) end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(CaseTree $vars)'(V0, V1) -> ('un--showCT'(V0, <<""/utf8>>, V1)).
'dn--un--show_Show_(CaseAlt $vars)'(V0, V1) -> ('un--showCA'(V0, <<""/utf8>>, V1)).
'dn--un--showPrec_Show_Pat'(V0, V1) -> ('dn--un--show_Show_Pat'(V1)).
'dn--un--showPrec_Show_(CaseTree $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(CaseTree $vars)'(V0, V2)).
'dn--un--showPrec_Show_(CaseAlt $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(CaseAlt $vars)'(V0, V2)).
'dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.CaseTree.Case', V2, V3, ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'(V0, V6)) end, V5))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V7, V8) -> {'Idris.Core.CaseTree.STerm', V7, ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V0, V8))} end(E4, E5)); _ -> V1 end.
'dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.CaseTree.ConCase', V2, V3, V4, ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V5))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V6, V7, V8) -> {'Idris.Core.CaseTree.DelayCase', V6, V7, ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V8))} end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V9, V10) -> {'Idris.Core.CaseTree.ConstCase', V9, ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V10))} end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V11) -> {'Idris.Core.CaseTree.DefaultCase', ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V11))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_Pat'(V0) -> ('dn--un--prettyPrec_Pretty_Pat'({'Idris.Prelude.Show.Open'}, V0)).
'dn--un--pretty_Pretty_(CaseTree $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"case"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V2)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<":"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_(Term $vars)'(V0, V4)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"of"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--nest'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('dn--un--pretty_Pretty_(CaseAlt $vars)'(V0, V6)) end, V5)))))))))))))))))) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V7, V8) -> ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_(Term $vars)'(V0, V8)) end(E4, E5)); {'Idris.Core.CaseTree.Unmatched', E6} -> (fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Error:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V9)))) end(E6)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Impossible"/utf8>>)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V6)) end, [V2 | V4])))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"=>"/utf8>>)), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Union', fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--spaces'(1)), ('dn--un--pretty_Pretty_(CaseTree $vars)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, V0)), V5)))) end, fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--nest'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()), ('dn--un--pretty_Pretty_(CaseTree $vars)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, V0)), V5)))))) end})))) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V7, V8, V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Delay"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V8)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"=>"/utf8>>)), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Union', fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--spaces'(1)), ('dn--un--pretty_Pretty_(CaseTree $vars)'([V7 | [V8 | V0]], V9)))) end, fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--nest'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()), ('dn--un--pretty_Pretty_(CaseTree $vars)'([V7 | [V8 | V0]], V9)))))) end})))))) end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V10, V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_Constant'(V10)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"=>"/utf8>>)), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Union', fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--spaces'(1)), ('dn--un--pretty_Pretty_(CaseTree $vars)'(V0, V11)))) end, fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--nest'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()), ('dn--un--pretty_Pretty_(CaseTree $vars)'(V0, V11)))))) end})))) end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"_ =>"/utf8>>)), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Union', fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--spaces'(1)), ('dn--un--pretty_Pretty_(CaseTree $vars)'(V0, V12)))) end, fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--nest'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()), ('dn--un--pretty_Pretty_(CaseTree $vars)'(V0, V12)))))) end})) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_Pat'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V3)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"@"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('dn--un--pretty_Pretty_Pat'(V4)))))))) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parenthesise'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Idris.Prelude.Show.Open'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V6)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('dn--un--prettyPrec_Pretty_Pat'({'Idris.Prelude.Show.App'}, V10)) end, V9))])))) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parenthesise'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Idris.Prelude.Show.Open'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V12)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('dn--un--prettyPrec_Pretty_Pat'({'Idris.Prelude.Show.App'}, V15)) end, V14))])))) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V16, V17) -> ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_Constant'(V17)) end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V18, V19, V20, V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parenthesise'(('Idris.Idris2.Prelude.Show':'dn--un-->_Ord_Prec'(V0, {'Idris.Prelude.Show.Open'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('dn--un--pretty_Pretty_Pat'(V20)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"->"/utf8>>)), ('dn--un--pretty_Pretty_Pat'(V21)))))))) end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V22, V23, V24, V25) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Delay"/utf8>>)), ('dn--un--pretty_Pretty_Pat'(V25)))))) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V26, V27) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V27)) end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E24, E25} -> (fun (V28, V29) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"."/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_(Term $vars)'([], V29)))))) end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_(CaseTree $vars)'(V0, V1, V2) -> ('dn--un--pretty_Pretty_(CaseTree $vars)'(V0, V2)).
'dn--un--prettyPrec_Pretty_(CaseAlt $vars)'(V0, V1, V2) -> ('dn--un--pretty_Pretty_(CaseAlt $vars)'(V0, V2)).
'dn--un--__Impl_Weaken_CaseTree'() -> {'Idris.Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_CaseTree'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_CaseTree'(V5, V6)) end end end end}.
'dn--un--__Impl_StripNamespace_(CaseTree $vars)'() -> {'Idris.Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V2, V3)) end end}.
'dn--un--__Impl_StripNamespace_(CaseAlt $vars)'() -> {'Idris.Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_(CaseAlt $vars)'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_(CaseAlt $vars)'(V2, V3)) end end}.
'dn--un--__Impl_Show_Pat'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Pat'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Pat'(V1, V2)) end end}.
'dn--un--__Impl_Show_(CaseTree $vars)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(CaseTree $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(CaseTree $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(CaseAlt $vars)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(CaseAlt $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(CaseAlt $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Pretty_Pat'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Pat'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Pat'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_(CaseTree $vars)'(V0) -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V1) -> fun (V2) -> ('dn--un--pretty_Pretty_(CaseTree $vars)'(V0, V2)) end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--prettyPrec_Pretty_(CaseTree $vars)'(V0, V4, V5)) end end end}.
'dn--un--__Impl_Pretty_(CaseAlt $vars)'(V0) -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V1) -> fun (V2) -> ('dn--un--pretty_Pretty_(CaseAlt $vars)'(V0, V2)) end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--prettyPrec_Pretty_(CaseAlt $vars)'(V0, V4, V5)) end end end}.
'un--showCT'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<" | "/utf8>>)))), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('un--showCA'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, V1)), V7)) end, V6)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<" }"/utf8>>)))))))))))))))))))))))))) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V9)))))))) end(E4, E5)); {'Idris.Core.CaseTree.Unmatched', E6} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V10)))) end(E6)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> <<"Impossible"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showCA'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, [V3 | V5])))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('un--showCT'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V0)), V1, V6)))))) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V8, V9, V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Delay "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('un--showCT'([V8 | [V9 | V0]], V1, V10)))))))) end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constant "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('un--showCT'(V0, V1, V12)))))))) end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_ => "/utf8>>, ('un--showCT'(V0, V1, V13)))) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkTerm'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--mkTerm'(V0, V4)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.TT':'un--apply'(V5, {'Idris.Core.TT.Ref', V5, {'Idris.Core.TT.DataCon', V7, V8}, V6}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--mkTerm'(V0, V10)) end, V9)))) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Core.TT':'un--apply'(V11, {'Idris.Core.TT.Ref', V11, {'Idris.Core.TT.TyCon', 0, V13}, V12}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('un--mkTerm'(V0, V15)) end, V14)))) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V16, V17) -> {'Idris.Core.TT.PrimVal', V16, V17} end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V18, V19, {'Idris.Core.TT.Pi', V18, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, ('un--mkTerm'(V0, V20))}, ('un--mkTerm'([V19 | V0], V21))} end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V22, V23, V24, V25) -> {'Idris.Core.TT.TDelay', V22, V23, ('un--mkTerm'(V0, V24)), ('un--mkTerm'(V0, V25))} end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V26, V27) -> case ('Idris.Idris2.Core.TT':'un--isVar'(V27, V0)) of {'Idris.Prelude.Types.Just', E24} -> (fun (V28) -> {'Idris.Core.TT.Local', V26, {'Idris.Prelude.Types.Nothing'}, V28} end(E24)); _ -> {'Idris.Core.TT.Ref', V26, {'Idris.Core.TT.Bound'}, V27} end end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E25, E26} -> (fun (V29, V30) -> ('Idris.Idris2.Core.TT':'un--embed'(V30)) end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--measureAlts'(V0) -> case V0 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), ('un--measure'(V4)))) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), ('un--measure'(V7)))) end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), ('un--measure'(V9)))) end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), ('un--measure'(V10)))) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--measure'(V0) -> case V0 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--*_Num_Nat'(V33, V34)) end end, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V35)) end}}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V38, V39)) end end end end, fun (V40) -> ('un--measureAlts'(V40)) end, V4)))) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V41, V42) -> 0 end(E4, E5)); {'Idris.Core.CaseTree.Unmatched', E6} -> (fun (V43) -> 0 end(E6)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isPConst'(V0) -> case V0 of {'Idris.Core.CaseTree.PConst', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', V2} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--isDefault'(V0) -> case V0 of {'Idris.Core.CaseTree.DefaultCase', E0} -> (fun (V1) -> 1 end(E0)); _ -> 0 end.
'un--insertCaseNames'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> {'Idris.Core.CaseTree.Case', V3, ('Idris.Idris2.Core.TT':'un--insertNVarNames'(V0, V1, V4)), ('Idris.Idris2.Core.TT':'un--insertNames'(V0, V1, V5)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('un--insertCaseAltNames'(V0, V1, V7)) end, V6))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.CaseTree.STerm', V8, ('Idris.Idris2.Core.TT':'un--insertNames'(V0, V1, V9))} end(E4, E5)); {'Idris.Core.CaseTree.Unmatched', E6} -> (fun (V10) -> {'Idris.Core.CaseTree.Unmatched', V10} end(E6)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> {'Idris.Core.CaseTree.Impossible'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertCaseAltNames'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> {'Idris.Core.CaseTree.ConCase', V3, V4, V5, ('un--insertCaseNames'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V5)), V0)), V1, V6))} end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V7, V8, V9) -> {'Idris.Core.CaseTree.DelayCase', V7, V8, ('un--insertCaseNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)))), V1, V9))} end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V10, V11) -> {'Idris.Core.CaseTree.ConstCase', V10, ('un--insertCaseNames'(V0, V1, V11))} end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V12) -> {'Idris.Core.CaseTree.DefaultCase', ('un--insertCaseNames'(V0, V1, V12))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRefs'(V0, V1) -> ('un--getNames'(fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.TT':'un--addRefs'(0, V0, V3, V4)) end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V1)).
'un--getNames'(V0, V1, V2) -> ('nested--6468-4074--in--un--getSet'(V2, V1, V0, V1, V2)).
'un--getMetas'(V0) -> ('un--getNames'(fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'un--addMetas'(V2, V3)) end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V0)).
'un--eqTree'(V0, V1) -> case V0 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V1 of {'Idris.Core.CaseTree.Case', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V3, V7)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V5)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V9)))) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V25, V26, V27, V28)) end end end end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V33, V34, V35)) end end end end end}, fun (V36) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V37) -> fun (V38) -> ('un--eqAlt'(V37, V38)) end end, V36)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V5, V9)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V39, V40) -> case V1 of {'Idris.Core.CaseTree.STerm', E10, E11} -> (fun (V41, V42) -> ('Idris.Idris2.Core.TT':'un--eqTerm'(V40, V42)) end(E10, E11)); _ -> 0 end end(E8, E9)); {'Idris.Core.CaseTree.Unmatched', E12} -> (fun (V43) -> case V1 of {'Idris.Core.CaseTree.Unmatched', E13} -> (fun (V44) -> 1 end(E13)); _ -> 0 end end(E12)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> case V1 of {'Idris.Core.CaseTree.Impossible'} -> (fun () -> 1 end()); _ -> 0 end end()); _ -> 0 end.
'un--eqAlt'(V0, V1) -> case V0 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V1 of {'Idris.Core.CaseTree.ConCase', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V6)) of 1 -> ('un--eqTree'(V5, V9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E8, E9, E10} -> (fun (V10, V11, V12) -> case V1 of {'Idris.Core.CaseTree.DelayCase', E11, E12, E13} -> (fun (V13, V14, V15) -> ('un--eqTree'(V12, V15)) end(E11, E12, E13)); _ -> 0 end end(E8, E9, E10)); {'Idris.Core.CaseTree.ConstCase', E14, E15} -> (fun (V16, V17) -> case V1 of {'Idris.Core.CaseTree.ConstCase', E16, E17} -> (fun (V18, V19) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V16, V18)) of 1 -> ('un--eqTree'(V17, V19)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> 0 end end(E14, E15)); {'Idris.Core.CaseTree.DefaultCase', E18} -> (fun (V20) -> case V1 of {'Idris.Core.CaseTree.DefaultCase', E19} -> (fun (V21) -> ('un--eqTree'(V20, V21)) end(E19)); _ -> 0 end end(E18)); _ -> 0 end.
'un--addRefs'(V0, V1, V2) -> ('un--getNames'(fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.TT':'un--addRefs'(0, V0, V4, V5)) end end end, V1, V2)).
