-module('Idris.Idris2.Core.Normalise.Quote').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7352-3399--in--un--toHolesOnly'/13,
  'nested--7352-3059--in--un--isRef'/12,
  'nested--7325-2445--in--un--findName'/12,
  'nested--7325-2311--in--un--addLater'/13,
  'dn--un--quote_Quote_Term'/6,
  'dn--un--quote_Quote_NF'/6,
  'dn--un--quote_Quote_Closure'/6,
  'dn--un--quoteOpts_Quote_Term'/7,
  'dn--un--quoteOpts_Quote_NF'/7,
  'dn--un--quoteOpts_Quote_Closure'/7,
  'dn--un--quoteLHS_Quote_Term'/6,
  'dn--un--quoteLHS_Quote_NF'/6,
  'dn--un--quoteLHS_Quote_Closure'/6,
  'dn--un--quoteGen_Quote_Term'/8,
  'dn--un--quoteGen_Quote_NF'/8,
  'dn--un--quoteGen_Quote_Closure'/8,
  'dn--un--__Impl_Quote_Term'/0,
  'dn--un--__Impl_Quote_NF'/0,
  'dn--un--__Impl_Quote_Closure'/0,
  'un--quoteWithPiGen'/10,
  'un--quoteWithPi'/6,
  'un--quotePi'/10,
  'un--quoteOpts'/6,
  'un--quoteLHS'/6,
  'un--quoteHead'/10,
  'un--quoteGenNF'/10,
  'un--quoteGen'/6,
  'un--quoteBinder'/10,
  'un--quoteArgsWithFC'/10,
  'un--quoteArgs'/10,
  'un--quoteArgWithFC'/10,
  'un--quoteArg'/10,
  'un--quote'/6,
  'un--genName'/3
]).
'nested--7352-3399--in--un--toHolesOnly'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Value.MkClosure', E0, E1, E2, E3, E4} -> (fun (V13, V14, V15, V16, V17) -> {'Idris.Core.Value.MkClosure', V13, case V14 of {'Idris.Core.Value.MkEvalOpts', E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> {'Idris.Core.Value.MkEvalOpts', 1, 1, V20, V21, V22, V23, V24, V25} end(E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, V16, V17} end(E0, E1, E2, E3, E4)); _ -> V12 end.
'nested--7352-3059--in--un--isRef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Value.NRef', E0, E1} -> (fun (V12, V13) -> 1 end(E0, E1)); _ -> 0 end.
'nested--7325-2445--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.TT.Bounds.None'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.TT.Bounds.Add', E0, E1, E2} -> (fun (V12, V13, V14) -> case V13 of {'Idris.Core.Name.MN', E3, E4} -> (fun (V15, V16) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V16)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7325-2445--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14)), fun (V17) -> {'Idris.Prelude.Types.Just', (1 + V17)} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7325-2445--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14)), fun (V18) -> {'Idris.Prelude.Types.Just', (1 + V18)} end)) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7325-2311--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> V11; [E0 | E1] -> (fun (V13, V14) -> (1 + ('nested--7325-2311--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--quote_Quote_Term'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_Term'(V0, V1, V8, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Idris.Prelude.Types.Nothing'}}, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_NF'(V0, V1, V8, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Idris.Prelude.Types.Nothing'}}, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quote_Quote_Closure'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_Closure'(V0, V1, V8, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Idris.Prelude.Types.Nothing'}}, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteOpts_Quote_Term'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--quoteGen_Quote_Term'(V0, V1, V9, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteOpts_Quote_NF'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--quoteGen_Quote_NF'(V0, V1, V9, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteOpts_Quote_Closure'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--quoteGen_Quote_Closure'(V0, V1, V9, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteLHS_Quote_Term'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_Term'(V0, V1, V8, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 1, 1, {'Idris.Prelude.Types.Nothing'}}, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteLHS_Quote_NF'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_NF'(V0, V1, V8, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 1, 1, {'Idris.Prelude.Types.Nothing'}}, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteLHS_Quote_Closure'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_Closure'(V0, V1, V8, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 1, 1, {'Idris.Prelude.Types.Nothing'}}, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteGen_Quote_Term'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Prelude.Types.Right', V6}.
'dn--un--quoteGen_Quote_NF'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--quoteGenNF'(V0, [], V1, V2, V3, V4, {'Idris.Core.TT.Bounds.None'}, V5, V6, V7)).
'dn--un--quoteGen_Quote_Closure'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ('dn--un--quoteGen_Quote_NF'(V0, V1, V2, V3, V4, V5, V10, V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_Quote_Term'() -> {'Idris.Core.Normalise.Quote.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--quote_Quote_Term'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--quoteLHS_Quote_Term'(V6, V7, V8, V9, V10, V11)) end end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--quoteOpts_Quote_Term'(V12, V13, V14, V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--quoteGen_Quote_Term'(V19, V20, V21, V22, V23, V24, V25, V26)) end end end end end end end end}.
'dn--un--__Impl_Quote_NF'() -> {'Idris.Core.Normalise.Quote.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--quoteLHS_Quote_NF'(V6, V7, V8, V9, V10, V11)) end end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--quoteOpts_Quote_NF'(V12, V13, V14, V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--quoteGen_Quote_NF'(V19, V20, V21, V22, V23, V24, V25, V26)) end end end end end end end end}.
'dn--un--__Impl_Quote_Closure'() -> {'Idris.Core.Normalise.Quote.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--quote_Quote_Closure'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--quoteLHS_Quote_Closure'(V6, V7, V8, V9, V10, V11)) end end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--quoteOpts_Quote_Closure'(V12, V13, V14, V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--quoteGen_Quote_Closure'(V19, V20, V21, V22, V23, V24, V25, V26)) end end end end end end end end}.
'un--quoteWithPiGen'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V10, V11, V12, V13) -> case V12 of {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> begin (V18 = ('un--genName'(V3, <<"qv"/utf8>>, V9))), case V18 of {'Idris.Prelude.Types.Left', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V27 = begin (V24 = (((V13(V5))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V7, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V20}))))(V9))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> ('un--quoteWithPiGen'(V0, [V11 | V1], V2, V3, V4, V5, {'Idris.Core.TT.Bounds.Add', V11, V20, V6}, V7, V26, V9)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V27 of {'Idris.Prelude.Types.Left', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V29) -> begin (V33 = begin (V30 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V23, V17))(V9))), case V30 of {'Idris.Prelude.Types.Left', E20} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V32) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V23, V6, V7, V32, V9)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V33 of {'Idris.Prelude.Types.Left', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V35) -> begin (V36 = ('un--quotePi'(V0, V1, V2, V3, V4, V23, V6, V7, V16, V9))), case V36 of {'Idris.Prelude.Types.Left', E24} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V10, V11, {'Idris.Core.TT.Pi', V14, V15, V38, V35}, V29}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11)); _ -> begin (V39 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V39 of {'Idris.Prelude.Types.Left', E6} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V41) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V41, V6, V7, V8, V9)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> begin (V42 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V42 of {'Idris.Prelude.Types.Left', E0} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V44) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V44, V6, V7, V8, V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--quoteWithPi'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--quoteWithPiGen'(V0, [], V1, V8, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 1, 0, {'Idris.Prelude.Types.Nothing'}}, V2, {'Idris.Core.TT.Bounds.None'}, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V10) -> begin (V14 = begin (V11 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V10))(V9))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V13, V9)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V16}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteOpts'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.Quote.dn--un--__mkQuote', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> fun (V10) -> ((((((V8(V1))(V2))(V3))(V4))(V5))(V10)) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteLHS'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.Quote.dn--un--__mkQuote', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> (((((V7(V1))(V2))(V3))(V4))(V5)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteHead'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Value.NLocal', E0, E1} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Local', V6, V10, ('nested--7325-2311--in--un--addLater'(V2, V11, V10, V8, V1, V7, V6, V5, V4, V3, V0, V11, V1))}} end end(E0, E1)); {'Idris.Core.Value.NRef', E2, E3} -> (fun (V13, V14) -> fun (V15) -> case V13 of {'Idris.Core.TT.Bound'} -> (fun () -> case V14 of {'Idris.Core.Name.MN', E4, E5} -> (fun (V16, V17) -> {'Idris.Prelude.Types.Right', case ('nested--7325-2445--in--un--findName'(V1, V2, V17, V16, V8, V7, V6, V5, V4, V3, V0, V7)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V18) -> {'Idris.Core.TT.Local', V6, {'Idris.Prelude.Types.Nothing'}, V18} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', V16, V17}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E4, E5)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V6, V13, V14}} end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V6, V13, V14}} end end end(E2, E3)); {'Idris.Core.Value.NMeta', E7, E8, E9} -> (fun (V19, V20, V21) -> fun (V22) -> begin (V23 = ('un--quoteArgs'(V0, V1, V2, V3, V4, V5, V7, V8, V21, V22))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V6, V19, V20, V25}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> begin (V14 = ('un--genName'(V3, <<"qv"/utf8>>, V9))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V20 = begin (V17 = (((V13(V5))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V7, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V16}))))(V9))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> ('un--quoteGenNF'(V0, [V11 | V1], V2, V3, V4, V5, {'Idris.Core.TT.Bounds.Add', V11, V16, V6}, V7, V19, V9)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('un--quoteBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V12, V9))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V10, V11, V25, V22}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E12, E13, E14} -> (fun (V26, V27, V28) -> begin (V29 = (('un--quoteHead'(V0, V1, V2, V3, V4, V5, V26, V6, V7, V27))(V9))), case V29 of {'Idris.Prelude.Types.Left', E15} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V31) -> begin (V40 = case V4 of {'Idris.Core.Normalise.Quote.MkQuoteOpts', E17, E18, E19} -> (fun (V32, V33, V34) -> case V34 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V4} end()); {'Idris.Prelude.Types.Just', E20} -> (fun (V35) -> case V35 of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Size limit exceeded"/utf8>>}, V9)); _ -> begin (V36 = (V35 - 1)), {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Normalise.Quote.MkQuoteOpts', E21, E22, E23} -> (fun (V37, V38, V39) -> {'Idris.Core.Normalise.Quote.MkQuoteOpts', V37, V38, {'Idris.Prelude.Types.Just', V36}} end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V40 of {'Idris.Prelude.Types.Left', E24} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V42) -> begin (V55 = case case case V4 of {'Idris.Core.Normalise.Quote.MkQuoteOpts', E34, E35, E36} -> (fun (V43, V44, V45) -> V44 end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case case V4 of {'Idris.Core.Normalise.Quote.MkQuoteOpts', E31, E32, E33} -> (fun (V46, V47, V48) -> V46 end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> ('nested--7352-3059--in--un--isRef'(V1, V2, V28, V27, V26, V7, V6, V5, V4, V3, V0, V27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V49 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V49 of {'Idris.Prelude.Types.Left', E26} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V51) -> ('un--quoteArgsWithFC'(V0, V1, V2, V3, V42, V51, V6, V7, V28, V9)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--quoteArgsWithFC'(V0, V1, V2, V3, case V42 of {'Idris.Core.Normalise.Quote.MkQuoteOpts', E28, E29, E30} -> (fun (V52, V53, V54) -> {'Idris.Core.Normalise.Quote.MkQuoteOpts', 0, V53, V54} end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6, V7, V28, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E37} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V57) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V31, V57))} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13, E14)); {'Idris.Core.Value.NDCon', E39, E40, E41, E42, E43} -> (fun (V58, V59, V60, V61, V62) -> begin (V63 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V62, V9))), case V63 of {'Idris.Prelude.Types.Left', E44} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V65) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.Ref', V58, {'Idris.Core.TT.DataCon', V60, V61}, V59}, V65))} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40, E41, E42, E43)); {'Idris.Core.Value.NTCon', E46, E47, E48, E49, E50} -> (fun (V66, V67, V68, V69, V70) -> begin (V71 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V70, V9))), case V71 of {'Idris.Prelude.Types.Left', E51} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.Ref', V66, {'Idris.Core.TT.TyCon', V68, V69}, V67}, V73))} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47, E48, E49, E50)); {'Idris.Core.Value.NAs', E53, E54, E55, E56} -> (fun (V74, V75, V76, V77) -> begin (V78 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V76, V9))), case V78 of {'Idris.Prelude.Types.Left', E57} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V80) -> begin (V81 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V77, V9))), case V81 of {'Idris.Prelude.Types.Left', E59} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V74, V75, V80, V83}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53, E54, E55, E56)); {'Idris.Core.Value.NDelayed', E61, E62, E63} -> (fun (V84, V85, V86) -> begin (V87 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V86, V9))), case V87 of {'Idris.Prelude.Types.Left', E64} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V84, V85, V89}} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61, E62, E63)); {'Idris.Core.Value.NDelay', E66, E67, E68, E69} -> (fun (V90, V91, V92, V93) -> begin (V94 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, ('nested--7352-3399--in--un--toHolesOnly'(V1, V2, V93, V92, V91, V90, V7, V6, V5, V4, V3, V0, V93))))(V9))), case V94 of {'Idris.Prelude.Types.Left', E70} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V96) -> begin (V97 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V96, V9))), case V97 of {'Idris.Prelude.Types.Left', E72} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V99) -> begin (V100 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, ('nested--7352-3399--in--un--toHolesOnly'(V1, V2, V93, V92, V91, V90, V7, V6, V5, V4, V3, V0, V92))))(V9))), case V100 of {'Idris.Prelude.Types.Left', E74} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V102) -> begin (V103 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V102, V9))), case V103 of {'Idris.Prelude.Types.Left', E76} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V105) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V90, V91, V105, V99}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66, E67, E68, E69)); {'Idris.Core.Value.NForce', E78, E79, E80, E81} -> (fun (V106, V107, V108, V109) -> begin (V110 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V109, V9))), case V110 of {'Idris.Prelude.Types.Left', E82} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V112) -> case V108 of {'Idris.Core.Value.NDelay', E86, E87, E88, E89} -> (fun (V113, V114, V115, V116) -> begin (V117 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V116))(V9))), case V117 of {'Idris.Prelude.Types.Left', E90} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V119) -> begin (V120 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V119, V9))), case V120 of {'Idris.Prelude.Types.Left', E92} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V122) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V122, V112))} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86, E87, E88, E89)); _ -> begin (V123 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V108, V9))), case V123 of {'Idris.Prelude.Types.Left', E84} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V125) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.TForce', V106, V107, V125}, V112))} end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78, E79, E80, E81)); {'Idris.Core.Value.NPrimVal', E94, E95} -> (fun (V126, V127) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V126, V127}} end(E94, E95)); {'Idris.Core.Value.NErased', E96, E97} -> (fun (V128, V129) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Erased', V128, V129}} end(E96, E97)); {'Idris.Core.Value.NType', E98} -> (fun (V130) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TType', V130}} end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteGen'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.Quote.dn--un--__mkQuote', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> fun (V10) -> fun (V11) -> (((((((V9(V1))(V2))(V3))(V4))(V5))(V10))(V11)) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> begin (V17 = begin (V14 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V13))(V9))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V16, V9)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V12, V9))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Lam', V10, V11, V22, V19}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E10, E11, E12, E13} -> (fun (V23, V24, V25, V26) -> begin (V30 = begin (V27 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V25))(V9))), case V27 of {'Idris.Prelude.Types.Left', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V29) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V29, V9)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> begin (V36 = begin (V33 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V26))(V9))), case V33 of {'Idris.Prelude.Types.Left', E18} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V35) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V35, V9)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V36 of {'Idris.Prelude.Types.Left', E20} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Let', V23, V24, V32, V38}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13)); {'Idris.Core.TT.Pi', E22, E23, E24, E25} -> (fun (V39, V40, V41, V42) -> begin (V46 = begin (V43 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V42))(V9))), case V43 of {'Idris.Prelude.Types.Left', E26} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V45) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V45, V9)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V46 of {'Idris.Prelude.Types.Left', E28} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V48) -> begin (V49 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V41, V9))), case V49 of {'Idris.Prelude.Types.Left', E30} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Pi', V39, V40, V51, V48}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23, E24, E25)); {'Idris.Core.TT.PVar', E32, E33, E34, E35} -> (fun (V52, V53, V54, V55) -> begin (V59 = begin (V56 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V55))(V9))), case V56 of {'Idris.Prelude.Types.Left', E36} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V58) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V58, V9)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V59 of {'Idris.Prelude.Types.Left', E38} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V61) -> begin (V62 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V54, V9))), case V62 of {'Idris.Prelude.Types.Left', E40} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PVar', V52, V53, V64, V61}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33, E34, E35)); {'Idris.Core.TT.PLet', E42, E43, E44, E45} -> (fun (V65, V66, V67, V68) -> begin (V72 = begin (V69 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V67))(V9))), case V69 of {'Idris.Prelude.Types.Left', E46} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V71) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V71, V9)) end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V72 of {'Idris.Prelude.Types.Left', E48} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V74) -> begin (V78 = begin (V75 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V68))(V9))), case V75 of {'Idris.Prelude.Types.Left', E50} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V77) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V77, V9)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V78 of {'Idris.Prelude.Types.Left', E52} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PLet', V65, V66, V74, V80}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43, E44, E45)); {'Idris.Core.TT.PVTy', E54, E55, E56} -> (fun (V81, V82, V83) -> begin (V87 = begin (V84 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V83))(V9))), case V84 of {'Idris.Prelude.Types.Left', E57} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V86) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V86, V9)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V87 of {'Idris.Prelude.Types.Left', E59} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PVTy', V81, V82, V89}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('un--quoteArgWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11)) end end, V8, [], V9)).
'un--quoteArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11)) end end, V8, [], V9)).
'un--quoteArgWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V10) -> fun (V11) -> ('un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11)) end end, V8, V9)).
'un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V2, V5, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V12, V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--quote'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.Quote.dn--un--__mkQuote', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> (((((V6(V1))(V2))(V3))(V4))(V5)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'put'(V0, ((V6 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', V1, V6}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
