-module('Idris.Idris2.Erlang.System.File').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--fileInfo-2851'/6,
  'nested--4558-2276--in--un--scanBack'/2,
  'nested--5521-3209--in--un--getMs'/2,
  'nested--5521-3208--in--un--getM'/2,
  'dn--un--show_Show_FileError'/1,
  'dn--un--showPrec_Show_FileError'/2,
  'dn--un--__Impl_Show_FileError'/0,
  'un--writeFile'/3,
  'un--unknownError'/0,
  'un--stdout'/0,
  'un--stdin'/0,
  'un--stderr'/0,
  'un--removeFile'/2,
  'un--reason'/0,
  'un--readFile'/2,
  'un--openFile'/3,
  'un--mkMode'/1,
  'un--firstExists'/2,
  'un--fileStatusTime'/2,
  'un--fileSize'/2,
  'un--fileModifiedTime'/2,
  'un--fileModes'/1,
  'un--fileInfo'/4,
  'un--fileAccessTime'/2,
  'un--fflush'/2,
  'un--fPutStrLn'/3,
  'un--fPutStr'/3,
  'un--fGetLine'/2,
  'un--fGetChar'/2,
  'un--fEOF'/2,
  'un--exists'/2,
  'un--error'/1,
  'un--closeFile'/2,
  'un--chmodRaw'/3,
  'un--chmod'/3
]).
'case--fileInfo-2851'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Right', E0} -> (fun (V6) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E1, E2} -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> ((((V10('erased'))('erased'))(('Idris.Idris2.Erlang.IO':'un--erlTryCatch'(V0, fun (V33) -> ('erlang':'apply'('erlang', 'element', [(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V2)) + 2) | [V6 | []]])) end))))(fun (V12) -> case V12 of {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V19, V20, V21) -> ((V20('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, fun (V22) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V23) -> {'Idris.Prelude.Types.Right', V23} end, V1, V22)) end, V13)))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E16, E17} -> (fun (V25, V26) -> case V25 of {'Idris.Prelude.Interfaces.MkMonad', E18, E19, E20} -> (fun (V27, V28, V29) -> case V27 of {'Idris.Prelude.Interfaces.MkApplicative', E21, E22, E23} -> (fun (V30, V31, V32) -> ((V31('erased'))({'Idris.Prelude.Types.Left', ('un--unknownError'())})) end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E25, E26} -> (fun (V35, V36) -> case V35 of {'Idris.Prelude.Interfaces.MkMonad', E27, E28, E29} -> (fun (V37, V38, V39) -> case V37 of {'Idris.Prelude.Interfaces.MkApplicative', E30, E31, E32} -> (fun (V40, V41, V42) -> ((V41('erased'))({'Idris.Prelude.Types.Left', V34})) end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4558-2276--in--un--scanBack'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V48, V49) -> case V48 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V50, V51, V52) -> case V50 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V53, V54, V55) -> ((V54('erased'))(('erlang':'apply'('file', 'position', [V1 | [{'cur', -1} | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> 1 end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V26, V27, V28)) end end end end end}, fun (V29) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V30) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V30)) end, V29)) end, fun (V31) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(0, V31)) end)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V38, V39)) end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V42, V43, V44)) end end end end end}, fun (V45) -> ('Idris.Idris2.Erlang.Decode':'un--errorTuple'(fun (V46) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V46)) end, V45)) end, fun (V47) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(1, V47)) end)) end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5521-3209--in--un--getMs'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V28) -> fun (V29) -> ((V28 + V29) rem 9223372036854775808) end end, fun (V30) -> fun (V31) -> ((V30 * V31) rem 9223372036854775808) end end, fun (V32) -> V32 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V33) -> ('nested--5521-3208--in--un--getM'(V0, V33)) end, V1)))).
'nested--5521-3208--in--un--getM'(V0, V1) -> case V1 of 0 -> 4; 1 -> 2; 2 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_FileError'(V0) -> case V0 of {'Idris.Erlang.System.File.GenericFileError', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))) end(E0)); {'Idris.Erlang.System.File.FileReadError'} -> (fun () -> <<"File Read Error"/utf8>> end()); {'Idris.Erlang.System.File.FileWriteError'} -> (fun () -> <<"File Write Error"/utf8>> end()); {'Idris.Erlang.System.File.FileNotFound'} -> (fun () -> <<"File Not Found"/utf8>> end()); {'Idris.Erlang.System.File.PermissionDenied'} -> (fun () -> <<"Permission Denied"/utf8>> end()); {'Idris.Erlang.System.File.FileExists'} -> (fun () -> <<"File Exists"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_FileError'(V0, V1) -> ('dn--un--show_Show_FileError'(V1)).
'dn--un--__Impl_Show_FileError'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_FileError'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_FileError'(V1, V2)) end end}.
'un--writeFile'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(('un--openFile'(V0, V1, 1))))(fun (V8) -> case V8 of {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E6, E7} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V12, V13, V14) -> ((((V13('erased'))('erased'))(('un--fPutStr'(V0, V9, V2))))(fun (V15) -> case V15 of {'Idris.Prelude.Types.Right', E11} -> (fun (V16) -> case V16 of 0 -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E12, E13} -> (fun (V17, V18) -> V17 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--closeFile'(V0, V9)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E14, E15} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E16, E17, E18} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E19, E20, E21} -> (fun (V24, V25, V26) -> ((V25('erased'))({'Idris.Prelude.Types.Right', 0})) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); {'Idris.Prelude.Types.Left', E22} -> (fun (V27) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E23, E24} -> (fun (V28, V29) -> V28 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--closeFile'(V0, V9)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E25, E26} -> (fun (V30, V31) -> case V30 of {'Idris.Prelude.Interfaces.MkMonad', E27, E28, E29} -> (fun (V32, V33, V34) -> case V32 of {'Idris.Prelude.Interfaces.MkApplicative', E30, E31, E32} -> (fun (V35, V36, V37) -> ((V36('erased'))({'Idris.Prelude.Types.Left', V27})) end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Left', E33} -> (fun (V38) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E34, E35} -> (fun (V39, V40) -> case V39 of {'Idris.Prelude.Interfaces.MkMonad', E36, E37, E38} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E39, E40, E41} -> (fun (V44, V45, V46) -> ((V45('erased'))({'Idris.Prelude.Types.Left', V38})) end(E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unknownError'() -> {'Idris.Erlang.System.File.GenericFileError', 0}.
'un--stdout'() -> 'standard_io'.
'un--stdin'() -> 'standard_io'.
'un--stderr'() -> 'standard_error'.
'un--removeFile'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V34, V35) -> case V34 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V36, V37, V38) -> case V36 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V39, V40, V41) -> ((V40('erased'))(('erlang':'apply'('file', 'delete', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V26, V27, V28)) end end end end end}, fun (V29) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'ok', V29)) end, fun (V30) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Right', 0}, V30)) end)), fun () -> fun (V31) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V32) -> {'Idris.Prelude.Types.Left', V32} end, fun (V33) -> ('un--error'(V33)) end, V31)) end end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--reason'() -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V6, V7)) end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V10, V11, V12)) end end end end end}, fun (V13) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'enoent', V13)) end, fun (V14) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Erlang.System.File.FileNotFound'}, V14)) end)), fun () -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V21, V22)) end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V25, V26, V27)) end end end end end}, fun (V28) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'eacces', V28)) end, fun (V29) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Erlang.System.File.PermissionDenied'}, V29)) end)), fun () -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V36, V37)) end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V40, V41, V42)) end end end end end}, fun (V43) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'eexist', V43)) end, fun (V44) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Erlang.System.File.FileExists'}, V44)) end)), fun () -> fun (V45) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(('un--unknownError'()), V45)) end end)) end)) end)).
'un--readFile'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V31, V32) -> case V31 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V33, V34, V35) -> case V33 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V36, V37, V38) -> ((V37('erased'))(('erlang':'apply'('file', 'read_file', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileReadError'}} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V18, V19, V20)) end end end end end, fun (V21) -> {'Idris.Prelude.Types.Right', V21} end, fun (V22) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V23) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V23)) end, V22)) end)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V26, V27, V28)) end end end end end, fun (V29) -> {'Idris.Prelude.Types.Left', V29} end, fun (V30) -> ('un--error'(V30)) end)) end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--openFile'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V24, V25) -> case V24 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V26, V27, V28) -> case V26 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V29, V30, V31) -> ((V30('erased'))(('erlang':'apply'('file', 'open', [V1 | [('un--fileModes'(V2)) | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(fun (V17) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V18) -> {'Idris.Prelude.Types.Right', V18} end, fun (V19) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V20) -> ('Idris.Idris2.Erlang.Decode':'un--pid'(V20)) end, V19)) end, V17)) end, fun () -> fun (V21) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V22) -> {'Idris.Prelude.Types.Left', V22} end, fun (V23) -> ('un--error'(V23)) end, V21)) end end)), V8)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkMode'(V0) -> ((((((('nested--5521-3209--in--un--getMs'(V0, case V0 of {'Idris.Erlang.System.File.MkPermissions', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) * 64) rem 9223372036854775808) + ((('nested--5521-3209--in--un--getMs'(V0, case V0 of {'Idris.Erlang.System.File.MkPermissions', E3, E4, E5} -> (fun (V4, V5, V6) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) * 8) rem 9223372036854775808)) rem 9223372036854775808) + ('nested--5521-3209--in--un--getMs'(V0, case V0 of {'Idris.Erlang.System.File.MkPermissions', E6, E7, E8} -> (fun (V7, V8, V9) -> V9 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))) rem 9223372036854775808).
'un--firstExists'(V0, V1) -> case V1 of [] -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))({'Idris.Prelude.Types.Nothing'})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E8 | E9] -> (fun (V10, V11) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E10, E11} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V14, V15, V16) -> ((((V15('erased'))('erased'))(('un--exists'(V0, V10))))(fun (V17) -> case V17 of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V23, V24, V25) -> ((V24('erased'))({'Idris.Prelude.Types.Just', V10})) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> ('un--firstExists'(V0, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fileStatusTime'(V0, V1) -> ('un--fileInfo'(V0, V1, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V2) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V3) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V3)) end, fun (V4) -> ('Idris.Idris2.Erlang.Decode':'un--integer'(V4)) end, V2)) end)).
'un--fileSize'(V0, V1) -> ('un--fileInfo'(V0, V1, 0, fun (V2) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V3) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V3)) end, fun (V4) -> ('Idris.Idris2.Erlang.Decode':'un--integer'(V4)) end, V2)) end)).
'un--fileModifiedTime'(V0, V1) -> ('un--fileInfo'(V0, V1, (1 + (1 + (1 + (1 + 0)))), fun (V2) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V3) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V3)) end, fun (V4) -> ('Idris.Idris2.Erlang.Decode':'un--integer'(V4)) end, V2)) end)).
'un--fileModes'(V0) -> begin (V1 = case V0 of 0 -> ['read' | []]; 1 -> ['write' | []]; 2 -> ['append' | []]; 3 -> ['read' | ['write' | []]]; _ -> [] end), ['binary' | V1] end.
'un--fileInfo'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('file', 'read_file_info', [V1 | [[{'time', 'posix'} | []] | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> ('case--fileInfo-2851'(V0, V3, V2, V1, V9, ('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(fun (V10) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V11) -> {'Idris.Prelude.Types.Right', V11} end, fun (V12) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V13) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V13)) end, V12)) end, V10)) end, fun () -> fun (V14) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V15) -> {'Idris.Prelude.Types.Left', V15} end, fun (V16) -> ('un--error'(V16)) end, V14)) end end)), V9)))) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fileAccessTime'(V0, V1) -> ('un--fileInfo'(V0, V1, (1 + (1 + (1 + 0))), fun (V2) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V3) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V3)) end, fun (V4) -> ('Idris.Idris2.Erlang.Decode':'un--integer'(V4)) end, V2)) end)).
'un--fflush'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))(0)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fPutStrLn'(V0, V1, V2) -> ('un--fPutStr'(V0, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<"\x{a}"/utf8>>)))).
'un--fPutStr'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V35, V36) -> case V35 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V37, V38, V39) -> case V37 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V40, V41, V42) -> ((V41('erased'))(('erlang':'apply'('file', 'write', [V1 | [V2 | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V23, V24)) end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V27, V28, V29)) end end end end end}, fun (V30) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'ok', V30)) end, fun (V31) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Right', 0}, V31)) end)), fun () -> fun (V32) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V33) -> {'Idris.Prelude.Types.Left', V33} end, fun (V34) -> ('un--error'(V34)) end, V32)) end end)), V8)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fGetLine'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V38, V39) -> case V38 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V40, V41, V42) -> case V40 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V43, V44, V45) -> ((V44('erased'))(('erlang':'apply'('file', 'read_line', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(fun (V16) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V17) -> {'Idris.Prelude.Types.Right', V17} end, fun (V18) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V19) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V19)) end, V18)) end, V16)) end, fun () -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V26, V27)) end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V30, V31, V32)) end end end end end}, fun (V33) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'eof', V33)) end, fun (V34) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Right', <<""/utf8>>}, V34)) end)), fun () -> fun (V35) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V36) -> {'Idris.Prelude.Types.Left', V36} end, fun (V37) -> ('un--error'(V37)) end, V35)) end end)) end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fGetChar'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V41, V42) -> case V41 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V43, V44, V45) -> case V43 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V46, V47, V48) -> ((V47('erased'))(('erlang':'apply'('file', 'read', [V1 | [1 | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(fun (V16) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V17) -> case V17 of E21 -> (fun (V18) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileReadError'}} end, fun () -> fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V19))} end end, ('Idris.Idris2.Prelude.Types':'un--strUncons'(V18)))) end((fun (V20) -> ('unicode':'characters_to_binary'(V20)) end(E21)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V21) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V22) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V22)) end, V21)) end, V16)) end, fun () -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V29, V30)) end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V33, V34, V35)) end end end end end}, fun (V36) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'eof', V36)) end, fun (V37) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileReadError'}}, V37)) end)), fun () -> fun (V38) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V39) -> {'Idris.Prelude.Types.Left', V39} end, fun (V40) -> ('un--error'(V40)) end, V38)) end end)) end)), V7)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fEOF'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V79, V80) -> case V79 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V81, V82, V83) -> case V81 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V84, V85, V86) -> ((V85('erased'))(('erlang':'apply'('file', 'read', [V1 | [1 | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> ('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V13, V14, V15) -> ((V14('erased'))(1)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V26, V27, V28)) end end end end end}, fun (V29) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V30) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V30)) end, V29)) end, fun (V31) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(('nested--4558-2276--in--un--scanBack'(V0, V1)), V31)) end)), fun () -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V38, V39)) end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V42, V43, V44)) end end end end end}, fun (V45) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'eof', V45)) end, fun (V46) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V47, V48) -> case V47 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V49, V50, V51) -> case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V52, V53, V54) -> ((V53('erased'))(1)) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V61, V62)) end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V65, V66, V67)) end end end end end}, fun (V68) -> ('Idris.Idris2.Erlang.Decode':'un--errorTuple'(fun (V69) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V69)) end, V68)) end, fun (V70) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(case V0 of {'Idris.Prelude.IO.MkHasIO', E29, E30} -> (fun (V71, V72) -> case V71 of {'Idris.Prelude.Interfaces.MkMonad', E31, E32, E33} -> (fun (V73, V74, V75) -> case V73 of {'Idris.Prelude.Interfaces.MkApplicative', E34, E35, E36} -> (fun (V76, V77, V78) -> ((V77('erased'))(1)) end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V70)) end)) end)) end)), V7)) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exists'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(('un--openFile'(V0, V1, 0))))(fun (V7) -> case V7 of {'Idris.Prelude.Types.Right', E5} -> (fun (V8) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E6, E7} -> (fun (V9, V10) -> V9 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--closeFile'(V0, V8)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V11, V12) -> case V11 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V16, V17, V18) -> ((V17('erased'))(1)) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E5)); {'Idris.Prelude.Types.Left', E16} -> (fun (V19) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E17, E18} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Prelude.Interfaces.MkApplicative', E22, E23, E24} -> (fun (V25, V26, V27) -> ((V26('erased'))(0)) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--error'(V0) -> ('Idris.Idris2.Erlang.Decode':'un--errorTuple'(('un--reason'()), V0)).
'un--closeFile'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((((V7('erased'))('erased'))(fun (V18) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V15, V16, V17) -> ((V16('erased'))(('erlang':'apply'('file', 'close', [V1 | []])))) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chmodRaw'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V35, V36) -> case V35 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V37, V38, V39) -> case V37 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V40, V41, V42) -> ((V41('erased'))(('erlang':'apply'('file', 'change_mode', [V1 | [V2 | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', ('un--unknownError'())} end, ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V23, V24)) end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V27, V28, V29)) end end end end end}, fun (V30) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'ok', V30)) end, fun (V31) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Right', 0}, V31)) end)), fun () -> fun (V32) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V33) -> {'Idris.Prelude.Types.Left', V33} end, fun (V34) -> ('un--error'(V34)) end, V32)) end end)), V8)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chmod'(V0, V1, V2) -> ('un--chmodRaw'(V0, V1, ('un--mkMode'(V2)))).
