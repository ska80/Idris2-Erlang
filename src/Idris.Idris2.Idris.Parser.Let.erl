-module('Idris.Idris2.Idris.Parser.Let').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--mkDoLets,buildDoLets-2653'/6,
  'nested--7712-2528--in--un--mkLet'/5,
  'nested--7712-2527--in--un--groups'/4,
  'nested--7790-2604--in--un--buildLets'/3,
  'nested--7832-2640--in--un--buildDoLets'/3,
  'un--mkLets'/3,
  'un--mkDoLets'/2,
  'un--letFactory'/4,
  'un--LetDecl'/0
]).
'case--mkDoLets,buildDoLets-2653'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Parser.Let.MkLetBinder', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> case V7 of {'Idris.Idris.Syntax.PRef', E5, E6} -> (fun (V11, V12) -> case V12 of {'Idris.Core.Name.UN', E7} -> (fun (V13) -> case V10 of [] -> [case ('Idris.Idris2.Core.Name':'un--isPatternVariable'(V13)) of 1 -> {'Idris.Idris.Syntax.DoLet', V4, V11, {'Idris.Core.Name.UN', V13}, V6, V8, V9}; 0 -> {'Idris.Idris.Syntax.DoLetPat', V4, {'Idris.Idris.Syntax.PRef', V11, {'Idris.Core.Name.UN', V13}}, V8, V9, []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end | ('nested--7832-2640--in--un--buildDoLets'(V0, V1, V3))]; _ -> [{'Idris.Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7832-2640--in--un--buildDoLets'(V0, V1, V3))] end end(E7)); _ -> [{'Idris.Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7832-2640--in--un--buildDoLets'(V0, V1, V3))] end end(E5, E6)); {'Idris.Idris.Syntax.PImplicit', E8} -> (fun (V14) -> case V10 of [] -> [{'Idris.Idris.Syntax.DoLet', V4, V14, {'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}}, V6, V8, V9} | ('nested--7832-2640--in--un--buildDoLets'(V0, V1, V3))]; _ -> [{'Idris.Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7832-2640--in--un--buildDoLets'(V0, V1, V3))] end end(E8)); _ -> [{'Idris.Idris.Syntax.DoLetPat', V4, V7, V8, V9, V10} | ('nested--7832-2640--in--un--buildDoLets'(V0, V1, V3))] end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7712-2528--in--un--mkLet'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> (V3(('Idris.Idris2.Data.List1':'un--forget'(V5)))) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V9 = ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(case V6 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V7, V8) -> V7 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Data.List1':'un--last'(V6))))), (V2(('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V12, V13)) end end end end, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Data.List1':'dn--un--foldr_Foldable_List1'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Data.List1':'dn--un--foldl_Foldable_List1'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.List1':'dn--un--null_Foldable_List1'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.List1':'dn--un--foldlM_Foldable_List1'(V29, V30, V31, V32)) end end end end end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(V34)) end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Data.List1':'dn--un--foldMap_Foldable_List1'(V37, V38, V39)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V40, V41)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V42) -> case V42 of {'Idris.Libraries.Text.Bounded.MkBounded', E4, E5, E6} -> (fun (V43, V44, V45) -> V43 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6)), V9)))) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7712-2527--in--un--groups'(V0, V1, V2, V3) -> ('Idris.Idris2.Data.Either':'un--compress'(('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V4) -> case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V11, V12)) end end end end, V8, V4))} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V16, V17)) end end end end, V13, V4))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1)))))).
'nested--7790-2604--in--un--buildLets'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Idris.Parser.Let.MkLetBinder', E5, E6, E7, E8, E9} -> (fun (V8, V9, V10, V11, V12) -> begin (V13 = ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V3))))), {'Idris.Idris.Syntax.PLet', V13, V8, V9, V10, V11, ('nested--7790-2604--in--un--buildLets'(V0, V4, V2)), V12} end end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7832-2640--in--un--buildDoLets'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.FC':'un--boundToFC'(V1, V3))), ('case--mkDoLets,buildDoLets-2653'(V0, V1, V3, V4, V5, case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E2, E3, E4} -> (fun (V6, V7, V8) -> V6 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkLets'(V0, V1, V2) -> ('un--letFactory'(fun (V3) -> fun (V4) -> ('nested--7790-2604--in--un--buildLets'(V0, V3, V4)) end end, fun (V5) -> fun (V6) -> {'Idris.Idris.Syntax.PLocal', ('Idris.Idris2.Core.FC':'un--virtualiseFC'(('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V5)))), case V5 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6} end end, V1, V2)).
'un--mkDoLets'(V0, V1) -> ('un--letFactory'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--7832-2640--in--un--buildDoLets'(V1, V0, V2)), V3)) end end, fun (V4) -> fun (V5) -> [{'Idris.Idris.Syntax.DoLetLocal', ('Idris.Idris2.Core.FC':'un--boundToFC'(V0, V4)), case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | V5] end end, V1, [])).
'un--letFactory'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V4) -> ('nested--7712-2528--in--un--mkLet'(V3, V2, V1, V0, V4)) end, V3, ('nested--7712-2527--in--un--groups'(V3, V2, V1, V0)))).
'un--LetDecl'() -> {'Idris.Prelude.Basics.List', ('Idris.Idris2.Idris.Syntax':'un--PDecl'())}.
