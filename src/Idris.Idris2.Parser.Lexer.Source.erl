-module('Idris.Idris2.Parser.Lexer.Source').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lexTo-7710'/3,
  'nested--5746-7648--in--un--spotComment'/3,
  'nested--5429-7329--in--un--removeUnderscores'/1,
  'nested--5429-7328--in--un--removeOptionalLeadingSpace'/1,
  'nested--5429-7326--in--un--parseNamespace'/1,
  'nested--5429-7325--in--un--parseIdent'/1,
  'nested--5746-7647--in--un--isNotSpace'/3,
  'nested--5303-7133--in--un--fromBin'/2,
  'nested--5429-7327--in--un--countHashtag'/1,
  'nested--5303-7132--in--un--castBin'/2,
  'dn--un--show_Show_Token'/1,
  'dn--un--showPrec_Show_Token'/2,
  'dn--un--pretty_Pretty_Token'/1,
  'dn--un--prettyPrec_Pretty_Token'/2,
  'dn--un--__Impl_Show_Token'/0,
  'dn--un--__Impl_Pretty_Token'/0,
  'un--validSymbol'/0,
  'un--toEndComment'/1,
  'un--symbols'/0,
  'un--stringTokens'/2,
  'un--stringEnd'/1,
  'un--stringBegin'/0,
  'un--singleDash'/1,
  'un--singleBrace'/1,
  'un--reservedSymbols'/0,
  'un--rawTokens'/0,
  'un--pragma'/0,
  'un--multilineEnd'/1,
  'un--multilineBegin'/0,
  'un--mkDirective'/1,
  'un--lexTo'/2,
  'un--lex'/1,
  'un--keywords'/0,
  'un--isOpUserName'/1,
  'un--isOpName'/1,
  'un--isOpChar'/1,
  'un--holeIdent'/0,
  'un--groupSymbols'/0,
  'un--groupClose'/1,
  'un--fromOctLit'/1,
  'un--fromHexLit'/1,
  'un--fromBinLit'/1,
  'un--doubleLit'/0,
  'un--doubleDash'/1,
  'un--dotIdent'/0,
  'un--docComment'/0,
  'un--cgDirective'/0,
  'un--blockComment'/0
]).
'case--lexTo-7710'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V5 of {'Idris.Libraries.Text.Lexer.Tokenizer.EndInput'} -> (fun () -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V9, V10) -> begin (V11 = [{'Idris.Libraries.Text.Bounded.MkBounded', {'Idris.Parser.Lexer.Source.EndInput'}, 0, {'Idris.Libraries.Text.Bounded.MkBounds', V7, V9, V7, V9}} | []]), {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Data.Either':'un--partitionEithers'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('nested--5746-7648--in--un--spotComment'(V0, V1, V12)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V13) -> ('nested--5746-7647--in--un--isNotSpace'(V0, V1, V13)) end, V3)))))) of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', V14, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V15, V11))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E6, E7)); _ -> {'Idris.Prelude.Types.Left', V4} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Left', V4} end end()); _ -> {'Idris.Prelude.Types.Left', V4} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', V4} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5746-7648--in--un--spotComment'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Parser.Lexer.Source.Comment'} -> (fun () -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V8, V9)) end end end end, 0, V2))} end()); _ -> {'Idris.Prelude.Types.Right', V2} end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5429-7329--in--un--removeUnderscores'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--filter'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $_)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'nested--5429-7328--in--un--removeOptionalLeadingSpace'(V0) -> case ('Idris.Idris2.Data.String':'un--strM'(V0)) of {'Idris.Data.String.StrCons', E0, E1} -> (fun (V1, V2) -> case V1 of $  -> V2; _ -> V0 end end(E0, E1)); _ -> V0 end.
'nested--5429-7326--in--un--parseNamespace'(V0) -> case ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespacedIdent'(V0)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--5429-7325--in--un--parseIdent'(V2)) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V3) -> {'Idris.Parser.Lexer.Source.DotSepIdent', V3, V2} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5429-7325--in--un--parseIdent'(V0) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, V0, ('un--keywords'()))) of 1 -> {'Idris.Parser.Lexer.Source.Keyword', V0}; 0 -> {'Idris.Parser.Lexer.Source.Ident', V0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5746-7647--in--un--isNotSpace'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Parser.Lexer.Source.Space'} -> (fun () -> 0 end()); _ -> 1 end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5303-7133--in--un--fromBin'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case V2 of 0 -> (2 * ('nested--5303-7133--in--un--fromBin'(V0, V3))); _ -> (V2 + (2 * ('nested--5303-7133--in--un--fromBin'(V0, V3)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5429-7327--in--un--countHashtag'(V0) -> ('Idris.Idris2.Prelude.Types':'un--count'({'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V27, $#)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'nested--5303-7132--in--un--castBin'(V0, V1) -> case V1 of $1 -> 1; _ -> 0 end.
'dn--un--show_Show_Token'(V0) -> case V0 of {'Idris.Parser.Lexer.Source.CharLit', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"character "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)))) end(E0)); {'Idris.Parser.Lexer.Source.DoubleLit', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"double "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V2)))) end(E1)); {'Idris.Parser.Lexer.Source.IntegerLit', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"literal "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V3)))) end(E2)); {'Idris.Parser.Lexer.Source.StringBegin', E3} -> (fun (V4) -> case V4 of 1 -> <<"string begin"/utf8>>; 0 -> <<"multiline string begin"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Parser.Lexer.Source.StringEnd'} -> (fun () -> <<"string end"/utf8>> end()); {'Idris.Parser.Lexer.Source.InterpBegin'} -> (fun () -> <<"string interp begin"/utf8>> end()); {'Idris.Parser.Lexer.Source.InterpEnd'} -> (fun () -> <<"string interp end"/utf8>> end()); {'Idris.Parser.Lexer.Source.StringLit', E4, E5} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"string"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'(V5, $#)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V6)))))))) end(E4, E5)); {'Idris.Parser.Lexer.Source.HoleIdent', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"hole identifier "/utf8>>, V7)) end(E6)); {'Idris.Parser.Lexer.Source.Ident', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"identifier "/utf8>>, V8)) end(E7)); {'Idris.Parser.Lexer.Source.DotSepIdent', E8, E9} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"namespaced identifier "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V10)))))))) end(E8, E9)); {'Idris.Parser.Lexer.Source.DotIdent', E10} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"dot+identifier "/utf8>>, V11)) end(E10)); {'Idris.Parser.Lexer.Source.Symbol', E11} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"symbol "/utf8>>, V12)) end(E11)); {'Idris.Parser.Lexer.Source.Space'} -> (fun () -> <<"whitespace"/utf8>> end()); {'Idris.Parser.Lexer.Source.Comment'} -> (fun () -> <<"comment"/utf8>> end()); {'Idris.Parser.Lexer.Source.DocComment', E12} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"doc comment: \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, <<"\x{22}"/utf8>>)))) end(E12)); {'Idris.Parser.Lexer.Source.CGDirective', E13} -> (fun (V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CGDirective "/utf8>>, V14)) end(E13)); {'Idris.Parser.Lexer.Source.EndInput'} -> (fun () -> <<"end of input"/utf8>> end()); {'Idris.Parser.Lexer.Source.Keyword', E14} -> (fun (V15) -> V15 end(E14)); {'Idris.Parser.Lexer.Source.Pragma', E15} -> (fun (V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pragma "/utf8>>, V16)) end(E15)); {'Idris.Parser.Lexer.Source.Unrecognised', E16} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unrecognised "/utf8>>, V17)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_Token'(V0, V1) -> ('dn--un--show_Show_Token'(V1)).
'dn--un--pretty_Pretty_Token'(V0) -> case V0 of {'Idris.Parser.Lexer.Source.CharLit', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"character"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--squotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V1)))))) end(E0)); {'Idris.Parser.Lexer.Source.DoubleLit', E1} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"double"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Double'(V2)))) end(E1)); {'Idris.Parser.Lexer.Source.IntegerLit', E2} -> (fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"literal"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V3)))) end(E2)); {'Idris.Parser.Lexer.Source.StringBegin', E3} -> (fun (V4) -> case V4 of 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string begin"/utf8>>)); 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"multiline string begin"/utf8>>)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Parser.Lexer.Source.StringEnd'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string end"/utf8>>)) end()); {'Idris.Parser.Lexer.Source.InterpBegin'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string interp begin"/utf8>>)) end()); {'Idris.Parser.Lexer.Source.InterpEnd'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"string interp end"/utf8>>)) end()); {'Idris.Parser.Lexer.Source.StringLit', E4, E5} -> (fun (V5, V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"string"/utf8>>, ('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'(V5, $#)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V6)))))) end(E4, E5)); {'Idris.Parser.Lexer.Source.HoleIdent', E6} -> (fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"hole identifier"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V7)))) end(E6)); {'Idris.Parser.Lexer.Source.Ident', E7} -> (fun (V8) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"identifier"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V8)))) end(E7)); {'Idris.Parser.Lexer.Source.DotSepIdent', E8, E9} -> (fun (V9, V10) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"namespaced identifier"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Namespace'(V9)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V10)))))) end(E8, E9)); {'Idris.Parser.Lexer.Source.DotIdent', E10} -> (fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"dot+identifier"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V11)))) end(E10)); {'Idris.Parser.Lexer.Source.Symbol', E11} -> (fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"symbol"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V12)))) end(E11)); {'Idris.Parser.Lexer.Source.Space'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"space"/utf8>>)) end()); {'Idris.Parser.Lexer.Source.Comment'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"comment"/utf8>>)) end()); {'Idris.Parser.Lexer.Source.DocComment', E12} -> (fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"doc comment:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V13)))))) end(E12)); {'Idris.Parser.Lexer.Source.CGDirective', E13} -> (fun (V14) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"CGDirective"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V14)))) end(E13)); {'Idris.Parser.Lexer.Source.EndInput'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"end of input"/utf8>>)) end()); {'Idris.Parser.Lexer.Source.Keyword', E14} -> (fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V15)) end(E14)); {'Idris.Parser.Lexer.Source.Pragma', E15} -> (fun (V16) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"pragma"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V16)))) end(E15)); {'Idris.Parser.Lexer.Source.Unrecognised', E16} -> (fun (V17) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Unrecognised"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V17)))) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_Token'(V0, V1) -> ('dn--un--pretty_Pretty_Token'(V1)).
'dn--un--__Impl_Show_Token'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Token'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Token'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Token'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Token'(V3, V4)) end end end}.
'un--validSymbol'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V0) -> ('un--isOpChar'(V0)) end)))).
'un--toEndComment'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--empty'()); _ -> begin (V1 = (V0 - 1)), ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V2, $-)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V2, ${)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V2, $\x{22})); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))), fun () -> ('un--toEndComment'((1 + V1))) end}, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'(${)), fun () -> ('un--singleBrace'(V1)) end}, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), fun () -> ('un--singleDash'(V1)) end}, {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--stringLit'()), fun () -> ('un--toEndComment'((1 + V1))) end})))))) end end.
'un--symbols'() -> [<<","/utf8>> | [<<";"/utf8>> | [<<"_"/utf8>> | [<<"`"/utf8>> | []]]]].
'un--stringTokens'(V0, V1) -> begin (V2 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'(V1, $#))))), begin (V3 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<"{"/utf8>>))), begin (V4 = ('Idris.Idris2.Libraries.Text.Lexer':'un--escape'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V2)), ('Idris.Idris2.Libraries.Text.Lexer':'un--any'())))), begin (V5 = ('Idris.Idris2.Libraries.Text.Lexer':'un--non'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(case V0 of 1 -> ('un--multilineEnd'(V1)); 0 -> ('un--stringEnd'(V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--someUntil'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V3)), ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(V4, V5)))), fun (V6) -> {'Idris.Parser.Lexer.Source.StringLit', V1, V6} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V3)), fun (V7) -> {'Idris.Parser.Lexer.Source.InterpBegin'} end, fun (V8) -> 0 end, fun () -> fun (V9) -> ('un--rawTokens'()) end end, fun (V10) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})) end, fun (V11) -> {'Idris.Parser.Lexer.Source.InterpEnd'} end)) end)) end end end end.
'un--stringEnd'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'(V0, $#)))).
'un--stringBegin'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($#)))), ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22}))}.
'un--singleDash'(V0) -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), fun () -> ('un--doubleDash'(V0)) end}, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})), fun () -> ('un--toEndComment'(V0)) end}, ('un--toEndComment'((1 + V0))))))).
'un--singleBrace'(V0) -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)))) end}, fun () -> ('un--singleDash'((1 + V0))) end}, ('un--toEndComment'((1 + V0))))).
'un--reservedSymbols'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--symbols'()), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--groupSymbols'()), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V2, V3)) end end end end, fun (V4) -> ('un--groupClose'(V4)) end, ('un--groupSymbols'()))), [<<"%"/utf8>> | [<<"\x{5c}"/utf8>> | [<<":"/utf8>> | [<<"="/utf8>> | [<<":="/utf8>> | [<<"|"/utf8>> | [<<"|||"/utf8>> | [<<"<-"/utf8>> | [<<"->"/utf8>> | [<<"=>"/utf8>> | [<<"?"/utf8>> | [<<"!"/utf8>> | [<<"&"/utf8>> | [<<"**"/utf8>> | [<<".."/utf8>> | [<<"~"/utf8>> | [<<"@"/utf8>> | []]]]]]]]]]]]]]]]]])))))).
'un--rawTokens'() -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Parser.Lexer.Common':'un--comment'()), fun (V0) -> {'Idris.Parser.Lexer.Source.Comment'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--blockComment'()), fun (V1) -> {'Idris.Parser.Lexer.Source.Comment'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--docComment'()), fun (V2) -> {'Idris.Parser.Lexer.Source.DocComment', ('nested--5429-7328--in--un--removeOptionalLeadingSpace'(('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'((1 + (1 + (1 + 0))), V2))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--cgDirective'()), fun (V3) -> ('un--mkDirective'(V3)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--holeIdent'()), fun (V4) -> {'Idris.Parser.Lexer.Source.HoleIdent', ('Idris.Idris2.Data.String':'un--strTail'(V4))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('Idris.Idris2.Libraries.Text.Lexer':'un--choice'(1, {'Idris.Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V33, V34)) end end end end, fun (V35) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V35)) end, ('un--groupSymbols'()))))), fun (V36) -> {'Idris.Parser.Lexer.Source.Symbol', V36} end, fun (V37) -> V37 end, fun () -> fun (V38) -> ('un--rawTokens'()) end end, fun (V39) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(('un--groupClose'(V39)))) end, fun (V40) -> {'Idris.Parser.Lexer.Source.Symbol', V40} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--choice'(1, {'Idris.Prelude.Interfaces.MkFoldable', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V52)) end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V56, V57, V58, V59)) end end end end end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V64, V65, V66)) end end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V69, V70)) end end end end, fun (V71) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V71)) end, ('un--symbols'()))))), fun (V72) -> {'Idris.Parser.Lexer.Source.Symbol', V72} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--doubleLit'()), fun (V73) -> {'Idris.Parser.Lexer.Source.DoubleLit', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Double'(V73))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--binUnderscoredLit'()), fun (V74) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('un--fromBinLit'(('nested--5429-7329--in--un--removeUnderscores'(V74))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--hexUnderscoredLit'()), fun (V75) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('un--fromHexLit'(('nested--5429-7329--in--un--removeUnderscores'(V75))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--octUnderscoredLit'()), fun (V76) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('un--fromOctLit'(('nested--5429-7329--in--un--removeUnderscores'(V76))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--digitsUnderscoredLit'()), fun (V77) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Integer'(('nested--5429-7329--in--un--removeUnderscores'(V77))))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('un--multilineBegin'()), fun (V78) -> {'Idris.Parser.Lexer.Source.StringBegin', 0} end, fun (V79) -> ('nested--5429-7327--in--un--countHashtag'(V79)) end, fun () -> fun (V80) -> ('un--stringTokens'(1, V80)) end end, fun (V81) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(('un--multilineEnd'(V81)))) end, fun (V82) -> {'Idris.Parser.Lexer.Source.StringEnd'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'(('un--stringBegin'()), fun (V83) -> {'Idris.Parser.Lexer.Source.StringBegin', 1} end, fun (V84) -> ('nested--5429-7327--in--un--countHashtag'(V84)) end, fun () -> fun (V85) -> ('un--stringTokens'(0, V85)) end end, fun (V86) -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(('un--stringEnd'(V86)))), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--reject'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})))) end} end, fun (V87) -> {'Idris.Parser.Lexer.Source.StringEnd'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--charLit'()), fun (V88) -> {'Idris.Parser.Lexer.Source.CharLit', ('Idris.Idris2.Libraries.Utils.String':'un--stripQuotes'(V88))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--dotIdent'()), fun (V89) -> {'Idris.Parser.Lexer.Source.DotIdent', ('Idris.Idris2.Data.String':'un--strTail'(V89))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Parser.Lexer.Common':'un--namespacedIdent'()), fun (V90) -> ('nested--5429-7326--in--un--parseNamespace'(V90)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()), fun (V91) -> ('nested--5429-7325--in--un--parseIdent'(V91)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--pragma'()), fun (V92) -> {'Idris.Parser.Lexer.Source.Pragma', ('Idris.Idris2.Data.String':'un--strTail'(V92))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()), fun (V93) -> {'Idris.Parser.Lexer.Source.Space'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('un--validSymbol'()), fun (V94) -> {'Idris.Parser.Lexer.Source.Symbol', V94} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'(('Idris.Idris2.Libraries.Text.Lexer':'un--symbol'()), fun (V95) -> {'Idris.Parser.Lexer.Source.Unrecognised', V95} end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)) end)).
'un--pragma'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($%)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--multilineEnd'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}\x{22}\x{22}"/utf8>>, ('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'(V0, $#)))).
'un--multilineBegin'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($#)))), ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(<<"\x{22}\x{22}\x{22}"/utf8>>))}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--manyUntil'(('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()), ('Idris.Idris2.Libraries.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()) end}.
'un--mkDirective'(V0) -> {'Idris.Parser.Lexer.Source.CGDirective', ('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'((1 + (1 + (1 + 0))), ('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), V0))))}.
'un--lexTo'(V0, V1) -> ('case--lexTo-7710'(V1, V0, ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--lexTo'(V0, ('un--rawTokens'()), V1)))).
'un--lex'(V0) -> ('un--lexTo'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V1) -> 0 end)), V0)).
'un--keywords'() -> [<<"data"/utf8>> | [<<"module"/utf8>> | [<<"where"/utf8>> | [<<"let"/utf8>> | [<<"in"/utf8>> | [<<"do"/utf8>> | [<<"record"/utf8>> | [<<"auto"/utf8>> | [<<"default"/utf8>> | [<<"implicit"/utf8>> | [<<"mutual"/utf8>> | [<<"namespace"/utf8>> | [<<"parameters"/utf8>> | [<<"with"/utf8>> | [<<"proof"/utf8>> | [<<"impossible"/utf8>> | [<<"case"/utf8>> | [<<"of"/utf8>> | [<<"if"/utf8>> | [<<"then"/utf8>> | [<<"else"/utf8>> | [<<"forall"/utf8>> | [<<"rewrite"/utf8>> | [<<"using"/utf8>> | [<<"interface"/utf8>> | [<<"implementation"/utf8>> | [<<"open"/utf8>> | [<<"import"/utf8>> | [<<"public"/utf8>> | [<<"export"/utf8>> | [<<"private"/utf8>> | [<<"infixl"/utf8>> | [<<"infixr"/utf8>> | [<<"infix"/utf8>> | [<<"prefix"/utf8>> | [<<"total"/utf8>> | [<<"partial"/utf8>> | [<<"covering"/utf8>> | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--isOpUserName'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end, fun (V6) -> ('Idris.Idris2.Builtin':'un--fst'(V6)) end, ('Idris.Idris2.Prelude.Types':'un--strUncons'(V1)))), fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V10, V11)) end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V16, V17)) end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V20, V21)) end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V23)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V26, V27)) end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V32, V33)) end end end end}, fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V36, V37)) end end end}, ('un--isOpChar'(V7)))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(1)) end)) end)))) end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V38) -> 0 end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isOpName'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V1) -> ('un--isOpUserName'(V1)) end end, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--isOpChar'(V0) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V3, V4)) end end}, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(<<":!#$%&*+./<=>?@\x{5c}^|-~"/utf8>>)))).
'un--holeIdent'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($?)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--groupSymbols'() -> [<<".("/utf8>> | [<<"@{"/utf8>> | [<<"[|"/utf8>> | [<<"("/utf8>> | [<<"{"/utf8>> | [<<"[<"/utf8>> | [<<"[>"/utf8>> | [<<"["/utf8>> | [<<"`("/utf8>> | [<<"`{"/utf8>> | [<<"`["/utf8>> | []]]]]]]]]]]].
'un--groupClose'(V0) -> case V0 of <<".("/utf8>> -> <<")"/utf8>>; <<"@{"/utf8>> -> <<"}"/utf8>>; <<"[|"/utf8>> -> <<"|]"/utf8>>; <<"("/utf8>> -> <<")"/utf8>>; <<"["/utf8>> -> <<"]"/utf8>>; <<"[<"/utf8>> -> <<"]"/utf8>>; <<"[>"/utf8>> -> <<"]"/utf8>>; <<"{"/utf8>> -> <<"}"/utf8>>; <<"`("/utf8>> -> <<")"/utf8>>; <<"`{"/utf8>> -> <<"}"/utf8>>; <<"`["/utf8>> -> <<"]"/utf8>>; _ -> <<""/utf8>> end.
'un--fromOctLit'(V0) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(2)))) of 1 -> 0; 0 -> begin (V1 = ('Idris.Idris2.Data.String':'un--strTail'(('Idris.Idris2.Data.String':'un--strTail'(V0))))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Libraries.Utils.Octal':'un--fromOct'(('Idris.Idris2.Prelude.Types':'un--reverse'(V1)))))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromHexLit'(V0) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(2)))) of 1 -> 0; 0 -> begin (V1 = ('Idris.Idris2.Data.String':'un--strTail'(('Idris.Idris2.Data.String':'un--strTail'(V0))))), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Libraries.Utils.Hex':'un--fromHex'(('Idris.Idris2.Prelude.Types':'un--reverse'(V1)))))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromBinLit'(V0) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V0)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(2)))) of 1 -> 0; 0 -> begin (V1 = ('Idris.Idris2.Data.String':'un--strTail'(('Idris.Idris2.Data.String':'un--strTail'(V0))))), ('nested--5303-7133--in--un--fromBin'(V0, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('nested--5303-7132--in--un--castBin'(V0, V2)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--doubleLit'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--opt'({'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($e)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--opt'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($+)))))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()) end})) end}.
'un--doubleDash'(V0) -> {'Idris.Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)))), ('Idris.Idris2.Libraries.Text.Lexer':'un--choice'(1, {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, [{'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})), fun () -> ('un--toEndComment'(V0)) end} | [{'Idris.Libraries.Text.Lexer.Core.SeqEmpty', ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($\x{a})))), ('un--toEndComment'((1 + V0)))} | []]]))}.
'un--dotIdent'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)), fun () -> ('Idris.Idris2.Parser.Lexer.Common':'un--identNormal'()) end}.
'un--docComment'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($|)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($|)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($\x{a})))) end}.
'un--cgDirective'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(<<"%cg"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'({'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()))), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V0) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V0)) end)))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'(${)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($})))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})) end}, ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($\x{a})))))) end}.
'un--blockComment'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'(${)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)) end}, fun () -> ('un--toEndComment'((1 + 0))) end}.
