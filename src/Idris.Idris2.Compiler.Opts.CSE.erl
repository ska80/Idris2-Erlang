-module('Idris.Idris2.Compiler.Opts.CSE').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--adjust-11008'/3,
  'nested--9271-11390--in--un--toDef'/2,
  'un--store'/2,
  'un--sizeConstAlt'/1,
  'un--sizeConAlt'/1,
  'un--size'/1,
  'un--dropVar'/2,
  'un--dropEnv'/2,
  'un--dropConstAlt'/2,
  'un--dropConAlt'/2,
  'un--cseNewToplevelDefs'/1,
  'un--cseDef'/4,
  'un--analyzeSubExp'/2,
  'un--analyzeNames'/3,
  'un--analyzeName'/4,
  'un--analyzeDef'/2,
  'un--analyzeConstAlt'/2,
  'un--analyzeConAlt'/2,
  'un--analyze'/2,
  'un--adjustSubExp'/2,
  'un--adjustDef'/2,
  'un--adjustConstAlt'/2,
  'un--adjustConAlt'/2,
  'un--adjust'/2,
  'un--UsageMap'/0
]).
'case--adjust-11008'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--adjustSubExp'(V1, V0)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'({'Idris.Builtin.MkPair', ('un--size'(V3)), V3}, V1)) of {'Idris.Prelude.Types.Just', E1} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> {'Idris.Core.CompileExpr.CApp', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.CompileExpr.CRef', {'Idris.Core.FC.EmptyFC'}, V5}, []} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--adjustSubExp'(V1, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9271-11390--in--un--toDef'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V3 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.CompileExpr.MkFun', [], ('un--adjustSubExp'(V0, V5))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--store'(V0, V1) -> begin (V2 = ('un--size'(V1))), fun (V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V2, 5)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Compiler.Opts.CSE.MkSt', E2, E3} -> (fun (V8, V9) -> begin (V13 = case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'({'Idris.Builtin.MkPair', V2, V1}, V8)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', (V12 + 1), V9}}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.Name.MN', <<"csegen"/utf8>>, V9}, {'Idris.Builtin.MkPair', 1, ((V9 + 1) rem 9223372036854775808)}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V18, V19) -> begin (V21 = begin (V20 = ('erlang':'put'(V0, {'Idris.Compiler.Opts.CSE.MkSt', ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'({'Idris.Builtin.MkPair', V2, V1}, {'Idris.Builtin.MkPair', V16, V18}, V8)), V19}))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Right', V18} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--sizeConstAlt'(V0) -> case V0 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V1, V2) -> (1 + ('un--size'(V2))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sizeConAlt'(V0) -> case V0 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> (1 + ('un--size'(V5))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--size'(V0) -> case V0 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V1, V2) -> 1 end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V3, V4) -> 1 end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V5, V6, V7) -> (('un--size'(V7)) + 1) end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V8, V9, V10, V11, V12) -> ((('un--size'(V11)) + ('un--size'(V12))) + 1) end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V13, V14, V15) -> (('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V42) -> fun (V43) -> (V42 + V43) end end, fun (V44) -> fun (V45) -> (V44 * V45) end end, fun (V46) -> V46 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('un--size'(V47)) end, V15)))) + 1) end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V48, V49, V50, V51, V52) -> (('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V64)) end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V68, V69, V70, V71)) end end end end end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V73)) end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V76, V77, V78)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V79) -> fun (V80) -> (V79 + V80) end end, fun (V81) -> fun (V82) -> (V81 * V82) end end, fun (V83) -> V83 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V84) -> ('un--size'(V84)) end, V52)))) + 1) end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V85, V86, V87, V88) -> (('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'(V91, V92, V93)) end end end end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'(V96, V97, V98)) end end end end end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'(V100)) end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Data.Vect':'dn--un--foldlM_Foldable_(Vect $n)'(V104, V105, V106, V107)) end end end end end end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V109)) end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'(V112, V113, V114)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V115) -> fun (V116) -> (V115 + V116) end end, fun (V117) -> fun (V118) -> (V117 * V118) end end, fun (V119) -> V119 end}}, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V120) -> ('un--size'(V120)) end, V88)))) + 1) end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V121, V122, V123) -> (('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V126, V127, V128)) end end end end end, fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V131, V132, V133)) end end end end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V135)) end end, fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V139, V140, V141, V142)) end end end end end end end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V144)) end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V147, V148, V149)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V150) -> fun (V151) -> (V150 + V151) end end, fun (V152) -> fun (V153) -> (V152 * V153) end end, fun (V154) -> V154 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V155) -> ('un--size'(V155)) end, V123)))) + 1) end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V156, V157, V158) -> (('un--size'(V158)) + 1) end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V159, V160, V161) -> (('un--size'(V161)) + 1) end(E30, E31, E32)); {'Idris.Core.CompileExpr.CPrimVal', E33, E34} -> (fun (V162, V163) -> 1 end(E33, E34)); {'Idris.Core.CompileExpr.CErased', E35} -> (fun (V164) -> 1 end(E35)); {'Idris.Core.CompileExpr.CCrash', E36, E37} -> (fun (V165, V166) -> 1 end(E36, E37)); {'Idris.Core.CompileExpr.CConCase', E38, E39, E40, E41} -> (fun (V167, V168, V169, V170) -> (((('un--size'(V168)) + ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V173, V174, V175)) end end end end end, fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V178, V179, V180)) end end end end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V182)) end end, fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V186, V187, V188, V189)) end end end end end end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V191)) end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V194, V195, V196)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V197) -> fun (V198) -> (V197 + V198) end end, fun (V199) -> fun (V200) -> (V199 * V200) end end, fun (V201) -> V201 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V202) -> ('un--sizeConAlt'(V202)) end, V169))))) + ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'(V205, V206, V207)) end end end end end, fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'(V210, V211, V212)) end end end end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'(V214)) end end, fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_Maybe'(V218, V219, V220, V221)) end end end end end end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(V223)) end end, fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'(V226, V227, V228)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V229) -> fun (V230) -> (V229 + V230) end end, fun (V231) -> fun (V232) -> (V231 * V232) end end, fun (V233) -> V233 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V234) -> ('un--size'(V234)) end, V170))))) + 1) end(E38, E39, E40, E41)); {'Idris.Core.CompileExpr.CConstCase', E42, E43, E44, E45} -> (fun (V235, V236, V237, V238) -> (((('un--size'(V236)) + ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V241, V242, V243)) end end end end end, fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V246, V247, V248)) end end end end end, fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V250)) end end, fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V254, V255, V256, V257)) end end end end end end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V259)) end end, fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V262, V263, V264)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V265) -> fun (V266) -> (V265 + V266) end end, fun (V267) -> fun (V268) -> (V267 * V268) end end, fun (V269) -> V269 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V270) -> ('un--sizeConstAlt'(V270)) end, V237))))) + ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V271) -> fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'(V273, V274, V275)) end end end end end, fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'(V278, V279, V280)) end end end end end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'(V282)) end end, fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_Maybe'(V286, V287, V288, V289)) end end end end end end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(V291)) end end, fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'(V294, V295, V296)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V297) -> fun (V298) -> (V297 + V298) end end, fun (V299) -> fun (V300) -> (V299 * V300) end end, fun (V301) -> V301 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V302) -> ('un--size'(V302)) end, V238))))) + 1) end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropVar'(V0, V1) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> begin (V4 = (V1 - 1)), case ('un--dropVar'(V3, V4)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Just', (1 + V5)} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropEnv'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end, fun (V8) -> {'Idris.Core.CompileExpr.CLocal', V2, V3} end, ('un--dropVar'(V0, V2)))) end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V9, V10) -> {'Idris.Prelude.Types.Just', {'Idris.Core.CompileExpr.CRef', V9, V10}} end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V11, V12, V13) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V16, V17)) end end end end, fun (V18) -> {'Idris.Core.CompileExpr.CLam', V11, V12, V18} end, ('un--dropEnv'([V12 | V0], V13)))) end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V19, V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V26, V27)) end end end end, fun (V28) -> fun (V29) -> {'Idris.Core.CompileExpr.CLet', V19, V20, V21, V28, V29} end end, ('un--dropEnv'(V0, V22)))), ('un--dropEnv'([V20 | V0], V23)))) end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V30, V31, V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V35, V36)) end end end end, fun (V37) -> fun (V38) -> {'Idris.Core.CompileExpr.CApp', V30, V37, V38} end end, ('un--dropEnv'(V0, V31)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V41, V42)) end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V44)) end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V47, V48)) end end end end}, fun (V49) -> ('un--dropEnv'(V0, V49)) end, V32)))) end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V50, V51, V52, V53, V54) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V57, V58)) end end end end, fun (V59) -> {'Idris.Core.CompileExpr.CCon', V50, V51, V52, V53, V59} end, ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V62, V63)) end end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V65)) end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V68, V69)) end end end end}, fun (V70) -> ('un--dropEnv'(V0, V70)) end, V54)))) end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V71, V72, V73, V74) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V77, V78)) end end end end, fun (V79) -> {'Idris.Core.CompileExpr.COp', V71, V72, V73, V79} end, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Idris.Prelude.Interfaces.MkApplicative', fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V82, V83)) end end end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V85)) end end, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V88, V89)) end end end end}, fun (V90) -> ('un--dropEnv'(V0, V90)) end, V74)))) end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V91, V92, V93) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V96, V97)) end end end end, fun (V98) -> {'Idris.Core.CompileExpr.CExtPrim', V91, V92, V98} end, ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V101, V102)) end end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V104)) end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V107, V108)) end end end end}, fun (V109) -> ('un--dropEnv'(V0, V109)) end, V93)))) end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V110, V111, V112) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V115, V116)) end end end end, fun (V117) -> {'Idris.Core.CompileExpr.CForce', V110, V111, V117} end, ('un--dropEnv'(V0, V112)))) end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V118, V119, V120) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V123, V124)) end end end end, fun (V125) -> {'Idris.Core.CompileExpr.CDelay', V118, V119, V125} end, ('un--dropEnv'(V0, V120)))) end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V126, V127, V128, V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V132, V133)) end end end end, fun (V134) -> fun (V135) -> fun (V136) -> {'Idris.Core.CompileExpr.CConCase', V126, V134, V135, V136} end end end, ('un--dropEnv'(V0, V127)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V139, V140)) end end end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V142)) end end, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V145, V146)) end end end end}, fun (V147) -> ('un--dropConAlt'(V0, V147)) end, V128)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_Maybe'({'Idris.Prelude.Interfaces.MkApplicative', fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V150, V151)) end end end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V153)) end end, fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V156, V157)) end end end end}, fun (V158) -> ('un--dropEnv'(V0, V158)) end, V129)))) end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V159, V160, V161, V162) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V165, V166)) end end end end, fun (V167) -> fun (V168) -> fun (V169) -> {'Idris.Core.CompileExpr.CConstCase', V159, V167, V168, V169} end end end, ('un--dropEnv'(V0, V160)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V172, V173)) end end end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V175)) end end, fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V178, V179)) end end end end}, fun (V180) -> ('un--dropConstAlt'(V0, V180)) end, V161)))), ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_Maybe'({'Idris.Prelude.Interfaces.MkApplicative', fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V183, V184)) end end end end, fun (V185) -> fun (V186) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V186)) end end, fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V189, V190)) end end end end}, fun (V191) -> ('un--dropEnv'(V0, V191)) end, V162)))) end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V192, V193) -> {'Idris.Prelude.Types.Just', {'Idris.Core.CompileExpr.CPrimVal', V192, V193}} end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V194) -> {'Idris.Prelude.Types.Just', {'Idris.Core.CompileExpr.CErased', V194}} end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V195, V196) -> {'Idris.Prelude.Types.Just', {'Idris.Core.CompileExpr.CCrash', V195, V196}} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropConstAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end, fun (V8) -> {'Idris.Core.CompileExpr.MkConstAlt', V2, V8} end, ('un--dropEnv'(V0, V3)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropConAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end, fun (V11) -> {'Idris.Core.CompileExpr.MkConAlt', V2, V3, V4, V5, ('Idris.Idris2.Core.CompileExpr':'un--embed'(V11))} end, ('un--dropEnv'(V5, V6)))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cseNewToplevelDefs'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('nested--9271-11390--in--un--toDef'(V0, V1)) end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(V0)))).
'un--cseDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V60 of {'Idris.Prelude.Types.Just', E55} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V63 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--adjustDef'(V1, V62))}}}} end(E55)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--analyzeSubExp'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', 0} end end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V8, V9, V10) -> ('un--analyze'(V0, V10)) end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V11, V12, V13, V14, V15) -> fun (V16) -> begin (V17 = (('un--analyze'(V0, V14))(V16))), case V17 of {'Idris.Prelude.Types.Left', E12} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V19) -> (('un--analyze'(V0, V15))(V16)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E14, E15, E16} -> (fun (V20, V21, V22) -> fun (V23) -> begin (V24 = (('un--analyze'(V0, V21))(V23))), case V24 of {'Idris.Prelude.Types.Left', E17} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V26) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V27) -> ('un--analyze'(V0, V27)) end, V22, V23)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16)); {'Idris.Core.CompileExpr.CCon', E19, E20, E21, E22, E23} -> (fun (V28, V29, V30, V31, V32) -> fun (V33) -> case V32 of [] -> {'Idris.Prelude.Types.Right', 0}; _ -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V34) -> ('un--analyze'(V0, V34)) end, V32, V33)) end end end(E19, E20, E21, E22, E23)); {'Idris.Core.CompileExpr.COp', E24, E25, E26, E27} -> (fun (V35, V36, V37, V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E28} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V42) -> {'Idris.Prelude.Types.Right', 0} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V44) -> ('un--analyze'(V0, V44)) end, V38, V43)) end, V39)) end end(E24, E25, E26, E27)); {'Idris.Core.CompileExpr.CExtPrim', E30, E31, E32} -> (fun (V45, V46, V47) -> fun (V48) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V49) -> ('un--analyze'(V0, V49)) end, V47, V48)) end end(E30, E31, E32)); {'Idris.Core.CompileExpr.CForce', E33, E34, E35} -> (fun (V50, V51, V52) -> ('un--analyze'(V0, V52)) end(E33, E34, E35)); {'Idris.Core.CompileExpr.CDelay', E36, E37, E38} -> (fun (V53, V54, V55) -> ('un--analyze'(V0, V55)) end(E36, E37, E38)); {'Idris.Core.CompileExpr.CConCase', E39, E40, E41, E42} -> (fun (V56, V57, V58, V59) -> fun (V60) -> begin (V65 = begin (V61 = (('un--analyze'(V0, V57))(V60))), case V61 of {'Idris.Prelude.Types.Left', E43} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V63) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V64) -> ('un--analyzeConAlt'(V0, V64)) end, V58, V60)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E45} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V68) -> case V68 of {'Idris.Prelude.Types.Left', E47} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V70) -> {'Idris.Prelude.Types.Right', 0} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V71) -> case V59 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E49} -> (fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V73) -> case V73 of {'Idris.Prelude.Types.Left', E50} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V75}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--analyze'(V0, V72)), V71)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V60)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39, E40, E41, E42)); {'Idris.Core.CompileExpr.CConstCase', E52, E53, E54, E55} -> (fun (V76, V77, V78, V79) -> fun (V80) -> begin (V85 = begin (V81 = (('un--analyze'(V0, V77))(V80))), case V81 of {'Idris.Prelude.Types.Left', E56} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V83) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V84) -> ('un--analyzeConstAlt'(V0, V84)) end, V78, V80)) end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V85 of {'Idris.Prelude.Types.Left', E58} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V87) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V88) -> case V88 of {'Idris.Prelude.Types.Left', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V90) -> {'Idris.Prelude.Types.Right', 0} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V91) -> case V79 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E62} -> (fun (V92) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V93) -> case V93 of {'Idris.Prelude.Types.Left', E63} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V95}} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--analyze'(V0, V92)), V91)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V80)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E52, E53, E54, E55)); {'Idris.Core.CompileExpr.CPrimVal', E65, E66} -> (fun (V96, V97) -> fun (V98) -> {'Idris.Prelude.Types.Right', 0} end end(E65, E66)); {'Idris.Core.CompileExpr.CErased', E67} -> (fun (V99) -> fun (V100) -> {'Idris.Prelude.Types.Right', 0} end end(E67)); {'Idris.Core.CompileExpr.CCrash', E68, E69} -> (fun (V101, V102) -> fun (V103) -> {'Idris.Prelude.Types.Right', 0} end end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--analyzeNames'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.cse"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Analysing "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V1)))), <<" names"/utf8>>)))) end, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V292 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Opts.CSE.Sts'}, {'Idris.Compiler.Opts.CSE.MkSt', ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V24, V25)) end end}, V16, V17)) end end}, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V30, V31)) end end}, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V44, V45)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V48, V49)) end end}, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V62, V63)) end end}, V26, V27)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V68, V69)) end end}, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V82, V83)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V86, V87)) end end}, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V100, V101)) end end}, V64, V65)) end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V104, V105)) end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V106, V107)) end end}, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V120, V121)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V124, V125)) end end}, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V138, V139)) end end}, V102, V103)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V144, V145)) end end}, fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V148, V149)) end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V154, V155)) end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V158, V159)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V160, V161)) end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V162, V163)) end end}, fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V164, V165)) end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V166, V167)) end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V168, V169)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V176, V177)) end end}, V140, V141)) end end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V180, V181)) end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V182, V183)) end end}, fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V186, V187)) end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V196, V197)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V198, V199)) end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V200, V201)) end end}, fun (V202) -> fun (V203) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V202, V203)) end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V208, V209)) end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V214, V215)) end end}, V178, V179)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V218, V219)) end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V220, V221)) end end}, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V222, V223)) end end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V224, V225)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V228, V229)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V232, V233)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V234, V235)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V236) -> fun (V237) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V236, V237)) end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V238, V239)) end end}, fun (V240) -> fun (V241) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V240, V241)) end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V252, V253)) end end}, V216, V217)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V256, V257)) end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V258, V259)) end end}, fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V260, V261)) end end, fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V264, V265)) end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V266, V267)) end end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V268, V269)) end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V270, V271)) end end, fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V272, V273)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V274) -> fun (V275) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V274, V275)) end end, fun (V276) -> fun (V277) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V276, V277)) end end}, fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V278, V279)) end end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V280, V281)) end end, fun (V282) -> fun (V283) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V282, V283)) end end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V284, V285)) end end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V286, V287)) end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V288, V289)) end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V290, V291)) end end}, V254, V255)) end end})), 0}, V2))), case V292 of {'Idris.Prelude.Types.Left', E2} -> (fun (V293) -> {'Idris.Prelude.Types.Left', V293} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V294) -> begin (V297 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V295) -> fun (V296) -> ('un--analyzeName'(V294, V0, V295, V296)) end end, V1, V2))), case V297 of {'Idris.Prelude.Types.Left', E4} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V299) -> begin (V301 = begin (V300 = ('erlang':'get'(V294))), {'Idris.Prelude.Types.Right', V300} end), case V301 of {'Idris.Prelude.Types.Left', E6} -> (fun (V302) -> {'Idris.Prelude.Types.Left', V302} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V303) -> case V303 of {'Idris.Compiler.Opts.CSE.MkSt', E8, E9} -> (fun (V304, V305) -> begin (V328 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.List':'un--sortBy'(fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.EqOrd':'un--comparing'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V308, V309)) end end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V310, V311)) end end}, fun (V312) -> fun (V313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V312, V313)) end end, fun (V314) -> fun (V315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V314, V315)) end end, fun (V316) -> fun (V317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V316, V317)) end end, fun (V318) -> fun (V319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V318, V319)) end end, fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V320, V321)) end end, fun (V322) -> fun (V323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V322, V323)) end end, fun (V324) -> fun (V325) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V324, V325)) end end}, fun (V326) -> ('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V326)))) end, V306, V307)) end end, ('Idris.Idris2.Data.List':'un--filter'(fun (V327) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V327)))), 1)) end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(V304))))))))), begin (V336 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.cse"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([<<"Selected the following definitions:"/utf8>> | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V329) -> case V329 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V330, V331) -> case V330 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V332, V333) -> case V331 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V334, V335) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V334)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": count "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V335)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", size "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V332)))))))))) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V328))])) end, V2))), case V336 of {'Idris.Prelude.Types.Left', E16} -> (fun (V337) -> {'Idris.Prelude.Types.Left', V337} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V338) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V339) -> fun (V340) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V341) -> fun (V342) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V341, V342)) end end, fun (V343) -> fun (V344) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V343, V344)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V345) -> fun (V346) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V345, V346)) end end, fun (V347) -> fun (V348) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V347, V348)) end end}, V339, V340)) end end, fun (V349) -> fun (V350) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V351) -> fun (V352) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V351, V352)) end end, fun (V353) -> fun (V354) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V353, V354)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V355) -> fun (V356) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V355, V356)) end end, fun (V357) -> fun (V358) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V357, V358)) end end}, V349, V350)) end end}, fun (V359) -> fun (V360) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V361) -> fun (V362) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V361, V362)) end end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V363, V364)) end end}, fun (V365) -> fun (V366) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V365, V366)) end end, fun (V367) -> fun (V368) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V367, V368)) end end, fun (V369) -> fun (V370) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V369, V370)) end end, fun (V371) -> fun (V372) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V371, V372)) end end, fun (V373) -> fun (V374) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V373, V374)) end end, fun (V375) -> fun (V376) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V375, V376)) end end, fun (V377) -> fun (V378) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V377, V378)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V379) -> fun (V380) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V379, V380)) end end, fun (V381) -> fun (V382) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V381, V382)) end end}, fun (V383) -> fun (V384) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V383, V384)) end end, fun (V385) -> fun (V386) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V385, V386)) end end, fun (V387) -> fun (V388) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V387, V388)) end end, fun (V389) -> fun (V390) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V389, V390)) end end, fun (V391) -> fun (V392) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V391, V392)) end end, fun (V393) -> fun (V394) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V393, V394)) end end, fun (V395) -> fun (V396) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V395, V396)) end end}, V359, V360)) end end, fun (V397) -> fun (V398) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V399) -> fun (V400) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V399, V400)) end end, fun (V401) -> fun (V402) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V401, V402)) end end}, fun (V403) -> fun (V404) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V403, V404)) end end, fun (V405) -> fun (V406) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V405, V406)) end end, fun (V407) -> fun (V408) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V407, V408)) end end, fun (V409) -> fun (V410) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V409, V410)) end end, fun (V411) -> fun (V412) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V411, V412)) end end, fun (V413) -> fun (V414) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V413, V414)) end end, fun (V415) -> fun (V416) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V415, V416)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V417) -> fun (V418) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V417, V418)) end end, fun (V419) -> fun (V420) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V419, V420)) end end}, fun (V421) -> fun (V422) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V421, V422)) end end, fun (V423) -> fun (V424) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V423, V424)) end end, fun (V425) -> fun (V426) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V425, V426)) end end, fun (V427) -> fun (V428) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V427, V428)) end end, fun (V429) -> fun (V430) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V429, V430)) end end, fun (V431) -> fun (V432) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V431, V432)) end end, fun (V433) -> fun (V434) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V433, V434)) end end}, V397, V398)) end end, fun (V435) -> fun (V436) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V437) -> fun (V438) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V437, V438)) end end, fun (V439) -> fun (V440) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V439, V440)) end end}, fun (V441) -> fun (V442) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V441, V442)) end end, fun (V443) -> fun (V444) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V443, V444)) end end, fun (V445) -> fun (V446) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V445, V446)) end end, fun (V447) -> fun (V448) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V447, V448)) end end, fun (V449) -> fun (V450) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V449, V450)) end end, fun (V451) -> fun (V452) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V451, V452)) end end, fun (V453) -> fun (V454) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V453, V454)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V455) -> fun (V456) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V455, V456)) end end, fun (V457) -> fun (V458) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V457, V458)) end end}, fun (V459) -> fun (V460) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V459, V460)) end end, fun (V461) -> fun (V462) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V461, V462)) end end, fun (V463) -> fun (V464) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V463, V464)) end end, fun (V465) -> fun (V466) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V465, V466)) end end, fun (V467) -> fun (V468) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V467, V468)) end end, fun (V469) -> fun (V470) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V469, V470)) end end, fun (V471) -> fun (V472) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V471, V472)) end end}, V435, V436)) end end, fun (V473) -> fun (V474) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V475) -> fun (V476) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V475, V476)) end end, fun (V477) -> fun (V478) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V477, V478)) end end}, fun (V479) -> fun (V480) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V479, V480)) end end, fun (V481) -> fun (V482) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V481, V482)) end end, fun (V483) -> fun (V484) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V483, V484)) end end, fun (V485) -> fun (V486) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V485, V486)) end end, fun (V487) -> fun (V488) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V487, V488)) end end, fun (V489) -> fun (V490) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V489, V490)) end end, fun (V491) -> fun (V492) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V491, V492)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V493) -> fun (V494) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V493, V494)) end end, fun (V495) -> fun (V496) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V495, V496)) end end}, fun (V497) -> fun (V498) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V497, V498)) end end, fun (V499) -> fun (V500) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V499, V500)) end end, fun (V501) -> fun (V502) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V501, V502)) end end, fun (V503) -> fun (V504) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V503, V504)) end end, fun (V505) -> fun (V506) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V505, V506)) end end, fun (V507) -> fun (V508) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V507, V508)) end end, fun (V509) -> fun (V510) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V509, V510)) end end}, V473, V474)) end end, fun (V511) -> fun (V512) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V513) -> fun (V514) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V513, V514)) end end, fun (V515) -> fun (V516) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V515, V516)) end end}, fun (V517) -> fun (V518) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V517, V518)) end end, fun (V519) -> fun (V520) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V519, V520)) end end, fun (V521) -> fun (V522) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V521, V522)) end end, fun (V523) -> fun (V524) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V523, V524)) end end, fun (V525) -> fun (V526) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V525, V526)) end end, fun (V527) -> fun (V528) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V527, V528)) end end, fun (V529) -> fun (V530) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V529, V530)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V531) -> fun (V532) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V531, V532)) end end, fun (V533) -> fun (V534) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V533, V534)) end end}, fun (V535) -> fun (V536) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V535, V536)) end end, fun (V537) -> fun (V538) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V537, V538)) end end, fun (V539) -> fun (V540) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V539, V540)) end end, fun (V541) -> fun (V542) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V541, V542)) end end, fun (V543) -> fun (V544) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V543, V544)) end end, fun (V545) -> fun (V546) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V545, V546)) end end, fun (V547) -> fun (V548) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V547, V548)) end end}, V511, V512)) end end, fun (V549) -> fun (V550) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V551) -> fun (V552) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V551, V552)) end end, fun (V553) -> fun (V554) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V553, V554)) end end}, fun (V555) -> fun (V556) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V555, V556)) end end, fun (V557) -> fun (V558) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V557, V558)) end end, fun (V559) -> fun (V560) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V559, V560)) end end, fun (V561) -> fun (V562) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V561, V562)) end end, fun (V563) -> fun (V564) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V563, V564)) end end, fun (V565) -> fun (V566) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V565, V566)) end end, fun (V567) -> fun (V568) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V567, V568)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V569) -> fun (V570) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V569, V570)) end end, fun (V571) -> fun (V572) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V571, V572)) end end}, fun (V573) -> fun (V574) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V573, V574)) end end, fun (V575) -> fun (V576) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V575, V576)) end end, fun (V577) -> fun (V578) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V577, V578)) end end, fun (V579) -> fun (V580) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V579, V580)) end end, fun (V581) -> fun (V582) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V581, V582)) end end, fun (V583) -> fun (V584) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V583, V584)) end end, fun (V585) -> fun (V586) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V585, V586)) end end}, V549, V550)) end end, fun (V587) -> fun (V588) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V589) -> fun (V590) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V589, V590)) end end, fun (V591) -> fun (V592) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V591, V592)) end end}, fun (V593) -> fun (V594) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V593, V594)) end end, fun (V595) -> fun (V596) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V595, V596)) end end, fun (V597) -> fun (V598) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V597, V598)) end end, fun (V599) -> fun (V600) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V599, V600)) end end, fun (V601) -> fun (V602) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V601, V602)) end end, fun (V603) -> fun (V604) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V603, V604)) end end, fun (V605) -> fun (V606) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V605, V606)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V607) -> fun (V608) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V607, V608)) end end, fun (V609) -> fun (V610) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V609, V610)) end end}, fun (V611) -> fun (V612) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V611, V612)) end end, fun (V613) -> fun (V614) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V613, V614)) end end, fun (V615) -> fun (V616) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V615, V616)) end end, fun (V617) -> fun (V618) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V617, V618)) end end, fun (V619) -> fun (V620) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V619, V620)) end end, fun (V621) -> fun (V622) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V621, V622)) end end, fun (V623) -> fun (V624) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V623, V624)) end end}, V587, V588)) end end}, V328))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--analyzeName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V60 of {'Idris.Prelude.Types.Just', E55} -> (fun (V62) -> (('un--analyzeDef'(V0, V62))(V3)) end(E55)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--analyzeDef'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V2, V3) -> ('un--analyze'(V0, V3)) end(E0, E1)); {'Idris.Core.CompileExpr.MkCon', E2, E3, E4} -> (fun (V4, V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', 0} end end(E2, E3, E4)); {'Idris.Core.CompileExpr.MkForeign', E5, E6, E7} -> (fun (V8, V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', 0} end end(E5, E6, E7)); {'Idris.Core.CompileExpr.MkError', E8} -> (fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', 0} end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--analyzeConstAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V2, V3) -> ('un--analyze'(V0, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--analyzeConAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('un--analyze'(V0, V6)) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--analyze'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.COp', E3, E4, E5, E6} -> (fun (V2, V3, V4, V5) -> ('un--analyzeSubExp'(V0, V1)) end(E3, E4, E5, E6)); {'Idris.Core.CompileExpr.CExtPrim', E7, E8, E9} -> (fun (V6, V7, V8) -> ('un--analyzeSubExp'(V0, V1)) end(E7, E8, E9)); {'Idris.Core.CompileExpr.CForce', E10, E11, E12} -> (fun (V9, V10, V11) -> ('un--analyzeSubExp'(V0, V1)) end(E10, E11, E12)); {'Idris.Core.CompileExpr.CDelay', E13, E14, E15} -> (fun (V12, V13, V14) -> ('un--analyzeSubExp'(V0, V1)) end(E13, E14, E15)); _ -> case ('un--dropEnv'([], V1)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> fun (V16) -> begin (V17 = (('un--store'(V0, V15))(V16))), case V17 of {'Idris.Prelude.Types.Left', E1} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V19) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V19, 1)) of 1 -> (('un--analyzeSubExp'(V0, V1))(V16)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--analyzeSubExp'(V0, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--adjustSubExp'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V2, V3) -> V1 end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V4, V5) -> V1 end(E2, E3)); {'Idris.Core.CompileExpr.CPrimVal', E4, E5} -> (fun (V6, V7) -> V1 end(E4, E5)); {'Idris.Core.CompileExpr.CErased', E6} -> (fun (V8) -> V1 end(E6)); {'Idris.Core.CompileExpr.CCrash', E7, E8} -> (fun (V9, V10) -> V1 end(E7, E8)); {'Idris.Core.CompileExpr.CLam', E9, E10, E11} -> (fun (V11, V12, V13) -> {'Idris.Core.CompileExpr.CLam', V11, V12, ('un--adjust'(V0, V13))} end(E9, E10, E11)); {'Idris.Core.CompileExpr.CLet', E12, E13, E14, E15, E16} -> (fun (V14, V15, V16, V17, V18) -> {'Idris.Core.CompileExpr.CLet', V14, V15, V16, ('un--adjust'(V0, V17)), ('un--adjust'(V0, V18))} end(E12, E13, E14, E15, E16)); {'Idris.Core.CompileExpr.CApp', E17, E18, E19} -> (fun (V19, V20, V21) -> {'Idris.Core.CompileExpr.CApp', V19, ('un--adjust'(V0, V20)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('un--adjust'(V0, V22)) end, V21))} end(E17, E18, E19)); {'Idris.Core.CompileExpr.CCon', E20, E21, E22, E23, E24} -> (fun (V23, V24, V25, V26, V27) -> {'Idris.Core.CompileExpr.CCon', V23, V24, V25, V26, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> ('un--adjust'(V0, V28)) end, V27))} end(E20, E21, E22, E23, E24)); {'Idris.Core.CompileExpr.COp', E25, E26, E27, E28} -> (fun (V29, V30, V31, V32) -> {'Idris.Core.CompileExpr.COp', V29, V30, V31, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V33) -> ('un--adjust'(V0, V33)) end, V32))} end(E25, E26, E27, E28)); {'Idris.Core.CompileExpr.CExtPrim', E29, E30, E31} -> (fun (V34, V35, V36) -> {'Idris.Core.CompileExpr.CExtPrim', V34, V35, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V37) -> ('un--adjust'(V0, V37)) end, V36))} end(E29, E30, E31)); {'Idris.Core.CompileExpr.CForce', E32, E33, E34} -> (fun (V38, V39, V40) -> {'Idris.Core.CompileExpr.CForce', V38, V39, ('un--adjust'(V0, V40))} end(E32, E33, E34)); {'Idris.Core.CompileExpr.CDelay', E35, E36, E37} -> (fun (V41, V42, V43) -> {'Idris.Core.CompileExpr.CDelay', V41, V42, ('un--adjust'(V0, V43))} end(E35, E36, E37)); {'Idris.Core.CompileExpr.CConCase', E38, E39, E40, E41} -> (fun (V44, V45, V46, V47) -> {'Idris.Core.CompileExpr.CConCase', V44, ('un--adjust'(V0, V45)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('un--adjustConAlt'(V0, V48)) end, V46)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V49) -> ('un--adjust'(V0, V49)) end, V47))} end(E38, E39, E40, E41)); {'Idris.Core.CompileExpr.CConstCase', E42, E43, E44, E45} -> (fun (V50, V51, V52, V53) -> {'Idris.Core.CompileExpr.CConstCase', V50, ('un--adjust'(V0, V51)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V54) -> ('un--adjustConstAlt'(V0, V54)) end, V52)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V55) -> ('un--adjust'(V0, V55)) end, V53))} end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--adjustDef'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CompileExpr.MkFun', V2, ('un--adjust'(V0, V3))} end(E0, E1)); {'Idris.Core.CompileExpr.MkCon', E2, E3, E4} -> (fun (V4, V5, V6) -> V1 end(E2, E3, E4)); {'Idris.Core.CompileExpr.MkForeign', E5, E6, E7} -> (fun (V7, V8, V9) -> V1 end(E5, E6, E7)); {'Idris.Core.CompileExpr.MkError', E8} -> (fun (V10) -> V1 end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--adjustConstAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CompileExpr.MkConstAlt', V2, ('un--adjust'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--adjustConAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Core.CompileExpr.MkConAlt', V2, V3, V4, V5, ('un--adjust'(V0, V6))} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--adjust'(V0, V1) -> ('case--adjust-11008'(V1, V0, ('un--dropEnv'([], V1)))).
'un--UsageMap'() -> {'Idris.Libraries.Data.SortedMap.SortedMap', {'Idris.Builtin.Pair', {'Idris.Integer'}, {'Idris.Core.CompileExpr.CExp', []}}, {'Idris.Builtin.Pair', {'Idris.Core.Name.Name'}, {'Idris.Integer'}}}.
