-module('Idris.Idris2.Data.Buffer').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--concatBuffers-1426'/4,
  'nested--3171-1191--in--un--unpackTo'/4,
  'nested--3374-1386--in--un--scanSize'/4,
  'un--stringByteLength'/1,
  'un--splitBuffer'/3,
  'un--setString'/4,
  'un--setInt32'/4,
  'un--setInt'/4,
  'un--setDouble'/4,
  'un--setByte'/4,
  'un--setBits8'/4,
  'un--setBits64'/4,
  'un--setBits32'/4,
  'un--setBits16'/4,
  'un--resizeBuffer'/3,
  'un--rawSize'/2,
  'un--prim__setString'/4,
  'un--prim__setInt32'/4,
  'un--prim__setInt'/4,
  'un--prim__setDouble'/4,
  'un--prim__setByte'/4,
  'un--prim__setBits8'/4,
  'un--prim__setBits64'/4,
  'un--prim__setBits32'/4,
  'un--prim__setBits16'/4,
  'un--prim__newBuffer'/2,
  'un--prim__getString'/4,
  'un--prim__getInt32'/3,
  'un--prim__getInt'/3,
  'un--prim__getDouble'/3,
  'un--prim__getByte'/3,
  'un--prim__getBits8'/3,
  'un--prim__getBits64'/3,
  'un--prim__getBits32'/3,
  'un--prim__getBits16'/3,
  'un--prim__copyData'/6,
  'un--prim__bufferSize'/1,
  'un--newBuffer'/2,
  'un--getString'/4,
  'un--getInt32'/3,
  'un--getInt'/3,
  'un--getDouble'/3,
  'un--getByte'/3,
  'un--getBits8'/3,
  'un--getBits64'/3,
  'un--getBits32'/3,
  'un--getBits16'/3,
  'un--copyData'/6,
  'un--concatBuffers'/2,
  'un--bufferData'/2
]).
'case--concatBuffers-1426'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5))), case V0 of {'Idris.Prelude.IO.MkHasIO', E2, E3} -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V9, V10, V11) -> ((((V10('erased'))('erased'))(('un--newBuffer'(V0, V4))))(fun (V12) -> case V12 of {'Idris.Prelude.Types.Just', E7} -> (fun (V13) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V14, V15) -> V14 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Interfaces':'un--traverse_'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, case V0 of {'Idris.Prelude.IO.MkHasIO', E10, E11} -> (fun (V42, V43) -> case V42 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V44, V45, V46) -> V44 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, fun (V47) -> case V47 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V48, V49) -> case V49 of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V50, V51) -> ('un--copyData'(V0, V48, 0, V50, V13, V51)) end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Data.List':'dn--un--zip3_Zippable_List'(V1, V2, V6)))), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E19, E20} -> (fun (V52, V53) -> case V52 of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V54, V55, V56) -> case V54 of {'Idris.Prelude.Interfaces.MkApplicative', E24, E25, E26} -> (fun (V57, V58, V59) -> ((V58('erased'))({'Idris.Prelude.Types.Just', V13})) end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E27, E28} -> (fun (V60, V61) -> case V60 of {'Idris.Prelude.Interfaces.MkMonad', E29, E30, E31} -> (fun (V62, V63, V64) -> case V62 of {'Idris.Prelude.Interfaces.MkApplicative', E32, E33, E34} -> (fun (V65, V66, V67) -> ((V66('erased'))({'Idris.Prelude.Types.Nothing'})) end(E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3171-1191--in--un--unpackTo'(V0, V1, V2, V3) -> case V3 of 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V9, V10, V11) -> ((V10('erased'))(V2)) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V14, V15, V16) -> ((((V15('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V18, V19) -> ((V19('erased'))(fun (V20) -> ('un--prim__getByte'(V1, ((V3 - 1) rem 9223372036854775808), V20)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V17) -> ('nested--3171-1191--in--un--unpackTo'(V0, V1, [V17 | V2], ((V3 - 1) rem 9223372036854775808))) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--3374-1386--in--un--scanSize'(V0, V1, V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Builtin.MkPair', ((V4 + V3) rem 9223372036854775808), [V4 | V5]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--stringByteLength'(V0) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.stringByteLength")).
'un--splitBuffer'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V59, V60) -> case V59 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V61, V62, V63) -> case V61 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V64, V65, V66) -> ((V65('erased'))(('un--prim__bufferSize'(V1)))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2, 0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, V8)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> ((((V12('erased'))('erased'))(('un--newBuffer'(V0, V2))))(fun (V14) -> case V14 of {'Idris.Prelude.Types.Just', E18} -> (fun (V15) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E19, E20} -> (fun (V16, V17) -> case V16 of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V18, V19, V20) -> ((((V19('erased'))('erased'))(('un--newBuffer'(V0, ((V8 - V2) rem 9223372036854775808)))))(fun (V21) -> case V21 of {'Idris.Prelude.Types.Just', E24} -> (fun (V22) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E25, E26} -> (fun (V23, V24) -> V23 end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--copyData'(V0, V1, 0, V2, V15, 0)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E27, E28} -> (fun (V25, V26) -> V25 end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--copyData'(V0, V1, V2, ((V8 - V2) rem 9223372036854775808), V22, 0)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E29, E30} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E31, E32, E33} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E34, E35, E36} -> (fun (V32, V33, V34) -> ((V33('erased'))({'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V15, V22}})) end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)) end(E24)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E37, E38} -> (fun (V35, V36) -> case V35 of {'Idris.Prelude.Interfaces.MkMonad', E39, E40, E41} -> (fun (V37, V38, V39) -> case V37 of {'Idris.Prelude.Interfaces.MkApplicative', E42, E43, E44} -> (fun (V40, V41, V42) -> ((V41('erased'))({'Idris.Prelude.Types.Nothing'})) end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E45, E46} -> (fun (V43, V44) -> case V43 of {'Idris.Prelude.Interfaces.MkMonad', E47, E48, E49} -> (fun (V45, V46, V47) -> case V45 of {'Idris.Prelude.Interfaces.MkApplicative', E50, E51, E52} -> (fun (V48, V49, V50) -> ((V49('erased'))({'Idris.Prelude.Types.Nothing'})) end(E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E53, E54} -> (fun (V51, V52) -> case V51 of {'Idris.Prelude.Interfaces.MkMonad', E55, E56, E57} -> (fun (V53, V54, V55) -> case V53 of {'Idris.Prelude.Interfaces.MkApplicative', E58, E59, E60} -> (fun (V56, V57, V58) -> ((V57('erased'))({'Idris.Prelude.Types.Nothing'})) end(E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setString'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setString'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setInt32'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setInt32'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setInt'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setInt'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setDouble'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setDouble'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setByte'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setByte'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits8'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setBits8'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits64'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setBits64'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits32'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setBits32'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits16'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__setBits16'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resizeBuffer'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(('un--newBuffer'(V0, V2))))(fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E5} -> (fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E6, E7} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V12, V13, V14) -> ((((V13('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E11, E12} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E13, E14, E15} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E16, E17, E18} -> (fun (V32, V33, V34) -> ((V33('erased'))(('un--prim__bufferSize'(V1)))) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V15) -> begin (V16 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, V15)) of 1 -> V2; 0 -> V15; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E19, E20} -> (fun (V17, V18) -> V17 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--copyData'(V0, V1, 0, V16, V9, 0)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V24, V25, V26) -> ((V25('erased'))({'Idris.Prelude.Types.Just', V9})) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end end)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E29, E30} -> (fun (V35, V36) -> case V35 of {'Idris.Prelude.Interfaces.MkMonad', E31, E32, E33} -> (fun (V37, V38, V39) -> case V37 of {'Idris.Prelude.Interfaces.MkApplicative', E34, E35, E36} -> (fun (V40, V41, V42) -> ((V41('erased'))({'Idris.Prelude.Types.Nothing'})) end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rawSize'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))(('un--prim__bufferSize'(V1)))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__setString'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setString")).
'un--prim__setInt32'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setInt32")).
'un--prim__setInt'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setInt")).
'un--prim__setDouble'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setDouble")).
'un--prim__setByte'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setByte")).
'un--prim__setBits8'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setBits8")).
'un--prim__setBits64'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setBits64")).
'un--prim__setBits32'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setBits32")).
'un--prim__setBits16'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__setBits16")).
'un--prim__newBuffer'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__newBuffer")).
'un--prim__getString'(V0, V1, V2, V3) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getString")).
'un--prim__getInt32'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getInt32")).
'un--prim__getInt'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getInt")).
'un--prim__getDouble'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getDouble")).
'un--prim__getByte'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getByte")).
'un--prim__getBits8'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getBits8")).
'un--prim__getBits64'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getBits64")).
'un--prim__getBits32'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getBits32")).
'un--prim__getBits16'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__getBits16")).
'un--prim__copyData'(V0, V1, V2, V3, V4, V5) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__copyData")).
'un--prim__bufferSize'(V0) -> ('erlang':'throw'("Error: Unsupported %foreign primitive Data.Buffer.prim__bufferSize")).
'un--newBuffer'(V0, V1) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V1, 0)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('un--prim__newBuffer'(V1, V18)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V13, V14, V15) -> ((V14('erased'))({'Idris.Prelude.Types.Just', V7})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V24, V25, V26) -> ((V25('erased'))({'Idris.Prelude.Types.Nothing'})) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getString'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('un--prim__getString'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getInt32'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getInt32'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getInt'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getInt'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDouble'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getDouble'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getByte'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getByte'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits8'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getBits8'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits64'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getBits64'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits32'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getBits32'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits16'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('un--prim__getBits16'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--copyData'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V6, V7) -> ((V7('erased'))(fun (V8) -> ('un--prim__copyData'(V1, V2, V3, V4, V5, V8)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--concatBuffers'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('un--prim__bufferSize'(V2)) end, V1))), ('case--concatBuffers-1426'(V0, V1, V3, ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V4) -> fun (V5) -> ('nested--3374-1386--in--un--scanSize'(V0, V1, V4, V5)) end end, {'Idris.Builtin.MkPair', 0, []}, V3)))) end.
'un--bufferData'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V13, V14, V15) -> ((V14('erased'))(('un--prim__bufferSize'(V1)))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> ('nested--3171-1191--in--un--unpackTo'(V0, V1, [], V7)) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
