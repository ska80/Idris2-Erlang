-module('Idris.Idris2.Idris.REPL.FuzzySearch').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--16312-3809--in--un--toFullNames\x{27}'/8,
  'nested--16312-3803--in--un--parseNameOrConst'/7,
  'nested--16312-3804--in--un--parseExpr\x{27}'/7,
  'nested--16312-3805--in--un--parseExpr'/7,
  'nested--16312-3807--in--un--isApproximationOf\x{27}'/8,
  'nested--16312-3806--in--un--isApproximationOf'/8,
  'nested--16312-3810--in--un--fuzzyMatch'/9,
  'nested--16312-3802--in--un--eqConst'/8,
  'nested--16312-3808--in--un--doFind'/8,
  'un--fuzzySearch'/7
]).
'nested--16312-3809--in--un--toFullNames\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3790--in--un--AName', E0, E1, E2, E3, E4, E5, E6} -> (fun (V8, V9, V10, V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3790--in--un--AName', V0, V1, V2, V3, V4, V5, V17}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V5, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V19, V20, V21)) end end end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V22, V23, V24)) end end end}, V14, V18)) end, V7)) end(E0, E1, E2, E3, E4, E5, E6)); _ -> {'Idris.Prelude.Types.Right', V6} end.
'nested--16312-3803--in--un--parseNameOrConst'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3790--in--un--AName', V0, V1, V2, V3, V4, V5, V8}} end(E0, E1)); {'Idris.Idris.Syntax.PPrimVal', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Core.TT.IntType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3791--in--un--AInt', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3792--in--un--AInteger', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3793--in--un--ABits8', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3794--in--un--ABits16', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3795--in--un--ABits32', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3796--in--un--ABits64', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.StringType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3797--in--un--AString', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.CharType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3798--in--un--AChar', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3799--in--un--ADouble', V0, V1, V2, V3, V4, V5}} end()); {'Idris.Core.TT.WorldType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3800--in--un--AWorld', V0, V1, V2, V3, V4, V5}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); {'Idris.Idris.Syntax.PType', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.REPL.FuzzySearch.nested--16312-3801--in--un--AType', V0, V1, V2, V3, V4, V5}} end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--16312-3804--in--un--parseExpr\x{27}'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V7, V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(fun (V10) -> fun (V11) -> [V10 | V11] end end)), ('nested--16312-3803--in--un--parseNameOrConst'(V0, V1, V2, V3, V4, V5, V9)))), ('nested--16312-3804--in--un--parseExpr\x{27}'(V0, V1, V2, V3, V4, V5, V8)))) end(E0, E1, E2)); _ -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end, fun (V16) -> [V16 | []] end, ('nested--16312-3803--in--un--parseNameOrConst'(V0, V1, V2, V3, V4, V5, V6)))) end.
'nested--16312-3805--in--un--parseExpr'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.PPi', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Idris.Syntax.PImplicit', E6} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--16312-3804--in--un--parseExpr\x{27}'(V0, V1, V2, V3, V4, V5, V11)), fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V14, []})) end)) end(E6)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--16312-3804--in--un--parseExpr\x{27}'(V0, V1, V2, V3, V4, V5, V11)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--16312-3804--in--un--parseExpr\x{27}'(V0, V1, V2, V3, V4, V5, V12)), fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V15, V16})) end)) end)) end end(E0, E1, E2, E3, E4, E5)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--16312-3804--in--un--parseExpr\x{27}'(V0, V1, V2, V3, V4, V5, V6)), fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', [], V17})) end)) end.
'nested--16312-3807--in--un--isApproximationOf\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3790--in--un--AName', E0, E1, E2, E3, E4, E5, E6} -> (fun (V8, V9, V10, V11, V12, V13, V14) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3790--in--un--AName', E7, E8, E9, E10, E11, E12, E13} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> ('nested--16312-3806--in--un--isApproximationOf'(V0, V1, V2, V3, V4, V5, V14, V21)) end(E7, E8, E9, E10, E11, E12, E13)); _ -> ('nested--16312-3802--in--un--eqConst'(V0, V1, V2, V3, V4, V5, V6, V7)) end end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('nested--16312-3802--in--un--eqConst'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'nested--16312-3806--in--un--isApproximationOf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V8, V9) -> case V7 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V10, V11) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V11)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'un--isApproximationOf'(V8, V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V12) -> case V7 of {'Idris.Core.Name.NS', E5, E6} -> (fun (V13, V14) -> case V14 of {'Idris.Core.Name.UN', E7} -> (fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_UserName'(V12, V15)) end(E7)); _ -> 0 end end(E5, E6)); {'Idris.Core.Name.UN', E8} -> (fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_UserName'(V12, V16)) end(E8)); _ -> 0 end end(E4)); _ -> 0 end.
'nested--16312-3810--in--un--fuzzyMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.TT.Bind', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> begin (V13 = ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, [], ('Idris.Idris2.Core.TT':'un--binderType'(V11))))), fun (V14) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V15) -> fun (V16) -> ('nested--16312-3809--in--un--toFullNames\x{27}'(V0, V1, V2, V3, V4, V5, V15, V16)) end end, V13, [], V14))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V22 = ('Idris.Idris2.Libraries.Data.List.Extra':'un--diffBy'(fun (V20) -> fun (V21) -> ('nested--16312-3807--in--un--isApproximationOf\x{27}'(V0, V1, V2, V3, V4, V5, V20, V21)) end end, V6, V19))), (('nested--16312-3810--in--un--fuzzyMatch'(V0, V1, V2, V3, V4, V5, V22, V7, V12))(V14)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> case V6 of [E0 | E1] -> (fun (V23, V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); [] -> begin (V26 = ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, [], V8))), fun (V27) -> begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V28) -> fun (V29) -> ('nested--16312-3809--in--un--toFullNames\x{27}'(V0, V1, V2, V3, V4, V5, V28, V29)) end end, V26, [], V27))), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--isNil'(('Idris.Idris2.Libraries.Data.List.Extra':'un--diffBy'(fun (V33) -> fun (V34) -> ('nested--16312-3807--in--un--isApproximationOf\x{27}'(V0, V1, V2, V3, V4, V5, V33, V34)) end end, V7, V32))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--16312-3802--in--un--eqConst'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3791--in--un--AInt', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3791--in--un--AInt', E6, E7, E8, E9, E10, E11} -> (fun (V14, V15, V16, V17, V18, V19) -> 1 end(E6, E7, E8, E9, E10, E11)); _ -> 0 end end(E0, E1, E2, E3, E4, E5)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3792--in--un--AInteger', E12, E13, E14, E15, E16, E17} -> (fun (V20, V21, V22, V23, V24, V25) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3792--in--un--AInteger', E18, E19, E20, E21, E22, E23} -> (fun (V26, V27, V28, V29, V30, V31) -> 1 end(E18, E19, E20, E21, E22, E23)); _ -> 0 end end(E12, E13, E14, E15, E16, E17)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3793--in--un--ABits8', E24, E25, E26, E27, E28, E29} -> (fun (V32, V33, V34, V35, V36, V37) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3793--in--un--ABits8', E30, E31, E32, E33, E34, E35} -> (fun (V38, V39, V40, V41, V42, V43) -> 1 end(E30, E31, E32, E33, E34, E35)); _ -> 0 end end(E24, E25, E26, E27, E28, E29)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3794--in--un--ABits16', E36, E37, E38, E39, E40, E41} -> (fun (V44, V45, V46, V47, V48, V49) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3794--in--un--ABits16', E42, E43, E44, E45, E46, E47} -> (fun (V50, V51, V52, V53, V54, V55) -> 1 end(E42, E43, E44, E45, E46, E47)); _ -> 0 end end(E36, E37, E38, E39, E40, E41)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3795--in--un--ABits32', E48, E49, E50, E51, E52, E53} -> (fun (V56, V57, V58, V59, V60, V61) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3795--in--un--ABits32', E54, E55, E56, E57, E58, E59} -> (fun (V62, V63, V64, V65, V66, V67) -> 1 end(E54, E55, E56, E57, E58, E59)); _ -> 0 end end(E48, E49, E50, E51, E52, E53)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3796--in--un--ABits64', E60, E61, E62, E63, E64, E65} -> (fun (V68, V69, V70, V71, V72, V73) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3796--in--un--ABits64', E66, E67, E68, E69, E70, E71} -> (fun (V74, V75, V76, V77, V78, V79) -> 1 end(E66, E67, E68, E69, E70, E71)); _ -> 0 end end(E60, E61, E62, E63, E64, E65)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3797--in--un--AString', E72, E73, E74, E75, E76, E77} -> (fun (V80, V81, V82, V83, V84, V85) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3797--in--un--AString', E78, E79, E80, E81, E82, E83} -> (fun (V86, V87, V88, V89, V90, V91) -> 1 end(E78, E79, E80, E81, E82, E83)); _ -> 0 end end(E72, E73, E74, E75, E76, E77)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3798--in--un--AChar', E84, E85, E86, E87, E88, E89} -> (fun (V92, V93, V94, V95, V96, V97) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3798--in--un--AChar', E90, E91, E92, E93, E94, E95} -> (fun (V98, V99, V100, V101, V102, V103) -> 1 end(E90, E91, E92, E93, E94, E95)); _ -> 0 end end(E84, E85, E86, E87, E88, E89)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3799--in--un--ADouble', E96, E97, E98, E99, E100, E101} -> (fun (V104, V105, V106, V107, V108, V109) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3799--in--un--ADouble', E102, E103, E104, E105, E106, E107} -> (fun (V110, V111, V112, V113, V114, V115) -> 1 end(E102, E103, E104, E105, E106, E107)); _ -> 0 end end(E96, E97, E98, E99, E100, E101)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3800--in--un--AWorld', E108, E109, E110, E111, E112, E113} -> (fun (V116, V117, V118, V119, V120, V121) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3800--in--un--AWorld', E114, E115, E116, E117, E118, E119} -> (fun (V122, V123, V124, V125, V126, V127) -> 1 end(E114, E115, E116, E117, E118, E119)); _ -> 0 end end(E108, E109, E110, E111, E112, E113)); {'Idris.Idris.REPL.FuzzySearch.nested--16312-3801--in--un--AType', E120, E121, E122, E123, E124, E125} -> (fun (V128, V129, V130, V131, V132, V133) -> case V7 of {'Idris.Idris.REPL.FuzzySearch.nested--16312-3801--in--un--AType', E126, E127, E128, E129, E130, E131} -> (fun (V134, V135, V136, V137, V138, V139) -> 1 end(E126, E127, E128, E129, E130, E131)); _ -> 0 end end(E120, E121, E122, E123, E124, E125)); _ -> 0 end.
'nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V8, V9, V10) -> V6 end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V11, V12, V13) -> [{'Idris.Idris.REPL.FuzzySearch.nested--16312-3790--in--un--AName', V0, V1, V2, V3, V4, V5, V13} | V6] end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V18) -> fun (V19) -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V18, V19)) end end, V6, V17)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V24, V25, V26, V27) -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, V26)), V27)), V23)) end(E14, E15, E16, E17)); _ -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Core.TT':'un--binderType'(V22)))), V23)) end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E18, E19, E20} -> (fun (V28, V29, V30) -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, V29)), V30)) end(E18, E19, E20)); {'Idris.Core.TT.As', E21, E22, E23, E24} -> (fun (V31, V32, V33, V34) -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, V34)) end(E21, E22, E23, E24)); {'Idris.Core.TT.TDelayed', E25, E26, E27} -> (fun (V35, V36, V37) -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, V37)) end(E25, E26, E27)); {'Idris.Core.TT.TDelay', E28, E29, E30, E31} -> (fun (V38, V39, V40, V41) -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, V40)), V41)) end(E28, E29, E30, E31)); {'Idris.Core.TT.TForce', E32, E33, E34} -> (fun (V42, V43, V44) -> ('nested--16312-3808--in--un--doFind'(V0, V1, V2, V3, V4, V5, V6, V44)) end(E32, E33, E34)); {'Idris.Core.TT.PrimVal', E35, E36} -> (fun (V45, V46) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V49, V50)) end end end end, fun (V51) -> [V51 | []] end, ('nested--16312-3803--in--un--parseNameOrConst'(V0, V1, V2, V3, V4, V5, {'Idris.Idris.Syntax.PPrimVal', V45, V46})))))), V6)) end(E35, E36)); {'Idris.Core.TT.Erased', E37, E38} -> (fun (V52, V53) -> V6 end(E37, E38)); {'Idris.Core.TT.TType', E39} -> (fun (V54) -> [{'Idris.Idris.REPL.FuzzySearch.nested--16312-3801--in--un--AType', V0, V1, V2, V3, V4, V5} | V6] end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fuzzySearch'(V0, V1, V2, V3, V4, V5, V6) -> case ('nested--16312-3805--in--un--parseExpr'(V5, V4, V3, V2, V1, V0, V5)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V8, V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V6))), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> begin (V43 = case V12 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V15 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V74 = case V12 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V44 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V235 = begin (V75 = ('Idris.Idris2.Core.Context':'un--allNames'(V74, V6))), case V75 of {'Idris.Prelude.Types.Left', E65} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V77) -> begin (V81 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V78) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V79, V80)) end end, V74, V78)) end, V77, [], V6))), case V81 of {'Idris.Prelude.Types.Left', E67} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V83) -> begin (V208 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V84) -> fun (V85) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(V84, V85)) end end, V83, fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V86, fun (V87) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V90, V91)) end end end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V93)) end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V96, V97)) end end end end}, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V100, V101)) end end end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V103)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V106, V107)) end end end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V109)) end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V112, V113)) end end end end}, fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V116, V117)) end end end}, ('Idris.Idris2.Core.Context':'un--visibleIn'(V43, case V87 of {'Idris.Core.Context.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V119 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V87 of {'Idris.Core.Context.Context.MkGlobalDef', E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157) -> V147 end(E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V160, V161)) end end end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V163)) end end, fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V166, V167)) end end end end}, fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V170, V171)) end end end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V173)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V176, V177)) end end end end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V179)) end end, fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V182, V183)) end end end end}, fun (V184) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V186, V187)) end end end}, ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.Name':'un--userNameRoot'(case V87 of {'Idris.Core.Context.Context.MkGlobalDef', E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128} -> (fun (V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207) -> V189 end(E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V87)) end)) end)) end)) end))), begin (V211 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_GlobalDef'(V74, V209, V210)) end end, V208, [], V6))), case V211 of {'Idris.Prelude.Types.Left', E129} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V213) -> ('Idris.Idris2.Core.Core':'un--filterM'(fun (V214) -> ('nested--16312-3810--in--un--fuzzyMatch'(V5, V4, V3, V2, V1, V0, V8, V9, case V214 of {'Idris.Core.Context.Context.MkGlobalDef', E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150} -> (fun (V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234) -> V217 end(E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V213, V6)) end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V235 of {'Idris.Prelude.Types.Left', E151} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V237) -> begin (V239 = begin (V238 = ('erlang':'put'(V0, V12))), {'Idris.Prelude.Types.Right', V238} end), case V239 of {'Idris.Prelude.Types.Left', E153} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V241) -> begin (V269 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V242) -> fun (V243) -> ('Idris.Idris2.Idris.REPL.Common':'un--docsOrSignature'(V4, V0, V2, {'Idris.Core.FC.EmptyFC'}, V242, V243)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V246, V247)) end end end end, fun (V248) -> case V248 of {'Idris.Core.Context.Context.MkGlobalDef', E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174} -> (fun (V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268) -> V250 end(E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V237)), [], V6))), case V269 of {'Idris.Prelude.Types.Left', E175} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V271) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Common.PrintedDoc', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(V271))}} end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Common.REPLError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Bad expression, expected"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"or"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"_ -> B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"or"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"A -> B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<", where"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"A"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"and"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"are spines of global names"/utf8>>))))))))))))))))))))}} end end(E0)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Common.REPLError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Bad expression, expected"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"or"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"_ -> B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"or"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"A -> B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<", where"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"A"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"and"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"B"/utf8>>)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"are spines of global names"/utf8>>))))))))))))))))))))}} end.
