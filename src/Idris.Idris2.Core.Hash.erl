-module('Idris.Idris2.Core.Hash').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--hash_Hashable_String'/1,
  'dn--un--hash_Hashable_RigCount'/1,
  'dn--un--hash_Hashable_Pat'/1,
  'dn--un--hash_Hashable_Nat'/1,
  'dn--un--hash_Hashable_Namespace'/1,
  'dn--un--hash_Hashable_NamedDef'/1,
  'dn--un--hash_Hashable_NamedConstAlt'/1,
  'dn--un--hash_Hashable_NamedConAlt'/1,
  'dn--un--hash_Hashable_NamedCExp'/1,
  'dn--un--hash_Hashable_Name'/1,
  'dn--un--hash_Hashable_LazyReason'/1,
  'dn--un--hash_Hashable_Integer'/1,
  'dn--un--hash_Hashable_Int'/1,
  'dn--un--hash_Hashable_Double'/1,
  'dn--un--hash_Hashable_Constant'/1,
  'dn--un--hash_Hashable_ConInfo'/1,
  'dn--un--hash_Hashable_Char'/1,
  'dn--un--hash_Hashable_CFType'/1,
  'dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/3,
  'dn--un--hash_Hashable_(Term $vars)'/1,
  'dn--un--hash_Hashable_(PrimFn $arity)'/1,
  'dn--un--hash_Hashable_(PiInfo $t)'/2,
  'dn--un--hash_Hashable_(Maybe $a)'/2,
  'dn--un--hash_Hashable_(List1 $a)'/2,
  'dn--un--hash_Hashable_(List $a)'/2,
  'dn--un--hash_Hashable_(CaseTree $vars)'/1,
  'dn--un--hash_Hashable_(CaseAlt $vars)'/1,
  'dn--un--hash_Hashable_(Binder $ty)'/2,
  'dn--un--hash_Hashable_((Vect $n) $a)'/2,
  'dn--un--hashWithSalt_Hashable_String'/2,
  'dn--un--hashWithSalt_Hashable_RigCount'/2,
  'dn--un--hashWithSalt_Hashable_Pat'/2,
  'dn--un--hashWithSalt_Hashable_Nat'/2,
  'dn--un--hashWithSalt_Hashable_Namespace'/2,
  'dn--un--hashWithSalt_Hashable_NamedDef'/2,
  'dn--un--hashWithSalt_Hashable_NamedConstAlt'/2,
  'dn--un--hashWithSalt_Hashable_NamedConAlt'/2,
  'dn--un--hashWithSalt_Hashable_NamedCExp'/2,
  'dn--un--hashWithSalt_Hashable_Name'/2,
  'dn--un--hashWithSalt_Hashable_LazyReason'/2,
  'dn--un--hashWithSalt_Hashable_Integer'/2,
  'dn--un--hashWithSalt_Hashable_Int'/2,
  'dn--un--hashWithSalt_Hashable_Double'/2,
  'dn--un--hashWithSalt_Hashable_Constant'/2,
  'dn--un--hashWithSalt_Hashable_ConInfo'/2,
  'dn--un--hashWithSalt_Hashable_Char'/2,
  'dn--un--hashWithSalt_Hashable_CFType'/2,
  'dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/4,
  'dn--un--hashWithSalt_Hashable_(Term $vars)'/2,
  'dn--un--hashWithSalt_Hashable_(PrimFn $arity)'/2,
  'dn--un--hashWithSalt_Hashable_(PiInfo $t)'/3,
  'dn--un--hashWithSalt_Hashable_(Maybe $a)'/3,
  'dn--un--hashWithSalt_Hashable_(List1 $a)'/3,
  'dn--un--hashWithSalt_Hashable_(List $a)'/3,
  'dn--un--hashWithSalt_Hashable_(CaseTree $vars)'/2,
  'dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'/2,
  'dn--un--hashWithSalt_Hashable_(Binder $ty)'/3,
  'dn--un--hashWithSalt_Hashable_((Vect $n) $a)'/3,
  'dn--un--__Impl_Hashable_String'/0,
  'dn--un--__Impl_Hashable_RigCount'/0,
  'dn--un--__Impl_Hashable_Pat'/0,
  'dn--un--__Impl_Hashable_Nat'/0,
  'dn--un--__Impl_Hashable_Namespace'/0,
  'dn--un--__Impl_Hashable_NamedDef'/0,
  'dn--un--__Impl_Hashable_NamedConstAlt'/0,
  'dn--un--__Impl_Hashable_NamedConAlt'/0,
  'dn--un--__Impl_Hashable_NamedCExp'/0,
  'dn--un--__Impl_Hashable_Name'/0,
  'dn--un--__Impl_Hashable_LazyReason'/0,
  'dn--un--__Impl_Hashable_Integer'/0,
  'dn--un--__Impl_Hashable_Int'/0,
  'dn--un--__Impl_Hashable_Double'/0,
  'dn--un--__Impl_Hashable_Constant'/0,
  'dn--un--__Impl_Hashable_ConInfo'/0,
  'dn--un--__Impl_Hashable_Char'/0,
  'dn--un--__Impl_Hashable_CFType'/0,
  'dn--un--__Impl_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/2,
  'dn--un--__Impl_Hashable_(Term $vars)'/0,
  'dn--un--__Impl_Hashable_(PrimFn $arity)'/0,
  'dn--un--__Impl_Hashable_(PiInfo $t)'/1,
  'dn--un--__Impl_Hashable_(Maybe $a)'/1,
  'dn--un--__Impl_Hashable_(List1 $a)'/1,
  'dn--un--__Impl_Hashable_(List $a)'/1,
  'dn--un--__Impl_Hashable_(CaseTree $vars)'/0,
  'dn--un--__Impl_Hashable_(CaseAlt $vars)'/0,
  'dn--un--__Impl_Hashable_(Binder $ty)'/1,
  'dn--un--__Impl_Hashable_((Vect $n) $a)'/1,
  'un--hashWithSalt'/3,
  'un--hash'/2
]).
'dn--un--hash_Hashable_String'(V0) -> ('dn--un--hashWithSalt_Hashable_String'(5381, V0)).
'dn--un--hash_Hashable_RigCount'(V0) -> ('dn--un--hashWithSalt_Hashable_RigCount'(5381, V0)).
'dn--un--hash_Hashable_Pat'(V0) -> ('dn--un--hashWithSalt_Hashable_Pat'(5381, V0)).
'dn--un--hash_Hashable_Nat'(V0) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V0)).
'dn--un--hash_Hashable_Namespace'(V0) -> ('dn--un--hashWithSalt_Hashable_Namespace'(5381, V0)).
'dn--un--hash_Hashable_NamedDef'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedDef'(5381, V0)).
'dn--un--hash_Hashable_NamedConstAlt'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedConstAlt'(5381, V0)).
'dn--un--hash_Hashable_NamedConAlt'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedConAlt'(5381, V0)).
'dn--un--hash_Hashable_NamedCExp'(V0) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(5381, V0)).
'dn--un--hash_Hashable_Name'(V0) -> ('dn--un--hashWithSalt_Hashable_Name'(5381, V0)).
'dn--un--hash_Hashable_LazyReason'(V0) -> ('dn--un--hashWithSalt_Hashable_LazyReason'(5381, V0)).
'dn--un--hash_Hashable_Integer'(V0) -> V0.
'dn--un--hash_Hashable_Int'(V0) -> V0.
'dn--un--hash_Hashable_Double'(V0) -> ('dn--un--hash_Hashable_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V0)))).
'dn--un--hash_Hashable_Constant'(V0) -> ('dn--un--hashWithSalt_Hashable_Constant'(5381, V0)).
'dn--un--hash_Hashable_ConInfo'(V0) -> ('dn--un--hashWithSalt_Hashable_ConInfo'(5381, V0)).
'dn--un--hash_Hashable_Char'(V0) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V0)).
'dn--un--hash_Hashable_CFType'(V0) -> ('dn--un--hashWithSalt_Hashable_CFType'(5381, V0)).
'dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2) -> ('dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, 5381, V2)).
'dn--un--hash_Hashable_(Term $vars)'(V0) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(5381, V0)).
'dn--un--hash_Hashable_(PrimFn $arity)'(V0) -> ('dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(5381, V0)).
'dn--un--hash_Hashable_(PiInfo $t)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, 5381, V1)).
'dn--un--hash_Hashable_(Maybe $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'(V0, 5381, V1)).
'dn--un--hash_Hashable_(List1 $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(List1 $a)'(V0, 5381, V1)).
'dn--un--hash_Hashable_(List $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, 5381, V1)).
'dn--un--hash_Hashable_(CaseTree $vars)'(V0) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(5381, V0)).
'dn--un--hash_Hashable_(CaseAlt $vars)'(V0) -> ('dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(5381, V0)).
'dn--un--hash_Hashable_(Binder $ty)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(Binder $ty)'(V0, 5381, V1)).
'dn--un--hash_Hashable_((Vect $n) $a)'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, 5381, V1)).
'dn--un--hashWithSalt_Hashable_String'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_Char'(V2, V3)) end end, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'dn--un--hashWithSalt_Hashable_RigCount'(V0, V1) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V2, V3)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V8, V9)) end end}}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), fun (V10) -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)) end, V1)).
'dn--un--hashWithSalt_Hashable_Pat'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> ('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V3)), V4)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V10) -> ('dn--un--hash_Hashable_Pat'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--hashWithSalt_Hashable_Pat'(V11, V12)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V6)), V9)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V13, V14, V15, V16) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V17) -> ('dn--un--hash_Hashable_Pat'(V17)) end, fun (V18) -> fun (V19) -> ('dn--un--hashWithSalt_Hashable_Pat'(V18, V19)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V14)), V16)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V20, V21) -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V21)))) end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V22, V23, V24, V25) -> ('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V24)), V25)) end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V26, V27, V28, V29) -> ('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Pat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V28)), V29)) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V30, V31) -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V31)) end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E24, E25} -> (fun (V32, V33) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V33)) end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_Nat'(V0, V1) -> ((((V0 * 33) rem 9223372036854775808) + ('dn--un--hash_Hashable_Nat'(V1))) rem 9223372036854775808).
'dn--un--hashWithSalt_Hashable_Namespace'(V0, V1) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V2) -> ('dn--un--hash_Hashable_String'(V2)) end, fun (V3) -> fun (V4) -> ('dn--un--hashWithSalt_Hashable_String'(V3, V4)) end end}, V0, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V1)))).
'dn--un--hashWithSalt_Hashable_NamedDef'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkNmFun', E0, E1} -> (fun (V2, V3) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V4) -> ('dn--un--hash_Hashable_Name'(V4)) end, fun (V5) -> fun (V6) -> ('dn--un--hashWithSalt_Hashable_Name'(V5, V6)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)), V3)) end(E0, E1)); {'Idris.Core.CompileExpr.MkNmCon', E2, E3, E4} -> (fun (V7, V8, V9) -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V10) -> ('dn--un--hash_Hashable_Nat'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--hashWithSalt_Hashable_Nat'(V11, V12)) end end}, ('dn--un--hashWithSalt_Hashable_Nat'(('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V13) -> ('dn--un--hash_Hashable_Int'(V13)) end, fun (V14) -> fun (V15) -> ('dn--un--hashWithSalt_Hashable_Int'(V14, V15)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V7)), V8)), V9)) end(E2, E3, E4)); {'Idris.Core.CompileExpr.MkNmForeign', E5, E6, E7} -> (fun (V16, V17, V18) -> ('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V19) -> ('dn--un--hash_Hashable_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--hashWithSalt_Hashable_CFType'(V20, V21)) end end}, ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V22) -> ('dn--un--hash_Hashable_String'(V22)) end, fun (V23) -> fun (V24) -> ('dn--un--hashWithSalt_Hashable_String'(V23, V24)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V16)), V17)), V18)) end(E5, E6, E7)); {'Idris.Core.CompileExpr.MkNmError', E8} -> (fun (V25) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V25)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_NamedConstAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkNConstAlt', E0, E1} -> (fun (V2, V3) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Constant'(V0, V2)), V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_NamedConAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V7) -> ('dn--un--hash_Hashable_Name'(V7)) end, fun (V8) -> fun (V9) -> ('dn--un--hashWithSalt_Hashable_Name'(V8, V9)) end end}, ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V10) -> ('dn--un--hash_Hashable_Int'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--hashWithSalt_Hashable_Int'(V11, V12)) end end}, ('dn--un--hashWithSalt_Hashable_ConInfo'(('dn--un--hashWithSalt_Hashable_Name'(V0, V2)), V3)), V4)), V5)), V6)) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_NamedCExp'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.NmLocal', E0, E1} -> (fun (V2, V3) -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V3)) end(E0, E1)); {'Idris.Core.CompileExpr.NmRef', E2, E3} -> (fun (V4, V5) -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V5)) end(E2, E3)); {'Idris.Core.CompileExpr.NmLam', E4, E5, E6} -> (fun (V6, V7, V8) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V7)), V8)) end(E4, E5, E6)); {'Idris.Core.CompileExpr.NmLet', E7, E8, E9, E10} -> (fun (V9, V10, V11, V12) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V10)), V11)), V12)) end(E7, E8, E9, E10)); {'Idris.Core.CompileExpr.NmApp', E11, E12, E13} -> (fun (V13, V14, V15) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V16) -> ('dn--un--hash_Hashable_NamedCExp'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V17, V18)) end end}, ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V14)), V15)) end(E11, E12, E13)); {'Idris.Core.CompileExpr.NmCon', E14, E15, E16, E17, E18} -> (fun (V19, V20, V21, V22, V23) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V24) -> ('dn--un--hash_Hashable_NamedCExp'(V24)) end, fun (V25) -> fun (V26) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V25, V26)) end end}, ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V27) -> ('dn--un--hash_Hashable_Int'(V27)) end, fun (V28) -> fun (V29) -> ('dn--un--hashWithSalt_Hashable_Int'(V28, V29)) end end}, ('dn--un--hashWithSalt_Hashable_ConInfo'(('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V20)), V21)), V22)), V23)) end(E14, E15, E16, E17, E18)); {'Idris.Core.CompileExpr.NmOp', E19, E20, E21, E22} -> (fun (V30, V31, V32, V33) -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V34) -> ('dn--un--hash_Hashable_NamedCExp'(V34)) end, fun (V35) -> fun (V36) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V35, V36)) end end}, ('dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V32)), V33)) end(E19, E20, E21, E22)); {'Idris.Core.CompileExpr.NmExtPrim', E23, E24, E25} -> (fun (V37, V38, V39) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V40) -> ('dn--un--hash_Hashable_NamedCExp'(V40)) end, fun (V41) -> fun (V42) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V41, V42)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V38)), V39)) end(E23, E24, E25)); {'Idris.Core.CompileExpr.NmForce', E26, E27, E28} -> (fun (V43, V44, V45) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_LazyReason'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V44)), V45)) end(E26, E27, E28)); {'Idris.Core.CompileExpr.NmDelay', E29, E30, E31} -> (fun (V46, V47, V48) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_LazyReason'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)), V47)), V48)) end(E29, E30, E31)); {'Idris.Core.CompileExpr.NmConCase', E32, E33, E34, E35} -> (fun (V49, V50, V51, V52) -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V53) -> ('dn--un--hash_Hashable_NamedCExp'(V53)) end, fun (V54) -> fun (V55) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V54, V55)) end end}, ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V56) -> ('dn--un--hash_Hashable_NamedConAlt'(V56)) end, fun (V57) -> fun (V58) -> ('dn--un--hashWithSalt_Hashable_NamedConAlt'(V57, V58)) end end}, ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)), V50)), V51)), V52)) end(E32, E33, E34, E35)); {'Idris.Core.CompileExpr.NmConstCase', E36, E37, E38, E39} -> (fun (V59, V60, V61, V62) -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V63) -> ('dn--un--hash_Hashable_NamedCExp'(V63)) end, fun (V64) -> fun (V65) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V64, V65)) end end}, ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V66) -> ('dn--un--hash_Hashable_NamedConstAlt'(V66)) end, fun (V67) -> fun (V68) -> ('dn--un--hashWithSalt_Hashable_NamedConstAlt'(V67, V68)) end end}, ('dn--un--hashWithSalt_Hashable_NamedCExp'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)), V60)), V61)), V62)) end(E36, E37, E38, E39)); {'Idris.Core.CompileExpr.NmPrimVal', E40, E41} -> (fun (V69, V70) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)), V70)) end(E40, E41)); {'Idris.Core.CompileExpr.NmErased', E42} -> (fun (V71) -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)) end(E42)); {'Idris.Core.CompileExpr.NmCrash', E43, E44} -> (fun (V72, V73) -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)), V73)) end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_Name'(V0, V1) -> case V1 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V2, V3) -> ('dn--un--hashWithSalt_Hashable_String'(V0, V2)) end(E0, E1)); {'Idris.Core.Name.DN', E2, E3} -> (fun (V4, V5) -> ('dn--un--hashWithSalt_Hashable_Name'(V0, V5)) end(E2, E3)); {'Idris.Core.Name.NS', E4, E5} -> (fun (V6, V7) -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Namespace'(V0, V6)), V7)) end(E4, E5)); {'Idris.Core.Name.Resolved', E6} -> (fun (V8) -> ('dn--un--hashWithSalt_Hashable_Int'(V0, V8)) end(E6)); _ -> ('dn--un--hashWithSalt_Hashable_String'(V0, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end.
'dn--un--hashWithSalt_Hashable_LazyReason'(V0, V1) -> case V1 of 0 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)); 1 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)); 2 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_Integer'(V0, V1) -> ((((V0 * 33) rem 9223372036854775808) + ('dn--un--hash_Hashable_Integer'(V1))) rem 9223372036854775808).
'dn--un--hashWithSalt_Hashable_Int'(V0, V1) -> ((((V0 * 33) rem 9223372036854775808) + ('dn--un--hash_Hashable_Int'(V1))) rem 9223372036854775808).
'dn--un--hashWithSalt_Hashable_Double'(V0, V1) -> ((((V0 * 33) rem 9223372036854775808) + ('dn--un--hash_Hashable_Double'(V1))) rem 9223372036854775808).
'dn--un--hashWithSalt_Hashable_Constant'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> ('dn--un--hashWithSalt_Hashable_Int'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V3) -> ('dn--un--hashWithSalt_Hashable_Integer'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V3)) end(E1)); {'Idris.Core.TT.B8', E2} -> (fun (V4) -> ('dn--un--hashWithSalt_Hashable_Int'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V4)) end(E2)); {'Idris.Core.TT.B16', E3} -> (fun (V5) -> ('dn--un--hashWithSalt_Hashable_Int'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V5)) end(E3)); {'Idris.Core.TT.B32', E4} -> (fun (V6) -> ('dn--un--hashWithSalt_Hashable_Int'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V6)) end(E4)); {'Idris.Core.TT.B64', E5} -> (fun (V7) -> ('dn--un--hashWithSalt_Hashable_Integer'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V7)) end(E5)); {'Idris.Core.TT.Str', E6} -> (fun (V8) -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V8)) end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V9) -> ('dn--un--hashWithSalt_Hashable_Char'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V9)) end(E7)); {'Idris.Core.TT.Db', E8} -> (fun (V10) -> ('dn--un--hashWithSalt_Hashable_Double'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V10)) end(E8)); {'Idris.Core.TT.WorldVal'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)) end()); {'Idris.Core.TT.IntType'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)) end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)) end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)) end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)) end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)) end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 15)) end()); {'Idris.Core.TT.StringType'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 16)) end()); {'Idris.Core.TT.CharType'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 17)) end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 18)) end()); {'Idris.Core.TT.WorldType'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 19)) end()); {'Idris.Core.TT.I8', E9} -> (fun (V11) -> ('dn--un--hashWithSalt_Hashable_Integer'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 20)), V11)) end(E9)); {'Idris.Core.TT.I16', E10} -> (fun (V12) -> ('dn--un--hashWithSalt_Hashable_Integer'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 21)), V12)) end(E10)); {'Idris.Core.TT.I32', E11} -> (fun (V13) -> ('dn--un--hashWithSalt_Hashable_Integer'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 22)), V13)) end(E11)); {'Idris.Core.TT.I64', E12} -> (fun (V14) -> ('dn--un--hashWithSalt_Hashable_Integer'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 23)), V14)) end(E12)); {'Idris.Core.TT.Int8Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 24)) end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 25)) end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 26)) end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 27)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_ConInfo'(V0, V1) -> case V1 of 0 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)); 1 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)); 2 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)); 3 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)); 4 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)); 5 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)); 6 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)); 7 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)); 8 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)); 9 -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_Char'(V0, V1) -> ((((V0 * 33) rem 9223372036854775808) + ('dn--un--hash_Hashable_Char'(V1))) rem 9223372036854775808).
'dn--un--hashWithSalt_Hashable_CFType'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)) end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)) end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V2, V3) -> ('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)), V2)), V3)) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V4) -> ('dn--un--hashWithSalt_Hashable_CFType'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)), V4)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V5, V6) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V7) -> ('dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V8) -> ('dn--un--hash_Hashable_String'(V8)) end, fun (V9) -> fun (V10) -> ('dn--un--hashWithSalt_Hashable_String'(V9, V10)) end end}, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V11) -> ('dn--un--hash_Hashable_CFType'(V11)) end, fun (V12) -> fun (V13) -> ('dn--un--hashWithSalt_Hashable_CFType'(V12, V13)) end end}, V7)) end, fun (V14) -> fun (V15) -> ('dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V16) -> ('dn--un--hash_Hashable_String'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--hashWithSalt_Hashable_String'(V17, V18)) end end}, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V19) -> ('dn--un--hash_Hashable_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--hashWithSalt_Hashable_CFType'(V20, V21)) end end}, V14, V15)) end end}, ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 15)), V5)), V6)) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V22, V23) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V24) -> ('dn--un--hash_Hashable_CFType'(V24)) end, fun (V25) -> fun (V26) -> ('dn--un--hashWithSalt_Hashable_CFType'(V25, V26)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 16)), V22)), V23)) end(E5, E6)); {'Idris.Core.CompileExpr.CFInt8'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 17)) end()); {'Idris.Core.CompileExpr.CFInt16'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 18)) end()); {'Idris.Core.CompileExpr.CFInt32'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 19)) end()); {'Idris.Core.CompileExpr.CFInt64'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 20)) end()); {'Idris.Core.CompileExpr.CFForeignObj'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 21)) end()); {'Idris.Core.CompileExpr.CFInteger'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 22)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V1 of {'Idris.Core.Hash.dn--un--__mkHashable', E2, E3} -> (fun (V6, V7) -> ((V7(case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E4, E5} -> (fun (V8, V9) -> ((V9(V2))(V4)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(Term $vars)'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> ('dn--un--hashWithSalt_Hashable_Nat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V4)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V5, V6, V7) -> ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V7)) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V12) -> ('dn--un--hash_Hashable_(Term $vars)'(V12)) end, fun (V13) -> fun (V14) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(V13, V14)) end end}, ('dn--un--hashWithSalt_Hashable_Int'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V10)), V11)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V15, V16, V17, V18) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Binder $ty)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V19) -> ('dn--un--hash_Hashable_(Term $vars)'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(V20, V21)) end end}, ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V17)), V18)) end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V22, V23, V24) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V23)), V24)) end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V25, V26, V27, V28) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V27)), V28)) end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V29, V30, V31) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V31)) end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V32, V33, V34, V35) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V34)), V35)) end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V36, V37, V38) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V38)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V39, V40) -> ('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)), ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V40)))) end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V41, V42) -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)) end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V43) -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(V0, V1) -> case V1 of {'Idris.Core.TT.Add', E0} -> (fun (V2) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)) end(E0)); {'Idris.Core.TT.Sub', E1} -> (fun (V3) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V3)) end(E1)); {'Idris.Core.TT.Mul', E2} -> (fun (V4) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), V4)) end(E2)); {'Idris.Core.TT.Div', E3} -> (fun (V5) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), V5)) end(E3)); {'Idris.Core.TT.Mod', E4} -> (fun (V6) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V6)) end(E4)); {'Idris.Core.TT.Neg', E5} -> (fun (V7) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 5)), V7)) end(E5)); {'Idris.Core.TT.ShiftL', E6} -> (fun (V8) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 6)), V8)) end(E6)); {'Idris.Core.TT.ShiftR', E7} -> (fun (V9) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 7)), V9)) end(E7)); {'Idris.Core.TT.BAnd', E8} -> (fun (V10) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 8)), V10)) end(E8)); {'Idris.Core.TT.BOr', E9} -> (fun (V11) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 9)), V11)) end(E9)); {'Idris.Core.TT.BXOr', E10} -> (fun (V12) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 10)), V12)) end(E10)); {'Idris.Core.TT.LT', E11} -> (fun (V13) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 11)), V13)) end(E11)); {'Idris.Core.TT.LTE', E12} -> (fun (V14) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 12)), V14)) end(E12)); {'Idris.Core.TT.EQ', E13} -> (fun (V15) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 13)), V15)) end(E13)); {'Idris.Core.TT.GTE', E14} -> (fun (V16) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 14)), V16)) end(E14)); {'Idris.Core.TT.GT', E15} -> (fun (V17) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 15)), V17)) end(E15)); {'Idris.Core.TT.StrLength'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 16)) end()); {'Idris.Core.TT.StrHead'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 17)) end()); {'Idris.Core.TT.StrTail'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 18)) end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 19)) end()); {'Idris.Core.TT.StrCons'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 20)) end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 21)) end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 22)) end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 23)) end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 24)) end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 25)) end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 26)) end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 27)) end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 28)) end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 29)) end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 30)) end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 31)) end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 32)) end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 33)) end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 34)) end()); {'Idris.Core.TT.Cast', E16, E17} -> (fun (V18, V19) -> ('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Constant'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 35)), V18)), V19)) end(E16, E17)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 36)) end()); {'Idris.Core.TT.Crash'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 37)) end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 38)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, 0)) end()); {'Idris.Core.TT.Explicit'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, 1)) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, 2)) end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V3) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E1, E2} -> (fun (V4, V5) -> ((V5(('dn--un--hashWithSalt_Hashable_Integer'(V1, 3))))(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(Maybe $a)'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Int'(V1)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E1, E2} -> (fun (V4, V5) -> ((V5(V1))(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(List1 $a)'(V0, V1, V2) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, ((((V1 * 33) rem 9223372036854775808) + case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E0, E1} -> (fun (V3, V4) -> (V3(case V2 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V5, V6) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end) rem 9223372036854775808), case V2 of {'Idris.Data.List1.:::', E4, E5} -> (fun (V7, V8) -> V8 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--hashWithSalt_Hashable_(List $a)'(V0, V1, V2) -> case V2 of [] -> ('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Int'(V1)); [E0 | E1] -> (fun (V3, V4) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, ((((V1 * 33) rem 9223372036854775808) + case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E2, E3} -> (fun (V5, V6) -> (V5(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end) rem 9223372036854775808), V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V6) -> ('dn--un--hash_Hashable_(CaseAlt $vars)'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(V7, V8)) end end}, ('dn--un--hashWithSalt_Hashable_Nat'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V3)), V5)) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V9, V10) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 1)), V10)) end(E4, E5)); {'Idris.Core.CaseTree.Unmatched', E6} -> (fun (V11) -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)) end(E6)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> ('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_(List $a)'({'Idris.Core.Hash.dn--un--__mkHashable', fun (V6) -> ('dn--un--hash_Hashable_Name'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--hashWithSalt_Hashable_Name'(V7, V8)) end end}, ('dn--un--hashWithSalt_Hashable_Name'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 0)), V2)), V4)), V5)) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V9, V10, V11) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 2)), ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))), ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)))), V11)) end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V12, V13) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_String'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 3)), ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V12)))), V13)) end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V14) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(('dn--un--hashWithSalt_Hashable_Integer'(V0, 4)), V14)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_(Binder $ty)'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E4, E5} -> (fun (V7, V8) -> ((V8(('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, ('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 0)), V4)), V5))))(V6)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E10, E11} -> (fun (V13, V14) -> ((V14(case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E12, E13} -> (fun (V15, V16) -> ((V16(('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 1)), V10))))(V11)) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8, E9)); {'Idris.Core.TT.Pi', E14, E15, E16, E17} -> (fun (V17, V18, V19, V20) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E18, E19} -> (fun (V21, V22) -> ((V22(('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, ('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 2)), V18)), V19))))(V20)) end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16, E17)); {'Idris.Core.TT.PVar', E20, E21, E22, E23} -> (fun (V23, V24, V25, V26) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E24, E25} -> (fun (V27, V28) -> ((V28(('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, ('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 3)), V24)), V25))))(V26)) end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22, E23)); {'Idris.Core.TT.PLet', E26, E27, E28, E29} -> (fun (V29, V30, V31, V32) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E30, E31} -> (fun (V33, V34) -> ((V34(case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E32, E33} -> (fun (V35, V36) -> ((V36(('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 4)), V30))))(V31)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V32)) end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28, E29)); {'Idris.Core.TT.PVTy', E34, E35, E36} -> (fun (V37, V38, V39) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E37, E38} -> (fun (V40, V41) -> ((V41(('dn--un--hashWithSalt_Hashable_RigCount'(('dn--un--hashWithSalt_Hashable_Integer'(V1, 5)), V38))))(V39)) end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, V1, V2) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Int'(V1)) end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, ((((V1 * 33) rem 9223372036854775808) + case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E2, E3} -> (fun (V5, V6) -> (V5(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end) rem 9223372036854775808), V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Hashable_String'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_String'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_String'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_RigCount'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_RigCount'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_RigCount'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Pat'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Pat'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Pat'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Nat'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Nat'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Nat'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Namespace'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Namespace'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Namespace'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedDef'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedDef'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedConstAlt'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedConstAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedConstAlt'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedConAlt'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedConAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedConAlt'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_NamedCExp'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_NamedCExp'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_NamedCExp'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Name'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Name'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Name'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_LazyReason'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_LazyReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_LazyReason'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Integer'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Integer'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Integer'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Int'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Int'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Int'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Double'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Double'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Double'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Constant'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Constant'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Constant'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_ConInfo'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_ConInfo'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_ConInfo'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_Char'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_Char'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_Char'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_CFType'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_CFType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_CFType'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1) -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V2) -> ('dn--un--hash_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2)) end, fun (V3) -> fun (V4) -> ('dn--un--hashWithSalt_Hashable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V3, V4)) end end}.
'dn--un--__Impl_Hashable_(Term $vars)'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(Term $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(Term $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(PrimFn $arity)'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(PrimFn $arity)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(PrimFn $arity)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(PiInfo $t)'(V0) -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(PiInfo $t)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(PiInfo $t)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(Maybe $a)'(V0) -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(Maybe $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(Maybe $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(List1 $a)'(V0) -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(List1 $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(List1 $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(List $a)'(V0) -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(List $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(List $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_(CaseTree $vars)'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(CaseTree $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(CaseTree $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(CaseAlt $vars)'() -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V0) -> ('dn--un--hash_Hashable_(CaseAlt $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--hashWithSalt_Hashable_(CaseAlt $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Hashable_(Binder $ty)'(V0) -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_(Binder $ty)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_(Binder $ty)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Hashable_((Vect $n) $a)'(V0) -> {'Idris.Core.Hash.dn--un--__mkHashable', fun (V1) -> ('dn--un--hash_Hashable_((Vect $n) $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--hashWithSalt_Hashable_((Vect $n) $a)'(V0, V2, V3)) end end}.
'un--hashWithSalt'(V0, V1, V2) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E0, E1} -> (fun (V3, V4) -> ((V4(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--hash'(V0, V1) -> case V0 of {'Idris.Core.Hash.dn--un--__mkHashable', E0, E1} -> (fun (V2, V3) -> (V2(V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
