-module('Idris.Idris2.Core.FC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--show_Show_VirtualIdent'/1,
  'dn--un--show_Show_OriginDesc'/1,
  'dn--un--show_Show_FC'/1,
  'dn--un--showPrec_Show_VirtualIdent'/2,
  'dn--un--showPrec_Show_OriginDesc'/2,
  'dn--un--showPrec_Show_FC'/2,
  'dn--un--pretty_Pretty_OriginDesc'/1,
  'dn--un--pretty_Pretty_FC'/1,
  'dn--un--prettyPrec_Pretty_OriginDesc'/2,
  'dn--un--prettyPrec_Pretty_FC'/2,
  'dn--un--__Impl_Show_VirtualIdent'/0,
  'dn--un--__Impl_Show_OriginDesc'/0,
  'dn--un--__Impl_Show_FC'/0,
  'dn--un--__Impl_Pretty_OriginDesc'/0,
  'dn--un--__Impl_Pretty_FC'/0,
  'dn--un--__Impl_Eq_VirtualIdent'/0,
  'dn--un--__Impl_Eq_OriginDesc'/0,
  'dn--un--__Impl_Eq_FC'/0,
  'dn--un--==_Eq_VirtualIdent'/2,
  'dn--un--==_Eq_OriginDesc'/2,
  'dn--un--==_Eq_FC'/2,
  'dn--un--/=_Eq_VirtualIdent'/2,
  'dn--un--/=_Eq_OriginDesc'/2,
  'dn--un--/=_Eq_FC'/2,
  'un--within'/2,
  'un--virtualiseFC'/1,
  'un--toNonEmptyFC'/1,
  'un--startPos'/1,
  'un--startLine'/1,
  'un--startCol'/1,
  'un--showPos'/1,
  'un--replFC'/0,
  'un--prettyPos'/1,
  'un--origin'/1,
  'un--onLine'/2,
  'un--mergeFC'/2,
  'un--justFC'/1,
  'un--isNonEmptyFC'/1,
  'un--isConcreteFC'/1,
  'un--endPos'/1,
  'un--endLine'/1,
  'un--endCol'/1,
  'un--emptyFC'/0,
  'un--defaultFC'/0,
  'un--boundToFC'/2,
  'un--NonEmptyFC'/0,
  'un--FilePos'/0,
  'un--FileName'/0
]).
'dn--un--show_Show_VirtualIdent'(V0) -> case V0 of 0 -> <<"(Interactive)"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_OriginDesc'(V0) -> case V0 of {'Idris.Core.FC.PhysicalIdrSrc', E0} -> (fun (V1) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V1)) end(E0)); {'Idris.Core.FC.PhysicalPkgSrc', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V2)) end(E1)); {'Idris.Core.FC.Virtual', E2} -> (fun (V3) -> ('dn--un--show_Show_VirtualIdent'(V3)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_FC'(V0) -> case V0 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> <<"EmptyFC"/utf8>> end()); {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_OriginDesc'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPos'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--"/utf8>>, ('un--showPos'(V3)))))))))) end(E0, E1, E2)); {'Idris.Core.FC.MkVirtualFC', E3, E4, E5} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_OriginDesc'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPos'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"--"/utf8>>, ('un--showPos'(V6)))))))))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_VirtualIdent'(V0, V1) -> ('dn--un--show_Show_VirtualIdent'(V1)).
'dn--un--showPrec_Show_OriginDesc'(V0, V1) -> ('dn--un--show_Show_OriginDesc'(V1)).
'dn--un--showPrec_Show_FC'(V0, V1) -> ('dn--un--show_Show_FC'(V1)).
'dn--un--pretty_Pretty_OriginDesc'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('dn--un--show_Show_OriginDesc'(V0)))).
'dn--un--pretty_Pretty_FC'(V0) -> case V0 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"EmptyFC"/utf8>>)) end()); {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('dn--un--pretty_Pretty_OriginDesc'(V1)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('un--prettyPos'(V2)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"--"/utf8>>)))), ('un--prettyPos'(V3)))) end(E0, E1, E2)); {'Idris.Core.FC.MkVirtualFC', E3, E4, E5} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('dn--un--pretty_Pretty_OriginDesc'(V4)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('un--prettyPos'(V5)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"--"/utf8>>)))), ('un--prettyPos'(V6)))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_OriginDesc'(V0, V1) -> ('dn--un--pretty_Pretty_OriginDesc'(V1)).
'dn--un--prettyPrec_Pretty_FC'(V0, V1) -> ('dn--un--pretty_Pretty_FC'(V1)).
'dn--un--__Impl_Show_VirtualIdent'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_VirtualIdent'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_VirtualIdent'(V1, V2)) end end}.
'dn--un--__Impl_Show_OriginDesc'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_OriginDesc'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_OriginDesc'(V1, V2)) end end}.
'dn--un--__Impl_Show_FC'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_FC'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_FC'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_OriginDesc'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_OriginDesc'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_OriginDesc'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_FC'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_FC'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_FC'(V3, V4)) end end end}.
'dn--un--__Impl_Eq_VirtualIdent'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_VirtualIdent'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_VirtualIdent'(V2, V3)) end end}.
'dn--un--__Impl_Eq_OriginDesc'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_OriginDesc'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_OriginDesc'(V2, V3)) end end}.
'dn--un--__Impl_Eq_FC'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_FC'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_FC'(V2, V3)) end end}.
'dn--un--==_Eq_VirtualIdent'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_OriginDesc'(V0, V1) -> case V0 of {'Idris.Core.FC.PhysicalIdrSrc', E0} -> (fun (V2) -> case V1 of {'Idris.Core.FC.PhysicalIdrSrc', E1} -> (fun (V3) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.Core.FC.PhysicalPkgSrc', E2} -> (fun (V4) -> case V1 of {'Idris.Core.FC.PhysicalPkgSrc', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)) end(E3)); _ -> 0 end end(E2)); {'Idris.Core.FC.Virtual', E4} -> (fun (V6) -> case V1 of {'Idris.Core.FC.Virtual', E5} -> (fun (V7) -> ('dn--un--==_Eq_VirtualIdent'(V6, V7)) end(E5)); _ -> 0 end end(E4)); _ -> 0 end.
'dn--un--==_Eq_FC'(V0, V1) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.FC.MkFC', E3, E4, E5} -> (fun (V5, V6, V7) -> case ('dn--un--==_Eq_OriginDesc'(V2, V5)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, V3, V6)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V18, V19)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V22, V23)) end end}, V4, V7)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> 0 end end(E0, E1, E2)); {'Idris.Core.FC.MkVirtualFC', E6, E7, E8} -> (fun (V24, V25, V26) -> case V1 of {'Idris.Core.FC.MkVirtualFC', E9, E10, E11} -> (fun (V27, V28, V29) -> case ('dn--un--==_Eq_OriginDesc'(V24, V27)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V32, V33)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V36, V37)) end end}, V25, V28)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V40, V41)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V44, V45)) end end}, V26, V29)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> 0 end end(E6, E7, E8)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> case V1 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> 1 end()); _ -> 0 end end()); _ -> 0 end.
'dn--un--/=_Eq_VirtualIdent'(V0, V1) -> case ('dn--un--==_Eq_VirtualIdent'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_OriginDesc'(V0, V1) -> case ('dn--un--==_Eq_OriginDesc'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_FC'(V0, V1) -> case ('dn--un--==_Eq_FC'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--within'(V0, V1) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V10, V11)) end end}, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V24, V25)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V28, V29)) end end}, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V42, V43)) end end}, {'Idris.Builtin.MkPair', V2, V3}, V6)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V46, V47)) end end}, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V60, V61)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V64, V65)) end end}, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V78, V79)) end end}, {'Idris.Builtin.MkPair', V2, V3}, V7)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--virtualiseFC'(V0) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> {'Idris.Core.FC.MkVirtualFC', V1, V2, V3} end(E0, E1, E2)); _ -> V0 end.
'un--toNonEmptyFC'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('un--defaultFC'()) end, ('un--isNonEmptyFC'(V0)))).
'un--startPos'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> V3 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--startLine'(V0) -> ('Idris.Idris2.Builtin':'un--fst'(('un--startPos'(V0)))).
'un--startCol'(V0) -> ('Idris.Idris2.Builtin':'un--snd'(('un--startPos'(V0)))).
'un--showPos'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V1 + 1) rem 9223372036854775808))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V2 + 1) rem 9223372036854775808))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--replFC'() -> ('un--justFC'(('un--defaultFC'()))).
'un--prettyPos'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(((V1 + 1) rem 9223372036854775808))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(((V2 + 1) rem 9223372036854775808))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--origin'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> V1 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--onLine'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V0, ('Idris.Idris2.Builtin':'un--fst'(V4)))) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V0, ('Idris.Idris2.Builtin':'un--fst'(V5)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mergeFC'(V0, V1) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.FC.MkFC', E3, E4, E5} -> (fun (V5, V6, V7) -> case ('dn--un--==_Eq_OriginDesc'(V2, V5)) of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Core.FC.MkFC', V2, ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V10, V11)) end end}, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V24, V25)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V28, V29)) end end}, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V42, V43)) end end}, V3, V6)), ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V46, V47)) end end}, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V60, V61)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V64, V65)) end end}, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V78, V79)) end end}, V4, V7))}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--justFC'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> {'Idris.Core.FC.MkFC', V1, V3, V4} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isNonEmptyFC'(V0) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, V3}}} end(E0, E1, E2)); {'Idris.Core.FC.MkVirtualFC', E3, E4, E5} -> (fun (V4, V5, V6) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V6}}} end(E3, E4, E5)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isConcreteFC'(V0) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, V3}}} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--endPos'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> V4 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--endLine'(V0) -> ('Idris.Idris2.Builtin':'un--fst'(('un--endPos'(V0)))).
'un--endCol'(V0) -> ('Idris.Idris2.Builtin':'un--snd'(('un--endPos'(V0)))).
'un--emptyFC'() -> {'Idris.Core.FC.EmptyFC'}.
'un--defaultFC'() -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.Virtual', 0}, {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}}.
'un--boundToFC'(V0, V1) -> {'Idris.Core.FC.MkFC', V0, ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V1)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V1))}.
'un--NonEmptyFC'() -> {'Idris.Builtin.Pair', {'Idris.Core.FC.OriginDesc'}, {'Idris.Builtin.Pair', ('un--FilePos'()), ('un--FilePos'())}}.
'un--FilePos'() -> {'Idris.Builtin.Pair', {'Idris.Int'}, {'Idris.Int'}}.
'un--FileName'() -> {'Idris.String'}.
