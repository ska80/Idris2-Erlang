-module('Idris.Idris2.Idris.CommandLine').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--ideSocketModeAddress-971'/3,
  'nested--5555-2815--in--un--showSep'/6,
  'nested--3682-931--in--un--portPart'/3,
  'nested--5658-2905--in--un--optUsage'/3,
  'dn--un--show_Show_PkgCommand'/1,
  'dn--un--show_Show_OptType'/1,
  'dn--un--show_Show_DirCommand'/1,
  'dn--un--showPrec_Show_PkgCommand'/2,
  'dn--un--showPrec_Show_DirCommand'/2,
  'dn--un--__Impl_Show_PkgCommand'/0,
  'dn--un--__Impl_Show_DirCommand'/0,
  'un--versionMsg'/0,
  'un--usage'/0,
  'un--showDefault'/2,
  'un--separateBy'/2,
  'un--recogniseHelpTopic'/1,
  'un--processArgs'/4,
  'un--parseOpts'/2,
  'un--parseModules'/1,
  'un--optsUsage'/0,
  'un--options'/0,
  'un--optionFlags'/0,
  'un--optShow'/1,
  'un--optSeparator'/0,
  'un--matchFlag'/2,
  'un--makeTextFromOptionsOrEnvs'/1,
  'un--ideSocketModeAddress'/1,
  'un--getOpts'/1,
  'un--getCmdOpts'/1,
  'un--formatSocketAddress'/1,
  'un--firstColumnWidth'/0,
  'un--findMatch'/2,
  'un--envsUsage'/0,
  'un--checkNat'/1
]).
'case--ideSocketModeAddress-971'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V11 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 38398 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--3682-931--in--un--portPart'(V0, V1, V4)), fun (V5) -> ('Idris.Idris2.Data.String':'un--parsePositive'({'Idris.Prelude.Num.MkNum', fun (V6) -> fun (V7) -> ((V6 + V7) rem 9223372036854775808) end end, fun (V8) -> fun (V9) -> ((V8 * V9) rem 9223372036854775808) end end, fun (V10) -> V10 end}, V5)) end))))), begin (V12 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, <<""/utf8>>)) of 1 -> <<"localhost"/utf8>>; 0 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Builtin.MkPair', V12, V11} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5555-2815--in--un--showSep'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> V6; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('nested--5555-2815--in--un--showSep'(V0, V1, V2, V3, V4, V7)))))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3682-931--in--un--portPart'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, <<""/utf8>>)) of 1 -> {'Idris.Prelude.Types.Nothing'}; 0 -> {'Idris.Prelude.Types.Just', case ('string':'next_grapheme'(V2)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V3, V4) -> V4 end(E0, E1)); _ -> <<""/utf8>> end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5658-2905--in--un--optUsage'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V1, (1 + (1 + 0)))) - ('Idris.Idris2.Prelude.Types.String':'un--length'(V3))))), $ )))), ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<"\x{a}"/utf8>>)))))))) end end, V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_PkgCommand'(V0) -> case V0 of 0 -> <<"--build"/utf8>>; 1 -> <<"--install"/utf8>>; 2 -> <<"--install-with-src"/utf8>>; 3 -> <<"--mkdoc"/utf8>>; 4 -> <<"--typecheck"/utf8>>; 5 -> <<"--clean"/utf8>>; 6 -> <<"--repl"/utf8>>; 7 -> <<"--init"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_OptType'(V0) -> case V0 of {'Idris.Idris.CommandLine.Required', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<">"/utf8>>)))) end(E0)); {'Idris.Idris.CommandLine.RequiredNat', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<">"/utf8>>)))) end(E1)); {'Idris.Idris.CommandLine.RequiredLogLevel', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<">"/utf8>>)))) end(E2)); {'Idris.Idris.CommandLine.Optional', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, <<"]"/utf8>>)))) end(E3)); {'Idris.Idris.CommandLine.AutoNat', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<">"/utf8>>)))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_DirCommand'(V0) -> case V0 of 0 -> <<"--libdir"/utf8>>; 1 -> <<"--prefix"/utf8>>; 2 -> <<"--paths"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_PkgCommand'(V0, V1) -> ('dn--un--show_Show_PkgCommand'(V1)).
'dn--un--showPrec_Show_DirCommand'(V0, V1) -> ('dn--un--show_Show_DirCommand'(V1)).
'dn--un--__Impl_Show_PkgCommand'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgCommand'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgCommand'(V1, V2)) end end}.
'dn--un--__Impl_Show_DirCommand'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DirCommand'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DirCommand'(V1, V2)) end end}.
'un--versionMsg'() -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Idris 2, version "/utf8>>, ('Idris.Idris2.Libraries.Data.Version':'dn--un--show_Show_Version'(('Idris.Idris2.Idris.Version':'un--version'()))))).
'un--usage'() -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--versionMsg'()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Usage: idris2 [options] [input file]\x{a}\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Available options:\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--optsUsage'()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Environment variables:\x{a}"/utf8>>, ('un--envsUsage'()))))))))))))))).
'un--showDefault'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(default "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Prelude.Show.MkShow', E0, E1} -> (fun (V2, V3) -> (V2(V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<")"/utf8>>)))).
'un--separateBy'(V0, V1) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)) end, ('Idris.Idris2.Data.List':'un--splitOn'({'Idris.Prelude.EqOrd.MkEq', fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V5, V6)) end end}, V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))).
'un--recogniseHelpTopic'(V0) -> case V0 of <<"logging"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(0)); <<"pragma"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--processArgs'(V0, V1, V2, V3) -> case V1 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, V2}}; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Idris.CommandLine.Required', E2} -> (fun (V6) -> case V2 of [] -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing required argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_OptType'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for flag "/utf8>>, V0))))))}; [E3 | E4] -> (fun (V7, V8) -> ('un--processArgs'(V0, V5, V8, (V3(V7)))) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Idris.CommandLine.RequiredNat', E5} -> (fun (V9) -> case V2 of [] -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing required argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_OptType'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for flag "/utf8>>, V0))))))}; [E6 | E7] -> (fun (V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('Idris.Idris2.Data.Either':'un--maybeToEither'(fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected Nat argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for flag "/utf8>>, V0)))))) end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.String':'un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V12) -> fun (V13) -> (V12 + V13) end end, fun (V14) -> fun (V15) -> (V14 * V15) end end, fun (V16) -> V16 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V17) -> fun (V18) -> (V17 + V18) end end, fun (V19) -> fun (V20) -> (V19 * V20) end end, fun (V21) -> V21 end}, fun (V22) -> (0 - V22) end, fun (V23) -> fun (V24) -> (V23 - V24) end end}}, V10)), fun (V25) -> ('un--checkNat'(V25)) end)))), fun (V26) -> ('un--processArgs'(V0, V5, V11, (V3(V26)))) end)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Idris.CommandLine.RequiredLogLevel', E8} -> (fun (V27) -> case V2 of [] -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing required argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_OptType'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for flag "/utf8>>, V0))))))}; [E9 | E10] -> (fun (V28, V29) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('Idris.Idris2.Data.Either':'un--maybeToEither'(fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected LogLevel argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V28)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for flag "/utf8>>, V0)))))) end, ('Idris.Idris2.Core.Options.Log':'un--parseLogLevel'(V28)))), fun (V30) -> ('un--processArgs'(V0, V5, V29, (V3(V30)))) end)) end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); {'Idris.Idris.CommandLine.Optional', E11} -> (fun (V31) -> case V2 of [] -> ('un--processArgs'(V0, V5, [], (V3({'Idris.Prelude.Types.Nothing'})))); [E12 | E13] -> (fun (V32, V33) -> ('un--processArgs'(V0, V5, V33, (V3(('Idris.Idris2.Data.Maybe':'un--toMaybe'(case ('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"-"/utf8>>, V32)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> V32 end)))))) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); {'Idris.Idris.CommandLine.AutoNat', E14} -> (fun (V34) -> case V2 of [] -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing required argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_OptType'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for flag "/utf8>>, V0))))))}; [E15 | E16] -> (fun (V35, V36) -> case V35 of <<"auto"/utf8>> -> ('un--processArgs'(V0, V5, V36, (V3({'Idris.Prelude.Types.Nothing'})))); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('Idris.Idris2.Data.Either':'un--maybeToEither'(fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected Nat or \x{22}auto\x{22} argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V35)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for flag "/utf8>>, V0)))))) end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.String':'un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V37) -> fun (V38) -> (V37 + V38) end end, fun (V39) -> fun (V40) -> (V39 * V40) end end, fun (V41) -> V41 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V42) -> fun (V43) -> (V42 + V43) end end, fun (V44) -> fun (V45) -> (V44 * V45) end end, fun (V46) -> V46 end}, fun (V47) -> (0 - V47) end, fun (V48) -> fun (V49) -> (V48 - V49) end end}}, V35)), fun (V50) -> ('un--checkNat'(V50)) end)))), fun (V51) -> ('un--processArgs'(V0, V5, V36, (V3({'Idris.Prelude.Types.Just', V51})))) end)) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parseOpts'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--findMatch'(V0, V1)), fun (V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--parseOpts'(V0, V4)), fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, V5))} end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end.
'un--parseModules'(V0) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V1) -> ('Idris.Idris2.Core.Name.Namespace':'un--mkModuleIdentFromString'(V1)) end, ('un--separateBy'($,, V0)))).
'un--optsUsage'() -> ('un--makeTextFromOptionsOrEnvs'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> ('un--optShow'(V0)) end, ('un--options'()))))).
'un--options'() -> [{'Idris.Idris.CommandLine.MkOpt', [<<"--check"/utf8>> | [<<"-c"/utf8>> | []]], [], [{'Idris.Idris.CommandLine.CheckOnly'} | []], {'Idris.Prelude.Types.Just', <<"Exit after checking source file"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--output"/utf8>> | [<<"-o"/utf8>> | []]], [{'Idris.Idris.CommandLine.Required', <<"file"/utf8>>} | []], fun (V0) -> [{'Idris.Idris.CommandLine.OutputFile', V0} | [{'Idris.Idris.CommandLine.Quiet'} | []]] end, {'Idris.Prelude.Types.Just', <<"Specify output file"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--exec"/utf8>> | [<<"-x"/utf8>> | []]], [{'Idris.Idris.CommandLine.Required', <<"name"/utf8>>} | []], fun (V1) -> [{'Idris.Idris.CommandLine.ExecFn', V1} | [{'Idris.Idris.CommandLine.Quiet'} | []]] end, {'Idris.Prelude.Types.Just', <<"Execute function after checking source file"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--no-prelude"/utf8>> | []], [], [{'Idris.Idris.CommandLine.NoPrelude'} | []], {'Idris.Prelude.Types.Just', <<"Don\x{27}t implicitly import Prelude"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--codegen"/utf8>> | [<<"--cg"/utf8>> | []]], [{'Idris.Idris.CommandLine.Required', <<"backend"/utf8>>} | []], fun (V2) -> [{'Idris.Idris.CommandLine.SetCG', V2} | []] end, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Set code generator "/utf8>>, ('un--showDefault'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.Options':'dn--un--show_Show_CG'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Options':'dn--un--showPrec_Show_CG'(V4, V5)) end end}, case ('Idris.Idris2.Core.Options':'un--defaultSession'()) of {'Idris.Core.Options.MkSessionOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V10 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--incremental-cg"/utf8>> | [<<"--inc"/utf8>> | []]], [{'Idris.Idris.CommandLine.Required', <<"backend"/utf8>>} | []], fun (V32) -> [{'Idris.Idris.CommandLine.IncrementalCG', V32} | []] end, {'Idris.Prelude.Types.Just', <<"Incremental code generation on given backend"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--whole-program"/utf8>> | [<<"--wp"/utf8>> | []]], [], [{'Idris.Idris.CommandLine.WholeProgram'} | []], {'Idris.Prelude.Types.Just', <<"Use whole program compilation (overrides --inc)"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--directive"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"directive"/utf8>>} | []], fun (V33) -> [{'Idris.Idris.CommandLine.Directive', V33} | []] end, {'Idris.Prelude.Types.Just', <<"Pass a directive to the current code generator"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--package"/utf8>> | [<<"-p"/utf8>> | []]], [{'Idris.Idris.CommandLine.Required', <<"package"/utf8>>} | []], fun (V34) -> [{'Idris.Idris.CommandLine.PkgPath', V34} | []] end, {'Idris.Prelude.Types.Just', <<"Add a package as a dependency"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--source-dir"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"dir"/utf8>>} | []], fun (V35) -> [{'Idris.Idris.CommandLine.SourceDir', V35} | []] end, {'Idris.Prelude.Types.Just', <<"Set source directory"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--build-dir"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"dir"/utf8>>} | []], fun (V36) -> [{'Idris.Idris.CommandLine.BuildDir', V36} | []] end, {'Idris.Prelude.Types.Just', <<"Set build directory"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--output-dir"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"dir"/utf8>>} | []], fun (V37) -> [{'Idris.Idris.CommandLine.OutputDir', V37} | []] end, {'Idris.Prelude.Types.Just', <<"Set output directory"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--profile"/utf8>> | []], [], [{'Idris.Idris.CommandLine.Profile'} | []], {'Idris.Prelude.Types.Just', <<"Generate profile data when compiling, if supported"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--total"/utf8>> | []], [], [{'Idris.Idris.CommandLine.Total'} | []], {'Idris.Prelude.Types.Just', <<"Require functions to be total by default"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"-Werror"/utf8>> | []], [], [{'Idris.Idris.CommandLine.WarningsAsErrors'} | []], {'Idris.Prelude.Types.Just', <<"Treat warnings as errors"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"-Wno-shadowing"/utf8>> | []], [], [{'Idris.Idris.CommandLine.IgnoreShadowingWarnings'} | []], {'Idris.Prelude.Types.Just', <<"Do not print shadowing warnings"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"-Xcheck-hashes"/utf8>> | []], [], [{'Idris.Idris.CommandLine.HashesInsteadOfModTime'} | []], {'Idris.Prelude.Types.Just', <<"Use SHA256 hashes instead of modification time to determine if a source file needs rebuilding"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"-Xcase-tree-opt"/utf8>> | []], [], [{'Idris.Idris.CommandLine.CaseTreeHeuristics'} | []], {'Idris.Prelude.Types.Just', <<"Apply experimental optimizations to case tree generation"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--prefix"/utf8>> | []], [], [{'Idris.Idris.CommandLine.Directory', 1} | []], {'Idris.Prelude.Types.Just', <<"Show installation prefix"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--paths"/utf8>> | []], [], [{'Idris.Idris.CommandLine.Directory', 2} | []], {'Idris.Prelude.Types.Just', <<"Show paths"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--libdir"/utf8>> | []], [], [{'Idris.Idris.CommandLine.Directory', 0} | []], {'Idris.Prelude.Types.Just', <<"Show library directory"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--list-packages"/utf8>> | []], [], [{'Idris.Idris.CommandLine.ListPackages'} | []], {'Idris.Prelude.Types.Just', <<"List installed packages"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--init"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V38) -> [{'Idris.Idris.CommandLine.Package', 7, V38} | []] end, {'Idris.Prelude.Types.Just', <<"Interactively initialise a new project"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--build"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V39) -> [{'Idris.Idris.CommandLine.Package', 0, V39} | []] end, {'Idris.Prelude.Types.Just', <<"Build modules/executable for the given package"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--install"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V40) -> [{'Idris.Idris.CommandLine.Package', 1, V40} | []] end, {'Idris.Prelude.Types.Just', <<"Install the given package"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--install-with-src"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V41) -> [{'Idris.Idris.CommandLine.Package', 2, V41} | []] end, {'Idris.Prelude.Types.Just', <<"Install the given package"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--mkdoc"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V42) -> [{'Idris.Idris.CommandLine.Package', 3, V42} | []] end, {'Idris.Prelude.Types.Just', <<"Build documentation for the given package"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--typecheck"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V43) -> [{'Idris.Idris.CommandLine.Package', 4, V43} | []] end, {'Idris.Prelude.Types.Just', <<"Typechecks the given package without code generation"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--clean"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V44) -> [{'Idris.Idris.CommandLine.Package', 5, V44} | []] end, {'Idris.Prelude.Types.Just', <<"Clean intermediate files/executables for the given package"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--repl"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"package file"/utf8>>} | []], fun (V45) -> [{'Idris.Idris.CommandLine.Package', 6, V45} | []] end, {'Idris.Prelude.Types.Just', <<"Build the given package and launch a REPL instance."/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--find-ipkg"/utf8>> | []], [], [{'Idris.Idris.CommandLine.FindIPKG'} | []], {'Idris.Prelude.Types.Just', <<"Find and use an .ipkg file in a parent directory."/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--ignore-missing-ipkg"/utf8>> | []], [], [{'Idris.Idris.CommandLine.IgnoreMissingIPKG'} | []], {'Idris.Prelude.Types.Just', <<"Fail silently if a dependency is missing."/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--changed-modules"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"namespaces"/utf8>>} | []], fun (V46) -> [{'Idris.Idris.CommandLine.ChangedModules', {'Idris.Prelude.Types.Just', ('un--parseModules'(V46))}} | []] end, {'Idris.Prelude.Types.Just', <<"Comma-separated list of namespaces that have changed since last code generation"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--ide-mode"/utf8>> | []], [], [{'Idris.Idris.CommandLine.IdeMode'} | []], {'Idris.Prelude.Types.Just', <<"Run the REPL with machine-readable syntax"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--ide-mode-socket"/utf8>> | []], [{'Idris.Idris.CommandLine.Optional', <<"host:port"/utf8>>} | []], fun (V47) -> [{'Idris.Idris.CommandLine.IdeModeSocket', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> ('un--formatSocketAddress'(('un--ideSocketModeAddress'([])))) end, V47))} | []] end, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Run the ide socket mode on given host and port "/utf8>>, ('un--showDefault'({'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V49, V50)) end end}, ('un--formatSocketAddress'(('un--ideSocketModeAddress'([]))))))))}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--client"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"REPL command"/utf8>>} | []], fun (V51) -> [{'Idris.Idris.CommandLine.RunREPL', V51} | []] end, {'Idris.Prelude.Types.Just', <<"Run a REPL command then quit immediately"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--timing"/utf8>> | []], [], [{'Idris.Idris.CommandLine.Timing'} | []], {'Idris.Prelude.Types.Just', <<"Display timing logs"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--no-banner"/utf8>> | []], [], [{'Idris.Idris.CommandLine.NoBanner'} | []], {'Idris.Prelude.Types.Just', <<"Suppress the banner"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--quiet"/utf8>> | [<<"-q"/utf8>> | []]], [], [{'Idris.Idris.CommandLine.Quiet'} | []], {'Idris.Prelude.Types.Just', <<"Quiet mode; display fewer messages"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--console-width"/utf8>> | []], [{'Idris.Idris.CommandLine.AutoNat', <<"console width"/utf8>>} | []], fun (V52) -> [{'Idris.Idris.CommandLine.ConsoleWidth', V52} | []] end, {'Idris.Prelude.Types.Just', <<"Width for console output (0 for unbounded) (auto by default)"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--color"/utf8>> | [<<"--colour"/utf8>> | []]], [], [{'Idris.Idris.CommandLine.Color', 1} | []], {'Idris.Prelude.Types.Just', <<"Forces colored console output (enabled by default)"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--no-color"/utf8>> | [<<"--no-colour"/utf8>> | []]], [], [{'Idris.Idris.CommandLine.Color', 0} | []], {'Idris.Prelude.Types.Just', <<"Disables colored console output"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--verbose"/utf8>> | []], [], [{'Idris.Idris.CommandLine.Verbose'} | []], {'Idris.Prelude.Types.Just', <<"Verbose mode (default)"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--log"/utf8>> | []], [{'Idris.Idris.CommandLine.RequiredLogLevel', <<"log level"/utf8>>} | []], fun (V53) -> [{'Idris.Idris.CommandLine.Logging', V53} | []] end, {'Idris.Prelude.Types.Just', <<"Global log level (0 by default)"/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--version"/utf8>> | [<<"-v"/utf8>> | []]], [], [{'Idris.Idris.CommandLine.Version'} | []], {'Idris.Prelude.Types.Just', <<"Display version string"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--help"/utf8>> | [<<"-h"/utf8>> | [<<"-?"/utf8>> | []]]], [{'Idris.Idris.CommandLine.Optional', <<"topic"/utf8>>} | []], fun (V54) -> [{'Idris.Idris.CommandLine.Help', ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V54, fun (V55) -> ('un--recogniseHelpTopic'(V55)) end))} | []] end, {'Idris.Prelude.Types.Just', <<"Display help text"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--yaffle"/utf8>> | [<<"--ttimp"/utf8>> | []]], [{'Idris.Idris.CommandLine.Required', <<"ttimp file"/utf8>>} | []], fun (V56) -> [{'Idris.Idris.CommandLine.Yaffle', V56} | []] end, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--ttm"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"ttimp file"/utf8>>} | []], fun (V57) -> [{'Idris.Idris.CommandLine.Metadata', V57} | []] end, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--dumpcases"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V58) -> [{'Idris.Idris.CommandLine.DumpCases', V58} | []] end, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--dumplifted"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V59) -> [{'Idris.Idris.CommandLine.DumpLifted', V59} | []] end, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--dumpanf"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V60) -> [{'Idris.Idris.CommandLine.DumpANF', V60} | []] end, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--dumpvmcode"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"output file"/utf8>>} | []], fun (V61) -> [{'Idris.Idris.CommandLine.DumpVMCode', V61} | []] end, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--debug-elab-check"/utf8>> | []], [], [{'Idris.Idris.CommandLine.DebugElabCheck'} | []], {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--alt-error-count"/utf8>> | []], [{'Idris.Idris.CommandLine.RequiredNat', <<"alternative count"/utf8>>} | []], fun (V62) -> [{'Idris.Idris.CommandLine.AltErrorCount', V62} | []] end, {'Idris.Prelude.Types.Just', <<"Outputs errors for the given number of alternative parsing attempts."/utf8>>}} | [('un--optSeparator'()) | [{'Idris.Idris.CommandLine.MkOpt', [<<"--bash-completion"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"input"/utf8>>} | [{'Idris.Idris.CommandLine.Required', <<"previous input"/utf8>>} | []]], fun (V63) -> fun (V64) -> [{'Idris.Idris.CommandLine.BashCompletion', V63, V64} | []] end end, {'Idris.Prelude.Types.Just', <<"Print bash autocompletion information"/utf8>>}} | [{'Idris.Idris.CommandLine.MkOpt', [<<"--bash-completion-script"/utf8>> | []], [{'Idris.Idris.CommandLine.Required', <<"function name"/utf8>>} | []], fun (V65) -> [{'Idris.Idris.CommandLine.BashCompletionScript', V65} | []] end, {'Idris.Prelude.Types.Just', <<"Generate a bash script to activate autocompletion for Idris2"/utf8>>}} | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--optionFlags'() -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--options'()), fun (V0) -> case V0 of {'Idris.Idris.CommandLine.MkOpt', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'un--optShow'(V0) -> case V0 of {'Idris.Idris.CommandLine.MkOpt', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V1 of [] -> {'Idris.Builtin.MkPair', <<""/utf8>>, {'Idris.Prelude.Types.Just', <<""/utf8>>}}; _ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--5555-2815--in--un--showSep'(V4, V2, V3, V1, <<", "/utf8>>, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--5555-2815--in--un--showSep'(V4, V2, V3, V1, <<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('dn--un--show_Show_OptType'(V5)) end, V2)))))))), V4} end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--optSeparator'() -> {'Idris.Idris.CommandLine.MkOpt', [], [], [], {'Idris.Prelude.Types.Nothing'}}.
'un--matchFlag'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V6, V7)) end end}, V2, case V0 of {'Idris.Idris.CommandLine.MkOpt', E10, E11, E12, E13} -> (fun (V8, V9, V10, V11) -> V8 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--processArgs'(V2, case V0 of {'Idris.Idris.CommandLine.MkOpt', E2, E3, E4, E5} -> (fun (V12, V13, V14, V15) -> V13 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, case V0 of {'Idris.Idris.CommandLine.MkOpt', E6, E7, E8, E9} -> (fun (V16, V17, V18, V19) -> V18 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V20}} end)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeTextFromOptionsOrEnvs'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V29) -> ('nested--5658-2905--in--un--optUsage'(V0, ('un--firstColumnWidth'()), V29)) end, V0)).
'un--ideSocketModeAddress'(V0) -> case V0 of [] -> {'Idris.Builtin.MkPair', <<"localhost"/utf8>>, 38398}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IdeModeSocket', E2} -> (fun (V3) -> ('case--ideSocketModeAddress-971'(V2, V3, ('Idris.Idris2.Data.String':'un--break'(fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, $:)) end, V3)))) end(E2)); _ -> ('un--ideSocketModeAddress'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getOpts'(V0) -> ('un--parseOpts'(('un--options'()), V0)).
'un--getCmdOpts'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System':'un--getArgs'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), case V28 of [E0 | E1] -> (fun (V29, V30) -> ('un--getOpts'(V30)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Left', <<"Invalid command line"/utf8>>} end end.
'un--formatSocketAddress'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--firstColumnWidth'() -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V0) -> fun (V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V0, V1)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Builtin':'un--fst'(('un--optShow'(V2)))))) end, ('un--options'())))))), begin (V9 = ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V4, V5)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--length'(case V6 of {'Idris.Idris.Env.MkEnvDesc', E0, E1} -> (fun (V7, V8) -> V7 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Idris.Env':'un--envs'())))))), ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V3, V9)) end end.
'un--findMatch'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], []}}; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [{'Idris.Idris.CommandLine.InputFile', V2} | []], V3}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E2 | E3] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(('un--matchFlag'(V4, V1)), fun (V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findMatch'(V5, V1)) end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--envsUsage'() -> ('un--makeTextFromOptionsOrEnvs'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Idris.Env.MkEnvDesc', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Prelude.Types.Just', case V0 of {'Idris.Idris.Env.MkEnvDesc', E2, E3} -> (fun (V3, V4) -> V4 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end, ('Idris.Idris2.Idris.Env':'un--envs'()))))).
'un--checkNat'(V0) -> ('Idris.Idris2.Data.Maybe':'un--toMaybe'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V0, 0)), fun () -> ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V0)) end)).
