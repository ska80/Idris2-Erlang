-module('Idris.Idris2.Erlang.Data.Buffer').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--createBufferFromFile-4110'/4,
  'nested--4436-3997--in--un--unpackTo'/4,
  'un--writeBufferToFile'/4,
  'un--stringByteLength'/1,
  'un--setString'/4,
  'un--setInt32'/4,
  'un--setInt'/4,
  'un--setDouble'/4,
  'un--setByte'/4,
  'un--setBits8'/4,
  'un--setBits64'/4,
  'un--setBits32'/4,
  'un--setBits16'/4,
  'un--resizeBuffer'/3,
  'un--rawSize'/2,
  'un--newBuffer'/2,
  'un--getString'/4,
  'un--getInt32'/3,
  'un--getInt'/3,
  'un--getDouble'/3,
  'un--getByte'/3,
  'un--getBits8'/3,
  'un--getBits64'/3,
  'un--getBits32'/3,
  'un--getBits16'/3,
  'un--freeBuffer'/2,
  'un--flatten'/3,
  'un--createBufferFromFile'/2,
  'un--copyData'/6,
  'un--bufferData'/2
]).
'case--createBufferFromFile-4110'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E8} -> (fun (V4) -> begin (V5 = ('erlang':'apply'('erlang', 'byte_size', [V4 | []]))), case V0 of {'Idris.Prelude.IO.MkHasIO', E9, E10} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E11, E12, E13} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E14, E15} -> (fun (V39, V40) -> case V39 of {'Idris.Prelude.Interfaces.MkMonad', E16, E17, E18} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E19, E20, E21} -> (fun (V44, V45, V46) -> ((V45('erased'))(('erlang':'apply'('erlang', 'make_ref', [])))) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V11) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E22, E23} -> (fun (V12, V13) -> V12 end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Prelude.IO.MkHasIO', E24, E25} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E26, E27, E28} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Prelude.Interfaces.MkApplicative', E29, E30, E31} -> (fun (V19, V20, V21) -> ((((V19('erased'))('erased'))(fun (V30) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E32, E33} -> (fun (V22, V23) -> case V22 of {'Idris.Prelude.Interfaces.MkMonad', E34, E35, E36} -> (fun (V24, V25, V26) -> case V24 of {'Idris.Prelude.Interfaces.MkApplicative', E37, E38, E39} -> (fun (V27, V28, V29) -> ((V28('erased'))(('erlang':'apply'('erlang', 'put', [V11 | [{V4, V5} | []]])))) end(E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E40, E41} -> (fun (V31, V32) -> case V31 of {'Idris.Prelude.Interfaces.MkMonad', E42, E43, E44} -> (fun (V33, V34, V35) -> case V33 of {'Idris.Prelude.Interfaces.MkApplicative', E45, E46, E47} -> (fun (V36, V37, V38) -> ((V37('erased'))({'Idris.Prelude.Types.Right', V11})) end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V47, V48) -> case V47 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V49, V50, V51) -> case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V52, V53, V54) -> ((V53('erased'))({'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileReadError'}})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--4436-3997--in--un--unpackTo'(V0, V1, V2, V3) -> case V3 of 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V9, V10, V11) -> ((V10('erased'))(V2)) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V14, V15, V16) -> ((((V15('erased'))('erased'))(('un--getByte'(V0, V1, ((V3 - 1) rem 9223372036854775808)))))(fun (V17) -> ('nested--4436-3997--in--un--unpackTo'(V0, V1, [V17 | V2], ((V3 - 1) rem 9223372036854775808))) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--writeBufferToFile'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> V4 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--flatten'(V0, V2, V3)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E2, E3} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V51, V52) -> case V51 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V53, V54, V55) -> case V53 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V56, V57, V58) -> ((V57('erased'))(('erlang':'apply'('erlang', 'get', [V2 | []])))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V11) -> case V11 of {E15, E16} -> (fun (V12, V13) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E17, E18} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V16, V17, V18) -> ((((V17('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E22, E23} -> (fun (V43, V44) -> case V43 of {'Idris.Prelude.Interfaces.MkMonad', E24, E25, E26} -> (fun (V45, V46, V47) -> case V45 of {'Idris.Prelude.Interfaces.MkApplicative', E27, E28, E29} -> (fun (V48, V49, V50) -> ((V49('erased'))(('erlang':'apply'('file', 'write_file', [V1 | [V12 | []]])))) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V19) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E30, E31} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Interfaces.MkMonad', E32, E33, E34} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Prelude.Interfaces.MkApplicative', E35, E36, E37} -> (fun (V25, V26, V27) -> ((V26('erased'))(('Idris.Idris2.Erlang.Decode':'un--erlDecodeDef'({'Idris.Erlang.Types.ETErlTerm'}, fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.System.File.FileWriteError'}} end, ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V34, V35)) end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V38, V39, V40)) end end end end end}, fun (V41) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'ok', V41)) end, fun (V42) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Right', 0}, V42)) end)), V19)))) end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'un--stringByteLength'(V0) -> ('erlang':'apply'('erlang', 'byte_size', [V0 | []])).
'un--setString'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value/binary>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Size = ('erlang':'byte_size'(Value))), (Padding = ('binary':'copy'(<<0>>, Size))), (<<Start:Loc/binary, _:Size/binary, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value/binary, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setInt32'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/signed-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (32 div 8)))), (<<Start:Loc/binary, _:32/signed-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/signed-native-integer, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setInt'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/signed-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/signed-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/signed-native-integer, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setDouble'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/native-float>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/native-float, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/native-float, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setByte'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (8 div 8)))), (<<Start:Loc/binary, _:8/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/unsigned-native-integer, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits8'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:8/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (8 div 8)))), (<<Start:Loc/binary, _:8/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:8/unsigned-native-integer, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits64'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:64/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (64 div 8)))), (<<Start:Loc/binary, _:64/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:64/unsigned-native-integer, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits32'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:32/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (32 div 8)))), (<<Start:Loc/binary, _:32/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:32/unsigned-native-integer, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setBits16'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V32, V33, V34) -> ((V33('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V26) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, Loc, Value) when ((erlang:'byte_size'(Bin)) =< Loc) -> (Padding = ('binary':'copy'(<<0>>, (Loc - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary, Value:16/unsigned-native-integer>>, BufSize}; ({Bin, BufSize}, Loc, Value) -> (Padding = ('binary':'copy'(<<0>>, (16 div 8)))), (<<Start:Loc/binary, _:16/unsigned-native-integer, End/binary>> = <<Bin/binary, Padding/binary>>), {<<Start/binary, Value:16/unsigned-native-integer, End/binary>>, BufSize} end(V9, V2, V3)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resizeBuffer'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Prelude.IO.MkHasIO', E2, E3} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V28, V29) -> case V28 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V30, V31, V32) -> case V30 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V33, V34, V35) -> ((V34('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V11, V12) -> case V11 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V16, V17, V18) -> ((((V16('erased'))('erased'))(fun (V27) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E23, E24} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V24, V25, V26) -> ((V25('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, NewSize) when ((erlang:'byte_size'(Bin)) =< NewSize) -> {Bin, NewSize}; ({Bin, BufSize}, NewSize) -> {('binary':'part'(Bin, 0, NewSize)), NewSize} end(V10, V2)) | []]])))) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E31, E32} -> (fun (V36, V37) -> case V36 of {'Idris.Prelude.Interfaces.MkMonad', E33, E34, E35} -> (fun (V38, V39, V40) -> case V38 of {'Idris.Prelude.Interfaces.MkApplicative', E36, E37, E38} -> (fun (V41, V42, V43) -> ((V42('erased'))({'Idris.Prelude.Types.Just', V1})) end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'un--rawSize'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V7 of {E13, E14} -> (fun (V8, V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V15, V16, V17) -> ((V16('erased'))(V9)) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--newBuffer'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V37, V38) -> case V37 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V39, V40, V41) -> case V39 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V42, V43, V44) -> ((V43('erased'))(('erlang':'apply'('erlang', 'make_ref', [])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> begin (V8 = {<<>>, V1}), begin (V9 = V7), ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> V10 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V14, V15, V16) -> case V14 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V17, V18, V19) -> ((((V17('erased'))('erased'))(fun (V28) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E23, E24} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V25, V26, V27) -> ((V26('erased'))(('erlang':'apply'('erlang', 'put', [V9 | [V8 | []]])))) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E31, E32} -> (fun (V29, V30) -> case V29 of {'Idris.Prelude.Interfaces.MkMonad', E33, E34, E35} -> (fun (V31, V32, V33) -> case V31 of {'Idris.Prelude.Interfaces.MkApplicative', E36, E37, E38} -> (fun (V34, V35, V36) -> ((V35('erased'))({'Idris.Prelude.Types.Just', V9})) end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getString'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V23, V24, V25) -> ((V24('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V15, V16, V17) -> ((V16('erased'))((fun ({Bin, BufSize}, Loc, Len) when ((Loc + Len) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:Len/binary, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc, Len) -> ('binary':'copy'(<<0>>, Len)) end(V9, V2, V3)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getInt32'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:32/signed-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getInt'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/signed-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDouble'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/native-float, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0.0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getByte'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:8/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits8'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (8 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:8/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits64'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (64 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:64/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits32'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (32 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:32/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBits16'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((V15('erased'))((fun ({Bin, BufSize}, Loc) when ((Loc + (16 div 8)) =< (erlang:'byte_size'(Bin))) -> (<<_:Loc/binary, Value:16/unsigned-native-integer, _/binary>> = Bin), Value; ({Bin, BufSize}, Loc) -> 0 end(V8, V2)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--freeBuffer'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))(0)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--flatten'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V26, V27) -> case V26 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V28, V29, V30) -> case V28 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V31, V32, V33) -> ((V32('erased'))(('erlang':'apply'('erlang', 'get', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V14, V15, V16) -> ((((V14('erased'))('erased'))(fun (V25) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E21, E22} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E26, E27, E28} -> (fun (V22, V23, V24) -> ((V23('erased'))(('erlang':'apply'('erlang', 'put', [V1 | [(fun ({Bin, BufSize}, MaxBytes) when ((erlang:'byte_size'(Bin)) =< MaxBytes) -> (Padding = ('binary':'copy'(<<0>>, (MaxBytes - ('erlang':'byte_size'(Bin)))))), {<<Bin/binary, Padding/binary>>, BufSize}; ({Bin, BufSize}, MaxBytes) -> {('binary':'part'(Bin, 0, BufSize)), BufSize} end(V8, V2)) | []]])))) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--createBufferFromFile'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V15, V16, V17) -> ((V16('erased'))(('erlang':'apply'('file', 'read_file', [V1 | []])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> ('case--createBufferFromFile-4110'(V0, V1, V7, ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Idris.Erlang.Types.ETErlTerm'}, fun (V8) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V9) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V9)) end, V8)) end, V7)))) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--copyData'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))(('un--getString'(V0, V1, V2, V3))))(fun (V11) -> ('un--setString'(V0, V4, V5, V11)) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bufferData'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(('un--rawSize'(V0, V1))))(fun (V7) -> ('nested--4436-3997--in--un--unpackTo'(V0, V1, [], V7)) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
