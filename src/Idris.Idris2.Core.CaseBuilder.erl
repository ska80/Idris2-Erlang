-module('Idris.Idris2.Core.CaseBuilder').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--groupCons,addConstG-7863'/18,
  'with--groupCons,addDelayG-7689'/19,
  'with--groupCons,addConG-7361'/20,
  'with--partition-5371'/7,
  'case--patCompile-12551'/10,
  'case--match-10758'/13,
  'case--weakenNs-4198'/3,
  'case--substInPatInfo-3271'/11,
  'nested--16997-11469--in--un--updateVar'/11,
  'nested--12666-6832--in--un--update'/4,
  'nested--12642-6791--in--un--update'/1,
  'nested--19698-13300--in--un--toClosed'/8,
  'nested--10534-5004--in--un--splitCon'/11,
  'nested--9285-3890--in--un--showAll'/6,
  'nested--15150-9050--in--un--scores'/5,
  'nested--14897-8809--in--un--scoreFirstColumn'/7,
  'nested--14897-8810--in--un--scoreColumns'/8,
  'nested--15541-9420--in--un--sameTypeAs'/13,
  'nested--15977-9802--in--un--samePatAs'/4,
  'nested--9416-4016--in--un--prettyAll'/6,
  'nested--19698-13298--in--un--mkSubstEnv'/9,
  'nested--18834-12447--in--un--mkPatClausesFrom'/12,
  'nested--18460-12005--in--un--mkNames'/12,
  'nested--19698-13297--in--un--labelPat'/8,
  'nested--15150-9049--in--un--isBlank'/5,
  'nested--15541-9419--in--un--headEq'/12,
  'nested--19698-13296--in--un--getUnreachable'/9,
  'nested--18834-12448--in--un--getNames'/10,
  'nested--10534-5006--in--un--getClauseType'/12,
  'nested--19698-13195--in--un--getArgs'/8,
  'nested--12885-7021--in--un--gc'/14,
  'nested--19621-13121--in--un--findRAlts'/5,
  'nested--15977-9801--in--un--dropAs'/3,
  'nested--19698-13299--in--un--close'/10,
  'nested--10534-5005--in--un--clauseType\x{27}'/10,
  'nested--16977-11162--in--un--altGroups'/13,
  'nested--12885-7020--in--un--addGroup'/17,
  'nested--12885-7018--in--un--addDelayG'/17,
  'nested--12885-7019--in--un--addConstG'/16,
  'nested--12885-7017--in--un--addConG'/18,
  'dn--un--weaken_Weaken_ArgType'/1,
  'dn--un--weaken_Weaken_(PatInfo $p)'/1,
  'dn--un--weakenNs_Weaken_(PatInfo $p)'/2,
  'dn--un--show_Show_(Partitions $ps)'/2,
  'dn--un--show_Show_(ArgType $ns)'/2,
  'dn--un--show_Show_((PatClause $vars) $todo)'/3,
  'dn--un--show_Show_((NamedPats $vars) $todo)'/3,
  'dn--un--showPrec_Show_((PatClause $vars) $todo)'/4,
  'dn--un--resolved_HasNames_(ArgType $vars)'/3,
  'dn--un--resolved_HasNames_((PatInfo $n) $vars)'/3,
  'dn--un--resolved_HasNames_((PatClause $vars) $todo)'/3,
  'dn--un--resolved_HasNames_((NamedPats $vars) $todo)'/3,
  'dn--un--pretty_Pretty_((PatClause $vars) $todo)'/3,
  'dn--un--pretty_Pretty_((NamedPats $vars) $todo)'/3,
  'dn--un--full_HasNames_(ArgType $vars)'/3,
  'dn--un--full_HasNames_((PatInfo $n) $vars)'/3,
  'dn--un--full_HasNames_((PatClause $vars) $todo)'/3,
  'dn--un--full_HasNames_((NamedPats $vars) $todo)'/3,
  'un--zeroedScore'/2,
  'un--weakenNs'/2,
  'un--weaken'/3,
  'un--varRule'/11,
  'un--updatePats'/6,
  'un--updatePatNames'/2,
  'un--updateNames'/1,
  'un--toPatClause'/4,
  'un--tail'/1,
  'un--substInPats'/8,
  'un--substInPatInfo'/10,
  'un--substInClause'/6,
  'un--simpleCase'/8,
  'un--shuffleVars'/2,
  'un--sameType'/9,
  'un--samePat'/1,
  'un--pickNextViable'/10,
  'un--patCompile'/7,
  'un--partition'/5,
  'un--nextNames'/8,
  'un--nextName'/3,
  'un--nextIdxByScore'/5,
  'un--newPats'/3,
  'un--namesIn'/2,
  'un--namesFrom'/1,
  'un--moveFirst'/2,
  'un--mkPatClause'/7,
  'un--mkPat'/4,
  'un--mixture'/11,
  'un--match'/9,
  'un--highScoreIdx'/3,
  'un--highScore'/6,
  'un--heuristicF'/2,
  'un--heuristicB'/2,
  'un--heuristicA'/2,
  'un--headConsPenalty'/2,
  'un--groupCons'/9,
  'un--getScore'/8,
  'un--getPatInfo'/1,
  'un--getPat'/2,
  'un--getPMDef'/7,
  'un--getNPs'/1,
  'un--getFirstPat'/1,
  'un--getFirstArgType'/1,
  'un--findReached'/1,
  'un--dropPat'/2,
  'un--consScoreHeuristic'/3,
  'un--conRule'/10,
  'un--clauseType'/2,
  'un--checkGroupMatch'/3,
  'un--caseGroups'/13,
  'un--argToPat'/2,
  'un--applyHeuristics'/4,
  'un--++'/2
]).
'with--groupCons,addConstG-7863'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V11 of {'Idris.Core.CaseBuilder.ConstGroup', E2, E3} -> (fun (V18, V19) -> case V19 of [E6 | E7] -> (fun (V20, V21) -> case V20 of {'Idris.Core.CaseBuilder.MkPatClause', E10, E11, E12, E13} -> (fun (V22, V23, V24, V25) -> case V13 of {'Idris.Core.CaseBuilder.ConstMatch'} -> (fun () -> begin (V26 = {'Idris.Core.CaseBuilder.MkPatClause', V22, V17, V16, V15}), fun (V27) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseBuilder.ConstGroup', V18, [{'Idris.Core.CaseBuilder.MkPatClause', V22, V23, V24, V25} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V21, [V26 | []]))]} | V14]} end end end()); _ -> fun (V28) -> case V13 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V29 = (('nested--12885-7019--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))(V28))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Right', [V11 | V31]} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13)); _ -> fun (V32) -> case V13 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V33 = (('nested--12885-7019--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))(V32))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> {'Idris.Prelude.Types.Right', [V11 | V35]} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> fun (V36) -> case V13 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V37 = (('nested--12885-7019--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))(V36))), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> {'Idris.Prelude.Types.Right', [V11 | V39]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> fun (V40) -> case V13 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V41 = (('nested--12885-7019--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V12, V17, V16, V15, V14))(V40))), case V41 of {'Idris.Prelude.Types.Left', E0} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V43) -> {'Idris.Prelude.Types.Right', [V11 | V43]} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'with--groupCons,addDelayG-7689'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V11 of {'Idris.Core.CaseBuilder.DelayGroup', E2, E3, E4} -> (fun (V19, V20, V21) -> case V21 of [E7 | E8] -> (fun (V22, V23) -> case V22 of {'Idris.Core.CaseBuilder.MkPatClause', E11, E12, E13, E14} -> (fun (V24, V25, V26, V27) -> case V12 of {'Idris.Core.CaseBuilder.DelayMatch'} -> (fun () -> begin (V28 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V19 | [V20 | []]]))), begin (V29 = ('un--newPats'([V18 | [V17 | []]], (1 + (1 + 0)), V25))), begin (V30 = ('un--updatePatNames'(('un--updateNames'([{'Idris.Builtin.MkPair', V19, V18} | [{'Idris.Builtin.MkPair', V20, V17} | []]])), ('un--weakenNs'(V28, V16))))), begin (V31 = {'Idris.Core.CaseBuilder.MkPatClause', V24, ('un--++'(V29, V30)), V15, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V28, V14))}), fun (V32) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseBuilder.DelayGroup', V19, V20, [{'Idris.Core.CaseBuilder.MkPatClause', V24, V25, V26, V27} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V23, [V31 | []]))]} | V13]} end end end end end end()); _ -> fun (V33) -> case V12 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V34 = (('nested--12885-7018--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))(V33))), case V34 of {'Idris.Prelude.Types.Left', E15} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V36) -> {'Idris.Prelude.Types.Right', [V11 | V36]} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14)); _ -> fun (V37) -> case V12 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V38 = (('nested--12885-7018--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))(V37))), case V38 of {'Idris.Prelude.Types.Left', E9} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V40) -> {'Idris.Prelude.Types.Right', [V11 | V40]} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> fun (V41) -> case V12 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V42 = (('nested--12885-7018--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))(V41))), case V42 of {'Idris.Prelude.Types.Left', E5} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V44) -> {'Idris.Prelude.Types.Right', [V11 | V44]} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); _ -> fun (V45) -> case V12 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V46 = (('nested--12885-7018--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V18, V17, V16, V15, V14, V13))(V45))), case V46 of {'Idris.Prelude.Types.Left', E0} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V48) -> {'Idris.Prelude.Types.Right', [V11 | V48]} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'with--groupCons,addConG-7361'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V11 of {'Idris.Core.CaseBuilder.ConGroup', E2, E3, E4, E5} -> (fun (V20, V21, V22, V23) -> case V23 of [E8 | E9] -> (fun (V24, V25) -> case V24 of {'Idris.Core.CaseBuilder.MkPatClause', E12, E13, E14, E15} -> (fun (V26, V27, V28, V29) -> case V15 of {'Idris.Core.CaseBuilder.ConMatch', E18} -> (fun (V30) -> begin (V31 = ('un--newPats'(V12, V30, V27))), begin (V32 = ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V20))), begin (V33 = ('un--updatePatNames'(('un--updateNames'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V20, V12)))), ('un--weakenNs'(V32, V19))))), begin (V34 = {'Idris.Core.CaseBuilder.MkPatClause', V26, ('un--++'(V31, V33)), V18, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V32, V17))}), fun (V35) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseBuilder.ConGroup', V20, V21, V22, [{'Idris.Core.CaseBuilder.MkPatClause', V26, V27, V28, V29} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V25, [V34 | []]))]} | V16]} end end end end end end(E18)); _ -> fun (V36) -> case V15 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V37 = (('nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))(V36))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Right', [V11 | V39]} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15)); _ -> fun (V40) -> case V15 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V41 = (('nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))(V40))), case V41 of {'Idris.Prelude.Types.Left', E10} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V43) -> {'Idris.Prelude.Types.Right', [V11 | V43]} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> fun (V44) -> case V15 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V45 = (('nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))(V44))), case V45 of {'Idris.Prelude.Types.Left', E6} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V47) -> {'Idris.Prelude.Types.Right', [V11 | V47]} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> fun (V48) -> case V15 of {'Idris.Core.CaseBuilder.NoMatch'} -> (fun () -> begin (V49 = (('nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V14, V13, V12, V19, V18, V17, V16))(V48))), case V49 of {'Idris.Prelude.Types.Left', E0} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V51) -> {'Idris.Prelude.Types.Right', [V11 | V51]} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'with--partition-5371'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.CaseBuilder.ConClauses', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> case V7 of [E5 | E6] -> (fun (V12, V13) -> case ('un--clauseType'(V4, V6)) of 0 -> {'Idris.Core.CaseBuilder.ConClauses', [V0 | V1], V2, V9, [V6 | V10], V11}; 1 -> {'Idris.Core.CaseBuilder.VarClauses', [V0 | V1], V2, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V10, V9)), [V6 | []], {'Idris.Core.CaseBuilder.ConClauses', [V0 | V1], V2, V9, V10, V11}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> case V3 of [] -> case V5 of {'Idris.Core.CaseBuilder.NoClauses'} -> (fun () -> case ('un--clauseType'(V4, V6)) of 0 -> {'Idris.Core.CaseBuilder.ConClauses', [V0 | V1], V2, [], [V6 | []], {'Idris.Core.CaseBuilder.NoClauses'}}; 1 -> {'Idris.Core.CaseBuilder.VarClauses', [V0 | V1], V2, [], [V6 | []], {'Idris.Core.CaseBuilder.NoClauses'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.Core.CaseBuilder.VarClauses', E7, E8, E9, E10, E11} -> (fun (V14, V15, V16, V17, V18) -> case V14 of [E12 | E13] -> (fun (V19, V20) -> case ('un--clauseType'(V4, V6)) of 0 -> {'Idris.Core.CaseBuilder.ConClauses', [V0 | V1], V2, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V17, V16)), [V6 | []], {'Idris.Core.CaseBuilder.VarClauses', [V0 | V1], V2, V16, V17, V18}}; 1 -> {'Idris.Core.CaseBuilder.VarClauses', [V0 | V1], V2, V16, [V6 | V17], V18}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> case V3 of [] -> case V5 of {'Idris.Core.CaseBuilder.NoClauses'} -> (fun () -> case ('un--clauseType'(V4, V6)) of 0 -> {'Idris.Core.CaseBuilder.ConClauses', [V0 | V1], V2, [], [V6 | []], {'Idris.Core.CaseBuilder.NoClauses'}}; 1 -> {'Idris.Core.CaseBuilder.VarClauses', [V0 | V1], V2, [], [V6 | []], {'Idris.Core.CaseBuilder.NoClauses'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9, E10, E11)); _ -> case V3 of [] -> case V5 of {'Idris.Core.CaseBuilder.NoClauses'} -> (fun () -> case ('un--clauseType'(V4, V6)) of 0 -> {'Idris.Core.CaseBuilder.ConClauses', [V0 | V1], V2, [], [V6 | []], {'Idris.Core.CaseBuilder.NoClauses'}}; 1 -> {'Idris.Core.CaseBuilder.VarClauses', [V0 | V1], V2, [], [V6 | []], {'Idris.Core.CaseBuilder.NoClauses'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--patCompile-12551'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V10, V11) -> begin (V12 = ('nested--18834-12447--in--un--mkPatClausesFrom'(V0, V1, V2, V3, V4, V5, V6, V7, 0, V10, [V0 | V1], V9))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V7, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V15) -> begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V7, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--full_HasNames_((PatClause $vars) $todo)'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('dn--un--resolved_HasNames_((PatClause $vars) $todo)'(V21, V22, V23)) end end end}, V16, V17)) end end, V14, [], V15))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Pattern clauses:\x{a}"/utf8>>, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V29, V30)) end end end end, fun (V31) -> ('dn--un--pretty_Pretty_((PatClause $vars) $todo)'(V10, V10, V31)) end, V26))))))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V9))), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V35) -> ('dn--un--show_Show_((PatClause $vars) $todo)'(V10, V10, V35)) end, fun (V36) -> fun (V37) -> ('dn--un--showPrec_Show_((PatClause $vars) $todo)'(V10, V10, V36, V37)) end end}, V14)) end, V9))), case V38 of {'Idris.Prelude.Types.Left', E8} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.CaseBuilder.PName'}, 0, V9))), case V41 of {'Idris.Prelude.Types.Left', E10} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V43) -> begin (V45 = (('un--match'(V10, V10, V43, V7, V6, V5, V4, V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V44) -> ('Idris.Idris2.Core.CaseTree':'dn--un--weakenNs_Weaken_CaseTree'(V11, V44)) end, V2))))(V9))), case V45 of {'Idris.Prelude.Types.Left', E12} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V10, V47}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--match-10758'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V13, V14) -> begin (V20 = ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V17, V18)) end end end end, fun (V19) -> ('un--shuffleVars'(V14, V19)) end, V4))), fun (V21) -> begin (V27 = ('un--pickNextViable'(V13, V0, ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V14)), V9, V8, V7, V5, V6, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V24, V25)) end end end end, fun (V26) -> ('un--getNPs'(V26)) end, V20)), V21))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> case V29 of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V30, V31) -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"compile.casetree.pick"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Picked "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)), <<" as the next split"/utf8>>)))) end, V21))), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> begin (V40 = ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V37, V38)) end end end end, fun (V39) -> ('un--shuffleVars'(V31, V39)) end, V20))), begin (V42 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"compile.casetree.clauses"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Using clauses:"/utf8>> | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V41) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('dn--un--show_Show_((PatClause $vars) $todo)'(V0, [V30 | ('Idris.Idris2.Core.TT':'un--dropVar'([V13 | ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V14))], V31))], V41)))) end, V40))])) end, V21))), case V42 of {'Idris.Prelude.Types.Left', E8} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V44) -> begin (V45 = ('un--partition'(V30, ('Idris.Idris2.Core.TT':'un--dropVar'([V13 | ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V14))], V31)), V0, V5, V40))), begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"compile.casetree.partition"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Got Partition:\x{a}"/utf8>>, ('dn--un--show_Show_(Partitions $ps)'(V40, V45)))) end, V21))), case V46 of {'Idris.Prelude.Types.Left', E10} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V48) -> begin (V49 = (('un--mixture'(V30, V0, ('Idris.Idris2.Core.TT':'un--dropVar'([V13 | ('Idris.Idris2.Core.TT':'un--dropVar'([V2 | V1], V14))], V31)), V9, V8, V40, V7, V6, V5, V45, V3))(V21))), case V49 of {'Idris.Prelude.Types.Left', E12} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V51) -> case V51 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"compile.casetree.intermediate"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> <<"match: No clauses"/utf8>> end, V21))), case V52 of {'Idris.Prelude.Types.Left', E14} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Unmatched', <<"No clauses"/utf8>>}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E16} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"compile.casetree.intermediate"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"match: new case tree "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V0, V55)))) end, V21))), case V56 of {'Idris.Prelude.Types.Left', E17} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V58) -> {'Idris.Prelude.Types.Right', V55} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--weakenNs-4198'(V0, V1, V2) -> case V1 of 0 -> case V2 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> V0 end()); _ -> case V2 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V3) -> ('dn--un--weaken_Weaken_(PatInfo $p)'(('dn--un--weakenNs_Weaken_(PatInfo $p)'(V3, V0)))) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V2 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V4) -> ('dn--un--weaken_Weaken_(PatInfo $p)'(('dn--un--weakenNs_Weaken_(PatInfo $p)'(V4, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--substInPatInfo-3271'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.CaseBuilder.Known', E0, E1} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', case V4 of {'Idris.Core.CaseBuilder.MkInfo', E2, E3, E4, E5} -> (fun (V13, V14, V15, V16) -> {'Idris.Core.CaseBuilder.MkInfo', V13, V14, V15, {'Idris.Core.CaseBuilder.Known', V11, ('Idris.Idris2.Core.TT':'un--substName'(V6, V5, V12))}} end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2}} end(E0, E1)); {'Idris.Core.CaseBuilder.Stuck', E6} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E7} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V21, V10))), case V22 of {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Env':'un--mkEnv'(V7, V1))), begin (V26 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V8, V1, V21, V25, ('Idris.Idris2.Core.TT':'un--substName'(V6, V5, V17))))(V10))), case V26 of {'Idris.Prelude.Types.Left', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V28) -> case V28 of {'Idris.Core.Value.NBind', E13, E14, E15, E16} -> (fun (V29, V30, V31, V32) -> case V31 of {'Idris.Core.TT.Pi', E17, E18, E19, E20} -> (fun (V33, V34, V35, V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V8, V1, V24, V25, V36, V10))), case V37 of {'Idris.Prelude.Types.Left', E21} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V39) -> begin (V40 = (((V32(V21))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V25, {'Idris.Core.TT.Ref', V29, {'Idris.Core.TT.Bound'}, V3}))))(V10))), case V40 of {'Idris.Prelude.Types.Left', E23} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V42) -> begin (V43 = (('un--updatePats'(V1, V0, V8, V25, V42, V2))(V10))), case V43 of {'Idris.Prelude.Types.Left', E25} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', case V4 of {'Idris.Core.CaseBuilder.MkInfo', E27, E28, E29, E30} -> (fun (V46, V47, V48, V49) -> {'Idris.Core.CaseBuilder.MkInfo', V46, V47, V48, {'Idris.Core.CaseBuilder.Known', V34, V39}} end(E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V45}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17, E18, E19, E20)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, V2}} end end(E13, E14, E15, E16)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, V2}} end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, V2}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16997-11469--in--un--updateVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> case V12 of {'Idris.Core.CaseBuilder.::', E4, E5} -> (fun (V15, V16) -> fun (V17) -> case V15 of {'Idris.Core.CaseBuilder.MkInfo', E6, E7, E8, E9} -> (fun (V18, V19, V20, V21) -> case V20 of {'Idris.Core.CaseTree.PLoc', E12, E13} -> (fun (V22, V23) -> begin (V24 = ('un--substInPats'(V1, V0, V8, V7, V3, {'Idris.Core.TT.Local', V22, {'Idris.Prelude.Types.Just', 0}, V18}, V16, V17))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.MkPatClause', [V23 | V11], V26, V13, ('Idris.Idris2.Core.TT':'un--substName'(V23, {'Idris.Core.TT.Local', V22, {'Idris.Prelude.Types.Just', 0}, V18}, V14))}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); {'Idris.Core.CaseTree.PAs', E16, E17, E18} -> (fun (V27, V28, V29) -> begin (V30 = ('un--substInPats'(V1, V0, V8, V7, V3, ('Idris.Idris2.Core.CaseTree':'un--mkTerm'(V1, V29)), V16, V17))), case V30 of {'Idris.Prelude.Types.Left', E19} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.TT':'un--substName'(V28, {'Idris.Core.TT.Local', V27, {'Idris.Prelude.Types.Just', 1}, V18}, V14))), (('nested--16997-11469--in--un--updateVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, {'Idris.Core.CaseBuilder.MkPatClause', V11, {'Idris.Core.CaseBuilder.::', {'Idris.Core.CaseBuilder.MkInfo', V18, V19, V29, V21}, V32}, V13, V33}))(V17)) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17, E18)); _ -> begin (V34 = ('un--substInPats'(V1, V0, V8, V7, V3, ('Idris.Idris2.Core.CaseTree':'un--mkTerm'(V1, V20)), V16, V17))), case V34 of {'Idris.Prelude.Types.Left', E10} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.MkPatClause', V11, V36, V13, V14}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12666-6832--in--un--update'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V4, V5, V6) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, V5, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.CaseTree.PAs', V4, V5, ('nested--12666-6832--in--un--update'(V0, V1, V2, V6))} end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V11) -> {'Idris.Core.CaseTree.PAs', V4, V11, ('nested--12666-6832--in--un--update'(V0, V1, V2, V6))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E4, E5, E6, E7, E8} -> (fun (V12, V13, V14, V15, V16) -> {'Idris.Core.CaseTree.PCon', V12, V13, V14, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('nested--12666-6832--in--un--update'(V0, V1, V2, V17)) end, V16))} end(E4, E5, E6, E7, E8)); {'Idris.Core.CaseTree.PTyCon', E9, E10, E11, E12} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.CaseTree.PTyCon', V18, V19, V20, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('nested--12666-6832--in--un--update'(V0, V1, V2, V22)) end, V21))} end(E9, E10, E11, E12)); {'Idris.Core.CaseTree.PArrow', E13, E14, E15, E16} -> (fun (V23, V24, V25, V26) -> {'Idris.Core.CaseTree.PArrow', V23, V24, ('nested--12666-6832--in--un--update'(V0, V1, V2, V25)), ('nested--12666-6832--in--un--update'(V0, V1, V2, V26))} end(E13, E14, E15, E16)); {'Idris.Core.CaseTree.PDelay', E17, E18, E19, E20} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.CaseTree.PDelay', V27, V28, ('nested--12666-6832--in--un--update'(V0, V1, V2, V29)), ('nested--12666-6832--in--un--update'(V0, V1, V2, V30))} end(E17, E18, E19, E20)); {'Idris.Core.CaseTree.PLoc', E21, E22} -> (fun (V31, V32) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V35, V36)) end end}, V32, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.CaseTree.PLoc', V31, V32} end()); {'Idris.Prelude.Types.Just', E23} -> (fun (V37) -> {'Idris.Core.CaseTree.PLoc', V31, V37} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> V3 end.
'nested--12642-6791--in--un--update'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Core.CaseTree.PLoc', E2, E3} -> (fun (V3, V4) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V1}} end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--19698-13300--in--un--toClosed'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Core.Context.Context.MkClause', E2, E3, E4, E5} -> (fun (V10, V11, V12, V13) -> {'Idris.Builtin.MkPair', ('nested--19698-13299--in--un--close'(V0, V1, V2, V3, V4, V5, V10, V11, V8, V12)), ('nested--19698-13299--in--un--close'(V0, V1, V2, V3, V4, V5, V10, V11, V8, V13))} end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10534-5004--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V9, ('Idris.Idris2.Prelude.Types.List':'un--length'(V10)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9285-3890--in--un--showAll'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> case V5 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> <<""/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> case V5 of {'Idris.Core.CaseBuilder.::', E22, E23} -> (fun (V8, V9) -> case V9 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_Pat'(case V8 of {'Idris.Core.CaseBuilder.MkInfo', E34, E35, E36, E37} -> (fun (V10, V11, V12, V13) -> V12 end(E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(ArgType $ns)'(V3, case V8 of {'Idris.Core.CaseBuilder.MkInfo', E38, E39, E40, E41} -> (fun (V14, V15, V16, V17) -> V17 end(E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<"]"/utf8>>)))))))))) end()); _ -> case V5 of {'Idris.Core.CaseBuilder.::', E24, E25} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_Pat'(case V18 of {'Idris.Core.CaseBuilder.MkInfo', E26, E27, E28, E29} -> (fun (V20, V21, V22, V23) -> V22 end(E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(ArgType $ns)'(V3, case V18 of {'Idris.Core.CaseBuilder.MkInfo', E30, E31, E32, E33} -> (fun (V24, V25, V26, V27) -> V27 end(E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"]"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('nested--9285-3890--in--un--showAll'(V0, V1, V2, V3, V7, V19)))))))))))))))) end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> case V5 of {'Idris.Core.CaseBuilder.::', E12, E13} -> (fun (V28, V29) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_Pat'(case V28 of {'Idris.Core.CaseBuilder.MkInfo', E14, E15, E16, E17} -> (fun (V30, V31, V32, V33) -> V32 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(ArgType $ns)'(V3, case V28 of {'Idris.Core.CaseBuilder.MkInfo', E18, E19, E20, E21} -> (fun (V34, V35, V36, V37) -> V37 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"]"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('nested--9285-3890--in--un--showAll'(V0, V1, V2, V3, V7, V29)))))))))))))))) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V5 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V38, V39) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_Pat'(case V38 of {'Idris.Core.CaseBuilder.MkInfo', E4, E5, E6, E7} -> (fun (V40, V41, V42, V43) -> V42 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(ArgType $ns)'(V3, case V38 of {'Idris.Core.CaseBuilder.MkInfo', E8, E9, E10, E11} -> (fun (V44, V45, V46, V47) -> V47 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"]"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('nested--9285-3890--in--un--showAll'(V0, V1, V2, V3, V7, V39)))))))))))))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15150-9050--in--un--scores'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Data.Vect.Nil'} end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V5, V6) -> begin (V11 = case ('nested--15150-9049--in--un--isBlank'(V0, V1, V2, V3, case V5 of {'Idris.Core.CaseBuilder.MkInfo', E2, E3, E4, E5} -> (fun (V7, V8, V9, V10) -> V9 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Data.Vect.::', V11, ('nested--15150-9050--in--un--scores'(V0, V1, V2, V3, V6))} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14897-8809--in--un--scoreFirstColumn'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Builtin.MkPair', 0, {'Idris.Data.Vect.Nil'}}}; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V9, V10) -> begin (V11 = [V0 | V1]), case ('nested--14897-8809--in--un--scoreFirstColumn'(V0, V1, V2, V3, V4, V11, V8)) of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> {'Idris.Builtin.DPair.MkDPair', [V10 | V12], {'Idris.Builtin.MkPair', (1 + V14), {'Idris.Data.Vect.::', (V4(case V9 of {'Idris.Core.CaseBuilder.MkInfo', E8, E9, E10, E11} -> (fun (V16, V17, V18, V19) -> V18 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V15}}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14897-8810--in--un--scoreColumns'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Data.Vect.Nil'}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = [V0 | V1]), case ('nested--14897-8809--in--un--scoreFirstColumn'(V0, V1, V2, V3, V4, V10, V7)) of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> {'Idris.Data.Vect.::', V14, ('nested--14897-8810--in--un--scoreColumns'(V0, V1, V2, V3, V4, V10, V9, V11))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15541-9420--in--un--sameTypeAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Core.CaseBuilder.Known', E2, E3} -> (fun (V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V7, V0, V20, V3, V16))(V12))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> case ('nested--15541-9419--in--un--headEq'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V23, V5)) of 1 -> ('nested--15541-9420--in--un--sameTypeAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V12)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V6, V4, {'Idris.Core.Core.DifferingTypes'}}, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V6, V4, {'Idris.Core.Core.DifferingTypes'}}, V12)) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V6, V4, {'Idris.Core.Core.DifferingTypes'}}, V12)) end.
'nested--15977-9802--in--un--samePatAs'(V0, V1, V2, V3) -> case V3 of [] -> 1; _ -> case V2 of {'Idris.Core.CaseTree.PTyCon', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V3 of [E4 | E5] -> (fun (V8, V9) -> case V8 of {'Idris.Core.CaseTree.PTyCon', E6, E7, E8, E9} -> (fun (V10, V11, V12, V13) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V11)) of 1 -> ('nested--15977-9802--in--un--samePatAs'(V0, V1, {'Idris.Core.CaseTree.PTyCon', V4, V5, V6, V7}, V9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8, E9)); _ -> 0 end end(E4, E5)); _ -> 0 end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.PCon', E10, E11, E12, E13, E14} -> (fun (V14, V15, V16, V17, V18) -> case V3 of [E15 | E16] -> (fun (V19, V20) -> case V19 of {'Idris.Core.CaseTree.PCon', E17, E18, E19, E20, E21} -> (fun (V21, V22, V23, V24, V25) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V15, V22)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V23)) of 1 -> ('nested--15977-9802--in--un--samePatAs'(V0, V1, {'Idris.Core.CaseTree.PCon', V14, V15, V16, V17, V18}, V20)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20, E21)); _ -> 0 end end(E15, E16)); _ -> 0 end end(E10, E11, E12, E13, E14)); {'Idris.Core.CaseTree.PConst', E22, E23} -> (fun (V26, V27) -> case V3 of [E24 | E25] -> (fun (V28, V29) -> case V28 of {'Idris.Core.CaseTree.PConst', E26, E27} -> (fun (V30, V31) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V27, V31)) of 1 -> ('nested--15977-9802--in--un--samePatAs'(V0, V1, {'Idris.Core.CaseTree.PConst', V26, V27}, V29)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> 0 end end(E24, E25)); _ -> 0 end end(E22, E23)); {'Idris.Core.CaseTree.PArrow', E28, E29, E30, E31} -> (fun (V32, V33, V34, V35) -> case V3 of [E32 | E33] -> (fun (V36, V37) -> case V36 of {'Idris.Core.CaseTree.PArrow', E34, E35, E36, E37} -> (fun (V38, V39, V40, V41) -> ('nested--15977-9802--in--un--samePatAs'(V0, V1, {'Idris.Core.CaseTree.PArrow', V32, V33, V34, V35}, V37)) end(E34, E35, E36, E37)); _ -> 0 end end(E32, E33)); _ -> 0 end end(E28, E29, E30, E31)); {'Idris.Core.CaseTree.PDelay', E38, E39, E40, E41} -> (fun (V42, V43, V44, V45) -> case V3 of [E42 | E43] -> (fun (V46, V47) -> case V46 of {'Idris.Core.CaseTree.PDelay', E44, E45, E46, E47} -> (fun (V48, V49, V50, V51) -> ('nested--15977-9802--in--un--samePatAs'(V0, V1, {'Idris.Core.CaseTree.PDelay', V42, V43, V44, V45}, V47)) end(E44, E45, E46, E47)); _ -> 0 end end(E42, E43)); _ -> 0 end end(E38, E39, E40, E41)); {'Idris.Core.CaseTree.PLoc', E48, E49} -> (fun (V52, V53) -> case V3 of [E50 | E51] -> (fun (V54, V55) -> case V54 of {'Idris.Core.CaseTree.PLoc', E52, E53} -> (fun (V56, V57) -> ('nested--15977-9802--in--un--samePatAs'(V0, V1, {'Idris.Core.CaseTree.PLoc', V52, V53}, V55)) end(E52, E53)); _ -> 0 end end(E50, E51)); _ -> 0 end end(E48, E49)); _ -> 0 end end.
'nested--9416-4016--in--un--prettyAll'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> case V5 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V6, V7) -> case V5 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V8, V9) -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V6)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"="/utf8>>)), ('Idris.Idris2.Core.CaseTree':'dn--un--pretty_Pretty_Pat'(case V8 of {'Idris.Core.CaseBuilder.MkInfo', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> V12 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) | ('nested--9416-4016--in--un--prettyAll'(V0, V1, V2, V3, V7, V9))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19698-13298--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.TT.SubstEnv.Nil'} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V9, V10) -> {'Idris.Core.TT.SubstEnv.::', {'Idris.Core.TT.Ref', V4, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', V7, V6}}, ('nested--19698-13298--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, ((V6 + 1) rem 9223372036854775808), V7, V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18834-12447--in--un--mkPatClausesFrom'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V12, V13) -> begin (V14 = (('un--mkPatClause'(V7, V6, V5, V9, V3, V8, V12))(V11))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = ('nested--18834-12447--in--un--mkPatClausesFrom'(V0, V1, V2, V3, V4, V5, V6, V7, ((V8 + 1) rem 9223372036854775808), V9, V13, V11))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Right', [V16 | V19]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18460-12005--in--un--mkNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V8 of [] -> case V9 of [] -> case V10 of 0 -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Nil'}} end; _ -> ('erlang':'throw'("Nat case not covered")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V13, V14) -> case V9 of [E2 | E3] -> (fun (V15, V16) -> case V10 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V17 = (V10 - 1)), fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V22, V18))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V47 = case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CaseBuilder.Unknown'}}} end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V26) -> case V26 of {'Idris.Core.Value.NBind', E11, E12, E13, E14} -> (fun (V27, V28, V29, V30) -> case V29 of {'Idris.Core.TT.Pi', E17, E18, E19, E20} -> (fun (V31, V32, V33, V34) -> begin (V35 = (((V30(V22))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V27, {'Idris.Core.TT.Bound'}, V13}))))(V18))), case V35 of {'Idris.Prelude.Types.Left', E21} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V7, [], V25, {'Idris.Core.Env.Nil'}, V34, V18))), case V38 of {'Idris.Prelude.Types.Left', E23} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V37}, {'Idris.Core.CaseBuilder.Known', V32, ('Idris.Idris2.Core.TT':'un--embed'(V40))}}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17, E18, E19, E20)); _ -> begin (V41 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, [], V25, {'Idris.Core.Env.Nil'}, V26, V18))), case V41 of {'Idris.Prelude.Types.Left', E15} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'un--embed'(V43))}}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14)); _ -> begin (V44 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, [], V25, {'Idris.Core.Env.Nil'}, V26, V18))), case V44 of {'Idris.Prelude.Types.Left', E9} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'un--embed'(V46))}}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V47 of {'Idris.Prelude.Types.Left', E25} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V49) -> begin (V50 = (('nested--18460-12005--in--un--mkNames'(V0, V1, V2, V3, V4, V5, V6, V7, V14, V16, V17, ('Idris.Idris2.Builtin':'un--fst'(V49))))(V18))), case V50 of {'Idris.Prelude.Types.Left', E27} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', {'Idris.Core.CaseBuilder.MkInfo', 0, V13, V15, ('Idris.Idris2.Builtin':'un--snd'(V49))}, ('un--weaken'(V13, V14, V52))}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19698-13297--in--un--labelPat'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> [{'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pat"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)), <<":"/utf8>>)))), V8} | ('nested--19698-13297--in--un--labelPat'(V0, V1, V2, V3, V4, V5, ((V6 + 1) rem 9223372036854775808), V9))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15150-9049--in--un--isBlank'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CaseTree.PLoc', E0, E1} -> (fun (V5, V6) -> 1 end(E0, E1)); _ -> 0 end.
'nested--15541-9419--in--un--headEq'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V16, V17, V18, V19) -> case V10 of {'Idris.Core.Value.NBind', E14, E15, E16, E17} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Pi', E20, E21, E22, E23} -> (fun (V24, V25, V26, V27) -> 1 end(E20, E21, E22, E23)); _ -> case V10 of {'Idris.Core.Value.NErased', E18, E19} -> (fun (V28, V29) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E18, E19)); _ -> 0 end end end(E14, E15, E16, E17)); _ -> case V10 of {'Idris.Core.Value.NErased', E12, E13} -> (fun (V30, V31) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E12, E13)); _ -> 0 end end end(E8, E9, E10, E11)); _ -> case V10 of {'Idris.Core.Value.NErased', E6, E7} -> (fun (V32, V33) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E6, E7)); _ -> 0 end end end(E2, E3, E4, E5)); {'Idris.Core.Value.NTCon', E24, E25, E26, E27, E28} -> (fun (V34, V35, V36, V37, V38) -> case V10 of {'Idris.Core.Value.NTCon', E31, E32, E33, E34, E35} -> (fun (V39, V40, V41, V42, V43) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V35, V40)) end(E31, E32, E33, E34, E35)); _ -> case V10 of {'Idris.Core.Value.NErased', E29, E30} -> (fun (V44, V45) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E29, E30)); _ -> 0 end end end(E24, E25, E26, E27, E28)); {'Idris.Core.Value.NPrimVal', E36, E37} -> (fun (V46, V47) -> case V10 of {'Idris.Core.Value.NPrimVal', E40, E41} -> (fun (V48, V49) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V47, V49)) end(E40, E41)); _ -> case V10 of {'Idris.Core.Value.NErased', E38, E39} -> (fun (V50, V51) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E38, E39)); _ -> 0 end end end(E36, E37)); {'Idris.Core.Value.NType', E42} -> (fun (V52) -> case V10 of {'Idris.Core.Value.NType', E45} -> (fun (V53) -> 1 end(E45)); _ -> case V10 of {'Idris.Core.Value.NErased', E43, E44} -> (fun (V54, V55) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E43, E44)); _ -> 0 end end end(E42)); {'Idris.Core.Value.NApp', E46, E47, E48} -> (fun (V56, V57, V58) -> case V57 of {'Idris.Core.Value.NRef', E51, E52} -> (fun (V59, V60) -> case V10 of {'Idris.Core.Value.NApp', E55, E56, E57} -> (fun (V61, V62, V63) -> case V62 of {'Idris.Core.Value.NRef', E60, E61} -> (fun (V64, V65) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V60, V65)) end()); _ -> case V10 of {'Idris.Core.Value.NErased', E62, E63} -> (fun (V66, V67) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E62, E63)); _ -> 0 end end end(E60, E61)); _ -> case V10 of {'Idris.Core.Value.NErased', E58, E59} -> (fun (V68, V69) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E58, E59)); _ -> 0 end end end(E55, E56, E57)); _ -> case V10 of {'Idris.Core.Value.NErased', E53, E54} -> (fun (V70, V71) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E53, E54)); _ -> 0 end end end(E51, E52)); _ -> case V10 of {'Idris.Core.Value.NErased', E49, E50} -> (fun (V72, V73) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E49, E50)); _ -> 0 end end end(E46, E47, E48)); {'Idris.Core.Value.NErased', E64, E65} -> (fun (V74, V75) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> case V10 of {'Idris.Core.Value.NErased', E66, E67} -> (fun (V76, V77) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E66, E67)); _ -> 0 end end end(E64, E65)); _ -> case V10 of {'Idris.Core.Value.NErased', E0, E1} -> (fun (V78, V79) -> case V11 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> 1 end()); _ -> 0 end end(E0, E1)); _ -> 0 end end.
'nested--19698-13296--in--un--getUnreachable'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> []; [E0 | E1] -> (fun (V9, V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V13, V14)) end end}, V6, V7)) of 1 -> ('nested--19698-13296--in--un--getUnreachable'(V0, V1, V2, V3, V4, V5, ((V6 + 1) rem 9223372036854775808), V7, V10)); 0 -> [V9 | ('nested--19698-13296--in--un--getUnreachable'(V0, V1, V2, V3, V4, V5, ((V6 + 1) rem 9223372036854775808), V7, V10))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18834-12448--in--un--getNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Idris.Builtin.DPair.MkDPair', [], ('Idris.Idris2.Core.TT.SizeOf':'un--zero'())}; [E0 | E1] -> (fun (V10, V11) -> case ('nested--18834-12448--in--un--getNames'(V0, V1, V2, V3, V4, V5, V6, V7, ((V8 + 1) rem 9223372036854775808), V11)) of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V12, V13) -> {'Idris.Builtin.DPair.MkDPair', [{'Idris.Core.Name.MN', <<"arg"/utf8>>, V8} | V12], ('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V13))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10534-5006--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of {'Idris.Core.CaseBuilder.CompileTime', E5} -> (fun (V12) -> case V10 of {'Idris.Core.CaseTree.PCon', E11, E12, E13, E14, E15} -> (fun (V13, V14, V15, V16, V17) -> case V11 of {'Idris.Core.CaseBuilder.Known', E21, E22} -> (fun (V18, V19) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V26, V27)) end end}}, V18)) of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V34, V35)) end end}}, V12)) of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V51, V52, V53, V54)) end end end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V59, V60, V61)) end end end end end}, fun (V62) -> ('un--namesIn'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V7, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V74)) end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V78, V79, V80, V81)) end end end end end end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V83)) end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V86, V87, V88)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V89, V90)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V91) -> ('un--namesFrom'(V91)) end, ('un--getPatInfo'(V4)))))), V62)) end, V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> ('nested--10534-5004--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V16, V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> case V10 of {'Idris.Core.CaseTree.PAs', E18, E19, E20} -> (fun (V92, V93, V94) -> ('nested--10534-5006--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V94, V11)) end(E18, E19, E20)); _ -> case V11 of {'Idris.Core.CaseBuilder.Known', E16, E17} -> (fun (V95, V96) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V97) -> fun (V98) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V97, V98)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V99) -> fun (V100) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V99, V100)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V101) -> fun (V102) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V103, V104)) end end}}, V95)) of 1 -> 1; 0 -> ('nested--10534-5005--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> ('nested--10534-5005--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end end end end(E11, E12, E13, E14, E15)); _ -> case V10 of {'Idris.Core.CaseTree.PAs', E8, E9, E10} -> (fun (V105, V106, V107) -> ('nested--10534-5006--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V107, V11)) end(E8, E9, E10)); _ -> case V11 of {'Idris.Core.CaseBuilder.Known', E6, E7} -> (fun (V108, V109) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V110) -> fun (V111) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V110, V111)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V112) -> fun (V113) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V112, V113)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V114) -> fun (V115) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V116, V117)) end end}}, V108)) of 1 -> 1; 0 -> ('nested--10534-5005--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('nested--10534-5005--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end end end end(E5)); _ -> case V10 of {'Idris.Core.CaseTree.PAs', E2, E3, E4} -> (fun (V118, V119, V120) -> ('nested--10534-5006--in--un--getClauseType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V120, V11)) end(E2, E3, E4)); _ -> case V11 of {'Idris.Core.CaseBuilder.Known', E0, E1} -> (fun (V121, V122) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V123) -> fun (V124) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V123, V124)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V125) -> fun (V126) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V125, V126)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V127) -> fun (V128) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V127, V128)) end end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V129, V130)) end end}}, V121)) of 1 -> 1; 0 -> ('nested--10534-5005--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('nested--10534-5005--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)) end end end.
'nested--19698-13195--in--un--getArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = (((V11(V19))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V8, 0}))))(V7))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> begin (V23 = ('nested--19698-13195--in--un--getArgs'(V0, V1, V2, V3, V4, V5, V22, V7))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.Name.MN', <<"arg"/utf8>>, V5} | V25]} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'nested--12885-7021--in--un--gc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> fun (V14) -> {'Idris.Prelude.Types.Right', V12} end; [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Idris.Core.CaseBuilder.MkPatClause', E2, E3, E4, E5} -> (fun (V17, V18, V19, V20) -> fun (V21) -> case V18 of {'Idris.Core.CaseBuilder.::', E6, E7} -> (fun (V22, V23) -> case V22 of {'Idris.Core.CaseBuilder.MkInfo', E8, E9, E10, E11} -> (fun (V24, V25, V26, V27) -> begin (V28 = (('nested--12885-7020--in--un--addGroup'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, V24, V26, V23, V19, V20, V12))(V21))), case V28 of {'Idris.Prelude.Types.Left', E12} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V30) -> (('nested--12885-7021--in--un--gc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V30, V16))(V21)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19621-13121--in--un--findRAlts'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> ('un--findReached'(V8)) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V9, V10, V11) -> ('un--findReached'(V11)) end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V12, V13) -> ('un--findReached'(V13)) end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V14) -> ('un--findReached'(V14)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15977-9801--in--un--dropAs'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V3, V4, V5) -> V5 end(E0, E1, E2)); _ -> V2 end.
'nested--19698-13299--in--un--close'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(('nested--19698-13298--in--un--mkSubstEnv'(V0, V1, V2, V3, V4, V5, 0, V8, V7)), V9)).
'nested--10534-5005--in--un--clauseType\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.CaseTree.PCon', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> ('nested--10534-5004--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V14)) end(E0, E1, E2, E3, E4)); {'Idris.Core.CaseTree.PTyCon', E5, E6, E7, E8} -> (fun (V15, V16, V17, V18) -> ('nested--10534-5004--in--un--splitCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17, V18)) end(E5, E6, E7, E8)); {'Idris.Core.CaseTree.PConst', E9, E10} -> (fun (V19, V20) -> 0 end(E9, E10)); {'Idris.Core.CaseTree.PArrow', E11, E12, E13, E14} -> (fun (V21, V22, V23, V24) -> 0 end(E11, E12, E13, E14)); {'Idris.Core.CaseTree.PDelay', E15, E16, E17, E18} -> (fun (V25, V26, V27, V28) -> 0 end(E15, E16, E17, E18)); _ -> 1 end.
'nested--16977-11162--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', []} end end, fun () -> fun (V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseTree.DefaultCase', V14} | []]} end end end, V4)); [E0 | E1] -> (fun (V16, V17) -> fun (V18) -> case V16 of {'Idris.Core.CaseBuilder.ConGroup', E2, E3, E4, E5} -> (fun (V19, V20, V21, V22) -> begin (V24 = (('un--match'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V3)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V1)), V11, V10, V9, V8, V7, V22, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V23) -> ('Idris.Idris2.Core.CaseTree':'dn--un--weakenNs_Weaken_CaseTree'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V19)), V23)) end, V4))))(V18))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = (('nested--16977-11162--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V17))(V18))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseTree.ConCase', V20, V21, V19, V26} | V29]} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); {'Idris.Core.CaseBuilder.DelayGroup', E10, E11, E12} -> (fun (V30, V31, V32) -> begin (V34 = (('un--match'([V30 | [V31 | V3]], [V30 | [V31 | V1]], V11, V10, V9, V8, V7, V32, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V33) -> ('Idris.Idris2.Core.CaseTree':'dn--un--weakenNs_Weaken_CaseTree'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V30 | [V31 | []]])), V33)) end, V4))))(V18))), case V34 of {'Idris.Prelude.Types.Left', E13} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V36) -> begin (V37 = (('nested--16977-11162--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V17))(V18))), case V37 of {'Idris.Prelude.Types.Left', E15} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V39) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseTree.DelayCase', V30, V31, V36} | V39]} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12)); {'Idris.Core.CaseBuilder.ConstGroup', E17, E18} -> (fun (V40, V41) -> begin (V42 = (('un--match'(V3, V1, V11, V10, V9, V8, V7, V41, V4))(V18))), case V42 of {'Idris.Prelude.Types.Left', E19} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V44) -> begin (V45 = (('nested--16977-11162--in--un--altGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V17))(V18))), case V45 of {'Idris.Prelude.Types.Left', E21} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V47) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseTree.ConstCase', V40, V44} | V47]} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12885-7020--in--un--addGroup'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V12 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V17, V18, V19) -> ('nested--12885-7020--in--un--addGroup'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V19, V13, V14, ('Idris.Idris2.Core.TT':'un--substName'(V18, {'Idris.Core.TT.Local', V17, {'Idris.Prelude.Types.Just', 1}, V11}, V15)), V16)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V20, V21, V22, V23, V24) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V23, ('Idris.Idris2.Prelude.Types.List':'un--length'(V24)))) of 1 -> ('nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V21, V22, V24, V13, V14, V15, V16)); 0 -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V20, V5, {'Idris.Core.Core.NotFullyApplied', V21}}, V25)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V26, V27, V28, V29) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V28, ('Idris.Idris2.Prelude.Types.List':'un--length'(V29)))) of 1 -> ('nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V27, 0, V29, V13, V14, V15, V16)); 0 -> fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V26, V5, {'Idris.Core.Core.NotFullyApplied', V27}}, V30)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PArrow', E12, E13, E14, E15} -> (fun (V31, V32, V33, V34) -> ('nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"->"/utf8>>}}, 0, [V33 | [V34 | []]], V13, V14, V15, V16)) end(E12, E13, E14, E15)); {'Idris.Core.CaseTree.PDelay', E16, E17, E18, E19} -> (fun (V35, V36, V37, V38) -> ('nested--12885-7018--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V37, V38, V13, V14, V15, V16)) end(E16, E17, E18, E19)); {'Idris.Core.CaseTree.PConst', E20, E21} -> (fun (V39, V40) -> ('nested--12885-7019--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V40, V13, V14, V15, V16)) end(E20, E21)); _ -> fun (V41) -> {'Idris.Prelude.Types.Right', V16} end end.
'nested--12885-7018--in--un--addDelayG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> begin (V30 = {'Idris.Core.Value.NBind', V6, {'Idris.Core.Name.MN', <<"a"/utf8>>, 0}, {'Idris.Core.TT.Pi', V6, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Core.TT.Explicit'}, {'Idris.Core.Value.MkNFClosure', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), {'Idris.Core.Value.NType', V6}}}, fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V9, V21, V22))(V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V6, {'Idris.Core.Name.MN', <<"x"/utf8>>, 0}, {'Idris.Core.TT.Pi', V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V22}, fun (V27) -> fun (V28) -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDelayed', V6, 2, V26}} end end end}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}), fun (V31) -> begin (V32 = ('un--nextNames'(V9, V8, V7, V6, <<"e"/utf8>>, [V11 | [V12 | []]], {'Idris.Prelude.Types.Just', V30}, V31))), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> case V34 of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V35, V36) -> case V35 of [E6 | E7] -> (fun (V37, V38) -> case V38 of [E8 | E9] -> (fun (V39, V40) -> case V40 of [] -> case V36 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V41, V42) -> begin (V43 = ('un--updatePatNames'(('un--updateNames'([{'Idris.Builtin.MkPair', V37, V11} | [{'Idris.Builtin.MkPair', V39, V12} | []]])), ('un--weakenNs'(V41, V13))))), begin (V44 = {'Idris.Core.CaseBuilder.MkPatClause', V4, ('un--++'(V42, V43)), V14, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V41, V15))}), {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseBuilder.DelayGroup', V37, V39, [V44 | []]} | []]} end end end(E10, E11)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V31)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V31)) end end(E8, E9)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V31)) end end(E6, E7)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V31)) end end(E4, E5)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Error compiling Delay pattern match"/utf8>>}, V31)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; [E12 | E13] -> (fun (V45, V46) -> ('with--groupCons,addDelayG-7689'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V45, ('un--checkGroupMatch'({'Idris.Core.CaseBuilder.CDelay'}, [], V45)), V46, V15, V14, V13, V12, V11)) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12885-7019--in--un--addConstG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [] -> fun (V16) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseBuilder.ConstGroup', V11, [{'Idris.Core.CaseBuilder.MkPatClause', V4, V12, V13, V14} | []]} | []]} end; [E0 | E1] -> (fun (V17, V18) -> ('with--groupCons,addConstG-7863'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V17, V11, ('un--checkGroupMatch'({'Idris.Core.CaseBuilder.CConst', V11}, [], V17)), V18, V14, V13, V12)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12885-7017--in--un--addConG'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of [] -> fun (V18) -> begin (V63 = case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"->"/utf8>>}})) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V6, {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}, {'Idris.Core.TT.Pi', V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Core.Value.MkNFClosure', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), {'Idris.Core.Value.NType', V6}}}, fun (V19) -> fun (V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V6, {'Idris.Core.Name.MN', <<"_"/utf8>>, 1}, {'Idris.Core.TT.Pi', V6, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Core.Value.MkNFClosure', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), {'Idris.Core.Value.NErased', V6, 0}}}, fun (V22) -> fun (V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NType', V6}} end end end}} end end end}}; 0 -> begin (V26 = begin (V25 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V59 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V11, case V28 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V29 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V59 of {'Idris.Prelude.Types.Left', E32} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V61) -> case V61 of {'Idris.Prelude.Types.Just', E34} -> (fun (V62) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V7, V9, V28, ('Idris.Idris2.Core.Env':'un--mkEnv'(V6, V9)), ('Idris.Idris2.Core.TT':'un--embed'(V62))))(V18)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NErased', V6, 0}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V63 of {'Idris.Prelude.Types.Left', E35} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V65) -> begin (V66 = ('un--nextNames'(V9, V8, V7, V6, <<"e"/utf8>>, V13, {'Idris.Prelude.Types.Just', V65}, V18))), case V66 of {'Idris.Prelude.Types.Left', E37} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V68) -> case V68 of {'Idris.Builtin.DPair.MkDPair', E39, E40} -> (fun (V69, V70) -> case V70 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V71, V72) -> begin (V73 = ('un--updatePatNames'(('un--updateNames'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V69, V13)))), ('un--weakenNs'(V71, V14))))), begin (V74 = {'Idris.Core.CaseBuilder.MkPatClause', V4, ('un--++'(V72, V73)), V15, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V71, V16))}), {'Idris.Prelude.Types.Right', [{'Idris.Core.CaseBuilder.ConGroup', V69, V11, V12, [V74 | []]} | []]} end end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E43 | E44] -> (fun (V75, V76) -> ('with--groupCons,addConG-7361'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V9, V75, V13, V12, V11, ('un--checkGroupMatch'({'Idris.Core.CaseBuilder.CName', V11, V12}, V13, V75)), V76, V16, V15, V14)) end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--weaken_Weaken_ArgType'(V0) -> case V0 of {'Idris.Core.CaseBuilder.Known', E0, E1} -> (fun (V1, V2) -> {'Idris.Core.CaseBuilder.Known', V1, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V2))} end(E0, E1)); {'Idris.Core.CaseBuilder.Stuck', E2} -> (fun (V3) -> {'Idris.Core.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V3))} end(E2)); {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> {'Idris.Core.CaseBuilder.Unknown'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--weaken_Weaken_(PatInfo $p)'(V0) -> case V0 of {'Idris.Core.CaseBuilder.MkInfo', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Core.CaseBuilder.MkInfo', (1 + V1), V2, V3, ('dn--un--weaken_Weaken_ArgType'(V4))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--weakenNs_Weaken_(PatInfo $p)'(V0, V1) -> ('case--weakenNs-4198'(V1, V0, ('Idris.Idris2.Core.TT':'un--sizedView'(V0)))).
'dn--un--show_Show_(Partitions $ps)'(V0, V1) -> case V1 of {'Idris.Core.CaseBuilder.ConClauses', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"CON"/utf8>> | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('dn--un--show_Show_((PatClause $vars) $todo)'(V3, V2, V7)))) end, V5))])), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}, "/utf8>>, ('dn--un--show_Show_(Partitions $ps)'(V4, V6)))))) end(E0, E1, E2, E3, E4)); {'Idris.Core.CaseBuilder.VarClauses', E5, E6, E7, E8, E9} -> (fun (V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"VAR"/utf8>> | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('dn--un--show_Show_((PatClause $vars) $todo)'(V9, V8, V13)))) end, V11))])), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}, "/utf8>>, ('dn--un--show_Show_(Partitions $ps)'(V10, V12)))))) end(E5, E6, E7, E8, E9)); _ -> case V0 of [] -> case V1 of {'Idris.Core.CaseBuilder.NoClauses'} -> (fun () -> <<"NONE"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--show_Show_(ArgType $ns)'(V0, V1) -> case V1 of {'Idris.Core.CaseBuilder.Known', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Known "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V3)))))))) end(E0, E1)); {'Idris.Core.CaseBuilder.Stuck', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Stuck "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V4)))) end(E2)); {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> <<"Unknown"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_((PatClause $vars) $todo)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_((NamedPats $vars) $todo)'(V0, V1, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V6)))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_((NamedPats $vars) $todo)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9285-3890--in--un--showAll'(V0, V1, V2, V0, V1, V2)), <<"]"/utf8>>)))).
'dn--un--showPrec_Show_((PatClause $vars) $todo)'(V0, V1, V2, V3) -> ('dn--un--show_Show_((PatClause $vars) $todo)'(V0, V1, V3)).
'dn--un--resolved_HasNames_(ArgType $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.Known', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Known', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V0, V4, V8)) end, V2)) end(E0, E1)); {'Idris.Core.CaseBuilder.Stuck', E4} -> (fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Stuck', V12}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V0, V9, V13)) end, V2)) end(E4)); {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Unknown'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_((PatInfo $n) $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.MkInfo', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Pat'(V0, V5, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('dn--un--resolved_HasNames_(ArgType $vars)'(V0, V6, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.MkInfo', V3, V4, V9, V12}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_((PatClause $vars) $todo)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V9) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V10) -> {'Idris.Prelude.Types.Right', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> {'Idris.Core.CaseBuilder.MkPatClause', V11, V12, V13, V14} end end end end} end, fun (V15) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V16, V17)) end end, V3, [], V15)) end, V9)) end, fun (V18) -> ('dn--un--resolved_HasNames_((NamedPats $vars) $todo)'(V0, V4, V18)) end, V8)) end, fun (V19) -> {'Idris.Prelude.Types.Right', V5} end, V7)) end, fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V0, V6, V20)) end, V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_((NamedPats $vars) $todo)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Nil'}} end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> {'Idris.Prelude.Types.Right', fun (V7) -> fun (V8) -> {'Idris.Core.CaseBuilder.::', V7, V8} end end} end, fun (V9) -> ('dn--un--resolved_HasNames_((PatInfo $n) $vars)'(V0, V3, V9)) end, V5)) end, fun (V10) -> ('dn--un--resolved_HasNames_((NamedPats $vars) $todo)'(V0, V4, V10)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_((PatClause $vars) $todo)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('dn--un--pretty_Pretty_((NamedPats $vars) $todo)'(V0, V1, V4)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"=>"/utf8>>)), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_(Term $vars)'(V0, V6)))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_((NamedPats $vars) $todo)'(V0, V1, V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'(('nested--9416-4016--in--un--prettyAll'(V0, V1, V2, V0, V1, V2)))).
'dn--un--full_HasNames_(ArgType $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.Known', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Known', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V0, V4, V8)) end, V2)) end(E0, E1)); {'Idris.Core.CaseBuilder.Stuck', E4} -> (fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Stuck', V12}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V0, V9, V13)) end, V2)) end(E4)); {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Unknown'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_((PatInfo $n) $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.MkInfo', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Pat'(V0, V5, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('dn--un--full_HasNames_(ArgType $vars)'(V0, V6, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.MkInfo', V3, V4, V9, V12}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_((PatClause $vars) $todo)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V9) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V10) -> {'Idris.Prelude.Types.Right', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> {'Idris.Core.CaseBuilder.MkPatClause', V11, V12, V13, V14} end end end end} end, fun (V15) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V16, V17)) end end, V3, [], V15)) end, V9)) end, fun (V18) -> ('dn--un--full_HasNames_((NamedPats $vars) $todo)'(V0, V4, V18)) end, V8)) end, fun (V19) -> {'Idris.Prelude.Types.Right', V5} end, V7)) end, fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V0, V6, V20)) end, V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_((NamedPats $vars) $todo)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Nil'}} end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> {'Idris.Prelude.Types.Right', fun (V7) -> fun (V8) -> {'Idris.Core.CaseBuilder.::', V7, V8} end end} end, fun (V9) -> ('dn--un--full_HasNames_((PatInfo $n) $vars)'(V0, V3, V9)) end, V5)) end, fun (V10) -> ('dn--un--full_HasNames_((NamedPats $vars) $todo)'(V0, V4, V10)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--zeroedScore'(V0, V1) -> {'Idris.Core.CaseBuilder.Scored', V1, ('Idris.Idris2.Data.Vect':'un--replicate'((1 + ('Idris.Idris2.Prelude.Types.List':'un--length'(V0))), 0))}.
'un--weakenNs'(V0, V1) -> case V1 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Core.CaseBuilder.Nil'} end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CaseBuilder.::', ('dn--un--weakenNs_Weaken_(PatInfo $p)'(V0, V2)), ('un--weakenNs'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--weaken'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Core.CaseBuilder.Nil'} end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.CaseBuilder.::', ('dn--un--weaken_Weaken_(PatInfo $p)'(V3)), ('un--weaken'(V0, V1, V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--varRule'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> ('nested--16997-11469--in--un--updateVar'(V2, V1, V9, V0, V8, V7, V6, V5, V4, V3, V11)) end, V8, [], V10))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> (('un--match'(V1, V2, V3, V4, V5, V6, V7, V14, V9))(V10)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updatePats'(V0, V1, V2, V3, V4, V5) -> case V1 of [] -> fun (V6) -> case V5 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Nil'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E0 | E1] -> (fun (V7, V8) -> case V4 of {'Idris.Core.Value.NBind', E18, E19, E20, E21} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Pi', E38, E39, E40, E41} -> (fun (V13, V14, V15, V16) -> case V5 of {'Idris.Core.CaseBuilder.::', E58, E59} -> (fun (V17, V18) -> fun (V19) -> case V17 of {'Idris.Core.CaseBuilder.MkInfo', E60, E61, E62, E63} -> (fun (V20, V21, V22, V23) -> case V23 of {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> begin (V25 = begin (V24 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E64} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V19))), case V28 of {'Idris.Prelude.Types.Left', E66} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V2, V0, V30, V3, V16, V19))), case V31 of {'Idris.Prelude.Types.Left', E68} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V33) -> begin (V34 = (((V12(V27))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, {'Idris.Core.TT.Ref', V9, {'Idris.Core.TT.Bound'}, V7}))))(V19))), case V34 of {'Idris.Prelude.Types.Left', E70} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V36) -> begin (V37 = (('un--updatePats'(V0, V8, V2, V3, V36, V18))(V19))), case V37 of {'Idris.Prelude.Types.Left', E72} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', case V17 of {'Idris.Core.CaseBuilder.MkInfo', E74, E75, E76, E77} -> (fun (V40, V41, V42, V43) -> {'Idris.Core.CaseBuilder.MkInfo', V40, V41, V42, {'Idris.Core.CaseBuilder.Known', V14, V33}} end(E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V39}} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', V17, V18}} end end(E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58, E59)); _ -> case V5 of {'Idris.Core.CaseBuilder.::', E42, E43} -> (fun (V44, V45) -> fun (V46) -> case V44 of {'Idris.Core.CaseBuilder.MkInfo', E44, E45, E46, E47} -> (fun (V47, V48, V49, V50) -> case V50 of {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> begin (V52 = begin (V51 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E48} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V54, V46))), case V55 of {'Idris.Prelude.Types.Left', E50} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V57, V3, V4, V46))), case V58 of {'Idris.Prelude.Types.Left', E52} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', case V44 of {'Idris.Core.CaseBuilder.MkInfo', E54, E55, E56, E57} -> (fun (V61, V62, V63, V64) -> {'Idris.Core.CaseBuilder.MkInfo', V61, V62, V63, {'Idris.Core.CaseBuilder.Stuck', V60}} end(E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V45}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', V44, V45}} end end(E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39, E40, E41)); _ -> case V5 of {'Idris.Core.CaseBuilder.::', E22, E23} -> (fun (V65, V66) -> fun (V67) -> case V65 of {'Idris.Core.CaseBuilder.MkInfo', E24, E25, E26, E27} -> (fun (V68, V69, V70, V71) -> case V71 of {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> begin (V73 = begin (V72 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E28} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V75, V67))), case V76 of {'Idris.Prelude.Types.Left', E30} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V78, V3, V4, V67))), case V79 of {'Idris.Prelude.Types.Left', E32} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', case V65 of {'Idris.Core.CaseBuilder.MkInfo', E34, E35, E36, E37} -> (fun (V82, V83, V84, V85) -> {'Idris.Core.CaseBuilder.MkInfo', V82, V83, V84, {'Idris.Core.CaseBuilder.Stuck', V81}} end(E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V66}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', V65, V66}} end end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19, E20, E21)); _ -> case V5 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V86, V87) -> fun (V88) -> case V86 of {'Idris.Core.CaseBuilder.MkInfo', E4, E5, E6, E7} -> (fun (V89, V90, V91, V92) -> case V92 of {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> begin (V94 = begin (V93 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E8} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V96) -> begin (V97 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V96, V88))), case V97 of {'Idris.Prelude.Types.Left', E10} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V99) -> begin (V100 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V99, V3, V4, V88))), case V100 of {'Idris.Prelude.Types.Left', E12} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V102) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', case V86 of {'Idris.Core.CaseBuilder.MkInfo', E14, E15, E16, E17} -> (fun (V103, V104, V105, V106) -> {'Idris.Core.CaseBuilder.MkInfo', V103, V104, V105, {'Idris.Core.CaseBuilder.Stuck', V102}} end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V87}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', V86, V87}} end end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updatePatNames'(V0, V1) -> case V1 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Core.CaseBuilder.Nil'} end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CaseBuilder.::', case V2 of {'Idris.Core.CaseBuilder.MkInfo', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> {'Idris.Core.CaseBuilder.MkInfo', V4, V5, ('nested--12666-6832--in--un--update'(V3, V2, V0, V6)), V7} end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--updatePatNames'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateNames'(V0) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V1) -> ('nested--12642-6791--in--un--update'(V1)) end, V0)).
'un--toPatClause'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V4)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> fun (V8) -> case V6 of {'Idris.Core.TT.Ref', E4, E5, E6} -> (fun (V9, V10, V11) -> case V10 of {'Idris.Core.TT.Func'} -> (fun () -> begin (V13 = begin (V12 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> begin (V46 = (('Idris.Idris2.Core.Context':'un--getPosition'(V2, case V15 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V16 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V46 of {'Idris.Prelude.Types.Left', E39} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V48) -> case V48 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V49, V50) -> begin (V81 = (('Idris.Idris2.Core.Context':'un--getPosition'(V11, case V15 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V51 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V81 of {'Idris.Prelude.Types.Left', E73} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V83) -> case V83 of {'Idris.Builtin.MkPair', E75, E76} -> (fun (V84, V85) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V49, V84)) of 1 -> begin (V87 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V86) -> ('un--argToPat'(V0, V86)) end, V7, [], V8))), case V87 of {'Idris.Prelude.Types.Left', E77} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V89, V5}} end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Wrong function name in pattern LHS "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V90)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V91, V92)) end end}, {'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V94, V95)) end end}}, {'Idris.Builtin.MkPair', V2, V11}))))}, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"Not a function name in pattern LHS"/utf8>>}, V8)) end end(E4, E5, E6)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"Not a function name in pattern LHS"/utf8>>}, V8)) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tail'(V0) -> case V0 of {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substInPats'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V1 of [] -> case V6 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.Nil'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V8, V9) -> case V6 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V10, V11) -> begin (V12 = ('un--substInPatInfo'(V8, V0, V9, V2, V3, V4, V5, V10, V11, V7))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> begin (V17 = ('un--substInPats'(V0, V9, V2, V3, V4, V5, V16, V7))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.::', V15, V19}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substInPatInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('case--substInPatInfo-3271'(V2, V1, V8, V0, V7, V6, V5, V4, V3, case V7 of {'Idris.Core.CaseBuilder.MkInfo', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> V13 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9)).
'un--substInClause'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> fun (V10) -> case V7 of {'Idris.Core.CaseBuilder.::', E4, E5} -> (fun (V11, V12) -> case V11 of {'Idris.Core.CaseBuilder.MkInfo', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> begin (V17 = ('un--substInPats'(V1, V2, V3, V4, V0, ('Idris.Idris2.Core.CaseTree':'un--mkTerm'(V1, V15)), V12, V10))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.MkPatClause', V6, {'Idris.Core.CaseBuilder.::', {'Idris.Core.CaseBuilder.MkInfo', V13, V14, V15, V16}, V19}, V8, V9}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--simpleCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V8) -> begin (V31 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> fun (V10) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V13) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V14) -> {'Idris.Prelude.Types.Right', fun (V15) -> fun (V16) -> {'Idris.Builtin.MkPair', V15, V16} end end} end, fun (V17) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V21, V22, V23)) end end end}, V11, V17)) end, V13)) end, fun (V24) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V28, V29, V30)) end end end}, V12, V24)) end, V10)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V6, [], V8))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"simpleCase: Clauses:\x{a}"/utf8>>, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V34, V35)) end end, V33, fun (V36) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_(Term $vars)'([], ('Idris.Idris2.Builtin':'un--fst'(V36)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"="/utf8>>)), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_(Term $vars)'([], ('Idris.Idris2.Builtin':'un--snd'(V36)))))))) end))))))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V7))), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> begin (V41 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V40) -> ('un--toPatClause'(V0, V1, V3, V40)) end, V6, [], V7))), case V41 of {'Idris.Prelude.Types.Left', E6} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E8} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V47) -> (('un--patCompile'(V0, V1, V3, V2, V4, V43, V5))(V7)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--shuffleVars'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.CaseBuilder.MkPatClause', E8, E9, E10, E11} -> (fun (V2, V3, V4, V5) -> V1 end(E8, E9, E10, E11)); _ -> case V1 of {'Idris.Core.CaseBuilder.MkPatClause', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.CaseBuilder.MkPatClause', V6, ('un--moveFirst'(V0, V7)), V8, V9} end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V1 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> {'Idris.Core.CaseBuilder.MkPatClause', V10, ('un--moveFirst'(V0, V11)), V12, V13} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sameType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V9, V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case ('un--getFirstArgType'(V9)) of {'Idris.Core.CaseBuilder.Known', E4, E5} -> (fun (V15, V16) -> begin (V17 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V2, V0, V14, V6, V16))(V8))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> ('nested--15541-9420--in--un--sameTypeAs'(V0, V9, V10, V6, V5, V4, V3, V2, V1, V4, V19, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('un--getFirstArgType'(V20)) end, V10)), V8)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V3, V5, {'Idris.Core.Core.DifferingTypes'}}, V8)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--samePat'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> ('nested--15977-9802--in--un--samePatAs'(V1, V2, ('nested--15977-9801--in--un--dropAs'(V1, V2, ('un--getFirstPat'(V1)))), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('nested--15977-9801--in--un--dropAs'(V1, V2, ('un--getFirstPat'(V3)))) end, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pickNextViable'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V2 of [] -> case ('un--samePat'(V8)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, 0}}; 0 -> begin (V10 = ('un--getScore'(V1, V3, V4, V5, V6, V7, V8, V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> case V13 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, 0}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V5, V7, V14}, V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E4 | E5] -> (fun (V15, V16) -> case ('un--samePat'(V8)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, 0}}; 0 -> begin (V17 = ('un--getScore'(V1, V3, V4, V5, V6, V7, V8, V9))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> case V19 of {'Idris.Prelude.Types.Right', E12} -> (fun (V20) -> case V20 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, 0}}; _ -> begin (V22 = ('un--pickNextViable'(V15, V1, V16, V3, V4, V5, V6, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('un--tail'(V21)) end, V8)), V9))), case V22 of {'Idris.Prelude.Types.Left', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V24) -> case V24 of {'Idris.Builtin.DPair.MkDPair', E15, E16} -> (fun (V25, V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V25, (1 + V26)}} end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> begin (V28 = ('un--pickNextViable'(V15, V1, V16, V3, V4, V5, V6, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('un--tail'(V27)) end, V8)), V9))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> case V30 of {'Idris.Builtin.DPair.MkDPair', E10, E11} -> (fun (V31, V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V31, (1 + V32)}} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--patCompile'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Core.CaseTree.Unmatched', <<"No definition"/utf8>>}}} end end, fun () -> fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', [], V8}} end end end, V6)); [E0 | E1] -> (fun (V10, V11) -> fun (V12) -> ('case--patCompile-12551'(V10, V11, V6, V4, V3, V2, V1, V0, ('nested--18834-12448--in--un--getNames'(V10, V11, V6, V4, V3, V2, V1, V0, 0, ('Idris.Idris2.Builtin':'un--fst'(V10)))), V12)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--partition'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Idris.Core.CaseBuilder.NoClauses'}; [E0 | E1] -> (fun (V5, V6) -> ('with--partition-5371'(V0, V1, V2, V6, V3, ('un--partition'(V0, V1, V2, V3, V6)), V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nextNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), {'Idris.Core.CaseBuilder.Nil'}}}}; [E0 | E1] -> (fun (V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V13, V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('un--nextName'(V1, V4, V7))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Env':'un--mkEnv'(V3, V0))), begin (V50 = case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CaseBuilder.Unknown'}}} end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V21) -> case V21 of {'Idris.Core.Value.NBind', E11, E12, E13, E14} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Pi', E17, E18, E19, E20} -> (fun (V26, V27, V28, V29) -> begin (V30 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, V0, V13, V29))(V7))), case V30 of {'Idris.Prelude.Types.Left', E21} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V32) -> case V32 of {'Idris.Core.Value.NErased', E27, E28} -> (fun (V33, V34) -> begin (V35 = (((V25(V13))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V20, {'Idris.Core.TT.Ref', V22, {'Idris.Core.TT.Bound'}, V19}))))(V7))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V37}, {'Idris.Core.CaseBuilder.Unknown'}}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28)); _ -> begin (V38 = (((V25(V13))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V20, {'Idris.Core.TT.Ref', V22, {'Idris.Core.TT.Bound'}, V19}))))(V7))), case V38 of {'Idris.Prelude.Types.Left', E23} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V16, V20, V32, V7))), case V41 of {'Idris.Prelude.Types.Left', E25} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V40}, {'Idris.Core.CaseBuilder.Known', V27, V43}}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17, E18, E19, E20)); _ -> begin (V44 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V16, V20, V21, V7))), case V44 of {'Idris.Prelude.Types.Left', E15} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CaseBuilder.Stuck', V46}}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14)); _ -> begin (V47 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V2, V0, V16, V20, V21, V7))), case V47 of {'Idris.Prelude.Types.Left', E9} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CaseBuilder.Stuck', V49}}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V50 of {'Idris.Prelude.Types.Left', E31} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V52) -> begin (V53 = ('un--nextNames'(V0, V1, V2, V3, V4, V9, ('Idris.Idris2.Builtin':'un--fst'(V52)), V7))), case V53 of {'Idris.Prelude.Types.Left', E33} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V55) -> case V55 of {'Idris.Builtin.DPair.MkDPair', E35, E36} -> (fun (V56, V57) -> case V57 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V58, V59) -> begin (V63 = case ('Idris.Idris2.Builtin':'un--snd'(V52)) of {'Idris.Core.CaseBuilder.Unknown'} -> (fun () -> {'Idris.Core.CaseBuilder.Unknown'} end()); {'Idris.Core.CaseBuilder.Known', E39, E40} -> (fun (V60, V61) -> {'Idris.Core.CaseBuilder.Known', V60, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V58)), V61))} end(E39, E40)); {'Idris.Core.CaseBuilder.Stuck', E41} -> (fun (V62) -> {'Idris.Core.CaseBuilder.Stuck', ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V58)), V62))} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', [V19 | V56], {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V58)), {'Idris.Core.CaseBuilder.::', {'Idris.Core.CaseBuilder.MkInfo', 0, V19, V8, V63}, ('un--weaken'(V19, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V56, V0)), V59))}}}} end end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nextName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'put'(V0, ((V6 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', V1, V6}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nextIdxByScore'(V0, V1, V2, V3, V4) -> case V2 of 0 -> {'Idris.Builtin.DPair.MkDPair', V0, 0}; _ -> case V3 of {'Idris.Core.CaseBuilder.CompileTime', E0} -> (fun (V5) -> {'Idris.Builtin.DPair.MkDPair', V0, 0} end(E0)); _ -> case V2 of 1 -> case V3 of {'Idris.Core.CaseBuilder.RunTime'} -> (fun () -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Builtin.DPair.MkDPair', V0, 0} end, ('un--applyHeuristics'(V0, V1, ('un--zeroedScore'(V1, V4)), [fun (V6) -> ('un--heuristicF'(V1, V6)) end | [fun (V7) -> ('un--heuristicB'([V0 | V1], V7)) end | [fun (V8) -> ('un--heuristicA'([V0 | V1], V8)) end | []]]])))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--newPats'(V0, V1, V2) -> case V0 of [] -> case V1 of 0 -> {'Idris.Core.CaseBuilder.Nil'}; _ -> ('erlang':'throw'("Nat case not covered")) end; [E0 | E1] -> (fun (V3, V4) -> case V1 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V5 = (V1 - 1)), case V2 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V6, V7) -> {'Idris.Core.CaseBuilder.::', case V6 of {'Idris.Core.CaseBuilder.MkInfo', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> {'Idris.Core.CaseBuilder.MkInfo', V8, V9, V3, V11} end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--newPats'(V4, V5, V7))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--namesIn'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V7, V8)) end end}, V3, V0)) of 1 -> ('un--namesIn'(V0, V4)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V9, V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V29, V30, V31, V32)) end end end end end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V34)) end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V37, V38, V39)) end end end end end}, fun (V40) -> ('un--namesIn'(V0, V40)) end, V13)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V41, V42, V43, V44) -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V60, V61, V62, V63)) end end end end end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V65)) end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V68, V69, V70)) end end end end end}, fun (V71) -> ('un--namesIn'(V0, V71)) end, V44)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PArrow', E12, E13, E14, E15} -> (fun (V72, V73, V74, V75) -> case ('un--namesIn'(V0, V74)) of 1 -> ('un--namesIn'(V0, V75)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14, E15)); {'Idris.Core.CaseTree.PDelay', E16, E17, E18, E19} -> (fun (V76, V77, V78, V79) -> case ('un--namesIn'(V0, V78)) of 1 -> ('un--namesIn'(V0, V79)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18, E19)); {'Idris.Core.CaseTree.PLoc', E20, E21} -> (fun (V80, V81) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V84, V85)) end end}, V81, V0)) end(E20, E21)); _ -> 1 end.
'un--namesFrom'(V0) -> case V0 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V1, V2, V3) -> [V2 | ('un--namesFrom'(V3))] end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V35, V36)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V37) -> ('un--namesFrom'(V37)) end, V8)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V38, V39, V40, V41) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V53)) end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V57, V58, V59, V60)) end end end end end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V62)) end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V65, V66, V67)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V68, V69)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V70) -> ('un--namesFrom'(V70)) end, V41)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PArrow', E12, E13, E14, E15} -> (fun (V71, V72, V73, V74) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--namesFrom'(V73)), ('un--namesFrom'(V74)))) end(E12, E13, E14, E15)); {'Idris.Core.CaseTree.PDelay', E16, E17, E18, E19} -> (fun (V75, V76, V77, V78) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--namesFrom'(V77)), ('un--namesFrom'(V78)))) end(E16, E17, E18, E19)); {'Idris.Core.CaseTree.PLoc', E20, E21} -> (fun (V79, V80) -> [V80 | []] end(E20, E21)); _ -> [] end.
'un--moveFirst'(V0, V1) -> {'Idris.Core.CaseBuilder.::', ('un--getPat'(V0, V1)), ('un--dropPat'(V0, V1))}.
'un--mkPatClause'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V1, V2, {'Idris.Core.Core.DifferingArgNumbers'}}, V9)) end end, fun () -> fun (V10) -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V15, {'Idris.Core.Env.Nil'}, V4))(V11))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = (('nested--18460-12005--in--un--mkNames'(V7, V8, V5, V4, V3, V2, V1, V0, V3, V7, V10, {'Idris.Prelude.Types.Just', V18}))(V11))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Make pat clause for names "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_((NamedPats $vars) $todo)'(V3, V3, V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in LHS "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_Pat'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.CaseTree':'dn--un--showPrec_Show_Pat'(V23, V24)) end end}, V7)))))))) end, V11))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseBuilder.MkPatClause', [], V21, V5, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V3)), V8))}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, ('Idris.Idris2.Libraries.Data.LengthMatch':'un--checkLengthMatch'(V3, V7)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkPat'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V4, V5, V6) -> fun (V7) -> case V5 of {'Idris.Core.TT.Bound'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V4, V6}} end()); {'Idris.Core.TT.DataCon', E7, E8} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PCon', V4, V6, V8, V9, V1}} end(E7, E8)); {'Idris.Core.TT.TyCon', E9, E10} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PTyCon', V4, V6, V11, V1}} end(E9, E10)); {'Idris.Core.TT.Func'} -> (fun () -> begin (V12 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V0, V7))), case V12 of {'Idris.Prelude.Types.Left', E11} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V14) -> begin (V17 = ('Idris.Idris2.Core.Normalise':'un--normalisePrims'(V0, [], fun (V15) -> 1 end, fun (V16) -> ('Idris.Idris2.Core.CaseTree':'un--isPConst'(V16)) end, 1, V14, V6, V1, V2, {'Idris.Core.Env.Nil'}, V7))), case V17 of {'Idris.Prelude.Types.Left', E13} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V19) -> case V19 of {'Idris.Prelude.Types.Just', E15} -> (fun (V20) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'(V20, V2)) of 1 -> (('un--mkPat'(V0, [], V20, V20))(V7)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V21 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unmatchable function: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)))) end, V7))), case V21 of {'Idris.Prelude.Types.Left', E16} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V24 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Catchall: marking "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V3)), <<" as unmatchable"/utf8>>)))) end, V7))), case V24 of {'Idris.Prelude.Types.Left', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4)); {'Idris.Core.TT.Bind', E18, E19, E20, E21} -> (fun (V27, V28, V29, V30) -> case V29 of {'Idris.Core.TT.Pi', E24, E25, E26, E27} -> (fun (V31, V32, V33, V34) -> begin (V35 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'({'Idris.Core.TT.Erased', V27, 0}, V30))), fun (V36) -> begin (V37 = (('un--mkPat'(V0, [], V34, V34))(V36))), case V37 of {'Idris.Prelude.Types.Left', E28} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V39) -> begin (V40 = (('un--mkPat'(V0, [], V35, V35))(V36))), case V40 of {'Idris.Prelude.Types.Left', E30} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PArrow', V27, V28, V39, V42}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E24, E25, E26, E27)); _ -> fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Catchall: marking "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V3)), <<" as unmatchable"/utf8>>)))) end, V43))), case V44 of {'Idris.Prelude.Types.Left', E22} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E18, E19, E20, E21)); {'Idris.Core.TT.App', E32, E33, E34} -> (fun (V47, V48, V49) -> fun (V50) -> begin (V51 = (('un--mkPat'(V0, [], V49, V49))(V50))), case V51 of {'Idris.Prelude.Types.Left', E35} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V53) -> (('un--mkPat'(V0, [V53 | V1], V2, V48))(V50)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34)); {'Idris.Core.TT.As', E37, E38, E39, E40} -> (fun (V54, V55, V56, V57) -> case V56 of {'Idris.Core.TT.Ref', E41, E42, E43} -> (fun (V58, V59, V60) -> case V59 of {'Idris.Core.TT.Bound'} -> (fun () -> fun (V61) -> begin (V62 = (('un--mkPat'(V0, [], V57, V57))(V61))), case V62 of {'Idris.Prelude.Types.Left', E44} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PAs', V54, V60, V64}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('un--mkPat'(V0, [], V2, V57)) end end(E41, E42, E43)); _ -> ('un--mkPat'(V0, [], V2, V57)) end end(E37, E38, E39, E40)); {'Idris.Core.TT.TDelay', E46, E47, E48, E49} -> (fun (V65, V66, V67, V68) -> fun (V69) -> begin (V70 = (('un--mkPat'(V0, [], V2, V67))(V69))), case V70 of {'Idris.Prelude.Types.Left', E50} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V72) -> begin (V73 = (('un--mkPat'(V0, [], V2, V68))(V69))), case V73 of {'Idris.Prelude.Types.Left', E52} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PDelay', V65, V66, V72, V75}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46, E47, E48, E49)); {'Idris.Core.TT.PrimVal', E54, E55} -> (fun (V76, V77) -> fun (V78) -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(('Idris.Idris2.Core.TT':'un--constTag'(V77)), 0)) of 1 -> {'Idris.Core.CaseTree.PConst', V76, V77}; 0 -> {'Idris.Core.CaseTree.PTyCon', V76, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V77))}}, 0, []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E54, E55)); {'Idris.Core.TT.TType', E56} -> (fun (V79) -> fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PTyCon', V79, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"Type"/utf8>>}}, 0, []}} end end(E56)); _ -> fun (V81) -> begin (V82 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Catchall: marking "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V3)), <<" as unmatchable"/utf8>>)))) end, V81))), case V82 of {'Idris.Prelude.Types.Left', E0} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V84) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', ('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V2}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--mixture'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.CaseBuilder.ConClauses', E0, E1, E2, E3, E4} -> (fun (V11, V12, V13, V14, V15) -> case V11 of [E5 | E6] -> (fun (V16, V17) -> fun (V18) -> begin (V19 = (('un--mixture'(V0, V1, V2, V3, V4, V13, V6, V7, V8, V15, V10))(V18))), case V19 of {'Idris.Prelude.Types.Left', E7} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V21) -> begin (V22 = (('un--conRule'(V0, V1, V2, V3, V4, V6, V7, V8, V14, V21))(V18))), case V22 of {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V24}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6)); _ -> fun (V25) -> case V5 of [] -> case V9 of {'Idris.Core.CaseBuilder.NoClauses'} -> (fun () -> {'Idris.Prelude.Types.Right', V10} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.CaseBuilder.VarClauses', E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30) -> case V26 of [E16 | E17] -> (fun (V31, V32) -> fun (V33) -> begin (V34 = (('un--mixture'(V0, V1, V2, V3, V4, V28, V6, V7, V8, V30, V10))(V33))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = ('un--varRule'(V0, V1, V2, V3, V4, V6, V7, V8, V29, V36, V33))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V39}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17)); _ -> fun (V40) -> case V5 of [] -> case V9 of {'Idris.Core.CaseBuilder.NoClauses'} -> (fun () -> {'Idris.Prelude.Types.Right', V10} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14, E15)); _ -> fun (V41) -> case V5 of [] -> case V9 of {'Idris.Core.CaseBuilder.NoClauses'} -> (fun () -> {'Idris.Prelude.Types.Right', V10} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--match'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V1 of [E0 | E1] -> (fun (V9, V10) -> begin (V16 = ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V13, V14)) end end end end, fun (V15) -> ('un--getNPs'(V15)) end, V7))), fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--getSession'(V3, V17))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> (('case--match-10758'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V16, V20, ('un--nextIdxByScore'(V9, V10, case V20 of {'Idris.Core.Options.MkSessionOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V46 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V16))))(V17)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); [] -> case V7 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Unmatched', <<"No patterns"/utf8>>}} end end, fun () -> fun (V48) -> fun (V49) -> {'Idris.Prelude.Types.Right', V48} end end end, V8)); [E30 | E31] -> (fun (V50, V51) -> case V50 of {'Idris.Core.CaseBuilder.MkPatClause', E32, E33, E34, E35} -> (fun (V52, V53, V54, V55) -> case V53 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> fun (V56) -> case V55 of {'Idris.Core.TT.Erased', E36, E37} -> (fun (V57, V58) -> case V58 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Impossible'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V54, V55}} end end(E36, E37)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V54, V55}} end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--highScoreIdx'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseBuilder.Scored', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Data.Vect.::', E2, E3} -> (fun (V5, V6) -> ('un--highScore'([], [V0 | V1], {'Idris.Data.Vect.::', V5, V6}, ((V5 - 1) rem 9223372036854775808), {'Idris.Builtin.DPair.MkDPair', V0, 0}, 0)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--highScore'(V0, V1, V2, V3, V4, V5) -> case V1 of [] -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> case V5 of 1 -> {'Idris.Prelude.Types.Nothing'}; 0 -> {'Idris.Prelude.Types.Just', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V6, V7) -> case V2 of {'Idris.Data.Vect.::', E2, E3} -> (fun (V8, V9) -> begin (V13 = fun (V10) -> fun (V11) -> fun (V12) -> ('un--highScore'(('Idris.Idris2.Data.List':'un--snoc'(V0, V6)), V7, V9, V10, V11, V12)) end end end), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V8, V3)) of 0 -> (((V13(V3))(V4))(V5)); 1 -> (((V13(V3))(V4))(1)); 2 -> (((V13(V8))({'Idris.Builtin.DPair.MkDPair', V6, ('Idris.Idris2.Core.TT':'un--weakenNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V0)), 0))}))(0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--heuristicF'(V0, V1) -> case V1 of {'Idris.Core.CaseBuilder.Scored', E0, E1} -> (fun (V2, V3) -> case V2 of [] -> V1; [E2 | E3] -> (fun (V4, V5) -> begin (V6 = ('nested--15150-9050--in--un--scores'(V0, V4, V5, V3, V4))), begin (V9 = ('Idris.Idris2.Data.Vect':'dn--un--zipWith_Zippable_(Vect $k)'(fun (V7) -> fun (V8) -> ((V7 + V8) rem 9223372036854775808) end end, V3, V6))), {'Idris.Core.CaseBuilder.Scored', [V4 | V5], V9} end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--heuristicB'(V0, V1) -> ('un--consScoreHeuristic'(V0, fun (V2) -> ('un--headConsPenalty'(fun (V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V3, 0)) of 1 -> 0; 0 -> -1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)) end, V1)).
'un--heuristicA'(V0, V1) -> ('un--consScoreHeuristic'(V0, fun (V2) -> ('un--headConsPenalty'(fun (V3) -> ((0 - ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V3))) rem 9223372036854775808) end, V2)) end, V1)).
'un--headConsPenalty'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--headConsPenalty'(V0, V4)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9) -> (V0(V8)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> (V0(V12)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V14, V15) -> 0 end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V16, V17, V18, V19) -> 0 end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V20, V21, V22, V23) -> ('un--headConsPenalty'(V0, V23)) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V24, V25) -> 0 end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E24, E25} -> (fun (V26, V27) -> 0 end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--groupCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('nested--12885-7021--in--un--gc'(V0, V1, V2, V8, V7, V6, V5, V4, V3, V0, V1, V2, [], V8)).
'un--getScore'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V8) -> begin (V9 = ('un--sameType'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.Env':'un--mkEnv'(V3, V0)), V6, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', 0}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V12) -> fun (V13) -> case V12 of {'Idris.Core.Core.CaseCompile', E2, E3, E4} -> (fun (V14, V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V16}} end(E2, E3, E4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V12, V13)) end end end, V7)).
'un--getPatInfo'(V0) -> case V0 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> [] end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V1, V2) -> [case V1 of {'Idris.Core.CaseBuilder.MkInfo', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> V5 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | ('un--getPatInfo'(V2))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPat'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V2, V3) -> V2 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V5, V6) -> ('un--getPat'(V4, V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--getPMDef'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree.getpmdef"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"getPMDef: No clauses!"/utf8>> end, V6))), case V7 of {'Idris.Prelude.Types.Left', E10} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E12} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V13, {'Idris.Core.Env.Nil'}, V4))(V6))), case V14 of {'Idris.Prelude.Types.Left', E14} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V16) -> begin (V17 = ('nested--19698-13195--in--un--getArgs'(V4, V3, V2, V1, V0, 0, V16, V6))), case V17 of {'Idris.Prelude.Types.Left', E16} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V19, {'Idris.Builtin.MkPair', {'Idris.Core.CaseTree.Unmatched', <<"No clauses"/utf8>>}, []}}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V21 = begin (V20 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V25 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> ('nested--19698-13300--in--un--toClosed'(V5, V4, V3, V2, V1, V0, V23, V24)) end, ('nested--19698-13297--in--un--labelPat'(V5, V4, V3, V2, V1, V0, 0, V5))))), begin (V26 = ('un--simpleCase'(V0, V1, V2, V3, V4, {'Idris.Prelude.Types.Nothing'}, V25, V6))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> case V28 of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V29, V30) -> begin (V41 = begin (V37 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V31, V32, V33)) end end end, fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V34, V35, V36)) end end end}, V30, V6))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"compile.casetree.getpmdef"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Compiled to: "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V29, V39))))} end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> begin (V44 = ('un--findReached'(V30))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V29, {'Idris.Builtin.MkPair', V30, ('nested--19698-13296--in--un--getUnreachable'(V5, V4, V3, V2, V1, V0, 0, V44, V5))}}} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--getNPs'(V0) -> case V0 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getFirstPat'(V0) -> case V0 of {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.MkInfo', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> V5 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getFirstArgType'(V0) -> case V0 of {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.CaseBuilder.MkInfo', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> V6 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findReached'(V0) -> case V0 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V31, V32)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V33) -> ('nested--19621-13121--in--un--findRAlts'(V1, V2, V3, V4, V33)) end, V4)) end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E4, E5} -> (fun (V34, V35) -> [V34 | []] end(E4, E5)); _ -> [] end.
'un--dropPat'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.CaseBuilder.::', E2, E3} -> (fun (V2, V3) -> V3 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V5, V6) -> {'Idris.Core.CaseBuilder.::', V5, ('un--dropPat'(V4, V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--consScoreHeuristic'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V2 of {'Idris.Core.CaseBuilder.Scored', E2, E3} -> (fun (V5, V6) -> case V5 of [] -> V2; _ -> begin (V43 = ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V9, V10)) end end end end, fun (V11) -> ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.Vect':'dn--un--foldlM_Foldable_(Vect $n)'(V27, V28, V29, V30)) end end end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'(V35, V36, V37)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V38) -> fun (V39) -> ((V38 + V39) rem 9223372036854775808) end end, fun (V40) -> fun (V41) -> ((V40 * V41) rem 9223372036854775808) end end, fun (V42) -> V42 end}}, V11)) end, ('nested--14897-8810--in--un--scoreColumns'(V3, V4, V6, V5, V1, V0, [V3 | V4], V5))))), begin (V46 = ('Idris.Idris2.Data.Vect':'dn--un--zipWith_Zippable_(Vect $k)'(fun (V44) -> fun (V45) -> ((V44 + V45) rem 9223372036854775808) end end, V6, V43))), {'Idris.Core.CaseBuilder.Scored', V5, V46} end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--conRule'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Unmatched', <<"No constructor clauses"/utf8>>}} end end, fun () -> fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V11} end end end, V9)); [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Core.CaseBuilder.MkPatClause', E2, E3, E4, E5} -> (fun (V15, V16, V17, V18) -> fun (V19) -> case V16 of {'Idris.Core.CaseBuilder.::', E6, E7} -> (fun (V20, V21) -> case V20 of {'Idris.Core.CaseBuilder.MkInfo', E8, E9, E10, E11} -> (fun (V22, V23, V24, V25) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> ('un--substInClause'(V0, V1, V2, V4, V5, V26)) end, V8, [], V19))), case V27 of {'Idris.Prelude.Types.Left', E12} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V29) -> begin (V30 = (('un--groupCons'(V0, V1, V2, V3, V4, V5, V6, V15, V29))(V19))), case V30 of {'Idris.Prelude.Types.Left', E14} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V32) -> begin (V35 = case V25 of {'Idris.Core.CaseBuilder.Known', E16, E17} -> (fun (V33, V34) -> {'Idris.Prelude.Types.Right', V34} end(E16, E17)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CaseCompile', V5, V6, {'Idris.Core.Core.UnknownType'}}, V19)) end), case V35 of {'Idris.Prelude.Types.Left', E18} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V37) -> ('un--caseGroups'(V23, V1, V2, V3, V4, V5, V6, V7, V22, V37, V32, V9, V19)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--clauseType'(V0, V1) -> case V1 of {'Idris.Core.CaseBuilder.MkPatClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V3 of {'Idris.Core.CaseBuilder.::', E4, E5} -> (fun (V6, V7) -> case V6 of {'Idris.Core.CaseBuilder.MkInfo', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('nested--10534-5006--in--un--getClauseType'(V8, V9, V11, V10, V7, V5, V4, V2, V0, V0, V10, V11)) end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkGroupMatch'(V0, V1, V2) -> case V0 of {'Idris.Core.CaseBuilder.CName', E0, E1} -> (fun (V3, V4) -> case V2 of {'Idris.Core.CaseBuilder.ConGroup', E2, E3, E4, E5} -> (fun (V5, V6, V7, V8) -> case V8 of [E6 | E7] -> (fun (V9, V10) -> case V9 of {'Idris.Core.CaseBuilder.MkPatClause', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> case ('Idris.Idris2.Libraries.Data.LengthMatch':'un--checkLengthMatch'(V1, V5)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.CaseBuilder.NoMatch'} end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V15) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V3, V6)) of {'Idris.Prelude.Types.Just', E13} -> (fun (V16) -> case V16 of 0 -> case ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V4, V7)) of {'Idris.Prelude.Types.Yes', E14} -> (fun (V17) -> case V17 of 0 -> {'Idris.Core.CaseBuilder.ConMatch', V15}; _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E14)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end; _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E13)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10, E11)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E6, E7)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E2, E3, E4, E5)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E0, E1)); {'Idris.Core.CaseBuilder.CDelay'} -> (fun () -> case V1 of [] -> case V2 of {'Idris.Core.CaseBuilder.DelayGroup', E15, E16, E17} -> (fun (V18, V19, V20) -> case V20 of [E18 | E19] -> (fun (V21, V22) -> case V21 of {'Idris.Core.CaseBuilder.MkPatClause', E20, E21, E22, E23} -> (fun (V23, V24, V25, V26) -> {'Idris.Core.CaseBuilder.DelayMatch'} end(E20, E21, E22, E23)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E18, E19)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E15, E16, E17)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end; _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end()); {'Idris.Core.CaseBuilder.CConst', E24} -> (fun (V27) -> case V1 of [] -> case V2 of {'Idris.Core.CaseBuilder.ConstGroup', E25, E26} -> (fun (V28, V29) -> case V29 of [E27 | E28] -> (fun (V30, V31) -> case V30 of {'Idris.Core.CaseBuilder.MkPatClause', E29, E30, E31, E32} -> (fun (V32, V33, V34, V35) -> case ('Idris.Idris2.Core.TT':'un--constantEq'(V27, V28)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.CaseBuilder.NoMatch'} end()); {'Idris.Prelude.Types.Just', E33} -> (fun (V36) -> case V36 of 0 -> {'Idris.Core.CaseBuilder.ConstMatch'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E27, E28)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E25, E26)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end; _ -> {'Idris.Core.CaseBuilder.NoMatch'} end end(E24)); _ -> {'Idris.Core.CaseBuilder.NoMatch'} end.
'un--caseGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = (('nested--16977-11162--in--un--altGroups'(V0, V2, V8, V1, V11, V10, V9, V7, V6, V5, V4, V3, V10))(V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V0, V8, ('Idris.Idris2.Core.TT':'un--resolveNames'(V1, V9)), V15}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--argToPat'(V0, V1) -> ('un--mkPat'(V0, [], V1, V1)).
'un--applyHeuristics'(V0, V1, V2, V3) -> case V3 of [] -> ('un--highScoreIdx'(V0, V1, V2)); [E0 | E1] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('un--highScoreIdx'(V0, V1, V2)), fun () -> ('un--applyHeuristics'(V0, V1, (V4(V2)), V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--++'(V0, V1) -> case V0 of {'Idris.Core.CaseBuilder.Nil'} -> (fun () -> V1 end()); {'Idris.Core.CaseBuilder.::', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CaseBuilder.::', V2, ('un--++'(V3, V1))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
