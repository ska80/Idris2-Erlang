-module('Idris.Idris2.TTImp.Elab.Lazy').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8386-18068--in--un--delayError'/13,
  'un--checkForce'/13,
  'un--checkDelayed'/14,
  'un--checkDelay'/13
]).
'nested--8386-18068--in--un--delayError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Core.GenericMsg', E0, E1} -> (fun (V13, V14) -> 1 end(E0, E1)); _ -> 0 end.
'un--checkForce'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V23 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V18) -> fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V16, V8, {'Idris.Core.Value.NDelayed', V9, 2, V22}))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V11))(V12))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V25, V12))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V29, V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V30))(V12))), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> case V33 of {'Idris.Core.Value.NDelayed', E12, E13, E14} -> (fun (V34, V35, V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V9, V35, V29}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V16, V8, V36))}} end(E12, E13, E14)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V9, <<"Forcing a non-delayed type"/utf8>>}, V12)) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkDelayed'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V9))}, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelayed', V9, V10, V17}, V18}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkDelay'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V26 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V13) -> begin (V14 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayTy"/utf8>>, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V21 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V16, {'Idris.Core.TT.TType', V9}, V13))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V23))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', V24} end end end, V11))(V12))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V36 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E6, E7, E8, E9, E10, E11} -> (fun (V29, V30, V31, V32, V33, V34) -> case V29 of {'Idris.TTImp.Elab.Check.InLHS', E12} -> (fun (V35) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E12)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V37 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V36, 0, V12))), case V37 of {'Idris.Prelude.Types.Left', E13} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V39) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V9, V5, V8, {'Idris.Prelude.Types.Just', V28}, fun (V40) -> ('nested--8386-18068--in--un--delayError'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V40)) end, 4, fun (V41) -> fun (V42) -> begin (V43 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V28))(V42))), case V43 of {'Idris.Prelude.Types.Left', E15} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V45) -> case V45 of {'Idris.Core.Value.NDelayed', E19, E20, E21} -> (fun (V46, V47, V48) -> begin (V50 = begin (V49 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E22} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V52, V8, V48))}, V42))), case V53 of {'Idris.Prelude.Types.Left', E24} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V56, V57) -> begin (V58 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V57))(V42))), case V58 of {'Idris.Prelude.Types.Left', E28} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V57))(V42))), case V61 of {'Idris.Prelude.Types.Left', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V9, V47, V63, V56}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V52, V8, {'Idris.Core.Value.NDelayed', V9, V47, V60}))}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20, E21)); _ -> begin (V64 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expected delay type"/utf8>> end, V8, V45, V42))), case V64 of {'Idris.Prelude.Types.Left', E17} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V66) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V9, <<"Can\x{27}t infer delay type"/utf8>>}, V42)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
