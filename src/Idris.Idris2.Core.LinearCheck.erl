-module('Idris.Idris2.Core.LinearCheck').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lcheckDef-16785'/9,
  'case--updateHoleUsage-11368'/8,
  'nested--8405-11539--in--un--used'/10,
  'nested--8443-16544--in--un--updateUsage'/8,
  'nested--8405-11766--in--un--unusedHoleArgs'/12,
  'nested--8449-17080--in--un--substMeta'/19,
  'nested--6881-10110--in--un--showAll'/2,
  'nested--8443-16545--in--un--rigSafe'/9,
  'nested--8405-11538--in--un--rigSafe'/12,
  'nested--8405-12301--in--un--rig'/10,
  'nested--8433-15073--in--un--isLocArg'/8,
  'nested--8405-12302--in--un--getZeroes'/12,
  'nested--8433-15075--in--un--getPUsage'/8,
  'nested--8405-11537--in--un--getName'/11,
  'nested--8433-15071--in--un--getCaseUsage'/12,
  'nested--8405-12303--in--un--eraseLinear'/11,
  'nested--12572-15124--in--un--elseCase'/20,
  'nested--8433-15077--in--un--combineUsages'/9,
  'nested--8433-15076--in--un--combineUsage'/8,
  'nested--8433-15078--in--un--combine'/8,
  'nested--15453-17629--in--un--checkUsageOK'/14,
  'nested--8433-15072--in--un--checkUsageOK'/12,
  'nested--8405-12304--in--un--checkUsageOK'/13,
  'nested--8433-15074--in--un--checkEnvUsage'/13,
  'dn--un--show_Show_ArgUsage'/1,
  'dn--un--show_Show_(Usage $vars)'/1,
  'dn--un--showPrec_Show_ArgUsage'/2,
  'un--updateHoleUsageArgs'/8,
  'un--updateHoleUsage'/7,
  'un--updateHoleType'/8,
  'un--localPrf'/1,
  'un--linearCheck'/9,
  'un--lcheckMeta'/12,
  'un--lcheckDef'/8,
  'un--lcheckBinder'/8,
  'un--lcheck'/7,
  'un--getArgUsage'/7,
  'un--expandMeta'/10,
  'un--doneScope'/1,
  'un--discharge'/11,
  'un--count'/2,
  'un--checkEnvUsage'/9,
  'un--++'/2
]).
'case--lcheckDef-16785'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V9}, case V6 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E33} -> (fun (V43) -> begin (V64 = ('nested--8443-16545--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V51 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V8))), case V64 of {'Idris.Prelude.Types.Left', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V66) -> case case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V83 end(E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V89 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}; 0 -> case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> case V124 of {'Idris.Core.Context.Context.PMDef', E116, E117, E118, E119, E120} -> (fun (V127, V128, V129, V130, V131) -> begin (V172 = ('un--getArgUsage'(V5, V4, ('Idris.Idris2.Core.TT':'un--getLoc'(case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140} -> (fun (V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151) -> V134 end(E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160} -> (fun (V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171) -> V154 end(E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V131, V8))), case V172 of {'Idris.Prelude.Types.Left', E161} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V174) -> begin (V178 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Overall arg usage "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V175) -> ('dn--un--show_Show_ArgUsage'(V175)) end, fun (V176) -> fun (V177) -> ('dn--un--showPrec_Show_ArgUsage'(V176, V177)) end end}, V174)))) end, V8))), case V178 of {'Idris.Prelude.Types.Left', E163} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V180) -> begin (V201 = ('nested--8443-16544--in--un--updateUsage'(V0, V1, V2, V3, V4, V5, V174, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184} -> (fun (V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200) -> V183 end(E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V202 = ('Idris.Idris2.Core.Context':'un--updateTy'(V5, V9, V201, V8))), case V202 of {'Idris.Prelude.Types.Left', E185} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E185)); {'Idris.Prelude.Types.Right', E186} -> (fun (V204) -> begin (V205 = ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V5, V9, 1, V8))), case V205 of {'Idris.Prelude.Types.Left', E187} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V207) -> begin (V228 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"New type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208} -> (fun (V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227) -> V209 end(E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, V201, V8))), case V228 of {'Idris.Prelude.Types.Left', E209} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V230) -> begin (V271 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updated from "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230} -> (fun (V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250) -> V232 end(E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250} -> (fun (V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270) -> V253 end(E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V271 of {'Idris.Prelude.Types.Left', E251} -> (fun (V272) -> {'Idris.Prelude.Types.Left', V272} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V273) -> {'Idris.Prelude.Types.Right', V201} end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116, E117, E118, E119, E120)); _ -> {'Idris.Prelude.Types.Right', case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115} -> (fun (V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293) -> V276 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V5, V3, V0, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V5, V3, V0, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateHoleUsage-11368'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V10, V11, V12) -> fun (V13) -> ('un--updateHoleUsageArgs'(V0, V6, V5, V4, V3, V2, V9, V13)) end end(E2, E3, E4)); _ -> case V9 of [] -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; _ -> fun (V15) -> ('un--updateHoleUsageArgs'(V0, V6, V5, V4, V3, V2, [V8 | V9], V15)) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8405-11539--in--un--used'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V9)) of 1 -> {'Idris.Core.LinearCheck.::', V0, {'Idris.Core.LinearCheck.Nil'}}; 0 -> {'Idris.Core.LinearCheck.Nil'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8443-16544--in--un--updateUsage'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [E0 | E1] -> (fun (V8, V9) -> case V7 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V10, V11, V12, V13) -> case V12 of {'Idris.Core.TT.Pi', E6, E7, E8, E9} -> (fun (V14, V15, V16, V17) -> begin (V18 = ('nested--8443-16544--in--un--updateUsage'(V0, V1, V2, V3, V4, V5, V9, V13))), begin (V27 = case V8 of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 2 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 4 -> V15; 3 -> V15; 0 -> V15; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Core.TT.Bind', V10, V11, {'Idris.Core.TT.Pi', V14, V27, V16, V17}, V18} end end end(E6, E7, E8, E9)); _ -> V7 end end(E2, E3, E4, E5)); _ -> V7 end end(E0, E1)); _ -> V7 end.
'nested--8405-11766--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [E8 | E9] -> (fun (V12, V13) -> case V11 of {'Idris.Core.TT.Bind', E18, E19, E20, E21} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E30, E31, E32, E33} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V14, V15, {'Idris.Core.TT.Pi', V18, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V20, V21}, ('nested--8405-11766--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V17))} end(E30, E31, E32, E33)); _ -> case V11 of {'Idris.Core.TT.Bind', E22, E23, E24, E25} -> (fun (V26, V27, V28, V29) -> case V28 of {'Idris.Core.TT.Let', E26, E27, E28, E29} -> (fun (V30, V31, V32, V33) -> {'Idris.Core.TT.Bind', V26, V27, {'Idris.Core.TT.Let', V30, V31, V32, V33}, ('nested--8405-11766--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V29))} end(E26, E27, E28, E29)); _ -> V11 end end(E22, E23, E24, E25)); _ -> V11 end end end(E18, E19, E20, E21)); _ -> case V11 of {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V34, V35, V36, V37) -> case V36 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V38, V39, V40, V41) -> {'Idris.Core.TT.Bind', V34, V35, {'Idris.Core.TT.Let', V38, V39, V40, V41}, ('nested--8405-11766--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V37))} end(E14, E15, E16, E17)); _ -> V11 end end(E10, E11, E12, E13)); _ -> V11 end end end(E8, E9)); _ -> case V11 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V42, V43, V44, V45) -> case V44 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V46, V47, V48, V49) -> {'Idris.Core.TT.Bind', V42, V43, {'Idris.Core.TT.Let', V46, V47, V48, V49}, ('nested--8405-11766--in--un--unusedHoleArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V45))} end(E4, E5, E6, E7)); _ -> V11 end end(E0, E1, E2, E3)); _ -> V11 end end.
'nested--8449-17080--in--un--substMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V19, V20, V21, V22) -> case V21 of {'Idris.Core.TT.Lam', E4, E5, E6, E7} -> (fun (V23, V24, V25, V26) -> case V17 of [E8 | E9] -> (fun (V27, V28) -> ('nested--8449-17080--in--un--substMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V20 | V14], V15, V22, V28, {'Idris.Core.TT.SubstEnv.::', V27, V18})) end(E8, E9)); _ -> fun (V29) -> case V17 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(V18, V16))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed metavar solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V5))))))))}, V29)) end end end end(E4, E5, E6, E7)); {'Idris.Core.TT.Let', E10, E11, E12, E13} -> (fun (V30, V31, V32, V33) -> ('nested--8449-17080--in--un--substMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V32, V22)), V17, V18)) end(E10, E11, E12, E13)); _ -> fun (V34) -> case V17 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(V18, V16))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed metavar solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V5))))))))}, V34)) end end end end(E0, E1, E2, E3)); _ -> fun (V35) -> case V17 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT.SubstEnv':'un--substs'(V18, V16))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed metavar solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V5))))))))}, V35)) end end end.
'nested--6881-10110--in--un--showAll'(V0, V1) -> case V1 of {'Idris.Core.LinearCheck.Nil'} -> (fun () -> <<""/utf8>> end()); {'Idris.Core.LinearCheck.::', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.LinearCheck.Nil'} -> (fun () -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V2)) end()); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('dn--un--show_Show_(Usage $vars)'(V3)))))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8443-16545--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V0, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'({'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V12, V13)) end end, fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V14)) end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V15, V16, V17, V18, V19)) end end end end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V6, V7)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearMisuse', V3, V11, V6, V7}, V8)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8405-11538--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'({'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V12, V13)) end end, fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V14)) end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V15, V16, V17, V18, V19)) end end end end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V9, V10)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearMisuse', V3, ('nested--8405-11537--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, V1)), V9, V10}, V11)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8405-12301--in--un--rig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V3 of {'Idris.Core.TT.Pi', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V26, V27, V28, V29) -> V7 end(E4, E5, E6, E7)); _ -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V32, V33)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V36, V37)) end end}}, V7)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V38, V39)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V40, V41)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V42, V43)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8433-15073--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> 0; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.Local', E2, E3, E4} -> (fun (V10, V11, V12) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V12, ('Idris.Idris2.Core.TT':'un--varIdx'(V6)))) of 1 -> 1; 0 -> ('nested--8433-15073--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); {'Idris.Core.TT.As', E5, E6, E7, E8} -> (fun (V13, V14, V15, V16) -> ('nested--8433-15073--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, [V15 | [V16 | V9]])) end(E5, E6, E7, E8)); _ -> ('nested--8433-15073--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V6, V9)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8405-12302--in--un--getZeroes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> case V11 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V12, V13) -> case V11 of {'Idris.Core.Env.::', E2, E3} -> (fun (V14, V15) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V14)))) of 1 -> [0 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V24)) end, ('nested--8405-12302--in--un--getZeroes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V15))))]; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V25) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V25)) end, ('nested--8405-12302--in--un--getZeroes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V15)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8433-15075--in--un--getPUsage'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V8, V9) -> fun (V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> begin (V15 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V8, V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), <<"Env"/utf8>>, V11, V10))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V8, V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"LHS"/utf8>> end, V13, V10))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V8, V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Linear check in case RHS"/utf8>> end, V14, V10))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = (('un--lcheck'(V8, V5, V4, V2, 0, V11, V14))(V10))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V29, V30) -> begin (V31 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Used: "/utf8>>, ('dn--un--show_Show_(Usage $vars)'(V30)))) end, V10))), case V31 of {'Idris.Prelude.Types.Left', E18} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.TT':'un--getArgs'(V13))), begin (V35 = (('nested--8433-15074--in--un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, [], V8, V2, V11, V30, V34, V27))(V10))), case V35 of {'Idris.Prelude.Types.Left', E20} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V37) -> begin (V38 = (('nested--8433-15071--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V8, V6, V11, V34, V30, V14))(V10))), case V38 of {'Idris.Prelude.Types.Left', E22} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V40) -> begin (V56 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Arg usage: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V43, V44)) end end}, {'Idris.Prelude.Show.MkShow', fun (V45) -> ('dn--un--show_Show_ArgUsage'(V45)) end, fun (V46) -> fun (V47) -> ('dn--un--showPrec_Show_ArgUsage'(V46, V47)) end end}}, V41)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V51, V52)) end end}, {'Idris.Prelude.Show.MkShow', fun (V53) -> ('dn--un--show_Show_ArgUsage'(V53)) end, fun (V54) -> fun (V55) -> ('dn--un--showPrec_Show_ArgUsage'(V54, V55)) end end}}, V48, V49)) end end}, V40)))) end, V10))), case V56 of {'Idris.Prelude.Types.Left', E24} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V58) -> {'Idris.Prelude.Types.Right', V40} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8405-11537--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of 0 -> case V10 of [E2 | E3] -> (fun (V11, V12) -> V11 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V13 = (V9 - 1)), case V10 of [E0 | E1] -> (fun (V14, V15) -> ('nested--8405-11537--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V15)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--8433-15071--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of [E17 | E18] -> (fun (V12, V13) -> case V12 of {'Idris.Core.TT.As', E36, E37, E38, E39} -> (fun (V14, V15, V16, V17) -> ('nested--8433-15071--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V17 | V13], V10, V11)) end(E36, E37, E38, E39)); _ -> case V7 of {'Idris.Core.TT.Bind', E19, E20, E21, E22} -> (fun (V18, V19, V20, V21) -> case V20 of {'Idris.Core.TT.Pi', E23, E24, E25, E26} -> (fun (V22, V23, V24, V25) -> case V9 of [E27 | E28] -> (fun (V26, V27) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V34, V35)) end end}}, V23)) of 1 -> fun (V36) -> case V26 of {'Idris.Core.TT.Local', E29, E30, E31} -> (fun (V37, V38, V39) -> begin (V40 = (('nested--8433-15071--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V21, V8, V27, V10, V11))(V36))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> begin (V43 = ('un--count'(V39, V10))), begin (V44 = (('un--updateHoleUsage'(V6, V5, V4, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V43, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))), V39, [], V11))(V36))), case V44 of {'Idris.Prelude.Types.Left', E34} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V46) -> begin (V47 = case case V46 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V43, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 4; 0 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V43, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))) of 1 -> 1; 0 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V19, V47} | V42]} end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30, E31)); _ -> ('nested--12572-15124--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V18, V22, V24, V25, V23, V19, V21, V26, V27, V11, V10, V8, V36)) end end; 0 -> fun (V48) -> ('nested--12572-15124--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V18, V22, V24, V25, V23, V19, V21, V26, V27, V11, V10, V8, V48)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', []} end end end(E23, E24, E25, E26)); _ -> fun (V50) -> {'Idris.Prelude.Types.Right', []} end end end(E19, E20, E21, E22)); _ -> fun (V51) -> {'Idris.Prelude.Types.Right', []} end end end end(E17, E18)); _ -> case V7 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V52, V53, V54, V55) -> case V54 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V56, V57, V58, V59) -> case V9 of [E8 | E9] -> (fun (V60, V61) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V62, V63)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V64, V65)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V66) -> fun (V67) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V68, V69)) end end}}, V57)) of 1 -> fun (V70) -> case V60 of {'Idris.Core.TT.Local', E10, E11, E12} -> (fun (V71, V72, V73) -> begin (V74 = (('nested--8433-15071--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V55, V8, V61, V10, V11))(V70))), case V74 of {'Idris.Prelude.Types.Left', E13} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V76) -> begin (V77 = ('un--count'(V73, V10))), begin (V78 = (('un--updateHoleUsage'(V6, V5, V4, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V77, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))), V73, [], V11))(V70))), case V78 of {'Idris.Prelude.Types.Left', E15} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V80) -> begin (V81 = case case V80 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V77, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 4; 0 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V77, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))) of 1 -> 1; 0 -> 2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V53, V81} | V76]} end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12)); _ -> ('nested--12572-15124--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V52, V56, V58, V59, V57, V53, V55, V60, V61, V11, V10, V8, V70)) end end; 0 -> fun (V82) -> ('nested--12572-15124--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V52, V56, V58, V59, V57, V53, V55, V60, V61, V11, V10, V8, V82)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> fun (V83) -> {'Idris.Prelude.Types.Right', []} end end end(E4, E5, E6, E7)); _ -> fun (V84) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V85) -> {'Idris.Prelude.Types.Right', []} end end end.
'nested--8405-12303--in--un--eraseLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V11, V12) -> case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V20)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V11)))) of 1 -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V11, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), ('nested--8405-12303--in--un--eraseLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12))}; 0 -> {'Idris.Core.Env.::', V11, ('nested--8405-12303--in--un--eraseLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12572-15124--in--un--elseCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = (('nested--8433-15071--in--un--getCaseUsage'(V0, V1, V2, V3, V4, V5, V6, V13, V18, V15, V17, V16))(V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V29, V30)) end end}}, V11)) of 1 -> [{'Idris.Builtin.MkPair', V12, 1} | V22]; 0 -> [{'Idris.Builtin.MkPair', V12, 3} | V22]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8433-15077--in--un--combineUsages'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of [] -> case V7 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Argument usage lists inconsistent"/utf8>>}, V8)) end; [E0 | E1] -> (fun (V9, V10) -> case V7 of [E2 | E3] -> (fun (V11, V12) -> begin (V13 = (('nested--8433-15076--in--un--combineUsage'(V0, V1, V2, V3, V4, V5, V9, V11))(V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('nested--8433-15077--in--un--combineUsages'(V0, V1, V2, V3, V4, V5, V10, V12, V8))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Right', [V15 | V18]} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Argument usage lists inconsistent"/utf8>>}, V8)) end end(E0, E1)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Argument usage lists inconsistent"/utf8>>}, V8)) end.
'nested--8433-15076--in--un--combineUsage'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V8, V9) -> case V9 of 1 -> case V7 of {'Idris.Builtin.MkPair', E188, E189} -> (fun (V10, V11) -> case V11 of 2 -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Inconsistent usage of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), <<" in case branches"/utf8>>))))}, V12)) end; _ -> case V7 of {'Idris.Builtin.MkPair', E220, E221} -> (fun (V13, V14) -> case V14 of 0 -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, 0}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E236, E237} -> (fun (V16, V17) -> case V17 of 3 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V16, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E244, E245} -> (fun (V19, V20) -> case V20 of 3 -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V19, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E248, E249} -> (fun (V22, V23) -> case V23 of 4 -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V22, 4}} end; _ -> fun (V25) -> case V7 of {'Idris.Builtin.MkPair', E250, E251} -> (fun (V26, V27) -> case V27 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V26, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E250, E251)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E248, E249)); _ -> fun (V28) -> case V7 of {'Idris.Builtin.MkPair', E246, E247} -> (fun (V29, V30) -> case V30 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V29, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E246, E247)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E244, E245)); _ -> case V6 of {'Idris.Builtin.MkPair', E240, E241} -> (fun (V31, V32) -> case V32 of 4 -> fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V31, 4}} end; _ -> fun (V34) -> case V7 of {'Idris.Builtin.MkPair', E242, E243} -> (fun (V35, V36) -> case V36 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V35, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E242, E243)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E240, E241)); _ -> fun (V37) -> case V7 of {'Idris.Builtin.MkPair', E238, E239} -> (fun (V38, V39) -> case V39 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V38, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E238, E239)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E236, E237)); _ -> case V7 of {'Idris.Builtin.MkPair', E228, E229} -> (fun (V40, V41) -> case V41 of 3 -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V40, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E232, E233} -> (fun (V43, V44) -> case V44 of 4 -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V43, 4}} end; _ -> fun (V46) -> case V7 of {'Idris.Builtin.MkPair', E234, E235} -> (fun (V47, V48) -> case V48 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V47, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E234, E235)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E232, E233)); _ -> fun (V49) -> case V7 of {'Idris.Builtin.MkPair', E230, E231} -> (fun (V50, V51) -> case V51 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V50, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E230, E231)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E228, E229)); _ -> case V6 of {'Idris.Builtin.MkPair', E224, E225} -> (fun (V52, V53) -> case V53 of 4 -> fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V52, 4}} end; _ -> fun (V55) -> case V7 of {'Idris.Builtin.MkPair', E226, E227} -> (fun (V56, V57) -> case V57 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V56, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E226, E227)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E224, E225)); _ -> fun (V58) -> case V7 of {'Idris.Builtin.MkPair', E222, E223} -> (fun (V59, V60) -> case V60 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V59, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E222, E223)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end(E220, E221)); _ -> case V6 of {'Idris.Builtin.MkPair', E204, E205} -> (fun (V61, V62) -> case V62 of 3 -> fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V61, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E212, E213} -> (fun (V64, V65) -> case V65 of 3 -> fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V64, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E216, E217} -> (fun (V67, V68) -> case V68 of 4 -> fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V67, 4}} end; _ -> fun (V70) -> case V7 of {'Idris.Builtin.MkPair', E218, E219} -> (fun (V71, V72) -> case V72 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V71, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E218, E219)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E216, E217)); _ -> fun (V73) -> case V7 of {'Idris.Builtin.MkPair', E214, E215} -> (fun (V74, V75) -> case V75 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V74, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E214, E215)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E212, E213)); _ -> case V6 of {'Idris.Builtin.MkPair', E208, E209} -> (fun (V76, V77) -> case V77 of 4 -> fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V76, 4}} end; _ -> fun (V79) -> case V7 of {'Idris.Builtin.MkPair', E210, E211} -> (fun (V80, V81) -> case V81 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V80, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E210, E211)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E208, E209)); _ -> fun (V82) -> case V7 of {'Idris.Builtin.MkPair', E206, E207} -> (fun (V83, V84) -> case V84 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V83, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E206, E207)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E204, E205)); _ -> case V7 of {'Idris.Builtin.MkPair', E196, E197} -> (fun (V85, V86) -> case V86 of 3 -> fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V85, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E200, E201} -> (fun (V88, V89) -> case V89 of 4 -> fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V88, 4}} end; _ -> fun (V91) -> case V7 of {'Idris.Builtin.MkPair', E202, E203} -> (fun (V92, V93) -> case V93 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V92, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E202, E203)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E200, E201)); _ -> fun (V94) -> case V7 of {'Idris.Builtin.MkPair', E198, E199} -> (fun (V95, V96) -> case V96 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V95, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E198, E199)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E196, E197)); _ -> case V6 of {'Idris.Builtin.MkPair', E192, E193} -> (fun (V97, V98) -> case V98 of 4 -> fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V97, 4}} end; _ -> fun (V100) -> case V7 of {'Idris.Builtin.MkPair', E194, E195} -> (fun (V101, V102) -> case V102 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V101, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E194, E195)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E192, E193)); _ -> fun (V103) -> case V7 of {'Idris.Builtin.MkPair', E190, E191} -> (fun (V104, V105) -> case V105 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V104, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E190, E191)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end end(E188, E189)); _ -> case V7 of {'Idris.Builtin.MkPair', E156, E157} -> (fun (V106, V107) -> case V107 of 0 -> fun (V108) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V106, 0}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E172, E173} -> (fun (V109, V110) -> case V110 of 3 -> fun (V111) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V109, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E180, E181} -> (fun (V112, V113) -> case V113 of 3 -> fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V112, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E184, E185} -> (fun (V115, V116) -> case V116 of 4 -> fun (V117) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V115, 4}} end; _ -> fun (V118) -> case V7 of {'Idris.Builtin.MkPair', E186, E187} -> (fun (V119, V120) -> case V120 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V119, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E186, E187)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E184, E185)); _ -> fun (V121) -> case V7 of {'Idris.Builtin.MkPair', E182, E183} -> (fun (V122, V123) -> case V123 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V122, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E182, E183)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E180, E181)); _ -> case V6 of {'Idris.Builtin.MkPair', E176, E177} -> (fun (V124, V125) -> case V125 of 4 -> fun (V126) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V124, 4}} end; _ -> fun (V127) -> case V7 of {'Idris.Builtin.MkPair', E178, E179} -> (fun (V128, V129) -> case V129 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V128, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E178, E179)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E176, E177)); _ -> fun (V130) -> case V7 of {'Idris.Builtin.MkPair', E174, E175} -> (fun (V131, V132) -> case V132 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V131, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E174, E175)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E172, E173)); _ -> case V7 of {'Idris.Builtin.MkPair', E164, E165} -> (fun (V133, V134) -> case V134 of 3 -> fun (V135) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V133, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E168, E169} -> (fun (V136, V137) -> case V137 of 4 -> fun (V138) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V136, 4}} end; _ -> fun (V139) -> case V7 of {'Idris.Builtin.MkPair', E170, E171} -> (fun (V140, V141) -> case V141 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V140, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E170, E171)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E168, E169)); _ -> fun (V142) -> case V7 of {'Idris.Builtin.MkPair', E166, E167} -> (fun (V143, V144) -> case V144 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V143, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E166, E167)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E164, E165)); _ -> case V6 of {'Idris.Builtin.MkPair', E160, E161} -> (fun (V145, V146) -> case V146 of 4 -> fun (V147) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V145, 4}} end; _ -> fun (V148) -> case V7 of {'Idris.Builtin.MkPair', E162, E163} -> (fun (V149, V150) -> case V150 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V149, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E162, E163)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E160, E161)); _ -> fun (V151) -> case V7 of {'Idris.Builtin.MkPair', E158, E159} -> (fun (V152, V153) -> case V153 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V152, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E158, E159)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end(E156, E157)); _ -> case V6 of {'Idris.Builtin.MkPair', E140, E141} -> (fun (V154, V155) -> case V155 of 3 -> fun (V156) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V154, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E148, E149} -> (fun (V157, V158) -> case V158 of 3 -> fun (V159) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V157, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E152, E153} -> (fun (V160, V161) -> case V161 of 4 -> fun (V162) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V160, 4}} end; _ -> fun (V163) -> case V7 of {'Idris.Builtin.MkPair', E154, E155} -> (fun (V164, V165) -> case V165 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V164, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E154, E155)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E152, E153)); _ -> fun (V166) -> case V7 of {'Idris.Builtin.MkPair', E150, E151} -> (fun (V167, V168) -> case V168 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V167, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E150, E151)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E148, E149)); _ -> case V6 of {'Idris.Builtin.MkPair', E144, E145} -> (fun (V169, V170) -> case V170 of 4 -> fun (V171) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V169, 4}} end; _ -> fun (V172) -> case V7 of {'Idris.Builtin.MkPair', E146, E147} -> (fun (V173, V174) -> case V174 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V173, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E146, E147)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E144, E145)); _ -> fun (V175) -> case V7 of {'Idris.Builtin.MkPair', E142, E143} -> (fun (V176, V177) -> case V177 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V176, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E142, E143)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E140, E141)); _ -> case V7 of {'Idris.Builtin.MkPair', E132, E133} -> (fun (V178, V179) -> case V179 of 3 -> fun (V180) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V178, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E136, E137} -> (fun (V181, V182) -> case V182 of 4 -> fun (V183) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V181, 4}} end; _ -> fun (V184) -> case V7 of {'Idris.Builtin.MkPair', E138, E139} -> (fun (V185, V186) -> case V186 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V185, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E138, E139)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E136, E137)); _ -> fun (V187) -> case V7 of {'Idris.Builtin.MkPair', E134, E135} -> (fun (V188, V189) -> case V189 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V188, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E134, E135)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E132, E133)); _ -> case V6 of {'Idris.Builtin.MkPair', E128, E129} -> (fun (V190, V191) -> case V191 of 4 -> fun (V192) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V190, 4}} end; _ -> fun (V193) -> case V7 of {'Idris.Builtin.MkPair', E130, E131} -> (fun (V194, V195) -> case V195 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V194, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E130, E131)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E128, E129)); _ -> fun (V196) -> case V7 of {'Idris.Builtin.MkPair', E126, E127} -> (fun (V197, V198) -> case V198 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V197, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E126, E127)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end; 2 -> case V7 of {'Idris.Builtin.MkPair', E314, E315} -> (fun (V199, V200) -> case V200 of 1 -> fun (V201) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Inconsistent usage of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), <<" in case branches"/utf8>>))))}, V201)) end; _ -> case V7 of {'Idris.Builtin.MkPair', E346, E347} -> (fun (V202, V203) -> case V203 of 0 -> fun (V204) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V202, 0}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E362, E363} -> (fun (V205, V206) -> case V206 of 3 -> fun (V207) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V205, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E370, E371} -> (fun (V208, V209) -> case V209 of 3 -> fun (V210) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V208, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E374, E375} -> (fun (V211, V212) -> case V212 of 4 -> fun (V213) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V211, 4}} end; _ -> fun (V214) -> case V7 of {'Idris.Builtin.MkPair', E376, E377} -> (fun (V215, V216) -> case V216 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V215, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E376, E377)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E374, E375)); _ -> fun (V217) -> case V7 of {'Idris.Builtin.MkPair', E372, E373} -> (fun (V218, V219) -> case V219 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V218, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E372, E373)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E370, E371)); _ -> case V6 of {'Idris.Builtin.MkPair', E366, E367} -> (fun (V220, V221) -> case V221 of 4 -> fun (V222) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V220, 4}} end; _ -> fun (V223) -> case V7 of {'Idris.Builtin.MkPair', E368, E369} -> (fun (V224, V225) -> case V225 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V224, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E368, E369)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E366, E367)); _ -> fun (V226) -> case V7 of {'Idris.Builtin.MkPair', E364, E365} -> (fun (V227, V228) -> case V228 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V227, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E364, E365)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E362, E363)); _ -> case V7 of {'Idris.Builtin.MkPair', E354, E355} -> (fun (V229, V230) -> case V230 of 3 -> fun (V231) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V229, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E358, E359} -> (fun (V232, V233) -> case V233 of 4 -> fun (V234) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V232, 4}} end; _ -> fun (V235) -> case V7 of {'Idris.Builtin.MkPair', E360, E361} -> (fun (V236, V237) -> case V237 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V236, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E360, E361)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E358, E359)); _ -> fun (V238) -> case V7 of {'Idris.Builtin.MkPair', E356, E357} -> (fun (V239, V240) -> case V240 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V239, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E356, E357)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E354, E355)); _ -> case V6 of {'Idris.Builtin.MkPair', E350, E351} -> (fun (V241, V242) -> case V242 of 4 -> fun (V243) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V241, 4}} end; _ -> fun (V244) -> case V7 of {'Idris.Builtin.MkPair', E352, E353} -> (fun (V245, V246) -> case V246 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V245, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E352, E353)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E350, E351)); _ -> fun (V247) -> case V7 of {'Idris.Builtin.MkPair', E348, E349} -> (fun (V248, V249) -> case V249 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V248, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E348, E349)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end(E346, E347)); _ -> case V6 of {'Idris.Builtin.MkPair', E330, E331} -> (fun (V250, V251) -> case V251 of 3 -> fun (V252) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V250, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E338, E339} -> (fun (V253, V254) -> case V254 of 3 -> fun (V255) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V253, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E342, E343} -> (fun (V256, V257) -> case V257 of 4 -> fun (V258) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V256, 4}} end; _ -> fun (V259) -> case V7 of {'Idris.Builtin.MkPair', E344, E345} -> (fun (V260, V261) -> case V261 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V260, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E344, E345)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E342, E343)); _ -> fun (V262) -> case V7 of {'Idris.Builtin.MkPair', E340, E341} -> (fun (V263, V264) -> case V264 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V263, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E340, E341)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E338, E339)); _ -> case V6 of {'Idris.Builtin.MkPair', E334, E335} -> (fun (V265, V266) -> case V266 of 4 -> fun (V267) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V265, 4}} end; _ -> fun (V268) -> case V7 of {'Idris.Builtin.MkPair', E336, E337} -> (fun (V269, V270) -> case V270 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V269, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E336, E337)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E334, E335)); _ -> fun (V271) -> case V7 of {'Idris.Builtin.MkPair', E332, E333} -> (fun (V272, V273) -> case V273 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V272, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E332, E333)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E330, E331)); _ -> case V7 of {'Idris.Builtin.MkPair', E322, E323} -> (fun (V274, V275) -> case V275 of 3 -> fun (V276) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V274, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E326, E327} -> (fun (V277, V278) -> case V278 of 4 -> fun (V279) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V277, 4}} end; _ -> fun (V280) -> case V7 of {'Idris.Builtin.MkPair', E328, E329} -> (fun (V281, V282) -> case V282 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V281, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E328, E329)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E326, E327)); _ -> fun (V283) -> case V7 of {'Idris.Builtin.MkPair', E324, E325} -> (fun (V284, V285) -> case V285 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V284, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E324, E325)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E322, E323)); _ -> case V6 of {'Idris.Builtin.MkPair', E318, E319} -> (fun (V286, V287) -> case V287 of 4 -> fun (V288) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V286, 4}} end; _ -> fun (V289) -> case V7 of {'Idris.Builtin.MkPair', E320, E321} -> (fun (V290, V291) -> case V291 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V290, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E320, E321)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E318, E319)); _ -> fun (V292) -> case V7 of {'Idris.Builtin.MkPair', E316, E317} -> (fun (V293, V294) -> case V294 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V293, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E316, E317)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end end(E314, E315)); _ -> case V7 of {'Idris.Builtin.MkPair', E282, E283} -> (fun (V295, V296) -> case V296 of 0 -> fun (V297) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V295, 0}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E298, E299} -> (fun (V298, V299) -> case V299 of 3 -> fun (V300) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V298, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E306, E307} -> (fun (V301, V302) -> case V302 of 3 -> fun (V303) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V301, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E310, E311} -> (fun (V304, V305) -> case V305 of 4 -> fun (V306) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V304, 4}} end; _ -> fun (V307) -> case V7 of {'Idris.Builtin.MkPair', E312, E313} -> (fun (V308, V309) -> case V309 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V308, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E312, E313)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E310, E311)); _ -> fun (V310) -> case V7 of {'Idris.Builtin.MkPair', E308, E309} -> (fun (V311, V312) -> case V312 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V311, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E308, E309)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E306, E307)); _ -> case V6 of {'Idris.Builtin.MkPair', E302, E303} -> (fun (V313, V314) -> case V314 of 4 -> fun (V315) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V313, 4}} end; _ -> fun (V316) -> case V7 of {'Idris.Builtin.MkPair', E304, E305} -> (fun (V317, V318) -> case V318 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V317, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E304, E305)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E302, E303)); _ -> fun (V319) -> case V7 of {'Idris.Builtin.MkPair', E300, E301} -> (fun (V320, V321) -> case V321 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V320, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E300, E301)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E298, E299)); _ -> case V7 of {'Idris.Builtin.MkPair', E290, E291} -> (fun (V322, V323) -> case V323 of 3 -> fun (V324) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V322, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E294, E295} -> (fun (V325, V326) -> case V326 of 4 -> fun (V327) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V325, 4}} end; _ -> fun (V328) -> case V7 of {'Idris.Builtin.MkPair', E296, E297} -> (fun (V329, V330) -> case V330 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V329, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E296, E297)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E294, E295)); _ -> fun (V331) -> case V7 of {'Idris.Builtin.MkPair', E292, E293} -> (fun (V332, V333) -> case V333 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V332, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E292, E293)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E290, E291)); _ -> case V6 of {'Idris.Builtin.MkPair', E286, E287} -> (fun (V334, V335) -> case V335 of 4 -> fun (V336) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V334, 4}} end; _ -> fun (V337) -> case V7 of {'Idris.Builtin.MkPair', E288, E289} -> (fun (V338, V339) -> case V339 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V338, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E288, E289)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E286, E287)); _ -> fun (V340) -> case V7 of {'Idris.Builtin.MkPair', E284, E285} -> (fun (V341, V342) -> case V342 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V341, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E284, E285)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end(E282, E283)); _ -> case V6 of {'Idris.Builtin.MkPair', E266, E267} -> (fun (V343, V344) -> case V344 of 3 -> fun (V345) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V343, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E274, E275} -> (fun (V346, V347) -> case V347 of 3 -> fun (V348) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V346, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E278, E279} -> (fun (V349, V350) -> case V350 of 4 -> fun (V351) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V349, 4}} end; _ -> fun (V352) -> case V7 of {'Idris.Builtin.MkPair', E280, E281} -> (fun (V353, V354) -> case V354 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V353, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E280, E281)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E278, E279)); _ -> fun (V355) -> case V7 of {'Idris.Builtin.MkPair', E276, E277} -> (fun (V356, V357) -> case V357 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V356, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E276, E277)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E274, E275)); _ -> case V6 of {'Idris.Builtin.MkPair', E270, E271} -> (fun (V358, V359) -> case V359 of 4 -> fun (V360) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V358, 4}} end; _ -> fun (V361) -> case V7 of {'Idris.Builtin.MkPair', E272, E273} -> (fun (V362, V363) -> case V363 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V362, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E272, E273)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E270, E271)); _ -> fun (V364) -> case V7 of {'Idris.Builtin.MkPair', E268, E269} -> (fun (V365, V366) -> case V366 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V365, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E268, E269)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E266, E267)); _ -> case V7 of {'Idris.Builtin.MkPair', E258, E259} -> (fun (V367, V368) -> case V368 of 3 -> fun (V369) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V367, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E262, E263} -> (fun (V370, V371) -> case V371 of 4 -> fun (V372) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V370, 4}} end; _ -> fun (V373) -> case V7 of {'Idris.Builtin.MkPair', E264, E265} -> (fun (V374, V375) -> case V375 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V374, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E264, E265)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E262, E263)); _ -> fun (V376) -> case V7 of {'Idris.Builtin.MkPair', E260, E261} -> (fun (V377, V378) -> case V378 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V377, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E260, E261)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E258, E259)); _ -> case V6 of {'Idris.Builtin.MkPair', E254, E255} -> (fun (V379, V380) -> case V380 of 4 -> fun (V381) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V379, 4}} end; _ -> fun (V382) -> case V7 of {'Idris.Builtin.MkPair', E256, E257} -> (fun (V383, V384) -> case V384 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V383, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E256, E257)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E254, E255)); _ -> fun (V385) -> case V7 of {'Idris.Builtin.MkPair', E252, E253} -> (fun (V386, V387) -> case V387 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V386, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E252, E253)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end; 0 -> fun (V388) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, 0}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E94, E95} -> (fun (V389, V390) -> case V390 of 0 -> fun (V391) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V389, 0}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E110, E111} -> (fun (V392, V393) -> case V393 of 3 -> fun (V394) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V392, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E118, E119} -> (fun (V395, V396) -> case V396 of 3 -> fun (V397) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V395, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E122, E123} -> (fun (V398, V399) -> case V399 of 4 -> fun (V400) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V398, 4}} end; _ -> fun (V401) -> case V7 of {'Idris.Builtin.MkPair', E124, E125} -> (fun (V402, V403) -> case V403 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V402, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E124, E125)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E122, E123)); _ -> fun (V404) -> case V7 of {'Idris.Builtin.MkPair', E120, E121} -> (fun (V405, V406) -> case V406 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V405, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E120, E121)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E118, E119)); _ -> case V6 of {'Idris.Builtin.MkPair', E114, E115} -> (fun (V407, V408) -> case V408 of 4 -> fun (V409) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V407, 4}} end; _ -> fun (V410) -> case V7 of {'Idris.Builtin.MkPair', E116, E117} -> (fun (V411, V412) -> case V412 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V411, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E116, E117)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E114, E115)); _ -> fun (V413) -> case V7 of {'Idris.Builtin.MkPair', E112, E113} -> (fun (V414, V415) -> case V415 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V414, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E112, E113)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E110, E111)); _ -> case V7 of {'Idris.Builtin.MkPair', E102, E103} -> (fun (V416, V417) -> case V417 of 3 -> fun (V418) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V416, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E106, E107} -> (fun (V419, V420) -> case V420 of 4 -> fun (V421) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V419, 4}} end; _ -> fun (V422) -> case V7 of {'Idris.Builtin.MkPair', E108, E109} -> (fun (V423, V424) -> case V424 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V423, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E108, E109)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E106, E107)); _ -> fun (V425) -> case V7 of {'Idris.Builtin.MkPair', E104, E105} -> (fun (V426, V427) -> case V427 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V426, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E104, E105)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E102, E103)); _ -> case V6 of {'Idris.Builtin.MkPair', E98, E99} -> (fun (V428, V429) -> case V429 of 4 -> fun (V430) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V428, 4}} end; _ -> fun (V431) -> case V7 of {'Idris.Builtin.MkPair', E100, E101} -> (fun (V432, V433) -> case V433 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V432, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E100, E101)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E98, E99)); _ -> fun (V434) -> case V7 of {'Idris.Builtin.MkPair', E96, E97} -> (fun (V435, V436) -> case V436 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V435, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E96, E97)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end(E94, E95)); _ -> case V6 of {'Idris.Builtin.MkPair', E78, E79} -> (fun (V437, V438) -> case V438 of 3 -> fun (V439) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V437, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E86, E87} -> (fun (V440, V441) -> case V441 of 3 -> fun (V442) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V440, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E90, E91} -> (fun (V443, V444) -> case V444 of 4 -> fun (V445) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V443, 4}} end; _ -> fun (V446) -> case V7 of {'Idris.Builtin.MkPair', E92, E93} -> (fun (V447, V448) -> case V448 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V447, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E92, E93)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E90, E91)); _ -> fun (V449) -> case V7 of {'Idris.Builtin.MkPair', E88, E89} -> (fun (V450, V451) -> case V451 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V450, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E88, E89)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E86, E87)); _ -> case V6 of {'Idris.Builtin.MkPair', E82, E83} -> (fun (V452, V453) -> case V453 of 4 -> fun (V454) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V452, 4}} end; _ -> fun (V455) -> case V7 of {'Idris.Builtin.MkPair', E84, E85} -> (fun (V456, V457) -> case V457 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V456, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E84, E85)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E82, E83)); _ -> fun (V458) -> case V7 of {'Idris.Builtin.MkPair', E80, E81} -> (fun (V459, V460) -> case V460 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V459, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E80, E81)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E78, E79)); _ -> case V7 of {'Idris.Builtin.MkPair', E70, E71} -> (fun (V461, V462) -> case V462 of 3 -> fun (V463) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V461, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E74, E75} -> (fun (V464, V465) -> case V465 of 4 -> fun (V466) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V464, 4}} end; _ -> fun (V467) -> case V7 of {'Idris.Builtin.MkPair', E76, E77} -> (fun (V468, V469) -> case V469 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V468, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E76, E77)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E74, E75)); _ -> fun (V470) -> case V7 of {'Idris.Builtin.MkPair', E72, E73} -> (fun (V471, V472) -> case V472 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V471, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E72, E73)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E70, E71)); _ -> case V6 of {'Idris.Builtin.MkPair', E66, E67} -> (fun (V473, V474) -> case V474 of 4 -> fun (V475) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V473, 4}} end; _ -> fun (V476) -> case V7 of {'Idris.Builtin.MkPair', E68, E69} -> (fun (V477, V478) -> case V478 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V477, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E68, E69)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E66, E67)); _ -> fun (V479) -> case V7 of {'Idris.Builtin.MkPair', E64, E65} -> (fun (V480, V481) -> case V481 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V480, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E64, E65)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end end(E62, E63)); _ -> case V7 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V482, V483) -> case V483 of 0 -> fun (V484) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V482, 0}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V485, V486) -> case V486 of 3 -> fun (V487) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V485, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V488, V489) -> case V489 of 3 -> fun (V490) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V488, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E58, E59} -> (fun (V491, V492) -> case V492 of 4 -> fun (V493) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V491, 4}} end; _ -> fun (V494) -> case V7 of {'Idris.Builtin.MkPair', E60, E61} -> (fun (V495, V496) -> case V496 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V495, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E60, E61)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E58, E59)); _ -> fun (V497) -> case V7 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V498, V499) -> case V499 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V498, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E56, E57)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E54, E55)); _ -> case V6 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V500, V501) -> case V501 of 4 -> fun (V502) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V500, 4}} end; _ -> fun (V503) -> case V7 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V504, V505) -> case V505 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V504, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E52, E53)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E50, E51)); _ -> fun (V506) -> case V7 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V507, V508) -> case V508 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V507, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E48, E49)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E46, E47)); _ -> case V7 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V509, V510) -> case V510 of 3 -> fun (V511) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V509, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V512, V513) -> case V513 of 4 -> fun (V514) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V512, 4}} end; _ -> fun (V515) -> case V7 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V516, V517) -> case V517 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V516, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E44, E45)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E42, E43)); _ -> fun (V518) -> case V7 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V519, V520) -> case V520 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V519, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E40, E41)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E38, E39)); _ -> case V6 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V521, V522) -> case V522 of 4 -> fun (V523) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V521, 4}} end; _ -> fun (V524) -> case V7 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V525, V526) -> case V526 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V525, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E36, E37)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E34, E35)); _ -> fun (V527) -> case V7 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V528, V529) -> case V529 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V528, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E32, E33)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end(E30, E31)); _ -> case V6 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V530, V531) -> case V531 of 3 -> fun (V532) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V530, 3}} end; _ -> case V7 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V533, V534) -> case V534 of 3 -> fun (V535) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V533, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V536, V537) -> case V537 of 4 -> fun (V538) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V536, 4}} end; _ -> fun (V539) -> case V7 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V540, V541) -> case V541 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V540, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E28, E29)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E26, E27)); _ -> fun (V542) -> case V7 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V543, V544) -> case V544 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V543, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E24, E25)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E22, E23)); _ -> case V6 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V545, V546) -> case V546 of 4 -> fun (V547) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V545, 4}} end; _ -> fun (V548) -> case V7 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V549, V550) -> case V550 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V549, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E20, E21)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E18, E19)); _ -> fun (V551) -> case V7 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V552, V553) -> case V553 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V552, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E16, E17)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end(E14, E15)); _ -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V554, V555) -> case V555 of 3 -> fun (V556) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V554, 3}} end; _ -> case V6 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V557, V558) -> case V558 of 4 -> fun (V559) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V557, 4}} end; _ -> fun (V560) -> case V7 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V561, V562) -> case V562 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V561, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E12, E13)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E10, E11)); _ -> fun (V563) -> case V7 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V564, V565) -> case V565 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V564, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end(E6, E7)); _ -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V566, V567) -> case V567 of 4 -> fun (V568) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V566, 4}} end; _ -> fun (V569) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V570, V571) -> case V571 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V570, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end(E2, E3)); _ -> fun (V572) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V573, V574) -> case V574 of 4 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V573, 4}}; _ -> {'Idris.Prelude.Types.Right', V6} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', V6} end end end end end end end.
'nested--8433-15078--in--un--combine'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V8, V9) -> case V9 of [] -> {'Idris.Prelude.Types.Right', V8}; _ -> begin (V10 = ('nested--8433-15078--in--un--combine'(V0, V1, V2, V3, V4, V5, V9, V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('nested--8433-15077--in--un--combineUsages'(V0, V1, V2, V3, V4, V5, V8, V12, V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15453-17629--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V12)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V11, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearUsed', V8, V11, V0}, V13)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8433-15072--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V18, V19)) end end}}, V10)) of 1 -> case case V9 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V7, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V9 of 1 -> 0; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V7, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearUsed', V6, V7, V8}, V11)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8405-12304--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V20)) end end}}, V11)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearUsed', V4, V10, V1}, V12)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8433-15074--in--un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V7 of [] -> fun (V13) -> case V9 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E0 | E1] -> (fun (V14, V15) -> case V9 of {'Idris.Core.Env.::', E2, E3} -> (fun (V16, V17) -> begin (V18 = ('un--localPrf'(V6))), begin (V19 = ('un--count'(('Idris.Idris2.Core.TT':'un--varIdx'(V18)), V10))), fun (V20) -> begin (V29 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V27, V28)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V16)))) of 1 -> (('un--updateHoleUsage'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, [V14 | V15])), V5, V4, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V19, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))), V18, [], V12))(V20)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> begin (V40 = case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V32, V33)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V38, V39)) end end}}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V16)), V8)))) of 1 -> case V31 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V19, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)); 0 -> V19; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V41 = ('nested--8433-15072--in--un--checkUsageOK'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--getLoc'(('Idris.Idris2.Core.TT':'un--binderType'(V16)))), V40, V14, ('nested--8433-15073--in--un--isLocArg'(V0, V1, V2, V3, V4, V5, V18, V11)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V16)), V8)), V20))), case V41 of {'Idris.Prelude.Types.Left', E6} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V43) -> (('nested--8433-15074--in--un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, [V14 | []])), V15, V8, V17, V10, V11, V12))(V20)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ArgUsage'(V0) -> case V0 of 0 -> <<"any"/utf8>>; 1 -> <<"0"/utf8>>; 2 -> <<"1"/utf8>>; 3 -> <<"keep"/utf8>>; 4 -> <<"unknown"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(Usage $vars)'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--6881-10110--in--un--showAll'(V0, V0)), <<"]"/utf8>>)))).
'dn--un--showPrec_Show_ArgUsage'(V0, V1) -> ('dn--un--show_Show_ArgUsage'(V1)).
'un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = (('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V8))(V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V9, V7))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', case V12 of 1 -> 1; 0 -> V15; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Bind', E167, E168, E169, E170} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Let', E171, E172, E173, E174} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V13))(V15))), case V16 of {'Idris.Prelude.Types.Left', E175} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V18) -> begin (V20 = (('un--updateHoleUsage'([V8 | V0], V1, V2, V3, (1 + V4), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V19)) end, V5)), V10))(V15))), case V20 of {'Idris.Prelude.Types.Left', E177} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V22) -> {'Idris.Prelude.Types.Right', case V18 of 1 -> 1; 0 -> V22; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E171, E172, E173, E174)); _ -> ('un--updateHoleUsage'([V8 | V0], V1, V2, V3, (1 + V4), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V23) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V23)) end, V5)), V10)) end end(E167, E168, E169, E170)); _ -> case V6 of {'Idris.Core.TT.Meta', E0, E1, E2, E3} -> (fun (V24, V25, V26, V27) -> fun (V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> begin (V63 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V26}, case V32 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V33 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V28))), case V63 of {'Idris.Prelude.Types.Left', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V65) -> case V65 of {'Idris.Prelude.Types.Just', E38} -> (fun (V66) -> case V66 of {'Idris.Core.Context.Context.MkGlobalDef', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> case V84 of {'Idris.Core.Context.Context.Hole', E59, E60} -> (fun (V87, V88) -> begin (V109 = case V66 of {'Idris.Core.Context.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V91 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V110 = (('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V109, V27))(V28))), case V110 of {'Idris.Prelude.Types.Left', E81} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V112) -> begin (V113 = ('Idris.Idris2.Core.Context':'un--updateTy'(V1, V26, V112, V28))), case V113 of {'Idris.Prelude.Types.Left', E83} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V115) -> begin (V136 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"quantity.hole.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"New type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V66 of {'Idris.Core.Context.Context.MkGlobalDef', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104} -> (fun (V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135) -> V117 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, V112, V28))), case V136 of {'Idris.Prelude.Types.Left', E105} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V138) -> begin (V179 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"quantity.hole.update"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updated from "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V66 of {'Idris.Core.Context.Context.MkGlobalDef', E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126} -> (fun (V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158) -> V140 end(E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, case V66 of {'Idris.Core.Context.Context.MkGlobalDef', E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146} -> (fun (V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178) -> V161 end(E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V28))), case V179 of {'Idris.Prelude.Types.Left', E147} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V181) -> {'Idris.Prelude.Types.Right', 1} end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E59, E60)); _ -> ('un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V27, V28)) end end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--updateHoleUsageArgs'(V0, V1, V2, V3, V4, V5, V27, V28)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.TT.As', E149, E150, E151, E152} -> (fun (V182, V183, V184, V185) -> fun (V186) -> begin (V187 = (('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V184))(V186))), case V187 of {'Idris.Prelude.Types.Left', E153} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V189) -> begin (V190 = (('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V184))(V186))), case V190 of {'Idris.Prelude.Types.Left', E155} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V192) -> {'Idris.Prelude.Types.Right', case V189 of 1 -> 1; 0 -> V192; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149, E150, E151, E152)); {'Idris.Core.TT.TDelayed', E157, E158, E159} -> (fun (V193, V194, V195) -> ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V195)) end(E157, E158, E159)); {'Idris.Core.TT.TDelay', E160, E161, E162, E163} -> (fun (V196, V197, V198, V199) -> ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V199)) end(E160, E161, E162, E163)); {'Idris.Core.TT.TForce', E164, E165, E166} -> (fun (V200, V201, V202) -> ('un--updateHoleUsage'(V0, V1, V2, V3, V4, V5, V202)) end(E164, E165, E166)); _ -> ('case--updateHoleUsage-11368'(V0, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V6)))) end end.
'un--updateHoleType'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Bind', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V12, V13, V14, V15) -> case V7 of [E20 | E21] -> (fun (V16, V17) -> case V16 of {'Idris.Core.TT.Local', E28, E29, E30} -> (fun (V18, V19, V20) -> fun (V21) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Core.TT':'un--varIdx'(V4)), V20)) of 1 -> begin (V22 = (('un--updateHoleType'(V0, V1, V2, 0, V4, V5, V11, V17))(V21))), case V22 of {'Idris.Prelude.Types.Left', E31} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V24) -> begin (V29 = case V3 of 1 -> V13; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V8, V9, {'Idris.Core.TT.Pi', V12, V29, V14, V15}, V24}} end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V32, V33)) end end}, V20, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V34) -> ('Idris.Idris2.Core.TT':'un--varIdx'(V34)) end, V5)))) of 1 -> begin (V35 = (('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V11, V17))(V21))), case V35 of {'Idris.Prelude.Types.Left', E33} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V8, V9, {'Idris.Core.TT.Pi', V12, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V38, V39)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V40, V41)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V14, V15}, V37}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V42 = (('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V11, V17))(V21))), case V42 of {'Idris.Prelude.Types.Left', E35} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V8, V9, {'Idris.Core.TT.Pi', V12, V13, V14, V15}, V44}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29, E30)); _ -> fun (V45) -> begin (V49 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E22} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V48) -> {'Idris.Prelude.Types.Right', 0} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--updateHoleUsage'(V0, V1, V2, 0, V4, V5, V16)), V45))), case V49 of {'Idris.Prelude.Types.Left', E24} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V51) -> begin (V52 = (('un--updateHoleType'(V0, V1, V2, V3, V4, V5, V11, V17))(V45))), case V52 of {'Idris.Prelude.Types.Left', E26} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V8, V9, {'Idris.Core.TT.Pi', V12, V13, V14, V15}, V54}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E20, E21)); _ -> fun (V55) -> begin (V60 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V56) -> case V56 of {'Idris.Prelude.Types.Left', E16} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V58) -> {'Idris.Prelude.Types.Right', 0} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V59) -> ('un--updateHoleUsageArgs'(V0, V1, V2, 0, V4, V5, V7, V59)) end, V55))), case V60 of {'Idris.Prelude.Types.Left', E18} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V62) -> {'Idris.Prelude.Types.Right', V6} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E12, E13, E14, E15)); _ -> fun (V63) -> begin (V68 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V64) -> case V64 of {'Idris.Prelude.Types.Left', E8} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V66) -> {'Idris.Prelude.Types.Right', 0} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V67) -> ('un--updateHoleUsageArgs'(V0, V1, V2, 0, V4, V5, V7, V67)) end, V63))), case V68 of {'Idris.Prelude.Types.Left', E10} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V70) -> {'Idris.Prelude.Types.Right', V6} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V71) -> begin (V76 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V72) -> case V72 of {'Idris.Prelude.Types.Left', E0} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V74) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V75) -> ('un--updateHoleUsageArgs'(V0, V1, V2, 0, V4, V5, V7, V75)) end, V71))), case V76 of {'Idris.Prelude.Types.Left', E2} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V78) -> {'Idris.Prelude.Types.Right', V6} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--localPrf'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> (1 + ('un--localPrf'(V2))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--linearCheck'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Linearity check on "/utf8>> end, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V6, V8))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = (('un--lcheck'(V0, V1, V2, V4, V5, V6, V7))(V8))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Used: "/utf8>>, ('dn--un--show_Show_(Usage $vars)'(V21)))) end, V8))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = case V5 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> (('un--checkEnvUsage'(V0, [], V1, V2, V3, V4, V6, V21, V18))(V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', V18} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lcheckMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of [E0 | E1] -> (fun (V12, V13) -> case V11 of {'Idris.Core.Value.NBind', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E26, E27, E28, E29} -> (fun (V18, V19, V20, V21) -> begin (V22 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V3))), fun (V23) -> begin (V24 = (('un--lcheck'(V0, V1, V2, V22, V4, V5, V12))(V23))), case V24 of {'Idris.Prelude.Types.Left', E30} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V29, V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E36} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V34) -> begin (V35 = (((V17(V34))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, V27))))(V23))), case V35 of {'Idris.Prelude.Types.Left', E38} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V37) -> begin (V46 = case case V4 of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V38, V39)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V40) -> fun (V41) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V40, V41)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V44, V45)) end end}}, V19)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Core.TT.Erased', V6, 0}; 0 -> V27; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V47 = (('un--lcheckMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, [V46 | V10], V37))(V23))), case V47 of {'Idris.Prelude.Types.Left', E40} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V49) -> case V49 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V50, V51) -> case V51 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V52, V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V50, {'Idris.Builtin.MkPair', V52, ('un--++'(V30, V53))}}} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26, E27, E28, E29)); _ -> fun (V54) -> begin (V56 = begin (V55 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V55} end), case V56 of {'Idris.Prelude.Types.Left', E16} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V58, V54))), case V59 of {'Idris.Prelude.Types.Left', E18} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V61, V5, V11, V54))), case V62 of {'Idris.Prelude.Types.Left', E20} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V64) -> begin (V71 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V65, V66, V67)) end end end, fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V68, V69, V70)) end end end}, V7, V54))), case V71 of {'Idris.Prelude.Types.Left', E22} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V73) -> begin (V80 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V74, V75, V76)) end end end, fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V77, V78, V79)) end end end}, V64, V54))), case V80 of {'Idris.Prelude.Types.Left', E24} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V82) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity checking failed on metavar "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V73)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V82)), <<" not a function type)"/utf8>>))))))))}, V54)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E12, E13, E14, E15)); _ -> fun (V83) -> begin (V85 = begin (V84 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E2} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V87, V83))), case V88 of {'Idris.Prelude.Types.Left', E4} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V90) -> begin (V91 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V90, V5, V11, V83))), case V91 of {'Idris.Prelude.Types.Left', E6} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V93) -> begin (V100 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V94, V95, V96)) end end end, fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V97, V98, V99)) end end end}, V7, V83))), case V100 of {'Idris.Prelude.Types.Left', E8} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V102) -> begin (V109 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V103, V104, V105)) end end end, fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V106, V107, V108)) end end end}, V93, V83))), case V109 of {'Idris.Prelude.Types.Left', E10} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V111) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity checking failed on metavar "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V111)), <<" not a function type)"/utf8>>))))))))}, V83)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); [] -> fun (V112) -> begin (V114 = begin (V113 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V113} end), case V114 of {'Idris.Prelude.Types.Left', E46} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V116) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Meta', V6, V7, V8, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V10))}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V116, V5, V11)), {'Idris.Core.LinearCheck.Nil'}}}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lcheckDef'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of 1 -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V6, case V11 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E34} -> (fun (V45) -> {'Idris.Prelude.Types.Right', case V45 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V48 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V2, V6, V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V67 = begin (V66 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V66} end), case V67 of {'Idris.Prelude.Types.Left', E55} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V69) -> ('case--lcheckDef-16785'(V6, V5, V3, V2, V1, V0, V69, ('Idris.Idris2.Core.Context':'un--getNameID'(V6, case V69 of {'Idris.Core.Context.MkDefs', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V70 end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V7)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lcheckBinder'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> begin (V16 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V5, V11))(V7))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V21, V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Lam', V8, V9, V10, V19}, {'Idris.Builtin.MkPair', V21, {'Idris.Core.LinearCheck.Nil'}}}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E10, E11, E12, E13} -> (fun (V23, V24, V25, V26) -> begin (V31 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V5, V26))(V7))), case V31 of {'Idris.Prelude.Types.Left', E14} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V34, V35) -> case V35 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V36, V37) -> begin (V38 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V3, V24)), V4, V5, V25))(V7))), case V38 of {'Idris.Prelude.Types.Left', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V43, V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Let', V23, V24, V41, V34}, {'Idris.Builtin.MkPair', V36, V44}}} end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13)); {'Idris.Core.TT.Pi', E26, E27, E28, E29} -> (fun (V45, V46, V47, V48) -> begin (V49 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V3, V46)), V4, V5, V48))(V7))), case V49 of {'Idris.Prelude.Types.Left', E30} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V51) -> case V51 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V52, V53) -> case V53 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V54, V55) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Pi', V45, V46, V47, V52}, {'Idris.Builtin.MkPair', V54, {'Idris.Core.LinearCheck.Nil'}}}} end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27, E28, E29)); {'Idris.Core.TT.PVar', E36, E37, E38, E39} -> (fun (V56, V57, V58, V59) -> begin (V64 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V60, V61)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V62, V63)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V5, V59))(V7))), case V64 of {'Idris.Prelude.Types.Left', E40} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V66) -> case V66 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V67, V68) -> case V68 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V69, V70) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.PVar', V56, V57, V58, V67}, {'Idris.Builtin.MkPair', V69, {'Idris.Core.LinearCheck.Nil'}}}} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38, E39)); {'Idris.Core.TT.PLet', E46, E47, E48, E49} -> (fun (V71, V72, V73, V74) -> begin (V79 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V75) -> fun (V76) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V75, V76)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V77) -> fun (V78) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V77, V78)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V5, V74))(V7))), case V79 of {'Idris.Prelude.Types.Left', E50} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V81) -> case V81 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V82, V83) -> case V83 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V84, V85) -> begin (V86 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V3, V72)), V4, V5, V73))(V7))), case V86 of {'Idris.Prelude.Types.Left', E56} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V88) -> case V88 of {'Idris.Builtin.MkPair', E58, E59} -> (fun (V89, V90) -> case V90 of {'Idris.Builtin.MkPair', E60, E61} -> (fun (V91, V92) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.PLet', V71, V72, V89, V82}, {'Idris.Builtin.MkPair', V84, V92}}} end(E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47, E48, E49)); {'Idris.Core.TT.PVTy', E62, E63, E64} -> (fun (V93, V94, V95) -> begin (V100 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V96) -> fun (V97) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V96, V97)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V98) -> fun (V99) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V98, V99)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V5, V95))(V7))), case V100 of {'Idris.Prelude.Types.Left', E65} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V102) -> case V102 of {'Idris.Builtin.MkPair', E67, E68} -> (fun (V103, V104) -> case V104 of {'Idris.Builtin.MkPair', E69, E70} -> (fun (V105, V106) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.PVTy', V93, V94, V103}, {'Idris.Builtin.MkPair', V105, {'Idris.Core.LinearCheck.Nil'}}}} end(E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lcheck'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V7, V8, V9) -> begin (V17 = ('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V12)) end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V15, V16)) end end end end}, V0, V9, V5))), begin (V18 = ('Idris.Idris2.Core.TT':'un--multiplicity'(V17))), begin (V19 = ('Idris.Idris2.Core.TT':'un--binderType'(V17))), fun (V20) -> begin (V21 = case V4 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('nested--8405-11538--in--un--rigSafe'(V9, V0, V8, V7, V5, V4, V3, V2, V1, V18, V3, V20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V21 of {'Idris.Prelude.Types.Left', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Local', V7, V8, V9}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, V19)), ('nested--8405-11539--in--un--used'(V9, V0, V8, V7, V5, V4, V3, V2, V1, V3))}}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E5, E6, E7} -> (fun (V24, V25, V26) -> fun (V27) -> begin (V28 = ('un--lcheckDef'(V1, V2, V24, V3, V4, V5, V26, V27))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V24, V25, V26}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, ('Idris.Idris2.Core.TT':'un--embed'(V30)))), {'Idris.Core.LinearCheck.Nil'}}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); {'Idris.Core.TT.Meta', E10, E11, E12, E13} -> (fun (V31, V32, V33, V34) -> fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E14} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V39) -> begin (V70 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V33}, case V39 of {'Idris.Core.Context.MkDefs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V40 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V35))), case V70 of {'Idris.Prelude.Types.Left', E46} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V72) -> case V72 of {'Idris.Prelude.Types.Just', E48} -> (fun (V73) -> begin (V129 = ('Idris.Idris2.Algebra.Semiring':'un--branchZero'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V74) -> fun (V75) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V74, V75)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V76) -> fun (V77) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V76, V77)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V80, V81)) end end}}, case V73 of {'Idris.Core.Context.Context.MkGlobalDef', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> case V84 of {'Idris.Core.TT.Erased', E69, E70} -> (fun (V102, V103) -> fun () -> 1 end end(E69, E70)); _ -> fun () -> 0 end end end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V73 of {'Idris.Core.Context.Context.MkGlobalDef', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123) -> case V121 of {'Idris.Core.Context.Context.PMDef', E91, E92, E93, E94, E95} -> (fun (V124, V125, V126, V127, V128) -> fun () -> 1 end end(E91, E92, E93, E94, E95)); _ -> fun () -> 0 end end end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), begin (V170 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"quantity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V130) -> begin (V167 = case V73 of {'Idris.Core.Context.Context.MkGlobalDef', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115} -> (fun (V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150) -> case V148 of {'Idris.Core.Context.Context.PMDef', E116, E117, E118, E119, E120} -> (fun (V151, V152, V153, V154, V155) -> case V153 of {'Idris.Core.CaseTree.STerm', E121, E122} -> (fun (V156, V157) -> begin (V164 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V158, V159, V160)) end end end, fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V161, V162, V163)) end end end}, V157, V130))), case V164 of {'Idris.Prelude.Types.Left', E123} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V166) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V152, V166))} end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121, E122)); _ -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end(E116, E117, E118, E119, E120)); _ -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V167 of {'Idris.Prelude.Types.Left', E125} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V169) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V32)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V169))))))))))))))} end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V35))), case V170 of {'Idris.Prelude.Types.Left', E127} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V172) -> case V129 of 1 -> (('un--expandMeta'(V0, V1, V2, V3, V4, V5, V32, V33, case V73 of {'Idris.Core.Context.Context.MkGlobalDef', E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148} -> (fun (V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192) -> V190 end(E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34))(V35)); 0 -> begin (V255 = case V73 of {'Idris.Core.Context.Context.MkGlobalDef', E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168} -> (fun (V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212) -> case V210 of {'Idris.Core.Context.Context.Hole', E189, E190} -> (fun (V213, V214) -> ('nested--8405-11766--in--un--unusedHoleArgs'(V0, V34, V33, V32, V31, V5, V4, V3, V2, V1, V34, case V73 of {'Idris.Core.Context.Context.MkGlobalDef', E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210} -> (fun (V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234) -> V217 end(E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E189, E190)); _ -> case V73 of {'Idris.Core.Context.Context.MkGlobalDef', E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188} -> (fun (V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254) -> V237 end(E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V256 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V39, V5, ('Idris.Idris2.Core.TT':'un--embed'(V255))))(V35))), case V256 of {'Idris.Prelude.Types.Left', E211} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V258) -> (('un--lcheckMeta'(V0, V1, V2, V3, V4, V5, V31, V32, V33, V34, [], V258))(V35)) end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E48)); _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V31, V32, V35)) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13)); {'Idris.Core.TT.Bind', E213, E214, E215, E216} -> (fun (V259, V260, V261, V262) -> fun (V263) -> begin (V276 = ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V2, fun (V264) -> ('un--lcheckBinder'(V0, V1, V2, ('nested--8405-12301--in--un--rig'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1)), V4, V5, V261, V264)) end, fun (V265) -> case V265 of {'Idris.Core.Core.LinearMisuse', E217, E218, E219, E220} -> (fun (V266, V267, V268, V269) -> fun (V270) -> ('un--lcheckBinder'(V0, V1, V2, ('nested--8405-12301--in--un--rig'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1)), V4, V5, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V261, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V271) -> fun (V272) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V271, V272)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V273) -> fun (V274) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V273, V274)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), V270)) end end(E217, E218, E219, E220)); _ -> fun (V275) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V265, V275)) end end end, V263))), case V276 of {'Idris.Prelude.Types.Left', E221} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V278) -> case V278 of {'Idris.Builtin.MkPair', E223, E224} -> (fun (V279, V280) -> case V280 of {'Idris.Builtin.MkPair', E225, E226} -> (fun (V281, V282) -> begin (V287 = case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case V261 of {'Idris.Core.TT.Lam', E227, E228, E229, E230} -> (fun (V283, V284, V285, V286) -> ('nested--8405-12303--in--un--eraseLinear'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1, V5)) end(E227, E228, E229, E230)); _ -> V5 end; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V288 = (('un--lcheck'([V260 | V0], V1, V2, ('nested--8405-12301--in--un--rig'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1)), V4, {'Idris.Core.Env.::', V279, V287}, V262))(V263))), case V288 of {'Idris.Prelude.Types.Left', E231} -> (fun (V289) -> {'Idris.Prelude.Types.Left', V289} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V290) -> case V290 of {'Idris.Builtin.MkPair', E233, E234} -> (fun (V291, V292) -> case V292 of {'Idris.Builtin.MkPair', E235, E236} -> (fun (V293, V294) -> begin (V296 = begin (V295 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V295} end), case V296 of {'Idris.Prelude.Types.Left', E237} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E237)); {'Idris.Prelude.Types.Right', E238} -> (fun (V298) -> begin (V299 = ('un--count'(0, V294))), begin (V309 = case case V4 of 1 -> 0; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V300) -> fun (V301) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V300, V301)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V302) -> fun (V303) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V302, V303)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V304) -> fun (V305) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V304, V305)) end end, fun (V306) -> fun (V307) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V306, V307)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V261)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> (('un--updateHoleUsage'([V260 | V0], V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V299, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))), 0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V308) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V308)) end, ('nested--8405-12302--in--un--getZeroes'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1, V0, V287)))), V291))(V263)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V309 of {'Idris.Prelude.Types.Left', E239} -> (fun (V310) -> {'Idris.Prelude.Types.Left', V310} end(E239)); {'Idris.Prelude.Types.Right', E240} -> (fun (V311) -> begin (V320 = case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V312) -> fun (V313) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V312, V313)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V314) -> fun (V315) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V314, V315)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V316) -> fun (V317) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V316, V317)) end end, fun (V318) -> fun (V319) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V318, V319)) end end}}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V261)), ('nested--8405-12301--in--un--rig'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1)))))) of 1 -> case V311 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V299, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)); 0 -> V299; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V321 = case V4 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('nested--8405-12304--in--un--checkUsageOK'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1, V320, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V261)), ('nested--8405-12301--in--un--rig'(V0, V260, V262, V261, V259, V5, V4, V3, V2, V1)))), V263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V321 of {'Idris.Prelude.Types.Left', E241} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E241)); {'Idris.Prelude.Types.Right', E242} -> (fun (V323) -> begin (V325 = begin (V324 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V324} end), case V325 of {'Idris.Prelude.Types.Left', E243} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V327) -> ('un--discharge'(V0, V327, V5, V259, V260, V279, V281, V291, V293, ('un--++'(V282, ('un--doneScope'(V294)))), V263)) end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E235, E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E233, E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E225, E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E213, E214, E215, E216)); {'Idris.Core.TT.App', E245, E246, E247} -> (fun (V328, V329, V330) -> fun (V331) -> begin (V332 = (('un--lcheck'(V0, V1, V2, V3, V4, V5, V329))(V331))), case V332 of {'Idris.Prelude.Types.Left', E248} -> (fun (V333) -> {'Idris.Prelude.Types.Left', V333} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V334) -> case V334 of {'Idris.Builtin.MkPair', E250, E251} -> (fun (V335, V336) -> case V336 of {'Idris.Builtin.MkPair', E252, E253} -> (fun (V337, V338) -> begin (V340 = begin (V339 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V339} end), case V340 of {'Idris.Prelude.Types.Left', E254} -> (fun (V341) -> {'Idris.Prelude.Types.Left', V341} end(E254)); {'Idris.Prelude.Types.Right', E255} -> (fun (V342) -> begin (V343 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V337))(V331))), case V343 of {'Idris.Prelude.Types.Left', E256} -> (fun (V344) -> {'Idris.Prelude.Types.Left', V344} end(E256)); {'Idris.Prelude.Types.Right', E257} -> (fun (V345) -> case V345 of {'Idris.Core.Value.NBind', E264, E265, E266, E267} -> (fun (V346, V347, V348, V349) -> case V348 of {'Idris.Core.TT.Pi', E274, E275, E276, E277} -> (fun (V350, V351, V352, V353) -> begin (V354 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V351, V3))), begin (V355 = (('un--lcheck'(V0, V1, V2, V354, V4, V5, V330))(V331))), case V355 of {'Idris.Prelude.Types.Left', E278} -> (fun (V356) -> {'Idris.Prelude.Types.Left', V356} end(E278)); {'Idris.Prelude.Types.Right', E279} -> (fun (V357) -> case V357 of {'Idris.Builtin.MkPair', E280, E281} -> (fun (V358, V359) -> case V359 of {'Idris.Builtin.MkPair', E282, E283} -> (fun (V360, V361) -> begin (V362 = (((V349(V342))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, V358))))(V331))), case V362 of {'Idris.Prelude.Types.Left', E284} -> (fun (V363) -> {'Idris.Prelude.Types.Left', V363} end(E284)); {'Idris.Prelude.Types.Right', E285} -> (fun (V364) -> begin (V373 = case case V4 of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V365) -> fun (V366) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V365, V366)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V367) -> fun (V368) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V367, V368)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V369) -> fun (V370) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V369, V370)) end end, fun (V371) -> fun (V372) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V371, V372)) end end}}, V351)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Core.TT.Erased', V328, 0}; 0 -> V358; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V374 = ('Idris.Idris2.Core.Context':'un--getSession'(V1, V331))), case V374 of {'Idris.Prelude.Types.Left', E286} -> (fun (V375) -> {'Idris.Prelude.Types.Left', V375} end(E286)); {'Idris.Prelude.Types.Right', E287} -> (fun (V376) -> begin (V448 = case case V376 of {'Idris.Core.Options.MkSessionOpts', E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353} -> (fun (V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402) -> V390 end(E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V403 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V360))(V331))), case V403 of {'Idris.Prelude.Types.Left', E288} -> (fun (V404) -> {'Idris.Prelude.Types.Left', V404} end(E288)); {'Idris.Prelude.Types.Right', E289} -> (fun (V405) -> begin (V406 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V342, V353))(V331))), case V406 of {'Idris.Prelude.Types.Left', E290} -> (fun (V407) -> {'Idris.Prelude.Types.Left', V407} end(E290)); {'Idris.Prelude.Types.Right', E291} -> (fun (V408) -> begin (V409 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_NF'(V1, V0, V342, V5, V405, V408, V331))), case V409 of {'Idris.Prelude.Types.Left', E292} -> (fun (V410) -> {'Idris.Prelude.Types.Left', V410} end(E292)); {'Idris.Prelude.Types.Right', E293} -> (fun (V411) -> case V411 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V412 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V342, V5, V353, V331))), case V412 of {'Idris.Prelude.Types.Left', E294} -> (fun (V413) -> {'Idris.Prelude.Types.Left', V413} end(E294)); {'Idris.Prelude.Types.Right', E295} -> (fun (V414) -> begin (V415 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V342, V5, V405, V331))), case V415 of {'Idris.Prelude.Types.Left', E296} -> (fun (V416) -> {'Idris.Prelude.Types.Left', V416} end(E296)); {'Idris.Prelude.Types.Right', E297} -> (fun (V417) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantConvert', V0, V328, case V342 of {'Idris.Core.Context.MkDefs', E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327} -> (fun (V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447) -> V418 end(E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V414, V417}, V331)) end(E297)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V448 of {'Idris.Prelude.Types.Left', E354} -> (fun (V449) -> {'Idris.Prelude.Types.Left', V449} end(E354)); {'Idris.Prelude.Types.Right', E355} -> (fun (V450) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.App', V328, V335, V373}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V342, V5, V364)), ('un--++'(V338, V361))}}} end(E355)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E282, E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E280, E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E274, E275, E276, E277)); _ -> begin (V451 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V337))(V331))), case V451 of {'Idris.Prelude.Types.Left', E268} -> (fun (V452) -> {'Idris.Prelude.Types.Left', V452} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V453) -> begin (V460 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V454) -> fun (V455) -> fun (V456) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V454, V455, V456)) end end end, fun (V457) -> fun (V458) -> fun (V459) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V457, V458, V459)) end end end}, V335, V331))), case V460 of {'Idris.Prelude.Types.Left', E270} -> (fun (V461) -> {'Idris.Prelude.Types.Left', V461} end(E270)); {'Idris.Prelude.Types.Right', E271} -> (fun (V462) -> begin (V469 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V463) -> fun (V464) -> fun (V465) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V463, V464, V465)) end end end, fun (V466) -> fun (V467) -> fun (V468) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V466, V467, V468)) end end end}, V453, V331))), case V469 of {'Idris.Prelude.Types.Left', E272} -> (fun (V470) -> {'Idris.Prelude.Types.Left', V470} end(E272)); {'Idris.Prelude.Types.Right', E273} -> (fun (V471) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V328, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity checking failed on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V462)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V471)), <<" not a function type)"/utf8>>))))))))}, V331)) end(E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E264, E265, E266, E267)); {'Idris.Core.Value.NApp', E356, E357, E358} -> (fun (V472, V473, V474) -> case V473 of {'Idris.Core.Value.NRef', E365, E366} -> (fun (V475, V476) -> begin (V507 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V476, case V342 of {'Idris.Core.Context.MkDefs', E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396} -> (fun (V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506) -> V477 end(E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V331))), case V507 of {'Idris.Prelude.Types.Left', E397} -> (fun (V508) -> {'Idris.Prelude.Types.Left', V508} end(E397)); {'Idris.Prelude.Types.Right', E398} -> (fun (V509) -> case V509 of {'Idris.Prelude.Types.Just', E399} -> (fun (V510) -> begin (V511 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V337))(V331))), case V511 of {'Idris.Prelude.Types.Left', E400} -> (fun (V512) -> {'Idris.Prelude.Types.Left', V512} end(E400)); {'Idris.Prelude.Types.Right', E401} -> (fun (V513) -> begin (V520 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V514) -> fun (V515) -> fun (V516) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V514, V515, V516)) end end end, fun (V517) -> fun (V518) -> fun (V519) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V517, V518, V519)) end end end}, V335, V331))), case V520 of {'Idris.Prelude.Types.Left', E402} -> (fun (V521) -> {'Idris.Prelude.Types.Left', V521} end(E402)); {'Idris.Prelude.Types.Right', E403} -> (fun (V522) -> begin (V529 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V523) -> fun (V524) -> fun (V525) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V523, V524, V525)) end end end, fun (V526) -> fun (V527) -> fun (V528) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V526, V527, V528)) end end end}, V513, V331))), case V529 of {'Idris.Prelude.Types.Left', E404} -> (fun (V530) -> {'Idris.Prelude.Types.Left', V530} end(E404)); {'Idris.Prelude.Types.Right', E405} -> (fun (V531) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V328, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity checking failed on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V522)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V531)), <<" not a function type)"/utf8>>))))))))}, V331)) end(E405)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E403)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E401)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E399)); _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V328, V476, V331)) end end(E398)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E365, E366)); _ -> begin (V532 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V337))(V331))), case V532 of {'Idris.Prelude.Types.Left', E359} -> (fun (V533) -> {'Idris.Prelude.Types.Left', V533} end(E359)); {'Idris.Prelude.Types.Right', E360} -> (fun (V534) -> begin (V541 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V535) -> fun (V536) -> fun (V537) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V535, V536, V537)) end end end, fun (V538) -> fun (V539) -> fun (V540) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V538, V539, V540)) end end end}, V335, V331))), case V541 of {'Idris.Prelude.Types.Left', E361} -> (fun (V542) -> {'Idris.Prelude.Types.Left', V542} end(E361)); {'Idris.Prelude.Types.Right', E362} -> (fun (V543) -> begin (V550 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V544) -> fun (V545) -> fun (V546) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V544, V545, V546)) end end end, fun (V547) -> fun (V548) -> fun (V549) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V547, V548, V549)) end end end}, V534, V331))), case V550 of {'Idris.Prelude.Types.Left', E363} -> (fun (V551) -> {'Idris.Prelude.Types.Left', V551} end(E363)); {'Idris.Prelude.Types.Right', E364} -> (fun (V552) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V328, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity checking failed on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V543)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V552)), <<" not a function type)"/utf8>>))))))))}, V331)) end(E364)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E362)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E360)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E356, E357, E358)); _ -> begin (V553 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V337))(V331))), case V553 of {'Idris.Prelude.Types.Left', E258} -> (fun (V554) -> {'Idris.Prelude.Types.Left', V554} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V555) -> begin (V562 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V556) -> fun (V557) -> fun (V558) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V556, V557, V558)) end end end, fun (V559) -> fun (V560) -> fun (V561) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V559, V560, V561)) end end end}, V335, V331))), case V562 of {'Idris.Prelude.Types.Left', E260} -> (fun (V563) -> {'Idris.Prelude.Types.Left', V563} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V564) -> begin (V571 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V565) -> fun (V566) -> fun (V567) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V565, V566, V567)) end end end, fun (V568) -> fun (V569) -> fun (V570) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V568, V569, V570)) end end end}, V555, V331))), case V571 of {'Idris.Prelude.Types.Left', E262} -> (fun (V572) -> {'Idris.Prelude.Types.Left', V572} end(E262)); {'Idris.Prelude.Types.Right', E263} -> (fun (V573) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V328, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity checking failed on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V564)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V573)), <<" not a function type)"/utf8>>))))))))}, V331)) end(E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E250, E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E245, E246, E247)); {'Idris.Core.TT.As', E406, E407, E408, E409} -> (fun (V574, V575, V576, V577) -> fun (V578) -> begin (V579 = (('un--lcheck'(V0, V1, V2, V3, V4, V5, V576))(V578))), case V579 of {'Idris.Prelude.Types.Left', E410} -> (fun (V580) -> {'Idris.Prelude.Types.Left', V580} end(E410)); {'Idris.Prelude.Types.Right', E411} -> (fun (V581) -> case V581 of {'Idris.Builtin.MkPair', E412, E413} -> (fun (V582, V583) -> case V583 of {'Idris.Builtin.MkPair', E414, E415} -> (fun (V584, V585) -> begin (V586 = (('un--lcheck'(V0, V1, V2, V3, V4, V5, V577))(V578))), case V586 of {'Idris.Prelude.Types.Left', E416} -> (fun (V587) -> {'Idris.Prelude.Types.Left', V587} end(E416)); {'Idris.Prelude.Types.Right', E417} -> (fun (V588) -> case V588 of {'Idris.Builtin.MkPair', E418, E419} -> (fun (V589, V590) -> case V590 of {'Idris.Builtin.MkPair', E420, E421} -> (fun (V591, V592) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V574, V575, V582, V589}, {'Idris.Builtin.MkPair', V591, V592}}} end(E420, E421)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E418, E419)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E417)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E414, E415)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E412, E413)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E411)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E406, E407, E408, E409)); {'Idris.Core.TT.TDelayed', E422, E423, E424} -> (fun (V593, V594, V595) -> fun (V596) -> begin (V597 = (('un--lcheck'(V0, V1, V2, V3, V4, V5, V595))(V596))), case V597 of {'Idris.Prelude.Types.Left', E425} -> (fun (V598) -> {'Idris.Prelude.Types.Left', V598} end(E425)); {'Idris.Prelude.Types.Right', E426} -> (fun (V599) -> case V599 of {'Idris.Builtin.MkPair', E427, E428} -> (fun (V600, V601) -> case V601 of {'Idris.Builtin.MkPair', E429, E430} -> (fun (V602, V603) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelayed', V593, V594, V600}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V593)), V603}}} end(E429, E430)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E427, E428)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E426)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E422, E423, E424)); {'Idris.Core.TT.TDelay', E431, E432, E433, E434} -> (fun (V604, V605, V606, V607) -> fun (V608) -> begin (V613 = (('un--lcheck'(V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V609) -> fun (V610) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V609, V610)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V611) -> fun (V612) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V611, V612)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V5, V606))(V608))), case V613 of {'Idris.Prelude.Types.Left', E435} -> (fun (V614) -> {'Idris.Prelude.Types.Left', V614} end(E435)); {'Idris.Prelude.Types.Right', E436} -> (fun (V615) -> case V615 of {'Idris.Builtin.MkPair', E437, E438} -> (fun (V616, V617) -> case V617 of {'Idris.Builtin.MkPair', E439, E440} -> (fun (V618, V619) -> begin (V620 = (('un--lcheck'(V0, V1, V2, V3, V4, V5, V607))(V608))), case V620 of {'Idris.Prelude.Types.Left', E441} -> (fun (V621) -> {'Idris.Prelude.Types.Left', V621} end(E441)); {'Idris.Prelude.Types.Right', E442} -> (fun (V622) -> case V622 of {'Idris.Builtin.MkPair', E443, E444} -> (fun (V623, V624) -> case V624 of {'Idris.Builtin.MkPair', E445, E446} -> (fun (V625, V626) -> begin (V627 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V625))(V608))), case V627 of {'Idris.Prelude.Types.Left', E447} -> (fun (V628) -> {'Idris.Prelude.Types.Left', V628} end(E447)); {'Idris.Prelude.Types.Right', E448} -> (fun (V629) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V604, V605, V616, V623}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Idris.Core.TT.TDelayed', V604, V605, V629})), V626}}} end(E448)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E445, E446)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E443, E444)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E442)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E439, E440)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E437, E438)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E436)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E431, E432, E433, E434)); {'Idris.Core.TT.TForce', E449, E450, E451} -> (fun (V630, V631, V632) -> fun (V633) -> begin (V634 = (('un--lcheck'(V0, V1, V2, V3, V4, V5, V632))(V633))), case V634 of {'Idris.Prelude.Types.Left', E452} -> (fun (V635) -> {'Idris.Prelude.Types.Left', V635} end(E452)); {'Idris.Prelude.Types.Right', E453} -> (fun (V636) -> case V636 of {'Idris.Builtin.MkPair', E454, E455} -> (fun (V637, V638) -> case V638 of {'Idris.Builtin.MkPair', E456, E457} -> (fun (V639, V640) -> begin (V641 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V639))(V633))), case V641 of {'Idris.Prelude.Types.Left', E458} -> (fun (V642) -> {'Idris.Prelude.Types.Left', V642} end(E458)); {'Idris.Prelude.Types.Right', E459} -> (fun (V643) -> case V643 of {'Idris.Core.Value.NDelayed', E460, E461, E462} -> (fun (V644, V645, V646) -> begin (V648 = begin (V647 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V647} end), case V648 of {'Idris.Prelude.Types.Left', E463} -> (fun (V649) -> {'Idris.Prelude.Types.Left', V649} end(E463)); {'Idris.Prelude.Types.Right', E464} -> (fun (V650) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V630, V645, V637}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V650, V5, V646)), V640}}} end(E464)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E460, E461, E462)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V630, <<"Not a delayed type"/utf8>>}, V633)) end end(E459)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E456, E457)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E454, E455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E453)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E449, E450, E451)); {'Idris.Core.TT.PrimVal', E465, E466} -> (fun (V651, V652) -> fun (V653) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V651, V652}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V651)), {'Idris.Core.LinearCheck.Nil'}}}} end end(E465, E466)); {'Idris.Core.TT.Erased', E467, E468} -> (fun (V654, V655) -> fun (V656) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Erased', V654, V655}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V654)), {'Idris.Core.LinearCheck.Nil'}}}} end end(E467, E468)); {'Idris.Core.TT.TType', E469} -> (fun (V657) -> fun (V658) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TType', V657}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V657)), {'Idris.Core.LinearCheck.Nil'}}}} end end(E469)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getArgUsage'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V7) -> ('nested--8433-15075--in--un--getPUsage'(V5, V4, V3, V2, V1, V0, V4, V7)) end, V5, [], V6))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('nested--8433-15078--in--un--combine'(V5, V4, V3, V2, V1, V0, V10, V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Builtin':'un--snd'(V14)) end, V13))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--expandMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> fun (V15) -> case V11 of [] -> case V12 of {'Idris.Core.CaseTree.STerm', E5, E6} -> (fun (V16, V17) -> begin (V18 = (('nested--8449-17080--in--un--substMeta'(V0, V10, V13, V14, V16, V17, V9, V7, V6, V5, V4, V3, V2, V1, [], V0, ('Idris.Idris2.Core.TT':'un--embed'(V17)), V9, {'Idris.Core.TT.SubstEnv.Nil'}))(V15))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> (('un--lcheck'(V0, V1, V2, V3, V4, V5, V20))(V15)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed metavar solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V8))))))))}, V15)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed metavar solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V8))))))))}, V15)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed metavar solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_Def'(V8))))))))}, V21)) end end.
'un--doneScope'(V0) -> case V0 of {'Idris.Core.LinearCheck.Nil'} -> (fun () -> {'Idris.Core.LinearCheck.Nil'} end()); {'Idris.Core.LinearCheck.::', E0, E1} -> (fun (V1, V2) -> case V1 of 0 -> ('un--doneScope'(V2)); _ -> begin (V3 = (V1 - 1)), {'Idris.Core.LinearCheck.::', V3, ('un--doneScope'(V2))} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--discharge'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V5 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))(V10))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.Lam', V11, V12, V13, V14}, V7}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.Pi', V11, V12, V13, V14}, V17})), V9}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E6, E7, E8, E9} -> (fun (V18, V19, V20, V21) -> begin (V22 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))(V10))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.Let', V18, V19, V20, V21}, V7}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.Let', V18, V19, V20, V21}, V24})), V9}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V25, V26, V27, V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.Pi', V25, V26, V27, V28}, V7}, {'Idris.Builtin.MkPair', V6, V9}}} end(E12, E13, E14, E15)); {'Idris.Core.TT.PVar', E16, E17, E18, E19} -> (fun (V29, V30, V31, V32) -> begin (V33 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))(V10))), case V33 of {'Idris.Prelude.Types.Left', E20} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.PVar', V29, V30, V31, V32}, V7}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.PVTy', V29, V30, V32}, V35})), V9}}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17, E18, E19)); {'Idris.Core.TT.PLet', E22, E23, E24, E25} -> (fun (V36, V37, V38, V39) -> begin (V40 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))(V10))), case V40 of {'Idris.Prelude.Types.Left', E26} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.PLet', V36, V37, V38, V39}, V7}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.PLet', V36, V37, V38, V39}, V42})), V9}}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23, E24, E25)); {'Idris.Core.TT.PVTy', E28, E29, E30} -> (fun (V43, V44, V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V3, V4, {'Idris.Core.TT.PVTy', V43, V44, V45}, V7}, {'Idris.Builtin.MkPair', V6, V9}}} end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--count'(V0, V1) -> case V1 of {'Idris.Core.LinearCheck.Nil'} -> (fun () -> 0 end()); {'Idris.Core.LinearCheck.::', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, ('Idris.Idris2.Core.TT':'un--varIdx'(V2)))) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), ('un--count'(V0, V3)))); 0 -> ('un--count'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkEnvUsage'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V0 of [] -> fun (V9) -> case V6 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E0 | E1] -> (fun (V10, V11) -> case V6 of {'Idris.Core.Env.::', E2, E3} -> (fun (V12, V13) -> begin (V14 = ('un--localPrf'(V1))), begin (V15 = ('un--count'(('Idris.Idris2.Core.TT':'un--varIdx'(V14)), V7))), fun (V16) -> begin (V25 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V23, V24)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V12)))) of 1 -> (('un--updateHoleUsage'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, [V10 | V11])), V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V15, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))), V14, [], V8))(V16)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> begin (V36 = case case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V34, V35)) end end}}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V12)), V5)))) of 1 -> case V27 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V15, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)); 0 -> V15; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V37 = ('nested--15453-17629--in--un--checkUsageOK'(V10, V11, V13, V12, V1, V8, V7, V5, V4, V3, V2, V36, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V12)), V5)), V16))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> (('un--checkEnvUsage'(V11, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, [V10 | []])), V2, V3, V4, V5, V13, V7, V8))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--++'(V0, V1) -> case V0 of {'Idris.Core.LinearCheck.Nil'} -> (fun () -> V1 end()); {'Idris.Core.LinearCheck.::', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.LinearCheck.::', V2, ('un--++'(V3, V1))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
