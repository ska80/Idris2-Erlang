-module('Idris.Idris2.Core.Directory').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6613-572--in--un--getPkgDir'/3,
  'nested--7797-1631--in--un--findIpkgFile\x{27}'/3,
  'dn--un--show_Show_IdrSrcExt'/1,
  'dn--un--showPrec_Show_IdrSrcExt'/2,
  'dn--un--__Impl_Show_IdrSrcExt'/0,
  'dn--un--__Impl_Eq_IdrSrcExt'/0,
  'dn--un--==_Eq_IdrSrcExt'/2,
  'dn--un--/=_Eq_IdrSrcExt'/2,
  'un--toLocalFile'/1,
  'un--readDataFile'/3,
  'un--nsToSource'/4,
  'un--nsToPath'/4,
  'un--mkdirAll'/2,
  'un--mbPathToNS'/3,
  'un--makeBuildDirectory'/3,
  'un--listOfExtensions'/0,
  'un--getTTCFileName'/4,
  'un--getPkgDirs'/2,
  'un--getObjFileName'/4,
  'un--getExecFileName'/3,
  'un--firstAvailable'/3,
  'un--findLibraryFile'/3,
  'un--findIpkgFile'/1,
  'un--findDataFile'/3,
  'un--filenameFromModuleLocation'/1,
  'un--ensureDirectoryExists'/2,
  'un--ctxtPathToNS'/3,
  'un--corePathToNS'/3
]).
'nested--6613-572--in--un--getPkgDir'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, V2))), fun (V7) -> begin (V36 = begin (V35 = (('Idris.Idris2.Erlang.System.Directory':'un--dirExists'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V6))(V7))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E2} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V38) -> case V38 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V6}}; 0 -> (('nested--6613-572--in--un--getPkgDir'(V0, V5, V2))(V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7797-1631--in--un--findIpkgFile\x{27}'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Erlang.System.Directory':'un--listDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0))(V2))), case V30 of {'Idris.Prelude.Types.Right', E0} -> (fun (V31) -> case ('Idris.Idris2.Data.List':'un--find'(fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V35, V36)) end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--extension'(V32)), {'Idris.Prelude.Types.Just', <<"ipkg"/utf8>>})) end, V31)) of {'Idris.Prelude.Types.Just', E1} -> (fun (V37) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', V37, V1}}} end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case ('Idris.Idris2.Libraries.Utils.Path':'un--splitParent'(V0)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V39, V40) -> ('nested--7797-1631--in--un--findIpkgFile\x{27}'(V39, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V40, V1)), V2)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V41) -> {'Idris.Prelude.Types.Nothing'} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--show_Show_IdrSrcExt'(V0) -> case V0 of 0 -> <<"idr"/utf8>>; 1 -> <<"lidr"/utf8>>; 2 -> <<"yaff"/utf8>>; 3 -> <<"org"/utf8>>; 4 -> <<"md"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_IdrSrcExt'(V0, V1) -> ('dn--un--show_Show_IdrSrcExt'(V1)).
'dn--un--__Impl_Show_IdrSrcExt'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_IdrSrcExt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_IdrSrcExt'(V1, V2)) end end}.
'dn--un--__Impl_Eq_IdrSrcExt'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_IdrSrcExt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_IdrSrcExt'(V2, V3)) end end}.
'dn--un--==_Eq_IdrSrcExt'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; 4 -> case V1 of 4 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_IdrSrcExt'(V0, V1) -> case ('dn--un--==_Eq_IdrSrcExt'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toLocalFile'(V0) -> case V0 of {'Idris.Core.Directory.LocalFile', E0} -> (fun (V1) -> {'Idris.Prelude.Types.Just', V1} end(E0)); {'Idris.Core.Directory.EscriptFile', E1} -> (fun (V2) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--readDataFile'(V0, V1, V2) -> begin (V3 = ('un--findDataFile'(V0, V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V5))(V2))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Right', E4} -> (fun (V37) -> {'Idris.Prelude.Types.Right', V37} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V5, V38}, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nsToSource'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V2))), begin (V19 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V7 end, fun () -> fun (V8) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V8, V7)) end end, case V6 of {'Idris.Core.Options.MkDirs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V21 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V19, ('dn--un--show_Show_IdrSrcExt'(V20)))) end, ('un--listOfExtensions'())))), begin (V22 = ('un--firstAvailable'(V0, V21, V3))), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> case V24 of {'Idris.Prelude.Types.Just', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.ModuleNotFound', V1, V2}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nsToPath'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('un--getPkgDirs'(V0, V3))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V2))), begin (V32 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V11, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V10, <<"ttc"/utf8>>)))) end, [('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V6 of {'Idris.Core.Options.MkDirs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"ttc"/utf8>>)) | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, case V6 of {'Idris.Core.Options.MkDirs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V28 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]))), begin (V33 = ('un--firstAvailable'(V0, V32, V3))), case V33 of {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E26} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Directory.LocalFile', V36}}} end(E26)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V37 = {'Idris.Prelude.Types.Left', {'Idris.Core.Core.ModuleNotFound', V1, V2}}), begin (V39 = begin (V38 = ('Idris.Idris2.Libraries.Utils.Escript':'un--getEscriptPath'(V3))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E27} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E29} -> (fun (V42) -> begin (V44 = begin (V43 = ('Idris.Idris2.Libraries.Utils.Escript':'un--openArchive'(V42, V3))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E30} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V46) -> case V46 of {'Idris.Prelude.Types.Just', E32} -> (fun (V47) -> begin (V49 = begin (V48 = ('Idris.Idris2.Libraries.Utils.Escript':'un--listFiles'(V47, V3))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E33} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V51) -> case V51 of {'Idris.Prelude.Types.Just', E35} -> (fun (V52) -> begin (V54 = begin (V53 = ('Idris.Idris2.Libraries.Utils.Escript':'un--closeArchive'(V47, V3))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E36} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V3))), case V57 of {'Idris.Prelude.Types.Left', E38} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V59) -> begin (V87 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V60) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(<<"idris2/priv/libs"/utf8>>, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V60, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V10, <<"ttc"/utf8>>)))))) end, case V59 of {'Idris.Core.Options.MkSessionOpts', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V67 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), case ('Idris.Idris2.Data.List':'un--find'(fun (V88) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V91, V92)) end end}, V88, V52)) end, V87)) of {'Idris.Prelude.Types.Just', E66} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Directory.EscriptFile', V93}}} end(E66)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V37} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V37} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V37} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V37} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mkdirAll'(V0, V1) -> case ('Idris.Idris2.Libraries.Utils.Path':'dn--un--==_Eq_Path'(('Idris.Idris2.Libraries.Utils.Path':'un--parse'(V0)), ('Idris.Idris2.Libraries.Utils.Path':'un--emptyPath'()))) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V29 = (('Idris.Idris2.Erlang.System.Directory':'un--dirExists'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V31 = case ('Idris.Idris2.Libraries.Utils.Path':'un--parent'(V0)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V30) -> ('un--mkdirAll'(V30, V1)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V31 of {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of 0 -> (('Idris.Idris2.Erlang.System.Directory':'un--createDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V0))(V1)); _ -> V31 end end(E1)); _ -> V31 end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mbPathToNS'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<""/utf8>> end, V1))), begin (V4 = case ('Idris.Idris2.Libraries.Utils.Path':'un--isAbsolute'(V2)) of 1 -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V0, V3)); 0 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V7, V8)) end end end end, fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'un--unsafeFoldModuleIdent'(('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Libraries.Utils.Path':'un--splitPath'(('Idris.Idris2.Libraries.Utils.Path':'un--dropExtension'(V9)))))))) end, ('Idris.Idris2.Libraries.Utils.Path':'un--dropBase'(V4, V2)))) end end.
'un--makeBuildDirectory'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V16 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Idris.Core.Options.MkDirs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"ttc"/utf8>>))), begin (V17 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V1))))))))), begin (V18 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V17))), begin (V20 = begin (V19 = ('un--mkdirAll'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V16, V18)), V2))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> case V22 of {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Right', 0} end(E14)); {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Idris.Core.Options.MkDirs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V27 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18)), V24}, V2)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--listOfExtensions'() -> [0 | [1 | [2 | [3 | [4 | []]]]]].
'un--getTTCFileName'(V0, V1, V2, V3) -> begin (V4 = ('un--ctxtPathToNS'(V0, V1, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V6)), V2))), begin (V8 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V21 = case V10 of {'Idris.Core.Options.MkDirs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V21, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(<<"ttc"/utf8>>, V7))))} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getPkgDirs'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V45 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('nested--6613-572--in--un--getPkgDir'(V0, case V4 of {'Idris.Core.Options.MkDirs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8)) end, case V7 of {'Idris.Core.Options.MkSessionOpts', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V25 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V1))), case V45 of {'Idris.Prelude.Types.Left', E40} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V47) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V48) -> V48 end, V47))} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getObjFileName'(V0, V1, V2, V3) -> begin (V4 = ('un--ctxtPathToNS'(V0, V1, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V6)), V2))), {'Idris.Prelude.Types.Right', V7} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getExecFileName'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Idris.Core.Options.MkDirs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--firstAvailable'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import.file"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Attempting to read "/utf8>>, V3)) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V36 = begin (V35 = (('Idris.Idris2.Erlang.System.File':'un--openFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V3, 0))(V2))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E4} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Right', E6} -> (fun (V39) -> begin (V68 = begin (V67 = (('Idris.Idris2.Erlang.System.File':'un--closeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> V46 end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), begin (V54 = (V51(V52))), (V53(V54)) end end end end end end end}, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), ((V58(V60))(V59)) end end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> begin (V64 = (V62(V63))), (V64(V63)) end end end end}, fun (V65) -> fun (V66) -> V66 end end}, V39))(V2))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E7} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V3}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Prelude.Types.Left', E9} -> (fun (V71) -> ('un--firstAvailable'(V0, V4, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findLibraryFile'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('un--getPkgDirs'(V0, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V21 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V9, V1)) end, case V5 of {'Idris.Core.Options.MkDirs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V18 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V20, <<"lib"/utf8>>)) end, V8))))), begin (V22 = ('un--firstAvailable'(V0, V21, V2))), case V22 of {'Idris.Prelude.Types.Left', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V24) -> case V24 of {'Idris.Prelude.Types.Just', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E16)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t find library "/utf8>>, V1))}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findIpkgFile'(V0) -> begin (V28 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), case V28 of {'Idris.Prelude.Types.Just', E0} -> (fun (V29) -> begin (V30 = ('nested--7797-1631--in--un--findIpkgFile\x{27}'(V29, <<""/utf8>>, V0))), V30 end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findDataFile'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V17 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V6, V1)) end, case V5 of {'Idris.Core.Options.MkDirs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V18 = ('un--firstAvailable'(V0, V17, V2))), case V18 of {'Idris.Prelude.Types.Left', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V20) -> case V20 of {'Idris.Prelude.Types.Just', E14} -> (fun (V21) -> {'Idris.Prelude.Types.Right', V21} end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t find data file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in any of "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V23, V24)) end end}, V17))))))))}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--filenameFromModuleLocation'(V0) -> case V0 of {'Idris.Core.Directory.LocalFile', E0} -> (fun (V1) -> V1 end(E0)); {'Idris.Core.Directory.EscriptFile', E1} -> (fun (V2) -> V2 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ensureDirectoryExists'(V0, V1) -> begin (V3 = begin (V2 = ('un--mkdirAll'(V0, V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', 0} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V7}, V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--ctxtPathToNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V47 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V108 = case V6 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> case V62 of {'Idris.Core.Options.MkOptions', E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> case V88 of {'Idris.Core.Options.MkDirs', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V99 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--corePathToNS'(V57, V108, V1))(V2)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--corePathToNS'(V0, V1, V2) -> begin (V3 = {'Idris.Core.Core.UserError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Source file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is not in the source directory "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V0, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<""/utf8>> end, V1))))))))))))}), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V4) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V3, V4)) end end, fun () -> fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V5} end end end, ('un--mbPathToNS'(V0, V1, V2)))) end.
