-module('Idris.Idris2.Libraries.Utils.Escript').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in openArchive-1648'/6,
  'case--openArchive-1587'/4,
  'nested--4055-1842--in--un--zipFile'/2,
  'nested--4055-1843--in--un--row'/1,
  'un--readFile'/3,
  'un--openArchive'/2,
  'un--listFiles'/2,
  'un--getEscriptPath'/1,
  'un--closeArchive'/2
]).
'case--case block in openArchive-1648'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V6) -> case V6 of {E1, E2} -> (fun (V7, V8) -> begin (V9 = ('erlang':'apply'('zip', 'zip_open', [V8 | [['memory' | []] | []]]))), case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Idris.Erlang.Types.ETErlTerm'}, fun (V10) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V11) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V11)) end, V10)) end, V9)) of {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Just', V12} end(E3)); {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Nothing'} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Nothing'} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--openArchive-1587'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> begin (V5 = ('erlang':'apply'('proplists', 'lookup', ['archive' | [V4 | []]]))), ('case--case block in openArchive-1648'(V0, V1, V4, V5, ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Idris.Erlang.Types.ETErlTerm'}, fun (V6) -> ('Idris.Idris2.Erlang.Decode':'un--tuple2'(fun (V7) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V7)) end, fun (V8) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V8)) end, V6)) end, V5)), V3)) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4055-1842--in--un--zipFile'(V0, V1) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V2) -> case V2 of {E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> case V4 of E6 -> (fun (V9) -> V9 end((fun (V10) -> ('unicode':'characters_to_binary'(V10)) end(E6)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('Idris.Idris2.Erlang.Decode':'un--tuple6'(fun (V12) -> ('Idris.Idris2.Erlang.Decode':'un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'zip_file', V12)) end, fun (V13) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V13)) end, fun (V14) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V14)) end, fun (V15) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V15)) end, fun (V16) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V16)) end, fun (V17) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V17)) end, V11)) end, V1)).
'nested--4055-1843--in--un--row'(V0) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<|>_Alternative_ErlDecoder'(fun (V1) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V2) -> {'Idris.Prelude.Types.Just', V2} end, fun (V3) -> ('nested--4055-1842--in--un--zipFile'(V0, V3)) end, V1)) end, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'(V10, V11)) end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Erlang.Decode':'dn--un--<*>_Applicative_ErlDecoder'(V14, V15, V16)) end end end end end}, fun (V17) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V17)) end, fun (V18) -> ('Idris.Idris2.Erlang.Decode':'dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Nothing'}, V18)) end)) end)).
'un--readFile'(V0, V1, V2) -> begin (V3 = ('erlang':'apply'('zip', 'zip_get', [('unicode':'characters_to_list'(V1)) | [V0 | []]]))), case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Idris.Erlang.Types.ETErlTerm'}, fun (V4) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V5) -> ('Idris.Idris2.Erlang.Decode':'un--tuple2'(fun (V6) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V6)) end, fun (V7) -> ('Idris.Idris2.Erlang.Decode':'un--string'(V7)) end, V5)) end, V4)) end, V3)) of {'Idris.Prelude.Types.Right', E0} -> (fun (V8) -> case V8 of {E1, E2} -> (fun (V9, V10) -> {'Idris.Prelude.Types.Just', V10} end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Nothing'} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--openArchive'(V0, V1) -> begin (V2 = ('erlang':'apply'('escript', 'extract', [('unicode':'characters_to_list'(V0)) | [[] | []]]))), ('case--openArchive-1587'(V0, V2, ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Idris.Erlang.Types.ETErlTerm'}, fun (V3) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V4) -> ('Idris.Idris2.Erlang.Decode':'un--any'(V4)) end, V3)) end, V2)), V1)) end.
'un--listFiles'(V0, V1) -> begin (V2 = ('erlang':'apply'('zip', 'zip_list_dir', [V0 | []]))), case ('Idris.Idris2.Erlang.Decode':'un--erlDecode'({'Idris.Erlang.Types.ETErlTerm'}, fun (V3) -> ('Idris.Idris2.Erlang.Decode':'un--okTuple'(fun (V4) -> ('Idris.Idris2.Erlang.Decode':'un--list'(('nested--4055-1843--in--un--row'(V0)), V4)) end, V3)) end, V2)) of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V6) -> V6 end, V5))} end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getEscriptPath'(V0) -> begin (V29 = (('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, fun (V28) -> ('erlang':'apply'('escript', 'script_name', [])) end))(V0))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> ('Idris.Idris2.Erlang.Decode':'un--erlDecodeMay'({'Idris.Erlang.Types.ETErlTerm'}, fun (V31) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V32) -> case V32 of E1 -> (fun (V33) -> V33 end((fun (V34) -> ('unicode':'characters_to_binary'(V34)) end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V35) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V35)) end, V31)) end, V30)) end(E0)); {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Nothing'} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--closeArchive'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> 0 end, fun (V3) -> ('erlang':'apply'('zip', 'zip_close', [V0 | []])) end, V1)).
