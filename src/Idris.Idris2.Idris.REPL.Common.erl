-module('Idris.Idris2.Idris.REPL.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in docsOrSignature-4596'/13,
  'case--case block in emitProblem-3732'/14,
  'case--printWithStatus-3492'/7,
  'nested--12781-4449--in--un--typeSummary'/7,
  'nested--11913-3627--in--un--addOne'/9,
  'un--updateErrorLine'/3,
  'un--resetContext'/6,
  'un--printWithStatus'/5,
  'un--printResult'/3,
  'un--printError'/3,
  'un--printDocResult'/3,
  'un--prettyTerm'/1,
  'un--iputStrLn'/4,
  'un--getFCLine'/1,
  'un--equivTypes'/4,
  'un--emitWarningsAndErrors'/5,
  'un--emitWarnings'/4,
  'un--emitWarning'/5,
  'un--emitProblem'/9,
  'un--emitError'/5,
  'un--docsOrSignature'/6,
  'un--doPrint'/2
]).
'case--case block in docsOrSignature-4596'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [E0 | E1] -> (fun (V13, V14) -> ('Idris.Idris2.Idris.Doc.String':'un--getDocsForName'(V4, V3, V2, V1, V0, {'Idris.Idris.Doc.String.MkConfig', 1, 0, 1}, V12)) end(E0, E1)); [] -> ('nested--12781-4449--in--un--typeSummary'(V0, V1, V2, V3, V4, V6, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in emitProblem-3732'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('un--iputStrLn'(V6, V5, V12, V14)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> fun (V16) -> case V15 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V19, V20) -> begin (V28 = case V17 of {'Idris.Core.FC.PhysicalIdrSrc', E5} -> (fun (V21) -> begin (V22 = {'Idris.Core.FC.MkFC', {'Idris.Core.FC.PhysicalIdrSrc', V21}, V19, V20}), ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V23) -> ('Idris.Idris2.Core.Directory':'un--nsToSource'(V6, V22, V21, V23)) end, fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', <<"(File-Not-Found)"/utf8>>} end end, V16)) end end(E5)); {'Idris.Core.FC.PhysicalPkgSrc', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Right', V26} end(E6)); {'Idris.Core.FC.Virtual', E7} -> (fun (V27) -> case V27 of 0 -> {'Idris.Prelude.Types.Right', <<"(Interactive)"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Idris.Pretty.Render':'un--renderWithoutColor'(V5, V12, V16))), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V6, fun (V34) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V34)) end, V10, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"warning"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.SExpList', [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V30)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V35) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V35)) end, fun (V36) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V36)) end}, ('nested--11913-3627--in--un--addOne'(V9, V0, V1, V2, V3, V4, V5, V6, V19)))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V37) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V37)) end, fun (V38) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V38)) end}, ('nested--11913-3627--in--un--addOne'(V9, V0, V1, V2, V3, V4, V5, V6, V20)))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V33)) | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]]]} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V11)) | []]]]}))(V16)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--printWithStatus-3492'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Idris.REPL.Opts.REPL', E0} -> (fun (V7) -> case ('un--doPrint'(V0, V7)) of 1 -> begin (V8 = ((V2(V1))(V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> begin (V38 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V10))(V6))), {'Idris.Prelude.Types.Right', V38} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Idris.REPL.Opts.IDEMode', E3, E4, E5} -> (fun (V39, V40, V41) -> {'Idris.Prelude.Types.Right', 0} end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12781-4449--in--un--typeSummary'(V0, V1, V2, V3, V4, V5, V6) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V0, case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V7 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V64 = begin (V61 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V5, {'Idris.Core.Env.Nil'}, case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V43 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V61 of {'Idris.Prelude.Types.Left', E53} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V63) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V63, V6)) end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V64 of {'Idris.Prelude.Types.Left', E55} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V66) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V0)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<":"/utf8>>)), ('un--prettyTerm'(V66))))))} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V67) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V67)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<""/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<""/utf8>>)); 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11913-3627--in--un--addOne'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', ((V9 + 1) rem 9223372036854775808), ((V10 + 1) rem 9223372036854775808)} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateErrorLine'(V0, V1, V2) -> case V1 of [] -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V23 = ('erlang':'put'(V0, case V6 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Idris.REPL.Opts.MkREPLOpts', V7, V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Nothing'}, V14, V15, V16, V17, V18, V19, V20, V21, V22} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V23} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E18 | E19] -> (fun (V24, V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E20} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V29) -> begin (V47 = ('erlang':'put'(V0, case V29 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Idris.REPL.Opts.MkREPLOpts', V30, V31, V32, V33, V34, V35, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.Core':'un--getErrorLoc'(V24)), fun (V46) -> ('un--getFCLine'(V46)) end)), V37, V38, V39, V40, V41, V42, V43, V44, V45} end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resetContext'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V74 = begin (V10 = ('Idris.Idris2.Core.Context':'un--initDefs'(V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V73 = ('erlang':'put'(V0, case V12 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkDefs', V13, V14, V15, V16, ('Idris.Idris2.Core.Options':'un--clearNames'(case V9 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V47 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V74 of {'Idris.Prelude.Types.Left', E64} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0, V5))), case V77 of {'Idris.Prelude.Types.Left', E66} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V79) -> begin (V81 = begin (V80 = ('erlang':'put'(V1, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), {'Idris.Prelude.Types.Right', V80} end), case V81 of {'Idris.Prelude.Types.Left', E68} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V83) -> begin (V85 = begin (V84 = ('erlang':'put'(V2, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E70} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V87) -> begin (V88 = ('erlang':'put'(V3, ('Idris.Idris2.Core.Metadata':'un--initMetadata'(V4))))), {'Idris.Prelude.Types.Right', V88} end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--printWithStatus'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('case--printWithStatus-3492'(V3, V2, V1, V0, V8, case V8 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--printResult'(V0, V1, V2) -> ('un--printWithStatus'(V0, fun (V3) -> fun (V4) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V0, V3, V4)) end end, V1, 0, V2)).
'un--printError'(V0, V1, V2) -> ('un--printWithStatus'(V0, fun (V3) -> fun (V4) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V0, V3, V4)) end end, V1, 1, V2)).
'un--printDocResult'(V0, V1, V2) -> ('un--printWithStatus'(V0, fun (V3) -> fun (V4) -> ('Idris.Idris2.Idris.Pretty.Render':'un--render'(V0, fun (V5) -> ('Idris.Idris2.Idris.Doc.String':'un--styleAnn'(V5)) end, V3, V4)) end end, V1, 0, V2)).
'un--prettyTerm'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--reAnnotate'(fun (V1) -> {'Idris.Idris.Doc.String.Syntax', V1} end, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V0)))).
'un--iputStrLn'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V15 of {'Idris.Idris.REPL.Opts.REPL', E18} -> (fun (V24) -> case V24 of 2 -> begin (V25 = ('Idris.Idris2.Idris.Pretty':'un--render'(V1, V2, V3))), case V25 of {'Idris.Prelude.Types.Left', E19} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V27) -> begin (V55 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> V34 end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), begin (V42 = (V39(V40))), (V41(V42)) end end end end end end end}, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), ((V46(V48))(V47)) end end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V50(V51))), (V52(V51)) end end end end}, fun (V53) -> fun (V54) -> V54 end end}, V27))(V3))), {'Idris.Prelude.Types.Right', V55} end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E18)); {'Idris.Idris.REPL.Opts.IDEMode', E21, E22, E23} -> (fun (V56, V57, V58) -> begin (V59 = ('Idris.Idris2.Idris.Pretty.Render':'un--renderWithoutColor'(V1, V2, V3))), case V59 of {'Idris.Prelude.Types.Left', E24} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V61) -> (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, fun (V62) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V62)) end, V58, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V61)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V56)) | []]]]}))(V3)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFCLine'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V1) -> ('Idris.Idris2.Core.FC':'un--startLine'(V1)) end, ('Idris.Idris2.Core.FC':'un--isNonEmptyFC'(V0)))).
'un--equivTypes'(V0, V1, V2, V3) -> case ('Idris.Idris2.Core.TT':'un--isErased'(V1)) of 0 -> begin (V4 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"typesearch.equiv"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Candidate: "/utf8>> end, V1, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V17 = begin (V11 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V10, {'Idris.Core.Env.Nil'}, V1, V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V10, {'Idris.Core.Env.Nil'}, V2, V3))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V13, V16))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> case V19 of 1 -> begin (V20 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V3))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> begin (V51 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V23) -> begin (V42 = (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V24, V25, V26, V27, V28, V29, V30, V31, V32)) end end end end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V33, V34, V35, V36, V37, V38, V39, V40, V41)) end end end end end end end end end}, [], V0, V22, ('Idris.Idris2.Core.Unify':'un--inTerm'()), {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Env.Nil'}))(V1))(V2))(V23))), case V42 of {'Idris.Prelude.Types.Left', E12} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V44) -> case V44 of {'Idris.Core.Unify.MkUnifyResult', E14, E15, E16, E17} -> (fun (V45, V46, V47, V48) -> case V45 of [] -> case V47 of [] -> case V48 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> {'Idris.Prelude.Types.Right', 0} end; _ -> {'Idris.Prelude.Types.Right', 0} end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E14, E15, E16, E17)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V49) -> fun (V50) -> {'Idris.Prelude.Types.Right', 0} end end, V3))), case V51 of {'Idris.Prelude.Types.Left', E18} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V53) -> begin (V54 = case V53 of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"typesearch.equiv"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Accepted: "/utf8>> end, V1, V3)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V54 of {'Idris.Prelude.Types.Left', E20} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V56) -> {'Idris.Prelude.Types.Right', V53} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--emitWarningsAndErrors'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--emitWarnings'(V0, V1, V2, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V8) -> fun (V9) -> ('un--emitError'(V0, V1, V2, V8, V9)) end end, V3, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', V7} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--emitWarnings'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = ('Idris.Idris2.Prelude.Types.List':'un--reverse'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V37 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V39 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V3))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case case V41 of {'Idris.Core.Options.MkSessionOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V62 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V73 = ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V70, V71)) end end end end, fun (V72) -> {'Idris.Core.Core.WarningAsError', V72} end, V38))), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V74) -> case V74 of {'Idris.Prelude.Types.Left', E34} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V76) -> {'Idris.Prelude.Types.Right', V73} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V77) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V78) -> fun (V79) -> ('un--emitError'(V0, V1, V2, V78, V79)) end end, V73, V77)) end, V3)) end; 0 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V80) -> case V80 of {'Idris.Prelude.Types.Left', E36} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V82) -> {'Idris.Prelude.Types.Right', []} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V83) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V84) -> fun (V85) -> ('un--emitWarning'(V0, V1, V2, V84, V85)) end end, V38, V83)) end, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--emitWarning'(V0, V1, V2, V3, V4) -> ('un--emitProblem'(V0, V1, V2, V3, fun (V5) -> fun (V6) -> ('Idris.Idris2.Idris.Error':'un--displayWarning'(V0, V2, V1, V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Idris.Error':'un--pwarning'(V0, V2, V1, V7, V8)) end end, fun (V9) -> ('Idris.Idris2.Core.Core':'un--getWarningLoc'(V9)) end, 2, V4)).
'un--emitProblem'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> case V12 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V20 of {'Idris.Idris.REPL.Opts.REPL', E18} -> (fun (V29) -> begin (V30 = ((V4(V3))(V8))), case V30 of {'Idris.Prelude.Types.Left', E19} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V32) -> ('un--printWithStatus'(V1, fun (V33) -> fun (V34) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V1, V33, V34)) end end, V32, V7, V8)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); {'Idris.Idris.REPL.Opts.IDEMode', E21, E22, E23} -> (fun (V35, V36, V37) -> begin (V38 = ((V5(V3))(V8))), case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V40) -> (('case--case block in emitProblem-3732'(V7, V6, V5, V4, V2, V1, V0, V12, V36, V3, V37, V35, V40, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V41) -> ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V41)) end, (V6(V3))))))(V8)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--emitError'(V0, V1, V2, V3, V4) -> ('un--emitProblem'(V0, V1, V2, V3, fun (V5) -> fun (V6) -> ('Idris.Idris2.Idris.Error':'un--display'(V0, V2, V1, V5, V6)) end end, fun (V7) -> ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V1, V7)) end, fun (V8) -> ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V8)) end, 1, V4)).
'un--docsOrSignature'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V44 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V4, case V13 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V44 of {'Idris.Prelude.Types.Left', E34} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V46) -> case V46 of [E36 | E37] -> (fun (V47, V48) -> begin (V49 = [V47 | V48]), begin (V50 = [V47 | V48]), ('case--case block in docsOrSignature-4596'(V4, V3, V2, V1, V0, V9, V13, V48, V47, V49, V50, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V62)) end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V66, V67, V68, V69)) end end end end end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V71)) end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V74, V75, V76)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V77, V78)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V79) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V79, case V9 of {'Idris.Idris.Syntax.MkSyntax', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V87 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V91) -> ('Idris.Idris2.Builtin':'un--fst'(V91)) end, V50)))), V5)) end end end(E36, E37)); _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V3, V4, V5)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--doPrint'(V0, V1) -> case V0 of 0 -> case V1 of 2 -> 1; 1 -> 1; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case V1 of 2 -> 1; 1 -> 1; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> case V1 of 2 -> 1; 1 -> 0; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
