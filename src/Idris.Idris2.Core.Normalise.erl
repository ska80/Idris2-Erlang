-module('Idris.Idris2.Core.Normalise').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in normalisePrims-3311'/15,
  'case--case block in normalisePrims-3276'/12,
  'nested--8538-2894--in--un--repSub'/10,
  'nested--8538-2893--in--un--repArg'/10,
  'nested--8413-2781--in--un--dumpEnv'/8,
  'nested--7810-2212--in--un--act'/6,
  'un--tryNormaliseSizeLimit'/7,
  'un--replace\x{27}'/9,
  'un--replace'/8,
  'un--normaliseSizeLimit'/7,
  'un--normaliseScope'/6,
  'un--normalisePrims'/11,
  'un--normalisePis'/6,
  'un--normaliseOpts'/7,
  'un--normaliseLHS'/6,
  'un--normaliseHoles'/6,
  'un--normaliseArgHoles'/6,
  'un--normaliseAll'/6,
  'un--normalise'/6,
  'un--logTermNF\x{27}'/8,
  'un--logTermNF'/8,
  'un--logNF'/8,
  'un--logGlueNF'/8,
  'un--logGlue'/8,
  'un--logEnv'/7,
  'un--glueClosure'/5,
  'un--glueBack'/5,
  'un--getValArity'/4,
  'un--getArity'/6,
  'un--etaContract'/4
]).
'case--case block in case block in normalisePrims-3311'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> case (V8(V15)) of 1 -> begin (V17 = begin (V16 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E1} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V19) -> begin (V20 = case V6 of 1 -> ('un--normaliseAll'(V9, V0, V19, V1, V2, V14)); 0 -> ('un--normalise'(V9, V0, V19, V1, V2, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V20 of {'Idris.Prelude.Types.Left', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V22}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E0)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end.
'case--case block in normalisePrims-3276'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [E0 | E1] -> (fun (V12, V13) -> fun (V14) -> ('case--case block in case block in normalisePrims-3311'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V12, (V7(V12)), V14)) end end(E0, E1)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'nested--8538-2894--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V10, V11, V12, V13) -> begin (V19 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V14) -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V14))(V15))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> ('nested--8538-2894--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V18, V15)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12, V9))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = {'Idris.Core.Name.MN', <<"tmp"/utf8>>, V6}), begin (V26 = begin (V23 = (((V13(V5))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V22}))))(V9))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> ('un--replace\x{27}'(V7, V0, ((V6 + 1) rem 9223372036854775808), V5, V4, V3, V2, V25, V9)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V10, V11, V21, ('Idris.Idris2.Core.TT':'un--refsToLocals'({'Idris.Core.TT.Bounds.Add', V11, V22, {'Idris.Core.TT.Bounds.None'}}, V28))}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); {'Idris.Core.Value.NApp', E14, E15, E16} -> (fun (V29, V30, V31) -> case V31 of [] -> begin (V32 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V34, V4, {'Idris.Core.Value.NApp', V29, V30, []}, V9)) end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V39 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V37) -> fun (V38) -> ('nested--8538-2893--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V37, V38)) end end, V35, V36)) end end, V31, [], V9))), case V39 of {'Idris.Prelude.Types.Left', E17} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V41) -> begin (V42 = ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, {'Idris.Core.Value.NApp', V29, V30, []}, V9))), case V42 of {'Idris.Prelude.Types.Left', E19} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V44) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V44, V41))} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16)); {'Idris.Core.Value.NDCon', E23, E24, E25, E26, E27} -> (fun (V45, V46, V47, V48, V49) -> begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V52) -> fun (V53) -> ('nested--8538-2893--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V52, V53)) end end, V50, V51)) end end, V49, [], V9))), case V54 of {'Idris.Prelude.Types.Left', E28} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V59, V4, {'Idris.Core.Value.NDCon', V45, V46, V47, V48, []}, V9))), case V60 of {'Idris.Prelude.Types.Left', E32} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V62) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V62, V56))} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24, E25, E26, E27)); {'Idris.Core.Value.NTCon', E34, E35, E36, E37, E38} -> (fun (V63, V64, V65, V66, V67) -> begin (V72 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V70) -> fun (V71) -> ('nested--8538-2893--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V70, V71)) end end, V68, V69)) end end, V67, [], V9))), case V72 of {'Idris.Prelude.Types.Left', E39} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V75 of {'Idris.Prelude.Types.Left', E41} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V77) -> begin (V78 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V77, V4, {'Idris.Core.Value.NTCon', V63, V64, V65, V66, []}, V9))), case V78 of {'Idris.Prelude.Types.Left', E43} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V80) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V80, V74))} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35, E36, E37, E38)); {'Idris.Core.Value.NAs', E45, E46, E47, E48} -> (fun (V81, V82, V83, V84) -> begin (V85 = ('nested--8538-2894--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V83, V9))), case V85 of {'Idris.Prelude.Types.Left', E49} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V87) -> begin (V88 = ('nested--8538-2894--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V84, V9))), case V88 of {'Idris.Prelude.Types.Left', E51} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V81, V82, V87, V90}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45, E46, E47, E48)); {'Idris.Core.Value.NDelayed', E53, E54, E55} -> (fun (V91, V92, V93) -> begin (V94 = ('nested--8538-2894--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V93, V9))), case V94 of {'Idris.Prelude.Types.Left', E56} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V96) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V91, V92, V96}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53, E54, E55)); {'Idris.Core.Value.NDelay', E58, E59, E60, E61} -> (fun (V97, V98, V99, V100) -> begin (V104 = begin (V101 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V99))(V9))), case V101 of {'Idris.Prelude.Types.Left', E62} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V103) -> ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V103, V9)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V104 of {'Idris.Prelude.Types.Left', E64} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V106) -> begin (V110 = begin (V107 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V100))(V9))), case V107 of {'Idris.Prelude.Types.Left', E66} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V109) -> ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V109, V9)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V110 of {'Idris.Prelude.Types.Left', E68} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V112) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V97, V98, V106, V112}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58, E59, E60, E61)); {'Idris.Core.Value.NForce', E70, E71, E72, E73} -> (fun (V113, V114, V115, V116) -> begin (V121 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V119) -> fun (V120) -> ('nested--8538-2893--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V119, V120)) end end, V117, V118)) end end, V116, [], V9))), case V121 of {'Idris.Prelude.Types.Left', E74} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V123) -> begin (V124 = ('nested--8538-2894--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V115, V9))), case V124 of {'Idris.Prelude.Types.Left', E76} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V126) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.TForce', V113, V114, V126}, V123))} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71, E72, E73)); _ -> begin (V127 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V127 of {'Idris.Prelude.Types.Left', E0} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V129) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V129, V4, V8, V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--8538-2893--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V7, V0, V5, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V12, V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8413-2781--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> fun (V8) -> case V7 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E0 | E1] -> (fun (V9, V10) -> fun (V11) -> case V7 of {'Idris.Core.Env.::', E2, E3} -> (fun (V12, V13) -> case V12 of {'Idris.Core.TT.Let', E6, E7, E8, E9} -> (fun (V14, V15, V16, V17) -> begin (V18 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": let "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))))) end, V13, V16, V11))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))))))))) end, V13, V17, V11))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> (('nested--8413-2781--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V10, V13))(V11)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); _ -> begin (V27 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V12)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V10, V24)) end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V10, V25, V26)) end end}, ('Idris.Idris2.Core.TT':'un--piInfo'(V12)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))))))))))))) end, V13, ('Idris.Idris2.Core.TT':'un--binderType'(V12)), V11))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> (('nested--8413-2781--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V10, V13))(V11)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7810-2212--in--un--act'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V3, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Considering"/utf8>> end, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V4 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Lam', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> case V12 of {'Idris.Core.TT.App', E10, E11, E12} -> (fun (V17, V18, V19) -> case V19 of {'Idris.Core.TT.Local', E13, E14, E15} -> (fun (V20, V21, V22) -> case V22 of 0 -> begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([V10 | V3], V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Shrinking candidate"/utf8>> end, V18, V5))), case V23 of {'Idris.Prelude.Types.Left', E16} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V18, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))), begin (V27 = {'Idris.Core.TT.Bind', V9, V10, {'Idris.Core.TT.Lam', V13, V14, V15, V16}, {'Idris.Core.TT.App', V17, V18, {'Idris.Core.TT.Local', V20, V21, 0}}}), case V26 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V28 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Failure!"/utf8>> end, V5))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Right', V27} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E20} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V3, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Success!"/utf8>> end, V31, V5))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', V31} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V4} end end(E13, E14, E15)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E10, E11, E12)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tryNormaliseSizeLimit'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quoteOpts_Quote_NF'(V0, V1, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 0, 0, {'Idris.Prelude.Types.Just', V3}}, V2, V4, V9, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replace\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_NF'(V0, V1, V3, V4, V5, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of 1 -> {'Idris.Prelude.Types.Right', V6}; 0 -> ('nested--8538-2894--in--un--repSub'(V1, V7, V6, V5, V4, V3, V2, V0, V7, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replace'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--replace\x{27}'(V0, V1, 0, V2, V3, V4, V5, V6, V7)).
'un--normaliseSizeLimit'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V7) -> begin (V8 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V4, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quoteOpts_Quote_NF'(V0, V1, {'Idris.Core.Normalise.Quote.MkQuoteOpts', 0, 0, {'Idris.Prelude.Types.Just', V3}}, V2, V4, V10, V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V5} end end, V6)).
'un--normaliseScope'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> begin (V10 = ('un--normaliseScope'(V0, [V7 | V1], V2, {'Idris.Core.Env.::', V8, V3}, V9, V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V6, V7, V8, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('un--normalise'(V0, V1, V2, V3, V4, V5)) end.
'un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V6, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case ('Idris.Idris2.Core.Context':'un--isPrimName'(V5, V13)) of 1 -> (('case--case block in normalisePrims-3276'(V1, V9, V8, V7, V6, V5, V4, V3, V2, V0, V13, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V7))))(V10)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normalisePis'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Pi', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> ('Idris.Idris2.Core.Normalise.Quote':'un--quoteWithPi'(V0, V1, V2, V3, V8, V5)) end(E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseOpts'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, V2, V3, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V3, V4, V9, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseLHS'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V6, V7, V8, V9) -> begin (V10 = ('un--normaliseLHS'(V0, [V7 | V1], V2, {'Idris.Core.Env.::', V8, V3}, V9, V5))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V6, V7, V8, V12}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); _ -> begin (V13 = (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--onLHS'()), V2, V3, V4))(V5))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V15, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--normaliseHoles'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withHoles'()), V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseArgHoles'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withArgHoles'()), V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseAll'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise.Eval':'un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withAll'()), V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normalise'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTermNF\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('un--normaliseHoles'(V1, V0, V11, V5, V6, V7))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V15, V16, V17)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V18, V19, V20)) end end end}, V14, V7))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> case V2 of <<""/utf8>> -> begin (V51 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V23))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V51} end; _ -> begin (V79 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> V58 end end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), begin (V66 = (V63(V64))), (V65(V66)) end end end end end end end}, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), ((V70(V72))(V71)) end end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V74(V75))), (V76(V75)) end end end end}, fun (V77) -> fun (V78) -> V78 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V23))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V79} end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTermNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> ('un--logTermNF\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V14, V5, V6, V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V21, V22, V23)) end end end}, V17, V7))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> case V2 of <<""/utf8>> -> begin (V54 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V54} end; _ -> begin (V82 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V82} end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logGlueNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V6))(V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V18 = ('un--normaliseHoles'(V1, V0, V14, V5, V17, V7))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V21, V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V24, V25, V26)) end end end}, V20, V7))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> case V2 of <<""/utf8>> -> begin (V57 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> V36 end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), begin (V44 = (V41(V42))), (V43(V44)) end end end end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), ((V48(V50))(V49)) end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V52(V53))), (V54(V53)) end end end end}, fun (V55) -> fun (V56) -> V56 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V29))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V57} end; _ -> begin (V85 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V29))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V85} end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logGlue'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V6))(V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V21, V22, V23)) end end end}, V17, V7))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> case V2 of <<""/utf8>> -> begin (V54 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V54} end; _ -> begin (V82 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V82} end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logEnv'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of 1 -> begin (V66 = case V2 of <<""/utf8>> -> begin (V37 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, V4))))))))(V6))), {'Idris.Prelude.Types.Right', V37} end; _ -> begin (V65 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, V4))))))))))))(V6))), {'Idris.Prelude.Types.Right', V65} end end), case V66 of {'Idris.Prelude.Types.Left', E2} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V68) -> (('nested--8413-2781--in--un--dumpEnv'(V0, V2, V5, V4, V3, V1, V0, V5))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--glueClosure'(V0, V1, V2, V3, V4) -> {'Idris.Core.Normalise.Eval.MkGlue', 0, fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V2, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V8, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V9) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V2, V4)) end}.
'un--glueBack'(V0, V1, V2, V3, V4) -> {'Idris.Core.Normalise.Eval.MkGlue', 0, fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V2, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V8, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', V4} end end}.
'un--getValArity'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> begin (V12 = (((V7(V0))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Idris.Core.TT.Erased', V4, 0}))))(V3))), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> begin (V15 = ('un--getValArity'(V0, V1, V14, V3))), case V15 of {'Idris.Prelude.Types.Left', E10} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Right', (1 + V17)} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--getArity'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--getValArity'(V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--etaContract'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Attempting to eta contract subterms of"/utf8>> end, V2, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('un--normalise'(V0, V1, V7, ('Idris.Idris2.Core.Env':'un--mkEnv'({'Idris.Core.FC.EmptyFC'}, V1)), V2, V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Evaluated to"/utf8>> end, V13, V3))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V20 = (('Idris.Idris2.Core.Core':'un--mapTermM'(fun (V17) -> fun (V18) -> fun (V19) -> ('nested--7810-2212--in--un--act'(V0, V1, V2, V17, V18, V19)) end end end, V1, V2))(V3))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Result of eta-contraction"/utf8>> end, V22, V3))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V22} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
