-module('Idris.Idris2.Core.GetType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--getType'/4,
  'un--discharge'/5,
  'un--chkMeta'/6,
  'un--chkConstant'/2,
  'un--chkBinder'/4,
  'un--chk'/4
]).
'un--getType'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, V3)).
'un--discharge'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.Pi', V5, V6, V7, V8}, V4} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.Let', V9, V10, V11, V12}, V4} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V13, V14, V15, V16) -> V3 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V17, V18, V19, V20) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.PVTy', V17, V18, V20}, V4} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.PLet', V21, V22, V23, V24}, V4} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V25, V26, V27) -> V3 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chkMeta'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E28} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V10, V3, V4))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of {'Idris.Core.Value.NBind', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> fun (V15) -> case V13 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V16, V17, V18, V19) -> case V5 of [E20 | E21] -> (fun (V20, V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E22} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V25) -> begin (V26 = (('un--chk'(V0, V1, V3, V20))(V15))), case V26 of {'Idris.Prelude.Types.Left', E24} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V28) -> begin (V29 = (((V14(V25))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V20))))(V15))), case V29 of {'Idris.Prelude.Types.Left', E26} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V31) -> (('un--chkMeta'(V0, V1, V2, V3, V31, V21))(V15)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V35, V3, V4, V15))), case V36 of {'Idris.Prelude.Types.Left', E18} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V2, V3, V38}, V15)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15)); _ -> begin (V40 = begin (V39 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V42, V3, V4, V15))), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V2, V3, V45}, V15)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V46) -> begin (V48 = begin (V47 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E0} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V1, V0, V50, V3, V4, V46))), case V51 of {'Idris.Prelude.Types.Left', E2} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V2, V3, V53}, V46)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--chkConstant'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntType'}} end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V3) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int8Type'}} end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V4) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int16Type'}} end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V5) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int32Type'}} end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V6) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int64Type'}} end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V7) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntegerType'}} end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V8) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits8Type'}} end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V9) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits16Type'}} end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V10) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits32Type'}} end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V11) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits64Type'}} end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V12) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.StringType'}} end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V13) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.CharType'}} end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V14) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.DoubleType'}} end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.WorldType'}} end()); _ -> {'Idris.Core.TT.TType', V0} end.
'un--chkBinder'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'(V3)))).
'un--chk'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--binderType'(('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V13, V14)) end end end end}, V0, V6, V2))))))} end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V15, V16, V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V53 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V22 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V23 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V53 of {'Idris.Prelude.Types.Left', E38} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V55) -> case V55 of {'Idris.Prelude.Types.Just', E40} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--embed'(V56))))} end(E40)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V15, V17, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E41, E42, E43, E44} -> (fun (V57, V58, V59, V60) -> fun (V61) -> begin (V63 = begin (V62 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E45} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V65) -> begin (V96 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V59}, case V65 of {'Idris.Core.Context.MkDefs', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V66 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V61))), case V96 of {'Idris.Prelude.Types.Left', E77} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V98) -> case V98 of {'Idris.Prelude.Types.Just', E79} -> (fun (V99) -> begin (V100 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V65, V2, ('Idris.Idris2.Core.TT':'un--embed'(V99))))(V61))), case V100 of {'Idris.Prelude.Types.Left', E80} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V102) -> (('un--chkMeta'(V0, V1, V57, V2, V102, V60))(V61)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V57, V58, V61)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41, E42, E43, E44)); {'Idris.Core.TT.Bind', E82, E83, E84, E85} -> (fun (V103, V104, V105, V106) -> fun (V107) -> begin (V108 = (('un--chkBinder'(V0, V1, V2, V105))(V107))), case V108 of {'Idris.Prelude.Types.Left', E86} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V110) -> begin (V111 = (('un--chk'([V104 | V0], V1, {'Idris.Core.Env.::', V105, V2}, V106))(V107))), case V111 of {'Idris.Prelude.Types.Left', E88} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V113) -> begin (V114 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V110))(V107))), case V114 of {'Idris.Prelude.Types.Left', E90} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V116) -> begin (V117 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V113))(V107))), case V117 of {'Idris.Prelude.Types.Left', E92} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V119) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('un--discharge'(V103, V104, V105, V116, V119))))} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E82, E83, E84, E85)); {'Idris.Core.TT.App', E94, E95, E96} -> (fun (V120, V121, V122) -> fun (V123) -> begin (V124 = (('un--chk'(V0, V1, V2, V121))(V123))), case V124 of {'Idris.Prelude.Types.Left', E97} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V126) -> begin (V127 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V126))(V123))), case V127 of {'Idris.Prelude.Types.Left', E99} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V129) -> case V129 of {'Idris.Core.Value.NBind', E103, E104, E105, E106} -> (fun (V130, V131, V132, V133) -> case V132 of {'Idris.Core.TT.Pi', E109, E110, E111, E112} -> (fun (V134, V135, V136, V137) -> begin (V139 = begin (V138 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V138} end), case V139 of {'Idris.Prelude.Types.Left', E113} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V141) -> begin (V142 = (('un--chk'(V0, V1, V2, V122))(V123))), case V142 of {'Idris.Prelude.Types.Left', E115} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V144) -> begin (V145 = (((V133(V141))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, V122))))(V123))), case V145 of {'Idris.Prelude.Types.Left', E117} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V147) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V141, V2, V147))} end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109, E110, E111, E112)); _ -> begin (V148 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V126))(V123))), case V148 of {'Idris.Prelude.Types.Left', E107} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V150) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V120, V2, V150}, V123)) end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E103, E104, E105, E106)); _ -> begin (V151 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V126))(V123))), case V151 of {'Idris.Prelude.Types.Left', E101} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V153) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V120, V2, V153}, V123)) end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E94, E95, E96)); {'Idris.Core.TT.As', E119, E120, E121, E122} -> (fun (V154, V155, V156, V157) -> ('un--chk'(V0, V1, V2, V157)) end(E119, E120, E121, E122)); {'Idris.Core.TT.TDelayed', E123, E124, E125} -> (fun (V158, V159, V160) -> fun (V161) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V158))} end end(E123, E124, E125)); {'Idris.Core.TT.TDelay', E126, E127, E128, E129} -> (fun (V162, V163, V164, V165) -> fun (V166) -> begin (V167 = (('un--chk'(V0, V1, V2, V165))(V166))), case V167 of {'Idris.Prelude.Types.Left', E130} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V169) -> begin (V170 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V169))(V166))), case V170 of {'Idris.Prelude.Types.Left', E132} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V172) -> begin (V174 = begin (V173 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V173} end), case V174 of {'Idris.Prelude.Types.Left', E134} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V176) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V176, V2, {'Idris.Core.Value.NDelayed', V162, V163, V172}))} end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127, E128, E129)); {'Idris.Core.TT.TForce', E136, E137, E138} -> (fun (V177, V178, V179) -> fun (V180) -> begin (V181 = (('un--chk'(V0, V1, V2, V179))(V180))), case V181 of {'Idris.Prelude.Types.Left', E139} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V183) -> begin (V184 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V183))(V180))), case V184 of {'Idris.Prelude.Types.Left', E141} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V186) -> case V186 of {'Idris.Core.Value.NDelayed', E143, E144, E145} -> (fun (V187, V188, V189) -> begin (V191 = begin (V190 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V190} end), case V191 of {'Idris.Prelude.Types.Left', E146} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V193) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V193, V2, V189))} end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143, E144, E145)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V177, <<"Not a delayed type"/utf8>>}, V180)) end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E136, E137, E138)); {'Idris.Core.TT.PrimVal', E148, E149} -> (fun (V194, V195) -> fun (V196) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V2, ('un--chkConstant'(V194, V195))))} end end(E148, E149)); {'Idris.Core.TT.TType', E150} -> (fun (V197) -> fun (V198) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V197))} end end(E150)); {'Idris.Core.TT.Erased', E151, E152} -> (fun (V199, V200) -> fun (V201) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V199))} end end(E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
