-module('Idris.Idris2.TTImp.Elab.Check').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkExp-13954'/13,
  'case--exactlyOne\x{27},getRight-12979'/11,
  'case--case block in searchVar,envHints-11649'/20,
  'case--strengthenedEState,removeArg-9894'/8,
  'nested--9197-9589--in--un--wknTms'/4,
  'nested--11001-11228--in--un--useVars'/14,
  'nested--9379-9771--in--un--strTms'/8,
  'nested--9379-9769--in--un--removeArgVars'/7,
  'nested--9379-9770--in--un--removeArg'/7,
  'nested--8397-8858--in--un--insertAll'/8,
  'nested--12954-12963--in--un--getRight'/10,
  'nested--12954-12964--in--un--getRes'/10,
  'nested--12954-12965--in--un--getDepthError'/10,
  'nested--11001-11229--in--un--find'/13,
  'nested--11001-11230--in--un--envHints'/14,
  'nested--9379-9772--in--un--dropTop'/7,
  'nested--9379-9768--in--un--dropSub'/8,
  'nested--12954-12966--in--un--depthError'/10,
  'nested--12954-12967--in--un--altError'/11,
  'nested--12435-12485--in--un--abandon'/10,
  'dn--un--show_Show_ElabMode'/1,
  'dn--un--show_Show_(ImplBinding $vars)'/1,
  'dn--un--showPrec_Show_(ImplBinding $vars)'/2,
  'dn--un--__Impl_Show_(ImplBinding $vars)'/0,
  'dn--un--__Impl_Eq_ElabOpt'/0,
  'dn--un--==_Eq_ElabOpt'/2,
  'dn--un--/=_Eq_ElabOpt'/2,
  'un--weakenedEState'/4,
  'un--updateEnv'/5,
  'un--tryError'/7,
  'un--try'/8,
  'un--successful'/8,
  'un--strengthenedEState'/7,
  'un--searchVar'/12,
  'un--saveHole'/3,
  'un--processDecl'/8,
  'un--notePatVar'/3,
  'un--noteLHSPatVar'/4,
  'un--mustBePoly'/6,
  'un--metaVarI'/9,
  'un--metaVar'/9,
  'un--isLHS'/1,
  'un--initElabInfo'/1,
  'un--initEStateSub'/4,
  'un--initEState'/3,
  'un--inScope'/8,
  'un--implBindVar'/9,
  'un--handle'/8,
  'un--exactlyOne\x{27}'/9,
  'un--exactlyOne'/8,
  'un--convertWithLazy'/10,
  'un--convert'/9,
  'un--concrete'/4,
  'un--clearToBind'/3,
  'un--clearBindIfUnsolved'/1,
  'un--checkImp'/12,
  'un--checkExp'/12,
  'un--check'/12,
  'un--bindingType'/1,
  'un--bindingTerm'/1,
  'un--bindingRig'/1,
  'un--bindingPiInfo'/1,
  'un--bindingMetas'/1,
  'un--argVar'/8,
  'un--anyOne'/7,
  'un--addBindIfUnsolved'/8
]).
'case--checkExp-13954'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> fun (V13) -> case V11 of {'Idris.Core.Unify.MkUnifyResult', E20, E21, E22, E23} -> (fun (V14, V15, V16, V17) -> case V17 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> begin (V18 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Solved"/utf8>> end, V3, V13))), case V18 of {'Idris.Prelude.Types.Left', E24} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, V2}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.Unify.AddForce', E26} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Force"/utf8>> end, V3, V13))), case V22 of {'Idris.Prelude.Types.Left', E27} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V10, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Got"/utf8>> end, V5, V2, V13))), case V25 of {'Idris.Prelude.Types.Left', E29} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V10, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Exp"/utf8>> end, V5, V1, V13))), case V28 of {'Idris.Prelude.Types.Left', E31} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V4, V21, V3}, V1}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); {'Idris.Core.Unify.AddDelay', E33} -> (fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V2))(V13))), case V32 of {'Idris.Prelude.Types.Left', E34} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Delay"/utf8>> end, V3, V13))), case V35 of {'Idris.Prelude.Types.Left', E36} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V4, V31, V34, V3}, V1}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> fun (V38) -> begin (V39 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Not solved"/utf8>> end, V3, V38))), case V39 of {'Idris.Prelude.Types.Left', E0} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V41) -> begin (V43 = begin (V42 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V45, V38))), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V1))(V38))), case V49 of {'Idris.Prelude.Types.Left', E6} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V51) -> begin (V52 = (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V9, V10, V4, V7, V5, V3, V51, V12))(V38))), case V52 of {'Idris.Prelude.Types.Left', E8} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.UnifyState':'un--dumpConstraints'(V9, V10, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), 0, V38))), case V55 of {'Idris.Prelude.Types.Left', E10} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V57) -> case V11 of {'Idris.Core.Unify.MkUnifyResult', E12, E13, E14, E15} -> (fun (V58, V59, V60, V61) -> case V61 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V54, V2}} end()); {'Idris.Core.Unify.AddForce', E16} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V4, V62, V3}, V1}} end(E16)); {'Idris.Core.Unify.AddDelay', E17} -> (fun (V63) -> begin (V64 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V2))(V38))), case V64 of {'Idris.Prelude.Types.Left', E18} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V4, V63, V66, V3}, V1}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--exactlyOne\x{27},getRight-12979'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E4 | E5] -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V13, V14) -> case V12 of [] -> {'Idris.Prelude.Types.Right', V14}; _ -> case ('Idris.Idris2.Data.List':'un--filter'(fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Builtin':'un--fst'(V15)), 0)) end, V10)) of [E12 | E13] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V18, V19) -> case V17 of [] -> {'Idris.Prelude.Types.Right', V19}; _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'(V20)) end, V10))} end end(E14, E15)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Builtin':'un--snd'(V21)) end, V10))} end end(E12, E13)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('Idris.Idris2.Builtin':'un--snd'(V22)) end, V10))} end end end(E10, E11)); _ -> case ('Idris.Idris2.Data.List':'un--filter'(fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Builtin':'un--fst'(V23)), 0)) end, V10)) of [E6 | E7] -> (fun (V24, V25) -> case V24 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V26, V27) -> case V25 of [] -> {'Idris.Prelude.Types.Right', V27}; _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> ('Idris.Idris2.Builtin':'un--snd'(V28)) end, V10))} end end(E8, E9)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('Idris.Idris2.Builtin':'un--snd'(V29)) end, V10))} end end(E6, E7)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V30) -> ('Idris.Idris2.Builtin':'un--snd'(V30)) end, V10))} end end end(E4, E5)); _ -> case ('Idris.Idris2.Data.List':'un--filter'(fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Builtin':'un--fst'(V31)), 0)) end, V10)) of [E0 | E1] -> (fun (V32, V33) -> case V32 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V34, V35) -> case V33 of [] -> {'Idris.Prelude.Types.Right', V35}; _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V36) -> ('Idris.Idris2.Builtin':'un--snd'(V36)) end, V10))} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V37) -> ('Idris.Idris2.Builtin':'un--snd'(V37)) end, V10))} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V38) -> ('Idris.Idris2.Builtin':'un--snd'(V38)) end, V10))} end end.
'case--case block in searchVar,envHints-11649'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V23, V24) -> begin (V26 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V11 end, fun () -> fun (V25) -> V25 end end, V21))), fun (V27) -> begin (V29 = begin (V28 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E5} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V31) -> begin (V62 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V26, case V31 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V32 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V27))), case V62 of {'Idris.Prelude.Types.Left', E37} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V64) -> case V64 of {'Idris.Prelude.Types.Just', E39} -> (fun (V65) -> begin (V86 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Core.TT.Func'} end, ('Idris.Idris2.Core.Context.Context':'un--defNameType'(case V65 of {'Idris.Core.Context.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V83 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V87 = ((V24(V8))(V86))), begin (V108 = ('nested--11001-11228--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V0, ('Idris.Idris2.Core.TT':'un--getArgs'(V87)), ('Idris.Idris2.Core.TT':'un--embed'(case V65 of {'Idris.Core.Context.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V90 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V109 = {'Idris.Core.TT.Let', V8, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V14)), V87)), ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V14)), V108))}), begin (V116 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V10, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V110, V111, V112)) end end end, fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V113, V114, V115)) end end end}, V26, V27))), case V116 of {'Idris.Prelude.Types.Left', E80} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V118) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', [V118 | V14], {'Idris.Builtin.MkPair', fun (V119) -> (V15({'Idris.Core.TT.Bind', V8, V118, V109, V119})) end, {'Idris.Core.Env.::', V109, V16}}}} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V14, {'Idris.Builtin.MkPair', V15, V16}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V120) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V14, {'Idris.Builtin.MkPair', V15, V16}}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--strengthenedEState,removeArg-9894'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--9379-9769--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V9)), fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkTerm'(V8, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('Idris.Idris2.Core.TT':'un--apply'(('Idris.Idris2.Core.TT':'un--getLoc'(V8)), V11, V10)))) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9197-9589--in--un--wknTms'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.TTImp.Elab.Check.NameBinding', E2, E3, E4, E5, E6} -> (fun (V6, V7, V8, V9, V10) -> {'Idris.Builtin.MkPair', V4, {'Idris.TTImp.Elab.Check.NameBinding', [V0 | V6], V7, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_PiInfo'(fun (V11) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V11)) end, V8)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V9)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V10))}} end(E2, E3, E4, E5, E6)); {'Idris.TTImp.Elab.Check.AsBinding', E7, E8, E9, E10, E11, E12} -> (fun (V12, V13, V14, V15, V16, V17) -> {'Idris.Builtin.MkPair', V4, {'Idris.TTImp.Elab.Check.AsBinding', [V0 | V12], V13, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_PiInfo'(fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V18)) end, V14)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V15)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V16)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V17))}} end(E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11001-11228--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [] -> V13; [E8 | E9] -> (fun (V14, V15) -> case V13 of {'Idris.Core.TT.Bind', E18, E19, E20, E21} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E30, E31, E32, E33} -> (fun (V20, V21, V22, V23) -> {'Idris.Core.TT.Bind', V16, V17, {'Idris.Core.TT.Let', V20, V21, V14, V23}, ('nested--11001-11228--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V17 | V11], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V24)) end, V15)), V19))} end(E30, E31, E32, E33)); _ -> case V13 of {'Idris.Core.TT.Bind', E22, E23, E24, E25} -> (fun (V25, V26, V27, V28) -> case V27 of {'Idris.Core.TT.Let', E26, E27, E28, E29} -> (fun (V29, V30, V31, V32) -> {'Idris.Core.TT.Bind', V25, V26, {'Idris.Core.TT.Let', V29, V30, V31, V32}, ('nested--11001-11228--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V26 | V11], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V33) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V33)) end, V12)), V28))} end(E26, E27, E28, E29)); _ -> V13 end end(E22, E23, E24, E25)); _ -> V13 end end end(E18, E19, E20, E21)); _ -> case V13 of {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V34, V35, V36, V37) -> case V36 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V38, V39, V40, V41) -> {'Idris.Core.TT.Bind', V34, V35, {'Idris.Core.TT.Let', V38, V39, V40, V41}, ('nested--11001-11228--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V35 | V11], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V42) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V42)) end, V12)), V37))} end(E14, E15, E16, E17)); _ -> V13 end end(E10, E11, E12, E13)); _ -> V13 end end end(E8, E9)); _ -> case V13 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V43, V44, V45, V46) -> case V45 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V47, V48, V49, V50) -> {'Idris.Core.TT.Bind', V43, V44, {'Idris.Core.TT.Let', V47, V48, V49, V50}, ('nested--11001-11228--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [V44 | V11], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V51)) end, V12)), V46))} end(E4, E5, E6, E7)); _ -> V13 end end(E0, E1, E2, E3)); _ -> V13 end end.
'nested--9379-9771--in--un--strTms'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> fun (V10) -> case V9 of {'Idris.TTImp.Elab.Check.NameBinding', E2, E3, E4, E5, E6} -> (fun (V11, V12, V13, V14, V15) -> case V11 of [E7 | E8] -> (fun (V16, V17) -> begin (V18 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V14, V10))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V15, V10))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> case ('Idris.Idris2.Core.TT':'un--shrinkPi'(V13, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Just', E13} -> (fun (V24) -> case ('nested--9379-9770--in--un--removeArg'(V0, V1, V2, V3, V4, V5, V20)) of {'Idris.Prelude.Types.Just', E14} -> (fun (V25) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V23, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Just', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, {'Idris.TTImp.Elab.Check.NameBinding', V0, V12, V24, V25, V26}}} end(E15)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V15}, V10)) end end(E14)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V15}, V10)) end end(E13)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V15}, V10)) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6)); {'Idris.TTImp.Elab.Check.AsBinding', E16, E17, E18, E19, E20, E21} -> (fun (V27, V28, V29, V30, V31, V32) -> case V27 of [E22 | E23] -> (fun (V33, V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V30, V10))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V31, V10))), case V38 of {'Idris.Prelude.Types.Left', E26} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [V1 | V0], V6, V2, V32, V10))), case V41 of {'Idris.Prelude.Types.Left', E28} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V43) -> case ('Idris.Idris2.Core.TT':'un--shrinkPi'(V29, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Just', E30} -> (fun (V44) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V37, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Just', E31} -> (fun (V45) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V40, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Just', E32} -> (fun (V46) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V43, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Just', E33} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, {'Idris.TTImp.Elab.Check.AsBinding', V0, V28, V44, V45, V46, V47}}} end(E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V31}, V10)) end end(E32)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V31}, V10)) end end(E31)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V31}, V10)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadUnboundImplicit', [V1 | V0], V3, V2, V8, V31}, V10)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9379-9769--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([])); [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Core.TT.Local', E2, E3, E4} -> (fun (V9, V10, V11) -> case V11 of 0 -> ('nested--9379-9769--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V8)); _ -> begin (V12 = (V11 - 1)), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--9379-9769--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V8)), fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([{'Idris.Core.TT.Local', V9, V10, V12} | V13])) end)) end end end(E2, E3, E4)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkTerm'(V7, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})), fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--9379-9769--in--un--removeArgVars'(V0, V1, V2, V3, V4, V5, V8)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([V14 | V15])) end)) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9379-9770--in--un--removeArg'(V0, V1, V2, V3, V4, V5, V6) -> ('case--strengthenedEState,removeArg-9894'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V6)))).
'nested--8397-8858--in--un--insertAll'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> V7; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V10, V11, ('nested--8397-8858--in--un--insertAll'(V0, V1, V2, V3, V4, V5, V9, V7)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12954-12963--in--un--getRight'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('case--exactlyOne\x{27},getRight-12979'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Data.Either':'un--rights'(V9)))).
'nested--12954-12964--in--un--getRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> V12 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12954-12965--in--un--getDepthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Core.AmbiguityTooDeep', E0, E1, E2} -> (fun (V10, V11, V12) -> {'Idris.Prelude.Types.Just', V9} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--11001-11229--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V15)) of 1 -> {'Idris.Prelude.Types.Just', V16}; 0 -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--11001-11229--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14)) end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V19) -> begin (V20 = {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V19}, V18}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V19)) of 1 -> {'Idris.Prelude.Types.Just', V20}; 0 -> ('nested--11001-11229--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11001-11230--in--un--envHints'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V11 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Builtin.MkPair', fun (V14) -> V14 end, V12}}}; [E0 | E1] -> (fun (V15, V16) -> begin (V17 = ('nested--11001-11230--in--un--envHints'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V16, V12, V13))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> case V19 of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V22, V23) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V10, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V24, V25, V26)) end end end, fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V27, V28, V29)) end end end}, V15, V13))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V33 = {'Idris.Builtin.DPair.MkDPair', V20, {'Idris.Builtin.MkPair', V22, V23}}), (('case--case block in searchVar,envHints-11649'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V15, V16, V12, V20, V22, V23, V33, V32, ('nested--11001-11229--in--un--find'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V32, V3))))(V13)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9379-9772--in--un--dropTop'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> begin (V7 = (V6 - 1)), {'Idris.Prelude.Types.Just', V7} end end.
'nested--9379-9768--in--un--dropSub'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.DropCons', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Right', V8} end(E0)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Badly formed weakened environment"/utf8>>}, V7)) end.
'nested--12954-12966--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('nested--12954-12966--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11)) end, fun () -> fun (V14) -> {'Idris.Prelude.Types.Just', V14} end end, ('nested--12954-12965--in--un--getDepthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12954-12967--in--un--altError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> case ('nested--12954-12966--in--un--depthError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Core.AllFailed', V9} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> V11 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> {'Idris.Core.Core.AmbiguousElab', V0, V3, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('nested--12954-12964--in--un--getRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12)) end, V10))} end.
'nested--12435-12485--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Core.UndefinedName', E0, E1} -> (fun (V10, V11) -> 1 end(E0, E1)); {'Idris.Core.Core.InType', E2, E3, E4} -> (fun (V12, V13, V14) -> ('nested--12435-12485--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14)) end(E2, E3, E4)); {'Idris.Core.Core.InCon', E5, E6, E7} -> (fun (V15, V16, V17) -> ('nested--12435-12485--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17)) end(E5, E6, E7)); {'Idris.Core.Core.InLHS', E8, E9, E10} -> (fun (V18, V19, V20) -> ('nested--12435-12485--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V20)) end(E8, E9, E10)); {'Idris.Core.Core.InRHS', E11, E12, E13} -> (fun (V21, V22, V23) -> ('nested--12435-12485--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V23)) end(E11, E12, E13)); {'Idris.Core.Core.AllFailed', E14} -> (fun (V24) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V40, V41, V42, V43)) end end end end end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V45)) end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V48, V49, V50)) end end end end end}, fun (V51) -> ('nested--12435-12485--in--un--abandon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ('Idris.Idris2.Builtin':'un--snd'(V51)))) end, V24)) end(E14)); _ -> 0 end.
'dn--un--show_Show_ElabMode'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InType'} -> (fun () -> <<"InType"/utf8>> end()); {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"InLHS "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V1)))) end(E0)); {'Idris.TTImp.Elab.Check.InExpr'} -> (fun () -> <<"InExpr"/utf8>> end()); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> <<"InTransform"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(ImplBinding $vars)'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V1, V7, V8)) end end}, {'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V1, V10, V11)) end end}}, {'Idris.Builtin.MkPair', V4, V5})) end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V12, V13, V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V12, V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V12, V19, V20)) end end}, {'Idris.Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V12, V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V12, V22, V23)) end end}}, {'Idris.Builtin.MkPair', V15, V16})), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V12, V15)))))) end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_(ImplBinding $vars)'(V0, V1) -> ('dn--un--show_Show_(ImplBinding $vars)'(V1)).
'dn--un--__Impl_Show_(ImplBinding $vars)'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_(ImplBinding $vars)'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_(ImplBinding $vars)'(V1, V2)) end end}.
'dn--un--__Impl_Eq_ElabOpt'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_ElabOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_ElabOpt'(V2, V3)) end end}.
'dn--un--==_Eq_ElabOpt'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_ElabOpt'(V0, V1) -> case ('dn--un--==_Eq_ElabOpt'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--weakenedEState'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V25 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.TTImp.Elab.Check.EST'}, case V7 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.TTImp.Elab.Check.MkEState', V8, V9, V10, {'Idris.Core.TT.DropCons', V11}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('nested--9197-9589--in--un--wknTms'(V0, V1, V2, V22)) end, V12)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V23) -> ('nested--9197-9589--in--un--wknTms'(V0, V1, V2, V23)) end, V13)), V14, V15, V16, [], V18, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V24)) end, V19)), V20, V21} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V25 of {'Idris.Prelude.Types.Left', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V27) -> {'Idris.Prelude.Types.Right', V27} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateEnv'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.TTImp.Elab.Check.MkEState', V0, V6, V1, V2, V9, V10, V3, V12, V13, V14, V15, V16, V17, V18} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryError'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--branch'(V1, V6))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V22) -> begin (V23 = (V5(V22))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--commit'(V1, V22))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V25}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'put'(V3, V10))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'put'(V4, V14))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, V18))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V108 = begin (V107 = ('erlang':'put'(V1, case V21 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> {'Idris.Core.Context.MkDefs', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, case V46 of {'Idris.Core.Context.MkDefs', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V104 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V75, V76} end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V107} end), case V108 of {'Idris.Prelude.Types.Left', E80} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V29}} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--try'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--tryError'(V0, V1, V2, V3, V4, V5, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', V11} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> (V6(V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--successful'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V28 = case V5 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--length'(('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V15 of {'Idris.Core.UnifyState.MkUState', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V17 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V30 = begin (V29 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E18} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E20} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--branch'(V1, V7))), case V37 of {'Idris.Prelude.Types.Left', E22} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V40) -> begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V41) -> begin (V51 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"__"/utf8>>}}} end end, fun () -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V45, V46, V47)) end end end, fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V48, V49, V50)) end end end}, V43, V44)) end end end, V10))(V41))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Running "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53))))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V40))), case V54 of {'Idris.Prelude.Types.Left', E26} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V56) -> begin (V57 = (V11(V40))), case V57 of {'Idris.Prelude.Types.Left', E28} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V59) -> begin (V61 = begin (V60 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V63) -> begin (V76 = case V5 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--length'(('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V63 of {'Idris.Core.UnifyState.MkUState', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V65 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V78 = begin (V77 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E44} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V80) -> begin (V82 = begin (V81 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V81} end), case V82 of {'Idris.Prelude.Types.Left', E46} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V84) -> begin (V86 = begin (V85 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E48} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V88) -> begin (V90 = begin (V89 = ('erlang':'put'(V3, V15))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E50} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V92) -> begin (V94 = begin (V93 = ('erlang':'put'(V4, V32))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E52} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V96) -> begin (V98 = begin (V97 = ('erlang':'put'(V2, V36))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E54} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V100) -> begin (V102 = begin (V101 = ('erlang':'put'(V1, V39))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E56} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V104) -> begin (V118 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V105) -> begin (V115 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"__"/utf8>>}}} end end, fun () -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V109, V110, V111)) end end end, fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V112, V113, V114)) end end end}, V107, V108)) end end end, V10))(V105))), case V115 of {'Idris.Prelude.Types.Left', E58} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V117) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Success "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V117)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V76)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" - "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V28)), <<")"/utf8>>))))))))))))} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V40))), case V118 of {'Idris.Prelude.Types.Left', E60} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V120) -> begin (V121 = ('un--successful'(V0, V1, V2, V3, V4, V5, V9, V40))), case V121 of {'Idris.Prelude.Types.Left', E62} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V123) -> {'Idris.Prelude.Types.Right', [{'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V76 - V28))), {'Idris.Builtin.MkPair', V59, {'Idris.Builtin.MkPair', V88, {'Idris.Builtin.MkPair', V63, {'Idris.Builtin.MkPair', V80, V84}}}}}} | V123]} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V124) -> fun (V125) -> begin (V127 = begin (V126 = ('erlang':'put'(V3, V15))), {'Idris.Prelude.Types.Right', V126} end), case V127 of {'Idris.Prelude.Types.Left', E64} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V129) -> begin (V131 = begin (V130 = ('erlang':'put'(V4, V32))), {'Idris.Prelude.Types.Right', V130} end), case V131 of {'Idris.Prelude.Types.Left', E66} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V133) -> begin (V135 = begin (V134 = ('erlang':'put'(V2, V36))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E68} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V137) -> begin (V139 = begin (V138 = ('erlang':'put'(V1, V39))), {'Idris.Prelude.Types.Right', V138} end), case V139 of {'Idris.Prelude.Types.Left', E70} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V141) -> begin (V142 = case ('nested--12435-12485--in--un--abandon'(V0, V10, V11, V9, V5, V4, V3, V2, V1, V124)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V124, V125)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V142 of {'Idris.Prelude.Types.Left', E72} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V144) -> begin (V145 = ('un--successful'(V0, V1, V2, V3, V4, V5, V9, V125))), case V145 of {'Idris.Prelude.Types.Left', E74} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V147) -> {'Idris.Prelude.Types.Right', [{'Idris.Prelude.Types.Left', {'Idris.Builtin.MkPair', V10, V124}} | V147]} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V7)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--strengthenedEState'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V29 = ('nested--9379-9768--in--un--dropSub'(V1, V0, V5, V4, V3, V2, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V18 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V29 of {'Idris.Prelude.Types.Left', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V31) -> begin (V47 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V32) -> ('nested--9379-9771--in--un--strTms'(V1, V0, V5, V4, V3, V2, V14, V32)) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V37 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V6))), case V47 of {'Idris.Prelude.Types.Left', E34} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V49) -> begin (V65 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V50) -> ('nested--9379-9771--in--un--strTms'(V1, V0, V5, V4, V3, V2, V14, V50)) end, case V10 of {'Idris.TTImp.Elab.Check.MkEState', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V56 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V6))), case V65 of {'Idris.Prelude.Types.Left', E50} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V67) -> {'Idris.Prelude.Types.Right', case V10 of {'Idris.TTImp.Elab.Check.MkEState', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> {'Idris.TTImp.Elab.Check.MkEState', V68, V69, V70, V31, V49, V67, V74, V75, V76, [], V78, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V82) -> ('nested--9379-9772--in--un--dropTop'(V1, V0, V5, V4, V3, V2, V82)) end, V79)), V80, V81} end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--searchVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V46 = ('nested--11001-11230--in--un--envHints'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V15 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V26 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V7, V11))), case V46 of {'Idris.Prelude.Types.Left', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V48) -> case V48 of {'Idris.Builtin.DPair.MkDPair', E34, E35} -> (fun (V49, V50) -> case V50 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V51, V52) -> begin (V53 = (('Idris.Idris2.Core.UnifyState':'un--newSearch'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V49, V0)), V1, V2, V3, V4, V5, V6, V52, V9, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V49)), V10))))(V11))), case V53 of {'Idris.Prelude.Types.Left', E38} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V56, V57) -> {'Idris.Prelude.Types.Right', (V51(V57))} end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--saveHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V21 = ('erlang':'put'(V0, case V6 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.TTImp.Elab.Check.MkEState', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V1, 0, V19)), V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processDecl'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.TTImp.ProcessDecls':'un--process'(V0, V1, V2, V3, V4, V5, V6, V7)).
'un--notePatVar'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V21 = ('erlang':'put'(V0, case V6 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.TTImp.Elab.Check.MkEState', V7, V8, V9, V10, V11, V12, V13, V14, [V1 | V15], V16, V17, V18, V19, V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--noteLHSPatVar'(V0, V1, V2, V3) -> case V1 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> begin (V23 = ('erlang':'put'(V0, case V8 of {'Idris.TTImp.Elab.Check.MkEState', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.TTImp.Elab.Check.MkEState', V9, V10, V11, V12, V13, V14, V15, [V2 | V16], V17, V18, V19, V20, V21, V22} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V23} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--mustBePoly'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V24 = ('erlang':'put'(V0, case V9 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> {'Idris.TTImp.Elab.Check.MkEState', V10, V11, V12, V13, V14, V15, V16, V17, V18, [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} | V19], V20, V21, V22, V23} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V24} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--metaVarI'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V12, V5, V7))(V8))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V24 = case V15 of {'Idris.Core.Value.NApp', E4, E5, E6} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.Value.NMeta', E7, E8, E9} -> (fun (V19, V20, V21) -> case ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0)) of {'Idris.Core.Context.Context.MkHoleFlags', E10, E11} -> (fun (V22, V23) -> {'Idris.Core.Context.Context.MkHoleFlags', V22, 1} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0)) end end(E4, E5, E6)); _ -> ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0)) end), (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), V24}, 1))(V8)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--metaVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 1))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', V13} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isLHS'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V1) -> {'Idris.Prelude.Types.Just', V1} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--initElabInfo'(V0) -> {'Idris.TTImp.Elab.Check.MkElabInfo', V0, {'Idris.TTImp.TTImp.NONE'}, 0, 1, 0, []}.
'un--initEStateSub'(V0, V1, V2, V3) -> {'Idris.TTImp.Elab.Check.MkEState', V0, V1, V2, V3, [], [], [], [], [], [], 0, [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.UserNameMap':'un--empty'())}.
'un--initEState'(V0, V1, V2) -> ('un--initEStateSub'(V0, V1, V2, {'Idris.Core.TT.SubRefl'})).
'un--inScope'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--weakenedEState'(V0, V1, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ((V6(V10))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('un--strengthenedEState'(V0, V1, V2, V10, V4, V5, V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'put'(V3, V16))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> {'Idris.Prelude.Types.Right', V13} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--implBindVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(1))}, 1))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', V13} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--handle'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--tryError'(V0, V1, V2, V3, V4, V5, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', V11} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> ((V6(V12))(V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [E22 | E23] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V11, V12) -> case V10 of [] -> V12; _ -> fun (V13) -> begin (V14 = ('un--successful'(V0, V1, V2, V3, V4, V5, V8, V13))), case V14 of {'Idris.Prelude.Types.Left', E48} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V16) -> case ('nested--12954-12963--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V16)) of {'Idris.Prelude.Types.Right', E50} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E51, E52} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E53, E54} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E55, E56} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V24, V25) -> begin (V27 = begin (V26 = ('erlang':'put'(V3, V22))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E59} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V29) -> begin (V31 = begin (V30 = ('erlang':'put'(V4, V24))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E61} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V33) -> begin (V35 = begin (V34 = ('erlang':'put'(V2, V25))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E63} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V37) -> begin (V39 = begin (V38 = ('erlang':'put'(V1, V20))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E65} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--commit'(V1, V13))), case V42 of {'Idris.Prelude.Types.Left', E67} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V44) -> {'Idris.Prelude.Types.Right', V18} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50)); {'Idris.Prelude.Types.Left', E69} -> (fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--12954-12967--in--un--altError'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.Either':'un--lefts'(V16)), V45)), V13)) end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E46, E47)); _ -> fun (V46) -> begin (V47 = ('un--successful'(V0, V1, V2, V3, V4, V5, V8, V46))), case V47 of {'Idris.Prelude.Types.Left', E24} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V49) -> case ('nested--12954-12963--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V49)) of {'Idris.Prelude.Types.Right', E26} -> (fun (V50) -> case V50 of {'Idris.Builtin.MkPair', E27, E28} -> (fun (V51, V52) -> case V52 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V53, V54) -> case V54 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V55, V56) -> case V56 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V57, V58) -> begin (V60 = begin (V59 = ('erlang':'put'(V3, V55))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E35} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V62) -> begin (V64 = begin (V63 = ('erlang':'put'(V4, V57))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E37} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V66) -> begin (V68 = begin (V67 = ('erlang':'put'(V2, V58))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E39} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V70) -> begin (V72 = begin (V71 = ('erlang':'put'(V1, V53))), {'Idris.Prelude.Types.Right', V71} end), case V72 of {'Idris.Prelude.Types.Left', E41} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Context':'un--commit'(V1, V46))), case V75 of {'Idris.Prelude.Types.Left', E43} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V77) -> {'Idris.Prelude.Types.Right', V51} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26)); {'Idris.Prelude.Types.Left', E45} -> (fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--12954-12967--in--un--altError'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.Either':'un--lefts'(V49)), V78)), V46)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E22, E23)); _ -> fun (V79) -> begin (V80 = ('un--successful'(V0, V1, V2, V3, V4, V5, V8, V79))), case V80 of {'Idris.Prelude.Types.Left', E0} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V82) -> case ('nested--12954-12963--in--un--getRight'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V82)) of {'Idris.Prelude.Types.Right', E2} -> (fun (V83) -> case V83 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V84, V85) -> case V85 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V86, V87) -> case V87 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V88, V89) -> case V89 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V90, V91) -> begin (V93 = begin (V92 = ('erlang':'put'(V3, V88))), {'Idris.Prelude.Types.Right', V92} end), case V93 of {'Idris.Prelude.Types.Left', E11} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V95) -> begin (V97 = begin (V96 = ('erlang':'put'(V4, V90))), {'Idris.Prelude.Types.Right', V96} end), case V97 of {'Idris.Prelude.Types.Left', E13} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V99) -> begin (V101 = begin (V100 = ('erlang':'put'(V2, V91))), {'Idris.Prelude.Types.Right', V100} end), case V101 of {'Idris.Prelude.Types.Left', E15} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V103) -> begin (V105 = begin (V104 = ('erlang':'put'(V1, V86))), {'Idris.Prelude.Types.Right', V104} end), case V105 of {'Idris.Prelude.Types.Left', E17} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V107) -> begin (V108 = ('Idris.Idris2.Core.Context':'un--commit'(V1, V79))), case V108 of {'Idris.Prelude.Types.Left', E19} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V110) -> {'Idris.Prelude.Types.Right', V84} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E21} -> (fun (V111) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(('nested--12954-12967--in--un--altError'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.Either':'un--lefts'(V82)), V111)), V79)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--exactlyOne'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--exactlyOne\x{27}'(V0, V1, V2, V3, V4, 1, V5, V6, V7)).
'un--convertWithLazy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V17 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14, V15) -> case V10 of {'Idris.TTImp.Elab.Check.InLHS', E6} -> (fun (V16) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E6)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--isLazyActive'(V1, V19))), case V20 of {'Idris.Prelude.Types.Left', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V22) -> begin (V23 = case V22 of 1 -> V4; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V30 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unifying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('dn--un--show_Show_ElabMode'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E9, E10, E11, E12, E13, E14} -> (fun (V24, V25, V26, V27, V28, V29) -> V24 end(E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V7, V8, V19))), case V30 of {'Idris.Prelude.Types.Left', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V1, <<"elab.unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"....with"/utf8>> end, V7, V9, V19))), case V33 of {'Idris.Prelude.Types.Left', E17} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V35) -> begin (V116 = case case ('Idris.Idris2.Core.Normalise.Eval':'un--isFromTerm'(V8)) of 1 -> ('Idris.Idris2.Core.Normalise.Eval':'un--isFromTerm'(V9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V36 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))(V19))), case V36 of {'Idris.Prelude.Types.Left', E19} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V38) -> begin (V39 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V9))(V19))), case V39 of {'Idris.Prelude.Types.Left', E21} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V41) -> case V23 of 1 -> (((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V42, V43, V44, V45, V46, V47, V48, V49, V50)) end end end end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V51, V52, V53, V54, V55, V56, V57, V58, V59)) end end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V38))(V41))(V19)); 0 -> (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V60, V61, V62, V63, V64, V65, V66, V67, V68)) end end end end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V69, V70, V71, V72, V73, V74, V75, V76, V77)) end end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V38))(V41))(V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V78 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V8))(V19))), case V78 of {'Idris.Prelude.Types.Left', E23} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V80) -> begin (V81 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V9))(V19))), case V81 of {'Idris.Prelude.Types.Left', E25} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V83) -> case V23 of 1 -> (((('Idris.Idris2.Core.Unify':'un--unifyWithLazy'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V84, V85, V86, V87, V88, V89, V90, V91)) end end end end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V92, V93, V94, V95, V96, V97, V98, V99)) end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V80))(V83))(V19)); 0 -> (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V100, V101, V102, V103, V104, V105, V106, V107)) end end end end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V108, V109, V110, V111, V112, V113, V114, V115)) end end end end end end end end}, V0, V1, V2, V17, V5, V7))(V80))(V83))(V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V116 of {'Idris.Prelude.Types.Left', E27} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V118) -> begin (V123 = case case V118 of {'Idris.Core.Unify.MkUnifyResult', E29, E30, E31, E32} -> (fun (V119, V120, V121, V122) -> V120 end(E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V2, V17, 0, V19)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V123 of {'Idris.Prelude.Types.Left', E33} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V125) -> {'Idris.Prelude.Types.Right', V118} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V126) -> fun (V127) -> begin (V129 = begin (V128 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V128} end), case V129 of {'Idris.Prelude.Types.Left', E35} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V131) -> begin (V132 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V8))(V127))), case V132 of {'Idris.Prelude.Types.Left', E37} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V134) -> begin (V135 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V9))(V127))), case V135 of {'Idris.Prelude.Types.Left', E39} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V137) -> begin (V141 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V138) -> ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V2, V17, 0, V138)) end, fun (V139) -> fun (V140) -> {'Idris.Prelude.Types.Right', 0} end end, V127))), case V141 of {'Idris.Prelude.Types.Left', E41} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V143) -> begin (V145 = begin (V144 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V144} end), case V145 of {'Idris.Prelude.Types.Left', E43} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V147) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.WhenUnifying', V0, V5, case V147 of {'Idris.Core.Context.MkDefs', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> V148 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V134, V137, V126}, V127)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V18)) end end.
'un--convert'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('un--convertWithLazy'(V0, V1, V2, V3, 0, V4, V5, V6, V7, V8)).
'un--concrete'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> begin (V12 = (((V7(V0))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Idris.Core.TT.Erased', V4, 0}))))(V3))), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> ('un--concrete'(V0, V1, V14, V3)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2, E3)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V15, V16, V17, V18, V19) -> {'Idris.Prelude.Types.Right', 1} end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NTCon', E15, E16, E17, E18, E19} -> (fun (V20, V21, V22, V23, V24) -> {'Idris.Prelude.Types.Right', 1} end(E15, E16, E17, E18, E19)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V25, V26) -> {'Idris.Prelude.Types.Right', 1} end(E20, E21)); {'Idris.Core.Value.NType', E22} -> (fun (V27) -> {'Idris.Prelude.Types.Right', 1} end(E22)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--clearToBind'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V26 = ('erlang':'put'(V0, case ('un--clearBindIfUnsolved'(V6)) of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.TTImp.Elab.Check.MkEState', V7, V8, V9, V10, V11, ('Idris.Idris2.Data.List':'un--filter'(fun (V21) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V24, V25)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V21)), V1)) end, V12)), V13, V14, V15, V16, V17, V18, V19, V20} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V26} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearBindIfUnsolved'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.TTImp.Elab.Check.MkEState', V1, V2, V3, V4, V5, V6, [], V8, V9, V10, V11, V12, V13, V14} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V12 = (('Idris.Idris2.TTImp.Elab.Term':'un--checkTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10))(V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V38 = case case ('Idris.Idris2.TTImp.Elab.Term':'un--onLHS'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20) -> V15 end(E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> case case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E9, E10, E11, E12, E13, E14} -> (fun (V21, V22, V23, V24, V25, V26) -> V23 end(E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ((case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V27, V28) -> case V10 of {'Idris.Prelude.Types.Just', E4} -> (fun (V29) -> fun () -> fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V29))(V30))), case V31 of {'Idris.Prelude.Types.Left', E5} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V33) -> begin (V34 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V28))(V30))), case V34 of {'Idris.Prelude.Types.Left', E7} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V36) -> ('Idris.Idris2.Core.UnifyState':'un--addPolyConstraint'(V0, V3, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V9)), V8, V27, V33, V36, V30)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun () -> fun (V37) -> {'Idris.Prelude.Types.Right', 0} end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end())(V11)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V38 of {'Idris.Prelude.Types.Left', E21} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V40) -> {'Idris.Prelude.Types.Right', V14} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> begin (V13 = (('un--convertWithLazy'(V0, V1, V2, V3, 1, V7, V5, V6, V9, V12))(V11))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> (('case--checkExp-13954'(V0, V12, V9, V8, V7, V6, V5, V4, V3, V2, V1, V15, case V15 of {'Idris.Core.Unify.MkUnifyResult', E3, E4, E5, E6} -> (fun (V16, V17, V18, V19) -> V16 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V9}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of {'Idris.TTImp.TTImp.ICoerced', E21, E22} -> (fun (V12, V13) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V10, V11)) end(E21, E22)); {'Idris.TTImp.TTImp.ILet', E23, E24, E25, E26, E27, E28, E29} -> (fun (V14, V15, V16, V17, V18, V19, V20) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)) end(E23, E24, E25, E26, E27, E28, E29)); {'Idris.TTImp.TTImp.ILocal', E30, E31, E32} -> (fun (V21, V22, V23) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)) end(E30, E31, E32)); {'Idris.TTImp.TTImp.IUpdate', E33, E34, E35} -> (fun (V24, V25, V26) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)) end(E33, E34, E35)); _ -> begin (V28 = begin (V27 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> begin (V41 = (('Idris.Idris2.TTImp.Elab.Ambiguity':'un--expandAmbigName'(V0, V1, V4, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V35, V36, V37, V38, V39, V40) -> V35 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V8, V9, [], V9, V10))(V11))), case V41 of {'Idris.Prelude.Types.Left', E10} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V43) -> case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V44, V45, V46, V47, V48, V49) -> case V44 of {'Idris.TTImp.Elab.Check.InLHS', E20} -> (fun (V50) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V43, V10, V11)) end(E20)); _ -> begin (V51 = ('Idris.Idris2.TTImp.Elab.Term':'un--insertImpLam'(V1, V3, V8, V43, V10, V11))), case V51 of {'Idris.Prelude.Types.Left', E18} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V53) -> ('un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V53, V10, V11)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--bindingType'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V5 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11) -> V10 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingTerm'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V4 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11) -> V9 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingRig'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V2 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11) -> V7 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingPiInfo'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V3 end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11) -> V8 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindingMetas'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.NameBinding', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('Idris.Idris2.Core.TT':'un--getMetas'(V5)) end(E0, E1, E2, E3, E4)); {'Idris.TTImp.Elab.Check.AsBinding', E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11) -> ('nested--8397-8858--in--un--insertAll'(V6, V11, V10, V9, V8, V7, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(('Idris.Idris2.Core.TT':'un--getMetas'(V10)))), ('Idris.Idris2.Core.TT':'un--getMetas'(V11)))) end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--argVar'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Core.UnifyState':'un--newMetaLets'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 0, 1)).
'un--anyOne'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V5, <<"No elaborators provided"/utf8>>}, V7)) end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V9 of [] -> V11; _ -> fun (V12) -> ('un--try'(V0, V1, V2, V3, V4, V11, ('un--anyOne'(V0, V1, V2, V3, V4, V5, V9)), V12)) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addBindIfUnsolved'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.TTImp.Elab.Check.MkEState', V8, V9, V10, V11, V12, V13, begin (V22 = {'Idris.TTImp.Elab.Check.MkEState', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21}), [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V6, case V22 of {'Idris.TTImp.Elab.Check.MkEState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V26 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}}}}} | V14] end, V15, V16, V17, V18, V19, V20, V21} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
