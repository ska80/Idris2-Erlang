-module('Idris.Idris2.Core.AutoSearch').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in getUsableEnv-2676'/9,
  'case--exactlyOne-2459'/10,
  'case--case block in searchIfHole-1618'/19,
  'nested--11130-4688--in--un--visible'/19,
  'nested--9076-2827--in--un--usableLocalArg'/13,
  'nested--7267-5885--in--un--tryGroups'/16,
  'nested--8596-2431--in--un--normRes'/10,
  'nested--7619-1487--in--un--impl'/2,
  'nested--9515-3214--in--un--findPos'/19,
  'nested--9515-3213--in--un--findDirect'/20,
  'nested--11538-5016--in--un--drop'/14,
  'nested--11538-5017--in--un--concrete'/14,
  'nested--9515-3211--in--un--clearEnvType'/17,
  'nested--9515-3212--in--un--clearEnv'/16,
  'nested--9515-3210--in--un--ambig'/15,
  'nested--7267-5884--in--un--ambig'/14,
  'un--usableLocal'/6,
  'un--successful'/5,
  'un--searchType'/14,
  'un--searchNames'/15,
  'un--searchName'/14,
  'un--searchLocalWith'/14,
  'un--searchLocalVars'/12,
  'un--searchIfHole'/12,
  'un--mkArgs'/8,
  'un--isPairNF'/5,
  'un--impLast'/1,
  'un--getUsableEnv'/5,
  'un--exactlyOne'/9,
  'un--concreteDets'/10,
  'un--checkConcreteDets'/9,
  'un--anyOne'/8,
  'un--abandonIfCycle'/6
]).
'case--case block in getUsableEnv-2676'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> [{'Idris.Builtin.MkPair', {'Idris.Core.TT.Local', ('Idris.Idris2.Core.TT':'un--binderLoc'(V3)), {'Idris.Prelude.Types.Nothing'}, V8}, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V4)), ('Idris.Idris2.Core.TT':'un--binderType'(V3))))} | V7].
'case--exactlyOne-2459'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E6 | E7] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V12, V13) -> fun (V14) -> case V13 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V15, V16) -> case V11 of [] -> begin (V18 = begin (V17 = ('erlang':'put'(V6, V16))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E30} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'put'(V7, V15))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E32} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--commit'(V7, V14))), case V25 of {'Idris.Prelude.Types.Left', E34} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V27) -> {'Idris.Prelude.Types.Right', V12} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V29 = begin (V28 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E24} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V31, V4, V2, V14))), case V32 of {'Idris.Prelude.Types.Left', E26} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V34) -> begin (V37 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('nested--8596-2431--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V35, V36)) end end, V9, [], V14))), case V37 of {'Idris.Prelude.Types.Left', E28} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousSearch', V0, V5, V4, V34, V39}, V14)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23)); _ -> begin (V41 = begin (V40 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E16} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V43, V4, V2, V14))), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V49 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> fun (V48) -> ('nested--8596-2431--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V47, V48)) end end, V9, [], V14))), case V49 of {'Idris.Prelude.Types.Left', E20} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousSearch', V0, V5, V4, V46, V51}, V14)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14, E15)); _ -> fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E8} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V56, V4, V2, V52))), case V57 of {'Idris.Prelude.Types.Left', E10} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V59) -> begin (V62 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V60) -> fun (V61) -> ('nested--8596-2431--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V60, V61)) end end, V9, [], V52))), case V62 of {'Idris.Prelude.Types.Left', E12} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V64) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousSearch', V0, V5, V4, V59, V64}, V52)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6, E7)); [] -> fun (V65) -> begin (V67 = begin (V66 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V66} end), case V67 of {'Idris.Prelude.Types.Left', E36} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V69) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V5, case V69 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V70 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V3, {'Idris.Prelude.Types.Nothing'}}, V65)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V100) -> begin (V102 = begin (V101 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E0} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V104) -> begin (V105 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V7, V0, V104, V4, V2, V100))), case V105 of {'Idris.Prelude.Types.Left', E2} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V107) -> begin (V110 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V108) -> fun (V109) -> ('nested--8596-2431--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V108, V109)) end end, V9, [], V100))), case V110 of {'Idris.Prelude.Types.Left', E4} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V112) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousSearch', V0, V5, V4, V107, V112}, V100)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in searchIfHole-1618'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Core.Context.Context.Hole', E0, E1} -> (fun (V19, V20) -> begin (V41 = case V6 of 1 -> ('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V11, [], V14, {'Idris.Core.Env.Nil'}, case V15 of {'Idris.Core.Context.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V23 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18)); 0 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V41 of {'Idris.Prelude.Types.Left', E22} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V43) -> begin (V52 = begin (V49 = ('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V11, V0, V14, V3, case V2 of {'Idris.Core.AutoSearch.MkArgInfo', E24, E25, E26, E27, E28} -> (fun (V44, V45, V46, V47, V48) -> V48 end(E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V49 of {'Idris.Prelude.Types.Left', E29} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V51) -> ('un--searchType'(V0, V11, V10, V9, V13, V8, V7, V1, V5, 0, V43, V3, V51, V18)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V52 of {'Idris.Prelude.Types.Left', E31} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V11, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Solved arg"/utf8>> end, V3, V54, V18))), case V55 of {'Idris.Prelude.Types.Left', E33} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V57) -> begin (V63 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V11, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Arg meta"/utf8>> end, V3, case V2 of {'Idris.Core.AutoSearch.MkArgInfo', E35, E36, E37, E38, E39} -> (fun (V58, V59, V60, V61, V62) -> V61 end(E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V63 of {'Idris.Prelude.Types.Left', E40} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V65) -> begin (V71 = ('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V11, V10, V3, case V2 of {'Idris.Core.AutoSearch.MkArgInfo', E42, E43, E44, E45, E46} -> (fun (V66, V67, V68, V69, V70) -> V69 end(E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V54, V18))), case V71 of {'Idris.Prelude.Types.Left', E47} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V73) -> case V73 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V97 = (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V79, V80, V81, V82, V83, V84, V85, V86, V87)) end end end end end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V88, V89, V90, V91, V92, V93, V94, V95, V96)) end end end end end end end end end}, V0, V11, V10, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V9, V3))(case V2 of {'Idris.Core.AutoSearch.MkArgInfo', E49, E50, E51, E52, E53} -> (fun (V74, V75, V76, V77, V78) -> V77 end(E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V54))(V18))), case V97 of {'Idris.Prelude.Types.Left', E54} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V99) -> case V99 of {'Idris.Core.Unify.MkUnifyResult', E56, E57, E58, E59} -> (fun (V100, V101, V102, V103) -> case V100 of [] -> {'Idris.Prelude.Types.Right', 0}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V9, case V14 of {'Idris.Core.Context.MkDefs', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133) -> V104 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V4, {'Idris.Prelude.Types.Nothing'}}, V18)) end end(E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'nested--11130-4688--in--un--visible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V19 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V17, V15))(V18))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> case V21 of {'Idris.Prelude.Types.Just', E2} -> (fun (V22) -> case ('Idris.Idris2.Core.Context':'un--visibleInAny'(V16, V17, case V22 of {'Idris.Core.Context.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V32 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V17, V22}}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9076-2827--in--un--usableLocalArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> fun (V13) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V14, V15) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V18, V19)) end end}, V10, V11)) of 1 -> fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> begin (V28 = begin (V25 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V9, V3, V24, V14))(V20))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> (('un--usableLocal'(V3, V9, V8, V7, V6, V27))(V20)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> case V30 of 1 -> (('nested--9076-2827--in--un--usableLocalArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V10)), V11, V15))(V20)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> ('nested--9076-2827--in--un--usableLocalArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V10)), V11, V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7267-5885--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V13 of {'Idris.Prelude.Types.Just', E10} -> (fun (V16) -> case V15 of [] -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V16, V17)) end; _ -> fun (V18) -> case V15 of [E11 | E12] -> (fun (V19, V20) -> case V19 of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V21, V22) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V12, V11, fun (V23) -> begin (V33 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V12, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V24) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V12, V25, V26)) end end, V22, [], V24))), case V27 of {'Idris.Prelude.Types.Left', E15} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search: Trying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V29)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" names "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V31, V32)) end end}, V29))))))))} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V23))), case V33 of {'Idris.Prelude.Types.Left', E17} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V12, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"For target"/utf8>> end, V2, V14, V23))), case V36 of {'Idris.Prelude.Types.Left', E19} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V38) -> ('un--searchNames'(V0, V12, V11, V10, V9, V8, [V1 | V7], V6, V5, V3, V2, V21, V22, V14, V23)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V39) -> case ('nested--7267-5884--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V39)) of 1 -> fun (V40) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V39, V40)) end; 0 -> ('nested--7267-5885--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V39 end, V13))}, V14, V20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V18)) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V15 of [] -> fun (V41) -> begin (V43 = begin (V42 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E31} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V10, case V45 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V46 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V3, {'Idris.Prelude.Types.Nothing'}}, V41)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V76) -> case V15 of [E21 | E22] -> (fun (V77, V78) -> case V77 of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V79, V80) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V12, V11, fun (V81) -> begin (V91 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V12, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V82) -> begin (V85 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V12, V83, V84)) end end, V80, [], V82))), case V85 of {'Idris.Prelude.Types.Left', E25} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V87) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search: Trying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V87)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" names "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V89, V90)) end end}, V87))))))))} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V81))), case V91 of {'Idris.Prelude.Types.Left', E27} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V93) -> begin (V94 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V12, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"For target"/utf8>> end, V2, V14, V81))), case V94 of {'Idris.Prelude.Types.Left', E29} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V96) -> ('un--searchNames'(V0, V12, V11, V10, V9, V8, [V1 | V7], V6, V5, V3, V2, V79, V80, V14, V81)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V97) -> case ('nested--7267-5884--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V97)) of 1 -> fun (V98) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V97, V98)) end; 0 -> ('nested--7267-5885--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V97 end, V13))}, V14, V78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V76)) end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V99) -> case V15 of [E0 | E1] -> (fun (V100, V101) -> case V100 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V102, V103) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V12, V11, fun (V104) -> begin (V114 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V12, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V105) -> begin (V108 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V12, V106, V107)) end end, V103, [], V105))), case V108 of {'Idris.Prelude.Types.Left', E4} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V110) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search: Trying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V110)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" names "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V112, V113)) end end}, V110))))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V104))), case V114 of {'Idris.Prelude.Types.Left', E6} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V116) -> begin (V117 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V12, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"For target"/utf8>> end, V2, V14, V104))), case V117 of {'Idris.Prelude.Types.Left', E8} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V119) -> ('un--searchNames'(V0, V12, V11, V10, V9, V8, [V1 | V7], V6, V5, V3, V2, V102, V103, V14, V104)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V120) -> case ('nested--7267-5884--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V120)) of 1 -> fun (V121) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V120, V121)) end; 0 -> ('nested--7267-5885--in--un--tryGroups'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V120 end, V13))}, V14, V101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V99)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--8596-2431--in--un--normRes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V7, V0, V12, V4, V10, V9)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7619-1487--in--un--impl'(V0, V1) -> case V1 of {'Idris.Core.AutoSearch.MkArgInfo', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.TT.Explicit'} -> (fun () -> 0 end()); _ -> 1 end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9515-3214--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V19, V20, V21, V22, V23) -> case V23 of [E5 | E6] -> (fun (V24, V25) -> case V24 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V26, V27) -> case V25 of [E9 | E10] -> (fun (V28, V29) -> case V28 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V30, V31) -> fun (V32) -> case V29 of [] -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V13, V12, fun (V33) -> ('nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V1, V16, V17, V18, V33)) end, fun (V34) -> fun (V35) -> case ('nested--9515-3210--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V34)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V34, V35)); 0 -> begin (V72 = begin (V36 = ('Idris.Idris2.Core.Context':'un--fstName'(V13, V35))), case V36 of {'Idris.Prelude.Types.Left', E13} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V38) -> (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V11, case V14 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V40 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V39)) end end, fun () -> fun (V70) -> fun (V71) -> {'Idris.Prelude.Types.Right', V70} end end end, V38))(V35)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V72 of {'Idris.Prelude.Types.Left', E45} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V74) -> begin (V111 = begin (V75 = ('Idris.Idris2.Core.Context':'un--sndName'(V13, V35))), case V75 of {'Idris.Prelude.Types.Left', E47} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V77) -> (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V11, case V14 of {'Idris.Core.Context.MkDefs', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V79 end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V78)) end end, fun () -> fun (V109) -> fun (V110) -> {'Idris.Prelude.Types.Right', V109} end end end, V77))(V35)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V111 of {'Idris.Prelude.Types.Left', E79} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V113) -> begin (V114 = ('Idris.Idris2.Core.Context':'un--isPairType'(V13, V20, V35))), case V114 of {'Idris.Prelude.Types.Left', E81} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V116) -> case V116 of 1 -> begin (V117 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V35))), case V117 of {'Idris.Prelude.Types.Left', E83} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V119) -> begin (V120 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V13, V0, V119, V4, V27, V35))), case V120 of {'Idris.Prelude.Types.Left', E85} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V122) -> begin (V123 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V13, V0, V119, V4, V31, V35))), case V123 of {'Idris.Prelude.Types.Left', E87} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V125) -> ('un--exactlyOne'(V0, V13, V12, V11, V4, V5, V18, [fun (V126) -> begin (V127 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V27))(V126))), case V127 of {'Idris.Prelude.Types.Left', E89} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V129) -> (('nested--9515-3214--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, fun (V130) -> ('Idris.Idris2.Core.TT':'un--apply'(V11, {'Idris.Core.TT.Ref', V11, {'Idris.Core.TT.Func'}, V74}, [V122 | [V125 | [(V16(V130)) | []]]])) end, V129, V18))(V126)) end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end | [fun (V131) -> begin (V132 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V31))(V131))), case V132 of {'Idris.Prelude.Types.Left', E91} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V134) -> (('nested--9515-3214--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, fun (V135) -> ('Idris.Idris2.Core.TT':'un--apply'(V11, {'Idris.Core.TT.Ref', V11, {'Idris.Core.TT.Func'}, V113}, [V122 | [V125 | [(V16(V135)) | []]]])) end, V134, V18))(V131)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end | []]], V35)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V11, case V14 of {'Idris.Core.Context.MkDefs', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122} -> (fun (V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165) -> V136 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V32)); _ -> ('nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V32)) end end end(E11, E12)); _ -> fun (V166) -> ('nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V166)) end end end(E9, E10)); _ -> fun (V167) -> ('nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V167)) end end end(E7, E8)); _ -> fun (V168) -> ('nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V168)) end end end(E5, E6)); _ -> fun (V169) -> ('nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V169)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V170) -> ('nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V170)) end end.
'nested--9515-3213--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = ('un--mkArgs'(V0, V13, V12, V11, V10, V4, V17, V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V23, V24) -> begin (V25 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V13, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Trying"/utf8>> end, V4, (V16(V1)), V19))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V13, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Type"/utf8>> end, V4, V17, V19))), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V13, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"For target"/utf8>> end, V4, V18, V19))), case V31 of {'Idris.Prelude.Types.Left', E8} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V33) -> begin (V50 = (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V34, V35, V36, V37, V38, V39, V40, V41)) end end end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V42, V43, V44, V45, V46, V47, V48, V49)) end end end end end end end end}, V0, V13, V12, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V11, V4))(V18))(V24))(V19))), case V50 of {'Idris.Prelude.Types.Left', E10} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V52) -> case V52 of {'Idris.Core.Unify.MkUnifyResult', E12, E13, E14, E15} -> (fun (V53, V54, V55, V56) -> case V53 of [] -> begin (V57 = (('un--usableLocal'(V0, V13, V11, V9, V4, V17))(V19))), case V57 of {'Idris.Prelude.Types.Left', E46} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V59) -> case V59 of 1 -> begin (V66 = ('Idris.Idris2.Core.TT':'un--apply'(V11, (V16(V1)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V60) -> case V60 of {'Idris.Core.AutoSearch.MkArgInfo', E48, E49, E50, E51, E52} -> (fun (V61, V62, V63, V64, V65) -> V64 end(E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V23))))), begin (V67 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V13, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Local var candidate "/utf8>> end, V4, V66, V19))), case V67 of {'Idris.Prelude.Types.Left', E53} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V69) -> begin (V70 = ('nested--9515-3212--in--un--clearEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V1, V4))), begin (V72 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V71) -> ('un--searchIfHole'(V0, V13, V12, V11, V9, V8, 0, V7, V6, V5, V70, V71)) end, ('un--impLast'(V23)), V19))), case V72 of {'Idris.Prelude.Types.Left', E55} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V74) -> {'Idris.Prelude.Types.Right', V66} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> begin (V75 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V13, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Can\x{27}t use "/utf8>> end, V4, V17, V19))), case V75 of {'Idris.Prelude.Types.Left', E57} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V77) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V11, case V14 of {'Idris.Core.Context.MkDefs', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V78 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V19)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V11, case V14 of {'Idris.Core.Context.MkDefs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V108 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V19)) end end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11538-5016--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> []; [E0 | E1] -> (fun (V14, V15) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V18, V19)) end end}, V11, V12)) of 1 -> [V14 | ('nested--11538-5016--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V11)), V12, V15))]; 0 -> ('nested--11538-5016--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V11)), V12, V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11538-5017--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> fun (V18) -> begin (V19 = (((V17(V11))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V6, {'Idris.Core.TT.Erased', V14, 0}))))(V18))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> (('nested--11538-5017--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V21, 0))(V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E6, E7, E8, E9, E10} -> (fun (V22, V23, V24, V25, V26) -> fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V10, V22, 0, V23, V27))), case V28 of {'Idris.Prelude.Types.Left', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V30) -> begin (V33 = ('nested--11538-5016--in--un--drop'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, 0, case V30 of {'Idris.Core.Context.MkSearchData', E13, E14} -> (fun (V31, V32) -> V31 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26))), ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V34) -> fun (V35) -> begin (V36 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V10, V0, V11, V34))(V35))), case V36 of {'Idris.Prelude.Types.Left', E15} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V38) -> (('nested--11538-5017--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V38, 0))(V35)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V39) -> ('Idris.Idris2.Builtin':'un--snd'(V39)) end, V33)), V27)) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9, E10)); {'Idris.Core.Value.NDCon', E17, E18, E19, E20, E21} -> (fun (V40, V41, V42, V43, V44) -> fun (V45) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V46) -> fun (V47) -> begin (V48 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V10, V0, V11, V46))(V47))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> (('nested--11538-5017--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V50, 0))(V47)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V51) -> ('Idris.Idris2.Builtin':'un--snd'(V51)) end, V44)), V45)) end end(E17, E18, E19, E20, E21)); {'Idris.Core.Value.NApp', E24, E25, E26} -> (fun (V52, V53, V54) -> fun (V55) -> case V53 of {'Idris.Core.Value.NMeta', E27, E28, E29} -> (fun (V56, V57, V58) -> case V13 of 1 -> begin (V89 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V56, case V11 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> V59 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V55))), case V89 of {'Idris.Prelude.Types.Left', E60} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V91) -> case V91 of {'Idris.Prelude.Types.Just', E62} -> (fun (V92) -> case V92 of {'Idris.Core.Context.Context.Hole', E63, E64} -> (fun (V93, V94) -> case case V94 of {'Idris.Core.Context.Context.MkHoleFlags', E65, E66} -> (fun (V95, V96) -> V95 end(E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.DeterminingArg', [], V8, V56, V57, {'Idris.Core.Env.Nil'}, V5}, V55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63, E64)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.DeterminingArg', [], V8, V56, V57, {'Idris.Core.Env.Nil'}, V5}, V55)) end end(E62)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.DeterminingArg', [], V8, V56, V57, {'Idris.Core.Env.Nil'}, V5}, V55)) end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V127 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V56, case V11 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> V97 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V55))), case V127 of {'Idris.Prelude.Types.Left', E97} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V129) -> case V129 of {'Idris.Prelude.Types.Just', E129} -> (fun (V130) -> case V130 of {'Idris.Core.Context.Context.Hole', E160, E161} -> (fun (V131, V132) -> case case V132 of {'Idris.Core.Context.Context.MkHoleFlags', E192, E193} -> (fun (V133, V134) -> V133 end(E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V8, case V11 of {'Idris.Core.Context.MkDefs', E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191} -> (fun (V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164) -> V135 end(E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E160, E161)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V8, case V11 of {'Idris.Core.Context.MkDefs', E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159} -> (fun (V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194) -> V165 end(E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V55)) end end(E129)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V8, case V11 of {'Idris.Core.Context.MkDefs', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128} -> (fun (V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224) -> V195 end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V55)) end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E27, E28, E29)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E24, E25, E26)); _ -> fun (V225) -> {'Idris.Prelude.Types.Right', 0} end end.
'nested--9515-3211--in--un--clearEnvType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V14 of 0 -> case V16 of {'Idris.Core.Env.::', E2, E3} -> (fun (V17, V18) -> {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', ('Idris.Idris2.Core.TT':'un--binderLoc'(V17)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V17)), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.Erased', V15, 0}}, V18} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V19 = (V14 - 1)), case V16 of {'Idris.Core.Env.::', E0, E1} -> (fun (V20, V21) -> {'Idris.Core.Env.::', V20, ('nested--9515-3211--in--un--clearEnvType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V19, V15, V21))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--9515-3212--in--un--clearEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V16, V17, V18) -> ('nested--9515-3211--in--un--clearEnvType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, V16, V15)) end(E0, E1, E2)); _ -> V15 end.
'nested--9515-3210--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.Core.AmbiguousSearch', E0, E1, E2, E3, E4} -> (fun (V15, V16, V17, V18, V19) -> 1 end(E0, E1, E2, E3, E4)); _ -> 0 end.
'nested--7267-5884--in--un--ambig'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.Core.AmbiguousSearch', E0, E1, E2, E3, E4} -> (fun (V14, V15, V16, V17, V18) -> 1 end(E0, E1, E2, E3, E4)); _ -> 0 end.
'un--usableLocal'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V6, V7, V8) -> fun (V9) -> case V7 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Core.Name.PV', E6, E7} -> (fun (V13, V14) -> {'Idris.Prelude.Types.Right', 1} end(E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E3, E4, E5)); {'Idris.Core.Value.NLocal', E8, E9} -> (fun (V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V27 = begin (V23 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V21) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V20, V21)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('Idris.Idris2.Builtin':'un--snd'(V22)) end, V8)), [], V9))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> ('un--usableLocal'(V0, V1, V2, V3, V4, V26)) end, V25, [], V9)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V27 of {'Idris.Prelude.Types.Left', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V41)) end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V45, V46, V47, V48)) end end end end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V50)) end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V53, V54, V55)) end end end end end}, fun (V56) -> V56 end, V29))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2)); {'Idris.Core.Value.NTCon', E16, E17, E18, E19, E20} -> (fun (V57, V58, V59, V60, V61) -> fun (V62) -> begin (V63 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V2, case V3 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58, V62))), case V63 of {'Idris.Prelude.Types.Left', E21} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V65) -> (('nested--9076-2827--in--un--usableLocalArg'(V57, V59, V60, V0, V61, V58, V4, V3, V2, V1, 0, case V65 of {'Idris.Core.Context.MkSearchData', E23, E24} -> (fun (V66, V67) -> V66 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V68) -> ('Idris.Idris2.Builtin':'un--snd'(V68)) end, V61))))(V62)) end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NDCon', E25, E26, E27, E28, E29} -> (fun (V69, V70, V71, V72, V73) -> fun (V74) -> begin (V76 = begin (V75 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E30} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V78) -> begin (V85 = begin (V81 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V79) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V78, V79)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V80) -> ('Idris.Idris2.Builtin':'un--snd'(V80)) end, V73)), [], V74))), case V81 of {'Idris.Prelude.Types.Left', E32} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V83) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V84) -> ('un--usableLocal'(V0, V1, V2, V3, V4, V84)) end, V83, [], V74)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V85 of {'Idris.Prelude.Types.Left', E34} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V87) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V95, V96, V97)) end end end end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V99)) end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V103, V104, V105, V106)) end end end end end end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V108)) end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V111, V112, V113)) end end end end end}, fun (V114) -> V114 end, V87))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25, E26, E27, E28, E29)); {'Idris.Core.Value.NBind', E36, E37, E38, E39} -> (fun (V115, V116, V117, V118) -> fun (V119) -> case V117 of {'Idris.Core.TT.Pi', E40, E41, E42, E43} -> (fun (V120, V121, V122, V123) -> begin (V125 = begin (V124 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V124} end), case V125 of {'Idris.Prelude.Types.Left', E44} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V127) -> begin (V128 = (((V118(V127))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, {'Idris.Core.TT.Erased', V115, 0}))))(V119))), case V128 of {'Idris.Prelude.Types.Left', E46} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V130) -> (('un--usableLocal'(V0, V1, V2, V3, V4, V130))(V119)) end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40, E41, E42, E43)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E36, E37, E38, E39)); {'Idris.Core.Value.NErased', E48, E49} -> (fun (V131, V132) -> fun (V133) -> {'Idris.Prelude.Types.Right', 0} end end(E48, E49)); _ -> fun (V134) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--successful'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--branch'(V1, V4))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V14) -> begin (V15 = (V5(V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V27 = begin (V26 = ('erlang':'put'(V2, V10))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E12} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V29) -> begin (V31 = begin (V30 = ('erlang':'put'(V1, V13))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E14} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V33) -> begin (V34 = ('un--successful'(V0, V1, V2, V6, V14))), case V34 of {'Idris.Prelude.Types.Left', E16} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V36) -> {'Idris.Prelude.Types.Right', [{'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', V25, V21}}} | V36]} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V37) -> fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, V10))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V1, V13))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> begin (V47 = ('un--successful'(V0, V1, V2, V6, V38))), case V47 of {'Idris.Prelude.Types.Left', E22} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V49) -> {'Idris.Prelude.Types.Right', [{'Idris.Prelude.Types.Left', V37} | V49]} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Core.TT.Bind', E53, E54, E55, E56} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E110, E111, E112, E113} -> (fun (V18, V19, V20, V21) -> begin (V22 = ('un--searchType'([V15 | V0], V1, V2, V3, V4, V5, [], V7, V8, V9, V10, {'Idris.Core.Env.::', V16, V11}, V17, V13))), case V22 of {'Idris.Prelude.Types.Left', E114} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V14, V15, {'Idris.Core.TT.Lam', V18, V19, V20, V21}, V24}} end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110, E111, E112, E113)); {'Idris.Core.TT.Let', E116, E117, E118, E119} -> (fun (V25, V26, V27, V28) -> begin (V29 = ('un--searchType'([V15 | V0], V1, V2, V3, V4, V5, [], V7, V8, V9, V10, {'Idris.Core.Env.::', V16, V11}, V17, V13))), case V29 of {'Idris.Prelude.Types.Left', E120} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V14, V15, V16, V31}} end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116, E117, E118, E119)); _ -> begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E57} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V35) -> begin (V36 = ('un--abandonIfCycle'(V0, V1, V11, V12, V6, V13))), case V36 of {'Idris.Prelude.Types.Left', E59} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V38) -> begin (V39 = [V12 | V6]), begin (V40 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V35, V11, V12))(V13))), case V40 of {'Idris.Prelude.Types.Left', E61} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V42) -> case V42 of {'Idris.Core.Value.NTCon', E65, E66, E67, E68, E69} -> (fun (V43, V44, V45, V46, V47) -> begin (V48 = {'Idris.Core.Value.NTCon', V43, V44, V45, V46, V47}), case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V46, ('Idris.Idris2.Prelude.Types.List':'un--length'(V47)))) of 1 -> begin (V49 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Next target"/utf8>> end, V11, V48, V13))), case V49 of {'Idris.Prelude.Types.Left', E70} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V5, V44, V13))), case V52 of {'Idris.Prelude.Types.Left', E72} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V54) -> begin (V55 = case V9 of 1 -> ('un--checkConcreteDets'(V0, V1, V2, V3, V5, V11, V10, {'Idris.Core.Value.NTCon', V43, V44, V45, V46, V47}, V13)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E74} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V57) -> case case V5 of 1 -> V9; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> (('nested--7267-5885--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Idris.Prelude.Types.Nothing'}, V48, case V54 of {'Idris.Core.Context.MkSearchData', E76, E77} -> (fun (V58, V59) -> V59 end(E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)); 0 -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V2, ('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V39, V7, V8, V10, V11, V48)), fun (V60) -> case ('nested--7267-5884--in--un--ambig'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V60)) of 1 -> fun (V61) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V60, V61)) end; 0 -> ('nested--7267-5885--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Idris.Prelude.Types.Nothing'}, V48, case V54 of {'Idris.Core.Context.MkSearchData', E78, E79} -> (fun (V62, V63) -> V63 end(E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V35 of {'Idris.Core.Context.MkDefs', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> V64 end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V10, {'Idris.Prelude.Types.Nothing'}}, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65, E66, E67, E68, E69)); _ -> begin (V94 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Next target: "/utf8>> end, V11, V42, V13))), case V94 of {'Idris.Prelude.Types.Left', E63} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V96) -> (('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V39, V7, V8, V10, V11, V42))(V13)) end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54, E55, E56)); _ -> begin (V98 = begin (V97 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E0} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V100) -> begin (V101 = ('un--abandonIfCycle'(V0, V1, V11, V12, V6, V13))), case V101 of {'Idris.Prelude.Types.Left', E2} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V103) -> begin (V104 = [V12 | V6]), begin (V105 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V100, V11, V12))(V13))), case V105 of {'Idris.Prelude.Types.Left', E4} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V107) -> case V107 of {'Idris.Core.Value.NTCon', E8, E9, E10, E11, E12} -> (fun (V108, V109, V110, V111, V112) -> begin (V113 = {'Idris.Core.Value.NTCon', V108, V109, V110, V111, V112}), case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V111, ('Idris.Idris2.Prelude.Types.List':'un--length'(V112)))) of 1 -> begin (V114 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Next target"/utf8>> end, V11, V113, V13))), case V114 of {'Idris.Prelude.Types.Left', E13} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V116) -> begin (V117 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V5, V109, V13))), case V117 of {'Idris.Prelude.Types.Left', E15} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V119) -> begin (V120 = case V9 of 1 -> ('un--checkConcreteDets'(V0, V1, V2, V3, V5, V11, V10, {'Idris.Core.Value.NTCon', V108, V109, V110, V111, V112}, V13)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V120 of {'Idris.Prelude.Types.Left', E17} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V122) -> case case V5 of 1 -> V9; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> (('nested--7267-5885--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Idris.Prelude.Types.Nothing'}, V113, case V119 of {'Idris.Core.Context.MkSearchData', E19, E20} -> (fun (V123, V124) -> V124 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)); 0 -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V2, ('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V104, V7, V8, V10, V11, V113)), fun (V125) -> case ('nested--7267-5884--in--un--ambig'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V125)) of 1 -> fun (V126) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V125, V126)) end; 0 -> ('nested--7267-5885--in--un--tryGroups'(V0, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, {'Idris.Prelude.Types.Nothing'}, V113, case V119 of {'Idris.Core.Context.MkSearchData', E21, E22} -> (fun (V127, V128) -> V128 end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V100 of {'Idris.Core.Context.MkDefs', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158) -> V129 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V10, {'Idris.Prelude.Types.Nothing'}}, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11, E12)); _ -> begin (V159 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Next target: "/utf8>> end, V11, V107, V13))), case V159 of {'Idris.Prelude.Types.Left', E6} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V161) -> (('un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V104, V7, V8, V10, V11, V107))(V13)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--searchNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V12 of [] -> begin (V16 = begin (V15 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V18 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V19 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V9, {'Idris.Prelude.Types.Nothing'}}, V14)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E32 | E33] -> (fun (V49, V50) -> begin (V52 = begin (V51 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E34} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V54) -> begin (V147 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V55) -> fun (V56) -> ('nested--11130-4688--in--un--visible'(V0, V49, V50, V13, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V54 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V57 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [case V54 of {'Idris.Core.Context.MkDefs', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V89 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | case V54 of {'Idris.Core.Context.MkDefs', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> V120 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end], V55, V56)) end end, [V49 | V50], [], V14))), case V147 of {'Idris.Prelude.Types.Left', E126} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V149) -> begin (V151 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V150) -> V150 end, V149))), begin (V154 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V152) -> fun (V153) -> ('un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V152, V153)) end end, V151))), case V11 of 1 -> ('un--anyOne'(V0, V1, V2, V3, V10, V9, V154, V14)); 0 -> ('un--exactlyOne'(V0, V1, V2, V3, V10, V9, V13, V154, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V96 = begin (V20 = ('Idris.Idris2.Core.Context':'un--getNS'(V1, V13))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V1, V13))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> case ('Idris.Idris2.Core.Context':'un--visibleInAny'([V22 | V25], case V15 of {'Idris.Core.Context.Context.MkGlobalDef', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V27 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V15 of {'Idris.Core.Context.Context.MkGlobalDef', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V55 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V19 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V66 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V9, {'Idris.Prelude.Types.Nothing'}}, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V96 of {'Idris.Prelude.Types.Left', E78} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V98) -> begin (V153 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V101, V102)) end end}, {'Idris.Core.Context.Context.BlockedHint'}, case V15 of {'Idris.Core.Context.Context.MkGlobalDef', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V114 end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V19 of {'Idris.Core.Context.MkDefs', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> V123 end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V9, {'Idris.Prelude.Types.Nothing'}}, V13)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V153 of {'Idris.Prelude.Types.Left', E130} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V155) -> begin (V176 = case V15 of {'Idris.Core.Context.Context.MkGlobalDef', E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151} -> (fun (V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175) -> V158 end(E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V208 = case V15 of {'Idris.Core.Context.Context.MkGlobalDef', E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171} -> (fun (V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196) -> case V194 of {'Idris.Core.Context.Context.DCon', E172, E173, E174} -> (fun (V197, V198, V199) -> {'Idris.Core.TT.DataCon', V197, V198} end(E172, E173, E174)); {'Idris.Core.Context.Context.TCon', E175, E176, E177, E178, E179, E180, E181, E182} -> (fun (V200, V201, V202, V203, V204, V205, V206, V207) -> {'Idris.Core.TT.TyCon', V200, V201} end(E175, E176, E177, E178, E179, E180, E181, E182)); _ -> {'Idris.Core.TT.Func'} end end(E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V209 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V19, V10, ('Idris.Idris2.Core.TT':'un--embed'(V176))))(V13))), case V209 of {'Idris.Prelude.Types.Left', E183} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V211) -> begin (V212 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Searching Name "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end, V10, V211, V13))), case V212 of {'Idris.Prelude.Types.Left', E185} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E185)); {'Idris.Prelude.Types.Right', E186} -> (fun (V214) -> begin (V215 = ('un--mkArgs'(V0, V1, V2, V3, V4, V10, V211, V13))), case V215 of {'Idris.Prelude.Types.Left', E187} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V217) -> case V217 of {'Idris.Builtin.MkPair', E189, E190} -> (fun (V218, V219) -> begin (V236 = (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V220, V221, V222, V223, V224, V225, V226, V227)) end end end end end end end end, fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V228, V229, V230, V231, V232, V233, V234, V235)) end end end end end end end end}, V0, V1, V2, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V3, V10))(V11))(V219))(V13))), case V236 of {'Idris.Prelude.Types.Left', E191} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V238) -> case V238 of {'Idris.Core.Unify.MkUnifyResult', E193, E194, E195, E196} -> (fun (V239, V240, V241, V242) -> case V239 of [] -> begin (V243 = ('un--isPairNF'(V1, V10, V211, V19, V13))), case V243 of {'Idris.Prelude.Types.Left', E227} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V245) -> begin (V252 = ('Idris.Idris2.Core.TT':'un--apply'(V3, {'Idris.Core.TT.Ref', V3, V208, V14}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V246) -> case V246 of {'Idris.Core.AutoSearch.MkArgInfo', E229, E230, E231, E232, E233} -> (fun (V247, V248, V249, V250, V251) -> V250 end(E229, E230, E231, E232, E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V218))))), begin (V253 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Candidate "/utf8>> end, V10, V252, V13))), case V253 of {'Idris.Prelude.Types.Left', E234} -> (fun (V254) -> {'Idris.Prelude.Types.Left', V254} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V255) -> begin (V257 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V256) -> ('un--searchIfHole'(V0, V1, V2, V3, V5, V6, V245, V7, V8, V9, V10, V256)) end, ('un--impLast'(V218)), V13))), case V257 of {'Idris.Prelude.Types.Left', E236} -> (fun (V258) -> {'Idris.Prelude.Types.Left', V258} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V259) -> {'Idris.Prelude.Types.Right', V252} end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V19 of {'Idris.Core.Context.MkDefs', E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226} -> (fun (V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289) -> V260 end(E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V9, {'Idris.Prelude.Types.Nothing'}}, V13)) end end(E193, E194, E195, E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V19, V10, V15))(V13))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> (('nested--9515-3214--in--un--findPos'(V0, V14, V15, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V19, V14, fun (V23) -> V23 end, V22, V12))(V13)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchLocalVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V14 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> fun (V13) -> ('un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V11, V13)) end end, ('un--getUsableEnv'(V0, V3, V4, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V10))))), fun (V15) -> ('un--exactlyOne'(V0, V1, V2, V3, V10, V9, V11, V14, V15)) end end.
'un--searchIfHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of 0 -> fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E97} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V16 of {'Idris.Core.Context.MkDefs', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V17 end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V9, {'Idris.Prelude.Types.Nothing'}}, V12)) end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V47 = (V7 - 1)), begin (V53 = case V11 of {'Idris.Core.AutoSearch.MkArgInfo', E0, E1, E2, E3, E4} -> (fun (V48, V49, V50, V51, V52) -> V48 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V59 = case V11 of {'Idris.Core.AutoSearch.MkArgInfo', E5, E6, E7, E8, E9} -> (fun (V54, V55, V56, V57, V58) -> V55 end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V60) -> begin (V62 = begin (V61 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E10} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V64) -> begin (V95 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V53}, case V64 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94) -> V65 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V60))), case V95 of {'Idris.Prelude.Types.Left', E42} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V97) -> case V97 of {'Idris.Prelude.Types.Just', E44} -> (fun (V98) -> begin (V99 = {'Idris.Prelude.Types.Just', V98}), ('case--case block in searchIfHole-1618'(V0, V47, V11, V10, V9, V8, V6, V5, V4, V3, V2, V1, V53, V59, V64, V98, V99, case V98 of {'Idris.Core.Context.Context.MkGlobalDef', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119) -> V117 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V60)) end end(E44)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V121 = begin (V120 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V120} end), case V121 of {'Idris.Prelude.Types.Left', E65} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V123) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V123 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V124 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V9, {'Idris.Prelude.Types.Nothing'}}, V60)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end.
'un--mkArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V19, V7))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V2, <<"sa"/utf8>>, V7))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V1, V0, V22, V5, V15, V7))), case V26 of {'Idris.Prelude.Types.Left', E14} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V4, V13))), begin (V30 = (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V2, V12, V29, V5, V25, V28, {'Idris.Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V5)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 0))(V7))), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V33, V34) -> begin (V35 = ('Idris.Idris2.Core.Unify':'un--setInvertible'(V1, V3, {'Idris.Core.Name.Resolved', V33}, V7))), case V35 of {'Idris.Prelude.Types.Left', E20} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V37) -> begin (V41 = begin (V38 = (((V11(V19))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, V34))))(V7))), case V38 of {'Idris.Prelude.Types.Left', E22} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V40) -> ('un--mkArgs'(V0, V1, V2, V3, V4, V5, V40, V7)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E24} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V43) -> case V43 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V44, V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [{'Idris.Core.AutoSearch.MkArgInfo', V33, V29, V14, V34, V28} | V44], V45}} end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V6}} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V6}} end.
'un--isPairNF'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.Context':'un--isPairType'(V0, V6, V4)) end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NBind', E5, E6, E7, E8} -> (fun (V10, V11, V12, V13) -> case V12 of {'Idris.Core.TT.Pi', E9, E10, E11, E12} -> (fun (V14, V15, V16, V17) -> begin (V18 = (((V13(V3))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Idris.Core.TT.Erased', V10, 0}))))(V4))), case V18 of {'Idris.Prelude.Types.Left', E13} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V20) -> ('un--isPairNF'(V0, V1, V20, V3, V4)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11, E12)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E5, E6, E7, E8)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--impLast'(V0) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Data.List':'un--filter'(fun (V1) -> case ('nested--7619-1487--in--un--impl'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0)), ('Idris.Idris2.Data.List':'un--filter'(fun (V2) -> ('nested--7619-1487--in--un--impl'(V0, V2)) end, V0)))).
'un--getUsableEnv'(V0, V1, V2, V3, V4) -> case V0 of [] -> case V4 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V5, V6) -> case V4 of {'Idris.Core.Env.::', E2, E3} -> (fun (V7, V8) -> begin (V9 = ('un--getUsableEnv'(V6, V1, V2, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V3)), V8))), case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V7)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('case--case block in getUsableEnv-2676'(V5, V6, V8, V7, V3, V2, V1, V9, ('Idris.Idris2.Core.TT':'un--weakenVar'(V3, 0)))); 0 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exactlyOne'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [E2 | E3] -> (fun (V9, V10) -> case V10 of [] -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(V9, fun (V11) -> fun (V12) -> case V11 of {'Idris.Core.Core.CantSolveGoal', E38, E39, E40, E41, E42, E43} -> (fun (V13, V14, V15, V16, V17, V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V11, V12)) end(E38, E39, E40, E41, E42, E43)); _ -> begin (V20 = begin (V19 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V22 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V23 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V12)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V8)); _ -> begin (V53 = ('un--successful'(V0, V1, V2, V7, V8))), case V53 of {'Idris.Prelude.Types.Left', E4} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V55) -> (('case--exactlyOne-2459'(V0, V7, V6, V5, V4, V3, V2, V1, V55, ('Idris.Idris2.Data.Either':'un--rights'(V55))))(V8)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> begin (V56 = ('un--successful'(V0, V1, V2, V7, V8))), case V56 of {'Idris.Prelude.Types.Left', E0} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V58) -> (('case--exactlyOne-2459'(V0, V7, V6, V5, V4, V3, V2, V1, V58, ('Idris.Idris2.Data.Either':'un--rights'(V58))))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V11, V12) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V15, V16)) end end}, V7, V8)) of 1 -> fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V21, V11))(V17))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V25 = (('nested--11538-5017--in--un--concrete'(V0, V11, V12, V8, V7, V6, V5, V4, V3, V2, V1, V21, V24, 1))(V17))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> (('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V7)), V8, V12))(V17)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> ('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V7)), V8, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkConcreteDets'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--isPairType'(V1, V10, V8))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> case V20 of 1 -> case V13 of [E13 | E14] -> (fun (V21, V22) -> case V21 of {'Idris.Builtin.MkPair', E19, E20} -> (fun (V23, V24) -> case V22 of [E25 | E26] -> (fun (V25, V26) -> case V25 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V27, V28) -> case V26 of [] -> begin (V29 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V17, V24))(V8))), case V29 of {'Idris.Prelude.Types.Left', E37} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V1, V0, V17, V28))(V8))), case V32 of {'Idris.Prelude.Types.Left', E39} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V34) -> begin (V35 = ('un--checkConcreteDets'(V0, V1, V2, V3, V4, V5, V6, V31, V8))), case V35 of {'Idris.Prelude.Types.Left', E41} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V37) -> ('un--checkConcreteDets'(V0, V1, V2, V3, V4, V5, V6, V34, V8)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V38 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V10, V8))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> (('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V40 of {'Idris.Core.Context.MkSearchData', E35, E36} -> (fun (V41, V42) -> V41 end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'(V43)) end, V13))))(V8)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31, E32)); _ -> begin (V44 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V10, V8))), case V44 of {'Idris.Prelude.Types.Left', E27} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V46) -> (('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V46 of {'Idris.Core.Context.MkSearchData', E29, E30} -> (fun (V47, V48) -> V47 end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('Idris.Idris2.Builtin':'un--snd'(V49)) end, V13))))(V8)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25, E26)); _ -> begin (V50 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V10, V8))), case V50 of {'Idris.Prelude.Types.Left', E21} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V52) -> (('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V52 of {'Idris.Core.Context.MkSearchData', E23, E24} -> (fun (V53, V54) -> V53 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V55) -> ('Idris.Idris2.Builtin':'un--snd'(V55)) end, V13))))(V8)) end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19, E20)); _ -> begin (V56 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V10, V8))), case V56 of {'Idris.Prelude.Types.Left', E15} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V58) -> (('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V58 of {'Idris.Core.Context.MkSearchData', E17, E18} -> (fun (V59, V60) -> V59 end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V61) -> ('Idris.Idris2.Builtin':'un--snd'(V61)) end, V13))))(V8)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14)); _ -> begin (V62 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V10, V8))), case V62 of {'Idris.Prelude.Types.Left', E9} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V64) -> (('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V64 of {'Idris.Core.Context.MkSearchData', E11, E12} -> (fun (V65, V66) -> V65 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V67) -> ('Idris.Idris2.Builtin':'un--snd'(V67)) end, V13))))(V8)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> begin (V68 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V1, V3, V4, V10, V8))), case V68 of {'Idris.Prelude.Types.Left', E43} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V70) -> begin (V85 = begin (V77 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V71, V72, V73)) end end end, fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V74, V75, V76)) end end end}, V10, V8))), case V77 of {'Idris.Prelude.Types.Left', E45} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V79) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"auto"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Determining arguments for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V81, V82)) end end}, case V70 of {'Idris.Core.Context.MkSearchData', E47, E48} -> (fun (V83, V84) -> V83 end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V8)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V85 of {'Idris.Prelude.Types.Left', E49} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V87) -> (('un--concreteDets'(V0, V1, V2, V3, V4, V5, V6, 0, case V70 of {'Idris.Core.Context.MkSearchData', E51, E52} -> (fun (V88, V89) -> V88 end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V90) -> ('Idris.Idris2.Builtin':'un--snd'(V90)) end, V13))))(V8)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--anyOne'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V11 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E32 | E33] -> (fun (V42, V43) -> case V43 of [] -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(V42, fun (V44) -> fun (V45) -> case V44 of {'Idris.Core.Core.CantSolveGoal', E66, E67, E68, E69, E70, E71} -> (fun (V46, V47, V48, V49, V50, V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V44, V45)) end(E66, E67, E68, E69, E70, E71)); _ -> begin (V53 = begin (V52 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V52} end), case V53 of {'Idris.Prelude.Types.Left', E34} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantSolveGoal', [], V3, case V55 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V56 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V5, {'Idris.Prelude.Types.Nothing'}}, V45)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V7)); _ -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V1, V2, V42, fun (V86) -> ('un--anyOne'(V0, V1, V2, V3, V4, V5, V43, V86)) end, V7)) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--abandonIfCycle'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Normalise.Convert':'dn--un--convert_Convert_Term'(V1, V0, V11, V2, V3, V6, V5))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Cycle in search"/utf8>>}, V5)); 0 -> ('un--abandonIfCycle'(V0, V1, V2, V3, V7, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
