-module('Idris.Idris2.Idris.Package.Init').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--interactive,mstring-2772'/2,
  'case--isModuleIdent-2468'/2,
  'nested--4705-2486--in--un--validFile'/3,
  'nested--4705-2487--in--un--validDirectory'/3,
  'nested--4993-2767--in--un--mstring'/1,
  'nested--4766-2551--in--un--go'/4,
  'un--packageTree'/1,
  'un--isModuleIdent'/1,
  'un--interactive'/1,
  'un--findModules'/2
]).
'case--interactive,mstring-2772'(V0, V1) -> case V1 of <<""/utf8>> -> {'Idris.Prelude.Types.Nothing'}; _ -> {'Idris.Prelude.Types.Just', V1} end.
'case--isModuleIdent-2468'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--isUpper'(V2)) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, fun (V30) -> ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V30)) end, V1)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4705-2486--in--un--validFile'(V0, V1, V2) -> case ('Idris.Idris2.Libraries.Utils.Path':'un--splitFileName'(('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V2)))) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case ('un--isModuleIdent'(V3)) of 1 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V7, V8)) end end}, V4, [<<"idr"/utf8>> | [<<"lidr"/utf8>> | []]])); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4705-2487--in--un--validDirectory'(V0, V1, V2) -> ('un--isModuleIdent'(('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V2)))).
'nested--4993-2767--in--un--mstring'(V0) -> ('case--interactive,mstring-2772'(V0, ('Idris.Idris2.Data.String':'un--trim'(V0)))).
'nested--4766-2551--in--un--go'(V0, V1, V2, V3) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V8, V9) -> begin (V10 = (V9(V3))), begin (V19 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V11, V12)) end end, case V10 of {'Idris.Libraries.System.Directory.Tree.MkTree', E6, E7} -> (fun (V13, V14) -> V13 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V15) -> begin (V16 = ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Libraries.Utils.Path':'un--splitFileName'(('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V15))))))), begin (V17 = ('Idris.Idris2.Core.Name.Namespace':'un--unsafeFoldModuleIdent'([V16 | V6]))), begin (V18 = ('Idris.Idris2.Libraries.System.Directory.Tree':'un--toFilePath'(V8, V15))), {'Idris.Builtin.MkPair', V17, V18} end end end end))), begin (V27 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V20, V21)) end end, case V10 of {'Idris.Libraries.System.Directory.Tree.MkTree', E8, E9} -> (fun (V22, V23) -> V23 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V24) -> case V24 of {'Idris.Builtin.DPair.MkDPair', E10, E11} -> (fun (V25, V26) -> {'Idris.Builtin.MkPair', [('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V25)) | V6], {'Idris.Builtin.DPair.MkDPair', ('Idris.Idris2.Libraries.Utils.Path':'un--/>'(V8, ('Idris.Idris2.Libraries.System.Directory.Tree':'un--fileName'(V25)))), V26}} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))), ('nested--4766-2551--in--un--go'(V0, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V1)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V27, V5)), V3)) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--packageTree'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> ('Idris.Idris2.Libraries.System.Directory.Tree':'un--filter'(fun (V7) -> fun (V8) -> ('nested--4705-2486--in--un--validFile'(V0, V7, V8)) end end, fun (V9) -> fun (V10) -> ('nested--4705-2487--in--un--validDirectory'(V0, V9, V10)) end end, V0, V6)) end, fun (V11) -> ('Idris.Idris2.Libraries.System.Directory.Tree':'un--explore'(V0, V11)) end)).
'un--isModuleIdent'(V0) -> ('case--isModuleIdent-2468'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--interactive'(V0) -> begin (V70 = (('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, <<"Package name: "/utf8>>)), ('Idris.Idris2.Prelude.IO':'un--getLine'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}))))(V0))), begin (V140 = (('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> V77 end end end, fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V81(V83))), begin (V85 = (V82(V83))), (V84(V85)) end end end end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V88, V89, V90)) end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> V92 end end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> begin (V99 = (V96(V98))), begin (V100 = (V97(V98))), (V99(V100)) end end end end end end end}, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> begin (V106 = (V103(V105))), ((V104(V106))(V105)) end end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> begin (V110 = (V108(V109))), (V110(V109)) end end end end}, fun (V111) -> fun (V112) -> V112 end end}, <<"Package authors: "/utf8>>)), ('Idris.Idris2.Prelude.IO':'un--getLine'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V115, V116, V117)) end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> V119 end end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V123(V125))), begin (V127 = (V124(V125))), (V126(V127)) end end end end end end end}, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), ((V131(V133))(V132)) end end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V135(V136))), (V137(V136)) end end end end}, fun (V138) -> fun (V139) -> V139 end end}))))(V0))), begin (V210 = (('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V143, V144, V145)) end end end end end, fun (V146) -> fun (V147) -> fun (V148) -> V147 end end end, fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> begin (V154 = (V151(V153))), begin (V155 = (V152(V153))), (V154(V155)) end end end end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V158, V159, V160)) end end end end end, fun (V161) -> fun (V162) -> fun (V163) -> V162 end end end, fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> begin (V169 = (V166(V168))), begin (V170 = (V167(V168))), (V169(V170)) end end end end end end end}, fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> begin (V176 = (V173(V175))), ((V174(V176))(V175)) end end end end end end, fun (V177) -> fun (V178) -> fun (V179) -> begin (V180 = (V178(V179))), (V180(V179)) end end end end}, fun (V181) -> fun (V182) -> V182 end end}, <<"Package options: "/utf8>>)), ('Idris.Idris2.Prelude.IO':'un--getLine'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V185, V186, V187)) end end end end end, fun (V188) -> fun (V189) -> fun (V190) -> V189 end end end, fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> begin (V196 = (V193(V195))), begin (V197 = (V194(V195))), (V196(V197)) end end end end end end end}, fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> begin (V203 = (V200(V202))), ((V201(V203))(V202)) end end end end end end, fun (V204) -> fun (V205) -> fun (V206) -> begin (V207 = (V205(V206))), (V207(V206)) end end end end}, fun (V208) -> fun (V209) -> V209 end end}))))(V0))), begin (V280 = (('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V213, V214, V215)) end end end end end, fun (V216) -> fun (V217) -> fun (V218) -> V217 end end end, fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> begin (V224 = (V221(V223))), begin (V225 = (V222(V223))), (V224(V225)) end end end end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V228, V229, V230)) end end end end end, fun (V231) -> fun (V232) -> fun (V233) -> V232 end end end, fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> begin (V239 = (V236(V238))), begin (V240 = (V237(V238))), (V239(V240)) end end end end end end end}, fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> begin (V246 = (V243(V245))), ((V244(V246))(V245)) end end end end end end, fun (V247) -> fun (V248) -> fun (V249) -> begin (V250 = (V248(V249))), (V250(V249)) end end end end}, fun (V251) -> fun (V252) -> V252 end end}, <<"Source directory: "/utf8>>)), ('Idris.Idris2.Prelude.IO':'un--getLine'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V255, V256, V257)) end end end end end, fun (V258) -> fun (V259) -> fun (V260) -> V259 end end end, fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> begin (V266 = (V263(V265))), begin (V267 = (V264(V265))), (V266(V267)) end end end end end end end}, fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> begin (V273 = (V270(V272))), ((V271(V273))(V272)) end end end end end end, fun (V274) -> fun (V275) -> fun (V276) -> begin (V277 = (V275(V276))), (V277(V276)) end end end end}, fun (V278) -> fun (V279) -> V279 end end}))))(V0))), begin (V281 = ('nested--4993-2767--in--un--mstring'(V280))), begin (V282 = ('un--findModules'(V281, V0))), begin (V313 = case ('Idris.Idris2.Idris.Package.Types':'un--initPkgDesc'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<"project"/utf8>> end, ('nested--4993-2767--in--un--mstring'(V70)))))) of {'Idris.Idris.Package.Types.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307) -> {'Idris.Idris.Package.Types.MkPkgDesc', V283, V284, ('nested--4993-2767--in--un--mstring'(V140)), V286, V287, V288, V289, V290, V291, V292, V293, V282, V295, V296, V297, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V310, V311)) end end end end, fun (V312) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V312} end, ('nested--4993-2767--in--un--mstring'(V210)))), V281, V300, V301, V302, V303, V304, V305, V306, V307} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), V313 end end end end end end end.
'un--findModules'(V0, V1) -> begin (V31 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end})) end, fun () -> fun (V29) -> fun (V30) -> {'Idris.Prelude.Types.Just', V29} end end end, V0))(V1))), case V31 of {'Idris.Prelude.Types.Just', E0} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Libraries.Utils.Path':'un--parse'(V32))), begin (V34 = (('un--packageTree'(V33))(V1))), begin (V36 = ('nested--4766-2551--in--un--go'(V0, [], [{'Idris.Builtin.MkPair', [], {'Idris.Builtin.DPair.MkDPair', V33, fun (V35) -> V34 end}} | []], V1))), ('Idris.Idris2.Data.List':'un--sortBy'(fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(('Idris.Idris2.Builtin':'un--snd'(V37)), ('Idris.Idris2.Builtin':'un--snd'(V38)))) end end, V36)) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
