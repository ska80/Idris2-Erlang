-module('Idris.Idris2.Core.Env').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in uniqifyEnv,uenv-2224'/8,
  'case--case block in uniqifyEnv,uenv-2150'/9,
  'nested--5261-2047--in--un--uniqueLocal'/4,
  'nested--5261-2048--in--un--uenv'/5,
  'nested--5261-2046--in--un--next'/3,
  'nested--4705-1617--in--un--findUsedArgs'/10,
  'nested--4705-1550--in--un--eqNat'/8,
  'nested--4705-1632--in--un--dropS'/8,
  'un--uniqifyEnv'/2,
  'un--toVar'/2,
  'un--shrinkEnv'/2,
  'un--namesNoLet'/2,
  'un--mkShrinkSub'/3,
  'un--mkShrink'/2,
  'un--mkEnv'/2,
  'un--letToLam'/1,
  'un--lengthNoLet'/1,
  'un--length'/1,
  'un--isUsed'/2,
  'un--getBinderUnder'/5,
  'un--getBinderLoc'/3,
  'un--getBinder'/4,
  'un--findUsedLocs'/3,
  'un--findUsedInBinder'/4,
  'un--findUsed'/4,
  'un--findSubEnv'/3,
  'un--extend'/3,
  'un--defined'/3,
  'un--bindEnv'/4,
  'un--allVarsNoLet'/2,
  'un--allVars'/2,
  'un--abstractFullEnvType'/4,
  'un--abstractEnvType'/4,
  'un--abstractEnv'/4
]).
'case--case block in uniqifyEnv,uenv-2224'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> begin (V13 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V12) -> ('Idris.Idris2.Core.TT':'un--renameVars'(V11, V12)) end, V5))), {'Idris.Builtin.DPair.MkDPair', [V2 | V8], {'Idris.Builtin.MkPair', {'Idris.Core.Env.::', V13, V10}, (1 + V11)}} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in uniqifyEnv,uenv-2150'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> begin (V14 = ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V13) -> ('Idris.Idris2.Core.TT':'un--renameVars'(V12, V13)) end, V5))), {'Idris.Builtin.DPair.MkDPair', [V7 | V9], {'Idris.Builtin.MkPair', {'Idris.Core.Env.::', V14, V11}, (1 + V12)}} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5261-2047--in--un--uniqueLocal'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V3, V2)) of 1 -> ('nested--5261-2047--in--un--uniqueLocal'(V0, V1, V2, ('nested--5261-2046--in--un--next'(V0, V1, V3)))); 0 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5261-2048--in--un--uenv'(V0, V1, V2, V3, V4) -> case V2 of [] -> case V4 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Builtin.MkPair', {'Idris.Core.Env.Nil'}, 0}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V5, V6) -> case V4 of {'Idris.Core.Env.::', E2, E3} -> (fun (V7, V8) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V5, V3)) of 1 -> begin (V13 = ('nested--5261-2047--in--un--uniqueLocal'(V0, V1, V3, V5))), ('case--case block in uniqifyEnv,uenv-2150'(V0, V1, V5, V6, V8, V7, V3, V13, ('nested--5261-2048--in--un--uenv'(V0, V1, V6, [V13 | V3], V8)))) end; 0 -> ('case--case block in uniqifyEnv,uenv-2224'(V0, V1, V5, V6, V8, V7, V3, ('nested--5261-2048--in--un--uenv'(V0, V1, V6, [V5 | V3], V8)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5261-2046--in--un--next'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Name.MN', V3, ((V4 + 1) rem 9223372036854775808)} end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V5) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V5)), 0} end(E2)); {'Idris.Core.Name.NS', E3, E4} -> (fun (V6, V7) -> {'Idris.Core.Name.NS', V6, ('nested--5261-2046--in--un--next'(V0, V1, V7))} end(E3, E4)); _ -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), 0} end.
'nested--4705-1617--in--un--findUsedArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> V8; [E0 | E1] -> (fun (V10, V11) -> ('nested--4705-1617--in--un--findUsedArgs'(V0, V1, V2, V3, V4, V5, V6, V7, ('un--findUsed'(V0, V7, V8, V10)), V11)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4705-1550--in--un--eqNat'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)).
'nested--4705-1632--in--un--dropS'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> case V8 of 0 -> ('nested--4705-1632--in--un--dropS'(V0, V1, V2, V3, V4, V5, V6, V9)); _ -> begin (V10 = (V8 - 1)), [V10 | ('nested--4705-1632--in--un--dropS'(V0, V1, V2, V3, V4, V5, V6, V9))] end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--uniqifyEnv'(V0, V1) -> ('nested--5261-2048--in--un--uenv'(V0, V1, V0, [], V1)).
'un--toVar'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V1 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> begin (V4 = (V1 - 1)), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--toVar'(V3, V4)), fun (V5) -> {'Idris.Prelude.Types.Just', (1 + V5)} end)) end end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--shrinkEnv'(V0, V1) -> case V1 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Prelude.Types.Just', V0} end()); _ -> case V0 of {'Idris.Core.Env.::', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.TT.DropCons', E2} -> (fun (V4) -> ('un--shrinkEnv'(V3, V4)) end(E2)); {'Idris.Core.TT.KeepCons', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--shrinkEnv'(V3, V5)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkBinder'(V2, V5)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Env.::', V7, V6})) end)) end)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--namesNoLet'(V0, V1) -> case V0 of [] -> case V1 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--namesNoLet'(V3, V5)) end(E4, E5, E6, E7)); _ -> [V2 | ('un--namesNoLet'(V3, V5))] end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkShrinkSub'(V0, V1, V2) -> case V1 of [] -> case ('un--isUsed'(0, V2)) of 1 -> {'Idris.Builtin.DPair.MkDPair', [V0 | []], {'Idris.Core.TT.KeepCons', {'Idris.Core.TT.SubRefl'}}}; 0 -> {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V3, V4) -> case ('un--mkShrinkSub'(V3, V4, ('Idris.Idris2.Core.TT':'un--dropFirst'(V2)))) of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V5, V6) -> case ('un--isUsed'(0, V2)) of 1 -> {'Idris.Builtin.DPair.MkDPair', [V0 | V5], {'Idris.Core.TT.KeepCons', V6}}; 0 -> {'Idris.Builtin.DPair.MkDPair', V5, {'Idris.Core.TT.DropCons', V6}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkShrink'(V0, V1) -> case V0 of [] -> {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Core.TT.SubRefl'}}; [E0 | E1] -> (fun (V2, V3) -> ('un--mkShrinkSub'(V2, V3, V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkEnv'(V0, V1) -> case V1 of [] -> {'Idris.Core.Env.Nil'}; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Core.Env.::', {'Idris.Core.TT.PVar', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.Erased', V0, 0}}, ('un--mkEnv'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--letToLam'(V0) -> case V0 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.TT.Let', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V3, V4, {'Idris.Core.TT.Explicit'}, V6}, ('un--letToLam'(V2))} end(E2, E3, E4, E5)); _ -> {'Idris.Core.Env.::', V1, ('un--letToLam'(V2))} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lengthNoLet'(V0) -> case V0 of {'Idris.Core.Env.Nil'} -> (fun () -> 0 end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.TT.Let', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> ('un--lengthNoLet'(V2)) end(E2, E3, E4, E5)); _ -> (1 + ('un--lengthNoLet'(V2))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--length'(V0) -> case V0 of {'Idris.Core.Env.Nil'} -> (fun () -> 0 end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V1, V2) -> (1 + ('un--length'(V2))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isUsed'(V0, V1) -> case V1 of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, ('Idris.Idris2.Core.TT':'un--varIdx'(V2)))) of 1 -> 1; 0 -> ('un--isUsed'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBinderUnder'(V0, V1, V2, V3, V4) -> case V1 of [E0 | E1] -> (fun (V5, V6) -> case V2 of 0 -> case V4 of {'Idris.Core.Env.::', E4, E5} -> (fun (V7, V8) -> ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V9) -> case V0 of {'Idris.Core.TT.dn--un--__mkWeaken', E6, E7} -> (fun (V10, V11) -> ((((V11('erased'))('erased'))(('Idris.Idris2.Core.TT.SizeOf':'un--reverse'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'([V5 | V3]))))))(V9)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V12 = (V2 - 1)), case V4 of {'Idris.Core.Env.::', E2, E3} -> (fun (V13, V14) -> ('un--getBinderUnder'(V0, V6, V12, [V5 | V3], V14)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBinderLoc'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V1 of 0 -> case V2 of {'Idris.Core.Env.::', E4, E5} -> (fun (V5, V6) -> ('Idris.Idris2.Core.TT':'un--binderLoc'(V5)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V7 = (V1 - 1)), case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V8, V9) -> ('un--getBinderLoc'(V4, V7, V9)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getBinder'(V0, V1, V2, V3) -> ('un--getBinderUnder'(V0, V1, V2, [], V3)).
'un--findUsedLocs'(V0, V1, V2) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V3) -> ('un--toVar'(V0, V3)) end, ('un--findUsed'(V0, V1, [], V2)))).
'un--findUsedInBinder'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V6)), V7)) end(E0, E1, E2, E3)); {'Idris.Core.TT.PLet', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V10)), V11)) end(E4, E5, E6, E7)); _ -> ('un--findUsed'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'(V3)))) end.
'un--findUsed'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> case ('Idris.Idris2.Data.List':'un--elemBy'(fun (V7) -> fun (V8) -> ('nested--4705-1550--in--un--eqNat'(V0, V6, V5, V4, V2, V1, V7, V8)) end end, V6, V2)) of 1 -> V2; 0 -> ('un--findUsedInBinder'(V0, V1, [V6 | V2], ('un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V11)) end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V14, V15)) end end end end}, V0, V6, V1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E3, E4, E5, E6} -> (fun (V16, V17, V18, V19) -> ('nested--4705-1617--in--un--findUsedArgs'(V0, V16, V17, V18, V19, V2, V1, V1, V2, V19)) end(E3, E4, E5, E6)); {'Idris.Core.TT.Bind', E7, E8, E9, E10} -> (fun (V20, V21, V22, V23) -> ('nested--4705-1632--in--un--dropS'(V0, V21, V23, V22, V20, V2, V1, ('un--findUsed'([V21 | V0], {'Idris.Core.Env.::', V22, V1}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> (1 + V24) end, ('un--findUsedInBinder'(V0, V1, V2, V22)))), V23)))) end(E7, E8, E9, E10)); {'Idris.Core.TT.App', E11, E12, E13} -> (fun (V25, V26, V27) -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V26)), V27)) end(E11, E12, E13)); {'Idris.Core.TT.As', E14, E15, E16, E17} -> (fun (V28, V29, V30, V31) -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V30)), V31)) end(E14, E15, E16, E17)); {'Idris.Core.TT.TDelayed', E18, E19, E20} -> (fun (V32, V33, V34) -> ('un--findUsed'(V0, V1, V2, V34)) end(E18, E19, E20)); {'Idris.Core.TT.TDelay', E21, E22, E23, E24} -> (fun (V35, V36, V37, V38) -> ('un--findUsed'(V0, V1, ('un--findUsed'(V0, V1, V2, V37)), V38)) end(E21, E22, E23, E24)); {'Idris.Core.TT.TForce', E25, E26, E27} -> (fun (V39, V40, V41) -> ('un--findUsed'(V0, V1, V2, V41)) end(E25, E26, E27)); _ -> V2 end.
'un--findSubEnv'(V0, V1, V2) -> ('un--mkShrink'(V0, ('un--findUsedLocs'(V0, V1, V2)))).
'un--extend'(V0, V1, V2) -> {'Idris.Core.Env.::', V1, V2}.
'un--defined'(V0, V1, V2) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V3, V4) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V5, V6) -> case ('Idris.Idris2.Core.Name':'un--nameEq'(V1, V3)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--defined'(V4, V1, V6)), fun (V7) -> case V7 of {'Idris.Core.Env.MkIsDefined', E4, E5} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Env.MkIsDefined', (1 + V8), V9})) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V10) -> case V10 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Core.Env.MkIsDefined', 0, ('Idris.Idris2.Core.TT':'un--multiplicity'(V5))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindEnv'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> V3 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V6, V7) -> ('un--bindEnv'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, {'Idris.Core.TT.PVar', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}, V3})) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allVarsNoLet'(V0, V1) -> case V0 of [] -> case V1 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V10)) end, ('un--allVars'(V3, V5)))) end(E4, E5, E6, E7)); _ -> [0 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V11)) end, ('un--allVars'(V3, V5))))] end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allVars'(V0, V1) -> case V0 of [] -> case V1 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V4, V5) -> [0 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V6)) end, ('un--allVars'(V3, V5))))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--abstractFullEnvType'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> V3 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> ('un--abstractFullEnvType'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, {'Idris.Core.TT.Pi', V8, V9, V10, V11}, V3})) end(E4, E5, E6, E7)); _ -> begin (V12 = {'Idris.Core.TT.Pi', V1, ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}), ('un--abstractFullEnvType'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, V12, V3})) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--abstractEnvType'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> V3 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V6, V7) -> case V6 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> ('un--abstractEnvType'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, {'Idris.Core.TT.Let', V8, V9, V10, V11}, V3})) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> ('un--abstractEnvType'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, {'Idris.Core.TT.Pi', V12, V13, V14, V15}, V3})) end(E8, E9, E10, E11)); _ -> begin (V16 = {'Idris.Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}), ('un--abstractEnvType'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, V16, V3})) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--abstractEnv'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> V3 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V6, V7) -> case V6 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> ('un--abstractEnv'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, {'Idris.Core.TT.Let', V8, V9, V10, V11}, V3})) end(E4, E5, E6, E7)); _ -> begin (V12 = {'Idris.Core.TT.Lam', ('Idris.Idris2.Core.TT':'un--binderLoc'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V6))}), ('un--abstractEnv'(V5, V1, V7, {'Idris.Core.TT.Bind', V1, V4, V12, V3})) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
