-module('Idris.Idris2.Libraries.Text.Bounded').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--traverse_Traversable_WithBounds'/3,
  'dn--un--toList_Foldable_WithBounds'/1,
  'dn--un--show_Show_Bounds'/1,
  'dn--un--show_Show_(WithBounds $ty)'/2,
  'dn--un--showPrec_Show_Bounds'/2,
  'dn--un--showPrec_Show_(WithBounds $ty)'/3,
  'dn--un--null_Foldable_WithBounds'/1,
  'dn--un--map_Functor_WithBounds'/2,
  'dn--un--foldr_Foldable_WithBounds'/3,
  'dn--un--foldl_Foldable_WithBounds'/3,
  'dn--un--foldlM_Foldable_WithBounds'/4,
  'dn--un--foldMap_Foldable_WithBounds'/3,
  'dn--un--__Impl_Traversable_WithBounds'/0,
  'dn--un--__Impl_Show_(WithBounds $ty)'/1,
  'dn--un--__Impl_Functor_WithBounds'/4,
  'dn--un--__Impl_Foldable_WithBounds'/0,
  'dn--un--__Impl_Eq_Bounds'/0,
  'dn--un--__Impl_Eq_(WithBounds $ty)'/1,
  'dn--un--==_Eq_Bounds'/2,
  'dn--un--==_Eq_(WithBounds $ty)'/3,
  'dn--un--/=_Eq_Bounds'/2,
  'dn--un--/=_Eq_(WithBounds $ty)'/3,
  'un--startBounds'/1,
  'un--start'/1,
  'un--removeIrrelevance'/1,
  'un--mergeBounds'/2,
  'un--joinBounds'/1,
  'un--irrelevantBounds'/1,
  'un--endBounds'/1,
  'un--end'/1
]).
'dn--un--traverse_Traversable_WithBounds'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V6, V7, V8) -> V6 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V9) -> {'Idris.Libraries.Text.Bounded.MkBounded', V9, V4, V5} end, (V1(V3)))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toList_Foldable_WithBounds'(V0) -> ('dn--un--foldr_Foldable_WithBounds'(fun (V1) -> fun (V2) -> [V1 | V2] end end, [], V0)).
'dn--un--show_Show_Bounds'(V0) -> ('dn--un--showPrec_Show_Bounds'({'Idris.Prelude.Show.Open'}, V0)).
'dn--un--show_Show_(WithBounds $ty)'(V0, V1) -> ('dn--un--showPrec_Show_(WithBounds $ty)'(V0, {'Idris.Prelude.Show.Open'}, V1)).
'dn--un--showPrec_Show_Bounds'(V0, V1) -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounds', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"MkBounds"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, [('Idris.Idris2.Prelude.Show':'un--showArg'({'Idris.Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V35, V36)) end end}, V2)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V38, V39)) end end}, V3)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V41, V42)) end end}, V4)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Idris.Prelude.Show.MkShow', fun (V43) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V44, V45)) end end}, V5)) | []]]]])))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_(WithBounds $ty)'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V1, <<"MkBounded"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, [('Idris.Idris2.Prelude.Show':'un--showArg'({'Idris.Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Bool'(V35, V36)) end end}, V4)) | [('Idris.Idris2.Prelude.Show':'un--showArg'(V0, V3)) | [('Idris.Idris2.Prelude.Show':'un--showArg'({'Idris.Prelude.Show.MkShow', fun (V37) -> ('dn--un--show_Show_Bounds'(V37)) end, fun (V38) -> fun (V39) -> ('dn--un--showPrec_Show_Bounds'(V38, V39)) end end}, V5)) | []]]])))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--null_Foldable_WithBounds'(V0) -> ('dn--un--foldr_Foldable_WithBounds'(fun (V1) -> fun (V2) -> fun () -> 0 end end end, fun () -> 1 end, V0)).
'dn--un--map_Functor_WithBounds'(V0, V1) -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Libraries.Text.Bounded.MkBounded', (V0(V2)), V3, V4} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldr_Foldable_WithBounds'(V0, V1, V2) -> ((V0(case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1)).
'dn--un--foldl_Foldable_WithBounds'(V0, V1, V2) -> (('dn--un--foldr_Foldable_WithBounds'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> (V5((V6(V7)))) end end end, fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V0, V3, V8)) end, V4)) end end, fun (V9) -> V9 end, V2))(V1)).
'dn--un--foldlM_Foldable_WithBounds'(V0, V1, V2, V3) -> ('dn--un--foldl_Foldable_WithBounds'(fun (V4) -> fun (V5) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V5, V9)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))(V2)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)).
'dn--un--foldMap_Foldable_WithBounds'(V0, V1, V2) -> ('dn--un--foldr_Foldable_WithBounds'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V5, V6) -> ((V5((V1(V3))))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--__Impl_Traversable_WithBounds'() -> {'Idris.Prelude.Interfaces.MkTraversable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--map_Functor_WithBounds'(V2, V3)) end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--foldr_Foldable_WithBounds'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldl_Foldable_WithBounds'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('dn--un--null_Foldable_WithBounds'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldlM_Foldable_WithBounds'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('dn--un--toList_Foldable_WithBounds'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--foldMap_Foldable_WithBounds'(V27, V28, V29)) end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_WithBounds'(V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Show_(WithBounds $ty)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(WithBounds $ty)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(WithBounds $ty)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Functor_WithBounds'(V0, V1, V2, V3) -> ('dn--un--map_Functor_WithBounds'(V2, V3)).
'dn--un--__Impl_Foldable_WithBounds'() -> {'Idris.Prelude.Interfaces.MkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--foldr_Foldable_WithBounds'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--foldl_Foldable_WithBounds'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('dn--un--null_Foldable_WithBounds'(V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--foldlM_Foldable_WithBounds'(V15, V16, V17, V18)) end end end end end end end, fun (V19) -> fun (V20) -> ('dn--un--toList_Foldable_WithBounds'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--foldMap_Foldable_WithBounds'(V23, V24, V25)) end end end end end}.
'dn--un--__Impl_Eq_Bounds'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Bounds'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Bounds'(V2, V3)) end end}.
'dn--un--__Impl_Eq_(WithBounds $ty)'(V0) -> {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(WithBounds $ty)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(WithBounds $ty)'(V0, V3, V4)) end end}.
'dn--un--==_Eq_Bounds'(V0, V1) -> case V0 of {'Idris.Libraries.Text.Bounded.MkBounds', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounds', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V6)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V3, V7)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V4, V8)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V5, V9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_(WithBounds $ty)'(V0, V1, V2) -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V3, V4, V5) -> case V2 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V6, V7, V8) -> case case V0 of {'Idris.Prelude.EqOrd.MkEq', E6, E7} -> (fun (V9, V10) -> ((V9(V3))(V6)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V4, V7)) of 1 -> ('dn--un--==_Eq_Bounds'(V5, V8)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_Bounds'(V0, V1) -> case ('dn--un--==_Eq_Bounds'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(WithBounds $ty)'(V0, V1, V2) -> case ('dn--un--==_Eq_(WithBounds $ty)'(V0, V1, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--startBounds'(V0) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Libraries.Text.Bounded.MkBounds', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Libraries.Text.Bounded.MkBounds', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V6 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--start'(V0) -> ('un--startBounds'(case V0 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V1, V2, V3) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--removeIrrelevance'(V0) -> case V0 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V1, V2, V3) -> {'Idris.Libraries.Text.Bounded.MkBounded', V1, 1, V3} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mergeBounds'(V0, V1) -> case V0 of {'Idris.Libraries.Text.Bounded.MkBounded', E17, E18, E19} -> (fun (V2, V3, V4) -> case V3 of 1 -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E37, E38, E39} -> (fun (V5, V6, V7) -> case V6 of 1 -> ('un--irrelevantBounds'(V5)); _ -> V1 end end(E37, E38, E39)); _ -> V1 end; _ -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E27, E28, E29} -> (fun (V8, V9, V10) -> case V9 of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--map_Functor_WithBounds'(V13, V14)) end end end end, fun (V15) -> V8 end, V0)); _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V18, V19)) end end}, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V32, V33)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V36, V37)) end end}, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V50, V51)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V52, V53) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V56, V57)) end end}, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V70, V71)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V74, V75)) end end}, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V88, V89)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V90, V91) -> {'Idris.Libraries.Text.Bounded.MkBounded', case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E34, E35, E36} -> (fun (V92, V93, V94) -> V92 end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, {'Idris.Libraries.Text.Bounded.MkBounds', V52, V53, V90, V91}} end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28, E29)); _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V97, V98)) end end}, fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V111, V112)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V115, V116)) end end}, fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V125, V126)) end end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V127, V128)) end end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V129, V130)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V131, V132) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V133, V134)) end end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V135, V136)) end end}, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V137, V138)) end end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V141, V142)) end end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V143, V144)) end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V149, V150)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V151, V152)) end end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V153, V154)) end end}, fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V155, V156)) end end, fun (V157) -> fun (V158) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V159, V160)) end end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V163, V164)) end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V165, V166)) end end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V167, V168)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V169, V170) -> {'Idris.Libraries.Text.Bounded.MkBounded', case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E24, E25, E26} -> (fun (V171, V172, V173) -> V171 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, {'Idris.Libraries.Text.Bounded.MkBounds', V131, V132, V169, V170}} end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17, E18, E19)); _ -> case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E7, E8, E9} -> (fun (V174, V175, V176) -> case V175 of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('dn--un--map_Functor_WithBounds'(V179, V180)) end end end end, fun (V181) -> V174 end, V0)); _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V182, V183)) end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V184, V185)) end end}, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V186, V187)) end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V192, V193)) end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V198, V199)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V200, V201)) end end, fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V202, V203)) end end}, fun (V204) -> fun (V205) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V208, V209)) end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V212, V213)) end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V214, V215)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V216, V217)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V218, V219) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V220, V221)) end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V222, V223)) end end}, fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V224, V225)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V226, V227)) end end, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V228, V229)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V232, V233)) end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V234, V235)) end end, fun (V236) -> fun (V237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V236, V237)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V238, V239)) end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V240, V241)) end end}, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V246, V247)) end end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V254, V255)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V256, V257) -> {'Idris.Libraries.Text.Bounded.MkBounded', case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E14, E15, E16} -> (fun (V258, V259, V260) -> V258 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, {'Idris.Libraries.Text.Bounded.MkBounds', V218, V219, V256, V257}} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9)); _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V261) -> fun (V262) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V261, V262)) end end, fun (V263) -> fun (V264) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V263, V264)) end end}, fun (V265) -> fun (V266) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V265, V266)) end end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V267, V268)) end end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V269, V270)) end end, fun (V271) -> fun (V272) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V271, V272)) end end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V273, V274)) end end, fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V275, V276)) end end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V277, V278)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V279) -> fun (V280) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V279, V280)) end end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V281, V282)) end end}, fun (V283) -> fun (V284) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V283, V284)) end end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V285, V286)) end end, fun (V287) -> fun (V288) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V287, V288)) end end, fun (V289) -> fun (V290) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V289, V290)) end end, fun (V291) -> fun (V292) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V291, V292)) end end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V293, V294)) end end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V295, V296)) end end}, ('un--start'(V0)), ('un--start'(V1)))) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V297, V298) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V299, V300)) end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V301, V302)) end end}, fun (V303) -> fun (V304) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V303, V304)) end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V305, V306)) end end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V307, V308)) end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V309, V310)) end end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V311, V312)) end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V313, V314)) end end, fun (V315) -> fun (V316) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V315, V316)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V317, V318)) end end, fun (V319) -> fun (V320) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V319, V320)) end end}, fun (V321) -> fun (V322) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V321, V322)) end end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V323, V324)) end end, fun (V325) -> fun (V326) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V325, V326)) end end, fun (V327) -> fun (V328) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V327, V328)) end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V329, V330)) end end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V331, V332)) end end, fun (V333) -> fun (V334) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V333, V334)) end end}, ('un--end'(V0)), ('un--end'(V1)))) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V335, V336) -> {'Idris.Libraries.Text.Bounded.MkBounded', case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E4, E5, E6} -> (fun (V337, V338, V339) -> V337 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, {'Idris.Libraries.Text.Bounded.MkBounds', V297, V298, V335, V336}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--joinBounds'(V0) -> ('un--mergeBounds'(V0, case V0 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--irrelevantBounds'(V0) -> {'Idris.Libraries.Text.Bounded.MkBounded', V0, 1, {'Idris.Libraries.Text.Bounded.MkBounds', -1, -1, -1, -1}}.
'un--endBounds'(V0) -> {'Idris.Builtin.MkPair', case V0 of {'Idris.Libraries.Text.Bounded.MkBounds', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Libraries.Text.Bounded.MkBounds', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V8 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--end'(V0) -> ('un--endBounds'(case V0 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V1, V2, V3) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
