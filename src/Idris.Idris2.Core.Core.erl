-module('Idris.Idris2.Core.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6466-4214--in--un--showRig'/5,
  'nested--6466-4215--in--un--showRel'/5,
  'nested--9568-6919--in--un--goTerm'/4,
  'dn--un--throw_Catchable_Core_Error'/2,
  'dn--un--show_Show_Warning'/1,
  'dn--un--show_Show_TTCErrorMsg'/1,
  'dn--un--show_Show_Error'/1,
  'dn--un--show_Show_DotReason'/1,
  'dn--un--showPrec_Show_Warning'/2,
  'dn--un--showPrec_Show_TTCErrorMsg'/2,
  'dn--un--showPrec_Show_Error'/2,
  'dn--un--showPrec_Show_DotReason'/2,
  'dn--un--pretty_Pretty_DotReason'/1,
  'dn--un--prettyPrec_Pretty_DotReason'/2,
  'dn--un--catch_Catchable_Core_Error'/3,
  'dn--un--breakpoint_Catchable_Core_Error'/1,
  'dn--un--__Impl_Show_Warning'/0,
  'dn--un--__Impl_Show_TTCErrorMsg'/0,
  'dn--un--__Impl_Show_Error'/0,
  'dn--un--__Impl_Show_DotReason'/0,
  'dn--un--__Impl_Pretty_DotReason'/0,
  'dn--un--__Impl_Catchable_Core_Error'/0,
  'un--writeFile'/3,
  'un--wrapRef'/5,
  'un--wrapError'/2,
  'un--whenJust'/2,
  'un--when'/2,
  'un--update'/4,
  'un--unless'/2,
  'un--traverse_'/3,
  'un--traverseVect'/3,
  'un--traversePair'/3,
  'un--traverseOpt'/3,
  'un--traverseList1_'/2,
  'un--traverseList1'/2,
  'un--traverse\x{27}'/4,
  'un--traverse'/3,
  'un--throw'/2,
  'un--sequence'/2,
  'un--readFile'/2,
  'un--put'/4,
  'un--pure'/2,
  'un--newRef'/3,
  'un--mapTermM'/3,
  'un--map'/3,
  'un--iwhenJust'/2,
  'un--iwhen'/3,
  'un--iunless'/3,
  'un--ignore'/2,
  'un--getWarningLoc'/1,
  'un--getErrorLoc'/1,
  'un--get'/3,
  'un--for_'/2,
  'un--for'/2,
  'un--foldlC'/4,
  'un--filterM'/3,
  'un--coreRun'/4,
  'un--coreLift_'/2,
  'un--coreLift'/2,
  'un--coreFail'/2,
  'un--condC'/2,
  'un--cond'/2,
  'un--catch'/3,
  'un--breakpoint'/2,
  'un--anyM'/3,
  'un--allM'/3,
  'un-->>='/3,
  'un-->>'/3,
  'un-->=>'/3,
  'un--=<<'/2,
  'un--<=<'/2,
  'un--<*>'/3,
  'un--<*'/3,
  'un--<$>'/3,
  'un--<$'/3,
  'un--*>'/3
]).
'nested--6466-4214--in--un--showRig'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V5, V6)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V11, V12)) end end}}, <<"linear"/utf8>>, <<"irrelevant"/utf8>>, fun (V13) -> <<"unrestricted"/utf8>> end, V4)).
'nested--6466-4215--in--un--showRel'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V5, V6)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V11, V12)) end end}}, <<"relevant"/utf8>>, <<"irrelevant"/utf8>>, fun (V13) -> <<"non-linear"/utf8>> end, V4)).
'nested--9568-6919--in--un--goTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> ((V1(V2))(V3)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V7, V8, V9) -> ((V1(V2))(V3)) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> ((V15(V19))(V16)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V10, V11, V12, V23}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V24) -> ('un--traverse\x{27}'(fun (V25) -> ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V25)) end, V13, [], V24)) end, V20)) end)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E14, E15, E16, E17} -> (fun (V26, V27, V28, V29) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), case V33 of {'Idris.Prelude.Types.Left', E18} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V35) -> ((V31(V35))(V32)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V36) -> ('un--<*>'(fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V38) -> case V38 of {'Idris.Prelude.Types.Left', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V40) -> {'Idris.Prelude.Types.Right', fun (V41) -> {'Idris.Core.TT.Bind', V26, V27, V40, V41} end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V43) -> ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V43)) end, V28, V42)) end, V37)) end, ('nested--9568-6919--in--un--goTerm'(V0, V1, [V27 | V2], V29)), V36)) end)) end(E14, E15, E16, E17)); {'Idris.Core.TT.App', E22, E23, E24} -> (fun (V44, V45, V46) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), case V50 of {'Idris.Prelude.Types.Left', E25} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V52) -> ((V48(V52))(V49)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V53) -> ('un--<*>'(fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V55) -> case V55 of {'Idris.Prelude.Types.Left', E27} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V57) -> {'Idris.Prelude.Types.Right', fun (V58) -> {'Idris.Core.TT.App', V44, V57, V58} end} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V45)), V54)) end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V46)), V53)) end)) end(E22, E23, E24)); {'Idris.Core.TT.As', E29, E30, E31, E32} -> (fun (V59, V60, V61, V62) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), case V66 of {'Idris.Prelude.Types.Left', E33} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V68) -> ((V64(V68))(V65)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V69) -> ('un--<*>'(fun (V70) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V71) -> case V71 of {'Idris.Prelude.Types.Left', E35} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V73) -> {'Idris.Prelude.Types.Right', fun (V74) -> {'Idris.Core.TT.As', V59, V60, V73, V74} end} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V61)), V70)) end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V62)), V69)) end)) end(E29, E30, E31, E32)); {'Idris.Core.TT.TDelayed', E37, E38, E39} -> (fun (V75, V76, V77) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), case V81 of {'Idris.Prelude.Types.Left', E40} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V83) -> ((V79(V83))(V80)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V84) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V85) -> case V85 of {'Idris.Prelude.Types.Left', E42} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V75, V76, V87}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V77)), V84)) end)) end(E37, E38, E39)); {'Idris.Core.TT.TDelay', E44, E45, E46, E47} -> (fun (V88, V89, V90, V91) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V92(V94))), case V95 of {'Idris.Prelude.Types.Left', E48} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V97) -> ((V93(V97))(V94)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V98) -> ('un--<*>'(fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V100) -> case V100 of {'Idris.Prelude.Types.Left', E50} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V102) -> {'Idris.Prelude.Types.Right', fun (V103) -> {'Idris.Core.TT.TDelay', V88, V89, V102, V103} end} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V90)), V99)) end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V91)), V98)) end)) end(E44, E45, E46, E47)); {'Idris.Core.TT.TForce', E52, E53, E54} -> (fun (V104, V105, V106) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V107) -> fun (V108) -> fun (V109) -> begin (V110 = (V107(V109))), case V110 of {'Idris.Prelude.Types.Left', E55} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V112) -> ((V108(V112))(V109)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V114) -> case V114 of {'Idris.Prelude.Types.Left', E57} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V116) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V104, V105, V116}} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--9568-6919--in--un--goTerm'(V0, V1, V2, V106)), V113)) end)) end(E52, E53, E54)); {'Idris.Core.TT.PrimVal', E59, E60} -> (fun (V117, V118) -> ((V1(V2))(V3)) end(E59, E60)); {'Idris.Core.TT.Erased', E61, E62} -> (fun (V119, V120) -> ((V1(V2))(V3)) end(E61, E62)); {'Idris.Core.TT.TType', E63} -> (fun (V121) -> ((V1(V2))(V3)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--throw_Catchable_Core_Error'(V0, V1) -> ('un--coreFail'(V0, V1)).
'dn--un--show_Show_Warning'(V0) -> case V0 of {'Idris.Core.Core.ParserWarning', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); {'Idris.Core.Core.UnreachableClause', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> <<":Unreachable clause"/utf8>> end(E2, E3, E4, E5)); {'Idris.Core.Core.ShadowingGlobalDefs', E6, E7} -> (fun (V7, V8) -> <<":Shadowing names"/utf8>> end(E6, E7)); {'Idris.Core.Core.Deprecated', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Deprecated "/utf8>>, V9)) end(E8)); {'Idris.Core.Core.GenericWarn', E9} -> (fun (V10) -> V10 end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_TTCErrorMsg'(V0) -> case V0 of {'Idris.Core.Core.Format', E0, E1, E2} -> (fun (V1, V2, V3) -> begin (V4 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, V3)) of 1 -> <<"older"/utf8>>; 0 -> <<"newer"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC data is in an "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" format, file: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", expected version: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", actual version: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)))))))))))))))) end end(E0, E1, E2)); {'Idris.Core.Core.EndOfBuffer', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"End of buffer when reading "/utf8>>, V5)) end(E3)); {'Idris.Core.Core.Corrupt', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Corrupt TTC data for "/utf8>>, V6)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Error'(V0) -> case V0 of {'Idris.Core.Core.Fatal', E0} -> (fun (V1) -> ('dn--un--show_Show_Error'(V1)) end(E0)); {'Idris.Core.Core.CantConvert', E1, E2, E3, E4, E5, E6} -> (fun (V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Type mismatch: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V7)))))))))) end(E1, E2, E3, E4, E5, E6)); {'Idris.Core.Core.CantSolveEq', E7, E8, E9, E10, E11, E12} -> (fun (V8, V9, V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V8, V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V8, V13)), <<" are not equal"/utf8>>)))))))))) end(E7, E8, E9, E10, E11, E12)); {'Idris.Core.Core.PatternVariableUnifies', E13, E14, E15, E16, E17} -> (fun (V14, V15, V16, V17, V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Pattern variable "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" unifies with "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V18)))))))))) end(E13, E14, E15, E16, E17)); {'Idris.Core.Core.CyclicMeta', E18, E19, E20, E21, E22} -> (fun (V19, V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Cycle detected in metavariable solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V19, V23)))))))))) end(E18, E19, E20, E21, E22)); {'Idris.Core.Core.WhenUnifying', E23, E24, E25, E26, E27, E28, E29} -> (fun (V24, V25, V26, V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When unifying: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V24, V28)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V24, V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, ('dn--un--show_Show_Error'(V30)))))))))))))) end(E23, E24, E25, E26, E27, E28, E29)); {'Idris.Core.Core.ValidCase', E30, E31, E32, E33} -> (fun (V31, V32, V33, V34) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V32)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, case V34 of {'Idris.Prelude.Types.Left', E34} -> (fun (V35) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V31, V35)), <<" is not a valid impossible pattern because it typechecks"/utf8>>)) end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V36) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a valid impossible pattern:\x{a}\x{9}"/utf8>>, ('dn--un--show_Show_Error'(V36)))) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E30, E31, E32, E33)); {'Idris.Core.Core.UndefinedName', E36, E37} -> (fun (V37, V38) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V37)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Undefined name "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V38)))))) end(E36, E37)); {'Idris.Core.Core.InvisibleName', E38, E39, E40} -> (fun (V39, V40, V41) -> case V41 of {'Idris.Prelude.Types.Just', E41} -> (fun (V42) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V39)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is inaccessible since "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V42)), <<" is not explicitly imported"/utf8>>)))))))))) end(E41)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V39)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)), <<" is private"/utf8>>)))))) end end(E38, E39, E40)); {'Idris.Core.Core.BadTypeConType', E42, E43} -> (fun (V43, V44) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V43)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Return type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V44)), <<" must be Type"/utf8>>)))))) end(E42, E43)); {'Idris.Core.Core.BadDataConType', E44, E45, E46} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V45)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Return type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" must be in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)))))))))) end(E44, E45, E46)); {'Idris.Core.Core.NotCovering', E47, E48, E49} -> (fun (V48, V49, V50) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V48)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V49)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is not covering:\x{a}\x{9}"/utf8>>, case V50 of {'Idris.Core.TT.IsCovering'} -> (fun () -> <<"Oh yes it is (Internal error!)"/utf8>> end()); {'Idris.Core.TT.MissingCases', E50} -> (fun (V51) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing cases:\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V52) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V52)) end, V51)))))) end(E50)); {'Idris.Core.TT.NonCoveringCall', E51} -> (fun (V53) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Calls non covering function"/utf8>>, case V53 of [E52 | E53] -> (fun (V54, V55) -> case V55 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V56)) end, V53)))))) end end(E52, E53)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57)) end, V53)))))) end)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end(E47, E48, E49)); {'Idris.Core.Core.NotTotal', E54, E55, E56} -> (fun (V58, V59, V60) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V58)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)), <<" is not total"/utf8>>)))))) end(E54, E55, E56)); {'Idris.Core.Core.LinearUsed', E57, E58, E59} -> (fun (V61, V62, V63) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V61)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":There are "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V62)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" uses of linear name "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V63)))))))))) end(E57, E58, E59)); {'Idris.Core.Core.LinearMisuse', E60, E61, E62, E63} -> (fun (V64, V65, V66, V67) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V64)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Trying to use "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--6466-4214--in--un--showRig'(V67, V66, V65, V64, V66)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V65)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--6466-4215--in--un--showRel'(V67, V66, V65, V64, V67)), <<" context"/utf8>>)))))))))))))) end(E60, E61, E62, E63)); {'Idris.Core.Core.BorrowPartial', E64, E65, E66, E67, E68} -> (fun (V68, V69, V70, V71, V72) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V69)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V68, V71)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" borrows argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V68, V72)), <<" so must be fully applied"/utf8>>)))))))))) end(E64, E65, E66, E67, E68)); {'Idris.Core.Core.BorrowPartialType', E69, E70, E71, E72} -> (fun (V73, V74, V75, V76) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V74)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V73, V76)), <<" borrows, so must return a concrete type"/utf8>>)))))) end(E69, E70, E71, E72)); {'Idris.Core.Core.AmbiguousName', E73, E74} -> (fun (V77, V78) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V77)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguous name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V80, V81)) end end}, V78)))))) end(E73, E74)); {'Idris.Core.Core.AmbiguousElab', E75, E76, E77, E78} -> (fun (V82, V83, V84, V85) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V83)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguous elaboration "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V86) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V82, V86)) end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V82, V87, V88)) end end}, V85)))))) end(E75, E76, E77, E78)); {'Idris.Core.Core.AmbiguousSearch', E79, E80, E81, E82, E83} -> (fun (V89, V90, V91, V92, V93) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V90)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguous search "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V94) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V89, V94)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V89, V95, V96)) end end}, V93)))))) end(E79, E80, E81, E82, E83)); {'Idris.Core.Core.AmbiguityTooDeep', E84, E85, E86} -> (fun (V97, V98, V99) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V97)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguity too deep in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V98)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V101, V102)) end end}, V99)))))))))) end(E84, E85, E86)); {'Idris.Core.Core.AllFailed', E87} -> (fun (V103) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No successful elaboration: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V107, V108)) end end}, V105)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V112, V113)) end end}, V109, V110)) end end}, {'Idris.Prelude.Show.MkShow', fun (V114) -> ('dn--un--show_Show_Error'(V114)) end, fun (V115) -> fun (V116) -> ('dn--un--showPrec_Show_Error'(V115, V116)) end end}}, V104)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V119) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V120) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V121, V122)) end end}, V119)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V125) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V126, V127)) end end}, V123, V124)) end end}, {'Idris.Prelude.Show.MkShow', fun (V128) -> ('dn--un--show_Show_Error'(V128)) end, fun (V129) -> fun (V130) -> ('dn--un--showPrec_Show_Error'(V129, V130)) end end}}, V117, V118)) end end}, V103)))) end(E87)); {'Idris.Core.Core.RecordTypeNeeded', E88, E89, E90} -> (fun (V131, V132, V133) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V132)), <<":Can\x{27}t infer type of record to update"/utf8>>)) end(E88, E89, E90)); {'Idris.Core.Core.NotRecordField', E91, E92, E93} -> (fun (V134, V135, V136) -> case V136 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V134)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V135, <<" is not part of a record type"/utf8>>)))))) end()); {'Idris.Prelude.Types.Just', E94} -> (fun (V137) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V134)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Record type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V137)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" has no field "/utf8>>, V135)))))))) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E91, E92, E93)); {'Idris.Core.Core.NotRecordType', E95, E96} -> (fun (V138, V139) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V138)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V139)), <<" is not a record type"/utf8>>)))))) end(E95, E96)); {'Idris.Core.Core.IncompatibleFieldUpdate', E97, E98} -> (fun (V140, V141) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V140)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Field update "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"->"/utf8>>, V141)), <<" not compatible with other updates"/utf8>>)))))) end(E97, E98)); {'Idris.Core.Core.InvalidArgs', E99, E100, E101, E102, E103} -> (fun (V142, V143, V144, V145, V146) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V143)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V147)) end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V148, V149)) end end}, V145)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" are not valid arguments in "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V142, V146)))))))))) end(E99, E100, E101, E102, E103)); {'Idris.Core.Core.TryWithImplicits', E104, E105, E106, E107} -> (fun (V150, V151, V152, V153) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V151)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Need to bind implicits "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<","/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V154) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Builtin':'un--fst'(V154)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V150, ('Idris.Idris2.Builtin':'un--snd'(V154)))))))) end, V153)))), <<"\x{a}(The front end should probably have done this for you. Please report!)"/utf8>>)))))) end(E104, E105, E106, E107)); {'Idris.Core.Core.BadUnboundImplicit', E108, E109, E110, E111, E112} -> (fun (V155, V156, V157, V158, V159) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V156)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t bind name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V158)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V155, V159)))))))))) end(E108, E109, E110, E111, E112)); {'Idris.Core.Core.CantSolveGoal', E113, E114, E115, E116, E117, E118} -> (fun (V160, V161, V162, V163, V164, V165) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V161)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t solve goal "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V160, V164)))))) end(E113, E114, E115, E116, E117, E118)); {'Idris.Core.Core.DeterminingArg', E119, E120, E121, E122, E123, E124} -> (fun (V166, V167, V168, V169, V170, V171) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V167)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t solve goal "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V166, V171)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" since argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V168)), <<" can\x{27}t be inferred"/utf8>>)))))))))) end(E119, E120, E121, E122, E123, E124)); {'Idris.Core.Core.UnsolvedHoles', E125} -> (fun (V172) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unsolved holes "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V173) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V174) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V174)) end, fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V175, V176)) end end}, {'Idris.Prelude.Show.MkShow', fun (V177) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V177)) end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V178, V179)) end end}}, V173)) end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V182) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V182)) end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V183, V184)) end end}, {'Idris.Prelude.Show.MkShow', fun (V185) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V185)) end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V186, V187)) end end}}, V180, V181)) end end}, V172)))) end(E125)); {'Idris.Core.Core.CantInferArgType', E126, E127, E128, E129, E130, E131} -> (fun (V188, V189, V190, V191, V192, V193) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V189)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t infer type for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V191)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (got "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V188, V193)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with hole "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V192)), <<")"/utf8>>)))))))))))))) end(E126, E127, E128, E129, E130, E131)); {'Idris.Core.Core.SolvedNamedHole', E132, E133, E134, E135, E136} -> (fun (V194, V195, V196, V197, V198) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V195)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Named hole "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V197)), <<" is solved by unification"/utf8>>)))))) end(E132, E133, E134, E135, E136)); {'Idris.Core.Core.VisibilityError', E137, E138, E139, E140, E141} -> (fun (V199, V200, V201, V202, V203) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V199)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Visibility'(V200)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V201)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" cannot refer to "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Visibility'(V202)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V203)))))))))))))))))) end(E137, E138, E139, E140, E141)); {'Idris.Core.Core.NonLinearPattern', E142, E143} -> (fun (V204, V205) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V204)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Non linear pattern variable "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V205)))))) end(E142, E143)); {'Idris.Core.Core.BadPattern', E144, E145} -> (fun (V206, V207) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V206)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Pattern not allowed here: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V207)))))) end(E144, E145)); {'Idris.Core.Core.NoDeclaration', E146, E147} -> (fun (V208, V209) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V208)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":No type declaration for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V209)))))) end(E146, E147)); {'Idris.Core.Core.AlreadyDefined', E148, E149} -> (fun (V210, V211) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V210)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V211)), <<" is already defined"/utf8>>)))))) end(E148, E149)); {'Idris.Core.Core.NotFunctionType', E150, E151, E152, E153} -> (fun (V212, V213, V214, V215) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V213)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Not a function type: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V212, V215)))))) end(E150, E151, E152, E153)); {'Idris.Core.Core.RewriteNoChange', E154, E155, E156, E157, E158} -> (fun (V216, V217, V218, V219, V220) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V217)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Rewriting by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V216, V219)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" did not change type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V216, V220)))))))))) end(E154, E155, E156, E157, E158)); {'Idris.Core.Core.NotRewriteRule', E159, E160, E161, E162} -> (fun (V221, V222, V223, V224) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V222)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V221, V224)), <<" is not a rewrite rule type"/utf8>>)))))) end(E159, E160, E161, E162)); {'Idris.Core.Core.CaseCompile', E163, E164, E165} -> (fun (V225, V226, V227) -> case V227 of {'Idris.Core.Core.DifferingArgNumbers'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V225)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Patterns for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V226)), <<" have different numbers of arguments"/utf8>>)))))) end()); {'Idris.Core.Core.DifferingTypes'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V225)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Patterns for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V226)), <<" require matching on different types"/utf8>>)))))) end()); {'Idris.Core.Core.UnknownType'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V225)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t infer type to match in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V226)))))) end()); {'Idris.Core.Core.MatchErased', E166} -> (fun (V228) -> case V228 of {'Idris.Builtin.DPair.MkDPair', E167, E168} -> (fun (V229, V230) -> case V230 of {'Idris.Builtin.MkPair', E169, E170} -> (fun (V231, V232) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V225)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Attempt to match on erased argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V229, V232)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V226)))))))))) end(E169, E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E166)); {'Idris.Core.Core.NotFullyApplied', E171} -> (fun (V233) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V225)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V233)), <<" is not fully applied"/utf8>>)))))) end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E163, E164, E165)); {'Idris.Core.Core.MatchTooSpecific', E172, E173, E174, E175} -> (fun (V234, V235, V236, V237) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V235)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t match on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V234, V237)), <<" as it is has a polymorphic type"/utf8>>)))))) end(E172, E173, E174, E175)); {'Idris.Core.Core.BadDotPattern', E176, E177, E178, E179, E180, E181} -> (fun (V238, V239, V240, V241, V242, V243) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V239)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t match on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V238, V242)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_DotReason'(V241)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" - it elaborates to "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V238, V243)))))))))))))))) end(E176, E177, E178, E179, E180, E181)); {'Idris.Core.Core.BadImplicit', E182, E183} -> (fun (V244, V245) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V244)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V245, <<" can\x{27}t be bound here"/utf8>>)))))) end(E182, E183)); {'Idris.Core.Core.BadRunElab', E184, E185, E186, E187, E188} -> (fun (V246, V247, V248, V249, V250) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V247)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Bad elaborator script "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V246, V249)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V250, <<")"/utf8>>)))))))))) end(E184, E185, E186, E187, E188)); {'Idris.Core.Core.GenericMsg', E189, E190} -> (fun (V251, V252) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V251)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, V252)))) end(E189, E190)); {'Idris.Core.Core.TTCError', E191} -> (fun (V253) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error in TTC file: "/utf8>>, ('dn--un--show_Show_TTCErrorMsg'(V253)))) end(E191)); {'Idris.Core.Core.FileErr', E192, E193} -> (fun (V254, V255) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File error ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V254, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"): "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V255)))))))) end(E192, E193)); {'Idris.Core.Core.CantFindPackage', E194} -> (fun (V256) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t find package "/utf8>>, V256)) end(E194)); {'Idris.Core.Core.LitFail', E195} -> (fun (V257) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V257)), <<":Can\x{27}t parse literate"/utf8>>)) end(E195)); {'Idris.Core.Core.LexFail', E196, E197} -> (fun (V258, V259) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V258)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Lexer error ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V259)), <<")"/utf8>>)))))) end(E196, E197)); {'Idris.Core.Core.ParseFail', E198} -> (fun (V260) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Parse errors ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Data.List1':'dn--un--show_Show_(List1 $a)'({'Idris.Prelude.Show.MkShow', fun (V261) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V262) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V262)) end, fun (V263) -> fun (V264) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V263, V264)) end end}, {'Idris.Prelude.Show.MkShow', fun (V265) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V265)) end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V266, V267)) end end}}, V261)) end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V270) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V270)) end, fun (V271) -> fun (V272) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V271, V272)) end end}, {'Idris.Prelude.Show.MkShow', fun (V273) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V273)) end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V274, V275)) end end}}, V268, V269)) end end}, V260)), <<")"/utf8>>)))) end(E198)); {'Idris.Core.Core.ModuleNotFound', E199, E200} -> (fun (V276, V277) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V276)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V277)), <<" not found"/utf8>>)))))) end(E199, E200)); {'Idris.Core.Core.CyclicImports', E201} -> (fun (V278) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Module imports form a cycle: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" -> "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V279) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V279)) end, V278)))))) end(E201)); {'Idris.Core.Core.ForceNeeded'} -> (fun () -> <<"Internal error when resolving implicit laziness"/utf8>> end()); {'Idris.Core.Core.InternalError', E202} -> (fun (V280) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: "/utf8>>, V280)) end(E202)); {'Idris.Core.Core.UserError', E203} -> (fun (V281) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, V281)) end(E203)); {'Idris.Core.Core.NoForeignCC', E204, E205} -> (fun (V282, V283) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V282)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":The given specifier "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V284) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V284)) end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V285, V286)) end end}, V283)), <<" was not accepted by any available backend."/utf8>>)))))) end(E204, E205)); {'Idris.Core.Core.BadMultiline', E206, E207} -> (fun (V287, V288) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid multiline string: "/utf8>>, V288)) end(E206, E207)); {'Idris.Core.Core.Timeout', E208} -> (fun (V289) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Timeout in "/utf8>>, V289)) end(E208)); {'Idris.Core.Core.InType', E209, E210, E211} -> (fun (V290, V291, V292) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V290)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V291)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V292)))))))))) end(E209, E210, E211)); {'Idris.Core.Core.InCon', E212, E213, E214} -> (fun (V293, V294, V295) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V293)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating type of constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V294)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V295)))))))))) end(E212, E213, E214)); {'Idris.Core.Core.InLHS', E215, E216, E217} -> (fun (V296, V297, V298) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V296)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating left hand side of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V297)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V298)))))))))) end(E215, E216, E217)); {'Idris.Core.Core.InRHS', E218, E219, E220} -> (fun (V299, V300, V301) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V299)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating right hand side of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V300)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V301)))))))))) end(E218, E219, E220)); {'Idris.Core.Core.MaybeMisspelling', E221, E222} -> (fun (V302, V303) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Error'(V302)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Did you mean"/utf8>>, case V303 of {'Idris.Data.List1.:::', E223, E224} -> (fun (V304, V305) -> case V305 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V304, <<"?"/utf8>>)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" any of: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V306) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V306)) end, ('Idris.Idris2.Data.List1':'un--forget'(V303)))))), <<"?"/utf8>>)))) end end(E223, E224)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" any of: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V307) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V307)) end, ('Idris.Idris2.Data.List1':'un--forget'(V303)))))), <<"?"/utf8>>)))) end)))) end(E221, E222)); {'Idris.Core.Core.WarningAsError', E225} -> (fun (V308) -> ('dn--un--show_Show_Warning'(V308)) end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_DotReason'(V0) -> case V0 of 0 -> <<"Non linear pattern variable"/utf8>>; 1 -> <<"Variable applied to arguments"/utf8>>; 2 -> <<"Not a constructor application or primitive"/utf8>>; 3 -> <<"Erased argument"/utf8>>; 4 -> <<"User dotted"/utf8>>; 5 -> <<"Unknown reason"/utf8>>; 6 -> <<"Under-applied constructor"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_Warning'(V0, V1) -> ('dn--un--show_Show_Warning'(V1)).
'dn--un--showPrec_Show_TTCErrorMsg'(V0, V1) -> ('dn--un--show_Show_TTCErrorMsg'(V1)).
'dn--un--showPrec_Show_Error'(V0, V1) -> ('dn--un--show_Show_Error'(V1)).
'dn--un--showPrec_Show_DotReason'(V0, V1) -> ('dn--un--show_Show_DotReason'(V1)).
'dn--un--pretty_Pretty_DotReason'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Non linear pattern variable"/utf8>>)); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Variable applied to arguments"/utf8>>)); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Not a constructor application or primitive"/utf8>>)); 3 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Erased argument"/utf8>>)); 4 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"User dotted"/utf8>>)); 5 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Unknown reason"/utf8>>)); 6 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Under-applied constructor"/utf8>>)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_DotReason'(V0, V1) -> ('dn--un--pretty_Pretty_DotReason'(V1)).
'dn--un--catch_Catchable_Core_Error'(V0, V1, V2) -> begin (V3 = (V0(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> ((V1(V4))(V2)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', V5} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--breakpoint_Catchable_Core_Error'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> {'Idris.Prelude.Types.Right', V6} end, V0)).
'dn--un--__Impl_Show_Warning'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Warning'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Warning'(V1, V2)) end end}.
'dn--un--__Impl_Show_TTCErrorMsg'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_TTCErrorMsg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_TTCErrorMsg'(V1, V2)) end end}.
'dn--un--__Impl_Show_Error'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Error'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Error'(V1, V2)) end end}.
'dn--un--__Impl_Show_DotReason'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DotReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DotReason'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_DotReason'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_DotReason'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_DotReason'(V3, V4)) end end end}.
'dn--un--__Impl_Catchable_Core_Error'() -> {'Idris.Core.Core.dn--un--__mkCatchable', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--throw_Catchable_Core_Error'(V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--catch_Catchable_Core_Error'(V4, V5, V6)) end end end end, fun (V7) -> fun (V8) -> ('dn--un--breakpoint_Catchable_Core_Error'(V8)) end end}.
'un--writeFile'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Right', E2} -> (fun (V34) -> case V34 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V35) -> ('dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V35}, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--wrapRef'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V18 = ('dn--un--catch_Catchable_Core_Error'(V3, fun (V9) -> fun (V10) -> begin (V11 = ((V2(V8))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'put'(V1, V8))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> ('dn--un--throw_Catchable_Core_Error'(V9, V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V4))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V21 = ((V2(V8))(V4))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> begin (V25 = begin (V24 = ('erlang':'put'(V1, V8))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Right', V20} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--wrapError'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', (V0(V8))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V9} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1)).
'un--whenJust'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> (V1(V2)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--when'(V0, V1) -> case V0 of 1 -> (V1()); 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--update'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('erlang':'put'(V1, (V2(V7))))), {'Idris.Prelude.Types.Right', V8} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unless'(V0, V1) -> case V0 of 1 -> fun (V2) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> (V1()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverse_'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> begin (V8 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V3)), V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('un--traverse_'(V0, V4, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverseVect'(V0, V1, V2) -> case V1 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> ('un--<*>'(fun (V5) -> ('un--<*>'(fun (V6) -> {'Idris.Prelude.Types.Right', fun (V7) -> fun (V8) -> {'Idris.Data.Vect.::', V7, V8} end end} end, (V0(V3)), V5)) end, fun (V9) -> ('un--traverseVect'(V0, V4, V9)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traversePair'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V4)), V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverseOpt'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V3)), V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverseList1_'(V0, V1) -> begin (V4 = case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V7 = case V1 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V5, V6) -> V6 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V8) -> begin (V12 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', 0} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V4)), V8))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> ('un--traverse_'(V0, V7, V8)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--traverseList1'(V0, V1) -> begin (V4 = case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V7 = case V1 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V5, V6) -> V6 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V8) -> ('un--<*>'(fun (V9) -> ('un--<*>'(fun (V10) -> {'Idris.Prelude.Types.Right', fun (V11) -> fun (V12) -> {'Idris.Data.List1.:::', V11, V12} end end} end, (V0(V4)), V9)) end, fun (V13) -> ('un--traverse\x{27}'(V0, V7, [], V13)) end, V8)) end end end.
'un--traverse\x{27}'(V0, V1, V2, V3) -> case V1 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))}; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ((V0(V4))(V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> ('un--traverse\x{27}'(V0, V5, [V8 | V2], V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverse'(V0, V1, V2) -> ('un--traverse\x{27}'(V0, V1, [], V2)).
'un--throw'(V0, V1) -> case V0 of {'Idris.Core.Core.dn--un--__mkCatchable', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V2('erased'))(V1)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sequence'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> begin (V4 = (V2(V1))), case V4 of {'Idris.Prelude.Types.Left', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V6) -> begin (V7 = ('un--sequence'(V3, V1))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Right', [V6 | V9]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--readFile'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Right', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V33} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V34) -> ('dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V34}, V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--put'(V0, V1, V2, V3) -> begin (V4 = ('erlang':'put'(V1, V2))), {'Idris.Prelude.Types.Right', V4} end.
'un--pure'(V0, V1) -> {'Idris.Prelude.Types.Right', V0}.
'un--newRef'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Data.IORef':'un--newIORef'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V33} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mapTermM'(V0, V1, V2) -> ('nested--9568-6919--in--un--goTerm'(V1, V0, V1, V2)).
'un--map'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V0(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1, V2)).
'un--iwhenJust'(V0, V1) -> case V0 of {'Idris.Libraries.Data.IMaybe.Just', E0} -> (fun (V2) -> (V1(V2)) end(E0)); {'Idris.Libraries.Data.IMaybe.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--iwhen'(V0, V1, V2) -> case V0 of 1 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Data.IMaybe.Just', V5}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V1()), V2)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Data.IMaybe.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--iunless'(V0, V1, V2) -> ('un--iwhen'(case V0 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2)).
'un--ignore'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1)).
'un--getWarningLoc'(V0) -> case V0 of {'Idris.Core.Core.ParserWarning', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', V1} end(E0, E1)); {'Idris.Core.Core.UnreachableClause', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> {'Idris.Prelude.Types.Just', V4} end(E2, E3, E4, E5)); {'Idris.Core.Core.ShadowingGlobalDefs', E6, E7} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Just', V7} end(E6, E7)); {'Idris.Core.Core.Deprecated', E8} -> (fun (V9) -> {'Idris.Prelude.Types.Nothing'} end(E8)); {'Idris.Core.Core.GenericWarn', E9} -> (fun (V10) -> {'Idris.Prelude.Types.Nothing'} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getErrorLoc'(V0) -> case V0 of {'Idris.Core.Core.Fatal', E0} -> (fun (V1) -> ('un--getErrorLoc'(V1)) end(E0)); {'Idris.Core.Core.CantConvert', E1, E2, E3, E4, E5, E6} -> (fun (V2, V3, V4, V5, V6, V7) -> {'Idris.Prelude.Types.Just', V3} end(E1, E2, E3, E4, E5, E6)); {'Idris.Core.Core.CantSolveEq', E7, E8, E9, E10, E11, E12} -> (fun (V8, V9, V10, V11, V12, V13) -> {'Idris.Prelude.Types.Just', V9} end(E7, E8, E9, E10, E11, E12)); {'Idris.Core.Core.PatternVariableUnifies', E13, E14, E15, E16, E17} -> (fun (V14, V15, V16, V17, V18) -> {'Idris.Prelude.Types.Just', V15} end(E13, E14, E15, E16, E17)); {'Idris.Core.Core.CyclicMeta', E18, E19, E20, E21, E22} -> (fun (V19, V20, V21, V22, V23) -> {'Idris.Prelude.Types.Just', V20} end(E18, E19, E20, E21, E22)); {'Idris.Core.Core.WhenUnifying', E23, E24, E25, E26, E27, E28, E29} -> (fun (V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Prelude.Types.Just', V25} end(E23, E24, E25, E26, E27, E28, E29)); {'Idris.Core.Core.ValidCase', E30, E31, E32, E33} -> (fun (V31, V32, V33, V34) -> {'Idris.Prelude.Types.Just', V32} end(E30, E31, E32, E33)); {'Idris.Core.Core.UndefinedName', E34, E35} -> (fun (V35, V36) -> {'Idris.Prelude.Types.Just', V35} end(E34, E35)); {'Idris.Core.Core.InvisibleName', E36, E37, E38} -> (fun (V37, V38, V39) -> {'Idris.Prelude.Types.Just', V37} end(E36, E37, E38)); {'Idris.Core.Core.BadTypeConType', E39, E40} -> (fun (V40, V41) -> {'Idris.Prelude.Types.Just', V40} end(E39, E40)); {'Idris.Core.Core.BadDataConType', E41, E42, E43} -> (fun (V42, V43, V44) -> {'Idris.Prelude.Types.Just', V42} end(E41, E42, E43)); {'Idris.Core.Core.NotCovering', E44, E45, E46} -> (fun (V45, V46, V47) -> {'Idris.Prelude.Types.Just', V45} end(E44, E45, E46)); {'Idris.Core.Core.NotTotal', E47, E48, E49} -> (fun (V48, V49, V50) -> {'Idris.Prelude.Types.Just', V48} end(E47, E48, E49)); {'Idris.Core.Core.LinearUsed', E50, E51, E52} -> (fun (V51, V52, V53) -> {'Idris.Prelude.Types.Just', V51} end(E50, E51, E52)); {'Idris.Core.Core.LinearMisuse', E53, E54, E55, E56} -> (fun (V54, V55, V56, V57) -> {'Idris.Prelude.Types.Just', V54} end(E53, E54, E55, E56)); {'Idris.Core.Core.BorrowPartial', E57, E58, E59, E60, E61} -> (fun (V58, V59, V60, V61, V62) -> {'Idris.Prelude.Types.Just', V59} end(E57, E58, E59, E60, E61)); {'Idris.Core.Core.BorrowPartialType', E62, E63, E64, E65} -> (fun (V63, V64, V65, V66) -> {'Idris.Prelude.Types.Just', V64} end(E62, E63, E64, E65)); {'Idris.Core.Core.AmbiguousName', E66, E67} -> (fun (V67, V68) -> {'Idris.Prelude.Types.Just', V67} end(E66, E67)); {'Idris.Core.Core.AmbiguousElab', E68, E69, E70, E71} -> (fun (V69, V70, V71, V72) -> {'Idris.Prelude.Types.Just', V70} end(E68, E69, E70, E71)); {'Idris.Core.Core.AmbiguousSearch', E72, E73, E74, E75, E76} -> (fun (V73, V74, V75, V76, V77) -> {'Idris.Prelude.Types.Just', V74} end(E72, E73, E74, E75, E76)); {'Idris.Core.Core.AmbiguityTooDeep', E77, E78, E79} -> (fun (V78, V79, V80) -> {'Idris.Prelude.Types.Just', V78} end(E77, E78, E79)); {'Idris.Core.Core.AllFailed', E80} -> (fun (V81) -> case V81 of [E81 | E82] -> (fun (V82, V83) -> case V82 of {'Idris.Builtin.MkPair', E83, E84} -> (fun (V84, V85) -> ('un--getErrorLoc'(V85)) end(E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E81, E82)); [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E80)); {'Idris.Core.Core.RecordTypeNeeded', E85, E86, E87} -> (fun (V86, V87, V88) -> {'Idris.Prelude.Types.Just', V87} end(E85, E86, E87)); {'Idris.Core.Core.NotRecordField', E88, E89, E90} -> (fun (V89, V90, V91) -> {'Idris.Prelude.Types.Just', V89} end(E88, E89, E90)); {'Idris.Core.Core.NotRecordType', E91, E92} -> (fun (V92, V93) -> {'Idris.Prelude.Types.Just', V92} end(E91, E92)); {'Idris.Core.Core.IncompatibleFieldUpdate', E93, E94} -> (fun (V94, V95) -> {'Idris.Prelude.Types.Just', V94} end(E93, E94)); {'Idris.Core.Core.InvalidArgs', E95, E96, E97, E98, E99} -> (fun (V96, V97, V98, V99, V100) -> {'Idris.Prelude.Types.Just', V97} end(E95, E96, E97, E98, E99)); {'Idris.Core.Core.TryWithImplicits', E100, E101, E102, E103} -> (fun (V101, V102, V103, V104) -> {'Idris.Prelude.Types.Just', V102} end(E100, E101, E102, E103)); {'Idris.Core.Core.BadUnboundImplicit', E104, E105, E106, E107, E108} -> (fun (V105, V106, V107, V108, V109) -> {'Idris.Prelude.Types.Just', V106} end(E104, E105, E106, E107, E108)); {'Idris.Core.Core.CantSolveGoal', E109, E110, E111, E112, E113, E114} -> (fun (V110, V111, V112, V113, V114, V115) -> {'Idris.Prelude.Types.Just', V111} end(E109, E110, E111, E112, E113, E114)); {'Idris.Core.Core.DeterminingArg', E115, E116, E117, E118, E119, E120} -> (fun (V116, V117, V118, V119, V120, V121) -> {'Idris.Prelude.Types.Just', V117} end(E115, E116, E117, E118, E119, E120)); {'Idris.Core.Core.UnsolvedHoles', E121} -> (fun (V122) -> case V122 of [E122 | E123] -> (fun (V123, V124) -> case V123 of {'Idris.Builtin.MkPair', E124, E125} -> (fun (V125, V126) -> {'Idris.Prelude.Types.Just', V125} end(E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E122, E123)); [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E121)); {'Idris.Core.Core.CantInferArgType', E126, E127, E128, E129, E130, E131} -> (fun (V127, V128, V129, V130, V131, V132) -> {'Idris.Prelude.Types.Just', V128} end(E126, E127, E128, E129, E130, E131)); {'Idris.Core.Core.SolvedNamedHole', E132, E133, E134, E135, E136} -> (fun (V133, V134, V135, V136, V137) -> {'Idris.Prelude.Types.Just', V134} end(E132, E133, E134, E135, E136)); {'Idris.Core.Core.VisibilityError', E137, E138, E139, E140, E141} -> (fun (V138, V139, V140, V141, V142) -> {'Idris.Prelude.Types.Just', V138} end(E137, E138, E139, E140, E141)); {'Idris.Core.Core.NonLinearPattern', E142, E143} -> (fun (V143, V144) -> {'Idris.Prelude.Types.Just', V143} end(E142, E143)); {'Idris.Core.Core.BadPattern', E144, E145} -> (fun (V145, V146) -> {'Idris.Prelude.Types.Just', V145} end(E144, E145)); {'Idris.Core.Core.NoDeclaration', E146, E147} -> (fun (V147, V148) -> {'Idris.Prelude.Types.Just', V147} end(E146, E147)); {'Idris.Core.Core.AlreadyDefined', E148, E149} -> (fun (V149, V150) -> {'Idris.Prelude.Types.Just', V149} end(E148, E149)); {'Idris.Core.Core.NotFunctionType', E150, E151, E152, E153} -> (fun (V151, V152, V153, V154) -> {'Idris.Prelude.Types.Just', V152} end(E150, E151, E152, E153)); {'Idris.Core.Core.RewriteNoChange', E154, E155, E156, E157, E158} -> (fun (V155, V156, V157, V158, V159) -> {'Idris.Prelude.Types.Just', V156} end(E154, E155, E156, E157, E158)); {'Idris.Core.Core.NotRewriteRule', E159, E160, E161, E162} -> (fun (V160, V161, V162, V163) -> {'Idris.Prelude.Types.Just', V161} end(E159, E160, E161, E162)); {'Idris.Core.Core.CaseCompile', E163, E164, E165} -> (fun (V164, V165, V166) -> {'Idris.Prelude.Types.Just', V164} end(E163, E164, E165)); {'Idris.Core.Core.MatchTooSpecific', E166, E167, E168, E169} -> (fun (V167, V168, V169, V170) -> {'Idris.Prelude.Types.Just', V168} end(E166, E167, E168, E169)); {'Idris.Core.Core.BadDotPattern', E170, E171, E172, E173, E174, E175} -> (fun (V171, V172, V173, V174, V175, V176) -> {'Idris.Prelude.Types.Just', V172} end(E170, E171, E172, E173, E174, E175)); {'Idris.Core.Core.BadImplicit', E176, E177} -> (fun (V177, V178) -> {'Idris.Prelude.Types.Just', V177} end(E176, E177)); {'Idris.Core.Core.BadRunElab', E178, E179, E180, E181, E182} -> (fun (V179, V180, V181, V182, V183) -> {'Idris.Prelude.Types.Just', V180} end(E178, E179, E180, E181, E182)); {'Idris.Core.Core.GenericMsg', E183, E184} -> (fun (V184, V185) -> {'Idris.Prelude.Types.Just', V184} end(E183, E184)); {'Idris.Core.Core.TTCError', E185} -> (fun (V186) -> {'Idris.Prelude.Types.Nothing'} end(E185)); {'Idris.Core.Core.FileErr', E186, E187} -> (fun (V187, V188) -> {'Idris.Prelude.Types.Nothing'} end(E186, E187)); {'Idris.Core.Core.CantFindPackage', E188} -> (fun (V189) -> {'Idris.Prelude.Types.Nothing'} end(E188)); {'Idris.Core.Core.LitFail', E189} -> (fun (V190) -> {'Idris.Prelude.Types.Just', V190} end(E189)); {'Idris.Core.Core.LexFail', E190, E191} -> (fun (V191, V192) -> {'Idris.Prelude.Types.Just', V191} end(E190, E191)); {'Idris.Core.Core.ParseFail', E192} -> (fun (V193) -> case V193 of {'Idris.Data.List1.:::', E193, E194} -> (fun (V194, V195) -> case V194 of {'Idris.Builtin.MkPair', E195, E196} -> (fun (V196, V197) -> {'Idris.Prelude.Types.Just', V196} end(E195, E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E192)); {'Idris.Core.Core.ModuleNotFound', E197, E198} -> (fun (V198, V199) -> {'Idris.Prelude.Types.Just', V198} end(E197, E198)); {'Idris.Core.Core.CyclicImports', E199} -> (fun (V200) -> {'Idris.Prelude.Types.Nothing'} end(E199)); {'Idris.Core.Core.ForceNeeded'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.Core.InternalError', E200} -> (fun (V201) -> {'Idris.Prelude.Types.Nothing'} end(E200)); {'Idris.Core.Core.UserError', E201} -> (fun (V202) -> {'Idris.Prelude.Types.Nothing'} end(E201)); {'Idris.Core.Core.NoForeignCC', E202, E203} -> (fun (V203, V204) -> {'Idris.Prelude.Types.Just', V203} end(E202, E203)); {'Idris.Core.Core.BadMultiline', E204, E205} -> (fun (V205, V206) -> {'Idris.Prelude.Types.Just', V205} end(E204, E205)); {'Idris.Core.Core.Timeout', E206} -> (fun (V207) -> {'Idris.Prelude.Types.Nothing'} end(E206)); {'Idris.Core.Core.InType', E207, E208, E209} -> (fun (V208, V209, V210) -> ('un--getErrorLoc'(V210)) end(E207, E208, E209)); {'Idris.Core.Core.InCon', E210, E211, E212} -> (fun (V211, V212, V213) -> ('un--getErrorLoc'(V213)) end(E210, E211, E212)); {'Idris.Core.Core.InLHS', E213, E214, E215} -> (fun (V214, V215, V216) -> ('un--getErrorLoc'(V216)) end(E213, E214, E215)); {'Idris.Core.Core.InRHS', E216, E217, E218} -> (fun (V217, V218, V219) -> ('un--getErrorLoc'(V219)) end(E216, E217, E218)); {'Idris.Core.Core.MaybeMisspelling', E219, E220} -> (fun (V220, V221) -> ('un--getErrorLoc'(V220)) end(E219, E220)); {'Idris.Core.Core.WarningAsError', E221} -> (fun (V222) -> ('un--getWarningLoc'(V222)) end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--get'(V0, V1, V2) -> begin (V3 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V3} end.
'un--for_'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> ('un--traverse_'(V2, V3, V4)) end end end, V0, V1)).
'un--for'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> ('un--traverse\x{27}'(V2, V3, [], V4)) end end end, V0, V1)).
'un--foldlC'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkFoldable', E0, E1, E2, E3, E4, E5} -> (fun (V4, V5, V6, V7, V8, V9) -> (((((V5('erased'))('erased'))(fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> (('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V12, V16))(V13)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end))(fun (V10) -> {'Idris.Prelude.Types.Right', V2} end))(V3)) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--filterM'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ((V0(V3))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of 1 -> begin (V8 = ('un--filterM'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', [V3 | V10]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--filterM'(V0, V4, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--coreRun'(V0, V1, V2, V3) -> begin (V4 = (V0(V3))), (('Idris.Idris2.Prelude.Types':'un--either'(fun () -> V1 end, fun () -> V2 end, V4))(V3)) end.
'un--coreLift_'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> begin (V6 = (V0(V5))), {'Idris.Prelude.Types.Right', V6} end end, V1)).
'un--coreLift'(V0, V1) -> begin (V2 = (V0(V1))), {'Idris.Prelude.Types.Right', V2} end.
'un--coreFail'(V0, V1) -> {'Idris.Prelude.Types.Left', V0}.
'un--condC'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> fun (V4) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V7 = (V5(V4))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case V9 of 1 -> (V6(V4)); 0 -> (('un--condC'(V3, V1))(V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cond'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> begin (V6 = (V4())), case V6 of 1 -> (V5()); 0 -> ('un--cond'(V3, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--catch'(V0, V1, V2) -> case V0 of {'Idris.Core.Core.dn--un--__mkCatchable', E0, E1, E2} -> (fun (V3, V4, V5) -> (((V4('erased'))(V1))(V2)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--breakpoint'(V0, V1) -> case V0 of {'Idris.Core.Core.dn--un--__mkCatchable', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V4('erased'))(V1)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--anyM'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ((V0(V3))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('un--anyM'(V0, V4, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allM'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 1}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ((V0(V3))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of 1 -> ('un--allM'(V0, V4, V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un-->>='(V0, V1, V2) -> begin (V3 = (V0(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ((V1(V5))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un-->>'(V0, V1, V2) -> begin (V3 = (V0(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (V1(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un-->=>'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> fun (V4) -> fun (V5) -> begin (V6 = (V3(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ((V4(V8))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V1, (V0(V2)))).
'un--=<<'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> begin (V5 = (V2(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ((V3(V7))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V0, V1)).
'un--<=<'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> begin (V8 = (V5(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ((V6(V10))(V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3, (V2(V4)))) end end end, V0, V1)).
'un--<*>'(V0, V1, V2) -> begin (V11 = begin (V9 = fun (V3) -> fun (V4) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V4 of {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', (V6(V7))} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), begin (V10 = (V0(V2))), (V9(V10)) end end), begin (V12 = (V1(V2))), (V11(V12)) end end.
'un--<*'(V0, V1, V2) -> begin (V23 = begin (V21 = fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--<*'({'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', (V7(V10))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V12} end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> case V16 of {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', (V18(V19))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, V3, V4)) end end), begin (V22 = (V0(V2))), (V21(V22)) end end), begin (V24 = (V1(V2))), (V23(V24)) end end.
'un--<$>'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V0(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1, V2)).
'un--<$'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', V0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1, V2)).
'un--*>'(V0, V1, V2) -> begin (V23 = begin (V21 = fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', (V7(V10))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V12} end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> case V16 of {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', (V18(V19))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, V3, V4)) end end), begin (V22 = (V0(V2))), (V21(V22)) end end), begin (V24 = (V1(V2))), (V23(V24)) end end.
