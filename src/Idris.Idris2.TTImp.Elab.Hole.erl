-module('Idris.Idris2.TTImp.Elab.Hole').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--mkPrecise'/3,
  'un--checkHole'/13
]).
'un--mkPrecise'(V0, V1, V2) -> case V1 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V3, V4, V5) -> case V4 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V6, V7, V8) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V0, {'Idris.Core.Name.Resolved', V7}, fun (V9) -> case V9 of {'Idris.Core.Context.Context.Hole', E6, E7} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.Hole', V10, case V11 of {'Idris.Core.Context.Context.MkHoleFlags', E8, E9} -> (fun (V12, V13) -> {'Idris.Core.Context.Context.MkHoleFlags', V12, 1} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V2)) end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--checkHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Prelude.Types.Just', E58} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, {'Idris.Core.Name.UN', V10}, V12))), case V14 of {'Idris.Prelude.Types.Left', E59} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E61} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V20) -> begin (V51 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V20 of {'Idris.Core.Context.MkDefs', E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V21 end(E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), case V51 of {'Idris.Prelude.Types.Left', E93} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V53) -> case V53 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V54 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V13))(V12))), case V54 of {'Idris.Prelude.Types.Left', E97} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Env':'un--letToLam'(V8))), begin (V58 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V1, V3, V9, V5, V57, V16, V56, V12))), case V58 of {'Idris.Prelude.Types.Left', E99} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V60) -> case V60 of {'Idris.Builtin.MkPair', E101, E102} -> (fun (V61, V62) -> begin (V66 = begin (V63 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V13))(V12))), case V63 of {'Idris.Prelude.Types.Left', E103} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V65) -> ('un--mkPrecise'(V1, V65, V12)) end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V66 of {'Idris.Prelude.Types.Left', E105} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V1, V2, {'Idris.Core.Name.Resolved', V61}, V12))), case V69 of {'Idris.Prelude.Types.Left', E107} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V2, V1, V9, V16, V12))), case V72 of {'Idris.Prelude.Types.Left', E109} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, 0, V16, V12))), case V75 of {'Idris.Prelude.Types.Left', E111} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V77) -> begin (V78 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'(V4, V16, V12))), case V78 of {'Idris.Prelude.Types.Left', E113} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V62, V13}} end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V81 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)), <<" already defined"/utf8>>)) end, V12))), case V81 of {'Idris.Prelude.Types.Left', E95} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V83) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V9, V16}, V12)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> begin (V84 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"type_of_"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_UserName'(V10)))), V12))), case V84 of {'Idris.Prelude.Types.Left', E0} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Env':'un--letToLam'(V8))), begin (V92 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V88) -> fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V88, V89)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V90) -> fun (V91) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V90, V91)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V87, V86, {'Idris.Core.TT.TType', V9}, V12))), case V92 of {'Idris.Prelude.Types.Left', E2} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V94) -> begin (V95 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, {'Idris.Core.Name.UN', V10}, V12))), case V95 of {'Idris.Prelude.Types.Left', E4} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V97) -> begin (V99 = begin (V98 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V98} end), case V99 of {'Idris.Prelude.Types.Left', E6} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V101) -> begin (V105 = begin (V102 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V101, V87, V94))(V12))), case V102 of {'Idris.Prelude.Types.Left', E8} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V104) -> ('un--mkPrecise'(V1, V104, V12)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V105 of {'Idris.Prelude.Types.Left', E10} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V107) -> begin (V138 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V97, case V101 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V108 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), case V138 of {'Idris.Prelude.Types.Left', E42} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V140) -> case V140 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V141 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V1, V3, V9, V5, V87, V97, V94, V12))), case V141 of {'Idris.Prelude.Types.Left', E46} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V143) -> case V143 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V144, V145) -> begin (V146 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V1, V2, {'Idris.Core.Name.Resolved', V144}, V12))), case V146 of {'Idris.Prelude.Types.Left', E50} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V148) -> begin (V149 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V2, V1, V9, V97, V12))), case V149 of {'Idris.Prelude.Types.Left', E52} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V151) -> begin (V152 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, 0, V97, V12))), case V152 of {'Idris.Prelude.Types.Left', E54} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V154) -> begin (V155 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'(V4, V97, V12))), case V155 of {'Idris.Prelude.Types.Left', E56} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V157) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V145, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V94))}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V158 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V97)), <<" already defined"/utf8>>)) end, V12))), case V158 of {'Idris.Prelude.Types.Left', E44} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V160) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V9, V97}, V12)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
