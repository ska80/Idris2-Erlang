-module('Idris.Idris2.Compiler.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--castInt-4421'/5,
  'case--getExtraRuntime,getArg-4133'/3,
  'case--locate-3899'/3,
  'case--case block in parseCC,findTarget-3768'/7,
  'case--parseCC,getOpts-3661'/5,
  'nested--9134-644--in--un--tag'/3,
  'nested--13101-4120--in--un--readPath'/3,
  'nested--13101-4119--in--un--paths'/1,
  'nested--12571-3643--in--un--hasTarget'/5,
  'nested--12571-3642--in--un--getOpts'/4,
  'nested--13101-4118--in--un--getArg'/2,
  'nested--10179-1503--in--un--fullShow'/3,
  'nested--10095-1424--in--un--fullShow'/3,
  'nested--10011-1345--in--un--fullShow'/3,
  'nested--9925-1264--in--un--fullShow'/3,
  'nested--12571-3644--in--un--findTarget'/5,
  'nested--10179-1504--in--un--dumpDef'/3,
  'nested--10095-1425--in--un--dumpDef'/3,
  'nested--10011-1346--in--un--dumpDef'/3,
  'nested--9925-1265--in--un--dumpCase'/3,
  'dn--un--max_Ord_UsePhase'/2,
  'dn--un--compare_Ord_UsePhase'/2,
  'dn--un-->_Ord_UsePhase'/2,
  'dn--un-->=_Ord_UsePhase'/2,
  'un--warnIfHole'/3,
  'un--skipUnusedNames'/1,
  'un--replaceEntry'/2,
  'un--parseCC'/2,
  'un--nonErased'/3,
  'un--natHackNames'/0,
  'un--locate'/2,
  'un--isExported'/1,
  'un--incCompile'/3,
  'un--getNamedDef'/2,
  'un--getMinimalDef'/2,
  'un--getIncCompileData'/4,
  'un--getExtraRuntime'/2,
  'un--getExportedCompileData'/6,
  'un--getCompileData'/5,
  'un--getAllDesc'/4,
  'un--exportedName'/1,
  'un--exists'/2,
  'un--dylib_suffix'/0,
  'un--dumpVMCode'/2,
  'un--dumpLifted'/2,
  'un--dumpCases'/3,
  'un--dumpANF'/2,
  'un--copyLib'/2,
  'un--compileTerm'/3,
  'un--cgExecuteExpr'/4,
  'un--cgCompileLibrary'/5,
  'un--cgCompileExpr'/5,
  'un--castInt'/4
]).
'case--castInt-4421'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V7 of {'Idris.Core.TT.CharType'} -> (fun () -> case V6 of {'Idris.Builtin.MkPair', E68, E69} -> (fun (V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E102} -> (fun (V11) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E103, E104, E105, E106, E107, E108, E109} -> (fun (V12, V13, V14, V15, V16, V17, V18) -> ((V12(V11))(V0)) end(E103, E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E102)); _ -> case V8 of {'Idris.Prelude.Types.Just', E70} -> (fun (V19) -> case V6 of {'Idris.Builtin.MkPair', E71, E72} -> (fun (V20, V21) -> case V20 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E81, E82, E83, E84, E85, E86, E87} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> ((V23(V19))(V0)) end(E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E88, E89, E90, E91, E92, E93, E94} -> (fun (V29, V30, V31, V32, V33, V34, V35) -> ((V32(V19))(V0)) end(E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E95, E96, E97, E98, E99, E100, E101} -> (fun (V36, V37, V38, V39, V40, V41, V42) -> ((V41(V19))(V0)) end(E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V21 of {'Idris.Prelude.Types.Just', E73} -> (fun (V43) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E74, E75, E76, E77, E78, E79, E80} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> (((V50(V19))(V43))(V0)) end(E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73)); _ -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V51)) end end end end(E71, E72)); _ -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V52)) end end end(E70)); _ -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V53)) end end end end(E68, E69)); _ -> case V8 of {'Idris.Prelude.Types.Just', E36} -> (fun (V54) -> case V6 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V55, V56) -> case V55 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E47, E48, E49, E50, E51, E52, E53} -> (fun (V57, V58, V59, V60, V61, V62, V63) -> ((V58(V54))(V0)) end(E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E54, E55, E56, E57, E58, E59, E60} -> (fun (V64, V65, V66, V67, V68, V69, V70) -> ((V67(V54))(V0)) end(E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E61, E62, E63, E64, E65, E66, E67} -> (fun (V71, V72, V73, V74, V75, V76, V77) -> ((V76(V54))(V0)) end(E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V56 of {'Idris.Prelude.Types.Just', E39} -> (fun (V78) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E40, E41, E42, E43, E44, E45, E46} -> (fun (V79, V80, V81, V82, V83, V84, V85) -> (((V85(V54))(V78))(V0)) end(E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V86)) end end end end(E37, E38)); _ -> fun (V87) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V87)) end end end(E36)); _ -> fun (V88) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V88)) end end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V6 of {'Idris.Builtin.MkPair', E142, E143} -> (fun (V89, V90) -> case V90 of {'Idris.Prelude.Types.Just', E176} -> (fun (V91) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E177, E178, E179, E180, E181, E182, E183} -> (fun (V92, V93, V94, V95, V96, V97, V98) -> ((V94(V91))(V0)) end(E177, E178, E179, E180, E181, E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E176)); _ -> case V8 of {'Idris.Prelude.Types.Just', E144} -> (fun (V99) -> case V6 of {'Idris.Builtin.MkPair', E145, E146} -> (fun (V100, V101) -> case V100 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E155, E156, E157, E158, E159, E160, E161} -> (fun (V102, V103, V104, V105, V106, V107, V108) -> ((V103(V99))(V0)) end(E155, E156, E157, E158, E159, E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E162, E163, E164, E165, E166, E167, E168} -> (fun (V109, V110, V111, V112, V113, V114, V115) -> ((V112(V99))(V0)) end(E162, E163, E164, E165, E166, E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E169, E170, E171, E172, E173, E174, E175} -> (fun (V116, V117, V118, V119, V120, V121, V122) -> ((V121(V99))(V0)) end(E169, E170, E171, E172, E173, E174, E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V101 of {'Idris.Prelude.Types.Just', E147} -> (fun (V123) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E148, E149, E150, E151, E152, E153, E154} -> (fun (V124, V125, V126, V127, V128, V129, V130) -> (((V130(V99))(V123))(V0)) end(E148, E149, E150, E151, E152, E153, E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E147)); _ -> fun (V131) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V131)) end end end end(E145, E146)); _ -> fun (V132) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V132)) end end end(E144)); _ -> fun (V133) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V133)) end end end end(E142, E143)); _ -> case V8 of {'Idris.Prelude.Types.Just', E110} -> (fun (V134) -> case V6 of {'Idris.Builtin.MkPair', E111, E112} -> (fun (V135, V136) -> case V135 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E121, E122, E123, E124, E125, E126, E127} -> (fun (V137, V138, V139, V140, V141, V142, V143) -> ((V138(V134))(V0)) end(E121, E122, E123, E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E128, E129, E130, E131, E132, E133, E134} -> (fun (V144, V145, V146, V147, V148, V149, V150) -> ((V147(V134))(V0)) end(E128, E129, E130, E131, E132, E133, E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E135, E136, E137, E138, E139, E140, E141} -> (fun (V151, V152, V153, V154, V155, V156, V157) -> ((V156(V134))(V0)) end(E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V136 of {'Idris.Prelude.Types.Just', E113} -> (fun (V158) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E114, E115, E116, E117, E118, E119, E120} -> (fun (V159, V160, V161, V162, V163, V164, V165) -> (((V165(V134))(V158))(V0)) end(E114, E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E113)); _ -> fun (V166) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V166)) end end end end(E111, E112)); _ -> fun (V167) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V167)) end end end(E110)); _ -> fun (V168) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V168)) end end end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V6 of {'Idris.Builtin.MkPair', E216, E217} -> (fun (V169, V170) -> case V170 of {'Idris.Prelude.Types.Just', E250} -> (fun (V171) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E251, E252, E253, E254, E255, E256, E257} -> (fun (V172, V173, V174, V175, V176, V177, V178) -> ((V176(V171))(V0)) end(E251, E252, E253, E254, E255, E256, E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E250)); _ -> case V8 of {'Idris.Prelude.Types.Just', E218} -> (fun (V179) -> case V6 of {'Idris.Builtin.MkPair', E219, E220} -> (fun (V180, V181) -> case V180 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E229, E230, E231, E232, E233, E234, E235} -> (fun (V182, V183, V184, V185, V186, V187, V188) -> ((V183(V179))(V0)) end(E229, E230, E231, E232, E233, E234, E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E236, E237, E238, E239, E240, E241, E242} -> (fun (V189, V190, V191, V192, V193, V194, V195) -> ((V192(V179))(V0)) end(E236, E237, E238, E239, E240, E241, E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E243, E244, E245, E246, E247, E248, E249} -> (fun (V196, V197, V198, V199, V200, V201, V202) -> ((V201(V179))(V0)) end(E243, E244, E245, E246, E247, E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V181 of {'Idris.Prelude.Types.Just', E221} -> (fun (V203) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E222, E223, E224, E225, E226, E227, E228} -> (fun (V204, V205, V206, V207, V208, V209, V210) -> (((V210(V179))(V203))(V0)) end(E222, E223, E224, E225, E226, E227, E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E221)); _ -> fun (V211) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V211)) end end end end(E219, E220)); _ -> fun (V212) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V212)) end end end(E218)); _ -> fun (V213) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V213)) end end end end(E216, E217)); _ -> case V8 of {'Idris.Prelude.Types.Just', E184} -> (fun (V214) -> case V6 of {'Idris.Builtin.MkPair', E185, E186} -> (fun (V215, V216) -> case V215 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E195, E196, E197, E198, E199, E200, E201} -> (fun (V217, V218, V219, V220, V221, V222, V223) -> ((V218(V214))(V0)) end(E195, E196, E197, E198, E199, E200, E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E202, E203, E204, E205, E206, E207, E208} -> (fun (V224, V225, V226, V227, V228, V229, V230) -> ((V227(V214))(V0)) end(E202, E203, E204, E205, E206, E207, E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E209, E210, E211, E212, E213, E214, E215} -> (fun (V231, V232, V233, V234, V235, V236, V237) -> ((V236(V214))(V0)) end(E209, E210, E211, E212, E213, E214, E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V216 of {'Idris.Prelude.Types.Just', E187} -> (fun (V238) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E188, E189, E190, E191, E192, E193, E194} -> (fun (V239, V240, V241, V242, V243, V244, V245) -> (((V245(V214))(V238))(V0)) end(E188, E189, E190, E191, E192, E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E187)); _ -> fun (V246) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V246)) end end end end(E185, E186)); _ -> fun (V247) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V247)) end end end(E184)); _ -> fun (V248) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V248)) end end end end()); _ -> case V8 of {'Idris.Prelude.Types.Just', E4} -> (fun (V249) -> case V6 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V250, V251) -> case V250 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E15, E16, E17, E18, E19, E20, E21} -> (fun (V252, V253, V254, V255, V256, V257, V258) -> ((V253(V249))(V0)) end(E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E22, E23, E24, E25, E26, E27, E28} -> (fun (V259, V260, V261, V262, V263, V264, V265) -> ((V262(V249))(V0)) end(E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E29, E30, E31, E32, E33, E34, E35} -> (fun (V266, V267, V268, V269, V270, V271, V272) -> ((V271(V249))(V0)) end(E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V251 of {'Idris.Prelude.Types.Just', E7} -> (fun (V273) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E8, E9, E10, E11, E12, E13, E14} -> (fun (V274, V275, V276, V277, V278, V279, V280) -> (((V280(V249))(V273))(V0)) end(E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> fun (V281) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V281)) end end end end(E5, E6)); _ -> fun (V282) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V282)) end end end(E4)); _ -> fun (V283) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V283)) end end end end(E2, E3)); _ -> fun (V284) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V284)) end end end(E0, E1)); _ -> fun (V285) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V285)) end end.
'case--getExtraRuntime,getArg-4133'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Data.String':'un--trim'(V3)), <<"extraRuntime"/utf8>>)) of 1 -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'((1 + 0), ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), V4))))}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--locate-3899'(V0, V1, V2) -> case V2 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V7, V8)) end end}, $., ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)))) of 1 -> V3; 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('un--dylib_suffix'()))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E2 | E3] -> (fun (V9, V10) -> ('Idris.Idris2.Core.Core':'un--cond'([{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dll"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<".dll"/utf8>>)))))) end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dylib"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<".dylib"/utf8>>)))))) end} | []]], ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--dylib_suffix'()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, V9)))))))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in parseCC,findTarget-3768'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V8 of <<""/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V7)), []}}; _ -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V7)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('Idris.Idris2.Data.String':'un--trim'(V9)) end, ('nested--12571-3642--in--un--getOpts'(V0, V1, V2, ('Idris.Idris2.Data.String':'un--strTail'(V8))))))}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseCC,getOpts-3661'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of <<""/utf8>> -> [V5 | []]; _ -> [V5 | ('nested--12571-3642--in--un--getOpts'(V0, V1, V2, ('Idris.Idris2.Data.String':'un--strTail'(V6))))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9134-644--in--un--tag'(V0, V1, V2) -> case V2 of 0 -> 0; 1 -> 1; 2 -> 2; 3 -> 3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13101-4120--in--un--readPath'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Right', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Right', V34} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V1, V35}, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--13101-4119--in--un--paths'(V0) -> ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V5) -> ('nested--13101-4118--in--un--getArg'(V0, V5)) end, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V0)))))).
'nested--12571-3643--in--un--hasTarget'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Data.String':'un--span'(fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V5, $:)) end, V4)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12571-3642--in--un--getOpts'(V0, V1, V2, V3) -> case V3 of <<""/utf8>> -> []; _ -> ('case--parseCC,getOpts-3661'(V0, V1, V2, V3, ('Idris.Idris2.Data.String':'un--span'(fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, $,)) end, V3)))) end.
'nested--13101-4118--in--un--getArg'(V0, V1) -> ('case--getExtraRuntime,getArg-4133'(V0, V1, ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $=)) end, V1)))).
'nested--10179-1503--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--10095-1424--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--10011-1345--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--9925-1264--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--12571-3644--in--un--findTarget'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V5, V6) -> case ('nested--12571-3643--in--un--hasTarget'(V0, V1, V2, V3, V5)) of 1 -> ('case--case block in parseCC,findTarget-3768'(V0, V1, V2, V5, V6, V3, ('Idris.Idris2.Data.String':'un--span'(fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V7, $:)) end, V5)))); 0 -> ('nested--12571-3644--in--un--findTarget'(V0, V1, V2, V3, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10179-1504--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--10179-1503--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.VMCode':'dn--un--show_Show_VMDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10095-1425--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--10095-1424--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.ANF':'dn--un--show_Show_ANFDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10011-1346--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--10011-1345--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.LambdaLift':'dn--un--show_Show_LiftedDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9925-1265--in--un--dumpCase'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9925-1264--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedDef'(V6)), <<"\x{a}"/utf8>>)))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_UsePhase'(V0, V1) -> case ('dn--un-->_Ord_UsePhase'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--9134-644--in--un--tag'(V1, V0, V0)), ('nested--9134-644--in--un--tag'(V1, V0, V1)))).
'dn--un-->_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 2)).
'dn--un-->=_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 0)).
'un--warnIfHole'(V0, V1, V2) -> case V1 of {'Idris.Core.CompileExpr.MkNmError', E0} -> (fun (V3) -> begin (V31 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Warning: compiling hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))))))(V2))), {'Idris.Prelude.Types.Right', V31} end end(E0)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--skipUnusedNames'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--skipUnusedNames'(V2)) end(E0, E1)); {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> 0 end(E2, E3)); {'Idris.Core.Name.Resolved', E4} -> (fun (V5) -> 0 end(E4)); _ -> 1 end.
'un--replaceEntry'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', 0} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('Idris.Idris2.Core.Context':'un--addContextEntry'(V0, V6, {'Idris.Core.Name.Resolved', V2}, V7, V11)) end, V4)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parseCC'(V0, V1) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--12571-3644--in--un--findTarget'(V2, V3, V1, V2, V1)), fun () -> ('un--parseCC'(V3, V1)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nonErased'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E34} -> (fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V48 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V61, V62)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V63) -> fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V63, V64)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))} end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--natHackNames'() -> [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__add_Integer"/utf8>>}} | [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__sub_Integer"/utf8>>}} | [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__mul_Integer"/utf8>>}} | [{'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__integerToNat"/utf8>>}}} | []]]]].
'un--locate'(V0, V1) -> begin (V2 = ('case--locate-3899'(V1, V0, ('Idris.Idris2.Data.String':'un--words'(V1))))), fun (V3) -> begin (V7 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V4) -> ('Idris.Idris2.Core.Directory':'un--findLibraryFile'(V0, V2, V4)) end, fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V2} end end, V3))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V9}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--isExported'(V0) -> case V0 of 2 -> 1; 1 -> 1; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--incCompile'(V0, V1, V2) -> case V1 of {'Idris.Compiler.Common.MkCG', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> case V6 of {'Idris.Prelude.Types.Just', E5} -> (fun (V8) -> ((V8(V0))(V2)) end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNamedDef'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Core.CompileExpr':'un--forgetDef'(V5))), fun (V7) -> begin (V8 = ('un--warnIfHole'(V2, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, V6}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getMinimalDef'(V0, V1) -> case V0 of {'Idris.Core.Context.Context.Decoded', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, {'Idris.Prelude.Types.Nothing'}}} end(E0)); {'Idris.Core.Context.Context.Coded', E1, E2} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, V4, V1))), case V5 of {'Idris.Prelude.Types.Left', E3} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V7) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CDef'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CDef'(V11, V12)) end end}, V7, V1))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V71 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V22, V23, V24)) end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V25, V26)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V27, V28, V29)) end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V30, V31)) end end}}, V19, V20, V21)) end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V37, V38)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V39, V40, V41)) end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V42, V43)) end end}}, V32, V33)) end end}, V16, V17, V18)) end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V52, V53)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V57, V58)) end end}}, V46, V47, V48)) end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V61, V62, V63)) end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V64, V65)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V66, V67, V68)) end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V69, V70)) end end}}, V59, V60)) end end}, V44, V45)) end end}, V7, V1))), case V71 of {'Idris.Prelude.Types.Left', E7} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V73) -> begin (V75 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V74) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'(V74)) end, V73))), begin (V76 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V7, V1))), case V76 of {'Idris.Prelude.Types.Left', E9} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V7, V1))), case V79 of {'Idris.Prelude.Types.Left', E11} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V7, V1))), case V82 of {'Idris.Prelude.Types.Left', E13} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V84) -> begin (V85 = {'Idris.Core.Context.Context.MkGlobalDef', V78, V84, {'Idris.Core.TT.Erased', V78, 0}, [], [], [], [], V81, [], 2, {'Idris.Core.TT.MkTotality', {'Idris.Core.TT.Unchecked'}, {'Idris.Core.TT.IsCovering'}}, [], {'Idris.Prelude.Types.Nothing'}, V75, 0, 0, 1, {'Idris.Core.Context.Context.None'}, V15, []}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V85, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V4}}}} end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getIncCompileData'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V32 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V47 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V44, V45, V46)) end end end}, V39, V40)) end end, V38, [], V3))), case V47 of {'Idris.Prelude.Types.Left', E32} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V49) -> begin (V52 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V50) -> fun (V51) -> ('un--nonErased'(V0, V50, V51)) end end, V49, V3))), case V52 of {'Idris.Prelude.Types.Left', E34} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V54) -> begin (V347 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V55) -> case V55 of {'Idris.Prelude.Types.Left', E36} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V57) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--catMaybes'(V57))} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V58) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V59) -> fun (V60) -> ('Idris.Idris2.Compiler.Opts.CSE':'un--cseDef'(V0, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V65, V66)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V69, V70)) end end}, V61, V62)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V75, V76)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V77, V78)) end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V79, V80)) end end}, V71, V72)) end end}, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V85, V86)) end end}, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V91, V92)) end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V99, V100)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V103, V104)) end end}, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V117, V118)) end end}, V81, V82)) end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V123, V124)) end end}, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V125, V126)) end end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V127, V128)) end end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V129, V130)) end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V131, V132)) end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V133, V134)) end end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V137, V138)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V141, V142)) end end}, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V143, V144)) end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V149, V150)) end end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V151, V152)) end end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V153, V154)) end end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V155, V156)) end end}, V119, V120)) end end, fun (V157) -> fun (V158) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V159, V160)) end end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V161, V162)) end end}, fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V163, V164)) end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V165, V166)) end end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V167, V168)) end end, fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V169, V170)) end end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V171, V172)) end end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V173, V174)) end end, fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V175, V176)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V177, V178)) end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V179, V180)) end end}, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V181, V182)) end end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V183, V184)) end end, fun (V185) -> fun (V186) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V185, V186)) end end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V187, V188)) end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V189, V190)) end end, fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V193, V194)) end end}, V157, V158)) end end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V197, V198)) end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V199, V200)) end end}, fun (V201) -> fun (V202) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V201, V202)) end end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V203, V204)) end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V205, V206)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V207, V208)) end end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V209, V210)) end end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V211, V212)) end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V213, V214)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V215, V216)) end end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V217, V218)) end end}, fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V219, V220)) end end, fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V221, V222)) end end, fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V223, V224)) end end, fun (V225) -> fun (V226) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V225, V226)) end end, fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V227, V228)) end end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V229, V230)) end end, fun (V231) -> fun (V232) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V231, V232)) end end}, V195, V196)) end end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V235) -> fun (V236) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V235, V236)) end end, fun (V237) -> fun (V238) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V237, V238)) end end}, fun (V239) -> fun (V240) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V239, V240)) end end, fun (V241) -> fun (V242) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V241, V242)) end end, fun (V243) -> fun (V244) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V243, V244)) end end, fun (V245) -> fun (V246) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V245, V246)) end end, fun (V247) -> fun (V248) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V247, V248)) end end, fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V249, V250)) end end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V251, V252)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V253) -> fun (V254) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V253, V254)) end end, fun (V255) -> fun (V256) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V255, V256)) end end}, fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V257, V258)) end end, fun (V259) -> fun (V260) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V259, V260)) end end, fun (V261) -> fun (V262) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V261, V262)) end end, fun (V263) -> fun (V264) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V263, V264)) end end, fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V265, V266)) end end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V267, V268)) end end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V269, V270)) end end}, V233, V234)) end end, fun (V271) -> fun (V272) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V273) -> fun (V274) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V273, V274)) end end, fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V275, V276)) end end}, fun (V277) -> fun (V278) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V277, V278)) end end, fun (V279) -> fun (V280) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V279, V280)) end end, fun (V281) -> fun (V282) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V281, V282)) end end, fun (V283) -> fun (V284) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V283, V284)) end end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V285, V286)) end end, fun (V287) -> fun (V288) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V287, V288)) end end, fun (V289) -> fun (V290) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V289, V290)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V291) -> fun (V292) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V291, V292)) end end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V293, V294)) end end}, fun (V295) -> fun (V296) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V295, V296)) end end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V297, V298)) end end, fun (V299) -> fun (V300) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V299, V300)) end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V301, V302)) end end, fun (V303) -> fun (V304) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V303, V304)) end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V305, V306)) end end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V307, V308)) end end}, V271, V272)) end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V311) -> fun (V312) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V311, V312)) end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V313, V314)) end end}, fun (V315) -> fun (V316) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V315, V316)) end end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V317, V318)) end end, fun (V319) -> fun (V320) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V319, V320)) end end, fun (V321) -> fun (V322) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V321, V322)) end end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V323, V324)) end end, fun (V325) -> fun (V326) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V325, V326)) end end, fun (V327) -> fun (V328) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V327, V328)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V329) -> fun (V330) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V329, V330)) end end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V331, V332)) end end}, fun (V333) -> fun (V334) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V333, V334)) end end, fun (V335) -> fun (V336) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V335, V336)) end end, fun (V337) -> fun (V338) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V337, V338)) end end, fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V339, V340)) end end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V341, V342)) end end, fun (V343) -> fun (V344) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V343, V344)) end end, fun (V345) -> fun (V346) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V345, V346)) end end}, V309, V310)) end end})), V59, V60)) end end, V54, [], V58)) end, V3))), case V347 of {'Idris.Prelude.Types.Left', E38} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V349) -> begin (V351 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V350) -> ('un--getNamedDef'(V0, V350)) end, V349, [], V3))), case V351 of {'Idris.Prelude.Types.Left', E40} -> (fun (V352) -> {'Idris.Prelude.Types.Left', V352} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V353) -> begin (V356 = case ('dn--un-->=_Ord_UsePhase'(V2, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Lambda lift"/utf8>> end, fun (V354) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V355) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V1, V355)) end, V349, [], V354)) end, V3)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V356 of {'Idris.Prelude.Types.Left', E42} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V358) -> begin (V387 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V359) -> fun (V360) -> fun (V361) -> fun (V362) -> fun (V363) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V361, V362, V363)) end end end end end, fun (V364) -> fun (V365) -> fun (V366) -> fun (V367) -> fun (V368) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V366, V367, V368)) end end end end end, fun (V369) -> fun (V370) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V370)) end end, fun (V371) -> fun (V372) -> fun (V373) -> fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V374, V375, V376, V377)) end end end end end end end, fun (V378) -> fun (V379) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V379)) end end, fun (V380) -> fun (V381) -> fun (V382) -> fun (V383) -> fun (V384) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V382, V383, V384)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V385) -> fun (V386) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V385, V386)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V358))), begin (V396 = case ('dn--un-->=_Ord_UsePhase'(V2, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get ANF"/utf8>> end, fun (V388) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V389) -> fun (V390) -> case V389 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V391, V392) -> begin (V393 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V392, V390))), case V393 of {'Idris.Prelude.Types.Left', E46} -> (fun (V394) -> {'Idris.Prelude.Types.Left', V394} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V395) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V391, V395}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V387, [], V388)) end, V3)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V396 of {'Idris.Prelude.Types.Left', E48} -> (fun (V397) -> {'Idris.Prelude.Types.Left', V397} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V398) -> begin (V400 = case ('dn--un-->=_Ord_UsePhase'(V2, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get VM Code"/utf8>> end, fun (V399) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V398))} end, V3)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V400 of {'Idris.Prelude.Types.Left', E50} -> (fun (V401) -> {'Idris.Prelude.Types.Left', V401} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V402) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', {'Idris.Core.CompileExpr.CErased', ('Idris.Idris2.Core.FC':'un--emptyFC'())}, V353, V387, V398, V402}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getExtraRuntime'(V0, V1) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V2) -> fun (V3) -> ('nested--13101-4120--in--un--readPath'(V0, V2, V3)) end end, ('nested--13101-4119--in--un--paths'(V0)), [], V1))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V33, V34)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Data.List':'un--intersperse'(<<"\x{a}"/utf8>>, V6))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getExportedCompileData'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V5))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, V15))(V5))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E6} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V46) -> begin (V78 = ('Idris.Idris2.Data.List':'un--filter'(V3, ('Idris.Idris2.Data.List':'un--filter'(fun (V47) -> ('un--skipUnusedNames'(V47)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.Context':'un--getResolvedAs'(case V9 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V48 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))), begin (V114 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V79) -> fun (V80) -> begin (V111 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V79, case V9 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110) -> V81 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V80))), case V111 of {'Idris.Prelude.Types.Left', E68} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V113) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V79, V113}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V78, [], V5))), case V114 of {'Idris.Prelude.Types.Left', E70} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V116) -> begin (V118 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V117) -> ('un--exportedName'(V117)) end, V116))), begin (V127 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V121, V122, V123)) end end end, fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V124, V125, V126)) end end end}, V119, V120)) end end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--natHackNames'()), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V118, V4)))), [], V5))), case V127 of {'Idris.Prelude.Types.Left', E72} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V129) -> begin (V130 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get names"/utf8>> end, ('un--getAllDesc'(V0, V129, V46, V9)), V5))), case V130 of {'Idris.Prelude.Types.Left', E74} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V132) -> begin (V161 = begin (V160 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V135, V136, V137)) end end end end end, fun (V138) -> fun (V139) -> fun (V140) -> V139 end end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V143(V145))), begin (V147 = (V144(V145))), (V146(V147)) end end end end end end end}, fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> begin (V153 = (V150(V152))), ((V151(V153))(V152)) end end end end end end, fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V155(V156))), (V157(V156)) end end end end}, fun (V158) -> fun (V159) -> V159 end end}, V46))(V5))), {'Idris.Prelude.Types.Right', V160} end), case V161 of {'Idris.Prelude.Types.Left', E76} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V163) -> begin (V165 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V164) -> V164 end, V163))), begin (V167 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V166) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'(V166))} end, V165))), begin (V176 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V170) -> fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V170, V171, V172)) end end end, fun (V173) -> fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V173, V174, V175)) end end end}, V168, V169)) end end, V167, [], V5))), case V176 of {'Idris.Prelude.Types.Left', E78} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V178) -> begin (V186 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V179) -> fun (V180) -> ('un--nonErased'(V0, V179, V180)) end end, ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V181, V182)) end end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V183, V184)) end end}, ('Idris.Idris2.Data.List':'un--filter'(fun (V185) -> ('un--skipUnusedNames'(V185)) end, V178)))), V5))), case V186 of {'Idris.Prelude.Types.Left', E80} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V188) -> begin (V192 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Merge lambda"/utf8>> end, fun (V189) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V190) -> fun (V191) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V190, V191)) end end, V188, V189)) end, V5))), case V192 of {'Idris.Prelude.Types.Left', E82} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V194) -> begin (V198 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Fix arity"/utf8>> end, fun (V195) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V196) -> fun (V197) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V196, V197)) end end, V188, V195)) end, V5))), case V198 of {'Idris.Prelude.Types.Left', E84} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V200) -> begin (V494 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V201) -> case V201 of {'Idris.Prelude.Types.Left', E86} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V203) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V204) -> V204 end, V203))} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V205) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V206) -> fun (V207) -> ('Idris.Idris2.Compiler.Opts.CSE':'un--cseDef'(V0, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V212, V213)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V214) -> fun (V215) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V214, V215)) end end, fun (V216) -> fun (V217) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V216, V217)) end end}, V208, V209)) end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V220, V221)) end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V222, V223)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V224) -> fun (V225) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V224, V225)) end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V226, V227)) end end}, V218, V219)) end end}, fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V232, V233)) end end}, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V234, V235)) end end, fun (V236) -> fun (V237) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V236, V237)) end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V238, V239)) end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V240, V241)) end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V246, V247)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V248) -> fun (V249) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V250, V251)) end end}, fun (V252) -> fun (V253) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V254, V255)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V256, V257)) end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V260, V261)) end end, fun (V262) -> fun (V263) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V264, V265)) end end}, V228, V229)) end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V268) -> fun (V269) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V268, V269)) end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V270, V271)) end end}, fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V272, V273)) end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V274, V275)) end end, fun (V276) -> fun (V277) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V276, V277)) end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V278, V279)) end end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V280, V281)) end end, fun (V282) -> fun (V283) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V282, V283)) end end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V284, V285)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V286, V287)) end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V288, V289)) end end}, fun (V290) -> fun (V291) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V290, V291)) end end, fun (V292) -> fun (V293) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V292, V293)) end end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V294, V295)) end end, fun (V296) -> fun (V297) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V296, V297)) end end, fun (V298) -> fun (V299) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V298, V299)) end end, fun (V300) -> fun (V301) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V300, V301)) end end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V302, V303)) end end}, V266, V267)) end end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V306, V307)) end end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V308, V309)) end end}, fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V310, V311)) end end, fun (V312) -> fun (V313) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V312, V313)) end end, fun (V314) -> fun (V315) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V314, V315)) end end, fun (V316) -> fun (V317) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V316, V317)) end end, fun (V318) -> fun (V319) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V318, V319)) end end, fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V320, V321)) end end, fun (V322) -> fun (V323) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V322, V323)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V324) -> fun (V325) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V324, V325)) end end, fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V326, V327)) end end}, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V328, V329)) end end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V330, V331)) end end, fun (V332) -> fun (V333) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V332, V333)) end end, fun (V334) -> fun (V335) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V334, V335)) end end, fun (V336) -> fun (V337) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V336, V337)) end end, fun (V338) -> fun (V339) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V338, V339)) end end, fun (V340) -> fun (V341) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V340, V341)) end end}, V304, V305)) end end, fun (V342) -> fun (V343) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V344) -> fun (V345) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V344, V345)) end end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V346, V347)) end end}, fun (V348) -> fun (V349) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V348, V349)) end end, fun (V350) -> fun (V351) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V350, V351)) end end, fun (V352) -> fun (V353) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V352, V353)) end end, fun (V354) -> fun (V355) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V354, V355)) end end, fun (V356) -> fun (V357) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V356, V357)) end end, fun (V358) -> fun (V359) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V358, V359)) end end, fun (V360) -> fun (V361) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V360, V361)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V362) -> fun (V363) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V362, V363)) end end, fun (V364) -> fun (V365) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V364, V365)) end end}, fun (V366) -> fun (V367) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V366, V367)) end end, fun (V368) -> fun (V369) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V368, V369)) end end, fun (V370) -> fun (V371) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V370, V371)) end end, fun (V372) -> fun (V373) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V372, V373)) end end, fun (V374) -> fun (V375) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V374, V375)) end end, fun (V376) -> fun (V377) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V376, V377)) end end, fun (V378) -> fun (V379) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V378, V379)) end end}, V342, V343)) end end, fun (V380) -> fun (V381) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V382) -> fun (V383) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V382, V383)) end end, fun (V384) -> fun (V385) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V384, V385)) end end}, fun (V386) -> fun (V387) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V386, V387)) end end, fun (V388) -> fun (V389) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V388, V389)) end end, fun (V390) -> fun (V391) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V390, V391)) end end, fun (V392) -> fun (V393) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V392, V393)) end end, fun (V394) -> fun (V395) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V394, V395)) end end, fun (V396) -> fun (V397) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V396, V397)) end end, fun (V398) -> fun (V399) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V398, V399)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V400) -> fun (V401) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V400, V401)) end end, fun (V402) -> fun (V403) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V402, V403)) end end}, fun (V404) -> fun (V405) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V404, V405)) end end, fun (V406) -> fun (V407) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V406, V407)) end end, fun (V408) -> fun (V409) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V408, V409)) end end, fun (V410) -> fun (V411) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V410, V411)) end end, fun (V412) -> fun (V413) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V412, V413)) end end, fun (V414) -> fun (V415) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V414, V415)) end end, fun (V416) -> fun (V417) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V416, V417)) end end}, V380, V381)) end end, fun (V418) -> fun (V419) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V420) -> fun (V421) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V420, V421)) end end, fun (V422) -> fun (V423) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V422, V423)) end end}, fun (V424) -> fun (V425) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V424, V425)) end end, fun (V426) -> fun (V427) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V426, V427)) end end, fun (V428) -> fun (V429) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V428, V429)) end end, fun (V430) -> fun (V431) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V430, V431)) end end, fun (V432) -> fun (V433) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V432, V433)) end end, fun (V434) -> fun (V435) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V434, V435)) end end, fun (V436) -> fun (V437) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V436, V437)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V438) -> fun (V439) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V438, V439)) end end, fun (V440) -> fun (V441) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V440, V441)) end end}, fun (V442) -> fun (V443) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V442, V443)) end end, fun (V444) -> fun (V445) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V444, V445)) end end, fun (V446) -> fun (V447) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V446, V447)) end end, fun (V448) -> fun (V449) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V448, V449)) end end, fun (V450) -> fun (V451) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V450, V451)) end end, fun (V452) -> fun (V453) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V452, V453)) end end, fun (V454) -> fun (V455) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V454, V455)) end end}, V418, V419)) end end, fun (V456) -> fun (V457) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V458) -> fun (V459) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V458, V459)) end end, fun (V460) -> fun (V461) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V460, V461)) end end}, fun (V462) -> fun (V463) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V462, V463)) end end, fun (V464) -> fun (V465) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V464, V465)) end end, fun (V466) -> fun (V467) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V466, V467)) end end, fun (V468) -> fun (V469) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V468, V469)) end end, fun (V470) -> fun (V471) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V470, V471)) end end, fun (V472) -> fun (V473) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V472, V473)) end end, fun (V474) -> fun (V475) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V474, V475)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V476) -> fun (V477) -> ('Idris.Idris2.Core.Ord':'dn--un--==_Eq_(CExp $vars)'(V476, V477)) end end, fun (V478) -> fun (V479) -> ('Idris.Idris2.Core.Ord':'dn--un--/=_Eq_(CExp $vars)'(V478, V479)) end end}, fun (V480) -> fun (V481) -> ('Idris.Idris2.Core.Ord':'dn--un--compare_Ord_(CExp $vars)'(V480, V481)) end end, fun (V482) -> fun (V483) -> ('Idris.Idris2.Core.Ord':'dn--un--<_Ord_(CExp $vars)'(V482, V483)) end end, fun (V484) -> fun (V485) -> ('Idris.Idris2.Core.Ord':'dn--un-->_Ord_(CExp $vars)'(V484, V485)) end end, fun (V486) -> fun (V487) -> ('Idris.Idris2.Core.Ord':'dn--un--<=_Ord_(CExp $vars)'(V486, V487)) end end, fun (V488) -> fun (V489) -> ('Idris.Idris2.Core.Ord':'dn--un-->=_Ord_(CExp $vars)'(V488, V489)) end end, fun (V490) -> fun (V491) -> ('Idris.Idris2.Core.Ord':'dn--un--max_Ord_(CExp $vars)'(V490, V491)) end end, fun (V492) -> fun (V493) -> ('Idris.Idris2.Core.Ord':'dn--un--min_Ord_(CExp $vars)'(V492, V493)) end end}, V456, V457)) end end})), V206, V207)) end end, V188, [], V205)) end, V5))), case V494 of {'Idris.Prelude.Types.Left', E88} -> (fun (V495) -> {'Idris.Prelude.Types.Left', V495} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V496) -> begin (V498 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V497) -> ('un--getNamedDef'(V0, V497)) end, V496, [], V5))), case V498 of {'Idris.Prelude.Types.Left', E90} -> (fun (V499) -> {'Idris.Prelude.Types.Left', V499} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V500) -> begin (V503 = case ('dn--un-->=_Ord_UsePhase'(V2, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Lambda lift"/utf8>> end, fun (V501) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V502) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V1, V502)) end, V496, [], V501)) end, V5)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V503 of {'Idris.Prelude.Types.Left', E92} -> (fun (V504) -> {'Idris.Prelude.Types.Left', V504} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V505) -> begin (V534 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> fun (V510) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V508, V509, V510)) end end end end end, fun (V511) -> fun (V512) -> fun (V513) -> fun (V514) -> fun (V515) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V513, V514, V515)) end end end end end, fun (V516) -> fun (V517) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V517)) end end, fun (V518) -> fun (V519) -> fun (V520) -> fun (V521) -> fun (V522) -> fun (V523) -> fun (V524) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V521, V522, V523, V524)) end end end end end end end, fun (V525) -> fun (V526) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V526)) end end, fun (V527) -> fun (V528) -> fun (V529) -> fun (V530) -> fun (V531) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V529, V530, V531)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V532) -> fun (V533) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V532, V533)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V505))), begin (V543 = case ('dn--un-->=_Ord_UsePhase'(V2, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get ANF"/utf8>> end, fun (V535) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V536) -> fun (V537) -> case V536 of {'Idris.Builtin.MkPair', E94, E95} -> (fun (V538, V539) -> begin (V540 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V539, V537))), case V540 of {'Idris.Prelude.Types.Left', E96} -> (fun (V541) -> {'Idris.Prelude.Types.Left', V541} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V542) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V538, V542}} end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V534, [], V535)) end, V5)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V543 of {'Idris.Prelude.Types.Left', E98} -> (fun (V544) -> {'Idris.Prelude.Types.Left', V544} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V545) -> begin (V547 = case ('dn--un-->=_Ord_UsePhase'(V2, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get VM Code"/utf8>> end, fun (V546) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V545))} end, V5)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V547 of {'Idris.Prelude.Types.Left', E100} -> (fun (V548) -> {'Idris.Prelude.Types.Left', V548} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V549) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', {'Idris.Core.CompileExpr.CErased', ('Idris.Idris2.Core.FC':'un--emptyFC'())}, V500, V534, V545, V549}} end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getCompileData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V138 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V14) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V15) -> V15 end end, fun () -> fun (V16) -> fun (V17) -> ('dn--un--max_Ord_UsePhase'(V16, V17)) end end end, V14)) end, V12, V13)) end end, V2, [('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V20, V21)) end end end end, 0, case V11 of {'Idris.Core.Options.MkSessionOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V36 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V50, V51)) end end end end, 1, case V11 of {'Idris.Core.Options.MkSessionOpts', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V67 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V80, V81)) end end end end, 2, case V11 of {'Idris.Core.Options.MkSessionOpts', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V98 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V110, V111)) end end end end, 3, case V11 of {'Idris.Core.Options.MkSessionOpts', E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V129 end(E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | []]]]]))), begin (V139 = ('Idris.Idris2.Core.TT':'un--getRefs'({'Idris.Core.Name.Resolved', -1}, V3))), begin (V146 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V140, V141, V142)) end end end, fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V143, V144, V145)) end end end}, V3, V4))), case V146 of {'Idris.Prelude.Types.Left', E108} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V148) -> begin (V157 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V151, V152, V153)) end end end, fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V154, V155, V156)) end end end}, V149, V150)) end end, ('un--natHackNames'()), [], V4))), case V157 of {'Idris.Prelude.Types.Left', E110} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V159) -> begin (V160 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V4))), case V160 of {'Idris.Prelude.Types.Left', E112} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V162) -> begin (V191 = begin (V190 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V165, V166, V167)) end end end end end, fun (V168) -> fun (V169) -> fun (V170) -> V169 end end end, fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> begin (V176 = (V173(V175))), begin (V177 = (V174(V175))), (V176(V177)) end end end end end end end}, fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V180(V182))), ((V181(V183))(V182)) end end end end end end, fun (V184) -> fun (V185) -> fun (V186) -> begin (V187 = (V185(V186))), (V187(V186)) end end end end}, fun (V188) -> fun (V189) -> V189 end end}, V162))(V4))), {'Idris.Prelude.Types.Right', V190} end), case V191 of {'Idris.Prelude.Types.Left', E114} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V193) -> begin (V194 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get names"/utf8>> end, ('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V159, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V139)))), V193, V8)), V4))), case V194 of {'Idris.Prelude.Types.Left', E116} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V196) -> begin (V225 = begin (V224 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V199, V200, V201)) end end end end end, fun (V202) -> fun (V203) -> fun (V204) -> V203 end end end, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), begin (V211 = (V208(V209))), (V210(V211)) end end end end end end end}, fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> begin (V217 = (V214(V216))), ((V215(V217))(V216)) end end end end end end, fun (V218) -> fun (V219) -> fun (V220) -> begin (V221 = (V219(V220))), (V221(V220)) end end end end}, fun (V222) -> fun (V223) -> V223 end end}, V193))(V4))), {'Idris.Prelude.Types.Right', V224} end), case V225 of {'Idris.Prelude.Types.Left', E118} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V227) -> begin (V228 = ('Idris.Idris2.Data.List':'un--catMaybes'(V227))), begin (V230 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V229) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'(V229))} end, V228))), begin (V239 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V231) -> fun (V232) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V233, V234, V235)) end end end, fun (V236) -> fun (V237) -> fun (V238) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V236, V237, V238)) end end end}, V231, V232)) end end, V230, [], V4))), case V239 of {'Idris.Prelude.Types.Left', E120} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V241) -> begin (V244 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V242) -> fun (V243) -> ('un--nonErased'(V0, V242, V243)) end end, V241, V4))), case V244 of {'Idris.Prelude.Types.Left', E122} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V246) -> begin (V250 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Merge lambda"/utf8>> end, fun (V247) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V248) -> fun (V249) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V248, V249)) end end, V246, V247)) end, V4))), case V250 of {'Idris.Prelude.Types.Left', E124} -> (fun (V251) -> {'Idris.Prelude.Types.Left', V251} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V252) -> begin (V256 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Fix arity"/utf8>> end, fun (V253) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V254) -> fun (V255) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V254, V255)) end end, V246, V253)) end, V4))), case V256 of {'Idris.Prelude.Types.Left', E126} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V258) -> begin (V262 = begin (V259 = ('Idris.Idris2.Compiler.CompileExpr':'un--compileExp'(V0, V148, V4))), case V259 of {'Idris.Prelude.Types.Left', E128} -> (fun (V260) -> {'Idris.Prelude.Types.Left', V260} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V261) -> (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, V261))(V4)) end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V262 of {'Idris.Prelude.Types.Left', E130} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V264) -> begin (V278 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ CSE"/utf8>> end, fun (V265) -> begin (V266 = ('Idris.Idris2.Compiler.Opts.CSE':'un--analyzeNames'(V0, V246, V265))), case V266 of {'Idris.Prelude.Types.Left', E132} -> (fun (V267) -> {'Idris.Prelude.Types.Left', V267} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V268) -> begin (V275 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V269) -> case V269 of {'Idris.Prelude.Types.Left', E134} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V271) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--catMaybes'(V271))} end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V272) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V273) -> fun (V274) -> ('Idris.Idris2.Compiler.Opts.CSE':'un--cseDef'(V0, V268, V273, V274)) end end, V246, [], V272)) end, V265))), case V275 of {'Idris.Prelude.Types.Left', E136} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V277) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Compiler.Opts.CSE':'un--cseNewToplevelDefs'(V268)), V277)), ('Idris.Idris2.Compiler.Opts.CSE':'un--adjust'(V268, V264))}} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V4))), case V278 of {'Idris.Prelude.Types.Left', E138} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V280) -> case V280 of {'Idris.Builtin.MkPair', E140, E141} -> (fun (V281, V282) -> begin (V285 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Forget names"/utf8>> end, fun (V283) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V284) -> ('un--getNamedDef'(V0, V284)) end, V281, [], V283)) end, V4))), case V285 of {'Idris.Prelude.Types.Left', E142} -> (fun (V286) -> {'Idris.Prelude.Types.Left', V286} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V287) -> begin (V288 = {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}), begin (V289 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V1, V288, V282, V4))), case V289 of {'Idris.Prelude.Types.Left', E144} -> (fun (V290) -> {'Idris.Prelude.Types.Left', V290} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V291) -> case V291 of {'Idris.Builtin.MkPair', E146, E147} -> (fun (V292, V293) -> begin (V296 = case ('dn--un-->=_Ord_UsePhase'(V138, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Lambda lift"/utf8>> end, fun (V294) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V295) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V1, V295)) end, V281, [], V294)) end, V4)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V296 of {'Idris.Prelude.Types.Left', E148} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V298) -> begin (V327 = [{'Idris.Builtin.MkPair', V288, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V292}} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V293, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V301, V302, V303)) end end end end end, fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V306, V307, V308)) end end end end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V310)) end end, fun (V311) -> fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> fun (V317) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V314, V315, V316, V317)) end end end end end end end, fun (V318) -> fun (V319) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V319)) end end, fun (V320) -> fun (V321) -> fun (V322) -> fun (V323) -> fun (V324) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V322, V323, V324)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V325) -> fun (V326) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V325, V326)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V298))))]), begin (V336 = case ('dn--un-->=_Ord_UsePhase'(V138, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get ANF"/utf8>> end, fun (V328) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V329) -> fun (V330) -> case V329 of {'Idris.Builtin.MkPair', E150, E151} -> (fun (V331, V332) -> begin (V333 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V332, V330))), case V333 of {'Idris.Prelude.Types.Left', E152} -> (fun (V334) -> {'Idris.Prelude.Types.Left', V334} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V335) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V331, V335}} end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V327, [], V328)) end, V4)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V336 of {'Idris.Prelude.Types.Left', E154} -> (fun (V337) -> {'Idris.Prelude.Types.Left', V337} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V338) -> begin (V340 = case ('dn--un-->=_Ord_UsePhase'(V138, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get VM Code"/utf8>> end, fun (V339) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V338))} end, V4)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V340 of {'Idris.Prelude.Types.Left', E156} -> (fun (V341) -> {'Idris.Prelude.Types.Left', V341} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V342) -> begin (V344 = begin (V343 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V343} end), case V344 of {'Idris.Prelude.Types.Left', E158} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V346) -> begin (V405 = case V11 of {'Idris.Core.Options.MkSessionOpts', E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185} -> (fun (V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372) -> case V361 of {'Idris.Prelude.Types.Just', E186} -> (fun (V373) -> begin (V402 = begin (V401 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V376, V377, V378)) end end end end end, fun (V379) -> fun (V380) -> fun (V381) -> V380 end end end, fun (V382) -> fun (V383) -> fun (V384) -> fun (V385) -> fun (V386) -> begin (V387 = (V384(V386))), begin (V388 = (V385(V386))), (V387(V388)) end end end end end end end}, fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> begin (V394 = (V391(V393))), ((V392(V394))(V393)) end end end end end end, fun (V395) -> fun (V396) -> fun (V397) -> begin (V398 = (V396(V397))), (V398(V397)) end end end end}, fun (V399) -> fun (V400) -> V400 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping case trees to "/utf8>>, V373))))(V4))), {'Idris.Prelude.Types.Right', V401} end), case V402 of {'Idris.Prelude.Types.Left', E187} -> (fun (V403) -> {'Idris.Prelude.Types.Left', V403} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V404) -> ('un--dumpCases'(V373, V287, V4)) end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E186)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V405 of {'Idris.Prelude.Types.Left', E189} -> (fun (V406) -> {'Idris.Prelude.Types.Left', V406} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V407) -> begin (V466 = case V11 of {'Idris.Core.Options.MkSessionOpts', E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216} -> (fun (V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433) -> case V423 of {'Idris.Prelude.Types.Just', E217} -> (fun (V434) -> begin (V463 = begin (V462 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V435) -> fun (V436) -> fun (V437) -> fun (V438) -> fun (V439) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V437, V438, V439)) end end end end end, fun (V440) -> fun (V441) -> fun (V442) -> V441 end end end, fun (V443) -> fun (V444) -> fun (V445) -> fun (V446) -> fun (V447) -> begin (V448 = (V445(V447))), begin (V449 = (V446(V447))), (V448(V449)) end end end end end end end}, fun (V450) -> fun (V451) -> fun (V452) -> fun (V453) -> fun (V454) -> begin (V455 = (V452(V454))), ((V453(V455))(V454)) end end end end end end, fun (V456) -> fun (V457) -> fun (V458) -> begin (V459 = (V457(V458))), (V459(V458)) end end end end}, fun (V460) -> fun (V461) -> V461 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping lambda lifted defs to "/utf8>>, V434))))(V4))), {'Idris.Prelude.Types.Right', V462} end), case V463 of {'Idris.Prelude.Types.Left', E218} -> (fun (V464) -> {'Idris.Prelude.Types.Left', V464} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V465) -> (('un--dumpLifted'(V434, V327))(V4)) end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E217)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V466 of {'Idris.Prelude.Types.Left', E220} -> (fun (V467) -> {'Idris.Prelude.Types.Left', V467} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V468) -> begin (V527 = case V11 of {'Idris.Core.Options.MkSessionOpts', E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247} -> (fun (V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494) -> case V485 of {'Idris.Prelude.Types.Just', E248} -> (fun (V495) -> begin (V524 = begin (V523 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V496) -> fun (V497) -> fun (V498) -> fun (V499) -> fun (V500) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V498, V499, V500)) end end end end end, fun (V501) -> fun (V502) -> fun (V503) -> V502 end end end, fun (V504) -> fun (V505) -> fun (V506) -> fun (V507) -> fun (V508) -> begin (V509 = (V506(V508))), begin (V510 = (V507(V508))), (V509(V510)) end end end end end end end}, fun (V511) -> fun (V512) -> fun (V513) -> fun (V514) -> fun (V515) -> begin (V516 = (V513(V515))), ((V514(V516))(V515)) end end end end end end, fun (V517) -> fun (V518) -> fun (V519) -> begin (V520 = (V518(V519))), (V520(V519)) end end end end}, fun (V521) -> fun (V522) -> V522 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping ANF defs to "/utf8>>, V495))))(V4))), {'Idris.Prelude.Types.Right', V523} end), case V524 of {'Idris.Prelude.Types.Left', E249} -> (fun (V525) -> {'Idris.Prelude.Types.Left', V525} end(E249)); {'Idris.Prelude.Types.Right', E250} -> (fun (V526) -> (('un--dumpANF'(V495, V338))(V4)) end(E250)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E248)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V527 of {'Idris.Prelude.Types.Left', E251} -> (fun (V528) -> {'Idris.Prelude.Types.Left', V528} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V529) -> begin (V588 = case V11 of {'Idris.Core.Options.MkSessionOpts', E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278} -> (fun (V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555) -> case V547 of {'Idris.Prelude.Types.Just', E279} -> (fun (V556) -> begin (V585 = begin (V584 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V557) -> fun (V558) -> fun (V559) -> fun (V560) -> fun (V561) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V559, V560, V561)) end end end end end, fun (V562) -> fun (V563) -> fun (V564) -> V563 end end end, fun (V565) -> fun (V566) -> fun (V567) -> fun (V568) -> fun (V569) -> begin (V570 = (V567(V569))), begin (V571 = (V568(V569))), (V570(V571)) end end end end end end end}, fun (V572) -> fun (V573) -> fun (V574) -> fun (V575) -> fun (V576) -> begin (V577 = (V574(V576))), ((V575(V577))(V576)) end end end end end end, fun (V578) -> fun (V579) -> fun (V580) -> begin (V581 = (V579(V580))), (V581(V580)) end end end end}, fun (V582) -> fun (V583) -> V583 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping VM defs to "/utf8>>, V556))))(V4))), {'Idris.Prelude.Types.Right', V584} end), case V585 of {'Idris.Prelude.Types.Left', E280} -> (fun (V586) -> {'Idris.Prelude.Types.Left', V586} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V587) -> (('un--dumpVMCode'(V556, V342))(V4)) end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E279)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V588 of {'Idris.Prelude.Types.Left', E282} -> (fun (V589) -> {'Idris.Prelude.Types.Left', V589} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V590) -> begin (V592 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V591) -> ('un--replaceEntry'(V0, V591)) end, V228, V4))), case V592 of {'Idris.Prelude.Types.Left', E284} -> (fun (V593) -> {'Idris.Prelude.Types.Left', V593} end(E284)); {'Idris.Prelude.Types.Right', E285} -> (fun (V594) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V282, V287, V327, V338, V342}} end(E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllDesc'(V0, V1, V2, V3) -> case V1 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Name.Resolved', E2} -> (fun (V7) -> fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V2, V7))(V8))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E3} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V39) -> begin (V40 = {'Idris.Core.Name.Resolved', V7}), case V39 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V71 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V40, case V3 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V41 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V71 of {'Idris.Prelude.Types.Left', E35} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V73) -> case V73 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end()); {'Idris.Prelude.Types.Just', E37} -> (fun (V74) -> case V74 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V75, V76) -> begin (V77 = ('un--getMinimalDef'(V76, V8))), case V77 of {'Idris.Prelude.Types.Left', E40} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V79) -> case V79 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V80, V81) -> begin (V86 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V82) -> case V82 of {'Idris.Prelude.Types.Left', E44} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V84) -> {'Idris.Prelude.Types.Right', 0} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V85) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V40, V80, V85)) end, V8))), case V86 of {'Idris.Prelude.Types.Left', E46} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V88) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V80 of {'Idris.Core.Context.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V96 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V109) -> fun (V110) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V109, V110)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V111) -> fun (V112) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V111, V112)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))) of 1 -> begin (V141 = begin (V140 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V115, V116, V117)) end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> V119 end end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V123(V125))), begin (V127 = (V124(V125))), (V126(V127)) end end end end end end end}, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), ((V131(V133))(V132)) end end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V135(V136))), (V137(V136)) end end end end}, fun (V138) -> fun (V139) -> V139 end end}, V2, V7, {'Idris.Builtin.MkPair', V7, V81}))(V8))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E48} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V143) -> begin (V144 = ('Idris.Idris2.Core.Context.Context':'un--refersToRuntime'(V80))), begin (V153 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V147, V148, V149)) end end end, fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V150, V151, V152)) end end end}, V145, V146)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V144)), [], V8))), case V153 of {'Idris.Prelude.Types.Left', E50} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V155) -> (('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V155, V6)), V2, V3))(V8)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E72} -> (fun (V156) -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--getAllDesc'(V0, V6, V2, V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exportedName'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E2} -> (fun (V3) -> case ('un--isExported'(case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V13 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Just', V1}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--exists'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--openFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0, 0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, ('Idris.Idris2.Erlang.System.File':'un--closeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V30)), fun () -> fun (V83) -> 1 end end))(V1)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V84) -> 0 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dylib_suffix'() -> ('Idris.Idris2.Core.Core':'un--cond'([{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V2, V3)) end end}, ('Idris.Idris2.System.Info':'un--os'()), [<<"windows"/utf8>> | [<<"mingw32"/utf8>> | [<<"cygwin32"/utf8>> | []]]])) end, fun () -> <<"dll"/utf8>> end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.System.Info':'un--os'()), <<"darwin"/utf8>>)) end, fun () -> <<"dylib"/utf8>> end} | []]], <<"so"/utf8>>)).
'un--dumpVMCode'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('nested--10179-1504--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpLifted'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('nested--10011-1346--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpCases'(V0, V1, V2) -> begin (V32 = begin (V31 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V30) -> ('nested--9925-1265--in--un--dumpCase'(V1, V0, V30)) end, V1))))))(V2))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E0} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Right', E2} -> (fun (V35) -> case V35 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V36}, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpANF'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('nested--10095-1425--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--copyLib'(V0, V1) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V5 = begin (V4 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V3, V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V10 = begin (V9 = (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V2, V8))(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', 0} end(E7)); {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V2, V14}, V1)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', 0} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--compileTerm'(V0, V1, V2) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V6, V7, V8)) end end end}, V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Compiler.CompileExpr':'un--compileExp'(V0, V11, V2))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, V14))(V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgExecuteExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V6))), begin (V8 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V7, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V1 of {'Idris.Compiler.Common.MkCG', E4, E5, E6, E7, E8} -> (fun (V11, V12, V13, V14, V15) -> ((((V12(V0))(V7))(V2))(V3)) end(E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileLibrary'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8, E9, E10} -> (fun (V16, V17, V18, V19, V20) -> (((((V18(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileExpr'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"+ Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8, E9, E10} -> (fun (V16, V17, V18, V19, V20) -> (((((V16(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--castInt'(V0, V1, V2, V3) -> ('case--castInt-4421'(V3, V2, V1, V0, {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Core.TT':'un--intKind'(V1))}, {'Idris.Builtin.MkPair', V2, ('Idris.Idris2.Core.TT':'un--intKind'(V2))}})).
