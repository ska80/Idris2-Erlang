-module('Idris.Idris2.Core.CompileExpr').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--find-2788'/5,
  'nested--5023-1073--in--un--showFlag'/6,
  'nested--4713-857--in--un--showFlag'/6,
  'dn--un--weaken_Weaken_CExp'/1,
  'dn--un--weaken_Weaken_CConAlt'/1,
  'dn--un--weakenNs_Weaken_CExp'/2,
  'dn--un--weakenNs_Weaken_CConAlt'/2,
  'dn--un--show_Show_NamedDef'/1,
  'dn--un--show_Show_NamedConstAlt'/1,
  'dn--un--show_Show_NamedConAlt'/1,
  'dn--un--show_Show_NamedCExp'/1,
  'dn--un--show_Show_ConInfo'/1,
  'dn--un--show_Show_CFType'/1,
  'dn--un--show_Show_CDef'/1,
  'dn--un--show_Show_(CExp $vars)'/2,
  'dn--un--showPrec_Show_NamedDef'/2,
  'dn--un--showPrec_Show_NamedConstAlt'/2,
  'dn--un--showPrec_Show_NamedConAlt'/2,
  'dn--un--showPrec_Show_NamedCExp'/2,
  'dn--un--showPrec_Show_ConInfo'/2,
  'dn--un--showPrec_Show_CFType'/2,
  'dn--un--showPrec_Show_CDef'/2,
  'dn--un--showPrec_Show_(CExp $vars)'/3,
  'dn--un--__Impl_Weaken_CExp'/0,
  'dn--un--__Impl_Weaken_CConAlt'/0,
  'dn--un--__Impl_Show_NamedDef'/0,
  'dn--un--__Impl_Show_NamedConstAlt'/0,
  'dn--un--__Impl_Show_NamedConAlt'/0,
  'dn--un--__Impl_Show_NamedCExp'/0,
  'dn--un--__Impl_Show_ConInfo'/0,
  'dn--un--__Impl_Show_CFType'/0,
  'dn--un--__Impl_Show_CDef'/0,
  'dn--un--__Impl_Show_(CExp $vars)'/1,
  'dn--un--__Impl_Eq_ConInfo'/0,
  'dn--un--==_Eq_ConInfo'/2,
  'dn--un--/=_Eq_ConInfo'/2,
  'un--uniqueName'/2,
  'un--tryNext'/1,
  'un--substs'/4,
  'un--substEnv'/3,
  'un--substConstAlt'/3,
  'un--substConAlt'/3,
  'un--shrinkConstAlt'/2,
  'un--shrinkConAlt'/2,
  'un--shrinkCExp'/2,
  'un--resolveRef'/5,
  'un--refsToLocals'/2,
  'un--mkLocalsConstAlt'/3,
  'un--mkLocalsConAlt'/3,
  'un--mkLocals'/3,
  'un--insertNamesConstAlt'/3,
  'un--insertNamesConAlt'/3,
  'un--insertNames'/3,
  'un--getLocName'/2,
  'un--getFC'/1,
  'un--forgetExp'/2,
  'un--forgetDef'/1,
  'un--forgetConstAlt'/2,
  'un--forgetConAlt'/2,
  'un--forget'/2,
  'un--findDrop'/3,
  'un--find'/4,
  'un--embed'/1,
  'un--elem'/2,
  'un--conArgs'/2,
  'un--addLocs'/2
]).
'case--find-2788'(V0, V1, V2, V3, V4) -> case V2 of 0 -> case V4 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> ('un--findDrop'(V3, V1, V0)) end()); _ -> case V4 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V5) -> case V1 of 0 -> {'Idris.Core.CompileExpr.CLocal', 0, V3}; _ -> begin (V6 = (V1 - 1)), ('dn--un--weaken_Weaken_CExp'(('un--find'(V3, V5, V6, V0)))) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V4 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V7) -> case V1 of 0 -> {'Idris.Core.CompileExpr.CLocal', 0, V3}; _ -> begin (V8 = (V1 - 1)), ('dn--un--weaken_Weaken_CExp'(('un--find'(V3, V7, V8, V0)))) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--5023-1073--in--un--showFlag'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ConInfo'(V5)), <<" "/utf8>>)) end.
'nested--4713-857--in--un--showFlag'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ConInfo'(V5)), <<" "/utf8>>)) end.
'dn--un--weaken_Weaken_CExp'(V0) -> ('dn--un--weakenNs_Weaken_CExp'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weaken_Weaken_CConAlt'(V0) -> ('dn--un--weakenNs_Weaken_CConAlt'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()))), V0)).
'dn--un--weakenNs_Weaken_CExp'(V0, V1) -> ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--weakenNs_Weaken_CConAlt'(V0, V1) -> ('un--insertNamesConAlt'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)).
'dn--un--show_Show_NamedDef'(V0) -> case V0 of {'Idris.Core.CompileExpr.MkNmFun', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V4, V5)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('dn--un--show_Show_NamedCExp'(V2)))))) end(E0, E1)); {'Idris.Core.CompileExpr.MkNmCon', E2, E3, E4} -> (fun (V6, V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V12)), <<")"/utf8>>)))) end end, V8)))))))))) end(E2, E3, E4)); {'Idris.Core.CompileExpr.MkNmForeign', E5, E6, E7} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Foreign call "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V17, V18)) end end}, V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V19) -> ('dn--un--show_Show_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--showPrec_Show_CFType'(V20, V21)) end end}, V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('dn--un--show_Show_CFType'(V15)))))))))))) end(E5, E6, E7)); {'Idris.Core.CompileExpr.MkNmError', E8} -> (fun (V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('dn--un--show_Show_NamedCExp'(V22)))) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_NamedConstAlt'(V0) -> case V0 of {'Idris.Core.CompileExpr.MkNConstAlt', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%constcase "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V2)), <<")"/utf8>>)))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_NamedConAlt'(V0) -> case V0 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%concase "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--5023-1073--in--un--showFlag'(V5, V4, V3, V2, V1, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V7, V8)) end end}, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V10, V11)) end end}, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V5)), <<")"/utf8>>)))))))))))))))))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_NamedCExp'(V0) -> case V0 of {'Idris.Core.CompileExpr.NmLocal', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"!"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))) end(E0, E1)); {'Idris.Core.CompileExpr.NmRef', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E2, E3)); {'Idris.Core.CompileExpr.NmLam', E4, E5, E6} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%lam "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V7)), <<")"/utf8>>)))))))) end(E4, E5, E6)); {'Idris.Core.CompileExpr.NmLet', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V11)), <<")"/utf8>>)))))))))))) end(E7, E8, E9, E10)); {'Idris.Core.CompileExpr.NmApp', E11, E12, E13} -> (fun (V12, V13, V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V15) -> ('dn--un--show_Show_NamedCExp'(V15)) end, fun (V16) -> fun (V17) -> ('dn--un--showPrec_Show_NamedCExp'(V16, V17)) end end}, V14)), <<")"/utf8>>)))))))) end(E11, E12, E13)); {'Idris.Core.CompileExpr.NmCon', E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%con "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--4713-857--in--un--showFlag'(V18, V22, V21, V20, V19, V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V24, V25)) end end}, V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V26) -> ('dn--un--show_Show_NamedCExp'(V26)) end, fun (V27) -> fun (V28) -> ('dn--un--showPrec_Show_NamedCExp'(V27, V28)) end end}, V22)), <<")"/utf8>>)))))))))))))) end(E14, E15, E16, E17, E18)); {'Idris.Core.CompileExpr.NmOp', E19, E20, E21, E22} -> (fun (V29, V30, V31, V32) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Data.Vect':'dn--un--show_Show_((Vect $len) $elem)'({'Idris.Prelude.Show.MkShow', fun (V33) -> ('dn--un--show_Show_NamedCExp'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show_NamedCExp'(V34, V35)) end end}, V32)), <<")"/utf8>>)))))))) end(E19, E20, E21, E22)); {'Idris.Core.CompileExpr.NmExtPrim', E23, E24, E25} -> (fun (V36, V37, V38) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%extern "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V39) -> ('dn--un--show_Show_NamedCExp'(V39)) end, fun (V40) -> fun (V41) -> ('dn--un--showPrec_Show_NamedCExp'(V40, V41)) end end}, V38)), <<")"/utf8>>)))))))) end(E23, E24, E25)); {'Idris.Core.CompileExpr.NmForce', E26, E27, E28} -> (fun (V42, V43, V44) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%force "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V43)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V44)), <<")"/utf8>>)))))))) end(E26, E27, E28)); {'Idris.Core.CompileExpr.NmDelay', E29, E30, E31} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%delay "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V47)), <<")"/utf8>>)))))))) end(E29, E30, E31)); {'Idris.Core.CompileExpr.NmConCase', E32, E33, E34, E35} -> (fun (V48, V49, V50, V51) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V49)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V52) -> ('dn--un--show_Show_NamedConAlt'(V52)) end, fun (V53) -> fun (V54) -> ('dn--un--showPrec_Show_NamedConAlt'(V53, V54)) end end}, V50)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V55) -> ('dn--un--show_Show_NamedCExp'(V55)) end, fun (V56) -> fun (V57) -> ('dn--un--showPrec_Show_NamedCExp'(V56, V57)) end end}, V51)), <<")"/utf8>>)))))))))))) end(E32, E33, E34, E35)); {'Idris.Core.CompileExpr.NmConstCase', E36, E37, E38, E39} -> (fun (V58, V59, V60, V61) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_NamedCExp'(V59)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V62) -> ('dn--un--show_Show_NamedConstAlt'(V62)) end, fun (V63) -> fun (V64) -> ('dn--un--showPrec_Show_NamedConstAlt'(V63, V64)) end end}, V60)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V65) -> ('dn--un--show_Show_NamedCExp'(V65)) end, fun (V66) -> fun (V67) -> ('dn--un--showPrec_Show_NamedCExp'(V66, V67)) end end}, V61)), <<")"/utf8>>)))))))))))) end(E36, E37, E38, E39)); {'Idris.Core.CompileExpr.NmPrimVal', E40, E41} -> (fun (V68, V69) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V69)) end(E40, E41)); {'Idris.Core.CompileExpr.NmErased', E42} -> (fun (V70) -> <<"___"/utf8>> end(E42)); {'Idris.Core.CompileExpr.NmCrash', E43, E44} -> (fun (V71, V72) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(CRASH "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V72)), <<")"/utf8>>)))) end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ConInfo'(V0) -> case V0 of 0 -> <<"[datacon]"/utf8>>; 1 -> <<"[tycon]"/utf8>>; 2 -> <<"[nil]"/utf8>>; 3 -> <<"[cons]"/utf8>>; 4 -> <<"[enum]"/utf8>>; 5 -> <<"[nothing]"/utf8>>; 6 -> <<"[just]"/utf8>>; 7 -> <<"[record]"/utf8>>; 8 -> <<"[zero]"/utf8>>; 9 -> <<"[succ]"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_CFType'(V0) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"Unit"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> <<"Int"/utf8>> end()); {'Idris.Core.CompileExpr.CFInteger'} -> (fun () -> <<"Integer"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt8'} -> (fun () -> <<"Int_8"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt16'} -> (fun () -> <<"Int_16"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt32'} -> (fun () -> <<"Int_32"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt64'} -> (fun () -> <<"Int_64"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> <<"Bits_8"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> <<"Bits_16"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> <<"Bits_32"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> <<"Bits_64"/utf8>> end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> <<"String"/utf8>> end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> <<"Double"/utf8>> end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> <<"Char"/utf8>> end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> <<"Ptr"/utf8>> end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> <<"GCPtr"/utf8>> end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> <<"Buffer"/utf8>> end()); {'Idris.Core.CompileExpr.CFForeignObj'} -> (fun () -> <<"ForeignObj"/utf8>> end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> <<"%World"/utf8>> end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_CFType'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('dn--un--show_Show_CFType'(V2)))))) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"IORes "/utf8>>, ('dn--un--show_Show_CFType'(V3)))) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"struct "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V8, V9)) end end}, {'Idris.Prelude.Show.MkShow', fun (V10) -> ('dn--un--show_Show_CFType'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--showPrec_Show_CFType'(V11, V12)) end end}}, V6)) end, V5)))))))))) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V13, V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('dn--un--show_Show_CFType'(V15)) end, V14)))))))) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_CDef'(V0) -> case V0 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V4, V5)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('dn--un--show_Show_(CExp $vars)'(V1, V2)))))) end(E0, E1)); {'Idris.Core.CompileExpr.MkCon', E2, E3, E4} -> (fun (V6, V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V12)), <<")"/utf8>>)))) end end, V8)))))))))) end(E2, E3, E4)); {'Idris.Core.CompileExpr.MkForeign', E5, E6, E7} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Foreign call "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V17, V18)) end end}, V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V19) -> ('dn--un--show_Show_CFType'(V19)) end, fun (V20) -> fun (V21) -> ('dn--un--showPrec_Show_CFType'(V20, V21)) end end}, V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('dn--un--show_Show_CFType'(V15)))))))))))) end(E5, E6, E7)); {'Idris.Core.CompileExpr.MkError', E8} -> (fun (V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('dn--un--show_Show_(CExp $vars)'([], V22)))) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(CExp $vars)'(V0, V1) -> ('dn--un--show_Show_NamedCExp'(('un--forget'(V0, V1)))).
'dn--un--showPrec_Show_NamedDef'(V0, V1) -> ('dn--un--show_Show_NamedDef'(V1)).
'dn--un--showPrec_Show_NamedConstAlt'(V0, V1) -> ('dn--un--show_Show_NamedConstAlt'(V1)).
'dn--un--showPrec_Show_NamedConAlt'(V0, V1) -> ('dn--un--show_Show_NamedConAlt'(V1)).
'dn--un--showPrec_Show_NamedCExp'(V0, V1) -> ('dn--un--show_Show_NamedCExp'(V1)).
'dn--un--showPrec_Show_ConInfo'(V0, V1) -> ('dn--un--show_Show_ConInfo'(V1)).
'dn--un--showPrec_Show_CFType'(V0, V1) -> ('dn--un--show_Show_CFType'(V1)).
'dn--un--showPrec_Show_CDef'(V0, V1) -> ('dn--un--show_Show_CDef'(V1)).
'dn--un--showPrec_Show_(CExp $vars)'(V0, V1, V2) -> ('dn--un--show_Show_(CExp $vars)'(V0, V2)).
'dn--un--__Impl_Weaken_CExp'() -> {'Idris.Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_CExp'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_CExp'(V5, V6)) end end end end}.
'dn--un--__Impl_Weaken_CConAlt'() -> {'Idris.Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_CConAlt'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_CConAlt'(V5, V6)) end end end end}.
'dn--un--__Impl_Show_NamedDef'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_NamedConstAlt'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedConstAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedConstAlt'(V1, V2)) end end}.
'dn--un--__Impl_Show_NamedConAlt'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedConAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedConAlt'(V1, V2)) end end}.
'dn--un--__Impl_Show_NamedCExp'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_NamedCExp'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_NamedCExp'(V1, V2)) end end}.
'dn--un--__Impl_Show_ConInfo'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ConInfo'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ConInfo'(V1, V2)) end end}.
'dn--un--__Impl_Show_CFType'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_CFType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_CFType'(V1, V2)) end end}.
'dn--un--__Impl_Show_CDef'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_CDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_CDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_(CExp $vars)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(CExp $vars)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(CExp $vars)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Eq_ConInfo'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_ConInfo'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_ConInfo'(V2, V3)) end end}.
'dn--un--==_Eq_ConInfo'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; 3 -> case V1 of 3 -> 1; _ -> 0 end; 4 -> case V1 of 4 -> 1; _ -> 0 end; 5 -> case V1 of 5 -> 1; _ -> 0 end; 6 -> case V1 of 6 -> 1; _ -> 0 end; 7 -> case V1 of 7 -> 1; _ -> 0 end; 8 -> case V1 of 8 -> 1; _ -> 0 end; 9 -> case V1 of 9 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_ConInfo'(V0, V1) -> case ('dn--un--==_Eq_ConInfo'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--uniqueName'(V0, V1) -> case ('un--elem'(V0, V1)) of 1 -> ('un--uniqueName'(('un--tryNext'(V0)), V1)); 0 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryNext'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V1)), 0} end(E0)); {'Idris.Core.Name.MN', E1, E2} -> (fun (V2, V3) -> {'Idris.Core.Name.MN', V2, ((1 + V3) rem 9223372036854775808)} end(E1, E2)); _ -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'un--nameRoot'(V0)), 0} end.
'un--substs'(V0, V1, V2, V3) -> ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V2, V3)).
'un--substEnv'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V3, V4) -> ('un--find'(V4, V0, V3, V1)) end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V5, V6) -> {'Idris.Core.CompileExpr.CRef', V5, V6} end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V7, V8, V9) -> begin (V10 = ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V9))), {'Idris.Core.CompileExpr.CLam', V7, V8, V10} end end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V11, V12, V13, V14, V15) -> begin (V16 = ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V15))), {'Idris.Core.CompileExpr.CLet', V11, V12, V13, ('un--substEnv'(V0, V1, V14)), V16} end end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V17, V18, V19) -> {'Idris.Core.CompileExpr.CApp', V17, ('un--substEnv'(V0, V1, V18)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('un--substEnv'(V0, V1, V20)) end, V19))} end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V21, V22, V23, V24, V25) -> {'Idris.Core.CompileExpr.CCon', V21, V22, V23, V24, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('un--substEnv'(V0, V1, V26)) end, V25))} end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.CompileExpr.COp', V27, V28, V29, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V31) -> ('un--substEnv'(V0, V1, V31)) end, V30))} end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V32, V33, V34) -> {'Idris.Core.CompileExpr.CExtPrim', V32, V33, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V35) -> ('un--substEnv'(V0, V1, V35)) end, V34))} end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V36, V37, V38) -> {'Idris.Core.CompileExpr.CForce', V36, V37, ('un--substEnv'(V0, V1, V38))} end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V39, V40, V41) -> {'Idris.Core.CompileExpr.CDelay', V39, V40, ('un--substEnv'(V0, V1, V41))} end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V42, V43, V44, V45) -> {'Idris.Core.CompileExpr.CConCase', V42, ('un--substEnv'(V0, V1, V43)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('un--substConAlt'(V0, V1, V46)) end, V44)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V47) -> ('un--substEnv'(V0, V1, V47)) end, V45))} end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V48, V49, V50, V51) -> {'Idris.Core.CompileExpr.CConstCase', V48, ('un--substEnv'(V0, V1, V49)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V52) -> ('un--substConstAlt'(V0, V1, V52)) end, V50)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V53) -> ('un--substEnv'(V0, V1, V53)) end, V51))} end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V54, V55) -> {'Idris.Core.CompileExpr.CPrimVal', V54, V55} end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V56) -> {'Idris.Core.CompileExpr.CErased', V56} end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V57, V58) -> {'Idris.Core.CompileExpr.CCrash', V57, V58} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substConstAlt'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.CompileExpr.MkConstAlt', V3, ('un--substEnv'(V0, V1, V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substConAlt'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> {'Idris.Core.CompileExpr.MkConAlt', V3, V4, V5, V6, ('un--substEnv'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), V0)), V1, V7))} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shrinkConstAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CompileExpr.MkConstAlt', V2, ('un--shrinkCExp'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shrinkConAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Core.CompileExpr.MkConAlt', V2, V3, V4, V5, ('un--shrinkCExp'(('Idris.Idris2.Core.TT':'un--subExtend'(V5, V0)), V6))} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shrinkCExp'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Core.TT':'un--subElem'(V2, V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.CompileExpr.CErased', V3} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V4) -> {'Idris.Core.CompileExpr.CLocal', V4, V3} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E3, E4} -> (fun (V5, V6) -> {'Idris.Core.CompileExpr.CRef', V5, V6} end(E3, E4)); {'Idris.Core.CompileExpr.CLam', E5, E6, E7} -> (fun (V7, V8, V9) -> begin (V10 = ('un--shrinkCExp'({'Idris.Core.TT.KeepCons', V0}, V9))), {'Idris.Core.CompileExpr.CLam', V7, V8, V10} end end(E5, E6, E7)); {'Idris.Core.CompileExpr.CLet', E8, E9, E10, E11, E12} -> (fun (V11, V12, V13, V14, V15) -> begin (V16 = ('un--shrinkCExp'({'Idris.Core.TT.KeepCons', V0}, V15))), {'Idris.Core.CompileExpr.CLet', V11, V12, V13, ('un--shrinkCExp'(V0, V14)), V16} end end(E8, E9, E10, E11, E12)); {'Idris.Core.CompileExpr.CApp', E13, E14, E15} -> (fun (V17, V18, V19) -> {'Idris.Core.CompileExpr.CApp', V17, ('un--shrinkCExp'(V0, V18)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('un--shrinkCExp'(V0, V20)) end, V19))} end(E13, E14, E15)); {'Idris.Core.CompileExpr.CCon', E16, E17, E18, E19, E20} -> (fun (V21, V22, V23, V24, V25) -> {'Idris.Core.CompileExpr.CCon', V21, V22, V23, V24, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('un--shrinkCExp'(V0, V26)) end, V25))} end(E16, E17, E18, E19, E20)); {'Idris.Core.CompileExpr.COp', E21, E22, E23, E24} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.CompileExpr.COp', V27, V28, V29, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V31) -> ('un--shrinkCExp'(V0, V31)) end, V30))} end(E21, E22, E23, E24)); {'Idris.Core.CompileExpr.CExtPrim', E25, E26, E27} -> (fun (V32, V33, V34) -> {'Idris.Core.CompileExpr.CExtPrim', V32, V33, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V35) -> ('un--shrinkCExp'(V0, V35)) end, V34))} end(E25, E26, E27)); {'Idris.Core.CompileExpr.CForce', E28, E29, E30} -> (fun (V36, V37, V38) -> {'Idris.Core.CompileExpr.CForce', V36, V37, ('un--shrinkCExp'(V0, V38))} end(E28, E29, E30)); {'Idris.Core.CompileExpr.CDelay', E31, E32, E33} -> (fun (V39, V40, V41) -> {'Idris.Core.CompileExpr.CDelay', V39, V40, ('un--shrinkCExp'(V0, V41))} end(E31, E32, E33)); {'Idris.Core.CompileExpr.CConCase', E34, E35, E36, E37} -> (fun (V42, V43, V44, V45) -> {'Idris.Core.CompileExpr.CConCase', V42, ('un--shrinkCExp'(V0, V43)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('un--shrinkConAlt'(V0, V46)) end, V44)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V47) -> ('un--shrinkCExp'(V0, V47)) end, V45))} end(E34, E35, E36, E37)); {'Idris.Core.CompileExpr.CConstCase', E38, E39, E40, E41} -> (fun (V48, V49, V50, V51) -> {'Idris.Core.CompileExpr.CConstCase', V48, ('un--shrinkCExp'(V0, V49)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V52) -> ('un--shrinkConstAlt'(V0, V52)) end, V50)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V53) -> ('un--shrinkCExp'(V0, V53)) end, V51))} end(E38, E39, E40, E41)); {'Idris.Core.CompileExpr.CPrimVal', E42, E43} -> (fun (V54, V55) -> {'Idris.Core.CompileExpr.CPrimVal', V54, V55} end(E42, E43)); {'Idris.Core.CompileExpr.CErased', E44} -> (fun (V56) -> {'Idris.Core.CompileExpr.CErased', V56} end(E44)); {'Idris.Core.CompileExpr.CCrash', E45, E46} -> (fun (V57, V58) -> {'Idris.Core.CompileExpr.CCrash', V57, V58} end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolveRef'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.TT.Bounds.None'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.TT.Bounds.Add', E0, E1, E2} -> (fun (V5, V6, V7) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V6)) of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Core.CompileExpr.CLocal', ('Idris.Idris2.Core.TT':'un--weakenNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(V0, V1)), 0)), V3}}; 0 -> ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V1)), V7, V3, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--refsToLocals'(V0, V1) -> case V0 of {'Idris.Core.TT.Bounds.None'} -> (fun () -> V1 end()); _ -> ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V0, V1)) end.
'un--mkLocalsConstAlt'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.CompileExpr.MkConstAlt', V3, ('un--mkLocals'(V0, V1, V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkLocalsConAlt'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = V7), {'Idris.Core.CompileExpr.MkConAlt', V3, V4, V5, V6, ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), V0)), V1, V8))} end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkLocals'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.CompileExpr.CLocal', ('Idris.Idris2.Core.TT':'un--addVars'(V0, V1, V3)), V4} end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.CompileExpr.CRef', V5, V6} end, fun () -> fun (V7) -> V7 end end, ('un--resolveRef'(V0, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V1, V5, V6)))) end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V8, V9, V10) -> begin (V11 = ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V10))), {'Idris.Core.CompileExpr.CLam', V8, V9, V11} end end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V12, V13, V14, V15, V16) -> begin (V17 = ('un--mkLocals'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V16))), {'Idris.Core.CompileExpr.CLet', V12, V13, V14, ('un--mkLocals'(V0, V1, V15)), V17} end end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V18, V19, V20) -> {'Idris.Core.CompileExpr.CApp', V18, ('un--mkLocals'(V0, V1, V19)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('un--mkLocals'(V0, V1, V21)) end, V20))} end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26) -> {'Idris.Core.CompileExpr.CCon', V22, V23, V24, V25, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('un--mkLocals'(V0, V1, V27)) end, V26))} end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V28, V29, V30, V31) -> {'Idris.Core.CompileExpr.COp', V28, V29, V30, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V32) -> ('un--mkLocals'(V0, V1, V32)) end, V31))} end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V33, V34, V35) -> {'Idris.Core.CompileExpr.CExtPrim', V33, V34, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V36) -> ('un--mkLocals'(V0, V1, V36)) end, V35))} end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V37, V38, V39) -> {'Idris.Core.CompileExpr.CForce', V37, V38, ('un--mkLocals'(V0, V1, V39))} end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V40, V41, V42) -> {'Idris.Core.CompileExpr.CDelay', V40, V41, ('un--mkLocals'(V0, V1, V42))} end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V43, V44, V45, V46) -> {'Idris.Core.CompileExpr.CConCase', V43, ('un--mkLocals'(V0, V1, V44)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('un--mkLocalsConAlt'(V0, V1, V47)) end, V45)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V48) -> ('un--mkLocals'(V0, V1, V48)) end, V46))} end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V49, V50, V51, V52) -> {'Idris.Core.CompileExpr.CConstCase', V49, ('un--mkLocals'(V0, V1, V50)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V53) -> ('un--mkLocalsConstAlt'(V0, V1, V53)) end, V51)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V54) -> ('un--mkLocals'(V0, V1, V54)) end, V52))} end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V55, V56) -> {'Idris.Core.CompileExpr.CPrimVal', V55, V56} end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V57) -> {'Idris.Core.CompileExpr.CErased', V57} end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V58, V59) -> {'Idris.Core.CompileExpr.CCrash', V58, V59} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertNamesConstAlt'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.CompileExpr.MkConstAlt', V3, ('un--insertNames'(V0, V1, V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertNamesConAlt'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = V7), {'Idris.Core.CompileExpr.MkConAlt', V3, V4, V5, V6, ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--+'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V6)), V0)), V1, V8))} end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertNames'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.CompileExpr.CLocal', ('Idris.Idris2.Core.TT':'un--insertNVarNames'(V0, V1, V3)), V4} end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V5, V6) -> {'Idris.Core.CompileExpr.CRef', V5, V6} end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V7, V8, V9) -> begin (V10 = ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V9))), {'Idris.Core.CompileExpr.CLam', V7, V8, V10} end end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V11, V12, V13, V14, V15) -> begin (V16 = ('un--insertNames'(('Idris.Idris2.Core.TT.SizeOf':'un--suc'(V0)), V1, V15))), {'Idris.Core.CompileExpr.CLet', V11, V12, V13, ('un--insertNames'(V0, V1, V14)), V16} end end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V17, V18, V19) -> {'Idris.Core.CompileExpr.CApp', V17, ('un--insertNames'(V0, V1, V18)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('un--insertNames'(V0, V1, V20)) end, V19))} end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V21, V22, V23, V24, V25) -> {'Idris.Core.CompileExpr.CCon', V21, V22, V23, V24, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('un--insertNames'(V0, V1, V26)) end, V25))} end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.CompileExpr.COp', V27, V28, V29, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V31) -> ('un--insertNames'(V0, V1, V31)) end, V30))} end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V32, V33, V34) -> {'Idris.Core.CompileExpr.CExtPrim', V32, V33, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V35) -> ('un--insertNames'(V0, V1, V35)) end, V34))} end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V36, V37, V38) -> {'Idris.Core.CompileExpr.CForce', V36, V37, ('un--insertNames'(V0, V1, V38))} end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V39, V40, V41) -> {'Idris.Core.CompileExpr.CDelay', V39, V40, ('un--insertNames'(V0, V1, V41))} end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V42, V43, V44, V45) -> {'Idris.Core.CompileExpr.CConCase', V42, ('un--insertNames'(V0, V1, V43)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('un--insertNamesConAlt'(V0, V1, V46)) end, V44)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V47) -> ('un--insertNames'(V0, V1, V47)) end, V45))} end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V48, V49, V50, V51) -> {'Idris.Core.CompileExpr.CConstCase', V48, ('un--insertNames'(V0, V1, V49)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V52) -> ('un--insertNamesConstAlt'(V0, V1, V52)) end, V50)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V53) -> ('un--insertNames'(V0, V1, V53)) end, V51))} end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V54, V55) -> {'Idris.Core.CompileExpr.CPrimVal', V54, V55} end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V56) -> {'Idris.Core.CompileExpr.CErased', V56} end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V57, V58) -> {'Idris.Core.CompileExpr.CCrash', V57, V58} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getLocName'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.CompileExpr.::', E2, E3} -> (fun (V2, V3) -> V2 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Idris.Core.CompileExpr.::', E0, E1} -> (fun (V5, V6) -> ('un--getLocName'(V4, V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--getFC'(V0) -> case V0 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V3, V4) -> V3 end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V5, V6, V7) -> V5 end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V8, V9, V10, V11, V12) -> V8 end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V13, V14, V15) -> V13 end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V16, V17, V18, V19, V20) -> V16 end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V21, V22, V23, V24) -> V22 end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V25, V26, V27) -> V25 end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V28, V29, V30) -> V28 end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V31, V32, V33) -> V31 end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V34, V35, V36, V37) -> V34 end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V38, V39, V40, V41) -> V38 end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V42, V43) -> V42 end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V44) -> V44 end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V45, V46) -> V45 end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--forgetExp'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CompileExpr.NmLocal', V3, ('un--getLocName'(V2, V0))} end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V4, V5) -> {'Idris.Core.CompileExpr.NmRef', V4, V5} end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V6, V7, V8) -> begin (V9 = ('un--addLocs'([V7 | []], V0))), {'Idris.Core.CompileExpr.NmLam', V6, ('un--getLocName'(0, V9)), ('un--forgetExp'(V9, V8))} end end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14) -> begin (V15 = ('un--addLocs'([V11 | []], V0))), {'Idris.Core.CompileExpr.NmLet', V10, ('un--getLocName'(0, V15)), ('un--forgetExp'(V0, V13)), ('un--forgetExp'(V15, V14))} end end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V16, V17, V18) -> {'Idris.Core.CompileExpr.NmApp', V16, ('un--forgetExp'(V0, V17)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('un--forgetExp'(V0, V19)) end, V18))} end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V20, V21, V22, V23, V24) -> {'Idris.Core.CompileExpr.NmCon', V20, V21, V22, V23, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V25) -> ('un--forgetExp'(V0, V25)) end, V24))} end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V26, V27, V28, V29) -> {'Idris.Core.CompileExpr.NmOp', V26, V27, V28, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V30) -> ('un--forgetExp'(V0, V30)) end, V29))} end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V31, V32, V33) -> {'Idris.Core.CompileExpr.NmExtPrim', V31, V32, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V34) -> ('un--forgetExp'(V0, V34)) end, V33))} end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V35, V36, V37) -> {'Idris.Core.CompileExpr.NmForce', V35, V36, ('un--forgetExp'(V0, V37))} end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V38, V39, V40) -> {'Idris.Core.CompileExpr.NmDelay', V38, V39, ('un--forgetExp'(V0, V40))} end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V41, V42, V43, V44) -> {'Idris.Core.CompileExpr.NmConCase', V41, ('un--forgetExp'(V0, V42)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('un--forgetConAlt'(V0, V45)) end, V43)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V46) -> ('un--forgetExp'(V0, V46)) end, V44))} end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V47, V48, V49, V50) -> {'Idris.Core.CompileExpr.NmConstCase', V47, ('un--forgetExp'(V0, V48)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V51) -> ('un--forgetConstAlt'(V0, V51)) end, V49)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V52) -> ('un--forgetExp'(V0, V52)) end, V50))} end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V53, V54) -> {'Idris.Core.CompileExpr.NmPrimVal', V53, V54} end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V55) -> {'Idris.Core.CompileExpr.NmErased', V55} end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V56, V57) -> {'Idris.Core.CompileExpr.NmCrash', V56, V57} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--forgetDef'(V0) -> case V0 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V1, V2) -> begin (V3 = ('un--addLocs'(V1, {'Idris.Core.CompileExpr.Nil'}))), begin (V4 = ('un--conArgs'(V1, V3))), {'Idris.Core.CompileExpr.MkNmFun', V4, ('un--forget'(V1, V2))} end end end(E0, E1)); {'Idris.Core.CompileExpr.MkCon', E2, E3, E4} -> (fun (V5, V6, V7) -> {'Idris.Core.CompileExpr.MkNmCon', V5, V6, V7} end(E2, E3, E4)); {'Idris.Core.CompileExpr.MkForeign', E5, E6, E7} -> (fun (V8, V9, V10) -> {'Idris.Core.CompileExpr.MkNmForeign', V8, V9, V10} end(E5, E6, E7)); {'Idris.Core.CompileExpr.MkError', E8} -> (fun (V11) -> {'Idris.Core.CompileExpr.MkNmError', ('un--forget'([], V11))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--forgetConstAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.CompileExpr.MkNConstAlt', V2, ('un--forgetExp'(V0, V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--forgetConAlt'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> begin (V7 = ('un--addLocs'(V5, V0))), {'Idris.Core.CompileExpr.MkNConAlt', V2, V3, V4, ('un--conArgs'(V5, V7)), ('un--forgetExp'(V7, V6))} end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--forget'(V0, V1) -> ('un--forgetExp'(('un--addLocs'(V0, {'Idris.Core.CompileExpr.Nil'})), V1)).
'un--findDrop'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.SubstCEnv.Nil'} -> (fun () -> {'Idris.Core.CompileExpr.CLocal', V1, V0} end()); _ -> case V1 of 0 -> case V2 of {'Idris.Core.CompileExpr.SubstCEnv.::', E2, E3} -> (fun (V3, V4) -> V3 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V5 = (V1 - 1)), case V2 of {'Idris.Core.CompileExpr.SubstCEnv.::', E0, E1} -> (fun (V6, V7) -> ('un--findDrop'(V0, V5, V7)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--find'(V0, V1, V2, V3) -> ('case--find-2788'(V3, V2, V1, V0, ('Idris.Idris2.Core.TT':'un--sizedView'(V1)))).
'un--embed'(V0) -> ('Idris.Idris2.Builtin':'un--believe_me'(V0)).
'un--elem'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.Nil'} -> (fun () -> 0 end()); {'Idris.Core.CompileExpr.::', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V2)) of 1 -> 1; 0 -> ('un--elem'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--conArgs'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Idris.Core.CompileExpr.::', E2, E3} -> (fun (V4, V5) -> [V4 | ('un--conArgs'(V3, V5))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addLocs'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = ('un--addLocs'(V3, V1))), {'Idris.Core.CompileExpr.::', ('un--uniqueName'(V2, V4)), V4} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
