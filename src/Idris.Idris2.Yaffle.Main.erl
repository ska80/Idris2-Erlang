-module('Idris.Idris2.Yaffle.Main').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--resolved_HasNames_(|Unit,MkUnit|)'/3,
  'dn--un--full_HasNames_(|Unit,MkUnit|)'/3,
  'un--yaffleMain'/3,
  'un--usage'/0,
  'un--processArgs'/1
]).
'dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', 0}.
'dn--un--full_HasNames_(|Unit,MkUnit|)'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', 0}.
'un--yaffleMain'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--initDefs'(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Context.Ctxt'}, V5, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = (('un--processArgs'(V1))(V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V8, V0, V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalIdrSrc', V14})), V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V2))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--setLogTimings'(V8, V11, V2))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V8, V2))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> begin (V287 = case ('Idris.Idris2.Libraries.Utils.Path':'un--extension'(V0)) of {'Idris.Prelude.Types.Just', E30} -> (fun (V27) -> case V27 of <<"ttc"/utf8>> -> begin (V60 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V28) -> case V28 of {'Idris.Prelude.Types.Left', E45} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V30) -> {'Idris.Prelude.Types.Right', 0} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V31) -> begin (V59 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, <<"Processing as TTC"/utf8>>))(V31))), {'Idris.Prelude.Types.Right', V59} end end, V2))), case V60 of {'Idris.Prelude.Types.Left', E47} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V62) -> begin (V72 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V63) -> case V63 of {'Idris.Prelude.Types.Left', E49} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V65) -> {'Idris.Prelude.Types.Right', 0} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('Idris.Idris2.Core.Binary':'un--readFromTTC'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V67, V68, V69)) end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V70, V71)) end end}, V8, V20, 1, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, {'Idris.Core.Directory.LocalFile', V0}, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()))), ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V66)) end, V2))), case V72 of {'Idris.Prelude.Types.Left', E51} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V74) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V75) -> case V75 of {'Idris.Prelude.Types.Left', E53} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V77) -> {'Idris.Prelude.Types.Right', 0} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V78) -> begin (V106 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V81, V82, V83)) end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> V85 end end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> begin (V92 = (V89(V91))), begin (V93 = (V90(V91))), (V92(V93)) end end end end end end end}, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> begin (V99 = (V96(V98))), ((V97(V99))(V98)) end end end end end end, fun (V100) -> fun (V101) -> fun (V102) -> begin (V103 = (V101(V102))), (V103(V102)) end end end end}, fun (V104) -> fun (V105) -> V105 end end}, <<"Read TTC"/utf8>>))(V78))), {'Idris.Prelude.Types.Right', V106} end end, V2)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V139 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V107) -> case V107 of {'Idris.Prelude.Types.Left', E31} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V109) -> {'Idris.Prelude.Types.Right', 0} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V110) -> begin (V138 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V113, V114, V115)) end end end end end, fun (V116) -> fun (V117) -> fun (V118) -> V117 end end end, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> begin (V124 = (V121(V123))), begin (V125 = (V122(V123))), (V124(V125)) end end end end end end end}, fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> begin (V131 = (V128(V130))), ((V129(V131))(V130)) end end end end end end, fun (V132) -> fun (V133) -> fun (V134) -> begin (V135 = (V133(V134))), (V135(V134)) end end end end}, fun (V136) -> fun (V137) -> V137 end end}, <<"Processing as TTImp"/utf8>>))(V110))), {'Idris.Prelude.Types.Right', V138} end end, V2))), case V139 of {'Idris.Prelude.Types.Left', E33} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V141) -> begin (V142 = ('Idris.Idris2.TTImp.ProcessDecls':'un--processTTImpFile'(V8, V17, V20, V0, V2))), case V142 of {'Idris.Prelude.Types.Left', E35} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V144) -> case V144 of 1 -> begin (V145 = ('Idris.Idris2.Core.Directory':'un--makeBuildDirectory'(V8, V14, V2))), case V145 of {'Idris.Prelude.Types.Left', E37} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V147) -> begin (V148 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V8, V0, <<"ttc"/utf8>>, V2))), case V148 of {'Idris.Prelude.Types.Left', E39} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V150) -> begin (V162 = ('Idris.Idris2.Core.Binary':'un--writeToTTC'({'Idris.Builtin.MkPair', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V151) -> fun (V152) -> fun (V153) -> ('dn--un--full_HasNames_(|Unit,MkUnit|)'(V151, V152, V153)) end end end, fun (V154) -> fun (V155) -> fun (V156) -> ('dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V154, V155, V156)) end end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V157, V158, V159)) end end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V160, V161)) end end}}, V8, V20, 0, V0, V150, V2))), case V162 of {'Idris.Prelude.Types.Left', E41} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V164) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V165) -> case V165 of {'Idris.Prelude.Types.Left', E43} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V167) -> {'Idris.Prelude.Types.Right', 0} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V168) -> begin (V196 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V171, V172, V173)) end end end end end, fun (V174) -> fun (V175) -> fun (V176) -> V175 end end end, fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> begin (V182 = (V179(V181))), begin (V183 = (V180(V181))), (V182(V183)) end end end end end end end}, fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> begin (V189 = (V186(V188))), ((V187(V189))(V188)) end end end end end end, fun (V190) -> fun (V191) -> fun (V192) -> begin (V193 = (V191(V192))), (V193(V192)) end end end end}, fun (V194) -> fun (V195) -> V195 end end}, <<"Written TTC"/utf8>>))(V168))), {'Idris.Prelude.Types.Right', V196} end end, V2)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); _ -> begin (V229 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V197) -> case V197 of {'Idris.Prelude.Types.Left', E16} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V199) -> {'Idris.Prelude.Types.Right', 0} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V200) -> begin (V228 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V203, V204, V205)) end end end end end, fun (V206) -> fun (V207) -> fun (V208) -> V207 end end end, fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> begin (V214 = (V211(V213))), begin (V215 = (V212(V213))), (V214(V215)) end end end end end end end}, fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> begin (V221 = (V218(V220))), ((V219(V221))(V220)) end end end end end end, fun (V222) -> fun (V223) -> fun (V224) -> begin (V225 = (V223(V224))), (V225(V224)) end end end end}, fun (V226) -> fun (V227) -> V227 end end}, <<"Processing as TTImp"/utf8>>))(V200))), {'Idris.Prelude.Types.Right', V228} end end, V2))), case V229 of {'Idris.Prelude.Types.Left', E18} -> (fun (V230) -> {'Idris.Prelude.Types.Left', V230} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V231) -> begin (V232 = ('Idris.Idris2.TTImp.ProcessDecls':'un--processTTImpFile'(V8, V17, V20, V0, V2))), case V232 of {'Idris.Prelude.Types.Left', E20} -> (fun (V233) -> {'Idris.Prelude.Types.Left', V233} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V234) -> case V234 of 1 -> begin (V235 = ('Idris.Idris2.Core.Directory':'un--makeBuildDirectory'(V8, V14, V2))), case V235 of {'Idris.Prelude.Types.Left', E22} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V237) -> begin (V238 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V8, V0, <<"ttc"/utf8>>, V2))), case V238 of {'Idris.Prelude.Types.Left', E24} -> (fun (V239) -> {'Idris.Prelude.Types.Left', V239} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V240) -> begin (V252 = ('Idris.Idris2.Core.Binary':'un--writeToTTC'({'Idris.Builtin.MkPair', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V241) -> fun (V242) -> fun (V243) -> ('dn--un--full_HasNames_(|Unit,MkUnit|)'(V241, V242, V243)) end end end, fun (V244) -> fun (V245) -> fun (V246) -> ('dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V244, V245, V246)) end end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V247, V248, V249)) end end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V250, V251)) end end}}, V8, V20, 0, V0, V240, V2))), case V252 of {'Idris.Prelude.Types.Left', E26} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V254) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V255) -> case V255 of {'Idris.Prelude.Types.Left', E28} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V257) -> {'Idris.Prelude.Types.Right', 0} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V258) -> begin (V286 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V261, V262, V263)) end end end end end, fun (V264) -> fun (V265) -> fun (V266) -> V265 end end end, fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> begin (V272 = (V269(V271))), begin (V273 = (V270(V271))), (V272(V273)) end end end end end end end}, fun (V274) -> fun (V275) -> fun (V276) -> fun (V277) -> fun (V278) -> begin (V279 = (V276(V278))), ((V277(V279))(V278)) end end end end end end, fun (V280) -> fun (V281) -> fun (V282) -> begin (V283 = (V281(V282))), (V283(V282)) end end end end}, fun (V284) -> fun (V285) -> V285 end end}, <<"Written TTC"/utf8>>))(V258))), {'Idris.Prelude.Types.Right', V286} end end, V2)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V287 of {'Idris.Prelude.Types.Left', E55} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V289) -> begin (V291 = begin (V290 = ('erlang':'get'(V20))), {'Idris.Prelude.Types.Right', V290} end), case V291 of {'Idris.Prelude.Types.Left', E57} -> (fun (V292) -> {'Idris.Prelude.Types.Left', V292} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V293) -> ('Idris.Idris2.Yaffle.REPL':'un--repl'(V8, V17, V20, V2)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--usage'() -> <<"Usage: yaffle <input file> [--timing]"/utf8>>.
'un--processArgs'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V2, V3) -> fun (V4) -> case V2 of <<"--timing"/utf8>> -> case V3 of [] -> {'Idris.Prelude.Types.Right', 1}; _ -> begin (V86 = (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V31) -> 0 end, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, ('un--usage'()))), V30)) end, fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> V65 end end end, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), begin (V73 = (V70(V71))), (V72(V73)) end end end end end end end}, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V76(V78))), ((V77(V79))(V78)) end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V81(V82))), (V83(V82)) end end end end}, fun (V84) -> fun (V85) -> V85 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end))(V4))), {'Idris.Prelude.Types.Right', V86} end end; _ -> begin (V168 = (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V89, V90, V91)) end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> V93 end end end, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V97(V99))), begin (V101 = (V98(V99))), (V100(V101)) end end end end end end end}, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V104(V106))), ((V105(V107))(V106)) end end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V109(V110))), (V111(V110)) end end end end}, fun (V112) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V113) -> 0 end, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V116, V117, V118)) end end end end end, fun (V119) -> fun (V120) -> fun (V121) -> V120 end end end, fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> begin (V127 = (V124(V126))), begin (V128 = (V125(V126))), (V127(V128)) end end end end end end end}, fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> begin (V134 = (V131(V133))), ((V132(V134))(V133)) end end end end end end, fun (V135) -> fun (V136) -> fun (V137) -> begin (V138 = (V136(V137))), (V138(V137)) end end end end}, fun (V139) -> fun (V140) -> V140 end end}, ('un--usage'()))), V112)) end, fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V143, V144, V145)) end end end end end, fun (V146) -> fun (V147) -> fun (V148) -> V147 end end end, fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> begin (V154 = (V151(V153))), begin (V155 = (V152(V153))), (V154(V155)) end end end end end end end}, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V158(V160))), ((V159(V161))(V160)) end end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> begin (V165 = (V163(V164))), (V165(V164)) end end end end}, fun (V166) -> fun (V167) -> V167 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end))(V4))), {'Idris.Prelude.Types.Right', V168} end end end end(E0, E1)); _ -> fun (V169) -> begin (V251 = (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V172, V173, V174)) end end end end end, fun (V175) -> fun (V176) -> fun (V177) -> V176 end end end, fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V180(V182))), begin (V184 = (V181(V182))), (V183(V184)) end end end end end end end}, fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> begin (V190 = (V187(V189))), ((V188(V190))(V189)) end end end end end end, fun (V191) -> fun (V192) -> fun (V193) -> begin (V194 = (V192(V193))), (V194(V193)) end end end end}, fun (V195) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V196) -> 0 end, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V199, V200, V201)) end end end end end, fun (V202) -> fun (V203) -> fun (V204) -> V203 end end end, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), begin (V211 = (V208(V209))), (V210(V211)) end end end end end end end}, fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> begin (V217 = (V214(V216))), ((V215(V217))(V216)) end end end end end end, fun (V218) -> fun (V219) -> fun (V220) -> begin (V221 = (V219(V220))), (V221(V220)) end end end end}, fun (V222) -> fun (V223) -> V223 end end}, ('un--usage'()))), V195)) end, fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V226, V227, V228)) end end end end end, fun (V229) -> fun (V230) -> fun (V231) -> V230 end end end, fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> begin (V237 = (V234(V236))), begin (V238 = (V235(V236))), (V237(V238)) end end end end end end end}, fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> begin (V244 = (V241(V243))), ((V242(V244))(V243)) end end end end end end, fun (V245) -> fun (V246) -> fun (V247) -> begin (V248 = (V246(V247))), (V248(V247)) end end end end}, fun (V249) -> fun (V250) -> V250 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end))(V169))), {'Idris.Prelude.Types.Right', V251} end end end.
