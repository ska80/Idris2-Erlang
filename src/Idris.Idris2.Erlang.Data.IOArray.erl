-module('Idris.Idris2.Erlang.Data.IOArray').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--4352-2127--in--un--iter'/5,
  'nested--4185-1968--in--un--copyFrom'/6,
  'nested--4438-2209--in--un--addToArray'/5,
  'un--writeArray'/4,
  'un--toList'/2,
  'un--readArray'/3,
  'un--prim__newArray'/3,
  'un--prim__arraySet'/4,
  'un--prim__arrayGet'/3,
  'un--newArrayCopy'/3,
  'un--newArray'/2,
  'un--max'/1,
  'un--fromList'/2
]).
'nested--4352-2127--in--un--iter'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, V3)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> ((V11('erased'))(('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4)))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V13, V14) -> case V13 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V15, V16, V17) -> ((((V16('erased'))('erased'))(('un--readArray'(V0, V1, V2))))(fun (V18) -> ('nested--4352-2127--in--un--iter'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3, [V18 | V4])) end)) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4185-1968--in--un--copyFrom'(V0, V1, V2, V3, V4, V5) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V5, 0)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V11, V12, V13) -> ((V12('erased'))(0)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V16, V17, V18) -> ((((V17('erased'))('erased'))(('un--prim__arrayGet'(V0, V3, V5))))(fun (V19) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V20, V21) -> V20 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--prim__arraySet'(V0, V4, V5, V19)), fun () -> ('nested--4185-1968--in--un--copyFrom'(V0, V1, V2, V3, V4, ((V5 - 1) rem 9223372036854775808))) end)) end)) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4438-2209--in--un--addToArray'(V0, V1, V2, V3, V4) -> case V3 of [] -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> ((V11('erased'))(0)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E8 | E9] -> (fun (V13, V14) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--4438-2209--in--un--addToArray'(V0, V1, ((V2 + 1) rem 9223372036854775808), V14, V4)) end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V15) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E11, E12} -> (fun (V16, V17) -> V16 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--prim__arraySet'(V0, case V4 of {'Idris.Erlang.Data.IOArray.MkIOArray', E13, E14} -> (fun (V18, V19) -> V19 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, {'Idris.Prelude.Types.Just', V15})), fun () -> ('nested--4438-2209--in--un--addToArray'(V0, V1, ((V2 + 1) rem 9223372036854775808), V14, V4)) end)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--writeArray'(V0, V1, V2, V3) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, 0)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, ('un--max'(V1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V9, V10, V11) -> ((V10('erased'))(0)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> ('un--prim__arraySet'(V0, case V1 of {'Idris.Erlang.Data.IOArray.MkIOArray', E8, E9} -> (fun (V12, V13) -> V13 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, {'Idris.Prelude.Types.Just', V3})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toList'(V0, V1) -> ('nested--4352-2127--in--un--iter'(V0, V1, 0, ('un--max'(V1)), [])).
'un--readArray'(V0, V1, V2) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, 0)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, ('un--max'(V1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V8, V9, V10) -> ((V9('erased'))({'Idris.Prelude.Types.Nothing'})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> ('un--prim__arrayGet'(V0, case V1 of {'Idris.Erlang.Data.IOArray.MkIOArray', E8, E9} -> (fun (V11, V12) -> V12 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__newArray'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V23, V24) -> case V23 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V25, V26, V27) -> case V25 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V28, V29, V30) -> ((V29('erased'))(('erlang':'apply'('array', 'new', [V1 | [{'default', V2} | []]])))) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V11, V12, V13) -> ((((V12('erased'))('erased'))(('Idris.Idris2.Data.IORef':'un--newIORef'(V0, V8))))(fun (V14) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E18, E19} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E20, E21, E22} -> (fun (V17, V18, V19) -> case V17 of {'Idris.Prelude.Interfaces.MkApplicative', E23, E24, E25} -> (fun (V20, V21, V22) -> ((V21('erased'))(V14)) end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__arraySet'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> ((V28('erased'))(fun (V29) -> ('erlang':'get'(V1)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V12, V13, V14) -> ((((V13('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E12, E13} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E17, E18, E19} -> (fun (V24, V25, V26) -> ((V25('erased'))(('erlang':'apply'('array', 'set', [V2 | [V3 | [V9 | []]]])))) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V15) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E20, E21} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('erlang':'put'(V1, V15)) end)) end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__arrayGet'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V31, V32) -> ((V32('erased'))(fun (V33) -> ('erlang':'get'(V1)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V11, V12, V13) -> ((((V12('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E12, E13} -> (fun (V23, V24) -> case V23 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V25, V26, V27) -> case V25 of {'Idris.Prelude.Interfaces.MkApplicative', E17, E18, E19} -> (fun (V28, V29, V30) -> ((V29('erased'))(('erlang':'apply'('array', 'get', [V2 | [V8 | []]])))) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V14) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E20, E21} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E22, E23, E24} -> (fun (V17, V18, V19) -> case V17 of {'Idris.Prelude.Interfaces.MkApplicative', E25, E26, E27} -> (fun (V20, V21, V22) -> ((V21('erased'))(V14)) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--newArrayCopy'(V0, V1, V2) -> begin (V3 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V1, ('un--max'(V2)))) of 1 -> ('un--max'(V2)); 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(('un--newArray'(V0, V3))))(fun (V9) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V10, V11) -> V10 end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--4185-1968--in--un--copyFrom'(V0, V2, V1, case V2 of {'Idris.Erlang.Data.IOArray.MkIOArray', E7, E8} -> (fun (V12, V13) -> V13 end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V9 of {'Idris.Erlang.Data.IOArray.MkIOArray', E9, E10} -> (fun (V14, V15) -> V15 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ((('un--max'(V2)) - 1) rem 9223372036854775808))), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E11, E12} -> (fun (V16, V17) -> case V16 of {'Idris.Prelude.Interfaces.MkMonad', E13, E14, E15} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkApplicative', E16, E17, E18} -> (fun (V21, V22, V23) -> ((V22('erased'))(V9)) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--newArray'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(('un--prim__newArray'(V0, V1, {'Idris.Prelude.Types.Nothing'}))))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V13, V14, V15) -> ((V14('erased'))({'Idris.Erlang.Data.IOArray.MkIOArray', V1, V7})) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--max'(V0) -> case V0 of {'Idris.Erlang.Data.IOArray.MkIOArray', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromList'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(('un--newArray'(V0, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'(V1))))))))(fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> V8 end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--4438-2209--in--un--addToArray'(V0, V1, 0, V1, V7)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V15, V16, V17) -> ((V16('erased'))(V7)) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
