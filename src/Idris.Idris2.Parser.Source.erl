-module('Idris.Idris2.Parser.Source').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--runParserTo'/6,
  'un--runParser'/5,
  'un--parseFile'/4
]).
'un--runParserTo'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Parser.Unlit':'un--unlit'(V2, V4)) of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromLitError'(V1, V6))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Parser.Lexer.Source':'un--lexTo'(V3, V8)) of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromLexError'(V1, V9))} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', V10} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(case ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parseWith'({'Idris.Prelude.Interfaces.MkMonoid', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V14, V15)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}, V0, V5, V13)) of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Parser.Support':'un--fromParsingErrors'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--show_Show_Token'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--showPrec_Show_Token'(V18, V19)) end end}, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V20) -> fun (V21) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--pretty_Pretty_Token'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--prettyPrec_Pretty_Token'(V23, V24)) end end end}}, V1, V16))} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V31, V32) -> begin (V38 = ('Idris.Idris2.Prelude.Interfaces':'un--<&>'(fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V35, V36)) end end end end, V12, fun (V37) -> {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Bounded':'un--start'(V37)), ('Idris.Idris2.Libraries.Text.Bounded':'un--end'(V37))}}, {'Idris.Builtin.MkPair', 0, {'Idris.Prelude.Types.Nothing'}}} end))), begin (V48 = ('Idris.Idris2.Prelude.Interfaces':'un--<&>'(fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V41, V42)) end end end end, V29, fun (V43) -> case V43 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V44, V45) -> begin (V47 = fun (V46) -> {'Idris.Core.FC.MkFC', V1, ('Idris.Idris2.Libraries.Text.Bounded':'un--startBounds'(V46)), ('Idris.Idris2.Libraries.Text.Bounded':'un--endBounds'(V46))} end), {'Idris.Core.Core.ParserWarning', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.FC.EmptyFC'} end, fun () -> V47 end, V44)), V45} end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V48, {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V38, V27)), V31}}} end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)).
'un--runParser'(V0, V1, V2, V3, V4) -> ('un--runParserTo'(V0, V1, V2, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V5) -> 0 end)), V3, V4)).
'un--parseFile'(V0, V1, V2, V3) -> begin (V31 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V0))(V3))), case V31 of {'Idris.Prelude.Types.Right', E0} -> (fun (V32) -> ('un--runParser'(1, V1, ('Idris.Idris2.Parser.Unlit':'un--isLitFile'(V0)), V32, V2)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V33) -> {'Idris.Prelude.Types.Left', {'Idris.Core.Core.FileErr', V0, V33}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
