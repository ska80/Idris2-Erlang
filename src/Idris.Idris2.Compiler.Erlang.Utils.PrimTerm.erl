-module('Idris.Idris2.Compiler.Erlang.Utils.PrimTerm').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--primTermToErlTerm'/1,
  'un--primTermToCS'/1
]).
'un--primTermToErlTerm'(V0) -> case V0 of {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', E0} -> (fun (V1) -> ('erlang':'binary_to_atom'(V1, 'utf8')) end(E0)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PChar', E1} -> (fun (V2) -> V2 end(E1)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PFloat', E2} -> (fun (V3) -> V3 end(E2)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', E3} -> (fun (V4) -> V4 end(E3)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', E4} -> (fun (V5) -> ('erlang':'apply'('erlang', 'list_to_tuple', [('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('un--primTermToErlTerm'(V6)) end, V5)) | []])) end(E4)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PList', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('un--primTermToErlTerm'(V8)) end, V7)) end(E5)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PCharlist', E6} -> (fun (V9) -> ('unicode':'characters_to_list'(V9)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--primTermToCS'(V0) -> case V0 of {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"\x{27}"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)), <<""/utf8>>))} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"\x{27}"/utf8>>} | []]]]} end(E0)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PChar', E1} -> (fun (V2) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"$"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeChar'(V2, <<""/utf8>>))} | []]]} end(E1)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PFloat', E2} -> (fun (V3) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--showDouble'(V3))} end(E2)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', E3} -> (fun (V4) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4))} end(E3)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', E4} -> (fun (V5) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"{"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Nested', ('Idris.Idris2.Data.List':'un--intersperse'({'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<","/utf8>>}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('un--primTermToCS'(V6)) end, V5))))} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"}"/utf8>>} | []]]]} end(E4)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PList', E5} -> (fun (V7) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"["/utf8>>} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Nested', ('Idris.Idris2.Data.List':'un--intersperse'({'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<","/utf8>>}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('un--primTermToCS'(V8)) end, V7))))} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"]"/utf8>>} | []]]]} end(E5)); {'Idris.Compiler.Erlang.Utils.PrimTerm.PCharlist', E6} -> (fun (V9) -> {'Idris.Compiler.Erlang.Utils.CompositeString.Nested', [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"\x{22}"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', ('Idris.Idris2.Compiler.Erlang.Utils.String':'un--escapeString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V9)), <<""/utf8>>))} | [{'Idris.Compiler.Erlang.Utils.CompositeString.Str', <<"\x{22}"/utf8>>} | []]]]} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
