-module('Idris.Idris2.Network.Socket.Raw').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--sockaddr_free'/2,
  'un--sock_poke'/4,
  'un--sock_peek'/3,
  'un--sock_free'/2,
  'un--sock_alloc'/2,
  'un--sendToBuf'/6,
  'un--sendBuf'/4,
  'un--recvFromBuf'/4,
  'un--recvBuf'/4,
  'un--getSockPort'/2,
  'un--getSockAddr'/2,
  'un--freeRecvfromStruct'/2,
  'un--freeRecvStruct'/2,
  'un--foreignGetRecvfromPort'/2,
  'un--foreignGetRecvfromPayload'/2,
  'un--foreignGetRecvfromAddr'/2
]).
'un--sockaddr_free'(V0, V1) -> ('Idris.Idris2.System.FFI':'un--free'(V0, V1)).
'un--sock_poke'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_poke'(V1, V2, V3, V6)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sock_peek'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(fun (V5) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_peek'(V1, V2, V5)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sock_free'(V0, V1) -> ('Idris.Idris2.System.FFI':'un--free'(V0, V1)).
'un--sock_alloc'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((((V7('erased'))('erased'))(fun (V10) -> V10 end))(('Idris.Idris2.System.FFI':'un--malloc'(V0, V1)))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sendToBuf'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V29, V30) -> ((V30('erased'))(fun (V31) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sendto_buf'(case V1 of {'Idris.Network.Socket.Data.MkSocket', E7, E8, E9, E10} -> (fun (V32, V33, V34, V35) -> V32 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5, ('Idris.Idris2.Network.Socket.Data':'dn--un--show_Show_SocketAddress'(V2)), V3, ('Idris.Idris2.Network.Socket.Data':'dn--un--toCode_ToCode_SocketFamily'(case V1 of {'Idris.Network.Socket.Data.MkSocket', E11, E12, E13, E14} -> (fun (V36, V37, V38, V39) -> V37 end(E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V31)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V11) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V11, -1)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V14, V15, V16) -> case V14 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V17, V18, V19) -> ((((V17('erased'))('erased'))(fun (V20) -> {'Idris.Prelude.Types.Left', V20} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E23, E24} -> (fun (V21, V22) -> case V21 of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V23, V24, V25) -> case V23 of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V26, V27, V28) -> ((V27('erased'))({'Idris.Prelude.Types.Right', V11})) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sendBuf'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> ((V28('erased'))(fun (V29) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_send_buf'(case V1 of {'Idris.Network.Socket.Data.MkSocket', E7, E8, E9, E10} -> (fun (V30, V31, V32, V33) -> V30 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, V29)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V9, -1)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E11, E12} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E13, E14, E15} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E16, E17, E18} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V18) -> {'Idris.Prelude.Types.Left', V18} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E19, E20} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E24, E25, E26} -> (fun (V24, V25, V26) -> ((V25('erased'))({'Idris.Prelude.Types.Right', V9})) end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--recvFromBuf'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V68, V69) -> ((V69('erased'))(fun (V70) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_recvfrom_buf'(case V1 of {'Idris.Network.Socket.Data.MkSocket', E7, E8, E9, E10} -> (fun (V71, V72, V73, V74) -> V71 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, V70)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> begin (V10 = V9), case V0 of {'Idris.Prelude.IO.MkHasIO', E11, E12} -> (fun (V11, V12) -> case V11 of {'Idris.Prelude.Interfaces.MkMonad', E13, E14, E15} -> (fun (V13, V14, V15) -> ((((V14('erased'))('erased'))(('Idris.Idris2.Network.Socket.Data':'un--nullPtr'(V0, V9))))(fun (V16) -> case V16 of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E16, E17} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E18, E19, E20} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E21, E22, E23} -> (fun (V22, V23, V24) -> ((((V22('erased'))('erased'))(fun (V25) -> {'Idris.Prelude.Types.Left', V25} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))) end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E24, E25} -> (fun (V26, V27) -> case V26 of {'Idris.Prelude.Interfaces.MkMonad', E26, E27, E28} -> (fun (V28, V29, V30) -> ((((V29('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E29, E30} -> (fun (V65, V66) -> ((V66('erased'))(fun (V67) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_res'(V9, V67)) end)) end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V31) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V31, -1)) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E31, E32} -> (fun (V32, V33) -> V32 end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--freeRecvfromStruct'(V0, V10)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E33, E34} -> (fun (V34, V35) -> case V34 of {'Idris.Prelude.Interfaces.MkMonad', E35, E36, E37} -> (fun (V36, V37, V38) -> case V36 of {'Idris.Prelude.Interfaces.MkApplicative', E38, E39, E40} -> (fun (V39, V40, V41) -> ((((V39('erased'))('erased'))(fun (V42) -> {'Idris.Prelude.Types.Left', V42} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))) end(E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)); 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E41, E42} -> (fun (V43, V44) -> case V43 of {'Idris.Prelude.Interfaces.MkMonad', E43, E44, E45} -> (fun (V45, V46, V47) -> ((((V46('erased'))('erased'))(('un--foreignGetRecvfromPort'(V0, V10))))(fun (V48) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E46, E47} -> (fun (V49, V50) -> case V49 of {'Idris.Prelude.Interfaces.MkMonad', E48, E49, E50} -> (fun (V51, V52, V53) -> ((((V52('erased'))('erased'))(('un--foreignGetRecvfromAddr'(V0, V10))))(fun (V54) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E51, E52} -> (fun (V55, V56) -> V55 end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--freeRecvfromStruct'(V0, V10)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E53, E54} -> (fun (V57, V58) -> case V57 of {'Idris.Prelude.Interfaces.MkMonad', E55, E56, E57} -> (fun (V59, V60, V61) -> case V59 of {'Idris.Prelude.Interfaces.MkApplicative', E58, E59, E60} -> (fun (V62, V63, V64) -> ((V63('erased'))({'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Network.Socket.Data.MkUDPAddrInfo', V54, V48}, ((V31 + 1) rem 9223372036854775808)}})) end(E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)) end(E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--recvBuf'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V27, V28) -> ((V28('erased'))(fun (V29) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_recv_buf'(case V1 of {'Idris.Network.Socket.Data.MkSocket', E7, E8, E9, E10} -> (fun (V30, V31, V32, V33) -> V30 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V3, V29)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V9, -1)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E11, E12} -> (fun (V10, V11) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E13, E14, E15} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Interfaces.MkApplicative', E16, E17, E18} -> (fun (V15, V16, V17) -> ((((V15('erased'))('erased'))(fun (V18) -> {'Idris.Prelude.Types.Left', V18} end))(('Idris.Idris2.Network.Socket.Data':'un--getErrno'(V0)))) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E19, E20} -> (fun (V19, V20) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E24, E25, E26} -> (fun (V24, V25, V26) -> ((V25('erased'))({'Idris.Prelude.Types.Right', V9})) end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getSockPort'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_port'(case V1 of {'Idris.Network.Socket.Data.MkSocket', E2, E3, E4, E5} -> (fun (V5, V6, V7, V8) -> V5 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getSockAddr'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V54, V55) -> ((V55('erased'))(fun (V56) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_family'(V1, V56)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Network.Socket.Data':'un--getSocketFamily'(V7)) of {'Idris.Prelude.Types.Just', E7} -> (fun (V8) -> case V8 of 2 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V11, V12, V13) -> ((((V12('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V23, V24) -> ((V24('erased'))(fun (V25) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_ipv4'(V1, V25)) end)) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V14) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V17, V18, V19) -> case V17 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V20, V21, V22) -> ((V21('erased'))(('Idris.Idris2.Network.Socket.Data':'un--parseIPv4'(V14)))) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 3 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E23, E24} -> (fun (V26, V27) -> case V26 of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V28, V29, V30) -> case V28 of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V31, V32, V33) -> ((V32('erased'))({'Idris.Network.Socket.Data.IPv6Addr'})) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E31, E32} -> (fun (V34, V35) -> case V34 of {'Idris.Prelude.Interfaces.MkMonad', E33, E34, E35} -> (fun (V36, V37, V38) -> case V36 of {'Idris.Prelude.Interfaces.MkApplicative', E36, E37, E38} -> (fun (V39, V40, V41) -> ((((V39('erased'))('erased'))(fun (V45) -> {'Idris.Network.Socket.Data.Hostname', V45} end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E39, E40} -> (fun (V42, V43) -> ((V43('erased'))(fun (V44) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_unix'(V1, V44)) end)) end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E41, E42} -> (fun (V46, V47) -> case V46 of {'Idris.Prelude.Interfaces.MkMonad', E43, E44, E45} -> (fun (V48, V49, V50) -> case V48 of {'Idris.Prelude.Interfaces.MkApplicative', E46, E47, E48} -> (fun (V51, V52, V53) -> ((V52('erased'))({'Idris.Network.Socket.Data.InvalidAddress'})) end(E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<"Unhandled input for Network.Socket.Raw.case block in getSockAddr at Network.Socket.Raw:64:1--75:43"/utf8>>)) end end(E7)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<"Unhandled input for Network.Socket.Raw.case block in getSockAddr at Network.Socket.Raw:64:1--75:43"/utf8>>)) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--freeRecvfromStruct'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_free_recvfrom_struct'(V1, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--freeRecvStruct'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_free_recv_struct'(V1, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--foreignGetRecvfromPort'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V25, V26) -> ((V26('erased'))(fun (V27) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_sockaddr'(V1, V27)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V10, V11, V12) -> ((((V11('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E12, E13} -> (fun (V22, V23) -> ((V23('erased'))(fun (V24) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_sockaddr_ipv4_port'(V7, V24)) end)) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V13) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E14, E15} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E16, E17, E18} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Prelude.Interfaces.MkApplicative', E19, E20, E21} -> (fun (V19, V20, V21) -> ((V20('erased'))(V13)) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--foreignGetRecvfromPayload'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_payload'(V1, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--foreignGetRecvfromAddr'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V13, V14, V15) -> ((((V13('erased'))('erased'))(fun (V19) -> V19 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('Idris.Idris2.Network.FFI':'un--prim__idrnet_get_recvfrom_sockaddr'(V1, V18)) end)) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> ('un--getSockAddr'(V0, V7)) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
