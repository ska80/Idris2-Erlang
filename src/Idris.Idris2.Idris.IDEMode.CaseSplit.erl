-module('Idris.Idris2.Idris.IDEMode.CaseSplit').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--updateCase-4011'/9,
  'nested--10041-3487--in--un--isWhitespace'/5,
  'nested--11044-4382--in--un--indent'/7,
  'nested--10579-3964--in--un--getValid'/7,
  'nested--10579-3966--in--un--getIndent'/8,
  'nested--10579-3965--in--un--getBad'/7,
  'nested--9924-3375--in--un--bracket'/5,
  'un--updateCase'/7,
  'un--updateAll'/5,
  'un--toStrUpdate'/3,
  'un--showImpossible'/6,
  'un--getReplaces'/5,
  'un--getClause'/6,
  'un--fnName'/2,
  'un--doUpdates'/4
]).
'case--updateCase-4011'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"No file loaded"/utf8>>}, V8)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> begin (V38 = begin (V37 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V9))(V8))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E1} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Right', E3} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Libraries.Data.List.Extra':'un--elemAt'(('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V41)))), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))))))), case V42 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"File too short!"/utf8>>}, V8)) end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V43) -> begin (V45 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V44) -> ('nested--10579-3964--in--un--getValid'(V0, V1, V2, V3, V4, V5, V44)) end, V2))), begin (V47 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V46) -> ('nested--10579-3965--in--un--getBad'(V0, V1, V2, V3, V4, V5, V46)) end, V2))), begin (V105 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Valid: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V51, V52)) end end}, {'Idris.Prelude.Show.MkShow', fun (V53) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V55, V56)) end end}, V53)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V60, V61)) end end}, V57, V58)) end end}}, V49)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V65, V66)) end end}, {'Idris.Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V69, V70)) end end}, V67)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V74, V75)) end end}, V71, V72)) end end}}, V62, V63)) end end}, V48)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V80, V81)) end end}, {'Idris.Prelude.Show.MkShow', fun (V82) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V84, V85)) end end}, V82)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V89, V90)) end end}, V86, V87)) end end}}, V78)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V94, V95)) end end}, {'Idris.Prelude.Show.MkShow', fun (V96) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V98, V99)) end end}, V96)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V103, V104)) end end}, V100, V101)) end end}}, V91, V92)) end end}, V76, V77)) end end}, V45)))) end, V8))), case V105 of {'Idris.Prelude.Types.Left', E5} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V107) -> begin (V117 = ('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bad: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V110, V111)) end end}, V108)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V115, V116)) end end}, V112, V113)) end end}, V47)))) end, V8))), case V117 of {'Idris.Prelude.Types.Left', E7} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V119) -> case ('Idris.Idris2.Data.List':'un--isNil'(V45)) of 1 -> begin (V120 = ('nested--10579-3966--in--un--getIndent'(V0, V1, V2, V3, V4, V5, 0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V43))))), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V121) -> fun (V122) -> ('un--showImpossible'(V5, V4, V3, V120, V121, V122)) end end, V47, [], V8)) end; 0 -> begin (V125 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V123) -> fun (V124) -> ('un--getReplaces'(V5, V4, V3, V123, V124)) end end, V45, [], V8))), case V125 of {'Idris.Prelude.Types.Left', E9} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V127) -> begin (V128 = ('Idris.Idris2.Idris.IDEMode.TokenLine':'un--tokens'(V43))), begin (V130 = begin (V129 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V129} end), case V130 of {'Idris.Prelude.Types.Left', E11} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V132) -> begin (V133 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.IDEMode.CaseSplit.UPD'}, [], V8))), case V133 of {'Idris.Prelude.Types.Left', E13} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V135) -> ('un--updateAll'(V135, V132, V128, V127, V8)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Left', E15} -> (fun (V136) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V9, V136}, V8)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10041-3487--in--un--isWhitespace'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.IDEMode.TokenLine.Whitespace', E0} -> (fun (V5) -> 1 end(E0)); _ -> 0 end.
'nested--11044-4382--in--un--indent'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> ('Idris.Idris2.Parser.Unlit':'un--relit'({'Idris.Prelude.Types.Just', V7}, ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(0, ((('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.FC':'un--startPos'(V6)))) - 1) rem 9223372036854775808))))))), $ )))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Core.FC':'un--startPos'(V6)))))))), $ )))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10579-3964--in--un--getValid'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.TTImp.Interactive.CaseSplit.Valid', E0, E1} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Just', V8} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--10579-3966--in--un--getIndent'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V6; [E0 | E1] -> (fun (V8, V9) -> case V8 of $  -> ('nested--10579-3966--in--un--getIndent'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V6, (1 + 0))), V9)); _ -> V6 end end(E0, E1)); _ -> V6 end.
'nested--10579-3965--in--un--getBad'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.TTImp.Interactive.CaseSplit.Impossible', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Just', V7} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--9924-3375--in--un--bracket'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V5, V6) -> V4 end(E0, E1)); {'Idris.Idris.Syntax.PList', E2, E3, E4} -> (fun (V7, V8, V9) -> V4 end(E2, E3, E4)); {'Idris.Idris.Syntax.PSnocList', E5, E6, E7} -> (fun (V10, V11, V12) -> V4 end(E5, E6, E7)); {'Idris.Idris.Syntax.PPair', E8, E9, E10} -> (fun (V13, V14, V15) -> V4 end(E8, E9, E10)); {'Idris.Idris.Syntax.PUnit', E11} -> (fun (V16) -> V4 end(E11)); {'Idris.Idris.Syntax.PComprehension', E12, E13, E14} -> (fun (V17, V18, V19) -> V4 end(E12, E13, E14)); {'Idris.Idris.Syntax.PPrimVal', E15, E16} -> (fun (V20, V21) -> V4 end(E15, E16)); _ -> {'Idris.Idris.Syntax.PBracketed', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V4} end.
'un--updateCase'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ('case--updateCase-4011'(V5, V4, V3, V2, V1, V0, V10, case V10 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateAll'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V5, V6) -> begin (V7 = (('un--doUpdates'(V0, V1, V5, V2))(V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('un--updateAll'(V0, V1, V2, V6, V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V28, V29, V30, V31)) end end end end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V33)) end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V36, V37, V38)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V39, V40)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V41) -> ('Idris.Idris2.Idris.IDEMode.TokenLine':'un--toString'(V41)) end, V9)) | V12]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toStrUpdate'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> fun (V5) -> case V3 of {'Idris.Core.Name.UN', E2} -> (fun (V6) -> case V6 of {'Idris.Core.Name.Basic', E3} -> (fun (V7) -> begin (V9 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V8) -> ('Idris.Idris2.Core.TT':'un--defaultKindedName'(V8)) end, V4)), V5))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V7, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(('nested--9924-3375--in--un--bracket'(V7, V4, V1, V0, V11))))} | []]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> {'Idris.Prelude.Types.Right', []} end end(E2)); _ -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1)); _ -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end end.
'un--showImpossible'(V0, V1, V2, V3, V4, V5) -> begin (V7 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V6) -> ('Idris.Idris2.Core.TT':'un--defaultKindedName'(V6)) end, V4)), V5))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(V3, $ )))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_IPTerm'(V9)), <<" impossible"/utf8>>))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getReplaces'(V0, V1, V2, V3, V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V5) -> ('un--toStrUpdate'(V0, V1, V5)) end, V3, [], V4))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V35, V36)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V8))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getClause'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Metadata':'un--findTyDeclAt'(V1, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.FC':'un--onLine'(((V3 - 1) rem 9223372036854775808), V10)) end end, V5))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Just', E4} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V20, V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V18, V5))), case V22 of {'Idris.Prelude.Types.Left', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V24) -> begin (V28 = begin (V25 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V9, {'Idris.Core.Env.Nil'}, V21))(V5))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> (('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getEnvArgNames'(V0, V9, V20, V27))(V5)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V28 of {'Idris.Prelude.Types.Left', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Idris.REPL.Opts':'un--getSourceLine'(V2, V3, V5))), case V31 of {'Idris.Prelude.Types.Left', E17} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Just', E19} -> (fun (V34) -> case ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V34)) of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V35, V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--11044-4382--in--un--indent'(V4, V3, V2, V1, V0, V35, V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fnName'(1, V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V48)) end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V52, V53, V54, V55)) end end end end end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V57)) end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V60, V61, V62)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V63, V64)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V65) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V65)) end, V30)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = ?"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fnName'(0, V24)), <<"_rhs"/utf8>>))))))))))}} end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fnName'(V0, V1) -> case V1 of {'Idris.Core.Name.UN', E0} -> (fun (V2) -> case V2 of {'Idris.Core.Name.Basic', E1} -> (fun (V3) -> case ('Idris.Idris2.Parser.Lexer.Common':'un--isIdentNormal'(V3)) of 1 -> V3; 0 -> case V0 of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<")"/utf8>>)))); 0 -> <<"op"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end end(E0)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> ('un--fnName'(V0, V5)) end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V6, V7) -> V6 end(E4, E5)); _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end.
'un--doUpdates'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Idris.IDEMode.TokenLine.LBrace'} -> (fun () -> case ('Idris.Idris2.Data.List':'un--span'(fun (V7) -> ('nested--10041-3487--in--un--isWhitespace'(V6, V2, V1, V0, V7)) end, V6)) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> case V9 of [E8 | E9] -> (fun (V10, V11) -> case V10 of {'Idris.Idris.IDEMode.TokenLine.Name', E12} -> (fun (V12) -> case ('Idris.Idris2.Data.List':'un--span'(fun (V13) -> ('nested--10041-3487--in--un--isWhitespace'(V6, V2, V1, V0, V13)) end, V11)) of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V14, V15) -> case V15 of [E17 | E18] -> (fun (V16, V17) -> fun (V18) -> case V16 of {'Idris.Idris.IDEMode.TokenLine.RBrace'} -> (fun () -> begin (V19 = (('un--doUpdates'(V0, V1, V2, [{'Idris.Idris.IDEMode.TokenLine.Name', V12} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, [{'Idris.Idris.IDEMode.TokenLine.RBrace'} | V17]))]))(V18))), case V19 of {'Idris.Prelude.Types.Left', E21} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V21) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, [{'Idris.Idris.IDEMode.TokenLine.Name', V12} | [{'Idris.Idris.IDEMode.TokenLine.Whitespace', <<" "/utf8>>} | [{'Idris.Idris.IDEMode.TokenLine.Equal'} | [{'Idris.Idris.IDEMode.TokenLine.Whitespace', <<" "/utf8>>} | V21]]]]))]} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Idris.IDEMode.TokenLine.Equal'} -> (fun () -> case ('Idris.Idris2.Data.List':'un--span'(fun (V22) -> ('nested--10041-3487--in--un--isWhitespace'(V6, V2, V1, V0, V22)) end, V17)) of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V23, V24) -> begin (V25 = (('un--doUpdates'(V0, V1, V2, V24))(V18))), case V25 of {'Idris.Prelude.Types.Left', E25} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V27) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, [{'Idris.Idris.IDEMode.TokenLine.Name', V12} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, [{'Idris.Idris.IDEMode.TokenLine.Equal'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V23, V27))]))]))]} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> begin (V28 = (('un--doUpdates'(V0, V1, V2, V11))(V18))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, [{'Idris.Idris.IDEMode.TokenLine.Name', V12} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, V30))]))]} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E17, E18)); _ -> fun (V31) -> begin (V32 = (('un--doUpdates'(V0, V1, V2, V11))(V31))), case V32 of {'Idris.Prelude.Types.Left', E15} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, [{'Idris.Idris.IDEMode.TokenLine.Name', V12} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, V34))]))]} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> fun (V35) -> begin (V36 = (('un--doUpdates'(V0, V1, V2, V6))(V35))), case V36 of {'Idris.Prelude.Types.Left', E10} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V38) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([], V38))]} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E8, E9)); _ -> fun (V39) -> begin (V40 = (('un--doUpdates'(V0, V1, V2, V6))(V39))), case V40 of {'Idris.Prelude.Types.Left', E6} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V42) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.LBrace'} | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([], V42))]} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Idris.IDEMode.TokenLine.Name', E27} -> (fun (V43) -> fun (V44) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V47, V48)) end end}, V43, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V49 = (('un--doUpdates'(V0, V1, V2, V6))(V44))), case V49 of {'Idris.Prelude.Types.Left', E28} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V51) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.Name', V43} | V51]} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E30} -> (fun (V52) -> begin (V53 = (('un--doUpdates'(V0, V1, V2, V6))(V44))), case V53 of {'Idris.Prelude.Types.Left', E31} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V55) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.Other', V52} | V55]} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); {'Idris.Idris.IDEMode.TokenLine.HoleName', E33} -> (fun (V56) -> fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E34} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.TTImp.Utils':'un--uniqueName'(V1, V61, V56, V57))), case V62 of {'Idris.Prelude.Types.Left', E36} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V64) -> begin (V66 = begin (V65 = ('erlang':'put'(V0, [V64 | V61]))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E38} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V68) -> begin (V69 = (('un--doUpdates'(V0, V1, V2, V6))(V57))), case V69 of {'Idris.Prelude.Types.Left', E40} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V71) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.IDEMode.TokenLine.HoleName', V64} | V71]} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> fun (V72) -> begin (V73 = (('un--doUpdates'(V0, V1, V2, V6))(V72))), case V73 of {'Idris.Prelude.Types.Left', E2} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V75) -> {'Idris.Prelude.Types.Right', [V5 | V75]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
