-module('Idris.Idris2.Compiler.CaseOpts').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8099-3502--in--un--updateAlt'/6,
  'nested--8052-3462--in--un--updateAlt'/6,
  'nested--8305-3685--in--un--go'/3,
  'nested--7940-3364--in--un--doCaseLam'/4,
  'nested--7339-3018--in--un--defLam'/6,
  'nested--7339-2812--in--un--defLam'/6,
  'nested--8122-3611--in--un--constCase'/7,
  'nested--8122-3525--in--un--conCase'/7,
  'nested--8122-3612--in--un--canCaseOfCase'/7,
  'nested--8122-3526--in--un--canCaseOfCase'/7,
  'un--tryLiftOutConst'/2,
  'un--tryLiftOut'/2,
  'un--tryLiftDef'/2,
  'un--tryCaseOfCase'/1,
  'un--shiftVar'/3,
  'un--shiftUnder'/2,
  'un--shiftBinderConstAlt'/4,
  'un--shiftBinderConAlt'/4,
  'un--shiftBinder'/4,
  'un--liftOutLambda'/3,
  'un--getName'/2,
  'un--doCaseOfConstCase'/5,
  'un--doCaseOfCase'/5,
  'un--caseOfCase'/1,
  'un--caseLamDef'/3,
  'un--caseLamConstAlt'/3,
  'un--caseLamConAlt'/3,
  'un--caseLam'/3,
  'un--allLamsConst'/1,
  'un--allLams'/1
]).
'nested--8099-3502--in--un--updateAlt'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V6, V7) -> {'Idris.Core.CompileExpr.MkConstAlt', V6, {'Idris.Core.CompileExpr.CConstCase', V4, V7, V1, V0}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8052-3462--in--un--updateAlt'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> {'Idris.Core.CompileExpr.MkConAlt', V6, V7, V8, V9, {'Idris.Core.CompileExpr.CConCase', V4, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--weakenNs_Weaken_CConAlt'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V9)), V11)) end, V1)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V12) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--weakenNs_Weaken_CExp'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V9)), V12)) end, V0))}} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8305-3685--in--un--go'(V0, V1, V2) -> case V1 of 0 -> V2; _ -> begin (V3 = (V1 - 1)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V2 end, fun () -> fun (V4) -> ('nested--8305-3685--in--un--go'(V0, V3, V4)) end end, ('un--tryCaseOfCase'(V2)))) end end.
'nested--7940-3364--in--un--doCaseLam'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.CaseOpts.NextName'}, 0, V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('un--caseLam'(V8, V5, V3))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkFun', V4, V11}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', V2} end.
'nested--7339-3018--in--un--defLam'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.CompileExpr.CLam', E1, E2, E3} -> (fun (V7, V8, V9) -> 1 end(E1, E2, E3)); _ -> 0 end end(E0)); _ -> 0 end.
'nested--7339-2812--in--un--defLam'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.CompileExpr.CLam', E1, E2, E3} -> (fun (V7, V8, V9) -> 1 end(E1, E2, E3)); _ -> 0 end end(E0)); _ -> 0 end.
'nested--8122-3611--in--un--constCase'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Core.CompileExpr.CPrimVal', E2, E3} -> (fun (V9, V10) -> 1 end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--8122-3525--in--un--conCase'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.CompileExpr.CCon', E5, E6, E7, E8, E9} -> (fun (V12, V13, V14, V15, V16) -> 1 end(E5, E6, E7, E8, E9)); _ -> 0 end end(E0, E1, E2, E3, E4)); _ -> 0 end.
'nested--8122-3612--in--un--canCaseOfCase'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> 1; [E0 | E1] -> (fun (V7, V8) -> case V8 of [] -> 1; _ -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, fun (V35) -> ('nested--8122-3611--in--un--constCase'(V0, V1, V2, V3, V4, V5, V35)) end, V6)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V51, V52, V53, V54)) end end end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V59, V60, V61)) end end end end end}, fun (V62) -> ('nested--8122-3611--in--un--constCase'(V0, V1, V2, V3, V4, V5, V62)) end, V6)) end.
'nested--8122-3526--in--un--canCaseOfCase'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> 1; [E0 | E1] -> (fun (V7, V8) -> case V8 of [] -> 1; _ -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, fun (V35) -> ('nested--8122-3525--in--un--conCase'(V0, V1, V2, V3, V4, V5, V35)) end, V6)) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V51, V52, V53, V54)) end end end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V59, V60, V61)) end end end end end}, fun (V62) -> ('nested--8122-3525--in--un--conCase'(V0, V1, V2, V3, V4, V5, V62)) end, V6)) end.
'un--tryLiftOutConst'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Just', []}; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Core.CompileExpr.MkConstAlt', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V6, V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryLiftOutConst'(V0, V3)), fun (V9) -> begin (V10 = ('un--liftOutLambda'([], V0, V8))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([{'Idris.Core.CompileExpr.MkConstAlt', V4, V10} | V9])) end end)) end(E4, E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--tryLiftOut'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Just', []}; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Core.CompileExpr.MkConAlt', E2, E3, E4, E5, E6} -> (fun (V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.CompileExpr.CLam', E7, E8, E9} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryLiftOut'(V0, V3)), fun (V12) -> begin (V13 = ('un--liftOutLambda'(V7, V0, V11))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([{'Idris.Core.CompileExpr.MkConAlt', V4, V5, V6, V7, V13} | V12])) end end)) end(E7, E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3, E4, E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--tryLiftDef'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V2 of {'Idris.Core.CompileExpr.CLam', E1, E2, E3} -> (fun (V3, V4, V5) -> begin (V6 = ('un--liftOutLambda'([], V0, V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Prelude.Types.Just', V6})) end end(E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--tryCaseOfCase'(V0) -> case V0 of {'Idris.Core.CompileExpr.CConCase', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V2 of {'Idris.Core.CompileExpr.CConCase', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case ('nested--8122-3526--in--un--canCaseOfCase'(V7, V6, V5, V4, V3, V1, V7)) of 1 -> {'Idris.Prelude.Types.Just', ('un--doCaseOfCase'(V5, V6, V7, V3, V4))}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); {'Idris.Core.CompileExpr.CConstCase', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> case V10 of {'Idris.Core.CompileExpr.CConstCase', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case ('nested--8122-3612--in--un--canCaseOfCase'(V15, V14, V13, V12, V11, V9, V15)) of 1 -> {'Idris.Prelude.Types.Just', ('un--doCaseOfConstCase'(V13, V14, V15, V11, V12))}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12, E13, E14, E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--shiftVar'(V0, V1, V2) -> case V0 of [] -> ('un--shiftUnder'(V1, V2)); [E0 | E1] -> (fun (V3, V4) -> case V2 of 0 -> 0; _ -> begin (V5 = (V2 - 1)), (1 + ('un--shiftVar'(V4, V1, V5))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shiftUnder'(V0, V1) -> case V1 of 0 -> ('Idris.Idris2.Core.TT':'un--weakenNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V0)), 0)); _ -> begin (V2 = (V1 - 1)), ('Idris.Idris2.Core.TT':'un--insertNVar'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V0)), V2)) end end.
'un--shiftBinderConstAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V4, V5) -> {'Idris.Core.CompileExpr.MkConstAlt', V4, ('un--shiftBinder'(V0, V1, V2, V5))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shiftBinderConAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V9 = V8), {'Idris.Core.CompileExpr.MkConAlt', V4, V5, V6, V7, ('un--shiftBinder'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V7, V0)), V1, V2, V9))} end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shiftBinder'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V4, V5) -> {'Idris.Core.CompileExpr.CLocal', ('un--shiftVar'(V0, V1, V4)), V5} end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V6, V7) -> {'Idris.Core.CompileExpr.CRef', V6, V7} end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V8, V9, V10) -> {'Idris.Core.CompileExpr.CLam', V8, V9, ('un--shiftBinder'([V9 | V0], V1, V2, V10))} end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V11, V12, V13, V14, V15) -> {'Idris.Core.CompileExpr.CLet', V11, V12, V13, ('un--shiftBinder'(V0, V1, V2, V14)), ('un--shiftBinder'([V12 | V0], V1, V2, V15))} end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E12, E13, E14} -> (fun (V16, V17, V18) -> {'Idris.Core.CompileExpr.CApp', V16, ('un--shiftBinder'(V0, V1, V2, V17)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('un--shiftBinder'(V0, V1, V2, V19)) end, V18))} end(E12, E13, E14)); {'Idris.Core.CompileExpr.CCon', E15, E16, E17, E18, E19} -> (fun (V20, V21, V22, V23, V24) -> {'Idris.Core.CompileExpr.CCon', V20, V21, V22, V23, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V25) -> ('un--shiftBinder'(V0, V1, V2, V25)) end, V24))} end(E15, E16, E17, E18, E19)); {'Idris.Core.CompileExpr.COp', E20, E21, E22, E23} -> (fun (V26, V27, V28, V29) -> {'Idris.Core.CompileExpr.COp', V26, V27, V28, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V30) -> ('un--shiftBinder'(V0, V1, V2, V30)) end, V29))} end(E20, E21, E22, E23)); {'Idris.Core.CompileExpr.CExtPrim', E24, E25, E26} -> (fun (V31, V32, V33) -> {'Idris.Core.CompileExpr.CExtPrim', V31, V32, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V34) -> ('un--shiftBinder'(V0, V1, V2, V34)) end, V33))} end(E24, E25, E26)); {'Idris.Core.CompileExpr.CForce', E27, E28, E29} -> (fun (V35, V36, V37) -> {'Idris.Core.CompileExpr.CForce', V35, V36, ('un--shiftBinder'(V0, V1, V2, V37))} end(E27, E28, E29)); {'Idris.Core.CompileExpr.CDelay', E30, E31, E32} -> (fun (V38, V39, V40) -> {'Idris.Core.CompileExpr.CDelay', V38, V39, ('un--shiftBinder'(V0, V1, V2, V40))} end(E30, E31, E32)); {'Idris.Core.CompileExpr.CConCase', E33, E34, E35, E36} -> (fun (V41, V42, V43, V44) -> {'Idris.Core.CompileExpr.CConCase', V41, ('un--shiftBinder'(V0, V1, V2, V42)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('un--shiftBinderConAlt'(V0, V1, V2, V45)) end, V43)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V46) -> ('un--shiftBinder'(V0, V1, V2, V46)) end, V44))} end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CConstCase', E37, E38, E39, E40} -> (fun (V47, V48, V49, V50) -> {'Idris.Core.CompileExpr.CConstCase', V47, ('un--shiftBinder'(V0, V1, V2, V48)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V51) -> ('un--shiftBinderConstAlt'(V0, V1, V2, V51)) end, V49)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V52) -> ('un--shiftBinder'(V0, V1, V2, V52)) end, V50))} end(E37, E38, E39, E40)); {'Idris.Core.CompileExpr.CPrimVal', E41, E42} -> (fun (V53, V54) -> {'Idris.Core.CompileExpr.CPrimVal', V53, V54} end(E41, E42)); {'Idris.Core.CompileExpr.CErased', E43} -> (fun (V55) -> {'Idris.Core.CompileExpr.CErased', V55} end(E43)); {'Idris.Core.CompileExpr.CCrash', E44, E45} -> (fun (V56, V57) -> {'Idris.Core.CompileExpr.CCrash', V56, V57} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--liftOutLambda'(V0, V1, V2) -> ('un--shiftBinder'([], V0, V1, V2)).
'un--getName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'put'(V0, ((V5 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', <<"clam"/utf8>>, V5}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--doCaseOfConstCase'(V0, V1, V2, V3, V4) -> {'Idris.Core.CompileExpr.CConstCase', V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('nested--8099-3502--in--un--updateAlt'(V4, V3, V2, V1, V0, V5)) end, V2)), {'Idris.Prelude.Types.Nothing'}}.
'un--doCaseOfCase'(V0, V1, V2, V3, V4) -> {'Idris.Core.CompileExpr.CConCase', V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('nested--8052-3462--in--un--updateAlt'(V4, V3, V2, V1, V0, V5)) end, V2)), {'Idris.Prelude.Types.Nothing'}}.
'un--caseOfCase'(V0) -> ('nested--8305-3685--in--un--go'(V0, (1 + (1 + (1 + (1 + (1 + 0))))), V0)).
'un--caseLamDef'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E34} -> (fun (V40) -> case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> case V59 of {'Idris.Prelude.Types.Just', E55} -> (fun (V61) -> begin (V62 = ('nested--7940-3364--in--un--doCaseLam'(V1, V0, V61, V2))), case V62 of {'Idris.Prelude.Types.Left', E56} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V64) -> ('Idris.Idris2.Core.Context':'un--setCompiled'(V0, V1, V64, V2)) end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--caseLamConstAlt'(V0, V1, V2) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkConstAlt', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('un--caseLam'(V0, V4, V8)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--caseLamConAlt'(V0, V1, V2) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkConAlt', V3, V4, V5, V6, V10}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('un--caseLam'(V0, V7, V11)) end, V2)) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--caseLam'(V0, V1, V2) -> case V1 of {'Idris.Core.CompileExpr.CConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case case ('un--allLams'(V5)) of 1 -> ('nested--7339-2812--in--un--defLam'(V6, V5, V4, V3, V0, V6)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V7 = ('un--getName'(V0, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case ('un--tryLiftOut'(V9, V5)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V10) -> case ('un--tryLiftDef'(V9, V6)) of {'Idris.Prelude.Types.Just', E7} -> (fun (V11) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> fun (V13) -> ('un--caseLamConAlt'(V0, V12, V13)) end end, V10, [], V2))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V22 = case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V18) -> case V18 of {'Idris.Prelude.Types.Left', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V20}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V21) -> ('un--caseLam'(V0, V17, V21)) end, V2)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V22 of {'Idris.Prelude.Types.Left', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CLam', V3, V9, {'Idris.Core.CompileExpr.CConCase', V3, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V4)), V16, V24}}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen caseLam 2"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen caseLam 1"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V25 = ('un--caseLam'(V0, V4, V2))), case V25 of {'Idris.Prelude.Types.Left', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V27) -> begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V28) -> fun (V29) -> ('un--caseLamConAlt'(V0, V28, V29)) end end, V5, [], V2))), case V30 of {'Idris.Prelude.Types.Left', E17} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V32) -> begin (V38 = case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E19} -> (fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E20} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V36}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V37) -> ('un--caseLam'(V0, V33, V37)) end, V2)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V38 of {'Idris.Prelude.Types.Left', E22} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CConCase', V3, V27, V32, V40}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); {'Idris.Core.CompileExpr.CConstCase', E24, E25, E26, E27} -> (fun (V41, V42, V43, V44) -> case case ('un--allLamsConst'(V43)) of 1 -> ('nested--7339-3018--in--un--defLam'(V44, V43, V42, V41, V0, V44)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V45 = ('un--getName'(V0, V2))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> case ('un--tryLiftOutConst'(V47, V43)) of {'Idris.Prelude.Types.Just', E30} -> (fun (V48) -> case ('un--tryLiftDef'(V47, V44)) of {'Idris.Prelude.Types.Just', E31} -> (fun (V49) -> begin (V52 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V50) -> fun (V51) -> ('un--caseLamConstAlt'(V0, V50, V51)) end end, V48, [], V2))), case V52 of {'Idris.Prelude.Types.Left', E32} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V54) -> begin (V60 = case V49 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E34} -> (fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V56) -> case V56 of {'Idris.Prelude.Types.Left', E35} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V58}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V59) -> ('un--caseLam'(V0, V55, V59)) end, V2)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V60 of {'Idris.Prelude.Types.Left', E37} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CLam', V41, V47, {'Idris.Core.CompileExpr.CConstCase', V41, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V42)), V54, V62}}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen caseLam 2"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen caseLam 1"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V63 = ('un--caseLam'(V0, V42, V2))), case V63 of {'Idris.Prelude.Types.Left', E39} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V65) -> begin (V68 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V66) -> fun (V67) -> ('un--caseLamConstAlt'(V0, V66, V67)) end end, V43, [], V2))), case V68 of {'Idris.Prelude.Types.Left', E41} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V70) -> begin (V76 = case V44 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E43} -> (fun (V71) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V72) -> case V72 of {'Idris.Prelude.Types.Left', E44} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V74}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V75) -> ('un--caseLam'(V0, V71, V75)) end, V2)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V76 of {'Idris.Prelude.Types.Left', E46} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CConstCase', V41, V65, V70, V78}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27)); {'Idris.Core.CompileExpr.CLam', E48, E49, E50} -> (fun (V79, V80, V81) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V82) -> case V82 of {'Idris.Prelude.Types.Left', E51} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V84) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CLam', V79, V80, V84}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V85) -> ('un--caseLam'(V0, V81, V85)) end, V2)) end(E48, E49, E50)); {'Idris.Core.CompileExpr.CLet', E53, E54, E55, E56, E57} -> (fun (V86, V87, V88, V89, V90) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V92) -> case V92 of {'Idris.Prelude.Types.Left', E58} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V94) -> {'Idris.Prelude.Types.Right', fun (V95) -> {'Idris.Core.CompileExpr.CLet', V86, V87, V88, V94, V95} end} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V96) -> ('un--caseLam'(V0, V89, V96)) end, V91)) end, fun (V97) -> ('un--caseLam'(V0, V90, V97)) end, V2)) end(E53, E54, E55, E56, E57)); {'Idris.Core.CompileExpr.CApp', E60, E61, E62} -> (fun (V98, V99, V100) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V101) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V102) -> case V102 of {'Idris.Prelude.Types.Left', E63} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V104) -> {'Idris.Prelude.Types.Right', fun (V105) -> {'Idris.Core.CompileExpr.CApp', V98, V104, V105} end} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V106) -> ('un--caseLam'(V0, V99, V106)) end, V101)) end, fun (V107) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V108) -> fun (V109) -> ('un--caseLam'(V0, V108, V109)) end end, V100, [], V107)) end, V2)) end(E60, E61, E62)); {'Idris.Core.CompileExpr.CCon', E65, E66, E67, E68, E69} -> (fun (V110, V111, V112, V113, V114) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V115) -> case V115 of {'Idris.Prelude.Types.Left', E70} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V117) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CCon', V110, V111, V112, V113, V117}} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V118) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V119) -> fun (V120) -> ('un--caseLam'(V0, V119, V120)) end end, V114, [], V118)) end, V2)) end(E65, E66, E67, E68, E69)); {'Idris.Core.CompileExpr.COp', E72, E73, E74, E75} -> (fun (V121, V122, V123, V124) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V125) -> case V125 of {'Idris.Prelude.Types.Left', E76} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V127) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.COp', V121, V122, V123, V127}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V128) -> ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V129) -> fun (V130) -> ('un--caseLam'(V0, V129, V130)) end end, V124, V128)) end, V2)) end(E72, E73, E74, E75)); {'Idris.Core.CompileExpr.CExtPrim', E78, E79, E80} -> (fun (V131, V132, V133) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V134) -> case V134 of {'Idris.Prelude.Types.Left', E81} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V136) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CExtPrim', V131, V132, V136}} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V137) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V138) -> fun (V139) -> ('un--caseLam'(V0, V138, V139)) end end, V133, [], V137)) end, V2)) end(E78, E79, E80)); {'Idris.Core.CompileExpr.CForce', E83, E84, E85} -> (fun (V140, V141, V142) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V143) -> case V143 of {'Idris.Prelude.Types.Left', E86} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V145) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CForce', V140, V141, V145}} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V146) -> ('un--caseLam'(V0, V142, V146)) end, V2)) end(E83, E84, E85)); {'Idris.Core.CompileExpr.CDelay', E88, E89, E90} -> (fun (V147, V148, V149) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V150) -> case V150 of {'Idris.Prelude.Types.Left', E91} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CDelay', V147, V148, V152}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V153) -> ('un--caseLam'(V0, V149, V153)) end, V2)) end(E88, E89, E90)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'un--allLamsConst'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Core.CompileExpr.MkConstAlt', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V5, V6, V7) -> ('un--allLamsConst'(V2)) end(E4, E5, E6)); _ -> 0 end end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--allLams'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Core.CompileExpr.MkConAlt', E2, E3, E4, E5, E6} -> (fun (V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.CompileExpr.CLam', E7, E8, E9} -> (fun (V8, V9, V10) -> ('un--allLams'(V2)) end(E7, E8, E9)); _ -> 0 end end(E2, E3, E4, E5, E6)); _ -> 0 end end(E0, E1)); _ -> 0 end.
