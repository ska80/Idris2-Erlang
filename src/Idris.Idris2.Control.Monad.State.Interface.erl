-module('Idris.Idris2.Control.Monad.State.Interface').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--state-1983'/6,
  'case--{Default implementation of state:0}-1387'/4,
  'dn--un--state_MonadState_$stateType_((StateT $stateType) $m)'/3,
  'dn--un--state_MonadState_$s_(MaybeT $m)'/2,
  'dn--un--state_MonadState_$s_((WriterT $r) $m)'/3,
  'dn--un--state_MonadState_$s_((ReaderT $r) $m)'/3,
  'dn--un--state_MonadState_$s_((EitherT $e) $m)'/2,
  'dn--un--state_MonadState_$s_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--put_MonadState_$stateType_((StateT $stateType) $m)'/3,
  'dn--un--put_MonadState_$s_(MaybeT $m)'/2,
  'dn--un--put_MonadState_$s_((WriterT $r) $m)'/3,
  'dn--un--put_MonadState_$s_((ReaderT $r) $m)'/3,
  'dn--un--put_MonadState_$s_((EitherT $e) $m)'/2,
  'dn--un--put_MonadState_$s_((((RWST $r) $w) $s) $m)'/5,
  'dn--un--get_MonadState_$stateType_((StateT $stateType) $m)'/2,
  'dn--un--get_MonadState_$s_(MaybeT $m)'/1,
  'dn--un--get_MonadState_$s_((WriterT $r) $m)'/2,
  'dn--un--get_MonadState_$s_((ReaderT $r) $m)'/2,
  'dn--un--get_MonadState_$s_((EitherT $e) $m)'/1,
  'dn--un--get_MonadState_$s_((((RWST $r) $w) $s) $m)'/4,
  'dn--un--__MonadState_(Monad m)'/1,
  'dn--un--__Impl_MonadState_$stateType_((StateT $stateType) $m)'/1,
  'dn--un--__Impl_MonadState_$s_(MaybeT $m)'/1,
  'dn--un--__Impl_MonadState_$s_((WriterT $r) $m)'/1,
  'dn--un--__Impl_MonadState_$s_((ReaderT $r) $m)'/1,
  'dn--un--__Impl_MonadState_$s_((EitherT $e) $m)'/1,
  'dn--un--__Impl_MonadState_$s_((((RWST $r) $w) $s) $m)'/1,
  'un--state'/2,
  'un--put'/2,
  'un--modify'/2,
  'un--gets'/2,
  'un--get'/1
]).
'case--state-1983'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V11, V12, V13) -> ((V12('erased'))({'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V6, V4}})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--{Default implementation of state:0}-1387'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V1 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E2, E3, E4, E5} -> (fun (V6, V7, V8, V9) -> V6 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E6, E7, E8, E9} -> (fun (V10, V11, V12, V13) -> (V12(V4)) end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> case V1 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V14, V15, V16, V17) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkApplicative', E17, E18, E19} -> (fun (V21, V22, V23) -> ((V22('erased'))(V5)) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--state_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V6, V7, V8) -> ((V7('erased'))((V1(V2)))) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--state_MonadState_$s_(MaybeT $m)'(V0, V1) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ((V9('erased'))(V1)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--state_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V10, V11, V12) -> ((((V10('erased'))('erased'))(fun (V17) -> {'Idris.Builtin.MkPair', V17, V2} end))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V13, V14, V15, V16) -> ((V16('erased'))(V1)) end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--state_MonadState_$s_((ReaderT $r) $m)'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> ((V10('erased'))(V1)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--state_MonadState_$s_((EitherT $e) $m)'(V0, V1) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ((V9('erased'))(V1)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--state_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> case (V1(V3)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> ((V11('erased'))({'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V5, V4}})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--put_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V6, V7, V8) -> ((V7('erased'))({'Idris.Builtin.MkPair', V1, 0})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--put_MonadState_$s_(MaybeT $m)'(V0, V1) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> (V8(V1)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--put_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V10, V11, V12) -> ((((V10('erased'))('erased'))(fun (V17) -> {'Idris.Builtin.MkPair', V17, V2} end))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V13, V14, V15, V16) -> (V15(V1)) end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--put_MonadState_$s_((ReaderT $r) $m)'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> (V9(V1)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)).
'dn--un--put_MonadState_$s_((EitherT $e) $m)'(V0, V1) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> (V8(V1)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--put_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V8, V9, V10) -> ((V9('erased'))({'Idris.Builtin.MkPair', 0, {'Idris.Builtin.MkPair', V1, V4}})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--get_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V2, V3, V4) -> case V2 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V5, V6, V7) -> ((V6('erased'))({'Idris.Builtin.MkPair', V1, V1})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--get_MonadState_$s_(MaybeT $m)'(V0) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V6 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--get_MonadState_$s_((WriterT $r) $m)'(V0, V1) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V9, V10, V11) -> ((((V9('erased'))('erased'))(fun (V16) -> {'Idris.Builtin.MkPair', V16, V1} end))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V12, V13, V14, V15) -> V13 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--get_MonadState_$s_((ReaderT $r) $m)'(V0, V1) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> V7 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1)).
'dn--un--get_MonadState_$s_((EitherT $e) $m)'(V0) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V6 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--get_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V7, V8, V9) -> ((V8('erased'))({'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V2, V3}})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__MonadState_(Monad m)'(V0) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_MonadState_$stateType_((StateT $stateType) $m)'(V0) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'(V0, V13, V14)) end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'(V0, V17, V18, V19)) end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'(V0, V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'(V0, V26, V27)) end end end}, fun (V28) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E6, E7, E8} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E9, E10, E11} -> (fun (V32, V33, V34) -> ((V33('erased'))({'Idris.Builtin.MkPair', V28, V28})) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V35) -> fun (V36) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V37, V38, V39) -> case V37 of {'Idris.Prelude.Interfaces.MkApplicative', E15, E16, E17} -> (fun (V40, V41, V42) -> ((V41('erased'))({'Idris.Builtin.MkPair', V35, 0})) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V43) -> fun (V44) -> fun (V45) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E18, E19, E20} -> (fun (V46, V47, V48) -> case V46 of {'Idris.Prelude.Interfaces.MkApplicative', E21, E22, E23} -> (fun (V49, V50, V51) -> ((V50('erased'))((V44(V45)))) end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'dn--un--__Impl_MonadState_$s_(MaybeT $m)'(V0) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--map_Functor_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V12, V13, V14) -> V12 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--pure_Applicative_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V17, V18, V19, V20) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V21, V22, V23) -> V21 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--<*>_Applicative_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E17, E18, E19, E20} -> (fun (V28, V29, V30, V31) -> case V28 of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V32, V33, V34) -> V32 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V27)) end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un-->>=_Monad_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E24, E25, E26, E27} -> (fun (V39, V40, V41, V42) -> V39 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V37, V38)) end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--join_Monad_(MaybeT $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E28, E29, E30, E31} -> (fun (V45, V46, V47, V48) -> V45 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44)) end end}, ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E32, E33, E34, E35} -> (fun (V49, V50, V51, V52) -> V49 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E36, E37, E38, E39} -> (fun (V53, V54, V55, V56) -> V54 end(E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V57) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E40, E41, E42, E43} -> (fun (V58, V59, V60, V61) -> V58 end(E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E44, E45, E46, E47} -> (fun (V62, V63, V64, V65) -> (V64(V57)) end(E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E48, E49, E50, E51} -> (fun (V68, V69, V70, V71) -> V68 end(E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E52, E53, E54, E55} -> (fun (V72, V73, V74, V75) -> ((V75('erased'))(V67)) end(E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end}.
'dn--un--__Impl_MonadState_$s_((WriterT $r) $m)'(V0) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V13, V14, V15) -> V13 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V17, V18) -> {'Idris.Builtin.MkPair', (V3(V17)), V18} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V4(V5)))) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E12, E13, E14, E15} -> (fun (V22, V23, V24, V25) -> case V22 of {'Idris.Prelude.Interfaces.MkMonad', E16, E17, E18} -> (fun (V26, V27, V28) -> case V26 of {'Idris.Prelude.Interfaces.MkApplicative', E19, E20, E21} -> (fun (V29, V30, V31) -> ((V30('erased'))({'Idris.Builtin.MkPair', V20, V21})) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E22, E23, E24, E25} -> (fun (V37, V38, V39, V40) -> case V37 of {'Idris.Prelude.Interfaces.MkMonad', E26, E27, E28} -> (fun (V41, V42, V43) -> ((((V42('erased'))('erased'))((V34(V36))))(fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V45, V46) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E31, E32, E33, E34} -> (fun (V47, V48, V49, V50) -> case V47 of {'Idris.Prelude.Interfaces.MkMonad', E35, E36, E37} -> (fun (V51, V52, V53) -> ((((V52('erased'))('erased'))((V35(V46))))(fun (V54) -> case V54 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V55, V56) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E40, E41, E42, E43} -> (fun (V57, V58, V59, V60) -> case V57 of {'Idris.Prelude.Interfaces.MkMonad', E44, E45, E46} -> (fun (V61, V62, V63) -> case V61 of {'Idris.Prelude.Interfaces.MkApplicative', E47, E48, E49} -> (fun (V64, V65, V66) -> ((V65('erased'))({'Idris.Builtin.MkPair', (V45(V55)), V56})) end(E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E50, E51, E52, E53} -> (fun (V72, V73, V74, V75) -> case V72 of {'Idris.Prelude.Interfaces.MkMonad', E54, E55, E56} -> (fun (V76, V77, V78) -> ((((V77('erased'))('erased'))((V69(V71))))(fun (V79) -> case V79 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V80, V81) -> ((V70(V80))(V81)) end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E59, E60, E61, E62} -> (fun (V85, V86, V87, V88) -> case V85 of {'Idris.Prelude.Interfaces.MkMonad', E63, E64, E65} -> (fun (V89, V90, V91) -> ((((V90('erased'))('erased'))((V83(V84))))(fun (V92) -> case V92 of {'Idris.Builtin.MkPair', E66, E67} -> (fun (V93, V94) -> (V93(V94)) end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}, fun (V95) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E68, E69, E70, E71} -> (fun (V96, V97, V98, V99) -> case V96 of {'Idris.Prelude.Interfaces.MkMonad', E72, E73, E74} -> (fun (V100, V101, V102) -> case V100 of {'Idris.Prelude.Interfaces.MkApplicative', E75, E76, E77} -> (fun (V103, V104, V105) -> ((((V103('erased'))('erased'))(fun (V110) -> {'Idris.Builtin.MkPair', V110, V95} end))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E78, E79, E80, E81} -> (fun (V106, V107, V108, V109) -> V107 end(E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V111) -> fun (V112) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E82, E83, E84, E85} -> (fun (V113, V114, V115, V116) -> case V113 of {'Idris.Prelude.Interfaces.MkMonad', E86, E87, E88} -> (fun (V117, V118, V119) -> case V117 of {'Idris.Prelude.Interfaces.MkApplicative', E89, E90, E91} -> (fun (V120, V121, V122) -> ((((V120('erased'))('erased'))(fun (V127) -> {'Idris.Builtin.MkPair', V127, V112} end))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E92, E93, E94, E95} -> (fun (V123, V124, V125, V126) -> (V125(V111)) end(E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V128) -> fun (V129) -> fun (V130) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E96, E97, E98, E99} -> (fun (V131, V132, V133, V134) -> case V131 of {'Idris.Prelude.Interfaces.MkMonad', E100, E101, E102} -> (fun (V135, V136, V137) -> case V135 of {'Idris.Prelude.Interfaces.MkApplicative', E103, E104, E105} -> (fun (V138, V139, V140) -> ((((V138('erased'))('erased'))(fun (V145) -> {'Idris.Builtin.MkPair', V145, V130} end))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E106, E107, E108, E109} -> (fun (V141, V142, V143, V144) -> ((V144('erased'))(V129)) end(E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'dn--un--__Impl_MonadState_$s_((ReaderT $r) $m)'(V0) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V13, V14, V15) -> V13 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--pure_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V19, V20, V21, V22) -> case V19 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V23, V24, V25) -> V23 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V17, V18)) end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E17, E18, E19, E20} -> (fun (V31, V32, V33, V34) -> case V31 of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V35, V36, V37) -> V35 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V28, V29, V30)) end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un-->>=_Monad_((ReaderT $stateType) $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E24, E25, E26, E27} -> (fun (V43, V44, V45, V46) -> V43 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V40, V41, V42)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--join_Monad_((ReaderT $stateType) $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E28, E29, E30, E31} -> (fun (V50, V51, V52, V53) -> V50 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V48, V49)) end end end}, fun (V54) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E32, E33, E34, E35} -> (fun (V55, V56, V57, V58) -> V55 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E36, E37, E38, E39} -> (fun (V59, V60, V61, V62) -> V60 end(E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V54)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E40, E41, E42, E43} -> (fun (V65, V66, V67, V68) -> V65 end(E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E44, E45, E46, E47} -> (fun (V69, V70, V71, V72) -> (V71(V63)) end(E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V64)) end end, fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E48, E49, E50, E51} -> (fun (V76, V77, V78, V79) -> V76 end(E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E52, E53, E54, E55} -> (fun (V80, V81, V82, V83) -> ((V83('erased'))(V74)) end(E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V75)) end end end}.
'dn--un--__Impl_MonadState_$s_((EitherT $e) $m)'(V0) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V12, V13, V14) -> V12 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V17, V18, V19, V20) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V21, V22, V23) -> V21 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E17, E18, E19, E20} -> (fun (V28, V29, V30, V31) -> case V28 of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V32, V33, V34) -> V32 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V27)) end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E24, E25, E26, E27} -> (fun (V39, V40, V41, V42) -> V39 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V37, V38)) end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--join_Monad_((EitherT $e) $m)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E28, E29, E30, E31} -> (fun (V45, V46, V47, V48) -> V45 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44)) end end}, ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E32, E33, E34, E35} -> (fun (V49, V50, V51, V52) -> V49 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E36, E37, E38, E39} -> (fun (V53, V54, V55, V56) -> V54 end(E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V57) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E40, E41, E42, E43} -> (fun (V58, V59, V60, V61) -> V58 end(E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E44, E45, E46, E47} -> (fun (V62, V63, V64, V65) -> (V64(V57)) end(E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E48, E49, E50, E51} -> (fun (V68, V69, V70, V71) -> V68 end(E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E52, E53, E54, E55} -> (fun (V72, V73, V74, V75) -> ((V75('erased'))(V67)) end(E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end}.
'dn--un--__Impl_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V11, V12, V13) -> V11 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V17, V18) -> {'Idris.Builtin.MkPair', (V3(V15)), {'Idris.Builtin.MkPair', V17, V18}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (((V4(V5))(V6))(V7)))) end end end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V24, V25, V26) -> case V24 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V27, V28, V29) -> ((V28('erased'))({'Idris.Builtin.MkPair', V20, {'Idris.Builtin.MkPair', V22, V23}})) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E16, E17, E18} -> (fun (V37, V38, V39) -> ((((V38('erased'))('erased'))((((V32(V34))(V35))(V36))))(fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E19, E20} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V43, V44) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E23, E24, E25} -> (fun (V45, V46, V47) -> ((((V46('erased'))('erased'))((((V33(V34))(V43))(V44))))(fun (V48) -> case V48 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V49, V50) -> case V50 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V51, V52) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E30, E31, E32} -> (fun (V53, V54, V55) -> case V53 of {'Idris.Prelude.Interfaces.MkApplicative', E33, E34, E35} -> (fun (V56, V57, V58) -> ((V57('erased'))({'Idris.Builtin.MkPair', (V41(V49)), {'Idris.Builtin.MkPair', V51, V52}})) end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end}, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E36, E37, E38} -> (fun (V66, V67, V68) -> ((((V67('erased'))('erased'))((((V61(V63))(V64))(V65))))(fun (V69) -> case V69 of {'Idris.Builtin.MkPair', E39, E40} -> (fun (V70, V71) -> case V71 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V72, V73) -> ((((V62(V70))(V63))(V72))(V73)) end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E43, E44, E45} -> (fun (V79, V80, V81) -> ((((V80('erased'))('erased'))((((V75(V76))(V77))(V78))))(fun (V82) -> case V82 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V83, V84) -> case V84 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V85, V86) -> (((V83(V76))(V85))(V86)) end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V87) -> fun (V88) -> fun (V89) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E50, E51, E52} -> (fun (V90, V91, V92) -> case V90 of {'Idris.Prelude.Interfaces.MkApplicative', E53, E54, E55} -> (fun (V93, V94, V95) -> ((V94('erased'))({'Idris.Builtin.MkPair', V88, {'Idris.Builtin.MkPair', V88, V89}})) end(E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E56, E57, E58} -> (fun (V100, V101, V102) -> case V100 of {'Idris.Prelude.Interfaces.MkApplicative', E59, E60, E61} -> (fun (V103, V104, V105) -> ((V104('erased'))({'Idris.Builtin.MkPair', 0, {'Idris.Builtin.MkPair', V96, V99}})) end(E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> case (V107(V109)) of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V111, V112) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E64, E65, E66} -> (fun (V113, V114, V115) -> case V113 of {'Idris.Prelude.Interfaces.MkApplicative', E67, E68, E69} -> (fun (V116, V117, V118) -> ((V117('erased'))({'Idris.Builtin.MkPair', V112, {'Idris.Builtin.MkPair', V111, V110}})) end(E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}.
'un--state'(V0, V1) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ((V5('erased'))(V1)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--put'(V0, V1) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> (V4(V1)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--modify'(V0, V1) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E7, E8, E9, E10} -> (fun (V14, V15, V16, V17) -> V15 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E11, E12, E13, E14} -> (fun (V10, V11, V12, V13) -> (V12((V1(V9)))) end(E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--gets'(V0, V1) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E7, E8, E9, E10} -> (fun (V20, V21, V22, V23) -> V21 end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V9) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E11, E12, E13, E14} -> (fun (V10, V11, V12, V13) -> case V10 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V14, V15, V16) -> case V14 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V17, V18, V19) -> ((V18('erased'))((V1(V9)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--get'(V0) -> case V0 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
