-module('Idris.Idris2.Parser.Lexer.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--spacesOrNewlines'/0,
  'un--namespacedIdent'/0,
  'un--namespaceIdent'/0,
  'un--isIdentTrailing'/2,
  'un--isIdentStart'/2,
  'un--isIdentNormal'/1,
  'un--isIdent'/2,
  'un--identNormal'/0,
  'un--identAllowDashes'/0,
  'un--ident'/1,
  'un--comment'/0
]).
'un--spacesOrNewlines'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--some'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'(('Idris.Idris2.Libraries.Text.Lexer':'un--space'()), ('Idris.Idris2.Libraries.Text.Lexer':'un--newline'()))))).
'un--namespacedIdent'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('un--namespaceIdent'()), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--opt'({'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)), fun () -> ('un--identNormal'()) end})) end}.
'un--namespaceIdent'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V0) -> ('un--isIdentStart'(1, V0)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V1) -> ('un--isIdentTrailing'(1, V1)) end)))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'({'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)), fun () -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V2) -> ('un--isIdentStart'(1, V2)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V3) -> ('un--isIdentTrailing'(1, V3)) end)))) end} end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--expect'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)))) end})) end}.
'un--isIdentTrailing'(V0, V1) -> case V0 of 0 -> case V1 of $- -> 1; _ -> case V1 of $\x{27} -> 1; $_ -> 1; _ -> case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(160)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V1 of $\x{27} -> 1; $_ -> 1; _ -> case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(160)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--isIdentStart'(V0, V1) -> case V1 of $_ -> 1; _ -> case V0 of 1 -> case ('Idris.Idris2.Prelude.Types':'un--isUpper'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(160)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> case ('Idris.Idris2.Prelude.Types':'un--isAlpha'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(160)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--isIdentNormal'(V0) -> case ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)) of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case ('un--isIdentStart'(2, V1)) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, fun (V29) -> ('un--isIdentTrailing'(2, V29)) end, V2)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isIdent'(V0, V1) -> case ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)) of [] -> 0; [E0 | E1] -> (fun (V2, V3) -> case ('un--isIdentStart'(V0, V2)) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, fun (V30) -> ('un--isIdentTrailing'(V0, V30)) end, V3)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--identNormal'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V0) -> ('un--isIdentStart'(2, V0)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V1) -> ('un--isIdentTrailing'(2, V1)) end)))) end}.
'un--identAllowDashes'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V0) -> ('un--isIdentStart'(0, V0)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V1) -> ('un--isIdentTrailing'(0, V1)) end)))) end}.
'un--ident'(V0) -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V1) -> ('un--isIdentStart'(V0, V1)) end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V2) -> ('un--isIdentTrailing'(V0, V2)) end)))) end}.
'un--comment'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($-)))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--reject'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($})))) end}, fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--many'(('Idris.Idris2.Libraries.Text.Lexer':'un--isNot'($\x{a})))) end}.
