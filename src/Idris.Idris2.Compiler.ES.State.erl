-module('Idris.Idris2.Compiler.ES.State').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--addToPreamble-5642'/5,
  'un--reset'/2,
  'un--registerRef'/3,
  'un--registerLocal'/3,
  'un--projections'/3,
  'un--nextRef'/2,
  'un--nextLocal'/2,
  'un--keepRefName'/2,
  'un--keepLocalName'/2,
  'un--init'/4,
  'un--getOrRegisterRef'/3,
  'un--getOrRegisterLocal'/3,
  'un--errorConcat'/2,
  'un--error'/2,
  'un--addToPreamble'/4,
  'un--addRef'/4,
  'un--addLocal'/4
]).
'case--addToPreamble-5642'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> begin (V15 = ('erlang':'put'(V2, case V3 of {'Idris.Compiler.ES.State.MkESSt', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.Compiler.ES.State.MkESSt', V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V1, V0, V13)), V14} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V15} end end end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V16) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V16, V0)) of 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> fun (V18) -> ('un--errorConcat'([<<"two incompatible definitions for "/utf8>> | [V1 | [<<"<|"/utf8>> | [V16 | [<<"|> <|"/utf8>> | [V0 | [<<"|>"/utf8>> | []]]]]]]], V18)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--reset'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V33 = ('erlang':'put'(V0, case V5 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.Compiler.ES.State.MkESSt', V6, V7, V8, 0, V10, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V18)) end end}, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V31, V32)) end end})), V12, V13, V14} end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--registerRef'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case ('un--keepRefName'(V1, case V6 of {'Idris.Compiler.ES.State.MkESSt', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15) -> V7 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V16 = {'Idris.Compiler.ES.Ast.VName', V1}), begin (V17 = ('un--addRef'(V0, V1, V16, V2))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Right', V16} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> begin (V20 = ('un--nextRef'(V0, V2))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('un--addRef'(V0, V1, V22, V2))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V22} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--registerLocal'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case ('un--keepLocalName'(V1, case V6 of {'Idris.Compiler.ES.State.MkESSt', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15) -> V7 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V16 = {'Idris.Compiler.ES.Ast.VName', V1}), begin (V17 = ('un--addLocal'(V0, V1, {'Idris.Compiler.ES.Ast.MVar', V16}, V2))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Right', V16} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> begin (V20 = ('un--nextLocal'(V0, V2))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('un--addLocal'(V0, V1, {'Idris.Compiler.ES.Ast.MVar', V22}, V2))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V22} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--projections'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V2)))), V2))), fun (V4) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V5) -> fun (V6) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('un--addLocal'(V0, V8, {'Idris.Compiler.ES.Ast.MProjection', V7, V1}, V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V3, V4)) end end.
'un--nextRef'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V16 = begin (V15 = ('erlang':'put'(V0, case V5 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.Compiler.ES.State.MkESSt', V6, V7, V8, V9, ((V10 + 1) rem 9223372036854775808), V11, V12, V13, V14} end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Ast.VRef', case V5 of {'Idris.Compiler.ES.State.MkESSt', E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V23 end(E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nextLocal'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V16 = begin (V15 = ('erlang':'put'(V0, case V5 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.Compiler.ES.State.MkESSt', V6, V7, V8, ((V9 + 1) rem 9223372036854775808), V10, V11, V12, V13, V14} end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Ast.VLoc', case V5 of {'Idris.Compiler.ES.State.MkESSt', E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V22 end(E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--keepRefName'(V0, V1) -> case V1 of 2 -> 0; _ -> 1 end.
'un--keepLocalName'(V0, V1) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V2) -> case V1 of 0 -> 1; _ -> 0 end end(E0)); _ -> 0 end.
'un--init'(V0, V1, V2, V3) -> {'Idris.Compiler.ES.State.MkESSt', V0, V1, V2, 0, 0, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V20, V21)) end end})), ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V24, V25)) end end}, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V38, V39)) end end})), ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V42, V43)) end end}, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V56, V57)) end end})), V3}.
'un--getOrRegisterRef'(V0, V1, V2) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V1, case V5 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V15) -> begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end end, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--registerRef'(V0, V1, V2)) end()); {'Idris.Prelude.Types.Just', E13} -> (fun (V20) -> {'Idris.Prelude.Types.Right', V20} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getOrRegisterLocal'(V0, V1, V2) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V1, case V5 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V11 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V15) -> begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end end, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Ast.MVar', V22}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V23) -> ('un--registerLocal'(V0, V1, V23)) end, V2)) end()); {'Idris.Prelude.Types.Just', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Right', V24} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--errorConcat'(V0, V1) -> ('un--error'(('Idris.Idris2.Prelude.Types':'un--fastConcat'(V0)), V1)).
'un--error'(V0, V1) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', V0}, V1)).
'un--addToPreamble'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--addToPreamble-5642'(V2, V1, V0, V7, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V1, case V7 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V15 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addRef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V17 = ('erlang':'put'(V0, case V7 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Compiler.ES.State.MkESSt', V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V1, V2, V14)), V15, V16} end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V17} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLocal'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V17 = ('erlang':'put'(V0, case V7 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Compiler.ES.State.MkESSt', V8, V9, V10, V11, V12, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V1, V2, V13)), V14, V15, V16} end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V17} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
