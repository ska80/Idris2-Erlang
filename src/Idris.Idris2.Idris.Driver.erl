-module('Idris.Idris2.Idris.Driver').
-compile('no_auto_import').
-export([
  'case--mainWithCodegens-4851'/3,
  'case--case block in case block in case block in case block in case block in case block in stMain-4226'/25,
  'nested--14868-3381--in--un--renderError'/7,
  'un--updateREPLOpts'/2,
  'un--updateEnv'/3,
  'un--tryYaffle'/1,
  'un--tryTTM'/1,
  'un--stMain'/3,
  'un--showInfo'/3,
  'un--quitOpts'/1,
  'un--mainWithCodegens'/2,
  'un--ignoreMissingIpkg'/1,
  'un--getPrivDir'/1,
  'un--findInput'/1,
  'un--checkVerbose'/1,
  'un--banner'/0
]).
'case--mainWithCodegens-4851'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = (('un--quitOpts'(V3))(V4))), (('Idris.Idris2.Prelude.Interfaces':'un--when'({'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, V5, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> ('Idris.Idris2.Libraries.Utils.Term':'un--setupTerm'(V46)) end, fun () -> fun (V47) -> ('Idris.Idris2.Core.Core':'un--coreRun'(fun (V48) -> ('un--stMain'(V1, V3, V48)) end, fun (V49) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V77, V78, V79)) end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> V81 end end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V85(V87))), begin (V89 = (V86(V87))), (V88(V89)) end end end end end end end}, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V92(V94))), ((V93(V95))(V94)) end end end end end end, fun (V96) -> fun (V97) -> fun (V98) -> begin (V99 = (V97(V98))), (V99(V98)) end end end end}, fun (V100) -> fun (V101) -> V101 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Uncaught error: "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V49)))))), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> V108 end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), begin (V116 = (V113(V114))), (V115(V116)) end end end end end end end}, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), ((V120(V122))(V121)) end end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V124(V125))), (V126(V125)) end end end end}, fun (V127) -> fun (V128) -> V128 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end)) end, fun (V129) -> fun (V130) -> 0 end end, V47)) end end)) end))(V4)) end end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V131) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V134, V135, V136)) end end end end end, fun (V137) -> fun (V138) -> fun (V139) -> V138 end end end, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> begin (V145 = (V142(V144))), begin (V146 = (V143(V144))), (V145(V146)) end end end end end end end}, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> begin (V152 = (V149(V151))), ((V150(V152))(V151)) end end end end end end, fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V154(V155))), (V156(V155)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> V163 end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> begin (V170 = (V167(V169))), begin (V171 = (V168(V169))), (V170(V171)) end end end end end end end}, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), ((V175(V177))(V176)) end end end end end end, fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V179(V180))), (V181(V180)) end end end end}, fun (V182) -> fun (V183) -> V183 end end}, V131)), fun () -> ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V186, V187, V188)) end end end end end, fun (V189) -> fun (V190) -> fun (V191) -> V190 end end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> begin (V197 = (V194(V196))), begin (V198 = (V195(V196))), (V197(V198)) end end end end end end end}, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> begin (V204 = (V201(V203))), ((V202(V204))(V203)) end end end end end end, fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V206(V207))), (V208(V207)) end end end end}, fun (V209) -> fun (V210) -> V210 end end}, ('Idris.Idris2.Idris.CommandLine':'un--usage'()))) end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in stMain-4226'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> begin (V28 = begin (V27 = ('Idris.Idris2.Idris.IDEMode.REPL':'un--initIDESocketFile'(V25, V26, V24))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> begin (V60 = begin (V59 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, V31))(V24))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E5} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V62) -> begin (V90 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> V69 end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), begin (V77 = (V74(V75))), (V76(V77)) end end end end end end end}, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), ((V81(V83))(V82)) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V85(V86))), (V87(V86)) end end end end}, fun (V88) -> fun (V89) -> V89 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V24))), {'Idris.Prelude.Types.Right', V90} end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Right', E7} -> (fun (V91) -> begin (V92 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V12, {'Idris.Idris.REPL.Opts.IDEMode', 0, V91, V91}, V24))), case V92 of {'Idris.Prelude.Types.Left', E8} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V94) -> ('Idris.Idris2.Idris.IDEMode.REPL':'un--replIDE'(V6, V16, V7, V18, V12, V24)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14868-3381--in--un--renderError'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('Idris.Idris2.Idris.Error':'un--perror'(V2, V3, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Idris.Pretty':'un--render'(V4, V9, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.UserError', V12}, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateREPLOpts'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"EDITOR"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E4} -> (fun (V37) -> begin (V54 = ('erlang':'put'(V0, case V5 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Idris.REPL.Opts.MkREPLOpts', V38, V39, V40, V41, V42, V37, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateEnv'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = begin (V34 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> V13 end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> begin (V20 = (V17(V19))), begin (V21 = (V18(V19))), (V20(V21)) end end end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), ((V25(V27))(V26)) end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V29(V30))), (V31(V30)) end end end end}, fun (V32) -> fun (V33) -> V33 end end}, <<"IDRIS2_PREFIX"/utf8>>, 0))(V2))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> begin (V39 = case V37 of {'Idris.Prelude.Types.Just', E4} -> (fun (V38) -> ('Idris.Idris2.Core.Context':'un--setPrefix'(V0, V38, V2)) end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V39 of {'Idris.Prelude.Types.Left', E5} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V41) -> begin (V70 = begin (V69 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> V48 end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), begin (V56 = (V53(V54))), (V55(V56)) end end end end end end end}, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), ((V60(V62))(V61)) end end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V64(V65))), (V66(V65)) end end end end}, fun (V67) -> fun (V68) -> V68 end end}, <<"IDRIS2_PATH"/utf8>>, 0))(V2))), {'Idris.Prelude.Types.Right', V69} end), case V70 of {'Idris.Prelude.Types.Left', E7} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V72) -> begin (V78 = case V72 of {'Idris.Prelude.Types.Just', E9} -> (fun (V73) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Context':'un--addExtraDir'(V0, V74, V75)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V76) -> ('Idris.Idris2.Data.String':'un--trim'(V76)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V77) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V77, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V73))))))(V2)) end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V78 of {'Idris.Prelude.Types.Left', E10} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V80) -> begin (V109 = begin (V108 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V83, V84, V85)) end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> V87 end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V91(V93))), begin (V95 = (V92(V93))), (V94(V95)) end end end end end end end}, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), ((V99(V101))(V100)) end end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V103(V104))), (V105(V104)) end end end end}, fun (V106) -> fun (V107) -> V107 end end}, <<"IDRIS2_DATA"/utf8>>, 0))(V2))), {'Idris.Prelude.Types.Right', V108} end), case V109 of {'Idris.Prelude.Types.Left', E12} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V111) -> begin (V117 = case V111 of {'Idris.Prelude.Types.Just', E14} -> (fun (V112) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, V113, V114)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V115) -> ('Idris.Idris2.Data.String':'un--trim'(V115)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V116) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V116, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V112))))))(V2)) end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V117 of {'Idris.Prelude.Types.Left', E15} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V119) -> begin (V148 = begin (V147 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V122, V123, V124)) end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> V126 end end end, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), begin (V134 = (V131(V132))), (V133(V134)) end end end end end end end}, fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> begin (V140 = (V137(V139))), ((V138(V140))(V139)) end end end end end end, fun (V141) -> fun (V142) -> fun (V143) -> begin (V144 = (V142(V143))), (V144(V143)) end end end end}, fun (V145) -> fun (V146) -> V146 end end}, <<"IDRIS2_LIBS"/utf8>>, 0))(V2))), {'Idris.Prelude.Types.Right', V147} end), case V148 of {'Idris.Prelude.Types.Left', E17} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V150) -> begin (V156 = case V150 of {'Idris.Prelude.Types.Just', E19} -> (fun (V151) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, V152, V153)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V154) -> ('Idris.Idris2.Data.String':'un--trim'(V154)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V155) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V155, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V151))))))(V2)) end(E19)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V156 of {'Idris.Prelude.Types.Left', E20} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V158) -> begin (V187 = begin (V186 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V161, V162, V163)) end end end end end, fun (V164) -> fun (V165) -> fun (V166) -> V165 end end end, fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> begin (V172 = (V169(V171))), begin (V173 = (V170(V171))), (V172(V173)) end end end end end end end}, fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> begin (V179 = (V176(V178))), ((V177(V179))(V178)) end end end end end end, fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V181(V182))), (V183(V182)) end end end end}, fun (V184) -> fun (V185) -> V185 end end}, <<"IDRIS2_PACKAGE_PATH"/utf8>>, 0))(V2))), {'Idris.Prelude.Types.Right', V186} end), case V187 of {'Idris.Prelude.Types.Left', E22} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V189) -> begin (V195 = case V189 of {'Idris.Prelude.Types.Just', E24} -> (fun (V190) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, V191, V192)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V193) -> ('Idris.Idris2.Data.String':'un--trim'(V193)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V194) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V194, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V190))))))(V2)) end(E24)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V195 of {'Idris.Prelude.Types.Left', E25} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V197) -> begin (V226 = begin (V225 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V200, V201, V202)) end end end end end, fun (V203) -> fun (V204) -> fun (V205) -> V204 end end end, fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> begin (V211 = (V208(V210))), begin (V212 = (V209(V210))), (V211(V212)) end end end end end end end}, fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> begin (V218 = (V215(V217))), ((V216(V218))(V217)) end end end end end end, fun (V219) -> fun (V220) -> fun (V221) -> begin (V222 = (V220(V221))), (V222(V221)) end end end end}, fun (V223) -> fun (V224) -> V224 end end}, <<"IDRIS2_CG"/utf8>>, 0))(V2))), {'Idris.Prelude.Types.Right', V225} end), case V226 of {'Idris.Prelude.Types.Left', E27} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V228) -> begin (V261 = case V228 of {'Idris.Prelude.Types.Just', E29} -> (fun (V229) -> case ('Idris.Idris2.Core.Options':'un--getCG'(case V6 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259) -> V234 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V229)) of {'Idris.Prelude.Types.Just', E30} -> (fun (V260) -> ('Idris.Idris2.Core.Context':'un--setCG'(V0, V260, V2)) end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown code generator "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V229))))}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V261 of {'Idris.Prelude.Types.Left', E61} -> (fun (V262) -> {'Idris.Prelude.Types.Left', V262} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V263) -> begin (V292 = begin (V291 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V264) -> fun (V265) -> fun (V266) -> fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V266, V267, V268)) end end end end end, fun (V269) -> fun (V270) -> fun (V271) -> V270 end end end, fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> begin (V277 = (V274(V276))), begin (V278 = (V275(V276))), (V277(V278)) end end end end end end end}, fun (V279) -> fun (V280) -> fun (V281) -> fun (V282) -> fun (V283) -> begin (V284 = (V281(V283))), ((V282(V284))(V283)) end end end end end end, fun (V285) -> fun (V286) -> fun (V287) -> begin (V288 = (V286(V287))), (V288(V287)) end end end end}, fun (V289) -> fun (V290) -> V290 end end}, <<"IDRIS2_INC_CGS"/utf8>>, 0))(V2))), {'Idris.Prelude.Types.Right', V291} end), case V292 of {'Idris.Prelude.Types.Left', E63} -> (fun (V293) -> {'Idris.Prelude.Types.Left', V293} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V294) -> begin (V300 = case V294 of {'Idris.Prelude.Types.Just', E65} -> (fun (V295) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V296) -> fun (V297) -> ('Idris.Idris2.Idris.SetOptions':'un--setIncrementalCG'(V0, V1, 0, V296, V297)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V298) -> ('Idris.Idris2.Data.String':'un--trim'(V298)) end, ('Idris.Idris2.Data.List1':'dn--un--toList_Foldable_List1'(('Idris.Idris2.Data.String':'un--split'(fun (V299) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V299, $,)) end, V295)))))), V2)) end(E65)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V300 of {'Idris.Prelude.Types.Left', E66} -> (fun (V301) -> {'Idris.Prelude.Types.Left', V301} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V302) -> begin (V304 = begin (V303 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V303} end), case V304 of {'Idris.Prelude.Types.Left', E68} -> (fun (V305) -> {'Idris.Prelude.Types.Left', V305} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V306) -> begin (V307 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"prelude"/utf8>>, V2))), case V307 of {'Idris.Prelude.Types.Left', E70} -> (fun (V308) -> {'Idris.Prelude.Types.Left', V308} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V309) -> begin (V310 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"base"/utf8>>, V2))), case V310 of {'Idris.Prelude.Types.Left', E72} -> (fun (V311) -> {'Idris.Prelude.Types.Left', V311} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V312) -> begin (V313 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"erlang"/utf8>>, V2))), case V313 of {'Idris.Prelude.Types.Left', E74} -> (fun (V314) -> {'Idris.Prelude.Types.Left', V314} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V315) -> begin (V317 = begin (V316 = ('un--getPrivDir'(V2))), {'Idris.Prelude.Types.Right', V316} end), case V317 of {'Idris.Prelude.Types.Left', E76} -> (fun (V318) -> {'Idris.Prelude.Types.Left', V318} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V319) -> case V319 of {'Idris.Prelude.Types.Just', E78} -> (fun (V320) -> begin (V321 = ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V320, <<"libs"/utf8>>)), V2))), case V321 of {'Idris.Prelude.Types.Left', E79} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V323) -> begin (V324 = ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V320, <<"support"/utf8>>)), V2))), case V324 of {'Idris.Prelude.Types.Left', E81} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V326) -> begin (V327 = ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, <<"lib"/utf8>>, V2))), case V327 of {'Idris.Prelude.Types.Left', E83} -> (fun (V328) -> {'Idris.Prelude.Types.Left', V328} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V329) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V320, <<"lib"/utf8>>)), V2)) end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V357 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V330) -> fun (V331) -> fun (V332) -> fun (V333) -> fun (V334) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V332, V333, V334)) end end end end end, fun (V335) -> fun (V336) -> fun (V337) -> V336 end end end, fun (V338) -> fun (V339) -> fun (V340) -> fun (V341) -> fun (V342) -> begin (V343 = (V340(V342))), begin (V344 = (V341(V342))), (V343(V344)) end end end end end end end}, fun (V345) -> fun (V346) -> fun (V347) -> fun (V348) -> fun (V349) -> begin (V350 = (V347(V349))), ((V348(V350))(V349)) end end end end end end, fun (V351) -> fun (V352) -> fun (V353) -> begin (V354 = (V352(V353))), (V354(V353)) end end end end}, fun (V355) -> fun (V356) -> V356 end end}, <<"Directory idris2/priv not found"/utf8>>))(V2))), {'Idris.Prelude.Types.Right', V357} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tryYaffle'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Yaffle', E2} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Yaffle.Main':'un--yaffleMain'(V4, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Right', 1} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--tryYaffle'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryTTM'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Metadata', E2} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Metadata':'un--dumpTTM'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Right', 1} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--tryTTM'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--stMain'(V0, V1, V2) -> begin (V3 = (('un--tryYaffle'(V1))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V6 = (('un--tryTTM'(V1))(V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = 0), case V8 of 0 -> begin (V10 = ('Idris.Idris2.Core.Context':'un--initDefs'(V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V47 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V13) -> fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> ('Idris.Idris2.Core.Options':'un--addCG'({'Idris.Builtin.MkPair', V15, {'Idris.Core.Options.Other', V15}}, V13)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V12 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V21 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))), begin (V78 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Context.Ctxt'}, case V12 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> {'Idris.Core.Context.MkDefs', V48, V49, V50, V51, V47, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V78 of {'Idris.Prelude.Types.Left', E68} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V80) -> begin (V81 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.Syntax.Syn'}, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'()), V2))), case V81 of {'Idris.Prelude.Types.Left', E70} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V83) -> begin (V85 = ('Idris.Idris2.Core.Context':'un--setCG'(V80, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.Options.Chez'} end, fun () -> fun (V84) -> {'Idris.Core.Options.Other', ('Idris.Idris2.Builtin':'un--fst'(V84))} end end, ('Idris.Idris2.Data.List':'un--head\x{27}'(V0)))), V2))), case V85 of {'Idris.Prelude.Types.Left', E72} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V80, V2))), case V88 of {'Idris.Prelude.Types.Left', E74} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V90) -> begin (V91 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V80, <<"."/utf8>>, V2))), case V91 of {'Idris.Prelude.Types.Left', E76} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V93) -> begin (V123 = begin (V94 = ('Idris.Idris2.Core.Context':'un--getSession'(V80, V2))), case V94 of {'Idris.Prelude.Types.Left', E78} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V96) -> case ('un--ignoreMissingIpkg'(V1)) of 1 -> ('Idris.Idris2.Core.Context':'un--setSession'(V80, case V96 of {'Idris.Core.Options.MkSessionOpts', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105} -> (fun (V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> {'Idris.Core.Options.MkSessionOpts', V97, V98, V99, V100, V101, V102, V103, V104, V105, 1, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122} end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V123 of {'Idris.Prelude.Types.Left', E106} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V125) -> begin (V126 = ('Idris.Idris2.Idris.SetOptions':'un--ideMode'(V1))), begin (V127 = ('Idris.Idris2.Idris.SetOptions':'un--ideModeSocket'(V1))), begin (V128 = case V126 of 1 -> {'Idris.Idris.REPL.Opts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}; 0 -> {'Idris.Idris.REPL.Opts.REPL', 2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V129 = ('un--findInput'(V1))), begin (V130 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.REPL.Opts.ROpts'}, ('Idris.Idris2.Idris.REPL.Opts':'un--defaultOpts'(V129, V128, V0)), V2))), case V130 of {'Idris.Prelude.Types.Left', E108} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V132) -> begin (V133 = ('un--updateEnv'(V80, V132, V2))), case V133 of {'Idris.Prelude.Types.Left', E110} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V135) -> begin (V136 = (('un--showInfo'(V80, V132, V1))(V2))), case V136 of {'Idris.Prelude.Types.Left', E112} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V138) -> case V138 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V139 = ('Idris.Idris2.Idris.Package':'un--processPackageOpts'(V80, V83, V132, V1, V2))), case V139 of {'Idris.Prelude.Types.Left', E114} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V141) -> case V141 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(V142, V143, V144)) end end end, fun (V145) -> fun (V146) -> ('nested--14868-3381--in--un--renderError'(V1, V0, V80, V83, V132, V145, V146)) end end, fun (V147) -> begin (V148 = (('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V80, V132, V1))(V147))), case V148 of {'Idris.Prelude.Types.Left', E116} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V150) -> begin (V151 = 0), case V150 of 1 -> begin (V152 = case ('un--checkVerbose'(V1)) of 1 -> ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V132, {'Idris.Idris.REPL.Opts.REPL', 2}, V147)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V152 of {'Idris.Prelude.Types.Left', E118} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V154) -> begin (V155 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V147))), case V155 of {'Idris.Prelude.Types.Left', E120} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V157) -> begin (V164 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V158) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.Virtual', 0}} end end, fun () -> fun (V159) -> fun (V160) -> begin (V161 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V80, V159, V160))), case V161 of {'Idris.Prelude.Types.Left', E122} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V163) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.PhysicalIdrSrc', V163}} end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V129))(V147))), case V164 of {'Idris.Prelude.Types.Left', E124} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V166) -> begin (V167 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'(V166)), V147))), case V167 of {'Idris.Prelude.Types.Left', E126} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V169) -> begin (V170 = ('un--updateREPLOpts'(V132, V147))), case V170 of {'Idris.Prelude.Types.Left', E128} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V172) -> begin (V173 = ('Idris.Idris2.Core.Context':'un--getSession'(V80, V147))), case V173 of {'Idris.Prelude.Types.Left', E130} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V175) -> begin (V210 = case case V175 of {'Idris.Core.Options.MkSessionOpts', E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159} -> (fun (V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> V178 end(E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V202 = ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V80, V132, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('un--banner'()))), V147))), case V202 of {'Idris.Prelude.Types.Left', E132} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V204) -> case ('Idris.Idris2.Data.List':'un--isCons'(V0)) of 1 -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V80, V132, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"With codegen for:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V207, V208)) end end end end, fun (V209) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Builtin':'un--fst'(V209)))) end, V0)))))), V147)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V210 of {'Idris.Prelude.Types.Left', E160} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V212) -> begin (V239 = case case V175 of {'Idris.Core.Options.MkSessionOpts', E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187} -> (fun (V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238) -> V216 end(E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Idris.Package':'un--findIpkg'(V80, V132, V83, V129, V147)); 0 -> {'Idris.Prelude.Types.Right', V129}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V239 of {'Idris.Prelude.Types.Left', E188} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V241) -> begin (V242 = ('Idris.Idris2.Idris.REPL.Opts':'un--setMainFile'(V132, V241, V147))), case V242 of {'Idris.Prelude.Types.Left', E190} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E190)); {'Idris.Prelude.Types.Right', E191} -> (fun (V244) -> begin (V283 = case V241 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V80, fun () -> <<"+ Loading prelude"/utf8>> end, fun (V245) -> begin (V272 = case case V175 of {'Idris.Core.Options.MkSessionOpts', E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217} -> (fun (V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271) -> V246 end(E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Idris.ProcessIdr':'un--readPrelude'(V80, V157, V83, 1, V245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V272 of {'Idris.Prelude.Types.Left', E218} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V274) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Common.Done'}} end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V147)) end()); {'Idris.Prelude.Types.Just', E220} -> (fun (V275) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V80, fun () -> <<"+ Loading main file"/utf8>> end, fun (V276) -> begin (V277 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V80, V157, V83, V169, V132, V275, V276))), case V277 of {'Idris.Prelude.Types.Left', E221} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V279) -> begin (V280 = ('Idris.Idris2.Idris.REPL':'un--displayErrors'(V80, V157, V83, V169, V132, V279, V276))), case V280 of {'Idris.Prelude.Types.Left', E223} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E223)); {'Idris.Prelude.Types.Right', E224} -> (fun (V282) -> {'Idris.Prelude.Types.Right', V279} end(E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V147)) end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V283 of {'Idris.Prelude.Types.Left', E225} -> (fun (V284) -> {'Idris.Prelude.Types.Left', V284} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V285) -> begin (V290 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.Idris.SetOptions':'un--postOptions'(V80, V157, V83, V169, V132, V285, V1)), fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Core':'un--*>'(fun (V288) -> ('Idris.Idris2.Idris.REPL.Common':'un--emitError'(V80, V132, V83, V286, V288)) end, fun (V289) -> {'Idris.Prelude.Types.Right', 0} end, V287)) end end, V147))), case V290 of {'Idris.Prelude.Types.Left', E227} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V292) -> begin (V293 = 1), case V292 of 1 -> begin (V294 = 1), case case V126 of 1 -> 1; 0 -> V127; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case V127 of 1 -> ('case--case block in case block in case block in case block in case block in case block in stMain-4226'(V1, V0, V9, V151, V12, V47, V80, V83, V126, V127, V128, V129, V132, V138, V141, V293, V157, V166, V169, V175, V241, V285, V294, ('Idris.Idris2.Idris.CommandLine':'un--ideSocketModeAddress'(V1)), V147)); 0 -> begin (V295 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V132, {'Idris.Idris.REPL.Opts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}, V147))), case V295 of {'Idris.Prelude.Types.Left', E229} -> (fun (V296) -> {'Idris.Prelude.Types.Left', V296} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V297) -> ('Idris.Idris2.Idris.IDEMode.REPL':'un--replIDE'(V80, V157, V83, V169, V132, V147)) end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> begin (V298 = ('Idris.Idris2.Idris.REPL':'un--repl'(V80, V157, V83, V169, V132, V147))), case V298 of {'Idris.Prelude.Types.Left', E231} -> (fun (V299) -> {'Idris.Prelude.Types.Left', V299} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V300) -> ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V80, V147)) end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V302 = begin (V301 = ('erlang':'get'(V132))), {'Idris.Prelude.Types.Right', V301} end), case V302 of {'Idris.Prelude.Types.Left', E233} -> (fun (V303) -> {'Idris.Prelude.Types.Left', V303} end(E233)); {'Idris.Prelude.Types.Right', E234} -> (fun (V304) -> begin (V305 = ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V80, V147))), case V305 of {'Idris.Prelude.Types.Left', E235} -> (fun (V306) -> {'Idris.Prelude.Types.Left', V306} end(E235)); {'Idris.Prelude.Types.Right', E236} -> (fun (V307) -> case V304 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252} -> (fun (V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323) -> case V314 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E253} -> (fun (V324) -> begin (V352 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V327, V328, V329)) end end end end end, fun (V330) -> fun (V331) -> fun (V332) -> V331 end end end, fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> begin (V338 = (V335(V337))), begin (V339 = (V336(V337))), (V338(V339)) end end end end end end end}, fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> begin (V345 = (V342(V344))), ((V343(V345))(V344)) end end end end end end, fun (V346) -> fun (V347) -> fun (V348) -> begin (V349 = (V347(V348))), (V349(V348)) end end end end}, fun (V350) -> fun (V351) -> V351 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V147))), {'Idris.Prelude.Types.Right', V352} end end(E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showInfo'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V4, V5) -> ('un--showInfo'(V0, V1, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quitOpts'(V0) -> case V0 of [] -> fun (V1) -> 1 end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Version'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, ('Idris.Idris2.Idris.CommandLine':'un--versionMsg'()))), fun () -> fun (V56) -> 0 end end)) end()); {'Idris.Idris.CommandLine.Help', E2} -> (fun (V57) -> case V57 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V85, V86, V87)) end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> V89 end end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V93(V95))), begin (V97 = (V94(V95))), (V96(V97)) end end end end end end end}, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> begin (V103 = (V100(V102))), ((V101(V103))(V102)) end end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V105(V106))), (V107(V106)) end end end end}, fun (V108) -> fun (V109) -> V109 end end}, ('Idris.Idris2.Idris.CommandLine':'un--usage'()))), fun () -> fun (V110) -> 0 end end)) end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V111) -> case V111 of 0 -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> V118 end end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V122(V124))), begin (V126 = (V123(V124))), (V125(V126)) end end end end end end end}, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), ((V130(V132))(V131)) end end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V134(V135))), (V136(V135)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V139, V140, V141)) end end end end end, fun (V142) -> fun (V143) -> fun (V144) -> V143 end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), begin (V151 = (V148(V149))), (V150(V151)) end end end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V154(V156))), ((V155(V157))(V156)) end end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V159(V160))), (V161(V160)) end end end end}, fun (V162) -> fun (V163) -> V163 end end}, ('Idris.Idris2.Core.Options.Log':'un--helpTopics'()))), fun () -> fun (V164) -> 0 end end)); 1 -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V167, V168, V169)) end end end end end, fun (V170) -> fun (V171) -> fun (V172) -> V171 end end end, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> begin (V178 = (V175(V177))), begin (V179 = (V176(V177))), (V178(V179)) end end end end end end end}, fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> begin (V185 = (V182(V184))), ((V183(V185))(V184)) end end end end end end, fun (V186) -> fun (V187) -> fun (V188) -> begin (V189 = (V187(V188))), (V189(V188)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V192, V193, V194)) end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> V196 end end end, fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> begin (V203 = (V200(V202))), begin (V204 = (V201(V202))), (V203(V204)) end end end end end end end}, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), ((V208(V210))(V209)) end end end end end end, fun (V211) -> fun (V212) -> fun (V213) -> begin (V214 = (V212(V213))), (V214(V213)) end end end end}, fun (V215) -> fun (V216) -> V216 end end}, ('Idris.Idris2.Idris.Syntax':'un--pragmaTopics'()))), fun () -> fun (V217) -> 0 end end)); _ -> ('un--quitOpts'(V3)) end end(E3)); _ -> ('un--quitOpts'(V3)) end end(E2)); _ -> ('un--quitOpts'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mainWithCodegens'(V0, V1) -> ('case--mainWithCodegens-4851'(V1, V0, ('Idris.Idris2.Idris.CommandLine':'un--getOpts'(V1)))).
'un--ignoreMissingIpkg'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IgnoreMissingIPKG'} -> (fun () -> 1 end()); _ -> ('un--ignoreMissingIpkg'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPrivDir'(V0) -> begin (V1 = ('erlang':'apply'('code', 'priv_dir', ['idris2' | []]))), ('Idris.Idris2.Erlang.Decode':'un--erlDecodeMay'({'Idris.Erlang.Types.ETErlTerm'}, fun (V2) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V3) -> case V3 of E0 -> (fun (V4) -> V4 end((fun (V5) -> ('unicode':'characters_to_binary'(V5)) end(E0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V6) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V6)) end, V2)) end, V1)) end.
'un--findInput'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.InputFile', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--findInput'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkVerbose'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.Verbose'} -> (fun () -> 1 end()); _ -> ('un--checkVerbose'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--banner'() -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"     ____    __     _         ___                                           \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"    /  _/___/ /____(_)____   |__ \x{5c}                                          \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"    / // __  / ___/ / ___/   __/ /     Version "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.Version':'un--showVersion'(1, ('Idris.Idris2.Idris.Version':'un--version'()))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  _/ // /_/ / /  / (__  )   / __/      https://www.idris-lang.org           \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" /___/\x{5c}__,_/_/  /_/____/   /____/      Type :? for help                     \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, <<"Welcome to Idris 2.  Enjoy yourself!"/utf8>>)))))))))))))))).
