-module('Idris.Idris2.Core.Binary').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--11317-4728--in--un--trimName'/6,
  'nested--9679-3225--in--un--resolved_aux'/7,
  'nested--10127-3802--in--un--resolvedRW'/26,
  'nested--10127-3803--in--un--resolvedPrim'/26,
  'nested--10127-3801--in--un--resolvedPair'/26,
  'nested--10840-4268--in--un--replaceNS'/8,
  'nested--9678-3197--in--un--full_aux'/7,
  'nested--10126-3615--in--un--fullRW'/26,
  'nested--10126-3616--in--un--fullPrim'/26,
  'nested--10126-3614--in--un--fullPair'/26,
  'nested--11738-5101--in--un--completeDef'/7,
  'nested--12908-6191--in--un--alreadyDone'/12,
  'nested--12421-5753--in--un--addT'/7,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'/3,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'/3,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'/3,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'/3,
  'dn--un--resolved_HasNames_(TTCFile $e)'/4,
  'dn--un--resolved_HasNames_(List $a)'/4,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'/3,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'/3,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'/3,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'/3,
  'dn--un--full_HasNames_(TTCFile $e)'/4,
  'dn--un--full_HasNames_(List $a)'/4,
  'un--writeToTTC'/7,
  'un--writeTTCFile'/5,
  'un--updateTransforms'/3,
  'un--updateRewrite'/3,
  'un--updatePrims'/3,
  'un--updatePrimNames'/2,
  'un--updatePair'/3,
  'un--updateNameDirectives'/3,
  'un--updateCGDirectives'/3,
  'un--ttcVersion'/0,
  'un--stringToBuffer'/1,
  'un--readTotalReq'/2,
  'un--readTTCFile'/7,
  'un--readImportHashes'/2,
  'un--readHashes'/2,
  'un--readFromTTC'/10,
  'un--readEscriptFile'/2,
  'un--getTotalReq'/3,
  'un--getSaveDefs'/5,
  'un--getNSas'/1,
  'un--getImportHashes'/3,
  'un--getHashes'/3,
  'un--escriptReadFromFile'/2,
  'un--checkTTCVersion'/4,
  'un--addTypeHint'/4,
  'un--addGlobalDef'/6,
  'un--addAutoHint'/3
]).
'nested--11317-4728--in--un--trimName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V6, V7) -> begin (V8 = {'Idris.Core.Name.NS', V6, V7}), case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V6, V4)) of 1 -> V7; 0 -> V8; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> V5 end.
'nested--9679-3225--in--un--resolved_aux'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4))}; [E0 | E1] -> (fun (V7, V8) -> begin (V11 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V10(V3))(V7))(V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> ('nested--9679-3225--in--un--resolved_aux'(V0, V1, V2, V3, [V13 | V4], V8, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10127-3802--in--un--resolvedRW'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Core.Options.MkRewriteNs', E1, E2} -> (fun (V27, V28) -> begin (V29 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V23, V27, V25))), case V29 of {'Idris.Prelude.Types.Left', E3} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V23, V28, V25))), case V32 of {'Idris.Prelude.Types.Left', E5} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkRewriteNs', V31, V34}}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10127-3803--in--un--resolvedPrim'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V24 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2, E3} -> (fun (V26, V27, V28, V29) -> begin (V36 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V30, V31, V32)) end end end, fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V33, V34, V35)) end end end}, V23, V26, V25))), case V36 of {'Idris.Prelude.Types.Left', E4} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V38) -> begin (V45 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V39, V40, V41)) end end end, fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V42, V43, V44)) end end end}, V23, V27, V25))), case V45 of {'Idris.Prelude.Types.Left', E6} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V47) -> begin (V54 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V48, V49, V50)) end end end, fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V51, V52, V53)) end end end}, V23, V28, V25))), case V54 of {'Idris.Prelude.Types.Left', E8} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V56) -> begin (V63 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V57, V58, V59)) end end end, fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V60, V61, V62)) end end end}, V23, V29, V25))), case V63 of {'Idris.Prelude.Types.Left', E10} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.MkPrimNs', V38, V47, V56, V65}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10127-3801--in--un--resolvedPair'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Core.Options.MkPairNs', E1, E2, E3} -> (fun (V27, V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V23, V27, V25))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V23, V28, V25))), case V33 of {'Idris.Prelude.Types.Left', E6} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V23, V29, V25))), case V36 of {'Idris.Prelude.Types.Left', E8} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkPairNs', V32, V35, V38}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10840-4268--in--un--replaceNS'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V8 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V10, V11) -> V7 end(E2, E3)); _ -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.NS', V6, V8}, V9} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9678-3197--in--un--full_aux'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V4))}; [E0 | E1] -> (fun (V7, V8) -> begin (V11 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V9(V3))(V7))(V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> ('nested--9678-3197--in--un--full_aux'(V0, V1, V2, V3, [V13 | V4], V8, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10126-3615--in--un--fullRW'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Core.Options.MkRewriteNs', E1, E2} -> (fun (V27, V28) -> begin (V29 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V23, V27, V25))), case V29 of {'Idris.Prelude.Types.Left', E3} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V23, V28, V25))), case V32 of {'Idris.Prelude.Types.Left', E5} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkRewriteNs', V31, V34}}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10126-3616--in--un--fullPrim'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V24 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2, E3} -> (fun (V26, V27, V28, V29) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V30) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V31) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V32) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V33) -> {'Idris.Prelude.Types.Right', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> {'Idris.Core.Options.MkPrimNs', V34, V35, V36, V37} end end end end} end, fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V39, V40, V41)) end end end, fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V42, V43, V44)) end end end}, V23, V26, V38)) end, V32)) end, fun (V45) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V46, V47, V48)) end end end, fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V49, V50, V51)) end end end}, V23, V27, V45)) end, V31)) end, fun (V52) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V53, V54, V55)) end end end, fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V56, V57, V58)) end end end}, V23, V28, V52)) end, V30)) end, fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V60, V61, V62)) end end end, fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V63, V64, V65)) end end end}, V23, V29, V59)) end, V25)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10126-3614--in--un--fullPair'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Core.Options.MkPairNs', E1, E2, E3} -> (fun (V27, V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V23, V27, V25))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V23, V28, V25))), case V33 of {'Idris.Prelude.Types.Left', E6} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V23, V29, V25))), case V36 of {'Idris.Prelude.Types.Left', E8} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkPairNs', V32, V35, V38}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11738-5101--in--un--completeDef'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Core.Context.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V25 of {'Idris.Core.Context.Context.None'} -> (fun () -> 0 end()); {'Idris.Core.Context.Context.Hole', E21, E22} -> (fun (V28, V29) -> 0 end(E21, E22)); _ -> 1 end end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12908-6191--in--un--alreadyDone'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> 0; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V9, V16)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V10, V19)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V9, V16)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V9)), V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> ('nested--12908-6191--in--un--alreadyDone'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12421-5753--in--un--addT'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V4, case V10 of {'Idris.Core.Context.MkDefs', E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V24 end(E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V71 = ('erlang':'put'(V3, case V10 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> {'Idris.Core.Context.MkDefs', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V4, [V5 | []], V54)), V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V71} end end()); {'Idris.Prelude.Types.Just', E32} -> (fun (V72) -> begin (V103 = ('erlang':'put'(V3, case V10 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> {'Idris.Core.Context.MkDefs', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V4, [V5 | V72], V86)), V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V103} end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Transform'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V5, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V12, V6}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(TTCFile $e)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Binary.MkTTCFile', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> fun (V26) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V1, V25, V26)) end end, V12, [], V3))), case V27 of {'Idris.Prelude.Types.Left', E21} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V29) -> begin (V32 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V30) -> fun (V31) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V1, V30, V31)) end end, V13, [], V3))), case V32 of {'Idris.Prelude.Types.Left', E23} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V34) -> begin (V35 = ('nested--10127-3801--in--un--resolvedPair'(V0, V24, V23, V22, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V18, V3))), case V35 of {'Idris.Prelude.Types.Left', E25} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V37) -> begin (V38 = ('nested--10127-3802--in--un--resolvedRW'(V0, V24, V23, V22, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V19, V3))), case V38 of {'Idris.Prelude.Types.Left', E27} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V40) -> begin (V41 = ('nested--10127-3803--in--un--resolvedPrim'(V0, V24, V23, V22, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V20, V3))), case V41 of {'Idris.Prelude.Types.Left', E29} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V43) -> begin (V50 = ('dn--un--resolved_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V44, V45, V46)) end end end, fun (V47) -> fun (V48) -> fun (V49) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V47, V48, V49)) end end end}, V1, V21, V3))), case V50 of {'Idris.Prelude.Types.Left', E31} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V52) -> begin (V59 = ('dn--un--resolved_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V53) -> fun (V54) -> fun (V55) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V53, V54, V55)) end end end, fun (V56) -> fun (V57) -> fun (V58) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V56, V57, V58)) end end end}, V1, V23, V3))), case V59 of {'Idris.Prelude.Types.Left', E33} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V61) -> begin (V64 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E35, E36} -> (fun (V62, V63) -> (((V63(V1))(V24))(V3)) end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V64 of {'Idris.Prelude.Types.Left', E37} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V4, V5, V6, V7, V8, V9, V10, V11, V29, V34, V14, V15, V16, V17, V37, V40, V43, V52, V22, V61, V66}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(List $a)'(V0, V1, V2, V3) -> ('nested--9679-3225--in--un--resolved_aux'(V0, V2, V1, V1, [], V2, V3)).
'dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Transform'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V5, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V12, V6}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(TTCFile $e)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Binary.MkTTCFile', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> fun (V26) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V1, V25, V26)) end end, V12, [], V3))), case V27 of {'Idris.Prelude.Types.Left', E21} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V29) -> begin (V32 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V30) -> fun (V31) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V1, V30, V31)) end end, V13, [], V3))), case V32 of {'Idris.Prelude.Types.Left', E23} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V34) -> begin (V35 = ('nested--10126-3614--in--un--fullPair'(V0, V24, V23, V22, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V18, V3))), case V35 of {'Idris.Prelude.Types.Left', E25} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V37) -> begin (V38 = ('nested--10126-3615--in--un--fullRW'(V0, V24, V23, V22, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V19, V3))), case V38 of {'Idris.Prelude.Types.Left', E27} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V40) -> begin (V41 = ('nested--10126-3616--in--un--fullPrim'(V0, V24, V23, V22, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V20, V3))), case V41 of {'Idris.Prelude.Types.Left', E29} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V43) -> begin (V50 = ('dn--un--full_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V44, V45, V46)) end end end, fun (V47) -> fun (V48) -> fun (V49) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V47, V48, V49)) end end end}, V1, V21, V3))), case V50 of {'Idris.Prelude.Types.Left', E31} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V52) -> begin (V59 = ('dn--un--full_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V53) -> fun (V54) -> fun (V55) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V53, V54, V55)) end end end, fun (V56) -> fun (V57) -> fun (V58) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V56, V57, V58)) end end end}, V1, V23, V3))), case V59 of {'Idris.Prelude.Types.Left', E33} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V61) -> begin (V64 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E35, E36} -> (fun (V62, V63) -> (((V62(V1))(V24))(V3)) end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V64 of {'Idris.Prelude.Types.Left', E37} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V4, V5, V6, V7, V8, V9, V10, V11, V29, V34, V14, V15, V16, V17, V37, V40, V43, V52, V22, V61, V66}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(List $a)'(V0, V1, V2, V3) -> ('nested--9678-3197--in--un--full_aux'(V0, V2, V1, V1, [], V2, V3)).
'un--writeToTTC'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Binary.Prims':'un--initBinary'(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V78 = ('un--getSaveDefs'(case V13 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V20 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V13 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V53 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [], V13, V6))), case V78 of {'Idris.Prelude.Types.Left', E66} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V80) -> begin (V121 = ('Idris.Idris2.Core.Binary.Prims':'un--hashFileWith'(case V13 of {'Idris.Core.Context.MkDefs', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110) -> case V85 of {'Idris.Core.Options.MkOptions', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> V120 end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V6))), case V121 of {'Idris.Prelude.Types.Left', E108} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V123) -> begin (V124 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V6))), case V124 of {'Idris.Prelude.Types.Left', E110} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V126) -> begin (V160 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ttc.write"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Writing"/utf8>> | [V5 | [<<"with source hash"/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V127) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V127)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V128, V129)) end end}, V123)) | [<<"and interface hash"/utf8>> | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V13 of {'Idris.Core.Context.MkDefs', E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141} -> (fun (V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159) -> V146 end(E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | []]]]]]])) end, V6))), case V160 of {'Idris.Prelude.Types.Left', E142} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V162) -> begin (V655 = ('un--writeTTCFile'(V0, V1, V9, {'Idris.Core.Binary.MkTTCFile', ('un--ttcVersion'()), V126, V123, case V13 of {'Idris.Core.Context.MkDefs', E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173} -> (fun (V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192) -> V179 end(E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203} -> (fun (V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222) -> V210 end(E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233} -> (fun (V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252) -> V245 end(E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V80, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V13 of {'Idris.Core.Context.MkDefs', E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263} -> (fun (V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282) -> V278 end(E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V13 of {'Idris.Core.Context.MkDefs', E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293} -> (fun (V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312) -> V295 end(E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323} -> (fun (V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342) -> V324 end(E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353} -> (fun (V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372) -> V361 end(E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V17 of {'Idris.Core.UnifyState.MkUState', E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365} -> (fun (V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384) -> V381 end(E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395} -> (fun (V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414) -> V387 end(E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425} -> (fun (V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444) -> V418 end(E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455} -> (fun (V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474) -> case V449 of {'Idris.Core.Options.MkOptions', E456, E457, E458, E459, E460, E461, E462, E463, E464, E465} -> (fun (V475, V476, V477, V478, V479, V480, V481, V482, V483, V484) -> V479 end(E456, E457, E458, E459, E460, E461, E462, E463, E464, E465)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E466, E467, E468, E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495} -> (fun (V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514) -> case V489 of {'Idris.Core.Options.MkOptions', E496, E497, E498, E499, E500, E501, E502, E503, E504, E505} -> (fun (V515, V516, V517, V518, V519, V520, V521, V522, V523, V524) -> V520 end(E496, E497, E498, E499, E500, E501, E502, E503, E504, E505)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E466, E467, E468, E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535} -> (fun (V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554) -> case V529 of {'Idris.Core.Options.MkOptions', E536, E537, E538, E539, E540, E541, E542, E543, E544, E545} -> (fun (V555, V556, V557, V558, V559, V560, V561, V562, V563, V564) -> V561 end(E536, E537, E538, E539, E540, E541, E542, E543, E544, E545)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V13 of {'Idris.Core.Context.MkDefs', E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574, E575} -> (fun (V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589, V590, V591, V592, V593, V594) -> V580 end(E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574, E575)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V13 of {'Idris.Core.Context.MkDefs', E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601, E602, E603, E604, E605} -> (fun (V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624) -> V615 end(E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601, E602, E603, E604, E605)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.MkDefs', E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624, E625, E626, E627, E628, E629, E630, E631, E632, E633, E634, E635} -> (fun (V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652, V653, V654) -> V639 end(E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624, E625, E626, E627, E628, E629, E630, E631, E632, E633, E634, E635)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3}, V6))), case V655 of {'Idris.Prelude.Types.Left', E636} -> (fun (V656) -> {'Idris.Prelude.Types.Left', V656} end(E636)); {'Idris.Prelude.Types.Right', E637} -> (fun (V657) -> begin (V663 = begin (V659 = begin (V658 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V658} end), case V659 of {'Idris.Prelude.Types.Left', E638} -> (fun (V660) -> {'Idris.Prelude.Types.Left', V660} end(E638)); {'Idris.Prelude.Types.Right', E639} -> (fun (V661) -> begin (V662 = (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V5, V661))(V6))), {'Idris.Prelude.Types.Right', V662} end end(E639)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V663 of {'Idris.Prelude.Types.Left', E640} -> (fun (V664) -> {'Idris.Prelude.Types.Left', V664} end(E640)); {'Idris.Prelude.Types.Right', E641} -> (fun (V665) -> case V665 of {'Idris.Prelude.Types.Right', E642} -> (fun (V666) -> {'Idris.Prelude.Types.Right', 0} end(E642)); {'Idris.Prelude.Types.Left', E643} -> (fun (V667) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V667))))))}, V6)) end(E643)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E641)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E637)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--writeTTCFile'(V0, V1, V2, V3, V4) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--full_HasNames_(TTCFile $e)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_(TTCFile $e)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V8, V9, V10)) end end end}, V3, V4))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V2, <<"TT2"/utf8>>))(V4))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V38 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_WastefulInt'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V17 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V38 of {'Idris.Prelude.Types.Left', E25} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V40) -> begin (V62 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_TotalReq'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V42 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V62 of {'Idris.Prelude.Types.Left', E48} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V64) -> begin (V90 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V67, V68)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V71 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V90 of {'Idris.Prelude.Types.Left', E71} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V92) -> begin (V114 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V96 end(E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V114 of {'Idris.Prelude.Types.Left', E94} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V116) -> begin (V163 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V120, V121, V122)) end end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V123, V124)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V125, V126, V127)) end end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V128, V129)) end end}}, V117, V118, V119)) end end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V132, V133, V134)) end end end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V135, V136)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V137, V138, V139)) end end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V140, V141)) end end}}, V130, V131)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116} -> (fun (V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162) -> V146 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V163 of {'Idris.Prelude.Types.Left', E117} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V165) -> begin (V280 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V169, V170, V171)) end end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V172, V173)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V177, V178)) end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V179, V180)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V186, V187)) end end}, V181, V182, V183)) end end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V190, V191)) end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V192, V193)) end end}, V188, V189)) end end}}, V174, V175, V176)) end end end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V198, V199)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V200) -> fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V203, V204)) end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V205, V206)) end end}, V200, V201, V202)) end end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V209, V210)) end end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V211, V212)) end end}, V207, V208)) end end}}, V194, V195)) end end}}, V166, V167, V168)) end end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V215, V216, V217)) end end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V218, V219)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V220) -> fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V223, V224)) end end, fun (V225) -> fun (V226) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V225, V226)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V227) -> fun (V228) -> fun (V229) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V232, V233)) end end}, V227, V228, V229)) end end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V236) -> fun (V237) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V236, V237)) end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V238, V239)) end end}, V234, V235)) end end}}, V220, V221, V222)) end end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V244, V245)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V249) -> fun (V250) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V249, V250)) end end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V251, V252)) end end}, V246, V247, V248)) end end end, fun (V253) -> fun (V254) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V255) -> fun (V256) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V255, V256)) end end, fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V257, V258)) end end}, V253, V254)) end end}}, V240, V241)) end end}}, V213, V214)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139} -> (fun (V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279) -> V264 end(E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V280 of {'Idris.Prelude.Types.Left', E140} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V282) -> begin (V369 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V283) -> fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V286) -> fun (V287) -> fun (V288) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V286, V287, V288)) end end end, fun (V289) -> fun (V290) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V289, V290)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V291) -> fun (V292) -> fun (V293) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V294) -> fun (V295) -> fun (V296) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V294, V295, V296)) end end end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V297, V298)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V299) -> fun (V300) -> fun (V301) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V299, V300, V301)) end end end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V302, V303)) end end}}, V291, V292, V293)) end end end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V306) -> fun (V307) -> fun (V308) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V306, V307, V308)) end end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V309, V310)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V311) -> fun (V312) -> fun (V313) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V311, V312, V313)) end end end, fun (V314) -> fun (V315) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V314, V315)) end end}}, V304, V305)) end end}}, V283, V284, V285)) end end end, fun (V316) -> fun (V317) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V318) -> fun (V319) -> fun (V320) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V318, V319, V320)) end end end, fun (V321) -> fun (V322) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V321, V322)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V323) -> fun (V324) -> fun (V325) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V326) -> fun (V327) -> fun (V328) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V326, V327, V328)) end end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V329, V330)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V331) -> fun (V332) -> fun (V333) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V331, V332, V333)) end end end, fun (V334) -> fun (V335) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V334, V335)) end end}}, V323, V324, V325)) end end end, fun (V336) -> fun (V337) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V338) -> fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V338, V339, V340)) end end end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V341, V342)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V343) -> fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V343, V344, V345)) end end end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V346, V347)) end end}}, V336, V337)) end end}}, V316, V317)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162} -> (fun (V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368) -> V358 end(E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V369 of {'Idris.Prelude.Types.Left', E163} -> (fun (V370) -> {'Idris.Prelude.Types.Left', V370} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V371) -> begin (V395 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E165, E166} -> (fun (V372, V373) -> (((V372(V2))(case V13 of {'Idris.Core.Binary.MkTTCFile', E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187} -> (fun (V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394) -> V394 end(E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E165, E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V395 of {'Idris.Prelude.Types.Left', E188} -> (fun (V396) -> {'Idris.Prelude.Types.Left', V396} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V397) -> begin (V442 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V398) -> fun (V399) -> fun (V400) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V401) -> fun (V402) -> fun (V403) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V401, V402, V403)) end end end, fun (V404) -> fun (V405) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V404, V405)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V406) -> fun (V407) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Binary'(V406, V407)) end end, fun (V408) -> fun (V409) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Binary'(V408, V409)) end end}}, V398, V399, V400)) end end end, fun (V410) -> fun (V411) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V412) -> fun (V413) -> fun (V414) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V412, V413, V414)) end end end, fun (V415) -> fun (V416) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V415, V416)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V417) -> fun (V418) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Binary'(V417, V418)) end end, fun (V419) -> fun (V420) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Binary'(V419, V420)) end end}}, V410, V411)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210} -> (fun (V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441) -> V427 end(E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V442 of {'Idris.Prelude.Types.Left', E211} -> (fun (V443) -> {'Idris.Prelude.Types.Left', V443} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V444) -> begin (V471 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V445) -> fun (V446) -> fun (V447) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V445, V446, V447)) end end end, fun (V448) -> fun (V449) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V448, V449)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233} -> (fun (V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470) -> V457 end(E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V471 of {'Idris.Prelude.Types.Left', E234} -> (fun (V472) -> {'Idris.Prelude.Types.Left', V472} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V473) -> begin (V520 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V474) -> fun (V475) -> fun (V476) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V477) -> fun (V478) -> fun (V479) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V477, V478, V479)) end end end, fun (V480) -> fun (V481) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V480, V481)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V482) -> fun (V483) -> fun (V484) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V482, V483, V484)) end end end, fun (V485) -> fun (V486) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V485, V486)) end end}}, V474, V475, V476)) end end end, fun (V487) -> fun (V488) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V489) -> fun (V490) -> fun (V491) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V489, V490, V491)) end end end, fun (V492) -> fun (V493) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V492, V493)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V494) -> fun (V495) -> fun (V496) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V494, V495, V496)) end end end, fun (V497) -> fun (V498) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V497, V498)) end end}}, V487, V488)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256} -> (fun (V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519) -> V507 end(E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V520 of {'Idris.Prelude.Types.Left', E257} -> (fun (V521) -> {'Idris.Prelude.Types.Left', V521} end(E257)); {'Idris.Prelude.Types.Right', E258} -> (fun (V522) -> begin (V609 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V523) -> fun (V524) -> fun (V525) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V526) -> fun (V527) -> fun (V528) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V526, V527, V528)) end end end, fun (V529) -> fun (V530) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V529, V530)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V531) -> fun (V532) -> fun (V533) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V534) -> fun (V535) -> fun (V536) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V534, V535, V536)) end end end, fun (V537) -> fun (V538) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V537, V538)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V539) -> fun (V540) -> fun (V541) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V539, V540, V541)) end end end, fun (V542) -> fun (V543) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V542, V543)) end end}}, V531, V532, V533)) end end end, fun (V544) -> fun (V545) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V546) -> fun (V547) -> fun (V548) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V546, V547, V548)) end end end, fun (V549) -> fun (V550) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V549, V550)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V551) -> fun (V552) -> fun (V553) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V551, V552, V553)) end end end, fun (V554) -> fun (V555) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V554, V555)) end end}}, V544, V545)) end end}}, V523, V524, V525)) end end end, fun (V556) -> fun (V557) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V558) -> fun (V559) -> fun (V560) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V558, V559, V560)) end end end, fun (V561) -> fun (V562) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V561, V562)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V563) -> fun (V564) -> fun (V565) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V566) -> fun (V567) -> fun (V568) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V566, V567, V568)) end end end, fun (V569) -> fun (V570) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V569, V570)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V571) -> fun (V572) -> fun (V573) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V571, V572, V573)) end end end, fun (V574) -> fun (V575) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V574, V575)) end end}}, V563, V564, V565)) end end end, fun (V576) -> fun (V577) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V578) -> fun (V579) -> fun (V580) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V578, V579, V580)) end end end, fun (V581) -> fun (V582) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V581, V582)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V583) -> fun (V584) -> fun (V585) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V583, V584, V585)) end end end, fun (V586) -> fun (V587) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V586, V587)) end end}}, V576, V577)) end end}}, V556, V557)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279} -> (fun (V588, V589, V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608) -> V597 end(E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V609 of {'Idris.Prelude.Types.Left', E280} -> (fun (V610) -> {'Idris.Prelude.Types.Left', V610} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V611) -> begin (V633 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302} -> (fun (V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632) -> V623 end(E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V633 of {'Idris.Prelude.Types.Left', E303} -> (fun (V634) -> {'Idris.Prelude.Types.Left', V634} end(E303)); {'Idris.Prelude.Types.Right', E304} -> (fun (V635) -> begin (V657 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325} -> (fun (V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652, V653, V654, V655, V656) -> V648 end(E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V657 of {'Idris.Prelude.Types.Left', E326} -> (fun (V658) -> {'Idris.Prelude.Types.Left', V658} end(E326)); {'Idris.Prelude.Types.Right', E327} -> (fun (V659) -> begin (V686 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V660) -> fun (V661) -> fun (V662) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V660, V661, V662)) end end end, fun (V663) -> fun (V664) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V663, V664)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348} -> (fun (V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684, V685) -> V678 end(E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V686 of {'Idris.Prelude.Types.Left', E349} -> (fun (V687) -> {'Idris.Prelude.Types.Left', V687} end(E349)); {'Idris.Prelude.Types.Right', E350} -> (fun (V688) -> begin (V715 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V689) -> fun (V690) -> fun (V691) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_PairNames'(V689, V690, V691)) end end end, fun (V692) -> fun (V693) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_PairNames'(V692, V693)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371} -> (fun (V694, V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714) -> V708 end(E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V715 of {'Idris.Prelude.Types.Left', E372} -> (fun (V716) -> {'Idris.Prelude.Types.Left', V716} end(E372)); {'Idris.Prelude.Types.Right', E373} -> (fun (V717) -> begin (V744 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V718) -> fun (V719) -> fun (V720) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RewriteNames'(V718, V719, V720)) end end end, fun (V721) -> fun (V722) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RewriteNames'(V721, V722)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394} -> (fun (V723, V724, V725, V726, V727, V728, V729, V730, V731, V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, V743) -> V738 end(E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V744 of {'Idris.Prelude.Types.Left', E395} -> (fun (V745) -> {'Idris.Prelude.Types.Left', V745} end(E395)); {'Idris.Prelude.Types.Right', E396} -> (fun (V746) -> begin (V768 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_PrimNames'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417} -> (fun (V747, V748, V749, V750, V751, V752, V753, V754, V755, V756, V757, V758, V759, V760, V761, V762, V763, V764, V765, V766, V767) -> V763 end(E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V768 of {'Idris.Prelude.Types.Left', E418} -> (fun (V769) -> {'Idris.Prelude.Types.Left', V769} end(E418)); {'Idris.Prelude.Types.Right', E419} -> (fun (V770) -> begin (V833 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V771) -> fun (V772) -> fun (V773) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V774) -> fun (V775) -> fun (V776) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V774, V775, V776)) end end end, fun (V777) -> fun (V778) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V777, V778)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V779) -> fun (V780) -> fun (V781) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V782) -> fun (V783) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V782, V783)) end end, fun (V784) -> fun (V785) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V784, V785)) end end}, V779, V780, V781)) end end end, fun (V786) -> fun (V787) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V788) -> fun (V789) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V788, V789)) end end, fun (V790) -> fun (V791) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V790, V791)) end end}, V786, V787)) end end}}, V771, V772, V773)) end end end, fun (V792) -> fun (V793) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V794) -> fun (V795) -> fun (V796) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V794, V795, V796)) end end end, fun (V797) -> fun (V798) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V797, V798)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V799) -> fun (V800) -> fun (V801) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V802) -> fun (V803) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V802, V803)) end end, fun (V804) -> fun (V805) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V804, V805)) end end}, V799, V800, V801)) end end end, fun (V806) -> fun (V807) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V808) -> fun (V809) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V808, V809)) end end, fun (V810) -> fun (V811) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V810, V811)) end end}, V806, V807)) end end}}, V792, V793)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440} -> (fun (V812, V813, V814, V815, V816, V817, V818, V819, V820, V821, V822, V823, V824, V825, V826, V827, V828, V829, V830, V831, V832) -> V829 end(E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V833 of {'Idris.Prelude.Types.Left', E441} -> (fun (V834) -> {'Idris.Prelude.Types.Left', V834} end(E441)); {'Idris.Prelude.Types.Right', E442} -> (fun (V835) -> begin (V918 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V836) -> fun (V837) -> fun (V838) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V839) -> fun (V840) -> fun (V841) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V839, V840, V841)) end end end, fun (V842) -> fun (V843) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V842, V843)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V844) -> fun (V845) -> fun (V846) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V847) -> fun (V848) -> fun (V849) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V847, V848, V849)) end end end, fun (V850) -> fun (V851) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V850, V851)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V852) -> fun (V853) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V852, V853)) end end, fun (V854) -> fun (V855) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V854, V855)) end end}}, V844, V845, V846)) end end end, fun (V856) -> fun (V857) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V858) -> fun (V859) -> fun (V860) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V858, V859, V860)) end end end, fun (V861) -> fun (V862) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V861, V862)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V863) -> fun (V864) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V863, V864)) end end, fun (V865) -> fun (V866) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V865, V866)) end end}}, V856, V857)) end end}}, V836, V837, V838)) end end end, fun (V867) -> fun (V868) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V869) -> fun (V870) -> fun (V871) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V869, V870, V871)) end end end, fun (V872) -> fun (V873) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V872, V873)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V874) -> fun (V875) -> fun (V876) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V877) -> fun (V878) -> fun (V879) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V877, V878, V879)) end end end, fun (V880) -> fun (V881) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V880, V881)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V882) -> fun (V883) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V882, V883)) end end, fun (V884) -> fun (V885) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V884, V885)) end end}}, V874, V875, V876)) end end end, fun (V886) -> fun (V887) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V888) -> fun (V889) -> fun (V890) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V888, V889, V890)) end end end, fun (V891) -> fun (V892) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V891, V892)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V893) -> fun (V894) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V893, V894)) end end, fun (V895) -> fun (V896) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V895, V896)) end end}}, V886, V887)) end end}}, V867, V868)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463} -> (fun (V897, V898, V899, V900, V901, V902, V903, V904, V905, V906, V907, V908, V909, V910, V911, V912, V913, V914, V915, V916, V917) -> V915 end(E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V918 of {'Idris.Prelude.Types.Left', E464} -> (fun (V919) -> {'Idris.Prelude.Types.Left', V919} end(E464)); {'Idris.Prelude.Types.Right', E465} -> (fun (V920) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V921) -> fun (V922) -> fun (V923) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V924) -> fun (V925) -> fun (V926) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V924, V925, V926)) end end end, fun (V927) -> fun (V928) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V927, V928)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V929) -> fun (V930) -> fun (V931) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V929, V930, V931)) end end end, fun (V932) -> fun (V933) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V932, V933)) end end}}, V921, V922, V923)) end end end, fun (V934) -> fun (V935) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V936) -> fun (V937) -> fun (V938) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V936, V937, V938)) end end end, fun (V939) -> fun (V940) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V939, V940)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V941) -> fun (V942) -> fun (V943) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V941, V942, V943)) end end end, fun (V944) -> fun (V945) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V944, V945)) end end}}, V934, V935)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E466, E467, E468, E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486} -> (fun (V946, V947, V948, V949, V950, V951, V952, V953, V954, V955, V956, V957, V958, V959, V960, V961, V962, V963, V964, V965, V966) -> V965 end(E466, E467, E468, E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E465)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E442)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E419)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E396)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E373)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E350)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E258)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateTransforms'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V25 = begin (V13 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V5, V2))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Transform'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Transform'(V19, V20, V21)) end end end}, V6, V2))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> ('nested--12421-5753--in--un--addT'(V5, V6, V4, V0, V15, V24, V2)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> ('un--updateTransforms'(V0, V4, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateRewrite'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V47 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, V40, V41, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(V1, V42)), V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updatePrims'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V47 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, V40, V41, V42, ('un--updatePrimNames'(V1, V43)), V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updatePrimNames'(V0, V1) -> case V1 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.Options.MkPrimNs', ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> V6 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> V11 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> V16 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E16, E17, E18, E19} -> (fun (V18, V19, V20, V21) -> V21 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updatePair'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V47 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, V40, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(V1, V41)), V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateNameDirectives'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V42 = begin (V41 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V5, V6, V26)), V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E36} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V44) -> ('un--updateNameDirectives'(V0, V4, V2)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateCGDirectives'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V89 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V11, V12)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V17, V18)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V21, V22)) end end}, V13, V14)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V27, V28)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V31, V32)) end end}, V23, V24)) end end}, V7, V8)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V37, V38)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V43, V44)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V47, V48)) end end}, V39, V40)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V53, V54)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V57, V58)) end end}, V49, V50)) end end}, V33, V34)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> V79 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V120 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119) -> {'Idris.Core.Context.MkDefs', V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V89, V111, V112, V113, V114, V115, V116, V117, V118, V119} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V120} end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--ttcVersion'() -> 64.
'un--stringToBuffer'(V0) -> begin (V1 = ('Idris.Idris2.Erlang.Data.Buffer':'un--stringByteLength'(V0))), fun (V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Just', E2} -> (fun (V34) -> begin (V63 = begin (V62 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, V34, 0, V0))(V2))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E3} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V65) -> {'Idris.Prelude.Types.Right', V34} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Unable to create buffer"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--readTotalReq'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V0, V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, V6, V1))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V13}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V14) -> ('un--getTotalReq'(V0, V9, V14)) end, V10)) end, fun (V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, V1)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readTTCFile'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V9, <<"TT2"/utf8>>)) of 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V9)))))))), V6)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_WastefulInt'(V5, V6))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('un--checkTTCVersion'(V3, V19, ('un--ttcVersion'()), V6))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V5, V6))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V30 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V28, V29)) end end}, V5, V6))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V5, V6))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V61 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V39, V40, V41)) end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V42, V43)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V44, V45, V46)) end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V47, V48)) end end}}, V36, V37, V38)) end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V51, V52, V53)) end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V54, V55)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V56, V57, V58)) end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V59, V60)) end end}}, V49, V50)) end end}, V5, V6))), case V61 of {'Idris.Prelude.Types.Left', E16} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V63) -> begin (V157 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V67, V68, V69)) end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V70, V71)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V77, V78)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V84, V85)) end end}, V79, V80, V81)) end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V90, V91)) end end}, V86, V87)) end end}}, V72, V73, V74)) end end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V96, V97)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V103, V104)) end end}, V98, V99, V100)) end end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V109, V110)) end end}, V105, V106)) end end}}, V92, V93)) end end}}, V64, V65, V66)) end end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V113, V114, V115)) end end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V116, V117)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V123, V124)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V130, V131)) end end}, V125, V126, V127)) end end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V136, V137)) end end}, V132, V133)) end end}}, V118, V119, V120)) end end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V140, V141)) end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V142, V143)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V149, V150)) end end}, V144, V145, V146)) end end end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V153) -> fun (V154) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V153, V154)) end end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V155, V156)) end end}, V151, V152)) end end}}, V138, V139)) end end}}, V111, V112)) end end}, V5, V6))), case V157 of {'Idris.Prelude.Types.Left', E18} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V159) -> begin (V225 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V163) -> fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V163, V164, V165)) end end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V166, V167)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V171, V172, V173)) end end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V174, V175)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V176, V177, V178)) end end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V179, V180)) end end}}, V168, V169, V170)) end end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V183, V184, V185)) end end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V186, V187)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V188) -> fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V188, V189, V190)) end end end, fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V191, V192)) end end}}, V181, V182)) end end}}, V160, V161, V162)) end end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V195) -> fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V195, V196, V197)) end end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V198, V199)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V200) -> fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V203) -> fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V203, V204, V205)) end end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V206, V207)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V208) -> fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V208, V209, V210)) end end end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V211, V212)) end end}}, V200, V201, V202)) end end end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V215, V216, V217)) end end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V218, V219)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V220) -> fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V220, V221, V222)) end end end, fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V223, V224)) end end}}, V213, V214)) end end}}, V193, V194)) end end}, V5, V6))), case V225 of {'Idris.Prelude.Types.Left', E20} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V227) -> begin (V230 = case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E22, E23} -> (fun (V228, V229) -> ((V229(V5))(V6)) end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V230 of {'Idris.Prelude.Types.Left', E24} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V232) -> case V2 of 1 -> begin (V256 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V236) -> fun (V237) -> fun (V238) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V236, V237, V238)) end end end, fun (V239) -> fun (V240) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V239, V240)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V241) -> fun (V242) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Binary'(V241, V242)) end end, fun (V243) -> fun (V244) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Binary'(V243, V244)) end end}}, V233, V234, V235)) end end end, fun (V245) -> fun (V246) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V247, V248, V249)) end end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V250, V251)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V252) -> fun (V253) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Binary'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Binary'(V254, V255)) end end}}, V245, V246)) end end}, V5, V6))), case V256 of {'Idris.Prelude.Types.Left', E26} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V258) -> begin (V264 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V259) -> fun (V260) -> fun (V261) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V259, V260, V261)) end end end, fun (V262) -> fun (V263) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V262, V263)) end end}, V5, V6))), case V264 of {'Idris.Prelude.Types.Left', E28} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V266) -> begin (V292 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V267) -> fun (V268) -> fun (V269) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V270) -> fun (V271) -> fun (V272) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V270, V271, V272)) end end end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V273, V274)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V275) -> fun (V276) -> fun (V277) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V275, V276, V277)) end end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V278, V279)) end end}}, V267, V268, V269)) end end end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V282) -> fun (V283) -> fun (V284) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V282, V283, V284)) end end end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V285, V286)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V287, V288, V289)) end end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V290, V291)) end end}}, V280, V281)) end end}, V5, V6))), case V292 of {'Idris.Prelude.Types.Left', E30} -> (fun (V293) -> {'Idris.Prelude.Types.Left', V293} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V294) -> begin (V360 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V295) -> fun (V296) -> fun (V297) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V298) -> fun (V299) -> fun (V300) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V298, V299, V300)) end end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V301, V302)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V303) -> fun (V304) -> fun (V305) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V306) -> fun (V307) -> fun (V308) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V306, V307, V308)) end end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V309, V310)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V311) -> fun (V312) -> fun (V313) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V311, V312, V313)) end end end, fun (V314) -> fun (V315) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V314, V315)) end end}}, V303, V304, V305)) end end end, fun (V316) -> fun (V317) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V318) -> fun (V319) -> fun (V320) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V318, V319, V320)) end end end, fun (V321) -> fun (V322) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V321, V322)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V323) -> fun (V324) -> fun (V325) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V323, V324, V325)) end end end, fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V326, V327)) end end}}, V316, V317)) end end}}, V295, V296, V297)) end end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V330) -> fun (V331) -> fun (V332) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V330, V331, V332)) end end end, fun (V333) -> fun (V334) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V333, V334)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V335) -> fun (V336) -> fun (V337) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V338) -> fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V338, V339, V340)) end end end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V341, V342)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V343) -> fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V343, V344, V345)) end end end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V346, V347)) end end}}, V335, V336, V337)) end end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V350) -> fun (V351) -> fun (V352) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V350, V351, V352)) end end end, fun (V353) -> fun (V354) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V353, V354)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V355) -> fun (V356) -> fun (V357) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V355, V356, V357)) end end end, fun (V358) -> fun (V359) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V358, V359)) end end}}, V348, V349)) end end}}, V328, V329)) end end}, V5, V6))), case V360 of {'Idris.Prelude.Types.Left', E32} -> (fun (V361) -> {'Idris.Prelude.Types.Left', V361} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V362) -> begin (V363 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V5, V6))), case V363 of {'Idris.Prelude.Types.Left', E34} -> (fun (V364) -> {'Idris.Prelude.Types.Left', V364} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V365) -> begin (V366 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V5, V6))), case V366 of {'Idris.Prelude.Types.Left', E36} -> (fun (V367) -> {'Idris.Prelude.Types.Left', V367} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V368) -> begin (V374 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V369) -> fun (V370) -> fun (V371) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V369, V370, V371)) end end end, fun (V372) -> fun (V373) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V372, V373)) end end}, V5, V6))), case V374 of {'Idris.Prelude.Types.Left', E38} -> (fun (V375) -> {'Idris.Prelude.Types.Left', V375} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V376) -> begin (V382 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V377) -> fun (V378) -> fun (V379) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_PairNames'(V377, V378, V379)) end end end, fun (V380) -> fun (V381) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_PairNames'(V380, V381)) end end}, V5, V6))), case V382 of {'Idris.Prelude.Types.Left', E40} -> (fun (V383) -> {'Idris.Prelude.Types.Left', V383} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V384) -> begin (V390 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V385) -> fun (V386) -> fun (V387) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RewriteNames'(V385, V386, V387)) end end end, fun (V388) -> fun (V389) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RewriteNames'(V388, V389)) end end}, V5, V6))), case V390 of {'Idris.Prelude.Types.Left', E42} -> (fun (V391) -> {'Idris.Prelude.Types.Left', V391} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V392) -> begin (V393 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_PrimNames'(V5, V6))), case V393 of {'Idris.Prelude.Types.Left', E44} -> (fun (V394) -> {'Idris.Prelude.Types.Left', V394} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V395) -> begin (V437 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V396) -> fun (V397) -> fun (V398) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V399) -> fun (V400) -> fun (V401) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V399, V400, V401)) end end end, fun (V402) -> fun (V403) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V402, V403)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V404) -> fun (V405) -> fun (V406) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V407) -> fun (V408) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V407, V408)) end end, fun (V409) -> fun (V410) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V409, V410)) end end}, V404, V405, V406)) end end end, fun (V411) -> fun (V412) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V413) -> fun (V414) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V413, V414)) end end, fun (V415) -> fun (V416) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V415, V416)) end end}, V411, V412)) end end}}, V396, V397, V398)) end end end, fun (V417) -> fun (V418) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V419) -> fun (V420) -> fun (V421) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V419, V420, V421)) end end end, fun (V422) -> fun (V423) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V422, V423)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V424) -> fun (V425) -> fun (V426) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V427) -> fun (V428) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V427, V428)) end end, fun (V429) -> fun (V430) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V429, V430)) end end}, V424, V425, V426)) end end end, fun (V431) -> fun (V432) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V433) -> fun (V434) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V433, V434)) end end, fun (V435) -> fun (V436) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V435, V436)) end end}, V431, V432)) end end}}, V417, V418)) end end}, V5, V6))), case V437 of {'Idris.Prelude.Types.Left', E46} -> (fun (V438) -> {'Idris.Prelude.Types.Left', V438} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V439) -> begin (V501 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V440) -> fun (V441) -> fun (V442) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V443) -> fun (V444) -> fun (V445) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V443, V444, V445)) end end end, fun (V446) -> fun (V447) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V446, V447)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V448) -> fun (V449) -> fun (V450) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V451) -> fun (V452) -> fun (V453) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V451, V452, V453)) end end end, fun (V454) -> fun (V455) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V454, V455)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V456) -> fun (V457) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V456, V457)) end end, fun (V458) -> fun (V459) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V458, V459)) end end}}, V448, V449, V450)) end end end, fun (V460) -> fun (V461) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V462) -> fun (V463) -> fun (V464) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V462, V463, V464)) end end end, fun (V465) -> fun (V466) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V465, V466)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V467) -> fun (V468) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V467, V468)) end end, fun (V469) -> fun (V470) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V469, V470)) end end}}, V460, V461)) end end}}, V440, V441, V442)) end end end, fun (V471) -> fun (V472) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V473) -> fun (V474) -> fun (V475) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V473, V474, V475)) end end end, fun (V476) -> fun (V477) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V476, V477)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V478) -> fun (V479) -> fun (V480) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V481) -> fun (V482) -> fun (V483) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V481, V482, V483)) end end end, fun (V484) -> fun (V485) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V484, V485)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V486) -> fun (V487) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V486, V487)) end end, fun (V488) -> fun (V489) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V488, V489)) end end}}, V478, V479, V480)) end end end, fun (V490) -> fun (V491) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V492) -> fun (V493) -> fun (V494) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V492, V493, V494)) end end end, fun (V495) -> fun (V496) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V495, V496)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V497) -> fun (V498) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V497, V498)) end end, fun (V499) -> fun (V500) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V499, V500)) end end}}, V490, V491)) end end}}, V471, V472)) end end}, V5, V6))), case V501 of {'Idris.Prelude.Types.Left', E48} -> (fun (V502) -> {'Idris.Prelude.Types.Left', V502} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V503) -> begin (V529 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V504) -> fun (V505) -> fun (V506) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V507) -> fun (V508) -> fun (V509) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V507, V508, V509)) end end end, fun (V510) -> fun (V511) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V510, V511)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V512) -> fun (V513) -> fun (V514) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V512, V513, V514)) end end end, fun (V515) -> fun (V516) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V515, V516)) end end}}, V504, V505, V506)) end end end, fun (V517) -> fun (V518) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V519) -> fun (V520) -> fun (V521) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V519, V520, V521)) end end end, fun (V522) -> fun (V523) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V522, V523)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V524) -> fun (V525) -> fun (V526) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V524, V525, V526)) end end end, fun (V527) -> fun (V528) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V527, V528)) end end}}, V517, V518)) end end}, V5, V6))), case V529 of {'Idris.Prelude.Types.Left', E50} -> (fun (V530) -> {'Idris.Prelude.Types.Left', V530} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V531) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V19, V25, V32, V35, V63, V159, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V532) -> ('nested--10840-4268--in--un--replaceNS'(V0, V5, V4, V3, V2, V1, V368, V532)) end, V258)), V266, V294, V362, V227, V365, V368, V376, V384, V392, V395, V439, V503, V531, V232}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V19, V25, V32, V35, V63, V159, [], [], [], [], [], 0, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(<<""/utf8>>)), [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.Options.MkPrimNs', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}, [], [], [], V232}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readImportHashes'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V0, V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, V6, V1))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V10) -> begin (V11 = ('un--getImportHashes'(V0, V9, V10))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', V13} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', []} end end, V1)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', []} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readHashes'(V0, V1) -> begin (V2 = ('un--escriptReadFromFile'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, V4, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Directory':'un--filenameFromModuleLocation'(V0))), ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V9) -> ('un--getHashes'(V8, V7, V9)) end, fun (V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}} end end, V1)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readFromTTC'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Directory':'un--filenameFromModuleLocation'(V6))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V19, V20)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V25, V26)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V29, V30)) end end}, V21, V22)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V35, V36)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V39, V40)) end end}, V31, V32)) end end}, V15, V16)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V45, V46)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V51, V52)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V55, V56)) end end}, V47, V48)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V61, V62)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V65, V66)) end end}, V57, V58)) end end}, V41, V42)) end end}, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V5, V8}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V67) -> ('Idris.Idris2.Builtin':'un--snd'(V67)) end, case V13 of {'Idris.Core.Context.MkDefs', E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> V87 end(E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 0 -> begin (V129 = begin (V128 = ('erlang':'put'(V1, case V13 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> {'Idris.Core.Context.MkDefs', V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, [{'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V5, V8}}} | V117], V118, V119, V120, V121, V122, V123, V124, V125, V126, V127} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V128} end), case V129 of {'Idris.Prelude.Types.Left', E32} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V131) -> begin (V132 = ('un--escriptReadFromFile'(V6, V9))), case V132 of {'Idris.Prelude.Types.Left', E34} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V134) -> begin (V135 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, V134, V9))), case V135 of {'Idris.Prelude.Types.Left', E36} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V137) -> begin (V138 = case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V8, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V7)))) of 1 -> {'Idris.Prelude.Types.Nothing'}; 0 -> {'Idris.Prelude.Types.Just', V8}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('nested--12908-6191--in--un--alreadyDone'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V7, V8, case V13 of {'Idris.Core.Context.MkDefs', E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574, E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590} -> (fun (V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168) -> V158 end(E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574, E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V169 = ('un--readTTCFile'(V0, V1, 0, V14, V138, V137, V9))), case V169 of {'Idris.Prelude.Types.Left', E38} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V171) -> begin (V193 = case V171 of {'Idris.Core.Binary.MkTTCFile', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192) -> V192 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V193, {'Idris.Builtin.MkPair', case V171 of {'Idris.Core.Binary.MkTTCFile', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214) -> V197 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V171 of {'Idris.Core.Binary.MkTTCFile', E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102} -> (fun (V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235) -> V225 end(E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V236 = ('un--readTTCFile'(V0, V1, 1, V14, V138, V137, V9))), case V236 of {'Idris.Prelude.Types.Left', E103} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V238) -> begin (V260 = case V238 of {'Idris.Core.Binary.MkTTCFile', E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259) -> V259 end(E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V305 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V261) -> fun (V262) -> ('un--addGlobalDef'(V1, V7, case V238 of {'Idris.Core.Binary.MkTTCFile', E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146} -> (fun (V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283) -> V275 end(E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V138, V261, V262)) end end, case V238 of {'Idris.Core.Binary.MkTTCFile', E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167} -> (fun (V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304) -> V290 end(E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V305 of {'Idris.Prelude.Types.Left', E168} -> (fun (V306) -> {'Idris.Prelude.Types.Left', V306} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V307) -> begin (V331 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V308) -> fun (V309) -> ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, 1, V308, V309)) end end, case V238 of {'Idris.Core.Binary.MkTTCFile', E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190} -> (fun (V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330) -> V317 end(E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V331 of {'Idris.Prelude.Types.Left', E191} -> (fun (V332) -> {'Idris.Prelude.Types.Left', V332} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V333) -> begin (V355 = ('Idris.Idris2.Core.Context':'un--setNS'(V1, case V238 of {'Idris.Core.Binary.MkTTCFile', E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213} -> (fun (V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354) -> V346 end(E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V355 of {'Idris.Prelude.Types.Left', E214} -> (fun (V356) -> {'Idris.Prelude.Types.Left', V356} end(E214)); {'Idris.Prelude.Types.Right', E215} -> (fun (V357) -> begin (V379 = case V3 of 1 -> ('Idris.Idris2.Core.Context':'un--setNestedNS'(V1, case V238 of {'Idris.Core.Binary.MkTTCFile', E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236} -> (fun (V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378) -> V371 end(E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V379 of {'Idris.Prelude.Types.Left', E237} -> (fun (V380) -> {'Idris.Prelude.Types.Left', V380} end(E237)); {'Idris.Prelude.Types.Right', E238} -> (fun (V381) -> begin (V638 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V382) -> fun (V383) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V382, V383)) end end, fun (V384) -> fun (V385) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V384, V385)) end end}, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V386) -> ('Idris.Idris2.Builtin':'un--fst'(('un--getNSas'(V386)))) end, case V13 of {'Idris.Core.Context.MkDefs', E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474, E475} -> (fun (V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416) -> V406 end(E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474, E475)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V440 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V417) -> fun (V418) -> ('un--addTypeHint'(V1, V4, V417, V418)) end end, case V238 of {'Idris.Core.Binary.MkTTCFile', E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259} -> (fun (V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439) -> V428 end(E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V440 of {'Idris.Prelude.Types.Left', E260} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V442) -> begin (V466 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V443) -> fun (V444) -> ('un--addAutoHint'(V1, V443, V444)) end end, case V238 of {'Idris.Core.Binary.MkTTCFile', E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282} -> (fun (V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465) -> V453 end(E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V466 of {'Idris.Prelude.Types.Left', E283} -> (fun (V467) -> {'Idris.Prelude.Types.Left', V467} end(E283)); {'Idris.Prelude.Types.Right', E284} -> (fun (V468) -> begin (V490 = ('Idris.Idris2.Core.Context':'un--addImportedInc'(V1, V7, case V238 of {'Idris.Core.Binary.MkTTCFile', E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305} -> (fun (V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489) -> V474 end(E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V490 of {'Idris.Prelude.Types.Left', E306} -> (fun (V491) -> {'Idris.Prelude.Types.Left', V491} end(E306)); {'Idris.Prelude.Types.Right', E307} -> (fun (V492) -> begin (V494 = begin (V493 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V493} end), case V494 of {'Idris.Prelude.Types.Left', E308} -> (fun (V495) -> {'Idris.Prelude.Types.Left', V495} end(E308)); {'Idris.Prelude.Types.Right', E309} -> (fun (V496) -> begin (V518 = ('un--updatePair'(V1, case V238 of {'Idris.Core.Binary.MkTTCFile', E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330} -> (fun (V497, V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517) -> V511 end(E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V518 of {'Idris.Prelude.Types.Left', E331} -> (fun (V519) -> {'Idris.Prelude.Types.Left', V519} end(E331)); {'Idris.Prelude.Types.Right', E332} -> (fun (V520) -> begin (V542 = ('un--updateRewrite'(V1, case V238 of {'Idris.Core.Binary.MkTTCFile', E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353} -> (fun (V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541) -> V536 end(E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V542 of {'Idris.Prelude.Types.Left', E354} -> (fun (V543) -> {'Idris.Prelude.Types.Left', V543} end(E354)); {'Idris.Prelude.Types.Right', E355} -> (fun (V544) -> begin (V566 = ('un--updatePrims'(V1, case V238 of {'Idris.Core.Binary.MkTTCFile', E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376} -> (fun (V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564, V565) -> V561 end(E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V566 of {'Idris.Prelude.Types.Left', E377} -> (fun (V567) -> {'Idris.Prelude.Types.Left', V567} end(E377)); {'Idris.Prelude.Types.Right', E378} -> (fun (V568) -> begin (V590 = ('un--updateNameDirectives'(V1, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(case V238 of {'Idris.Core.Binary.MkTTCFile', E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399} -> (fun (V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589) -> V586 end(E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V9))), case V590 of {'Idris.Prelude.Types.Left', E400} -> (fun (V591) -> {'Idris.Prelude.Types.Left', V591} end(E400)); {'Idris.Prelude.Types.Right', E401} -> (fun (V592) -> begin (V614 = ('un--updateCGDirectives'(V1, case V238 of {'Idris.Core.Binary.MkTTCFile', E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422} -> (fun (V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613) -> V611 end(E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V614 of {'Idris.Prelude.Types.Left', E423} -> (fun (V615) -> {'Idris.Prelude.Types.Left', V615} end(E423)); {'Idris.Prelude.Types.Right', E424} -> (fun (V616) -> ('un--updateTransforms'(V1, case V238 of {'Idris.Core.Binary.MkTTCFile', E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445} -> (fun (V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637) -> V636 end(E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9)) end(E424)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E401)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E378)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E355)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V638 of {'Idris.Prelude.Types.Left', E476} -> (fun (V639) -> {'Idris.Prelude.Types.Left', V639} end(E476)); {'Idris.Prelude.Types.Right', E477} -> (fun (V640) -> begin (V641 = case V5 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context':'un--clearSavedHints'(V1, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V641 of {'Idris.Prelude.Types.Left', E478} -> (fun (V642) -> {'Idris.Prelude.Types.Left', V642} end(E478)); {'Idris.Prelude.Types.Right', E479} -> (fun (V643) -> begin (V644 = ('Idris.Idris2.Core.Context':'un--resetFirstEntry'(V1, V9))), case V644 of {'Idris.Prelude.Types.Left', E480} -> (fun (V645) -> {'Idris.Prelude.Types.Left', V645} end(E480)); {'Idris.Prelude.Types.Right', E481} -> (fun (V646) -> begin (V648 = begin (V647 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V647} end), case V648 of {'Idris.Prelude.Types.Left', E482} -> (fun (V649) -> {'Idris.Prelude.Types.Left', V649} end(E482)); {'Idris.Prelude.Types.Right', E483} -> (fun (V650) -> begin (V685 = begin (V684 = ('erlang':'put'(V2, case V650 of {'Idris.Core.UnifyState.MkUState', E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495} -> (fun (V651, V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662) -> {'Idris.Core.UnifyState.MkUState', V651, V652, V653, V654, V655, V656, V657, V658, case V238 of {'Idris.Core.Binary.MkTTCFile', E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516} -> (fun (V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, V676, V677, V678, V679, V680, V681, V682, V683) -> V674 end(E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V660, V661, V662} end(E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V684} end), case V685 of {'Idris.Prelude.Types.Left', E517} -> (fun (V686) -> {'Idris.Prelude.Types.Left', V686} end(E517)); {'Idris.Prelude.Types.Right', E518} -> (fun (V687) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V260, {'Idris.Builtin.MkPair', case V238 of {'Idris.Core.Binary.MkTTCFile', E519, E520, E521, E522, E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539} -> (fun (V688, V689, V690, V691, V692, V693, V694, V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706, V707, V708) -> V691 end(E519, E520, E521, E522, E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V238 of {'Idris.Core.Binary.MkTTCFile', E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560} -> (fun (V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719, V720, V721, V722, V723, V724, V725, V726, V727, V728, V729) -> V719 end(E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}} end(E518)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E483)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E481)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E479)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E477)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readEscriptFile'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Libraries.Utils.Escript':'un--getEscriptPath'(V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Just', E2} -> (fun (V6) -> begin (V8 = begin (V7 = ('Idris.Idris2.Libraries.Utils.Escript':'un--openArchive'(V6, V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E5} -> (fun (V11) -> begin (V13 = begin (V12 = ('Idris.Idris2.Libraries.Utils.Escript':'un--readFile'(V11, V0, V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> case V15 of {'Idris.Prelude.Types.Just', E8} -> (fun (V16) -> begin (V18 = begin (V17 = ('Idris.Idris2.Libraries.Utils.Escript':'un--closeArchive'(V11, V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Right', V16} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<": Unable to read file"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<": Unable to open archive"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<": Unable to find Escript path"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTotalReq'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V5, <<"TT2"/utf8>>)) of 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V5)))))))), V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_WastefulInt'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('un--checkTTCVersion'(V0, V11, ('un--ttcVersion'()), V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V1, V2)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSaveDefs'(V0, V1, V2, V3, V4) -> case V1 of [] -> {'Idris.Prelude.Types.Right', V2}; [E0 | E1] -> (fun (V5, V6) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V3 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E34} -> (fun (V40) -> case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> case V58 of {'Idris.Core.Context.Context.Builtin', E113, E114} -> (fun (V61, V62) -> ('un--getSaveDefs'(V0, V6, V2, V3, V4)) end(E113, E114)); _ -> begin (V63 = ('Idris.Idris2.Core.Binary.Prims':'un--initBinaryS'(16384, V4))), case V63 of {'Idris.Prelude.Types.Left', E55} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V65) -> begin (V99 = begin (V96 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_GlobalDef'(case V3 of {'Idris.Core.Context.MkDefs', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V66 end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V40, V4))), case V96 of {'Idris.Prelude.Types.Left', E87} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V98) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_GlobalDef'(V65, ('Idris.Idris2.Core.Context':'dn--un--trimNS_StripNamespace_GlobalDef'(V0, V98)), V4)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V99 of {'Idris.Prelude.Types.Left', E89} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V101) -> begin (V103 = begin (V102 = ('erlang':'get'(V65))), {'Idris.Prelude.Types.Right', V102} end), case V103 of {'Idris.Prelude.Types.Left', E91} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V105) -> ('un--getSaveDefs'(V0, V6, [{'Idris.Builtin.MkPair', ('nested--11317-4728--in--un--trimName'(V5, V6, V3, V2, V0, case V40 of {'Idris.Core.Context.Context.MkGlobalDef', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V107 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V105} | V2], V3, V4)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--getSaveDefs'(V0, V6, V2, V3, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNSas'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V3, V6} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getImportHashes'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V5, <<"TT2"/utf8>>)) of 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V5)))))))), V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_WastefulInt'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('un--checkTTCVersion'(V0, V11, ('un--ttcVersion'()), V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V1, V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V22 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V20, V21)) end end}, V1, V2))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V1, V2))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V31, V32, V33)) end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V34, V35)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V36, V37, V38)) end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V39, V40)) end end}}, V28, V29, V30)) end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V43, V44, V45)) end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V46, V47)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V48, V49, V50)) end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V51, V52)) end end}}, V41, V42)) end end}, V1, V2)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getHashes'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V5, <<"TT2"/utf8>>)) of 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V5)))))))), V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_WastefulInt'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('un--checkTTCVersion'(V0, V11, ('un--ttcVersion'()), V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V1, V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V22 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V20, V21)) end end}, V1, V2))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V1, V2))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V24, V27}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--escriptReadFromFile'(V0, V1) -> case V0 of {'Idris.Core.Directory.LocalFile', E0} -> (fun (V2) -> begin (V4 = begin (V3 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V2, V1))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E3)); {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V8))))))}, V1)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.Directory.EscriptFile', E5} -> (fun (V9) -> begin (V10 = ('un--readEscriptFile'(V9, V1))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = (('un--stringToBuffer'(V12))(V1))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Erlang.Data.Buffer':'un--rawSize'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, V15))(V1))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Utils.Binary.MkBin', V15, 0, V46, V46}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkTTCVersion'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1, V2)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.Format', V0, V1, V2}}, V3)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addTypeHint'(V0, V1, V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> begin (V15 = begin (V8 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V6, V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V4, V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"ttc.read"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13))))))} end, V3)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V4, V6, V7, 1, V3)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addGlobalDef'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V6, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V42 of {'Idris.Prelude.Types.Left', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V44) -> begin (V81 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V46) -> fun (V47) -> begin (V78 = ('Idris.Idris2.Core.Context':'un--decode'(case V11 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V48 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Builtin':'un--fst'(V46)), 0, ('Idris.Idris2.Builtin':'un--snd'(V46)), V47))), case V78 of {'Idris.Prelude.Types.Left', E66} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V80}} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V44))(V5))), case V81 of {'Idris.Prelude.Types.Left', E68} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V83) -> begin (V88 = case ('nested--11738-5101--in--un--completeDef'(V6, V7, V3, V2, V1, V0, V83)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V84) -> case V84 of {'Idris.Prelude.Types.Left', E70} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V86) -> {'Idris.Prelude.Types.Right', 0} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V87) -> ('Idris.Idris2.Core.Context':'un--addContextEntry'(V0, V2, V6, V7, V87)) end, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V88 of {'Idris.Prelude.Types.Left', E72} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V90) -> case V3 of {'Idris.Prelude.Types.Just', E74} -> (fun (V91) -> ('Idris.Idris2.Core.Context':'un--addContextAlias'(V0, ('Idris.Idris2.Core.Name':'un--asName'(V1, V91, V6)), V6, V5)) end(E74)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addAutoHint'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V9, V10, V11)) end end end, fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V12, V13, V14)) end end end}, V3, V2))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V48 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V17, V4, V26)), V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
