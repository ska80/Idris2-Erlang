-module('Idris.Idris2.Libraries.Data.StringTrie').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--foldWithKeysM,go-3384'/8,
  'nested--2757-3268--in--un--rec'/5,
  'nested--2853-3340--in--un--go'/5,
  'nested--2757-3267--in--un--end'/4,
  'dn--un--show_Show_(StringTrie $a)'/2,
  'dn--un--showPrec_Show_(StringTrie $a)'/3,
  'dn--un--map_Functor_StringTrie'/2,
  'dn--un--__Impl_Show_(StringTrie $a)'/1,
  'dn--un--__Impl_Functor_StringTrie'/4,
  'un--singleton'/2,
  'un--insertWith'/3,
  'un--insert'/3,
  'un--foldWithKeysM'/4,
  'un--empty'/0
]).
'case--foldWithKeysM,go-3384'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V4, [V8 | []]))), case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V11, V12, V13) -> ((((V12('erased'))('erased'))(('nested--2853-3340--in--un--go'(V0, V1, V2, V10, V9))))(fun (V14) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E5, E6, E7} -> (fun (V15, V16, V17) -> ((((V16('erased'))('erased'))((V2(V10))))(fun (V18) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V22, V23, V24) -> ((V23('erased'))(case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E14, E15} -> (fun (V25, V26) -> ((V25(case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E16, E17} -> (fun (V27, V28) -> ((V27(V6))(V14)) end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V18)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2757-3268--in--un--rec'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V0, ('nested--2757-3267--in--un--end'(V0, V1, V2, V3)), V4)) end, fun () -> fun (V5) -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V0, ('un--insertWith'(V1, V3, V5)), V4)) end end, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V0, V4)))).
'nested--2853-3340--in--un--go'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V11) -> ('Idris.Idris2.Data.These':'un--bifold'(('Idris.Idris2.Builtin':'un--snd'(V0)), V11)) end, case V4 of {'Idris.Data.These.This', E6} -> (fun (V12) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V16, V17, V18) -> V16 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V19) -> {'Idris.Data.These.This', V19} end, ((V1(V3))(V12)))) end(E6)); {'Idris.Data.These.That', E13} -> (fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Interfaces.MkApplicative', E17, E18, E19} -> (fun (V24, V25, V26) -> V24 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V27) -> {'Idris.Data.These.That', V27} end, ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(('Idris.Idris2.Builtin':'un--fst'(V0)), fun (V28) -> fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V30, V31) -> begin (V32 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, [V30 | []]))), case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E22, E23, E24} -> (fun (V33, V34, V35) -> ((((V34('erased'))('erased'))(('nested--2853-3340--in--un--go'(V0, V1, V2, V32, V31))))(fun (V36) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V37, V38, V39) -> ((((V38('erased'))('erased'))((V2(V32))))(fun (V40) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E28, E29, E30} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E31, E32, E33} -> (fun (V44, V45, V46) -> ((V45('erased'))(case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E34, E35} -> (fun (V47, V48) -> ((V47(case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E36, E37} -> (fun (V49, V50) -> ((V49(V28))(V36)) end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V40)) end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E38, E39} -> (fun (V51, V52) -> V52 end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(V20)))))) end(E13)); {'Idris.Data.These.Both', E40, E41} -> (fun (V53, V54) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E42, E43, E44} -> (fun (V55, V56, V57) -> case V55 of {'Idris.Prelude.Interfaces.MkApplicative', E45, E46, E47} -> (fun (V58, V59, V60) -> ((((V60('erased'))('erased'))(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E48, E49, E50} -> (fun (V86, V87, V88) -> case V86 of {'Idris.Prelude.Interfaces.MkApplicative', E51, E52, E53} -> (fun (V89, V90, V91) -> ((((V91('erased'))('erased'))(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E54, E55, E56} -> (fun (V92, V93, V94) -> case V92 of {'Idris.Prelude.Interfaces.MkApplicative', E57, E58, E59} -> (fun (V95, V96, V97) -> ((V96('erased'))(fun (V98) -> fun (V99) -> {'Idris.Data.These.Both', V98, V99} end end)) end(E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(((V1(V3))(V53)))) end(E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(('Idris.Idris2.Builtin':'un--fst'(V0)), fun (V61) -> fun (V62) -> case V62 of {'Idris.Builtin.MkPair', E60, E61} -> (fun (V63, V64) -> begin (V65 = ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, [V63 | []]))), case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E62, E63, E64} -> (fun (V66, V67, V68) -> ((((V67('erased'))('erased'))(('nested--2853-3340--in--un--go'(V0, V1, V2, V65, V64))))(fun (V69) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E65, E66, E67} -> (fun (V70, V71, V72) -> ((((V71('erased'))('erased'))((V2(V65))))(fun (V73) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E68, E69, E70} -> (fun (V74, V75, V76) -> case V74 of {'Idris.Prelude.Interfaces.MkApplicative', E71, E72, E73} -> (fun (V77, V78, V79) -> ((V78('erased'))(case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E74, E75} -> (fun (V80, V81) -> ((V80(case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E76, E77} -> (fun (V82, V83) -> ((V82(V61))(V69)) end(E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V73)) end(E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E78, E79} -> (fun (V84, V85) -> V85 end(E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(V54)))))) end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--2757-3267--in--un--end'(V0, V1, V2, V3) -> ('un--singleton'(V1, (V3({'Idris.Prelude.Types.Nothing'})))).
'dn--un--show_Show_(StringTrie $a)'(V0, V1) -> ('Idris.Idris2.Data.These':'dn--un--show_Show_((These $a) $b)'({'Idris.Builtin.MkPair', V0, {'Idris.Prelude.Show.MkShow', fun (V2) -> ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--show_Show_(StringMap $v)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V3)) end, fun (V4) -> fun (V5) -> ('dn--un--showPrec_Show_(StringTrie $a)'(V0, V4, V5)) end end}, V2)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--showPrec_Show_(StringMap $v)'({'Idris.Prelude.Show.MkShow', fun (V8) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V8)) end, fun (V9) -> fun (V10) -> ('dn--un--showPrec_Show_(StringTrie $a)'(V0, V9, V10)) end end}, V6, V7)) end end}}, V1)).
'dn--un--showPrec_Show_(StringTrie $a)'(V0, V1, V2) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V2)).
'dn--un--map_Functor_StringTrie'(V0, V1) -> case V1 of {'Idris.Data.These.This', E0} -> (fun (V2) -> {'Idris.Data.These.This', (V0(V2))} end(E0)); {'Idris.Data.These.That', E1} -> (fun (V3) -> {'Idris.Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--map_Functor_StringMap'(fun (V4) -> ('dn--un--map_Functor_StringTrie'(V0, V4)) end, V3))} end(E1)); {'Idris.Data.These.Both', E2, E3} -> (fun (V5, V6) -> {'Idris.Data.These.Both', (V0(V5)), ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--map_Functor_StringMap'(fun (V7) -> ('dn--un--map_Functor_StringTrie'(V0, V7)) end, V6))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Show_(StringTrie $a)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(StringTrie $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(StringTrie $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Functor_StringTrie'(V0, V1, V2, V3) -> ('dn--un--map_Functor_StringTrie'(V2, V3)).
'un--singleton'(V0, V1) -> case V0 of [] -> {'Idris.Data.These.This', V1}; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'un--singleton'(V2, ('un--singleton'(V3, V1))))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertWith'(V0, V1, V2) -> case V0 of [] -> ('Idris.Idris2.Data.These':'un--these'(fun (V3) -> {'Idris.Data.These.This', (V1({'Idris.Prelude.Types.Just', V3}))} end, fun (V4) -> {'Idris.Data.These.Both', (V1({'Idris.Prelude.Types.Nothing'})), V4} end, fun (V5) -> fun (V6) -> {'Idris.Data.These.Both', (V1({'Idris.Prelude.Types.Just', V5})), V6} end end, V2)); [E0 | E1] -> (fun (V7, V8) -> ('Idris.Idris2.Data.These':'un--these'(fun (V9) -> {'Idris.Data.These.Both', V9, ('Idris.Idris2.Libraries.Data.StringMap':'un--singleton'(V7, ('nested--2757-3267--in--un--end'(V7, V8, V2, V1))))} end, fun (V10) -> {'Idris.Data.These.That', ('nested--2757-3268--in--un--rec'(V7, V8, V2, V1, V10))} end, fun (V11) -> fun (V12) -> {'Idris.Data.These.Both', V11, ('nested--2757-3268--in--un--rec'(V7, V8, V2, V1, V12))} end end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insert'(V0, V1, V2) -> ('un--insertWith'(V0, fun (V3) -> V1 end, V2)).
'un--foldWithKeysM'(V0, V1, V2, V3) -> ('nested--2853-3340--in--un--go'(V0, V2, V1, [], V3)).
'un--empty'() -> {'Idris.Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'())}.
