-module('Idris.Idris2.Core.Options.Log').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--5336-2451--in--un--there'/5,
  'nested--5336-2450--in--un--here'/5,
  'nested--5016-2137--in--un--helpTopic'/1,
  'nested--5325-2445--in--un--go'/5,
  'dn--un--show_Show_LogLevel'/1,
  'dn--un--showPrec_Show_LogLevel'/2,
  'dn--un--pretty_Pretty_LogLevel'/1,
  'dn--un--prettyPrec_Pretty_LogLevel'/2,
  'dn--un--__Impl_Show_LogLevel'/0,
  'dn--un--__Impl_Pretty_LogLevel'/0,
  'un--withVerbosity'/2,
  'un--verbosity'/1,
  'un--unsafeMkLogLevel'/2,
  'un--topics'/1,
  'un--parseLogLevel'/1,
  'un--mkUnverifiedLogLevel'/2,
  'un--mkLogLevel\x{27}'/2,
  'un--mkLogLevel'/2,
  'un--knownTopics'/0,
  'un--keepLog'/2,
  'un--insertLogLevel'/2,
  'un--helpTopics'/0,
  'un--defaultLogLevel'/0,
  'un--LogLevels'/0,
  'un--KnownTopic'/1
]).
'nested--5336-2451--in--un--there'(V0, V1, V2, V3, V4) -> case V4 of [] -> 0; [E0 | E1] -> (fun (V5, V6) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 0 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.These':'un--fromThat'(V3)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V5, V7)), fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('nested--5325-2445--in--un--go'(V0, V1, V2, V6, V8)))) end)) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5336-2450--in--un--here'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Data.These':'un--fromThis'(V3)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V0, V5)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5016-2137--in--un--helpTopic'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> begin (V3 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"+"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V1))))), begin (V5 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V4) -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(V4)))) | []] end end, V2))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V3 | V5])) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5325-2445--in--un--go'(V0, V1, V2, V3, V4) -> case ('nested--5336-2450--in--un--here'(V0, V1, V2, V4, V3)) of 1 -> 1; 0 -> ('nested--5336-2451--in--un--there'(V0, V1, V2, V4, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_LogLevel'(V0) -> case V0 of {'Idris.Core.Options.Log.MkLogLevel', E0, E1} -> (fun (V1, V2) -> case V1 of [] -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)))))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_LogLevel'(V0, V1) -> ('dn--un--show_Show_LogLevel'(V1)).
'dn--un--pretty_Pretty_LogLevel'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('dn--un--show_Show_LogLevel'(V0)))).
'dn--un--prettyPrec_Pretty_LogLevel'(V0, V1) -> ('dn--un--pretty_Pretty_LogLevel'(V1)).
'dn--un--__Impl_Show_LogLevel'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_LogLevel'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_LogLevel'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_LogLevel'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_LogLevel'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_LogLevel'(V3, V4)) end end end}.
'un--withVerbosity'(V0, V1) -> case V1 of {'Idris.Core.Options.Log.MkLogLevel', E0, E1} -> (fun (V2, V3) -> {'Idris.Core.Options.Log.MkLogLevel', V2, V0} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--verbosity'(V0) -> case V0 of {'Idris.Core.Options.Log.MkLogLevel', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unsafeMkLogLevel'(V0, V1) -> {'Idris.Core.Options.Log.MkLogLevel', V0, V1}.
'un--topics'(V0) -> case V0 of {'Idris.Core.Options.Log.MkLogLevel', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parseLogLevel'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(begin (V2 = ('Idris.Idris2.Data.String':'un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $:)) end, V0))), begin (V5 = case V2 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V8 = case V2 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V6, V7) -> V7 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', fun (V9) -> {'Idris.Core.Options.Log.MkLogLevel', [], V9} end, V5})); [E4 | E5] -> (fun (V10, V11) -> case V11 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', fun (V12) -> ('un--mkUnverifiedLogLevel'(V5, V12)) end, V10})); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end end end, fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Data.String':'un--parsePositive'({'Idris.Prelude.Num.MkNum', fun (V16) -> fun (V17) -> (V16 + V17) end end, fun (V18) -> fun (V19) -> (V18 * V19) end end, fun (V20) -> V20 end}, V15)), fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'((V14(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V21)))))) end)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'un--mkUnverifiedLogLevel'(V0, V1) -> case V0 of <<""/utf8>> -> ('un--mkLogLevel\x{27}'({'Idris.Prelude.Types.Nothing'}, V1)); _ -> ('un--mkLogLevel\x{27}'({'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.String':'un--split'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $.)) end, V0))}, V1)) end.
'un--mkLogLevel\x{27}'(V0, V1) -> {'Idris.Core.Options.Log.MkLogLevel', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V2) -> ('Idris.Idris2.Data.List1':'un--forget'(V2)) end end, V0)), V1}.
'un--mkLogLevel'(V0, V1) -> ('un--mkUnverifiedLogLevel'(V0, V1)).
'un--knownTopics'() -> [{'Idris.Builtin.MkPair', <<"auto"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"builtin.Natural"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"builtin.Natural.addTransform"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"builtin.NaturalToInteger"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"builtin.NaturalToInteger.addTransforms"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"builtin.IntegerToNatural"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"builtin.IntegerToNatural.addTransforms"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compile.casetree"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compile.casetree.clauses"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compile.casetree.getpmdef"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compile.casetree.intermediate"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compile.casetree.measure"/utf8>>, {'Idris.Prelude.Types.Just', <<"Log the node counts of each runtime case tree."/utf8>>}} | [{'Idris.Builtin.MkPair', <<"compile.casetree.pick"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compile.casetree.partition"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compiler.cse"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compiler.identity"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compiler.inline.eval"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compiler.interpreter"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compiler.refc"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compiler.refc.cc"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"compiler.scheme.chez"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"coverage"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"coverage.empty"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"coverage.missing"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"coverage.recover"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.data"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.data.constructor"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.data.parameters"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.def"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.def.clause"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.def.clause.impossible"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.def.clause.with"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.def.impossible"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.def.lhs"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.def.lhs.implicits"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.param"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.record"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.record.field"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.record.projection"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.record.projection.prefix"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"declare.type"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"desugar.idiom"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"doc.record"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"doc.module"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.ambiguous"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.app.var"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.app.lhs"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.as"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.bindnames"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.binder"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.case"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.def.local"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.delay"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.hole"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.implicits"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.implementation"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.interface"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.interface.default"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.local"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.prune"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.record"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.retry"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.rewrite"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.unify"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.update"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"elab.with"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"eval.casetree"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"eval.casetree.stuck"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"eval.eta"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"eval.stuck"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"idemode.hole"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"ide-mode.highlight"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"ide-mode.highlight.alias"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"ide-mode.send"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"import"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"import.file"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"interaction.casesplit"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"interaction.generate"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"interaction.search"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"metadata.names"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"module.hash"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"quantity"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"quantity.hole"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"quantity.hole.update"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"repl.eval"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"resugar.var"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"specialise"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.positivity"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.requirement"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.calc"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.guarded"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange.checkCall"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange.checkCall.inPath"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange.checkCall.inPathNot.restart"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange.inPath"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange.isTerminating"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"totality.termination.sizechange.needsChecking"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"transform.lhs"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"transform.rhs"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"ttc.read"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"ttc.write"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"typesearch.equiv"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unelab.case"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unelab.var"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.application"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.binder"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.constant"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.constraint"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.delay"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.equal"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.head"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.hole"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.instantiate"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.invertible"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.meta"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.noeta"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.postpone"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.retry"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.search"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Builtin.MkPair', <<"unify.unsolved"/utf8>>, {'Idris.Prelude.Types.Nothing'}} | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]].
'un--keepLog'(V0, V1) -> case V0 of {'Idris.Core.Options.Log.MkLogLevel', E0, E1} -> (fun (V2, V3) -> case V3 of 0 -> 1; _ -> ('nested--5325-2445--in--un--go'(V3, V2, V1, V2, V1)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertLogLevel'(V0, V1) -> case V0 of {'Idris.Core.Options.Log.MkLogLevel', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Libraries.Data.StringTrie':'un--insert'(V2, V3, V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--helpTopics'() -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> ('nested--5016-2137--in--un--helpTopic'(V0)) end, ('un--knownTopics'()))))))).
'un--defaultLogLevel'() -> ('Idris.Idris2.Libraries.Data.StringTrie':'un--singleton'([], 0)).
'un--LogLevels'() -> {'Idris.Libraries.Data.StringTrie.StringTrie', {'Idris.Prelude.Types.Nat'}}.
'un--KnownTopic'(V0) -> {'Idris.Data.Maybe.IsJust', 'erased', ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, V0, ('un--knownTopics'())))}.
