-module('Idris.Idris2.TTImp.Interactive.ExprSearch').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--searchType-7280'/12,
  'case--case block in case block in searchIfHole-2214'/17,
  'nested--12253-3620--in--un--visible'/16,
  'nested--11331-2829--in--un--usableName'/13,
  'nested--10323-1945--in--un--usableName'/7,
  'nested--14378-5518--in--un--toApp'/14,
  'nested--12559-3888--in--un--structDiffTm'/13,
  'nested--12559-3887--in--un--structDiff'/13,
  'nested--9901-1539--in--un--returnBatch'/8,
  'nested--15151-6182--in--un--matchable'/16,
  'nested--18210-8817--in--un--lookupHoleName'/10,
  'nested--10315-8205--in--un--lookupHoleName'/11,
  'nested--15590-6557--in--un--isSingleCon'/14,
  'nested--17967-8588--in--un--getLHS'/5,
  'nested--13410-4660--in--un--findPos'/19,
  'nested--13410-4659--in--un--findDirect'/20,
  'nested--9742-1392--in--un--count'/6,
  'nested--10962-2482--in--un--continue'/8,
  'nested--12559-3885--in--un--argDiff'/13,
  'nested--12559-3886--in--un--appsDiff'/15,
  'nested--15151-6183--in--un--applyLocal'/17,
  'dn--un--map_Functor_Search'/2,
  'dn--un--__Impl_Functor_Search'/4,
  'un--usableLocal'/3,
  'un--trySearch'/4,
  'un--tryRecursive'/12,
  'un--tryIntermediateWith'/12,
  'un--tryIntermediateRec'/12,
  'un--tryIntermediate'/10,
  'un--traverse'/3,
  'un--searchType'/11,
  'un--searchSort'/6,
  'un--searchNames'/12,
  'un--searchName'/12,
  'un--searchN'/5,
  'un--searchLocalWith'/13,
  'un--searchLocal'/10,
  'un--searchIfHole'/9,
  'un--searchHole'/12,
  'un--search'/9,
  'un--one'/2,
  'un--noResult'/1,
  'un--nextResult'/4,
  'un--mkCandidates'/7,
  'un--makeHelper'/11,
  'un--initSearchOpts'/2,
  'un--getSuccessful'/13,
  'un--getLHSData'/4,
  'un--getAllEnv'/4,
  'un--firstSuccess'/4,
  'un--firstLinearOK'/6,
  'un--filterS'/3,
  'un--exprSearchOpts'/8,
  'un--exprSearchN'/8,
  'un--exprSearch\x{27}'/7,
  'un--exprSearch'/7,
  'un--explicit'/1,
  'un--combine'/6
]).
'case--searchType-7280'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E53, E54} -> (fun (V12, V13) -> fun (V14) -> case V12 of {'Idris.Core.TT.Ref', E108, E109, E110} -> (fun (V15, V16, V17) -> case V16 of {'Idris.Core.TT.TyCon', E164, E165} -> (fun (V18, V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E166} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V23) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V13)), V19)) of 1 -> begin (V24 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V10, V7, 0, V17, V14))), case V24 of {'Idris.Prelude.Types.Left', E168} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V26) -> begin (V58 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V38)) end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V42, V43, V44, V45)) end end end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V50, V51, V52)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V53, V54)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V55) -> ('Idris.Idris2.Builtin':'un--snd'(V55)) end, case V26 of {'Idris.Core.Context.MkSearchData', E170, E171} -> (fun (V56, V57) -> V57 end(E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V62 = ('Idris.Idris2.Core.Context.Log':'un--log'(V10, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Hints found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V60, V61)) end end}, V58)))))))) end, V14))), case V62 of {'Idris.Prelude.Types.Left', E172} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V64) -> begin (V66 = [('un--searchLocal'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | [fun (V65) -> ('un--searchNames'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, V58, V65)) end | []]]), begin (V79 = case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E174, E175, E176, E177, E178, E179, E180, E181, E182, E183} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> case V69 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E184} -> (fun (V77) -> [fun (V78) -> ('un--tryRecursive'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, V77, V78)) end | []] end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E174, E175, E176, E177, E178, E179, E180, E181, E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V101 = case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E195, E196, E197, E198, E199, E200, E201, E202, E203, E204} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V88 end(E195, E196, E197, E198, E199, E200, E201, E202, E203, E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> [fun (V90) -> ('un--tryIntermediateRec'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E185, E186, E187, E188, E189, E190, E191, E192, E193, E194} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V93 end(E185, E186, E187, E188, E189, E190, E191, E192, E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V90)) end | []]; 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V112 = case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E205, E206, E207, E208, E209, E210, E211, E212, E213, E214} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V107 end(E205, E206, E207, E208, E209, E210, E211, E212, E213, E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V123 = case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E215, E216, E217, E218, E219, E220, E221, E222, E223, E224} -> (fun (V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V117 end(E215, E216, E217, E218, E219, E220, E221, E222, E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V79, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V112, V66)))); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V112, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V66, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V79, V101)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--getSuccessful'(V0, V10, V9, V8, V7, V6, V5, 1, V4, V2, V3, V123, V14)) end end end end end end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--noResult'(V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164, E165)); _ -> begin (V124 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Searching locals only at"/utf8>> end, V2, V14))), case V124 of {'Idris.Prelude.Types.Left', E111} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V126) -> begin (V137 = case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E113, E114, E115, E116, E117, E118, E119, E120, E121, E122} -> (fun (V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> V132 end(E113, E114, E115, E116, E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V169 = case case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152} -> (fun (V138, V139, V140, V141, V142, V143, V144, V145, V146, V147) -> V142 end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V148, V149, V150, V151, V152, V153, V154, V155, V156, V157) -> V156 end(E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> []; 0 -> [fun (V158) -> ('un--tryIntermediateRec'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E123, E124, E125, E126, E127, E128, E129, E130, E131, E132} -> (fun (V159, V160, V161, V162, V163, V164, V165, V166, V167, V168) -> V161 end(E123, E124, E125, E126, E127, E128, E129, E130, E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V158)) end | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--getSuccessful'(V0, V10, V9, V8, V7, V6, V5, 1, V4, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V137, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([('un--searchLocal'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E153, E154, E155, E156, E157, E158, E159, E160, E161, E162} -> (fun (V170, V171, V172, V173, V174, V175, V176, V177, V178, V179) -> case V172 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E163} -> (fun (V180) -> [fun (V181) -> ('un--tryRecursive'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, V180, V181)) end | []] end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E153, E154, E155, E156, E157, E158, E159, E160, E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V169)))))), V14)) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E108, E109, E110)); _ -> begin (V182 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Searching locals only at"/utf8>> end, V2, V14))), case V182 of {'Idris.Prelude.Types.Left', E55} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V184) -> begin (V195 = case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V185, V186, V187, V188, V189, V190, V191, V192, V193, V194) -> V190 end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V227 = case case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V196, V197, V198, V199, V200, V201, V202, V203, V204, V205) -> V200 end(E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V206, V207, V208, V209, V210, V211, V212, V213, V214, V215) -> V214 end(E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> []; 0 -> [fun (V216) -> ('un--tryIntermediateRec'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V217, V218, V219, V220, V221, V222, V223, V224, V225, V226) -> V219 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V216)) end | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--getSuccessful'(V0, V10, V9, V8, V7, V6, V5, 1, V4, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V195, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([('un--searchLocal'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E97, E98, E99, E100, E101, E102, E103, E104, E105, E106} -> (fun (V228, V229, V230, V231, V232, V233, V234, V235, V236, V237) -> case V230 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E107} -> (fun (V238) -> [fun (V239) -> ('un--tryRecursive'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, V238, V239)) end | []] end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E97, E98, E99, E100, E101, E102, E103, E104, E105, E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V227)))))), V14)) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E53, E54)); _ -> fun (V240) -> begin (V241 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V10, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Searching locals only at"/utf8>> end, V2, V240))), case V241 of {'Idris.Prelude.Types.Left', E0} -> (fun (V242) -> {'Idris.Prelude.Types.Left', V242} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V243) -> begin (V254 = case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V244, V245, V246, V247, V248, V249, V250, V251, V252, V253) -> V249 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> []; 0 -> [('un--tryIntermediate'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V286 = case case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V255, V256, V257, V258, V259, V260, V261, V262, V263, V264) -> V259 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V265, V266, V267, V268, V269, V270, V271, V272, V273, V274) -> V273 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> []; 0 -> [fun (V275) -> ('un--tryIntermediateRec'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V276, V277, V278, V279, V280, V281, V282, V283, V284, V285) -> V278 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V275)) end | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--getSuccessful'(V0, V10, V9, V8, V7, V6, V5, 1, V4, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V254, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([('un--searchLocal'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3)) | []], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V287, V288, V289, V290, V291, V292, V293, V294, V295, V296) -> case V289 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E52} -> (fun (V297) -> [fun (V298) -> ('un--tryRecursive'(V0, V10, V9, V8, V7, V6, V5, V4, V2, V3, V297, V298)) end | []] end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V286)))))), V240)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in searchIfHole-2214'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of {'Idris.Core.Context.Context.Hole', E7, E8} -> (fun (V17, V18) -> begin (V29 = ('un--search'(V8, V7, V6, V5, V11, case V4 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V19, V20, V21, V9, 1, V24, V25, V26, V27, V28} end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, {'Idris.Core.Name.Resolved', V10}, V16))), case V29 of {'Idris.Prelude.Types.Left', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V31) -> ('un--traverse'(fun (V32) -> fun (V33) -> case V32 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V34, V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V0, V12, V2, ('Idris.Idris2.Core.UnifyState':'un--applyTo'(V0, V5, ('Idris.Idris2.Core.TT':'un--embed'(V34)), V2)), V33))), case V36 of {'Idris.Prelude.Types.Left', E23} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V38, V35}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V31, V16)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> begin (V44 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V8, V0, V12, V2, case V1 of {'Idris.Core.AutoSearch.MkArgInfo', E0, E1, E2, E3, E4} -> (fun (V39, V40, V41, V42, V43) -> V42 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16))), case V44 of {'Idris.Prelude.Types.Left', E5} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V46) -> ('un--one'({'Idris.Builtin.MkPair', V46, []}, V16)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--12253-3620--in--un--visible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V16 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V14, V12))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E2} -> (fun (V19) -> case ('Idris.Idris2.Core.Context':'un--visibleInAny'(V13, V14, case V19 of {'Idris.Core.Context.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V29 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V14, V19}}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11331-2829--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Name.UN', E0} -> (fun (V13) -> 1 end(E0)); {'Idris.Core.Name.NS', E1, E2} -> (fun (V14, V15) -> ('nested--11331-2829--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15)) end(E1, E2)); {'Idris.Core.Name.Nested', E3, E4} -> (fun (V16, V17) -> ('nested--11331-2829--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V17)) end(E3, E4)); _ -> 0 end.
'nested--10323-1945--in--un--usableName'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Name.UN', E0} -> (fun (V7) -> 1 end(E0)); _ -> 0 end.
'nested--14378-5518--in--un--toApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.TT.Meta', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Core.TT':'un--apply'(V14, {'Idris.Core.TT.Ref', V14, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V16}}, V17)) end(E0, E1, E2, E3)); _ -> V13 end.
'nested--12559-3888--in--un--structDiffTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> ('nested--12559-3887--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12559-3887--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V11)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V12)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> ('nested--12559-3886--in--un--appsDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V15, V14, V16)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9901-1539--in--un--returnBatch'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> ('un--searchSort'(V4, V3, V2, V6, V0, V7)); [E0 | E1] -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', V8, fun (V10) -> ('nested--9901-1539--in--un--returnBatch'(V0, V1, V2, V3, V4, V9, V6, V10)) end}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15151-6182--in--un--matchable'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> begin (V24 = (((V19(V13))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V6, {'Idris.Core.TT.Erased', V16, 0}))))(V15))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> ('nested--15151-6182--in--un--matchable'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V26, V15)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V27, V28, V29, V30, V31) -> {'Idris.Prelude.Types.Right', 1} end(E10, E11, E12, E13, E14)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'nested--18210-8817--in--un--lookupHoleName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V7, case V8 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V40 of {'Idris.Prelude.Types.Left', E30} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E32} -> (fun (V43) -> case V43 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V44, V45) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V44, V45}}}} end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V76 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V7, case V8 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V46 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V76 of {'Idris.Prelude.Types.Left', E65} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V78) -> case V78 of [E67 | E68] -> (fun (V79, V80) -> case V80 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V79}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E67, E68)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10315-8205--in--un--lookupHoleName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExactI'(V8, V9))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Just', E2} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V15, V16}}}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V17 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V8, V9))(V10))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> case V19 of [E7 | E8] -> (fun (V20, V21) -> case V21 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V20}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--15590-6557--in--un--isSingleCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V18, V19, V20, V21) -> begin (V22 = (((V17(V11))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V14, 0}))))(V13))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> ('nested--15590-6557--in--un--isSingleCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V24, V13)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V25, V26, V27, V28, V29) -> begin (V60 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V26, case V11 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V30 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13))), case V60 of {'Idris.Prelude.Types.Left', E45} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V62) -> case V62 of {'Idris.Prelude.Types.Just', E47} -> (fun (V63) -> case V63 of {'Idris.Core.Context.Context.TCon', E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71) -> case V70 of [E56 | E57] -> (fun (V72, V73) -> case V73 of [] -> {'Idris.Prelude.Types.Right', 1}; _ -> {'Idris.Prelude.Types.Right', 0} end end(E56, E57)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E48, E49, E50, E51, E52, E53, E54, E55)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E47)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13, E14)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'nested--17967-8588--in--un--getLHS'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E3, E4, E5, E6} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.PVar', E10, E11, E12, E13} -> (fun (V9, V10, V11, V12) -> ('nested--17967-8588--in--un--getLHS'(V0, V1, V2, [V6 | V3], V8)) end(E10, E11, E12, E13)); {'Idris.Core.TT.PLet', E14, E15, E16, E17} -> (fun (V13, V14, V15, V16) -> ('nested--17967-8588--in--un--getLHS'(V0, V1, V2, [V6 | V3], V8)) end(E14, E15, E16, E17)); _ -> case ('Idris.Idris2.Core.TT':'un--getFn'(V4)) of {'Idris.Core.TT.Ref', E7, E8, E9} -> (fun (V17, V18, V19) -> {'Idris.Prelude.Types.Just', {'Idris.TTImp.Interactive.ExprSearch.MkRecData', V3, V19, V4}} end(E7, E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end end(E3, E4, E5, E6)); _ -> case ('Idris.Idris2.Core.TT':'un--getFn'(V4)) of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V20, V21, V22) -> {'Idris.Prelude.Types.Just', {'Idris.TTImp.Interactive.ExprSearch.MkRecData', V3, V22, V4}} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end.
'nested--13410-4660--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V19, V20, V21, V22, V23) -> case V23 of [E5 | E6] -> (fun (V24, V25) -> case V24 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V26, V27) -> case V25 of [E9 | E10] -> (fun (V28, V29) -> case V28 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V30, V31) -> fun (V32) -> case V29 of [] -> ('un--getSuccessful'(V0, V13, V12, V11, V10, V8, V7, 0, V6, V5, V4, [fun (V33) -> ('nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V33)) end | [fun (V34) -> begin (V41 = begin (V35 = ('Idris.Idris2.Core.Context':'un--fstName'(V13, V34))), case V35 of {'Idris.Prelude.Types.Left', E13} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V37) -> (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"No fst"/utf8>>}, V38)) end end, fun () -> fun (V39) -> fun (V40) -> {'Idris.Prelude.Types.Right', V39} end end end, V37))(V34)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E15} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V43) -> begin (V50 = begin (V44 = ('Idris.Idris2.Core.Context':'un--sndName'(V13, V34))), case V44 of {'Idris.Prelude.Types.Left', E17} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V46) -> (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"No snd"/utf8>>}, V47)) end end, fun () -> fun (V48) -> fun (V49) -> {'Idris.Prelude.Types.Right', V48} end end end, V46))(V34)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V50 of {'Idris.Prelude.Types.Left', E19} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Context':'un--isPairType'(V13, V20, V34))), case V53 of {'Idris.Prelude.Types.Left', E21} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V55) -> case V55 of 1 -> begin (V56 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V34))), case V56 of {'Idris.Prelude.Types.Left', E23} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V13, V0, V58, V6, V27, V34))), case V59 of {'Idris.Prelude.Types.Left', E25} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V13, V0, V58, V6, V31, V34))), case V62 of {'Idris.Prelude.Types.Left', E27} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V64) -> ('un--getSuccessful'(V0, V13, V12, V11, V10, V8, V7, 0, V6, V5, V4, [fun (V65) -> begin (V66 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V27))(V65))), case V66 of {'Idris.Prelude.Types.Left', E29} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V68) -> (('nested--13410-4660--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, fun (V69) -> ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Func'}, V43}, [{'Idris.Builtin.MkPair', V26, V61} | [{'Idris.Builtin.MkPair', V30, V64} | [{'Idris.Builtin.MkPair', V10, (V16(V69))} | []]]])) end, V68, V18))(V65)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end | [fun (V70) -> begin (V71 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V13, V0, V14, V31))(V70))), case V71 of {'Idris.Prelude.Types.Left', E31} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V73) -> (('nested--13410-4660--in--un--findPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, fun (V74) -> ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Func'}, V52}, [{'Idris.Builtin.MkPair', V26, V61} | [{'Idris.Builtin.MkPair', V30, V64} | [{'Idris.Builtin.MkPair', V10, (V16(V74))} | []]]])) end, V73, V18))(V70)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end | []]], V34)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--noResult'(V34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end | []]], V32)); _ -> ('nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V32)) end end end(E11, E12)); _ -> fun (V75) -> ('nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V75)) end end end(E9, E10)); _ -> fun (V76) -> ('nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V76)) end end end(E7, E8)); _ -> fun (V77) -> ('nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V77)) end end end(E5, E6)); _ -> fun (V78) -> ('nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V78)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V79) -> ('nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V79)) end end.
'nested--13410-4659--in--un--findDirect'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V20 = ('Idris.Idris2.Core.AutoSearch':'un--mkArgs'(V0, V13, V11, V10, V8, V6, V17, V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V23, V24) -> case ('un--usableLocal'(V10, V6, V17)) of 1 -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V13, V11, fun (V25) -> begin (V26 = case case ('Idris.Idris2.Data.List':'un--isNil'(V23)) of 1 -> 0; 0 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Must apply function"/utf8>>}, V25)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V45 = (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V29, V30, V31, V32, V33, V34, V35, V36)) end end end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end}, V0, V13, V11, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V10, V6))(V18))(V17))(V25))), case V45 of {'Idris.Prelude.Types.Left', E6} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V47) -> case V47 of {'Idris.Core.Unify.MkUnifyResult', E8, E9, E10, E11} -> (fun (V48, V49, V50, V51) -> case V48 of [] -> (('un--mkCandidates'(V0, V13, V11, V10, (V16(V15)), [], []))(V25)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t use directly"/utf8>>}, V25)) end end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V52) -> begin (V69 = (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V53, V54, V55, V56, V57, V58, V59, V60)) end end end end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V61, V62, V63, V64, V65, V66, V67, V68)) end end end end end end end end}, V0, V13, V11, ('Idris.Idris2.Core.Unify':'un--inTerm'()), V10, V6))(V18))(V24))(V52))), case V69 of {'Idris.Prelude.Types.Left', E12} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V71) -> case V71 of {'Idris.Core.Unify.MkUnifyResult', E14, E15, E16, E17} -> (fun (V72, V73, V74, V75) -> case V72 of [] -> begin (V77 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V76) -> ('un--searchIfHole'(V0, V13, V12, V11, V10, V7, V4, V6, V76)) end, V23, [], V52))), case V77 of {'Idris.Prelude.Types.Left', E18} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V79) -> (('un--mkCandidates'(V0, V13, V11, V10, (V16(V15)), [], V79))(V52)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--noResult'(V52)) end end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V19)); 0 -> ('un--noResult'(V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9742-1392--in--un--count'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end}} end end()); _ -> case V4 of 0 -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end}} end; _ -> begin (V10 = (V4 - 1)), case V10 of 0 -> fun (V11) -> case V5 of {'Idris.TTImp.Interactive.ExprSearch.Result', E16, E17} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V12 | []], V13}} end(E16, E17)); _ -> case V5 of {'Idris.TTImp.Interactive.ExprSearch.Result', E8, E9} -> (fun (V14, V15) -> begin (V19 = begin (V16 = (V15(V11))), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> (('nested--9742-1392--in--un--count'(V0, V1, V2, V3, V10, V18))(V11)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V19 of {'Idris.Prelude.Types.Left', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V22, V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V14 | V22], V23}} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V24) -> case V5 of {'Idris.TTImp.Interactive.ExprSearch.Result', E0, E1} -> (fun (V25, V26) -> begin (V30 = begin (V27 = (V26(V24))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> (('nested--9742-1392--in--un--count'(V0, V1, V2, V3, V10, V29))(V24)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V33, V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V25 | V33], V34}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'nested--10962-2482--in--un--continue'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'put'(V2, V4))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V13 = begin (V12 = ('erlang':'put'(V3, V5))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> ('un--firstSuccess'(V3, V2, V6, V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Local', E64, E65, E66} -> (fun (V13, V14, V15) -> 0 end(E64, E65, E66)); {'Idris.Core.TT.Ref', E67, E68, E69} -> (fun (V16, V17, V18) -> case V12 of {'Idris.Core.TT.Ref', E134, E135, E136} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V18, V21)) end(E134, E135, E136)); _ -> case V12 of {'Idris.Core.TT.Bind', E130, E131, E132, E133} -> (fun (V22, V23, V24, V25) -> 0 end(E130, E131, E132, E133)); _ -> case V11 of {'Idris.Core.TT.App', E86, E87, E88} -> (fun (V26, V27, V28) -> case V12 of {'Idris.Core.TT.App', E105, E106, E107} -> (fun (V29, V30, V31) -> case ('nested--12559-3887--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V27, V30)) of 1 -> 1; 0 -> ('nested--12559-3887--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V28, V31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E105, E106, E107)); _ -> case V12 of {'Idris.Core.TT.Erased', E103, E104} -> (fun (V32, V33) -> 0 end(E103, E104)); _ -> case V11 of {'Idris.Core.TT.TType', E93} -> (fun (V34) -> case V12 of {'Idris.Core.TT.TType', E98} -> (fun (V35) -> 0 end(E98)); _ -> case V12 of {'Idris.Core.TT.As', E94, E95, E96, E97} -> (fun (V36, V37, V38, V39) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V39)) end(E94, E95, E96, E97)); _ -> 1 end end end(E93)); {'Idris.Core.TT.As', E99, E100, E101, E102} -> (fun (V40, V41, V42, V43) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V43, V12)) end(E99, E100, E101, E102)); _ -> case V12 of {'Idris.Core.TT.As', E89, E90, E91, E92} -> (fun (V44, V45, V46, V47) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V47)) end(E89, E90, E91, E92)); _ -> 1 end end end end end(E86, E87, E88)); {'Idris.Core.TT.PrimVal', E108, E109} -> (fun (V48, V49) -> case V12 of {'Idris.Core.TT.PrimVal', E126, E127} -> (fun (V50, V51) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V49, V51)) end(E126, E127)); _ -> case V12 of {'Idris.Core.TT.Erased', E124, E125} -> (fun (V52, V53) -> 0 end(E124, E125)); _ -> case V11 of {'Idris.Core.TT.TType', E114} -> (fun (V54) -> case V12 of {'Idris.Core.TT.TType', E119} -> (fun (V55) -> 0 end(E119)); _ -> case V12 of {'Idris.Core.TT.As', E115, E116, E117, E118} -> (fun (V56, V57, V58, V59) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V59)) end(E115, E116, E117, E118)); _ -> 1 end end end(E114)); {'Idris.Core.TT.As', E120, E121, E122, E123} -> (fun (V60, V61, V62, V63) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V63, V12)) end(E120, E121, E122, E123)); _ -> case V12 of {'Idris.Core.TT.As', E110, E111, E112, E113} -> (fun (V64, V65, V66, V67) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V67)) end(E110, E111, E112, E113)); _ -> 1 end end end end end(E108, E109)); {'Idris.Core.TT.Erased', E128, E129} -> (fun (V68, V69) -> 0 end(E128, E129)); _ -> case V12 of {'Idris.Core.TT.Erased', E84, E85} -> (fun (V70, V71) -> 0 end(E84, E85)); _ -> case V11 of {'Idris.Core.TT.TType', E74} -> (fun (V72) -> case V12 of {'Idris.Core.TT.TType', E79} -> (fun (V73) -> 0 end(E79)); _ -> case V12 of {'Idris.Core.TT.As', E75, E76, E77, E78} -> (fun (V74, V75, V76, V77) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V77)) end(E75, E76, E77, E78)); _ -> 1 end end end(E74)); {'Idris.Core.TT.As', E80, E81, E82, E83} -> (fun (V78, V79, V80, V81) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V81, V12)) end(E80, E81, E82, E83)); _ -> case V12 of {'Idris.Core.TT.As', E70, E71, E72, E73} -> (fun (V82, V83, V84, V85) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V85)) end(E70, E71, E72, E73)); _ -> 1 end end end end end end end(E67, E68, E69)); {'Idris.Core.TT.Bind', E137, E138, E139, E140} -> (fun (V86, V87, V88, V89) -> 0 end(E137, E138, E139, E140)); _ -> case V12 of {'Idris.Core.TT.Bind', E60, E61, E62, E63} -> (fun (V90, V91, V92, V93) -> 0 end(E60, E61, E62, E63)); _ -> case V11 of {'Idris.Core.TT.App', E16, E17, E18} -> (fun (V94, V95, V96) -> case V12 of {'Idris.Core.TT.App', E35, E36, E37} -> (fun (V97, V98, V99) -> case ('nested--12559-3887--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V95, V98)) of 1 -> 1; 0 -> ('nested--12559-3887--in--un--structDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V96, V99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37)); _ -> case V12 of {'Idris.Core.TT.Erased', E33, E34} -> (fun (V100, V101) -> 0 end(E33, E34)); _ -> case V11 of {'Idris.Core.TT.TType', E23} -> (fun (V102) -> case V12 of {'Idris.Core.TT.TType', E28} -> (fun (V103) -> 0 end(E28)); _ -> case V12 of {'Idris.Core.TT.As', E24, E25, E26, E27} -> (fun (V104, V105, V106, V107) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V107)) end(E24, E25, E26, E27)); _ -> 1 end end end(E23)); {'Idris.Core.TT.As', E29, E30, E31, E32} -> (fun (V108, V109, V110, V111) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V111, V12)) end(E29, E30, E31, E32)); _ -> case V12 of {'Idris.Core.TT.As', E19, E20, E21, E22} -> (fun (V112, V113, V114, V115) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V115)) end(E19, E20, E21, E22)); _ -> 1 end end end end end(E16, E17, E18)); {'Idris.Core.TT.PrimVal', E38, E39} -> (fun (V116, V117) -> case V12 of {'Idris.Core.TT.PrimVal', E56, E57} -> (fun (V118, V119) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V117, V119)) end(E56, E57)); _ -> case V12 of {'Idris.Core.TT.Erased', E54, E55} -> (fun (V120, V121) -> 0 end(E54, E55)); _ -> case V11 of {'Idris.Core.TT.TType', E44} -> (fun (V122) -> case V12 of {'Idris.Core.TT.TType', E49} -> (fun (V123) -> 0 end(E49)); _ -> case V12 of {'Idris.Core.TT.As', E45, E46, E47, E48} -> (fun (V124, V125, V126, V127) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V127)) end(E45, E46, E47, E48)); _ -> 1 end end end(E44)); {'Idris.Core.TT.As', E50, E51, E52, E53} -> (fun (V128, V129, V130, V131) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V131, V12)) end(E50, E51, E52, E53)); _ -> case V12 of {'Idris.Core.TT.As', E40, E41, E42, E43} -> (fun (V132, V133, V134, V135) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V135)) end(E40, E41, E42, E43)); _ -> 1 end end end end end(E38, E39)); {'Idris.Core.TT.Erased', E58, E59} -> (fun (V136, V137) -> 0 end(E58, E59)); _ -> case V12 of {'Idris.Core.TT.Erased', E14, E15} -> (fun (V138, V139) -> 0 end(E14, E15)); _ -> case V11 of {'Idris.Core.TT.TType', E4} -> (fun (V140) -> case V12 of {'Idris.Core.TT.TType', E9} -> (fun (V141) -> 0 end(E9)); _ -> case V12 of {'Idris.Core.TT.As', E5, E6, E7, E8} -> (fun (V142, V143, V144, V145) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V145)) end(E5, E6, E7, E8)); _ -> 1 end end end(E4)); {'Idris.Core.TT.As', E10, E11, E12, E13} -> (fun (V146, V147, V148, V149) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V149, V12)) end(E10, E11, E12, E13)); _ -> case V12 of {'Idris.Core.TT.As', E0, E1, E2, E3} -> (fun (V150, V151, V152, V153) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V153)) end(E0, E1, E2, E3)); _ -> 1 end end end end end end.
'nested--12559-3886--in--un--appsDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V11 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V15, V16, V17) -> case V16 of {'Idris.Core.TT.DataCon', E11, E12} -> (fun (V18, V19) -> case V12 of {'Idris.Core.TT.Ref', E21, E22, E23} -> (fun (V20, V21, V22) -> case V21 of {'Idris.Core.TT.DataCon', E32, E33} -> (fun (V23, V24) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V22)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V40, V41, V42, V43)) end end end end end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V45)) end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V48, V49, V50)) end end end end end}, fun (V51) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V52) -> fun (V53) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V52, V53)) end end, V51)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V13, V14)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> case V12 of {'Idris.Core.TT.Ref', E29, E30, E31} -> (fun (V54, V55, V56) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V17, V56)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V13)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V14)))) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V68)) end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V72, V73, V74, V75)) end end end end end end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V77)) end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V80, V81, V82)) end end end end end}, fun (V83) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V84) -> fun (V85) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V84, V85)) end end, V83)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V13, V14)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31)); _ -> case V16 of {'Idris.Core.TT.DataCon', E24, E25} -> (fun (V86, V87) -> case V12 of {'Idris.Core.TT.Local', E26, E27, E28} -> (fun (V88, V89, V90) -> 1 end(E26, E27, E28)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end(E24, E25)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end end end(E21, E22, E23)); _ -> case V12 of {'Idris.Core.TT.Ref', E18, E19, E20} -> (fun (V91, V92, V93) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V17, V93)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V13)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V14)))) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V96, V97, V98)) end end end end end, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V101, V102, V103)) end end end end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V105)) end end, fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V109, V110, V111, V112)) end end end end end end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V114)) end end, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V117, V118, V119)) end end end end end}, fun (V120) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V121) -> fun (V122) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V121, V122)) end end, V120)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V13, V14)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19, E20)); _ -> case V16 of {'Idris.Core.TT.DataCon', E13, E14} -> (fun (V123, V124) -> case V12 of {'Idris.Core.TT.Local', E15, E16, E17} -> (fun (V125, V126, V127) -> 1 end(E15, E16, E17)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end(E13, E14)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end end end(E11, E12)); {'Idris.Core.TT.TyCon', E34, E35} -> (fun (V128, V129) -> case V12 of {'Idris.Core.TT.Ref', E44, E45, E46} -> (fun (V130, V131, V132) -> case V131 of {'Idris.Core.TT.TyCon', E55, E56} -> (fun (V133, V134) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V132)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V137, V138, V139)) end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V142, V143, V144)) end end end end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V146)) end end, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V150, V151, V152, V153)) end end end end end end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V155)) end end, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V158, V159, V160)) end end end end end}, fun (V161) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V162) -> fun (V163) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V162, V163)) end end, V161)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V13, V14)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56)); _ -> case V12 of {'Idris.Core.TT.Ref', E52, E53, E54} -> (fun (V164, V165, V166) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V17, V166)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V13)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V14)))) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V169, V170, V171)) end end end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V174, V175, V176)) end end end end end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V178)) end end, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V182, V183, V184, V185)) end end end end end end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V187)) end end, fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V190, V191, V192)) end end end end end}, fun (V193) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V194) -> fun (V195) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V194, V195)) end end, V193)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V13, V14)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53, E54)); _ -> case V16 of {'Idris.Core.TT.DataCon', E47, E48} -> (fun (V196, V197) -> case V12 of {'Idris.Core.TT.Local', E49, E50, E51} -> (fun (V198, V199, V200) -> 1 end(E49, E50, E51)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end(E47, E48)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end end end(E44, E45, E46)); _ -> case V12 of {'Idris.Core.TT.Ref', E41, E42, E43} -> (fun (V201, V202, V203) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V17, V203)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V13)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V14)))) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V206, V207, V208)) end end end end end, fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V211, V212, V213)) end end end end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V215)) end end, fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V219, V220, V221, V222)) end end end end end end end, fun (V223) -> fun (V224) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V224)) end end, fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V227, V228, V229)) end end end end end}, fun (V230) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V231) -> fun (V232) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V231, V232)) end end, V230)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V13, V14)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42, E43)); _ -> case V16 of {'Idris.Core.TT.DataCon', E36, E37} -> (fun (V233, V234) -> case V12 of {'Idris.Core.TT.Local', E38, E39, E40} -> (fun (V235, V236, V237) -> 1 end(E38, E39, E40)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end(E36, E37)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end end end(E34, E35)); _ -> case V12 of {'Idris.Core.TT.Ref', E8, E9, E10} -> (fun (V238, V239, V240) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V17, V240)) of 1 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V13)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V14)))) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V243, V244, V245)) end end end end end, fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V248, V249, V250)) end end end end end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V252)) end end, fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V256, V257, V258, V259)) end end end end end end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V261)) end end, fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> fun (V266) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V264, V265, V266)) end end end end end}, fun (V267) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V268) -> fun (V269) -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V268, V269)) end end, V267)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V13, V14)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> case V16 of {'Idris.Core.TT.DataCon', E3, E4} -> (fun (V270, V271) -> case V12 of {'Idris.Core.TT.Local', E5, E6, E7} -> (fun (V272, V273, V274) -> 1 end(E5, E6, E7)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end(E3, E4)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end end end(E0, E1, E2)); {'Idris.Core.TT.Local', E57, E58, E59} -> (fun (V275, V276, V277) -> case V12 of {'Idris.Core.TT.Ref', E60, E61, E62} -> (fun (V278, V279, V280) -> case V279 of {'Idris.Core.TT.DataCon', E63, E64} -> (fun (V281, V282) -> 1 end(E63, E64)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end(E60, E61, E62)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end end(E57, E58, E59)); _ -> case V13 of [] -> case V14 of [] -> ('nested--12559-3885--in--un--argDiff'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12)); _ -> 0 end; _ -> 0 end end.
'nested--15151-6183--in--un--applyLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V17, V18, V19, V20) -> fun (V21) -> case V19 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V22, V23, V24, V25) -> begin (V29 = begin (V26 = (((V20(V13))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V6, {'Idris.Core.TT.Erased', V9, 0}))))(V21))), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> ('nested--15151-6182--in--un--matchable'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V28, V21)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E10} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V31) -> case V31 of 1 -> begin (V32 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V12, V10, <<"cty"/utf8>>, V21))), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V39 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V12, V10, V22, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V37, V38)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V6, V34, {'Idris.Core.TT.TType', V9}, V21))), case V39 of {'Idris.Prelude.Types.Left', E14} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V41) -> begin (V52 = case V7 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V42, V43, V44, V45, V46, 1, V48, V49, V50, V51} end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V53 = ('un--searchLocalWith'(V0, V12, V11, V10, V9, 1, V8, V52, V6, [{'Idris.Builtin.MkPair', V1, V2} | []], V41, V4, V21))), case V53 of {'Idris.Prelude.Types.Left', E26} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V55) -> (('un--makeHelper'(V0, V12, V11, V10, V9, V8, V7, V6, V41, V16, V55))(V21)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--noResult'(V21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> ('un--noResult'(V21)) end end end(E0, E1, E2, E3)); _ -> fun (V56) -> ('un--noResult'(V56)) end end.
'dn--un--map_Functor_Search'(V0, V1) -> case V1 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> {'Idris.TTImp.Interactive.ExprSearch.NoMore'} end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E0, E1} -> (fun (V2, V3) -> {'Idris.TTImp.Interactive.ExprSearch.Result', (V0(V2)), fun (V4) -> begin (V5 = (V3(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('dn--un--map_Functor_Search'(V0, V7))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Functor_Search'(V0, V1, V2, V3) -> ('dn--un--map_Functor_Search'(V2, V3)).
'un--usableLocal'(V0, V1, V2) -> case V2 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V3, V4, V5) -> case V4 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V6, V7, V8) -> 0 end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); _ -> 1 end.
'un--trySearch'(V0, V1, V2, V3) -> fun (V4) -> ('un--firstSuccess'(V0, V1, [V2 | [V3 | []]], V4)) end.
'un--tryRecursive'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V49 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(case V10 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E2, E3, E4} -> (fun (V16, V17, V18) -> V17 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V15 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V19 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V49 of {'Idris.Prelude.Types.Left', E35} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V51) -> case V51 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--noResult'(V11)) end()); {'Idris.Prelude.Types.Just', E37} -> (fun (V52) -> begin (V69 = begin (V53 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V15, V7, V8))(V11))), case V53 of {'Idris.Prelude.Types.Left', E38} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V55) -> ('un--searchName'(V0, V1, V2, V3, V4, V5, case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V56, V57, {'Idris.Prelude.Types.Nothing'}, V59, V60, V61, V62, V63, V64, V65} end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V55, V9, {'Idris.Builtin.MkPair', case V10 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E50, E51, E52} -> (fun (V66, V67, V68) -> V67 end(E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V52}, V11)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V69 of {'Idris.Prelude.Types.Left', E53} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V71) -> begin (V73 = begin (V72 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E55} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V75) -> begin (V89 = ('un--traverse'(fun (V76) -> fun (V77) -> case V76 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V78, V79) -> begin (V86 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V80, V81, V82)) end end end, fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V83, V84, V85)) end end end}, V78, V77))), case V86 of {'Idris.Prelude.Types.Left', E59} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V88) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V88, V79}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V71, V11))), case V89 of {'Idris.Prelude.Types.Left', E61} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V91) -> ('un--filterS'(fun (V92) -> ('nested--12559-3888--in--un--structDiffTm'(V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V10 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E63, E64, E65} -> (fun (V93, V94, V95) -> V95 end(E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V92)) end, V91, V11)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tryIntermediateWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V8 of [] -> ('un--noResult'(V11)); [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V19, V7, V15))(V11))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> ('un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, 0, V7, V9, V10, [('nested--15151-6183--in--un--applyLocal'(V0, V14, V15, V13, V10, V9, V7, V6, V5, V4, V3, V2, V1, V19, V14, V22, V9)) | [fun (V23) -> ('un--tryIntermediateWith'(V0, V1, V2, V3, V4, V5, V6, V7, V13, V9, V10, V23)) end | []]], V11)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryIntermediateRec'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--noResult'(V11)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> begin (V50 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(case V12 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E3, E4, E5} -> (fun (V17, V18, V19) -> V18 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V16 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V20 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V50 of {'Idris.Prelude.Types.Left', E36} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V52) -> case V52 of {'Idris.Prelude.Types.Just', E38} -> (fun (V53) -> begin (V57 = begin (V54 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, [], V16, {'Idris.Core.Env.Nil'}, V53))(V11))), case V54 of {'Idris.Prelude.Types.Left', E39} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V56) -> ('nested--15590-6557--in--un--isSingleCon'(V0, V12, V9, V8, V7, V6, V5, V4, V3, V2, V1, V16, V56, V11)) end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V57 of {'Idris.Prelude.Types.Left', E41} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V59) -> case V59 of 1 -> begin (V60 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"cty"/utf8>>, V11))), case V60 of {'Idris.Prelude.Types.Left', E43} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V62) -> begin (V67 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V63) -> fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V63, V64)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V65) -> fun (V66) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V65, V66)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V7, V62, {'Idris.Core.TT.TType', V4}, V11))), case V67 of {'Idris.Prelude.Types.Left', E45} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V69) -> begin (V80 = case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V70, V71, {'Idris.Prelude.Types.Nothing'}, V73, V74, 1, V76, V77, V78, V79} end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V81 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Trying recursive search for"/utf8>> end, V8, V11))), case V81 of {'Idris.Prelude.Types.Left', E57} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V83) -> begin (V96 = begin (V93 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V84, V85, V86)) end end end, fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V87, V88, V89)) end end end}, case V12 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E59, E60, E61} -> (fun (V90, V91, V92) -> V91 end(E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V93 of {'Idris.Prelude.Types.Left', E62} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V95) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V95)) end, V11)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V96 of {'Idris.Prelude.Types.Left', E64} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V98) -> begin (V114 = begin (V108 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V99, V100, V101)) end end end, fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V102, V103, V104)) end end end}, case V12 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E66, E67, E68} -> (fun (V105, V106, V107) -> V107 end(E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V108 of {'Idris.Prelude.Types.Left', E69} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V110) -> ('Idris.Idris2.Core.Context.Log':'un--logTerm'(case V12 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E71, E72, E73} -> (fun (V111, V112, V113) -> V111 end(E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"LHS"/utf8>> end, V110, V11)) end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V114 of {'Idris.Prelude.Types.Left', E74} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V116) -> begin (V117 = ('un--tryRecursive'(V0, V1, V2, V3, V4, V5, V80, V7, V69, V9, V12, V11))), case V117 of {'Idris.Prelude.Types.Left', E76} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V119) -> (('un--makeHelper'(V0, V1, V2, V3, V4, V5, V80, V7, V69, V8, V119))(V11)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--noResult'(V11)) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--noResult'(V11)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryIntermediate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> fun (V10) -> ('un--tryIntermediateWith'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--getAllEnv'(V0, V4, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V7)))), V8, V9, V10)) end.
'un--traverse'(V0, V1, V2) -> case V1 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E0, E1} -> (fun (V3, V4) -> begin (V5 = ((V0(V3))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', V7, fun (V8) -> begin (V9 = (V4(V8))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> ('un--traverse'(V0, V11, V8)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of 0 -> case V10 of {'Idris.Core.TT.Bind', E14, E15, E16, E17} -> (fun (V11, V12, V13, V14) -> case V13 of {'Idris.Core.TT.Pi', E18, E19, E20, E21} -> (fun (V15, V16, V17, V18) -> fun (V19) -> ('un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, 0, V7, V18, V8, [('un--searchLocal'(V0, V1, V2, V3, V4, V5, V6, V7, {'Idris.Core.TT.Bind', V11, V12, V13, V14}, V8)) | [fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E22} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V24, V7, V18))(V20))), case V25 of {'Idris.Prelude.Types.Left', E24} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getArgName'(V0, V1, V24, V12, [], V0, V27, V20))), case V28 of {'Idris.Prelude.Types.Left', E26} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V30) -> begin (V31 = {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V30}}), begin (V32 = {'Idris.Core.Env.::', V13, V7}), begin (V33 = ('Idris.Idris2.Core.TT':'un--renameTop'(V31, V14))), begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Introduced lambda, search for "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([V31 | V0], V33)))) end, V20))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> begin (V37 = (('un--searchType'([V31 | V0], V1, V2, V3, V4, V5, V6, V32, V8, 0, V33))(V20))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> {'Idris.Prelude.Types.Right', ('dn--un--map_Functor_Search'(fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V41, V42) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V11, V31, {'Idris.Core.TT.Lam', V15, V16, V17, V18}, V41}, V42} end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V39))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end | []]], V19)) end end(E18, E19, E20, E21)); _ -> ('case--searchType-7280'(V0, V9, V10, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V10)))) end end(E14, E15, E16, E17)); _ -> ('case--searchType-7280'(V0, V9, V10, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V10)))) end; _ -> begin (V43 = (V9 - 1)), case V10 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V44, V45, V46, V47) -> case V46 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V48, V49, V50, V51) -> begin (V52 = {'Idris.Core.Env.::', V46, V7}), fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Introduced lambda, search for "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([V45 | V0], V47)))) end, V53))), case V54 of {'Idris.Prelude.Types.Left', E8} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V56) -> begin (V57 = (('un--searchType'([V45 | V0], V1, V2, V3, V4, V5, V6, V52, V8, V43, V47))(V53))), case V57 of {'Idris.Prelude.Types.Left', E10} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V59) -> {'Idris.Prelude.Types.Right', ('dn--un--map_Functor_Search'(fun (V60) -> case V60 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V61, V62) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.Bind', V44, V45, {'Idris.Core.TT.Lam', V48, V49, V50, V51}, V61}, V62} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V59))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> ('case--searchType-7280'(V0, V9, V10, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V10)))) end end(E0, E1, E2, E3)); _ -> ('case--searchType-7280'(V0, V9, V10, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V10)))) end end end.
'un--searchSort'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--searchN'(V0, V1, V2, V3, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case ('Idris.Idris2.Data.List':'un--isNil'(V9)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}}; 0 -> ('nested--9901-1539--in--un--returnBatch'(V4, V3, V2, V1, V0, ('Idris.Idris2.Data.List':'un--sortBy'(V4, V9)), V10, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--searchNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> ('un--noResult'(V11)); [E0 | E1] -> (fun (V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V1, V11))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V113 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V21) -> fun (V22) -> ('nested--12253-3620--in--un--visible'(V0, V12, V13, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V17 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V23 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [case V17 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V55 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | case V17 of {'Idris.Core.Context.MkDefs', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112) -> V86 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end], V21, V22)) end end, [V12 | V13], [], V11))), case V113 of {'Idris.Prelude.Types.Left', E96} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V115) -> begin (V117 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V116) -> V116 end, V115))), begin (V118 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V17, V7, V8))(V11))), case V118 of {'Idris.Prelude.Types.Left', E98} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V120) -> begin (V125 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Searching "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V122, V123)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V124) -> ('Idris.Idris2.Builtin':'un--fst'(V124)) end, V117)))), <<" for "/utf8>>)))) end, V8, V11))), case V125 of {'Idris.Prelude.Types.Left', E100} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V127) -> ('un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, 0, V7, V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V128) -> fun (V129) -> ('un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V120, V9, V128, V129)) end end, V117)), V11)) end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V1, V11))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--getNS'(V1, V11))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V1, V11))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> case ('Idris.Idris2.Core.Context':'un--visibleInAny'([V23 | V26], case V13 of {'Idris.Core.Context.Context.MkGlobalDef', E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V28 end(E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V13 of {'Idris.Core.Context.Context.MkGlobalDef', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V56 end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V87 = case V13 of {'Idris.Core.Context.Context.MkGlobalDef', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V69 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('nested--11331-2829--in--un--usableName'(V0, V12, V13, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V13 of {'Idris.Core.Context.Context.MkGlobalDef', E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V89 end(E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V139 = case V13 of {'Idris.Core.Context.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> case V125 of {'Idris.Core.Context.Context.DCon', E50, E51, E52} -> (fun (V128, V129, V130) -> {'Idris.Core.TT.DataCon', V128, V129} end(E50, E51, E52)); {'Idris.Core.Context.Context.TCon', E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V131, V132, V133, V134, V135, V136, V137, V138) -> {'Idris.Core.TT.TyCon', V131, V132} end(E53, E54, E55, E56, E57, E58, E59, E60)); _ -> {'Idris.Core.TT.Func'} end end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V160 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Trying "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V13 of {'Idris.Core.Context.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159) -> V141 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, V11))), case V160 of {'Idris.Prelude.Types.Left', E81} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V162) -> begin (V163 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V17, V7, ('Idris.Idris2.Core.TT':'un--embed'(V87))))(V11))), case V163 of {'Idris.Prelude.Types.Left', E83} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V165) -> begin (V166 = ('Idris.Idris2.Core.AutoSearch':'un--mkArgs'(V0, V1, V3, V4, V5, V7, V165, V11))), case V166 of {'Idris.Prelude.Types.Left', E85} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V168) -> case V168 of {'Idris.Builtin.MkPair', E87, E88} -> (fun (V169, V170) -> begin (V171 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Target"/utf8>> end, V7, V8, V11))), case V171 of {'Idris.Prelude.Types.Left', E89} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V173) -> begin (V174 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"App type"/utf8>> end, V7, V170, V11))), case V174 of {'Idris.Prelude.Types.Left', E91} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V176) -> begin (V193 = (((('Idris.Idris2.Core.Unify':'un--unify'({'Idris.Core.Unify.dn--un--__mkUnify', fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_NF'(V177, V178, V179, V180, V181, V182, V183, V184)) end end end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_NF'(V185, V186, V187, V188, V189, V190, V191, V192)) end end end end end end end end}, V0, V1, V3, ('Idris.Idris2.Core.Unify':'un--inSearch'()), V4, V7))(V8))(V170))(V11))), case V193 of {'Idris.Prelude.Types.Left', E93} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V195) -> case V195 of {'Idris.Core.Unify.MkUnifyResult', E95, E96, E97, E98} -> (fun (V196, V197, V198, V199) -> case V196 of [] -> begin (V202 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V200) -> ('un--searchIfHole'(V0, V1, V2, V3, V4, V6, V9, V7, V200)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V201) -> ('un--explicit'(V201)) end, V169)), V11))), case V202 of {'Idris.Prelude.Types.Left', E99} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V204) -> begin (V206 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V205) -> ('un--searchIfHole'(V0, V1, V2, V3, V4, V6, V9, V7, V205)) end, V169, [], V11))), case V206 of {'Idris.Prelude.Types.Left', E101} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V208) -> (('un--mkCandidates'(V0, V1, V3, V4, {'Idris.Core.TT.Ref', V4, V139, V12}, [], V208))(V11)) end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--noResult'(V11)) end end(E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('un--noResult'(V11)) end end; _ -> ('un--noResult'(V11)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchN'(V0, V1, V2, V3, V4) -> begin (V34 = begin (V5 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('Idris.Idris2.Core.Context':'un--startTimer'(V0, case V7 of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"expression search"/utf8>>, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V0, V1, fun (V37) -> begin (V38 = (V3(V37))), case V38 of {'Idris.Prelude.Types.Left', E30} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V40) -> begin (V41 = (('nested--9742-1392--in--un--count'(V3, V2, V1, V0, V2, V40))(V37))), case V41 of {'Idris.Prelude.Types.Left', E32} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Context':'un--clearTimer'(V0, V37))), case V44 of {'Idris.Prelude.Types.Left', E34} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V46) -> {'Idris.Prelude.Types.Right', V43} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Context':'un--clearTimer'(V0, V47))), case V48 of {'Idris.Prelude.Types.Left', E36} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V4)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V9 of [] -> ('un--noResult'(V12)); [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V1, V12))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V20, V8, V10))(V12))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V20, V8, V16))(V12))), case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> ('un--getSuccessful'(V0, V1, V2, V3, V4, V6, V7, 0, V8, V10, V11, [('nested--13410-4660--in--un--findPos'(V0, V15, V16, V14, V11, V10, V8, V7, V6, V5, V4, V3, V2, V1, V20, V15, fun (V30) -> V30 end, V29, V26)) | [fun (V31) -> ('un--searchLocalWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V10, V11, V31)) end | []]], V12)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--searchLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> fun (V10) -> ('un--searchLocalWith'(V0, V1, V2, V3, V4, 0, V5, V6, V7, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--getAllEnv'(V0, V4, ('Idris.Idris2.Core.TT.SizeOf':'un--zero'()), V7)))), V8, V9, V10)) end.
'un--searchIfHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V12 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> fun (V19) -> ('un--noResult'(V19)) end; _ -> begin (V30 = (case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end - 1)), begin (V36 = case V8 of {'Idris.Core.AutoSearch.MkArgInfo', E10, E11, E12, E13, E14} -> (fun (V31, V32, V33, V34, V35) -> V31 end(E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V42 = case V8 of {'Idris.Core.AutoSearch.MkArgInfo', E15, E16, E17, E18, E19} -> (fun (V37, V38, V39, V40, V41) -> V38 end(E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E20} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V47) -> begin (V78 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V36}, case V47 of {'Idris.Core.Context.MkDefs', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V48 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V43))), case V78 of {'Idris.Prelude.Types.Left', E52} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V80) -> case V80 of {'Idris.Prelude.Types.Just', E54} -> (fun (V81) -> begin (V82 = {'Idris.Prelude.Types.Just', V81}), ('case--case block in case block in searchIfHole-2214'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V30, V36, V42, V47, V81, V82, case V81 of {'Idris.Core.Context.Context.MkGlobalDef', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> V100 end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end end(E54)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--noResult'(V43)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end.
'un--searchHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V32 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V0, [], V9, {'Idris.Core.Env.Nil'}, case V10 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Normalised type"/utf8>> end, V34, V11))), case V35 of {'Idris.Prelude.Types.Left', E22} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--checkTimer'(V0, V11))), case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V40) -> (('un--searchType'([], V0, V1, V2, V3, V4, V5, {'Idris.Core.Env.Nil'}, V8, V7, V34))(V11)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--search'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V43 = ('nested--10315-8205--in--un--lookupHoleName'(V7, V6, V5, V4, V3, V2, V1, V0, V7, case V12 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V43 of {'Idris.Prelude.Types.Left', E32} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V45) -> case V45 of {'Idris.Prelude.Types.Just', E36} -> (fun (V46) -> case V46 of {'Idris.Builtin.MkPair', E39, E40} -> (fun (V47, V48) -> case V48 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V49, V50) -> case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> case V68 of {'Idris.Core.Context.Context.Hole', E80, E81} -> (fun (V71, V72) -> ('un--searchHole'(V0, V1, V2, V3, V4, V5, V47, V71, V6, V12, V50, V8)) end(E80, E81)); {'Idris.Core.Context.Context.BySearch', E82, E83, E84} -> (fun (V73, V74, V75) -> begin (V96 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V12, {'Idris.Core.Env.Nil'}, case V50 of {'Idris.Core.Context.Context.MkGlobalDef', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V78 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V96 of {'Idris.Prelude.Types.Left', E105} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V98) -> ('un--searchHole'(V0, V1, V2, V3, V4, V5, V47, V98, V6, V12, V50, V8)) end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82, E83, E84)); _ -> begin (V99 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)), <<" not a hole"/utf8>>)) end, V8))), case V99 of {'Idris.Prelude.Types.Left', E65} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V101) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a hole: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V103, V104)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V105) -> case V105 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E67, E68, E69} -> (fun (V106, V107, V108) -> V107 end(E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V5 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V111 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))}, V8)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43, E44)); _ -> begin (V119 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)), <<" not found"/utf8>>)) end, V8))), case V119 of {'Idris.Prelude.Types.Left', E41} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V121) -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V3, V7, V8)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39, E40)); _ -> begin (V122 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)), <<" not found"/utf8>>)) end, V8))), case V122 of {'Idris.Prelude.Types.Left', E37} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V124) -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V3, V7, V8)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> begin (V125 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)), <<" not found"/utf8>>)) end, V8))), case V125 of {'Idris.Prelude.Types.Left', E34} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V127) -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V3, V7, V8)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--one'(V0, V1) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', V0, fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end}}.
'un--noResult'(V0) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}}.
'un--nextResult'(V0, V1, V2, V3) -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V0, V1, fun (V4) -> begin (V5 = (V2(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E2, E3} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V8, V9}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end, V3)).
'un--mkCandidates'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> ('un--one'({'Idris.Builtin.MkPair', V4, V5}, V7)) end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> fun (V10) -> ('un--noResult'(V10)) end end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E2, E3} -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> fun (V15) -> ('un--firstSuccess'(V1, V2, [('un--mkCandidates'(V0, V1, V2, V3, {'Idris.Core.TT.App', V3, V4, V13}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V14)), V9)) | [fun (V16) -> begin (V17 = (V12(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> (('un--mkCandidates'(V0, V1, V2, V3, V4, V5, [V19 | V9]))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end | []]], V15)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeHelper'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E0, E1} -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V19 end(E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> fun (V26) -> ('un--noResult'(V26)) end; _ -> begin (V37 = (case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V30 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end - 1)), fun (V38) -> begin (V39 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Local app"/utf8>> end, V14, V38))), case V39 of {'Idris.Prelude.Types.Left', E14} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V41) -> case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> case V51 of {'Idris.Prelude.Types.Just', E26} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E27} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"cval"/utf8>>, V38))), case V57 of {'Idris.Prelude.Types.Left', E29} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.UnifyState':'un--genCaseName'(V1, V3, <<"search"/utf8>>, V38))), case V60 of {'Idris.Prelude.Types.Left', E31} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V62) -> begin (V63 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V62, V38))), case V63 of {'Idris.Prelude.Types.Left', E33} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V65) -> begin (V66 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V4, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V8}, V7}), begin (V67 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'([V59 | V0], V1, V3, V4, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V66, V65, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V9)), V38))), case V67 of {'Idris.Prelude.Types.Left', E35} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V69) -> begin (V70 = ('nested--14378-5518--in--un--toApp'(V0, V14, V15, V13, V9, V8, V7, V6, V5, V4, V3, V2, V1, V69))), begin (V72 = ('Idris.Idris2.Core.Context':'un--updateDef'(V1, V65, fun (V71) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.None'}} end, V38))), case V72 of {'Idris.Prelude.Types.Left', E37} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V74) -> begin (V75 = {'Idris.Core.TT.App', V4, {'Idris.Core.TT.Bind', V4, V59, {'Idris.Core.TT.Lam', V4, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V8}, V70}, V14}), begin (V76 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Binding def"/utf8>> end, V7, V75, V38))), case V76 of {'Idris.Prelude.Types.Left', E39} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V78) -> begin (V80 = begin (V79 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E41} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V82) -> begin (V113 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V65, case V82 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112) -> V83 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V38))), case V113 of {'Idris.Prelude.Types.Left', E73} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V115) -> case V115 of {'Idris.Prelude.Types.Just', E75} -> (fun (V116) -> begin (V117 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Type of scope name"/utf8>> end, {'Idris.Core.Env.Nil'}, V116, V38))), case V117 of {'Idris.Prelude.Types.Left', E76} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V119) -> begin (V130 = ('un--searchN'(V1, V3, (1 + 0), ((((V52(case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V120, 0, V122, V37, V124, 1, 0, 1, V128, V129} end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V65))(0))(V116)), V38))), case V130 of {'Idris.Prelude.Types.Left', E88} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V132) -> case V132 of {'Idris.Builtin.MkPair', E92, E93} -> (fun (V133, V134) -> case V133 of [E96 | E97] -> (fun (V135, V136) -> begin (V137 = {'Idris.TTImp.TTImp.IDef', V4, V65, ('Idris.Idris2.Builtin':'un--snd'(V135))}), begin (V141 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Def: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V138) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V138)) end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V139, V140)) end end}, V137)))) end, V38))), case V141 of {'Idris.Prelude.Types.Left', E98} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', {'Idris.Builtin.MkPair', V75, [V137 | V15]}, fun (V144) -> begin (V145 = (V13(V144))), case V145 of {'Idris.Prelude.Types.Left', E100} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V147) -> (('un--makeHelper'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V147))(V144)) end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end}} end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E96, E97)); _ -> begin (V148 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"No results"/utf8>> end, V38))), case V148 of {'Idris.Prelude.Types.Left', E94} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V150) -> ('un--noResult'(V38)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92, E93)); _ -> begin (V151 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"No results"/utf8>> end, V38))), case V151 of {'Idris.Prelude.Types.Left', E90} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V153) -> ('un--noResult'(V38)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen"/utf8>>}, V38)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--noResult'(V38)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--initSearchOpts'(V0, V1) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', 0, V0, {'Idris.Prelude.Types.Nothing'}, V1, 0, 0, 1, 0, 0, {'Idris.Prelude.Types.Nothing'}}.
'un--getSuccessful'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('un--firstSuccess'(V1, V3, V11, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> case V15 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> case case V7 of 1 -> case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V16 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V27 = begin (V26 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> begin (V44 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<"arg"/utf8>> end, fun () -> fun (V30) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(case V30 of {'Idris.TTImp.Interactive.ExprSearch.MkRecData', E4, E5, E6} -> (fun (V31, V32, V33) -> V32 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<"_rhs"/utf8>>)) end end, case V6 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V36 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V46 = ('Idris.Idris2.TTImp.Utils':'un--uniqueName'(V29, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V45)) end, V0)), V44, V12))), case V46 of {'Idris.Prelude.Types.Left', E17} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.Core.UnifyState':'un--newMeta'(V0, V1, V3, V4, V5, V8, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V48}}, V9, {'Idris.Core.Context.Context.Hole', ('Idris.Idris2.Core.Env':'un--length'(V8)), ('Idris.Idris2.Core.Context.Context':'un--holeInit'(0))}, 0))(V12))), case V49 of {'Idris.Prelude.Types.Left', E19} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V51) -> case V51 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V52, V53) -> ('un--one'({'Idris.Builtin.MkPair', V53, []}, V12)) end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--noResult'(V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> {'Idris.Prelude.Types.Right', V15} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getLHSData'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V1, {'Idris.Core.Env.Nil'}, V4, V3))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V11, V12, V13)) end end end}, V7, V3))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('nested--17967-8588--in--un--getLHS'(V4, V1, V0, [], V16))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getAllEnv'(V0, V1, V2, V3) -> case V0 of [] -> case V3 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V4, V5) -> case V3 of {'Idris.Core.Env.::', E2, E3} -> (fun (V6, V7) -> begin (V8 = ('un--getAllEnv'(V5, V1, ('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V2)), V7))), begin (V9 = ('nested--10323-1945--in--un--usableName'(V4, V5, V7, V6, V2, V1, V4))), case V9 of 1 -> [{'Idris.Builtin.MkPair', {'Idris.Core.TT.Local', V1, {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Core.TT':'un--weakenVar'(V2, 0))}, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--sucR'(V2)), ('Idris.Idris2.Core.TT':'un--binderType'(V6))))} | V8]; 0 -> V8; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--firstSuccess'(V0, V1, V2, V3) -> case V2 of [] -> ('un--noResult'(V3)); [E0 | E1] -> (fun (V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V14) -> begin (V15 = (V4(V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> case V17 of {'Idris.TTImp.Interactive.ExprSearch.Result', E8, E9} -> (fun (V18, V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', V18, fun (V20) -> ('nested--10962-2482--in--un--continue'(V4, V5, V1, V0, V9, V13, [V19 | V5], V20)) end}} end(E8, E9)); {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> ('nested--10962-2482--in--un--continue'(V4, V5, V1, V0, V9, V13, V5, V14)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V21) -> fun (V22) -> case V21 of {'Idris.Core.Core.Timeout', E10} -> (fun (V23) -> ('un--noResult'(V22)) end(E10)); _ -> ('nested--10962-2482--in--un--continue'(V4, V5, V1, V0, V9, V13, V5, V22)) end end end, V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--firstLinearOK'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> ('un--noResult'(V5)) end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V0, V2, fun (V10) -> begin (V12 = case ('Idris.Idris2.Data.List':'un--isNil'(V9)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V11) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V0, V1, V2, [1 | []], [], {'Idris.Core.Env.Nil'}, V11)) end, V9, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V23 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', 0} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V0, V2, V3, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 0, {'Idris.Core.Env.Nil'}, V8, V18)) end, V10))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V29, {'Idris.Core.Env.Nil'}, V8, V10))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V42 = begin (V39 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V33, V34, V35)) end end end, fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V36, V37, V38)) end end end}, V32, V10))), case V39 of {'Idris.Prelude.Types.Left', E14} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V41) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'([], V0, {'Idris.Core.Env.Nil'}, V41))(V10)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V42 of {'Idris.Prelude.Types.Left', E16} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V44) -> begin (V45 = (V7(V10))), case V45 of {'Idris.Prelude.Types.Left', E18} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V48) -> case V48 of {'Idris.Core.TT.MkKindedName', E20, E21, E22} -> (fun (V49, V50, V51) -> V51 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V44)), fun (V52) -> ('un--firstLinearOK'(V0, V1, V2, V3, V47, V52)) end}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V53) -> fun (V54) -> begin (V55 = (V7(V54))), case V55 of {'Idris.Prelude.Types.Left', E23} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V57) -> ('un--firstLinearOK'(V0, V1, V2, V3, V57, V54)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V5)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--filterS'(V0, V1, V2) -> case V1 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E0, E1} -> (fun (V3, V4) -> begin (V5 = (V4(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V9 = fun (V8) -> ('un--filterS'(V0, V7, V8)) end), case (V0(V3)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', V3, V9}}; 0 -> (V9(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exprSearchOpts'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('nested--18210-8817--in--un--lookupHoleName'(V6, V5, V4, V3, V2, V1, V0, V5, V11, V7))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Just', E4} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V18, V19) -> case V19 of {'Idris.Core.Context.Context.MkGlobalDef', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V37 of {'Idris.Core.Context.Context.Hole', E29, E30} -> (fun (V40, V41) -> begin (V45 = begin (V42 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, {'Idris.Core.Name.Resolved', V18}, V7))), case V42 of {'Idris.Prelude.Types.Left', E31} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V44) -> ('Idris.Idris2.Core.Metadata':'un--findHoleLHS'(V1, V44, V7)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V45 of {'Idris.Prelude.Types.Left', E33} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V47) -> begin (V60 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.search"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LHS hole data "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V49, V50)) end end}, {'Idris.Prelude.Show.MkShow', fun (V51) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V53, V54)) end end}, V51)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V57) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V58, V59)) end end}, V55, V56)) end end}}, {'Idris.Builtin.MkPair', V16, V47})))) end, V7))), case V60 of {'Idris.Prelude.Types.Left', E35} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V62) -> begin (V86 = case case V3 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V64 end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V73 = ('un--getLHSData'(V0, V11, V47, V7))), case V73 of {'Idris.Prelude.Types.Left', E37} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V75) -> {'Idris.Prelude.Types.Right', case V3 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V76, V77, V75, V79, V80, V81, V82, V83, V84, V85} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V86 of {'Idris.Prelude.Types.Left', E59} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V88) -> begin (V129 = ('un--search'(V0, V1, V2, V4, case V19 of {'Idris.Core.Context.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V96 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V88, case V19 of {'Idris.Core.Context.Context.MkGlobalDef', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128) -> V111 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16, V7))), case V129 of {'Idris.Prelude.Types.Left', E101} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V131) -> ('un--firstLinearOK'(V0, V1, V2, V4, V131, V7)) end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); {'Idris.Core.Context.Context.PMDef', E103, E104, E105, E106, E107} -> (fun (V132, V133, V134, V135, V136) -> case V133 of [] -> case V134 of {'Idris.Core.CaseTree.STerm', E108, E109} -> (fun (V137, V138) -> begin (V151 = begin (V139 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V11, {'Idris.Core.Env.Nil'}, V138, V7))), case V139 of {'Idris.Prelude.Types.Left', E110} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V141) -> begin (V148 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V142, V143, V144)) end end end, fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V145, V146, V147)) end end end}, V141, V7))), case V148 of {'Idris.Prelude.Types.Left', E112} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V150) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'([], V0, {'Idris.Core.Env.Nil'}, V150))(V7)) end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V151 of {'Idris.Prelude.Types.Left', E114} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V153) -> ('un--one'(('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V154) -> case V154 of {'Idris.Core.TT.MkKindedName', E116, E117, E118} -> (fun (V155, V156, V157) -> V157 end(E116, E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V153)), V7)) end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108, E109)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V4, <<"Name is already defined"/utf8>>}, V7)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V4, <<"Name is already defined"/utf8>>}, V7)) end end(E103, E104, E105, E106, E107)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V4, <<"Name is already defined"/utf8>>}, V7)) end end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V4, V5, V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--exprSearchN'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = ('un--searchN'(V0, V2, V4, fun (V8) -> ('un--exprSearch'(V0, V1, V2, V3, V5, V6, V8)) end, V7))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', V12} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--exprSearch\x{27}'(V0, V1, V2, V3, V4, V5, V6) -> ('un--exprSearchOpts'(V0, V1, V2, ('un--initSearchOpts'(1, (1 + (1 + (1 + (1 + (1 + 0))))))), V3, V4, V5, V6)).
'un--exprSearch'(V0, V1, V2, V3, V4, V5, V6) -> begin (V36 = begin (V7 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('Idris.Idris2.Core.Context':'un--startTimer'(V0, case V9 of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V18 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"expression search"/utf8>>, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V36 of {'Idris.Prelude.Types.Left', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V38) -> begin (V39 = ('un--exprSearch\x{27}'(V0, V1, V2, V3, V4, V5, V6))), case V39 of {'Idris.Prelude.Types.Left', E30} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--clearTimer'(V0, V6))), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> {'Idris.Prelude.Types.Right', V41} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--explicit'(V0) -> case V0 of {'Idris.Core.AutoSearch.MkArgInfo', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.TT.Explicit'} -> (fun () -> 1 end()); _ -> 0 end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--combine'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E0, E1} -> (fun (V6, V7) -> case V4 of {'Idris.TTImp.Interactive.ExprSearch.NoMore'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.NoMore'}} end()); {'Idris.TTImp.Interactive.ExprSearch.Result', E2, E3} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.ExprSearch.Result', ((V2(V6))(V8)), ('un--trySearch'(V0, V1, fun (V10) -> begin (V11 = (V9(V10))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = ('un--one'(V6, V10))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> ('un--combine'(V0, V1, V2, V16, V13, V10)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, ('un--trySearch'(V0, V1, fun (V17) -> begin (V18 = (V7(V17))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = ('un--one'(V8, V17))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> ('un--combine'(V0, V1, V2, V20, V23, V17)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V24) -> begin (V25 = (V7(V24))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = (V9(V24))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> ('un--combine'(V0, V1, V2, V27, V30, V24)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
