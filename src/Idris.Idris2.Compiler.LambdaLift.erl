-module('Idris.Idris2.Compiler.LambdaLift').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7000-3602--in--un--usedConstAlt'/10,
  'nested--7000-3567--in--un--usedConAlt'/10,
  'nested--6995-3162--in--un--traverseArgs'/10,
  'nested--6663-2455--in--un--mkName'/3,
  'nested--6995-3387--in--un--liftConstAlt'/11,
  'nested--6995-3336--in--un--liftConAlt'/11,
  'nested--6900-2667--in--un--finIdx'/5,
  'nested--7016-4097--in--un--dropConstCase'/9,
  'nested--7016-4033--in--un--dropConCase'/9,
  'nested--6988-2813--in--un--allVars'/10,
  'nested--6988-2812--in--un--allPrfs'/9,
  'dn--un--show_Show_LiftedDef'/1,
  'dn--un--show_Show_(LiftedConstAlt $vs)'/2,
  'dn--un--show_Show_(LiftedConAlt $vs)'/2,
  'dn--un--show_Show_(Lifted $vs)'/2,
  'dn--un--showPrec_Show_LiftedDef'/2,
  'dn--un--showPrec_Show_(LiftedConstAlt $vs)'/3,
  'dn--un--showPrec_Show_(LiftedConAlt $vs)'/3,
  'dn--un--showPrec_Show_(Lifted $vs)'/3,
  'dn--un--__Impl_Show_LiftedDef'/0,
  'dn--un--__Impl_Show_(LiftedConstAlt $vs)'/1,
  'dn--un--__Impl_Show_(LiftedConAlt $vs)'/1,
  'dn--un--__Impl_Show_(Lifted $vs)'/1,
  'un--weakenUsed'/2,
  'un--usedVars'/4,
  'un--unload'/4,
  'un--showLazy'/1,
  'un--markUsed'/3,
  'un--makeLam'/7,
  'un--liftExp'/5,
  'un--liftBody'/5,
  'un--lambdaLiftDef'/4,
  'un--lambdaLift'/3,
  'un--initUsed'/1,
  'un--getUnused'/1,
  'un--genName'/2,
  'un--dropped'/2,
  'un--dropUnused'/5,
  'un--dropIdx'/4,
  'un--contractUsedMany'/2,
  'un--contractUsed'/1
]).
'nested--7000-3602--in--un--usedConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Compiler.LambdaLift.MkLConstAlt', E0, E1} -> (fun (V10, V11) -> ('un--usedVars'(V0, V6, V8, V11)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7000-3567--in--un--usedConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Compiler.LambdaLift.MkLConAlt', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> ('un--contractUsedMany'(V13, ('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, V0)), V6, ('un--weakenUsed'(V13, V8)), V14)))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6995-3162--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V10, V11) -> begin (V12 = (('un--liftExp'(V0, V7, V1, {'Idris.Prelude.Types.Nothing'}, V10))(V9))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('nested--6995-3162--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V9))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', V14, V17}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6663-2455--in--un--mkName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Name.NS', V3, ('nested--6663-2455--in--un--mkName'(V0, V4, V2))} end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V5) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V5)), V2} end(E2)); {'Idris.Core.Name.DN', E3, E4} -> (fun (V6, V7) -> ('nested--6663-2455--in--un--mkName'(V0, V7, V2)) end(E3, E4)); {'Idris.Core.Name.CaseBlock', E5, E6} -> (fun (V8, V9) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case block in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), <<")"/utf8>>)))))))), V2} end(E5, E6)); {'Idris.Core.Name.WithBlock', E7, E8} -> (fun (V10, V11) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with block in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11)), <<")"/utf8>>)))))))), V2} end(E7, E8)); _ -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), V2} end.
'nested--6995-3387--in--un--liftConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V11, V12) -> begin (V13 = (('un--liftExp'(V0, V7, V1, V2, V12))(V10))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.MkLConstAlt', V11, V15}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6995-3336--in--un--liftConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V11, V12, V13, V14, V15) -> begin (V16 = (('un--liftExp'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V14, V0)), V7, V1, V2, V15))(V10))), case V16 of {'Idris.Prelude.Types.Left', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.MkLConAlt', V11, V12, V13, V14, V18}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6900-2667--in--un--finIdx'(V0, V1, V2, V3, V4) -> case V3 of [E0 | E1] -> (fun (V5, V6) -> case V4 of 0 -> 0; _ -> begin (V7 = (V4 - 1)), (1 + ('nested--6900-2667--in--un--finIdx'(V0, V1, V2, V6, V7))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7016-4097--in--un--dropConstCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Compiler.LambdaLift.MkLConstAlt', E0, E1} -> (fun (V9, V10) -> {'Idris.Compiler.LambdaLift.MkLConstAlt', V9, ('un--dropUnused'(V1, V7, V0, V6, V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7016-4033--in--un--dropConCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Compiler.LambdaLift.MkLConAlt', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> begin (V14 = V13), begin (V15 = ('un--dropUnused'(V1, V7, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, V0)), V6, V14))), {'Idris.Compiler.LambdaLift.MkLConAlt', V9, V10, V11, V12, V15} end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6988-2813--in--un--allVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> {'Idris.Compiler.LambdaLift.LLocal', V10, V7} end, ('nested--6988-2812--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V8, V9)))).
'nested--6988-2812--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> []; [E0 | E1] -> (fun (V9, V10) -> case V8 of {'Idris.Data.Vect.::', E2, E3} -> (fun (V11, V12) -> case V11 of 0 -> [0 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V13)) end, ('nested--6988-2812--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V10, V12))))]; 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V14)) end, ('nested--6988-2812--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V10, V12)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_LiftedDef'(V0) -> case V0 of {'Idris.Compiler.LambdaLift.MkLFun', E0, E1, E2} -> (fun (V1, V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V6)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V8, V9)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V1)), V3)))))))) end(E0, E1, E2)); {'Idris.Compiler.LambdaLift.MkLCon', E3, E4, E5} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V14, V15)) end end}, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V11)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)), <<")"/utf8>>)))) end end, V12)))))))))) end(E3, E4, E5)); {'Idris.Compiler.LambdaLift.MkLForeign', E6, E7, E8} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Foreign call "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V21, V22)) end end}, V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CFType'(V24, V25)) end end}, V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V19)))))))))))) end(E6, E7, E8)); {'Idris.Compiler.LambdaLift.MkLError', E9} -> (fun (V26) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'([], V26)))) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V1) -> case V1 of {'Idris.Compiler.LambdaLift.MkLConstAlt', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%constalt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") => "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'(V0, V3)))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(LiftedConAlt $vs)'(V0, V1) -> case V1 of {'Idris.Compiler.LambdaLift.MkLConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%conalt "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, V5)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") => "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V0)), V6)))))))))))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(Lifted $vs)'(V0, V1) -> case V1 of {'Idris.Compiler.LambdaLift.LLocal', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"!"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.TT':'un--nameAt'(V0, V2)))))) end(E0, E1)); {'Idris.Compiler.LambdaLift.LAppName', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V8)) end, V7)))), <<")"/utf8>>)))))))) end(E2, E3, E4, E5)); {'Idris.Compiler.LambdaLift.LUnderApp', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" underapp "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<">("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V13)) end, V12)))), <<")"/utf8>>)))))))))))) end(E6, E7, E8, E9)); {'Idris.Compiler.LambdaLift.LApp', E10, E11, E12, E13} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" @ ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V17)), <<")"/utf8>>)))))))) end(E10, E11, E12, E13)); {'Idris.Compiler.LambdaLift.LLet', E14, E15, E16, E17} -> (fun (V18, V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'([V19 | V0], V21)))))))))))) end(E14, E15, E16, E17)); {'Idris.Compiler.LambdaLift.LCon', E18, E19, E20, E21, E22} -> (fun (V22, V23, V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%con "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V27)) end, V26)))), <<")"/utf8>>)))))))) end(E18, E19, E20, E21, E22)); {'Idris.Compiler.LambdaLift.LOp', E23, E24, E25, E26, E27} -> (fun (V28, V29, V30, V31, V32) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%op "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V30)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V33) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V33)) end, V32)))))), <<")"/utf8>>)))))))))) end(E23, E24, E25, E26, E27)); {'Idris.Compiler.LambdaLift.LExtPrim', E28, E29, E30, E31} -> (fun (V34, V35, V36, V37) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%extprim "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V35)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V38) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V38)) end, V37)))), <<")"/utf8>>)))))))))) end(E28, E29, E30, E31)); {'Idris.Compiler.LambdaLift.LConCase', E32, E33, E34, E35} -> (fun (V39, V40, V41, V42) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V40)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V43) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V43)) end, V41)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V44) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V44)) end, fun (V45) -> fun (V46) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V45, V46)) end end}, V42)))))))))))) end(E32, E33, E34, E35)); {'Idris.Compiler.LambdaLift.LConstCase', E36, E37, E38, E39} -> (fun (V47, V48, V49, V50) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V48)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V51) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V51)) end, V49)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V52) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V52)) end, fun (V53) -> fun (V54) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V53, V54)) end end}, V50)))))))))))) end(E36, E37, E38, E39)); {'Idris.Compiler.LambdaLift.LPrimVal', E40, E41} -> (fun (V55, V56) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V56)) end(E40, E41)); {'Idris.Compiler.LambdaLift.LErased', E42} -> (fun (V57) -> <<"___"/utf8>> end(E42)); {'Idris.Compiler.LambdaLift.LCrash', E43, E44} -> (fun (V58, V59) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%CRASH("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V59)), <<")"/utf8>>)))) end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_LiftedDef'(V0, V1) -> ('dn--un--show_Show_LiftedDef'(V1)).
'dn--un--showPrec_Show_(LiftedConstAlt $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V2)).
'dn--un--showPrec_Show_(LiftedConAlt $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V2)).
'dn--un--showPrec_Show_(Lifted $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V2)).
'dn--un--__Impl_Show_LiftedDef'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_LiftedDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_LiftedDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_(LiftedConstAlt $vs)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(LiftedConstAlt $vs)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(LiftedConAlt $vs)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(LiftedConAlt $vs)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(Lifted $vs)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V2, V3)) end end}.
'un--weakenUsed'(V0, V1) -> ('Idris.Idris2.Data.Vect':'un--++'(('Idris.Idris2.Data.Vect':'un--replicate'(('Idris.Idris2.Prelude.Types.List':'un--length'(V0)), 0)), V1)).
'un--usedVars'(V0, V1, V2, V3) -> case V3 of {'Idris.Compiler.LambdaLift.LLocal', E0, E1} -> (fun (V4, V5) -> ('un--markUsed'(V0, V4, V2)) end(E0, E1)); {'Idris.Compiler.LambdaLift.LAppName', E2, E3, E4, E5} -> (fun (V6, V7, V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V10) -> fun (V11) -> ('un--usedVars'(V0, V1, V10, V11)) end end, V2, V9)) end(E2, E3, E4, E5)); {'Idris.Compiler.LambdaLift.LUnderApp', E6, E7, E8, E9} -> (fun (V12, V13, V14, V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V16) -> fun (V17) -> ('un--usedVars'(V0, V1, V16, V17)) end end, V2, V15)) end(E6, E7, E8, E9)); {'Idris.Compiler.LambdaLift.LApp', E10, E11, E12, E13} -> (fun (V18, V19, V20, V21) -> ('un--usedVars'(V0, V1, ('un--usedVars'(V0, V1, V2, V21)), V20)) end(E10, E11, E12, E13)); {'Idris.Compiler.LambdaLift.LLet', E14, E15, E16, E17} -> (fun (V22, V23, V24, V25) -> begin (V26 = ('un--contractUsed'(('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([V23 | []], V0)), V1, ('un--weakenUsed'([V23 | []], V2)), V25))))), ('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([], V0)), V1, V26, V24)) end end(E14, E15, E16, E17)); {'Idris.Compiler.LambdaLift.LCon', E18, E19, E20, E21, E22} -> (fun (V27, V28, V29, V30, V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V32) -> fun (V33) -> ('un--usedVars'(V0, V1, V32, V33)) end end, V2, V31)) end(E18, E19, E20, E21, E22)); {'Idris.Compiler.LambdaLift.LOp', E23, E24, E25, E26, E27} -> (fun (V34, V35, V36, V37, V38) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'(fun (V39) -> fun (V40) -> ('un--usedVars'(V0, V1, V39, V40)) end end, V2, V38)) end(E23, E24, E25, E26, E27)); {'Idris.Compiler.LambdaLift.LExtPrim', E28, E29, E30, E31} -> (fun (V41, V42, V43, V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V45) -> fun (V46) -> ('un--usedVars'(V0, V1, V45, V46)) end end, V2, V44)) end(E28, E29, E30, E31)); {'Idris.Compiler.LambdaLift.LConCase', E32, E33, E34, E35} -> (fun (V47, V48, V49, V50) -> begin (V52 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V2 end, fun () -> fun (V51) -> ('un--usedVars'(V0, V1, V2, V51)) end end, V50))), begin (V53 = ('un--usedVars'(V0, V1, V52, V48))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V54) -> fun (V55) -> ('nested--7000-3567--in--un--usedConAlt'(V0, V50, V49, V48, V47, V2, V1, {'Idris.Prelude.Types.Nothing'}, V54, V55)) end end, V53, V49)) end end end(E32, E33, E34, E35)); {'Idris.Compiler.LambdaLift.LConstCase', E36, E37, E38, E39} -> (fun (V56, V57, V58, V59) -> begin (V61 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V2 end, fun () -> fun (V60) -> ('un--usedVars'(V0, V1, V2, V60)) end end, V59))), begin (V62 = ('un--usedVars'(V0, V1, V61, V57))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V63) -> fun (V64) -> ('nested--7000-3602--in--un--usedConstAlt'(V0, V59, V58, V57, V56, V2, V1, {'Idris.Prelude.Types.Nothing'}, V63, V64)) end end, V62, V58)) end end end(E36, E37, E38, E39)); {'Idris.Compiler.LambdaLift.LPrimVal', E40, E41} -> (fun (V65, V66) -> V2 end(E40, E41)); {'Idris.Compiler.LambdaLift.LErased', E42} -> (fun (V67) -> V2 end(E42)); {'Idris.Compiler.LambdaLift.LCrash', E43, E44} -> (fun (V68, V69) -> V2 end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unload'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> ('un--unload'(V0, {'Idris.Prelude.Types.Nothing'}, {'Idris.Compiler.LambdaLift.LApp', V0, V1, V2, V5}, V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showLazy'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V1)))) end end, V0)).
'un--markUsed'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Data.Vect':'un--replaceAt'(('nested--6900-2667--in--un--finIdx'(V0, V2, V1, V0, V1)), 1, V2))), V3 end.
'un--makeLam'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.CLam', E11, E12, E13} -> (fun (V7, V8, V9) -> ('un--makeLam'(V0, V1, V2, V3, V4, [V8 | V5], V9)) end(E11, E12, E13)); _ -> fun (V10) -> begin (V11 = (('un--liftExp'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V1)), V0, V2, V3, V6))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('un--usedVars'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V1)), V0, ('un--initUsed'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V1)))), V13))), begin (V15 = ('un--contractUsedMany'(V5, V14))), begin (V16 = ('un--getUnused'(V15))), begin (V17 = ('un--dropUnused'(V1, V0, V5, V16, V13))), begin (V18 = ('un--genName'(V0, V10))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V29 = begin (V28 = ('erlang':'put'(V0, case V24 of {'Idris.Compiler.LambdaLift.MkLDefs', E6, E7, E8} -> (fun (V25, V26, V27) -> {'Idris.Compiler.LambdaLift.MkLDefs', V25, [{'Idris.Builtin.MkPair', V20, {'Idris.Compiler.LambdaLift.MkLFun', ('un--dropped'(V1, V16)), V5, V17}} | V26], V27} end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E9} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LUnderApp', V4, V20, ('Idris.Idris2.Prelude.Types.List':'un--length'(V5)), ('nested--6988-2813--in--un--allVars'(V2, V3, V5, V1, V6, V4, V0, V4, V1, V16))}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--liftExp'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LLocal', V5, V6}} end end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LAppName', V8, V3, V9, []}} end end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V11, V12, V13) -> ('un--makeLam'(V1, V0, V2, V3, V11, [V12 | []], V13)) end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V14, V15, V16, V17, V18) -> fun (V19) -> begin (V20 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V17))(V19))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V23 = (('un--liftExp'([V15 | V0], V1, V2, {'Idris.Prelude.Types.Nothing'}, V18))(V19))), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LLet', V14, V15, V22, V25}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E16, E17, E18} -> (fun (V26, V27, V28) -> fun (V29) -> case V27 of {'Idris.Core.CompileExpr.CRef', E23, E24} -> (fun (V30, V31) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V32) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V32)) end, V28, [], V29))), case V33 of {'Idris.Prelude.Types.Left', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LAppName', V26, V3, V31, V35}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24)); _ -> begin (V36 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V27))(V29))), case V36 of {'Idris.Prelude.Types.Left', E19} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V38) -> begin (V40 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V39) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V39)) end, V28, [], V29))), case V40 of {'Idris.Prelude.Types.Left', E21} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V42) -> (('un--unload'(V26, V3, V38, V42))(V29)) end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E16, E17, E18)); {'Idris.Core.CompileExpr.CCon', E27, E28, E29, E30, E31} -> (fun (V43, V44, V45, V46, V47) -> fun (V48) -> begin (V50 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V49) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V49)) end, V47, [], V48))), case V50 of {'Idris.Prelude.Types.Left', E32} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LCon', V43, V44, V45, V46, V52}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27, E28, E29, E30, E31)); {'Idris.Core.CompileExpr.COp', E34, E35, E36, E37} -> (fun (V53, V54, V55, V56) -> fun (V57) -> begin (V58 = ('nested--6995-3162--in--un--traverseArgs'(V0, V2, V3, V53, V56, V55, V54, V1, V56, V57))), case V58 of {'Idris.Prelude.Types.Left', E38} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LOp', V53, V54, V3, V55, V60}} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34, E35, E36, E37)); {'Idris.Core.CompileExpr.CExtPrim', E40, E41, E42} -> (fun (V61, V62, V63) -> fun (V64) -> begin (V66 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V65) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V65)) end, V63, [], V64))), case V66 of {'Idris.Prelude.Types.Left', E43} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LExtPrim', V61, V3, V62, V68}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42)); {'Idris.Core.CompileExpr.CForce', E45, E46, E47} -> (fun (V69, V70, V71) -> case V2 of 1 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V71)); 0 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CompileExpr.CApp', V69, V71, [{'Idris.Core.CompileExpr.CErased', V69} | []]})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46, E47)); {'Idris.Core.CompileExpr.CDelay', E48, E49, E50} -> (fun (V72, V73, V74) -> case V2 of 1 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Just', V73}, V74)); 0 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CompileExpr.CLam', V72, {'Idris.Core.Name.MN', <<"act"/utf8>>, 0}, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V74))})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49, E50)); {'Idris.Core.CompileExpr.CConCase', E51, E52, E53, E54} -> (fun (V75, V76, V77, V78) -> fun (V79) -> begin (V80 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V76))(V79))), case V80 of {'Idris.Prelude.Types.Left', E55} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V82) -> begin (V85 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V83) -> fun (V84) -> ('nested--6995-3336--in--un--liftConAlt'(V0, V2, V3, V78, V77, V76, V75, V1, V3, V83, V84)) end end, V77, [], V79))), case V85 of {'Idris.Prelude.Types.Left', E57} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V87) -> begin (V92 = case V78 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E59} -> (fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V89) -> case V89 of {'Idris.Prelude.Types.Left', E60} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V91) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V91}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V88)), V79)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V92 of {'Idris.Prelude.Types.Left', E62} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LConCase', V75, V82, V87, V94}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52, E53, E54)); {'Idris.Core.CompileExpr.CConstCase', E64, E65, E66, E67} -> (fun (V95, V96, V97, V98) -> fun (V99) -> begin (V100 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V96))(V99))), case V100 of {'Idris.Prelude.Types.Left', E68} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V102) -> begin (V105 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V103) -> fun (V104) -> ('nested--6995-3387--in--un--liftConstAlt'(V0, V2, V3, V98, V97, V96, V95, V1, {'Idris.Prelude.Types.Nothing'}, V103, V104)) end end, V97, [], V99))), case V105 of {'Idris.Prelude.Types.Left', E70} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V107) -> begin (V112 = case V98 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E72} -> (fun (V108) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V109) -> case V109 of {'Idris.Prelude.Types.Left', E73} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V111) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V111}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V108)), V99)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V112 of {'Idris.Prelude.Types.Left', E75} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LConstCase', V95, V102, V107, V114}} end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E64, E65, E66, E67)); {'Idris.Core.CompileExpr.CPrimVal', E77, E78} -> (fun (V115, V116) -> fun (V117) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LPrimVal', V115, V116}} end end(E77, E78)); {'Idris.Core.CompileExpr.CErased', E79} -> (fun (V118) -> fun (V119) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LErased', V118}} end end(E79)); {'Idris.Core.CompileExpr.CCrash', E80, E81} -> (fun (V120, V121) -> fun (V122) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LCrash', V120, V121}} end end(E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--liftBody'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.LambdaLift.Lifts'}, {'Idris.Compiler.LambdaLift.MkLDefs', V2, [], 0}, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = (('un--liftExp'(V0, V7, V1, {'Idris.Prelude.Types.Nothing'}, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, case V14 of {'Idris.Compiler.LambdaLift.MkLDefs', E6, E7, E8} -> (fun (V15, V16, V17) -> V16 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lambdaLiftDef'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('un--liftBody'(V4, V0, V1, V5, V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLFun', V4, [], V9}} | V10]} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.CompileExpr.MkCon', E6, E7, E8} -> (fun (V11, V12, V13) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLCon', V11, V12, V13}} | []]} end(E6, E7, E8)); {'Idris.Core.CompileExpr.MkForeign', E9, E10, E11} -> (fun (V14, V15, V16) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLForeign', V14, V15, V16}} | []]} end(E9, E10, E11)); {'Idris.Core.CompileExpr.MkError', E12} -> (fun (V17) -> begin (V18 = ('un--liftBody'([], V0, V1, V17, V3))), case V18 of {'Idris.Prelude.Types.Left', E13} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V21, V22) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLError', V21}} | V22]} end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lambdaLift'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> ('un--lambdaLiftDef'(V1, V3, V6, V7)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--initUsed'(V0) -> ('Idris.Idris2.Data.Vect':'un--replicate'(('Idris.Idris2.Prelude.Types.List':'un--length'(V0)), 0)).
'un--getUnused'(V0) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V1) -> case V1 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0)).
'un--genName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V9 = case V5 of {'Idris.Compiler.LambdaLift.MkLDefs', E2, E3, E4} -> (fun (V6, V7, V8) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V14 = begin (V13 = ('erlang':'put'(V0, case V5 of {'Idris.Compiler.LambdaLift.MkLDefs', E5, E6, E7} -> (fun (V10, V11, V12) -> {'Idris.Compiler.LambdaLift.MkLDefs', V10, V11, ((V9 + 1) rem 9223372036854775808)} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('nested--6663-2455--in--un--mkName'(V0, case V5 of {'Idris.Compiler.LambdaLift.MkLDefs', E10, E11, E12} -> (fun (V17, V18, V19) -> V17 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropped'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Idris.Data.Vect.::', E2, E3} -> (fun (V4, V5) -> case V4 of 0 -> [V2 | ('un--dropped'(V3, V5))]; 1 -> ('un--dropped'(V3, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropUnused'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Compiler.LambdaLift.LPrimVal', E0, E1} -> (fun (V5, V6) -> {'Idris.Compiler.LambdaLift.LPrimVal', V5, V6} end(E0, E1)); {'Idris.Compiler.LambdaLift.LErased', E2} -> (fun (V7) -> {'Idris.Compiler.LambdaLift.LErased', V7} end(E2)); {'Idris.Compiler.LambdaLift.LCrash', E3, E4} -> (fun (V8, V9) -> {'Idris.Compiler.LambdaLift.LCrash', V8, V9} end(E3, E4)); {'Idris.Compiler.LambdaLift.LLocal', E5, E6} -> (fun (V10, V11) -> {'Idris.Compiler.LambdaLift.LLocal', ('un--dropIdx'(V0, V10, V2, V3)), V11} end(E5, E6)); {'Idris.Compiler.LambdaLift.LCon', E7, E8, E9, E10, E11} -> (fun (V12, V13, V14, V15, V16) -> begin (V18 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('un--dropUnused'(V0, V1, V2, V3, V17)) end, V16))), {'Idris.Compiler.LambdaLift.LCon', V12, V13, V14, V15, V18} end end(E7, E8, E9, E10, E11)); {'Idris.Compiler.LambdaLift.LLet', E12, E13, E14, E15} -> (fun (V19, V20, V21, V22) -> begin (V23 = ('un--dropUnused'(V0, V1, V2, V3, V21))), begin (V24 = ('un--dropUnused'(V0, V1, [V20 | V2], V3, V22))), {'Idris.Compiler.LambdaLift.LLet', V19, V20, V23, V24} end end end(E12, E13, E14, E15)); {'Idris.Compiler.LambdaLift.LApp', E16, E17, E18, E19} -> (fun (V25, V26, V27, V28) -> begin (V29 = ('un--dropUnused'(V0, V1, V2, V3, V27))), begin (V30 = ('un--dropUnused'(V0, V1, V2, V3, V28))), {'Idris.Compiler.LambdaLift.LApp', V25, V26, V29, V30} end end end(E16, E17, E18, E19)); {'Idris.Compiler.LambdaLift.LOp', E20, E21, E22, E23, E24} -> (fun (V31, V32, V33, V34, V35) -> begin (V37 = ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V36) -> ('un--dropUnused'(V0, V1, V2, V3, V36)) end, V35))), {'Idris.Compiler.LambdaLift.LOp', V31, V32, V33, V34, V37} end end(E20, E21, E22, E23, E24)); {'Idris.Compiler.LambdaLift.LExtPrim', E25, E26, E27, E28} -> (fun (V38, V39, V40, V41) -> begin (V43 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V42) -> ('un--dropUnused'(V0, V1, V2, V3, V42)) end, V41))), {'Idris.Compiler.LambdaLift.LExtPrim', V38, V39, V40, V43} end end(E25, E26, E27, E28)); {'Idris.Compiler.LambdaLift.LAppName', E29, E30, E31, E32} -> (fun (V44, V45, V46, V47) -> begin (V49 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('un--dropUnused'(V0, V1, V2, V3, V48)) end, V47))), {'Idris.Compiler.LambdaLift.LAppName', V44, V45, V46, V49} end end(E29, E30, E31, E32)); {'Idris.Compiler.LambdaLift.LUnderApp', E33, E34, E35, E36} -> (fun (V50, V51, V52, V53) -> begin (V55 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V54) -> ('un--dropUnused'(V0, V1, V2, V3, V54)) end, V53))), {'Idris.Compiler.LambdaLift.LUnderApp', V50, V51, V52, V55} end end(E33, E34, E35, E36)); {'Idris.Compiler.LambdaLift.LConCase', E37, E38, E39, E40} -> (fun (V56, V57, V58, V59) -> begin (V61 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V60) -> ('nested--7016-4033--in--un--dropConCase'(V2, V0, V59, V58, V57, V56, V3, V1, V60)) end, V58))), {'Idris.Compiler.LambdaLift.LConCase', V56, ('un--dropUnused'(V0, V1, V2, V3, V57)), V61, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V62) -> ('un--dropUnused'(V0, V1, V2, V3, V62)) end, V59))} end end(E37, E38, E39, E40)); {'Idris.Compiler.LambdaLift.LConstCase', E41, E42, E43, E44} -> (fun (V63, V64, V65, V66) -> begin (V68 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V67) -> ('nested--7016-4097--in--un--dropConstCase'(V2, V0, V66, V65, V64, V63, V3, V1, V67)) end, V65))), {'Idris.Compiler.LambdaLift.LConstCase', V63, ('un--dropUnused'(V0, V1, V2, V3, V64)), V68, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V69) -> ('un--dropUnused'(V0, V1, V2, V3, V69)) end, V66))} end end(E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropIdx'(V0, V1, V2, V3) -> case V0 of [E4 | E5] -> (fun (V4, V5) -> case V1 of 0 -> case V2 of [] -> case V3 of {'Idris.Data.Vect.::', E28, E29} -> (fun (V6, V7) -> case V6 of 0 -> 0; 1 -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<"INTERNAL ERROR: Referenced variable marked as unused"/utf8>>)); _ -> case V1 of 0 -> case V2 of [E32 | E33] -> (fun (V8, V9) -> 0 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V10 = (V1 - 1)), case V2 of [E30 | E31] -> (fun (V11, V12) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V10, V12, V3)))) end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E28, E29)); _ -> case V1 of 0 -> case V2 of [E26 | E27] -> (fun (V13, V14) -> 0 end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V15 = (V1 - 1)), case V2 of [E24 | E25] -> (fun (V16, V17) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V15, V17, V3)))) end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V1 of 0 -> case V2 of [E22 | E23] -> (fun (V18, V19) -> 0 end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V20 = (V1 - 1)), case V2 of [E20 | E21] -> (fun (V21, V22) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V20, V22, V3)))) end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> begin (V23 = (V1 - 1)), case V2 of [] -> case V3 of {'Idris.Data.Vect.::', E14, E15} -> (fun (V24, V25) -> case V24 of 0 -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V5, V23, [], V25)))); 1 -> ('un--dropIdx'(V5, V23, [], V25)); _ -> case V1 of 0 -> case V2 of [E18 | E19] -> (fun (V26, V27) -> 0 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V28 = (V1 - 1)), case V2 of [E16 | E17] -> (fun (V29, V30) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V28, V30, V3)))) end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14, E15)); _ -> case V1 of 0 -> case V2 of [E12 | E13] -> (fun (V31, V32) -> 0 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V33 = (V1 - 1)), case V2 of [E10 | E11] -> (fun (V34, V35) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V33, V35, V3)))) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V1 of 0 -> case V2 of [E8 | E9] -> (fun (V36, V37) -> 0 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V38 = (V1 - 1)), case V2 of [E6 | E7] -> (fun (V39, V40) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V38, V40, V3)))) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E4, E5)); _ -> case V1 of 0 -> case V2 of [E2 | E3] -> (fun (V41, V42) -> 0 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V43 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V44, V45) -> ('Idris.Idris2.Core.TT.Var':'un--later'(('un--dropIdx'(V0, V43, V45, V3)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--contractUsedMany'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--contractUsedMany'(V3, ('un--contractUsed'(V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--contractUsed'(V0) -> ('Idris.Idris2.Data.Vect':'un--tail'(V0)).
