-module('Idris.Idris2.Compiler.Scheme.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7220-975--in--un--strTo'/2,
  'nested--9357-5312--in--un--showConstAlts'/8,
  'nested--9353-3610--in--un--showAlts'/8,
  'nested--9357-5206--in--un--recordCase'/8,
  'nested--6691-458--in--un--okchar'/2,
  'nested--9357-5205--in--un--maybeCase'/8,
  'nested--9357-5204--in--un--listCase'/8,
  'nested--7220-977--in--un--intTo'/3,
  'nested--9356-4555--in--un--getNothingCode'/7,
  'nested--9355-4123--in--un--getNilCode'/7,
  'nested--9356-4556--in--un--getJustCode'/8,
  'nested--9355-4124--in--un--getConsCode'/8,
  'nested--9354-3918--in--un--getAltCode'/10,
  'nested--7220-976--in--un--dblTo'/2,
  'nested--7220-974--in--un--charTo'/2,
  'nested--9356-4554--in--un--buildCase'/10,
  'nested--9355-4122--in--un--buildCase'/10,
  'nested--10435-4283--in--un--bindArgs'/15,
  'nested--9354-3917--in--un--bindArgs'/12,
  'nested--9350-3263--in--un--bindArgs'/12,
  'nested--9349-3140--in--un--bindArgs'/12,
  'nested--10893-4712--in--un--bindArg'/14,
  'dn--un--show_Show_ExtPrim'/1,
  'dn--un--showPrec_Show_ExtPrim'/2,
  'dn--un--__Impl_Show_ExtPrim'/0,
  'un--var'/1,
  'un--usedConst'/2,
  'un--usedCon'/2,
  'un--used'/2,
  'un--toPrim'/1,
  'un--sub'/3,
  'un--showTag'/4,
  'un--shl'/3,
  'un--schUserName'/1,
  'un--schString'/1,
  'un--schRecordCon'/3,
  'un--schRecordCase'/7,
  'un--schOp'/2,
  'un--schName'/1,
  'un--schMaybeCase'/7,
  'un--schListCase'/7,
  'un--schExtCommon'/5,
  'un--schExp'/4,
  'un--schDef'/6,
  'un--schConstructor'/4,
  'un--schConstant'/2,
  'un--schConstAlt'/6,
  'un--schConUncheckedAlt'/6,
  'un--schConAlt'/6,
  'un--schCaseTree'/6,
  'un--schCaseDef'/1,
  'un--schArgs'/5,
  'un--schArglist'/1,
  'un--op'/2,
  'un--mul'/3,
  'un--mkWorld'/1,
  'un--getScheme'/4,
  'un--firstExists'/2,
  'un--div'/3,
  'un--constPrimitives'/0,
  'un--boolop'/2,
  'un--add'/3
]).
'nested--7220-975--in--un--strTo'(V0, V1) -> case V0 of {'Idris.Core.TT.Signed', E0} -> (fun (V2) -> case V2 of {'Idris.Core.TT.Unlimited'} -> (fun () -> ('un--op'(<<"cast-string-int"/utf8>>, [V1 | []])) end()); {'Idris.Core.TT.P', E1} -> (fun (V3) -> ('un--op'(<<"cast-string-boundedInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V3 - 1) rem 9223372036854775808))) | []]])) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Unsigned', E2} -> (fun (V4) -> ('un--op'(<<"cast-string-boundedUInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)) | []]])) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9357-5312--in--un--showConstAlts'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end; [E0 | E1] -> (fun (V9, V10) -> fun (V11) -> case V9 of {'Idris.Core.CompileExpr.MkNConstAlt', E6, E7} -> (fun (V12, V13) -> case V10 of [] -> begin (V14 = (('un--schExp'(V0, V1, ((V5 + 1) rem 9223372036854775808), V13))(V11))), case V14 of {'Idris.Prelude.Types.Left', E12} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(else "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V16, <<")"/utf8>>))))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V17 = ('un--schConstAlt'(V0, V1, ((V5 + 1) rem 9223372036854775808), V6, V9, V11))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = (('nested--9357-5312--in--un--showConstAlts'(V0, V1, V2, V3, V4, V5, V6, V10))(V11))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V19, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V22))))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> begin (V23 = ('un--schConstAlt'(V0, V1, ((V5 + 1) rem 9223372036854775808), V6, V9, V11))), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V26 = (('nested--9357-5312--in--un--showConstAlts'(V0, V1, V2, V3, V4, V5, V6, V10))(V11))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V25, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V28))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9353-3610--in--un--showAlts'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', <<""/utf8>>}; [E0 | E1] -> (fun (V8, V9) -> case V9 of [] -> begin (V10 = ('un--schConUncheckedAlt'(V0, V1, ((V4 + 1) rem 9223372036854775808), V5, V8, V7))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(else "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, <<")"/utf8>>))))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V13 = ('un--schConAlt'(V0, V1, ((V4 + 1) rem 9223372036854775808), V5, V8, V7))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V16 = ('nested--9353-3610--in--un--showAlts'(V0, V1, V2, V3, V4, V5, V9, V7))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V18))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9357-5206--in--un--recordCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.CompileExpr.MkNConAlt', E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14) -> case V11 of 7 -> 1; _ -> 0 end end(E2, E3, E4, E5, E6)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--6691-458--in--un--okchar'(V0, V1) -> case case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $_)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_String'(V1)); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"C-"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9357-5205--in--un--maybeCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.CompileExpr.MkNConAlt', E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14) -> case V11 of 5 -> 1; 6 -> 1; _ -> 0 end end(E2, E3, E4, E5, E6)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--9357-5204--in--un--listCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.CompileExpr.MkNConAlt', E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14) -> case V11 of 2 -> 1; 3 -> 1; _ -> 0 end end(E2, E3, E4, E5, E6)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--7220-977--in--un--intTo'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Signed', E8} -> (fun (V3) -> case V3 of {'Idris.Core.TT.Unlimited'} -> (fun () -> V2 end()); _ -> case V0 of {'Idris.Core.TT.Signed', E9} -> (fun (V4) -> case V1 of {'Idris.Core.TT.Signed', E10} -> (fun (V5) -> case V5 of {'Idris.Core.TT.P', E11} -> (fun (V6) -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Idris.Core.TT.P', V6}, V4)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V6 - 1) rem 9223372036854775808))) | []]])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.Unsigned', E12} -> (fun (V7) -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) | []]])) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); {'Idris.Core.TT.Unsigned', E13} -> (fun (V8) -> case V1 of {'Idris.Core.TT.Signed', E14} -> (fun (V9) -> case V9 of {'Idris.Core.TT.P', E15} -> (fun (V10) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V10, V8)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V10 - 1) rem 9223372036854775808))) | []]])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); {'Idris.Core.TT.Unsigned', E16} -> (fun (V11) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V11, V8)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11)) | []]])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> case V0 of {'Idris.Core.TT.Signed', E0} -> (fun (V12) -> case V1 of {'Idris.Core.TT.Signed', E1} -> (fun (V13) -> case V13 of {'Idris.Core.TT.P', E2} -> (fun (V14) -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'({'Idris.Core.TT.P', V14}, V12)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V14 - 1) rem 9223372036854775808))) | []]])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V15) -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)) | []]])) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Unsigned', E4} -> (fun (V16) -> case V1 of {'Idris.Core.TT.Signed', E5} -> (fun (V17) -> case V17 of {'Idris.Core.TT.P', E6} -> (fun (V18) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V18, V16)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toSignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V18 - 1) rem 9223372036854775808))) | []]])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Core.TT.Unsigned', E7} -> (fun (V19) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V19, V16)) of 1 -> V2; 0 -> ('un--op'(<<"blodwen-toUnsignedInt"/utf8>>, [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)) | []]])); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9356-4555--in--un--getNothingCode'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.CompileExpr.MkNConAlt', E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14) -> case V11 of 5 -> fun (V15) -> begin (V16 = (('un--schExp'(V0, V1, ((V5 + 1) rem 9223372036854775808), V14))(V15))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V18}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('nested--9356-4555--in--un--getNothingCode'(V0, V1, V2, V3, V4, V5, V9)) end end(E2, E3, E4, E5, E6)); _ -> ('nested--9356-4555--in--un--getNothingCode'(V0, V1, V2, V3, V4, V5, V9)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9355-4123--in--un--getNilCode'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.CompileExpr.MkNConAlt', E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14) -> case V11 of 2 -> fun (V15) -> begin (V16 = (('un--schExp'(V0, V1, ((V5 + 1) rem 9223372036854775808), V14))(V15))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V18}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('nested--9355-4123--in--un--getNilCode'(V0, V1, V2, V3, V4, V5, V9)) end end(E2, E3, E4, E5, E6)); _ -> ('nested--9355-4123--in--un--getNilCode'(V0, V1, V2, V3, V4, V5, V9)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9356-4556--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Core.CompileExpr.MkNConAlt', E2, E3, E4, E5, E6} -> (fun (V11, V12, V13, V14, V15) -> case V12 of 6 -> case V14 of [E7 | E8] -> (fun (V16, V17) -> case V17 of [] -> fun (V18) -> begin (V19 = (('un--schExp'(V0, V1, ((V5 + 1) rem 9223372036854775808), V15))(V18))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('nested--10893-4712--in--un--bindArg'(V0, V1, V2, V3, V4, V5, V10, V11, V13, V16, V15, V6, V16, V21))}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('nested--9356-4556--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E7, E8)); _ -> ('nested--9356-4556--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end; _ -> ('nested--9356-4556--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E2, E3, E4, E5, E6)); _ -> ('nested--9356-4556--in--un--getJustCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9355-4124--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Core.CompileExpr.MkNConAlt', E2, E3, E4, E5, E6} -> (fun (V11, V12, V13, V14, V15) -> case V12 of 3 -> case V14 of [E7 | E8] -> (fun (V16, V17) -> case V17 of [E9 | E10] -> (fun (V18, V19) -> case V19 of [] -> fun (V20) -> begin (V21 = (('un--schExp'(V0, V1, ((V5 + 1) rem 9223372036854775808), V15))(V20))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('nested--10435-4283--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V10, V11, V13, V16, V18, V15, V6, [{'Idris.Builtin.MkPair', V16, <<"car"/utf8>>} | [{'Idris.Builtin.MkPair', V18, <<"cdr"/utf8>>} | []]], V23))}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('nested--9355-4124--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E9, E10)); _ -> ('nested--9355-4124--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E7, E8)); _ -> ('nested--9355-4124--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end; _ -> ('nested--9355-4124--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E2, E3, E4, E5, E6)); _ -> ('nested--9355-4124--in--un--getConsCode'(V0, V1, V2, V3, V4, V5, V6, V10)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9354-3918--in--un--getAltCode'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> begin (V15 = (('un--schExp'(V0, V1, V6, V14))(V9))), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Right', ('nested--9354-3917--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, 0, V7, V13, V17, V14))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7220-976--in--un--dblTo'(V0, V1) -> case V0 of {'Idris.Core.TT.Signed', E0} -> (fun (V2) -> case V2 of {'Idris.Core.TT.Unlimited'} -> (fun () -> ('un--op'(<<"exact-truncate"/utf8>>, [V1 | []])) end()); {'Idris.Core.TT.P', E1} -> (fun (V3) -> ('un--op'(<<"exact-truncate-boundedInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V3 - 1) rem 9223372036854775808))) | []]])) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Unsigned', E2} -> (fun (V4) -> ('un--op'(<<"exact-truncate-boundedUInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)) | []]])) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7220-974--in--un--charTo'(V0, V1) -> case V0 of {'Idris.Core.TT.Signed', E0} -> (fun (V2) -> case V2 of {'Idris.Core.TT.Unlimited'} -> (fun () -> ('un--op'(<<"char->integer"/utf8>>, [V1 | []])) end()); {'Idris.Core.TT.P', E1} -> (fun (V3) -> ('un--op'(<<"cast-char-boundedInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V3 - 1) rem 9223372036854775808))) | []]])) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Unsigned', E2} -> (fun (V4) -> ('un--op'(<<"cast-char-boundedUInt"/utf8>>, [V1 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)) | []]])) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9356-4554--in--un--buildCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case V8 of {'Idris.Prelude.Types.Just', E1} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(if (null? "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, <<")"/utf8>>)))))))))))) end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V10 end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(if (null? "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, <<")"/utf8>>)))))))))))) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V8 of {'Idris.Prelude.Types.Just', E3} -> (fun (V13) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V13 end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(if (null? "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, <<")"/utf8>>)))))))))))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V9 of {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> V15 end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"#f"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9355-4122--in--un--buildCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case V8 of {'Idris.Prelude.Types.Just', E1} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(if (null? "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, <<")"/utf8>>)))))))))))) end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V10 end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(if (null? "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, <<")"/utf8>>)))))))))))) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V8 of {'Idris.Prelude.Types.Just', E3} -> (fun (V13) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V13 end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(if (null? "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, <<")"/utf8>>)))))))))))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V9 of {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> V15 end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"#f"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10435-4283--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> V14; [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case ('un--used'(V17, V11)) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"))) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--10435-4283--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V14)), <<")"/utf8>>)))))))))))))))))); 0 -> ('nested--10435-4283--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9354-3917--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of [] -> V10; [E0 | E1] -> (fun (V12, V13) -> case ('un--used'(V12, V11)) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"))) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9354-3917--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, ((V7 + 1) rem 9223372036854775808), V8, V13, V10, V11)), <<")"/utf8>>)))))))))))))))))); 0 -> ('nested--9354-3917--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, ((V7 + 1) rem 9223372036854775808), V8, V13, V10, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9350-3263--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case ('un--used'(V12, V2)) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"))) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9350-3263--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V9 + 1) rem 9223372036854775808), V13, V11)), <<")"/utf8>>)))))))))))))))))); 0 -> ('nested--9350-3263--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V9 + 1) rem 9223372036854775808), V13, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9349-3140--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case ('un--used'(V12, V2)) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"))) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9349-3140--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V9 + 1) rem 9223372036854775808), V13, V11)), <<")"/utf8>>)))))))))))))))))); 0 -> ('nested--9349-3140--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ((V9 + 1) rem 9223372036854775808), V13, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10893-4712--in--un--bindArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case ('un--used'(V12, V10)) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(unbox "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"))) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, <<")"/utf8>>)))))))))))))); 0 -> V13; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ExtPrim'(V0) -> case V0 of {'Idris.Compiler.Scheme.Common.NewIORef'} -> (fun () -> <<"NewIORef"/utf8>> end()); {'Idris.Compiler.Scheme.Common.ReadIORef'} -> (fun () -> <<"ReadIORef"/utf8>> end()); {'Idris.Compiler.Scheme.Common.WriteIORef'} -> (fun () -> <<"WriteIORef"/utf8>> end()); {'Idris.Compiler.Scheme.Common.NewArray'} -> (fun () -> <<"NewArray"/utf8>> end()); {'Idris.Compiler.Scheme.Common.ArrayGet'} -> (fun () -> <<"ArrayGet"/utf8>> end()); {'Idris.Compiler.Scheme.Common.ArraySet'} -> (fun () -> <<"ArraySet"/utf8>> end()); {'Idris.Compiler.Scheme.Common.GetField'} -> (fun () -> <<"GetField"/utf8>> end()); {'Idris.Compiler.Scheme.Common.SetField'} -> (fun () -> <<"SetField"/utf8>> end()); {'Idris.Compiler.Scheme.Common.VoidElim'} -> (fun () -> <<"VoidElim"/utf8>> end()); {'Idris.Compiler.Scheme.Common.SysOS'} -> (fun () -> <<"SysOS"/utf8>> end()); {'Idris.Compiler.Scheme.Common.SysCodegen'} -> (fun () -> <<"SysCodegen"/utf8>> end()); {'Idris.Compiler.Scheme.Common.OnCollect'} -> (fun () -> <<"OnCollect"/utf8>> end()); {'Idris.Compiler.Scheme.Common.OnCollectAny'} -> (fun () -> <<"OnCollectAny"/utf8>> end()); {'Idris.Compiler.Scheme.Common.MakeFuture'} -> (fun () -> <<"MakeFuture"/utf8>> end()); {'Idris.Compiler.Scheme.Common.Unknown', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_ExtPrim'(V0, V1) -> ('dn--un--show_Show_ExtPrim'(V1)).
'dn--un--__Impl_Show_ExtPrim'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ExtPrim'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ExtPrim'(V1, V2)) end end}.
'un--var'(V0) -> case V0 of {'Idris.Core.CompileExpr.NmLocal', E0, E1} -> (fun (V1, V2) -> 1 end(E0, E1)); _ -> 0 end.
'un--usedConst'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkNConstAlt', E0, E1} -> (fun (V2, V3) -> ('un--used'(V0, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--usedCon'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('un--used'(V0, V6)) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--used'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.NmLocal', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V3)) end(E0, E1)); {'Idris.Core.CompileExpr.NmRef', E2, E3} -> (fun (V4, V5) -> 0 end(E2, E3)); {'Idris.Core.CompileExpr.NmLam', E4, E5, E6} -> (fun (V6, V7, V8) -> ('un--used'(V0, V8)) end(E4, E5, E6)); {'Idris.Core.CompileExpr.NmLet', E7, E8, E9, E10} -> (fun (V9, V10, V11, V12) -> case ('un--used'(V0, V11)) of 1 -> 1; 0 -> ('un--used'(V0, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9, E10)); {'Idris.Core.CompileExpr.NmApp', E11, E12, E13} -> (fun (V13, V14, V15) -> case ('un--used'(V0, V14)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V31, V32, V33, V34)) end end end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V39, V40, V41)) end end end end end}, fun (V42) -> ('un--used'(V0, V42)) end, V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); {'Idris.Core.CompileExpr.NmCon', E14, E15, E16, E17, E18} -> (fun (V43, V44, V45, V46, V47) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V59)) end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V63, V64, V65, V66)) end end end end end end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V68)) end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V71, V72, V73)) end end end end end}, fun (V74) -> ('un--used'(V0, V74)) end, V47)) end(E14, E15, E16, E17, E18)); {'Idris.Core.CompileExpr.NmOp', E19, E20, E21, E22} -> (fun (V75, V76, V77, V78) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V81, V82, V83)) end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V90)) end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V94, V95, V96, V97)) end end end end end end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V99)) end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V102, V103, V104)) end end end end end}, fun (V105) -> ('un--used'(V0, V105)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V78)))) end(E19, E20, E21, E22)); {'Idris.Core.CompileExpr.NmExtPrim', E23, E24, E25} -> (fun (V106, V107, V108) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V111, V112, V113)) end end end end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V116, V117, V118)) end end end end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V120)) end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V124, V125, V126, V127)) end end end end end end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V129)) end end, fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V132, V133, V134)) end end end end end}, fun (V135) -> ('un--used'(V0, V135)) end, V108)) end(E23, E24, E25)); {'Idris.Core.CompileExpr.NmForce', E26, E27, E28} -> (fun (V136, V137, V138) -> ('un--used'(V0, V138)) end(E26, E27, E28)); {'Idris.Core.CompileExpr.NmDelay', E29, E30, E31} -> (fun (V139, V140, V141) -> ('un--used'(V0, V141)) end(E29, E30, E31)); {'Idris.Core.CompileExpr.NmConCase', E32, E33, E34, E35} -> (fun (V142, V143, V144, V145) -> case ('un--used'(V0, V143)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V148, V149, V150)) end end end end end, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V153, V154, V155)) end end end end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V157)) end end, fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V161, V162, V163, V164)) end end end end end end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V166)) end end, fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V169, V170, V171)) end end end end end}, fun (V172) -> ('un--usedCon'(V0, V172)) end, V144)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V173) -> ('un--used'(V0, V173)) end end, V145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35)); {'Idris.Core.CompileExpr.NmConstCase', E36, E37, E38, E39} -> (fun (V174, V175, V176, V177) -> case ('un--used'(V0, V175)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V180, V181, V182)) end end end end end, fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V185, V186, V187)) end end end end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V189)) end end, fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V193, V194, V195, V196)) end end end end end end end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V198)) end end, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V201, V202, V203)) end end end end end}, fun (V204) -> ('un--usedConst'(V0, V204)) end, V176)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V205) -> ('un--used'(V0, V205)) end end, V177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37, E38, E39)); _ -> 0 end.
'un--toPrim'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Core.Core':'un--cond'([{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__newIORef"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.NewIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__readIORef"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.ReadIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__writeIORef"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.WriteIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__newArray"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.NewArray'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__arrayGet"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.ArrayGet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__arraySet"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.ArraySet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__getField"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.GetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__setField"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.SetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"void"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__void"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__os"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.SysOS'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__codegen"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.SysCodegen'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__onCollect"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.OnCollect'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__onCollectAny"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.OnCollectAny'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"prim__makeFuture"/utf8>>}})) end, fun () -> {'Idris.Compiler.Scheme.Common.MakeFuture'} end} | []]]]]]]]]]]]]]]], {'Idris.Compiler.Scheme.Common.Unknown', V0})) end(E0, E1)); _ -> {'Idris.Compiler.Scheme.Common.Unknown', V0} end.
'un--sub'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Core.TT.Signed', E1} -> (fun (V4) -> case V4 of {'Idris.Core.TT.P', E2} -> (fun (V5) -> ('un--op'(<<"bs-"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V5 - 1) rem 9223372036854775808))) | []]]])) end(E2)); _ -> ('un--op'(<<"-"/utf8>>, [V1 | [V2 | []]])) end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V6) -> ('un--op'(<<"bu-"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) | []]]])) end(E3)); _ -> ('un--op'(<<"-"/utf8>>, [V1 | [V2 | []]])) end end(E0)); _ -> ('un--op'(<<"-"/utf8>>, [V1 | [V2 | []]])) end.
'un--showTag'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (V1(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shl'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Core.TT.Signed', E1} -> (fun (V4) -> case V4 of {'Idris.Core.TT.P', E2} -> (fun (V5) -> ('un--op'(<<"blodwen-bits-shl-signed"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V5 - 1) rem 9223372036854775808))) | []]]])) end(E2)); _ -> ('un--op'(<<"blodwen-shl"/utf8>>, [V1 | [V2 | []]])) end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V6) -> ('un--op'(<<"blodwen-bits-shl"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) | []]]])) end(E3)); _ -> ('un--op'(<<"blodwen-shl"/utf8>>, [V1 | [V2 | []]])) end end(E0)); _ -> ('un--op'(<<"blodwen-shl"/utf8>>, [V1 | [V2 | []]])) end.
'un--schUserName'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"u--"/utf8>>, ('un--schString'(V1)))) end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rf--"/utf8>>, ('un--schString'(V2)))) end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> <<"u--_"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schString'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V29) -> ('nested--6691-458--in--un--okchar'(V0, V29)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--schRecordCon'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V2)), <<")"/utf8>>)))).
'un--schRecordCase'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> {'Idris.Prelude.Types.Right', <<"#f"/utf8>>}; [E0 | E1] -> (fun (V7, V8) -> begin (V9 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> ('nested--9354-3918--in--un--getAltCode'(V0, V1, V5, V8, V7, V3, V2, V11, V7, V6)); 0 -> begin (V13 = ('nested--9354-3918--in--un--getAltCode'(V0, V1, V5, V8, V7, V3, V2, V12, V7, V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, <<")"/utf8>>))))))))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schOp'(V0, V1) -> case V0 of {'Idris.Core.TT.Add', E0} -> (fun (V2) -> case V1 of {'Idris.Data.Vect.::', E1, E2} -> (fun (V3, V4) -> fun (V5) -> case V4 of {'Idris.Data.Vect.::', E3, E4} -> (fun (V6, V7) -> case V7 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--add'(('Idris.Idris2.Core.TT':'un--intKind'(V2)), V3, V6))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Sub', E5} -> (fun (V8) -> case V1 of {'Idris.Data.Vect.::', E6, E7} -> (fun (V9, V10) -> fun (V11) -> case V10 of {'Idris.Data.Vect.::', E8, E9} -> (fun (V12, V13) -> case V13 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--sub'(('Idris.Idris2.Core.TT':'un--intKind'(V8)), V9, V12))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Core.TT.Mul', E10} -> (fun (V14) -> case V1 of {'Idris.Data.Vect.::', E11, E12} -> (fun (V15, V16) -> fun (V17) -> case V16 of {'Idris.Data.Vect.::', E13, E14} -> (fun (V18, V19) -> case V19 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--mul'(('Idris.Idris2.Core.TT':'un--intKind'(V14)), V15, V18))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.Div', E15} -> (fun (V20) -> case V1 of {'Idris.Data.Vect.::', E16, E17} -> (fun (V21, V22) -> fun (V23) -> case V22 of {'Idris.Data.Vect.::', E18, E19} -> (fun (V24, V25) -> case V25 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--div'(('Idris.Idris2.Core.TT':'un--intKind'(V20)), V21, V24))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); {'Idris.Core.TT.Mod', E20} -> (fun (V26) -> case V1 of {'Idris.Data.Vect.::', E21, E22} -> (fun (V27, V28) -> fun (V29) -> case V28 of {'Idris.Data.Vect.::', E23, E24} -> (fun (V30, V31) -> case V31 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"remainder"/utf8>>, [V27 | [V30 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); {'Idris.Core.TT.Neg', E25} -> (fun (V32) -> fun (V33) -> case V1 of {'Idris.Data.Vect.::', E26, E27} -> (fun (V34, V35) -> case V35 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"-"/utf8>>, [V34 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); {'Idris.Core.TT.ShiftL', E28} -> (fun (V36) -> case V1 of {'Idris.Data.Vect.::', E29, E30} -> (fun (V37, V38) -> fun (V39) -> case V38 of {'Idris.Data.Vect.::', E31, E32} -> (fun (V40, V41) -> case V41 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--shl'(('Idris.Idris2.Core.TT':'un--intKind'(V36)), V37, V40))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); {'Idris.Core.TT.ShiftR', E33} -> (fun (V42) -> case V1 of {'Idris.Data.Vect.::', E34, E35} -> (fun (V43, V44) -> fun (V45) -> case V44 of {'Idris.Data.Vect.::', E36, E37} -> (fun (V46, V47) -> case V47 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"blodwen-shr"/utf8>>, [V43 | [V46 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); {'Idris.Core.TT.BAnd', E38} -> (fun (V48) -> case V1 of {'Idris.Data.Vect.::', E39, E40} -> (fun (V49, V50) -> fun (V51) -> case V50 of {'Idris.Data.Vect.::', E41, E42} -> (fun (V52, V53) -> case V53 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"blodwen-and"/utf8>>, [V49 | [V52 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); {'Idris.Core.TT.BOr', E43} -> (fun (V54) -> case V1 of {'Idris.Data.Vect.::', E44, E45} -> (fun (V55, V56) -> fun (V57) -> case V56 of {'Idris.Data.Vect.::', E46, E47} -> (fun (V58, V59) -> case V59 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"blodwen-or"/utf8>>, [V55 | [V58 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); {'Idris.Core.TT.BXOr', E48} -> (fun (V60) -> case V1 of {'Idris.Data.Vect.::', E49, E50} -> (fun (V61, V62) -> fun (V63) -> case V62 of {'Idris.Data.Vect.::', E51, E52} -> (fun (V64, V65) -> case V65 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"blodwen-xor"/utf8>>, [V61 | [V64 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48)); {'Idris.Core.TT.LT', E53} -> (fun (V66) -> case V66 of {'Idris.Core.TT.CharType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E62, E63} -> (fun (V67, V68) -> case V68 of {'Idris.Data.Vect.::', E68, E69} -> (fun (V69, V70) -> case V70 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V71) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"char<?"/utf8>>, [V67 | [V69 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E70, E71} -> (fun (V72, V73) -> fun (V74) -> case V73 of {'Idris.Data.Vect.::', E72, E73} -> (fun (V75, V76) -> case V76 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V72 | [V75 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68, E69)); _ -> case V1 of {'Idris.Data.Vect.::', E64, E65} -> (fun (V77, V78) -> fun (V79) -> case V78 of {'Idris.Data.Vect.::', E66, E67} -> (fun (V80, V81) -> case V81 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V77 | [V80 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62, E63)); _ -> case V1 of {'Idris.Data.Vect.::', E58, E59} -> (fun (V82, V83) -> fun (V84) -> case V83 of {'Idris.Data.Vect.::', E60, E61} -> (fun (V85, V86) -> case V86 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V82 | [V85 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E78, E79} -> (fun (V87, V88) -> case V88 of {'Idris.Data.Vect.::', E84, E85} -> (fun (V89, V90) -> case V90 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V91) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"string<?"/utf8>>, [V87 | [V89 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E86, E87} -> (fun (V92, V93) -> fun (V94) -> case V93 of {'Idris.Data.Vect.::', E88, E89} -> (fun (V95, V96) -> case V96 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V92 | [V95 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84, E85)); _ -> case V1 of {'Idris.Data.Vect.::', E80, E81} -> (fun (V97, V98) -> fun (V99) -> case V98 of {'Idris.Data.Vect.::', E82, E83} -> (fun (V100, V101) -> case V101 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V97 | [V100 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78, E79)); _ -> case V1 of {'Idris.Data.Vect.::', E74, E75} -> (fun (V102, V103) -> fun (V104) -> case V103 of {'Idris.Data.Vect.::', E76, E77} -> (fun (V105, V106) -> case V106 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V102 | [V105 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E54, E55} -> (fun (V107, V108) -> fun (V109) -> case V108 of {'Idris.Data.Vect.::', E56, E57} -> (fun (V110, V111) -> case V111 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<"/utf8>>, [V107 | [V110 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); {'Idris.Core.TT.LTE', E90} -> (fun (V112) -> case V112 of {'Idris.Core.TT.CharType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E99, E100} -> (fun (V113, V114) -> case V114 of {'Idris.Data.Vect.::', E105, E106} -> (fun (V115, V116) -> case V116 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V117) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"char<=?"/utf8>>, [V113 | [V115 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E107, E108} -> (fun (V118, V119) -> fun (V120) -> case V119 of {'Idris.Data.Vect.::', E109, E110} -> (fun (V121, V122) -> case V122 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V118 | [V121 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105, E106)); _ -> case V1 of {'Idris.Data.Vect.::', E101, E102} -> (fun (V123, V124) -> fun (V125) -> case V124 of {'Idris.Data.Vect.::', E103, E104} -> (fun (V126, V127) -> case V127 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V123 | [V126 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99, E100)); _ -> case V1 of {'Idris.Data.Vect.::', E95, E96} -> (fun (V128, V129) -> fun (V130) -> case V129 of {'Idris.Data.Vect.::', E97, E98} -> (fun (V131, V132) -> case V132 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V128 | [V131 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E115, E116} -> (fun (V133, V134) -> case V134 of {'Idris.Data.Vect.::', E121, E122} -> (fun (V135, V136) -> case V136 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V137) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"string<=?"/utf8>>, [V133 | [V135 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E123, E124} -> (fun (V138, V139) -> fun (V140) -> case V139 of {'Idris.Data.Vect.::', E125, E126} -> (fun (V141, V142) -> case V142 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V138 | [V141 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121, E122)); _ -> case V1 of {'Idris.Data.Vect.::', E117, E118} -> (fun (V143, V144) -> fun (V145) -> case V144 of {'Idris.Data.Vect.::', E119, E120} -> (fun (V146, V147) -> case V147 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V143 | [V146 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115, E116)); _ -> case V1 of {'Idris.Data.Vect.::', E111, E112} -> (fun (V148, V149) -> fun (V150) -> case V149 of {'Idris.Data.Vect.::', E113, E114} -> (fun (V151, V152) -> case V152 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V148 | [V151 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E91, E92} -> (fun (V153, V154) -> fun (V155) -> case V154 of {'Idris.Data.Vect.::', E93, E94} -> (fun (V156, V157) -> case V157 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"<="/utf8>>, [V153 | [V156 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); {'Idris.Core.TT.EQ', E127} -> (fun (V158) -> case V158 of {'Idris.Core.TT.CharType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E136, E137} -> (fun (V159, V160) -> case V160 of {'Idris.Data.Vect.::', E142, E143} -> (fun (V161, V162) -> case V162 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V163) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"char=?"/utf8>>, [V159 | [V161 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E144, E145} -> (fun (V164, V165) -> fun (V166) -> case V165 of {'Idris.Data.Vect.::', E146, E147} -> (fun (V167, V168) -> case V168 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V164 | [V167 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144, E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142, E143)); _ -> case V1 of {'Idris.Data.Vect.::', E138, E139} -> (fun (V169, V170) -> fun (V171) -> case V170 of {'Idris.Data.Vect.::', E140, E141} -> (fun (V172, V173) -> case V173 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V169 | [V172 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136, E137)); _ -> case V1 of {'Idris.Data.Vect.::', E132, E133} -> (fun (V174, V175) -> fun (V176) -> case V175 of {'Idris.Data.Vect.::', E134, E135} -> (fun (V177, V178) -> case V178 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V174 | [V177 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132, E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E152, E153} -> (fun (V179, V180) -> case V180 of {'Idris.Data.Vect.::', E158, E159} -> (fun (V181, V182) -> case V182 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V183) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"string=?"/utf8>>, [V179 | [V181 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E160, E161} -> (fun (V184, V185) -> fun (V186) -> case V185 of {'Idris.Data.Vect.::', E162, E163} -> (fun (V187, V188) -> case V188 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V184 | [V187 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E158, E159)); _ -> case V1 of {'Idris.Data.Vect.::', E154, E155} -> (fun (V189, V190) -> fun (V191) -> case V190 of {'Idris.Data.Vect.::', E156, E157} -> (fun (V192, V193) -> case V193 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V189 | [V192 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152, E153)); _ -> case V1 of {'Idris.Data.Vect.::', E148, E149} -> (fun (V194, V195) -> fun (V196) -> case V195 of {'Idris.Data.Vect.::', E150, E151} -> (fun (V197, V198) -> case V198 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V194 | [V197 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E128, E129} -> (fun (V199, V200) -> fun (V201) -> case V200 of {'Idris.Data.Vect.::', E130, E131} -> (fun (V202, V203) -> case V203 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"="/utf8>>, [V199 | [V202 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); {'Idris.Core.TT.GTE', E164} -> (fun (V204) -> case V204 of {'Idris.Core.TT.CharType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E173, E174} -> (fun (V205, V206) -> case V206 of {'Idris.Data.Vect.::', E179, E180} -> (fun (V207, V208) -> case V208 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V209) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"char>=?"/utf8>>, [V205 | [V207 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E181, E182} -> (fun (V210, V211) -> fun (V212) -> case V211 of {'Idris.Data.Vect.::', E183, E184} -> (fun (V213, V214) -> case V214 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V210 | [V213 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E179, E180)); _ -> case V1 of {'Idris.Data.Vect.::', E175, E176} -> (fun (V215, V216) -> fun (V217) -> case V216 of {'Idris.Data.Vect.::', E177, E178} -> (fun (V218, V219) -> case V219 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V215 | [V218 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E177, E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E175, E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E173, E174)); _ -> case V1 of {'Idris.Data.Vect.::', E169, E170} -> (fun (V220, V221) -> fun (V222) -> case V221 of {'Idris.Data.Vect.::', E171, E172} -> (fun (V223, V224) -> case V224 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V220 | [V223 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E171, E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169, E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E189, E190} -> (fun (V225, V226) -> case V226 of {'Idris.Data.Vect.::', E195, E196} -> (fun (V227, V228) -> case V228 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V229) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"string>=?"/utf8>>, [V225 | [V227 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E197, E198} -> (fun (V230, V231) -> fun (V232) -> case V231 of {'Idris.Data.Vect.::', E199, E200} -> (fun (V233, V234) -> case V234 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V230 | [V233 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E199, E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E197, E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E195, E196)); _ -> case V1 of {'Idris.Data.Vect.::', E191, E192} -> (fun (V235, V236) -> fun (V237) -> case V236 of {'Idris.Data.Vect.::', E193, E194} -> (fun (V238, V239) -> case V239 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V235 | [V238 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E191, E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189, E190)); _ -> case V1 of {'Idris.Data.Vect.::', E185, E186} -> (fun (V240, V241) -> fun (V242) -> case V241 of {'Idris.Data.Vect.::', E187, E188} -> (fun (V243, V244) -> case V244 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V240 | [V243 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E185, E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E165, E166} -> (fun (V245, V246) -> fun (V247) -> case V246 of {'Idris.Data.Vect.::', E167, E168} -> (fun (V248, V249) -> case V249 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">="/utf8>>, [V245 | [V248 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E165, E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); {'Idris.Core.TT.GT', E201} -> (fun (V250) -> case V250 of {'Idris.Core.TT.CharType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E210, E211} -> (fun (V251, V252) -> case V252 of {'Idris.Data.Vect.::', E216, E217} -> (fun (V253, V254) -> case V254 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V255) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"char>?"/utf8>>, [V251 | [V253 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E218, E219} -> (fun (V256, V257) -> fun (V258) -> case V257 of {'Idris.Data.Vect.::', E220, E221} -> (fun (V259, V260) -> case V260 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V256 | [V259 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E216, E217)); _ -> case V1 of {'Idris.Data.Vect.::', E212, E213} -> (fun (V261, V262) -> fun (V263) -> case V262 of {'Idris.Data.Vect.::', E214, E215} -> (fun (V264, V265) -> case V265 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V261 | [V264 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E214, E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E210, E211)); _ -> case V1 of {'Idris.Data.Vect.::', E206, E207} -> (fun (V266, V267) -> fun (V268) -> case V267 of {'Idris.Data.Vect.::', E208, E209} -> (fun (V269, V270) -> case V270 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V266 | [V269 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E208, E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E206, E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E226, E227} -> (fun (V271, V272) -> case V272 of {'Idris.Data.Vect.::', E232, E233} -> (fun (V273, V274) -> case V274 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V275) -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<"string>?"/utf8>>, [V271 | [V273 | []]]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E234, E235} -> (fun (V276, V277) -> fun (V278) -> case V277 of {'Idris.Data.Vect.::', E236, E237} -> (fun (V279, V280) -> case V280 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V276 | [V279 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E236, E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E234, E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E232, E233)); _ -> case V1 of {'Idris.Data.Vect.::', E228, E229} -> (fun (V281, V282) -> fun (V283) -> case V282 of {'Idris.Data.Vect.::', E230, E231} -> (fun (V284, V285) -> case V285 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V281 | [V284 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E230, E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E228, E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E226, E227)); _ -> case V1 of {'Idris.Data.Vect.::', E222, E223} -> (fun (V286, V287) -> fun (V288) -> case V287 of {'Idris.Data.Vect.::', E224, E225} -> (fun (V289, V290) -> case V290 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V286 | [V289 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E224, E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E222, E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E202, E203} -> (fun (V291, V292) -> fun (V293) -> case V292 of {'Idris.Data.Vect.::', E204, E205} -> (fun (V294, V295) -> case V295 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolop'(<<">"/utf8>>, [V291 | [V294 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E204, E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E201)); {'Idris.Core.TT.StrLength'} -> (fun () -> fun (V296) -> case V1 of {'Idris.Data.Vect.::', E238, E239} -> (fun (V297, V298) -> case V298 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string-length"/utf8>>, [V297 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E238, E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> fun (V299) -> case V1 of {'Idris.Data.Vect.::', E240, E241} -> (fun (V300, V301) -> case V301 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string-ref"/utf8>>, [V300 | [<<"0"/utf8>> | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E240, E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> fun (V302) -> case V1 of {'Idris.Data.Vect.::', E242, E243} -> (fun (V303, V304) -> case V304 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"substring"/utf8>>, [V303 | [<<"1"/utf8>> | [('un--op'(<<"string-length"/utf8>>, [V303 | []])) | []]]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E242, E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E244, E245} -> (fun (V305, V306) -> fun (V307) -> case V306 of {'Idris.Data.Vect.::', E246, E247} -> (fun (V308, V309) -> case V309 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string-ref"/utf8>>, [V305 | [V308 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E244, E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E248, E249} -> (fun (V310, V311) -> fun (V312) -> case V311 of {'Idris.Data.Vect.::', E250, E251} -> (fun (V313, V314) -> case V314 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string-cons"/utf8>>, [V310 | [V313 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E250, E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E252, E253} -> (fun (V315, V316) -> fun (V317) -> case V316 of {'Idris.Data.Vect.::', E254, E255} -> (fun (V318, V319) -> case V319 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string-append"/utf8>>, [V315 | [V318 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E254, E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> fun (V320) -> case V1 of {'Idris.Data.Vect.::', E256, E257} -> (fun (V321, V322) -> case V322 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string-reverse"/utf8>>, [V321 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E256, E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E258, E259} -> (fun (V323, V324) -> case V324 of {'Idris.Data.Vect.::', E260, E261} -> (fun (V325, V326) -> fun (V327) -> case V326 of {'Idris.Data.Vect.::', E262, E263} -> (fun (V328, V329) -> case V329 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string-substr"/utf8>>, [V323 | [V325 | [V328 | []]]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E262, E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E260, E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E258, E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> fun (V330) -> case V1 of {'Idris.Data.Vect.::', E264, E265} -> (fun (V331, V332) -> case V332 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flexp"/utf8>>, [V331 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E264, E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> fun (V333) -> case V1 of {'Idris.Data.Vect.::', E266, E267} -> (fun (V334, V335) -> case V335 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"fllog"/utf8>>, [V334 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E266, E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E268, E269} -> (fun (V336, V337) -> fun (V338) -> case V337 of {'Idris.Data.Vect.::', E270, E271} -> (fun (V339, V340) -> case V340 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"expt"/utf8>>, [V336 | [V339 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E270, E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E268, E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> fun (V341) -> case V1 of {'Idris.Data.Vect.::', E272, E273} -> (fun (V342, V343) -> case V343 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flsin"/utf8>>, [V342 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E272, E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> fun (V344) -> case V1 of {'Idris.Data.Vect.::', E274, E275} -> (fun (V345, V346) -> case V346 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flcos"/utf8>>, [V345 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E274, E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> fun (V347) -> case V1 of {'Idris.Data.Vect.::', E276, E277} -> (fun (V348, V349) -> case V349 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"fltan"/utf8>>, [V348 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E276, E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> fun (V350) -> case V1 of {'Idris.Data.Vect.::', E278, E279} -> (fun (V351, V352) -> case V352 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flasin"/utf8>>, [V351 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E278, E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> fun (V353) -> case V1 of {'Idris.Data.Vect.::', E280, E281} -> (fun (V354, V355) -> case V355 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flacos"/utf8>>, [V354 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E280, E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> fun (V356) -> case V1 of {'Idris.Data.Vect.::', E282, E283} -> (fun (V357, V358) -> case V358 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flatan"/utf8>>, [V357 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E282, E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> fun (V359) -> case V1 of {'Idris.Data.Vect.::', E284, E285} -> (fun (V360, V361) -> case V361 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flsqrt"/utf8>>, [V360 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E284, E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> fun (V362) -> case V1 of {'Idris.Data.Vect.::', E286, E287} -> (fun (V363, V364) -> case V364 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flfloor"/utf8>>, [V363 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E286, E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> fun (V365) -> case V1 of {'Idris.Data.Vect.::', E288, E289} -> (fun (V366, V367) -> case V367 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--op'(<<"flceiling"/utf8>>, [V366 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E288, E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Cast', E290, E291} -> (fun (V368, V369) -> case V368 of {'Idris.Core.TT.DoubleType'} -> (fun () -> case V369 of {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E298, E299} -> (fun (V370, V371) -> case V371 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V372) -> {'Idris.Prelude.Types.Right', ('un--op'(<<"number->string"/utf8>>, [V370 | []]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E300, E301} -> (fun (V373, V374) -> case V374 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V373)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E300, E301)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E298, E299)); _ -> case V1 of {'Idris.Data.Vect.::', E296, E297} -> (fun (V375, V376) -> case V376 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V375)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E296, E297)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E294, E295} -> (fun (V377, V378) -> case V378 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V377)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E294, E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.CharType'} -> (fun () -> case V369 of {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E306, E307} -> (fun (V379, V380) -> case V380 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V381) -> {'Idris.Prelude.Types.Right', ('un--op'(<<"string"/utf8>>, [V379 | []]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E308, E309} -> (fun (V382, V383) -> case V383 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V382)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E308, E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E306, E307)); _ -> case V1 of {'Idris.Data.Vect.::', E304, E305} -> (fun (V384, V385) -> case V385 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V384)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E304, E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E302, E303} -> (fun (V386, V387) -> case V387 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V386)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E302, E303)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V369 of {'Idris.Core.TT.DoubleType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E314, E315} -> (fun (V388, V389) -> case V389 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V390) -> {'Idris.Prelude.Types.Right', ('un--op'(<<"cast-string-double"/utf8>>, [V388 | []]))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E316, E317} -> (fun (V391, V392) -> case V392 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V391)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E316, E317)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E314, E315)); _ -> case V1 of {'Idris.Data.Vect.::', E312, E313} -> (fun (V393, V394) -> case V394 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V393)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E312, E313)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E310, E311} -> (fun (V395, V396) -> case V396 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V395)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E310, E311)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E292, E293} -> (fun (V397, V398) -> case V398 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'()), V368, V369, V397)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E292, E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E290, E291)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E318, E319} -> (fun (V399, V400) -> case V400 of {'Idris.Data.Vect.::', E320, E321} -> (fun (V401, V402) -> fun (V403) -> case V402 of {'Idris.Data.Vect.::', E322, E323} -> (fun (V404, V405) -> case V405 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', V404} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E320, E321)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E318, E319)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E324, E325} -> (fun (V406, V407) -> fun (V408) -> case V407 of {'Idris.Data.Vect.::', E326, E327} -> (fun (V409, V410) -> case V410 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(blodwen-error-quit (string-append \x{22}ERROR: \x{22} "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V409, <<"))"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E326, E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E324, E325)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Core.Name.UN', E2} -> (fun (V3) -> case V3 of {'Idris.Core.Name.Basic', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('un--schString'(V4)))))) end(E3)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('un--schName'(V2)))))) end end(E2)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"-"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('un--schName'(V2)))))) end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V5) -> ('un--schUserName'(V5)) end(E4)); {'Idris.Core.Name.MN', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schString'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)))))) end(E5, E6)); {'Idris.Core.Name.PV', E7, E8} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pat--"/utf8>>, ('un--schName'(V8)))) end(E7, E8)); {'Idris.Core.Name.DN', E9, E10} -> (fun (V10, V11) -> ('un--schName'(V11)) end(E9, E10)); {'Idris.Core.Name.Nested', E11, E12} -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"n--"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('un--schName'(V13)))))))))))) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); {'Idris.Core.Name.CaseBlock', E15, E16} -> (fun (V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case--"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schString'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V17)))))))) end(E15, E16)); {'Idris.Core.Name.WithBlock', E17, E18} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with--"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schString'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)))))))) end(E17, E18)); {'Idris.Core.Name.Resolved', E19} -> (fun (V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fn--"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20)))) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schMaybeCase'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), begin (V17 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V12) -> fun (V13) -> begin (V14 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V16}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V5))(V6))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('nested--9356-4555--in--un--getNothingCode'(V0, V1, V5, V4, V3, V2, V4))(V6))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> case ('un--var'(V3)) of 1 -> begin (V23 = (('nested--9356-4556--in--un--getJustCode'(V0, V1, V5, V4, V3, V2, V9, V4))(V6))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> {'Idris.Prelude.Types.Right', ('nested--9356-4554--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V9, V22, V25, V19))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V26 = (('nested--9356-4556--in--un--getJustCode'(V0, V1, V5, V4, V3, V2, V10, V4))(V6))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9356-4554--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V10, V22, V28, V19)), <<")"/utf8>>))))))))))))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--schListCase'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), begin (V17 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V12) -> fun (V13) -> begin (V14 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V16}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V5))(V6))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('nested--9355-4123--in--un--getNilCode'(V0, V1, V5, V4, V3, V2, V4))(V6))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> case ('un--var'(V3)) of 1 -> begin (V23 = (('nested--9355-4124--in--un--getConsCode'(V0, V1, V5, V4, V3, V2, V9, V4))(V6))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> {'Idris.Prelude.Types.Right', ('nested--9355-4122--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V9, V22, V25, V19))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V26 = (('nested--9355-4124--in--un--getConsCode'(V0, V1, V5, V4, V3, V2, V10, V4))(V6))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9355-4122--in--un--buildCase'(V0, V1, V5, V4, V3, V2, V10, V22, V28, V19)), <<")"/utf8>>))))))))))))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--schExtCommon'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Compiler.Scheme.Common.NewIORef'} -> (fun () -> case V4 of [E0 | E1] -> (fun (V5, V6) -> case V6 of [E2 | E3] -> (fun (V7, V8) -> fun (V9) -> case V8 of [E4 | E5] -> (fun (V10, V11) -> case V11 of [] -> begin (V12 = (('un--schExp'(V0, V1, V2, V7))(V9))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('un--mkWorld'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(box "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, <<")"/utf8>>))))))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V16, V17)) end end}, V4))))))))}, V9)) end end(E4, E5)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V19, V20)) end end}, V4))))))))}, V9)) end end end(E2, E3)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V23, V24)) end end}, V4))))))))}, V21)) end end end(E0, E1)); _ -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V27, V28)) end end}, V4))))))))}, V25)) end end end()); {'Idris.Compiler.Scheme.Common.ReadIORef'} -> (fun () -> case V4 of [E8 | E9] -> (fun (V29, V30) -> case V30 of [E10 | E11] -> (fun (V31, V32) -> fun (V33) -> case V32 of [E12 | E13] -> (fun (V34, V35) -> case V35 of [] -> begin (V36 = (('un--schExp'(V0, V1, V2, V31))(V33))), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('un--mkWorld'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(unbox "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V38, <<")"/utf8>>))))))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V39) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V40, V41)) end end}, V4))))))))}, V33)) end end(E12, E13)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V43, V44)) end end}, V4))))))))}, V33)) end end end(E10, E11)); _ -> fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V47, V48)) end end}, V4))))))))}, V45)) end end end(E8, E9)); _ -> fun (V49) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V50) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V51, V52)) end end}, V4))))))))}, V49)) end end end()); {'Idris.Compiler.Scheme.Common.WriteIORef'} -> (fun () -> case V4 of [E16 | E17] -> (fun (V53, V54) -> case V54 of [E18 | E19] -> (fun (V55, V56) -> case V56 of [E20 | E21] -> (fun (V57, V58) -> fun (V59) -> case V58 of [E22 | E23] -> (fun (V60, V61) -> case V61 of [] -> begin (V62 = (('un--schExp'(V0, V1, V2, V55))(V59))), case V62 of {'Idris.Prelude.Types.Left', E24} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V64) -> begin (V65 = (('un--schExp'(V0, V1, V2, V57))(V59))), case V65 of {'Idris.Prelude.Types.Left', E26} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V67) -> {'Idris.Prelude.Types.Right', ('un--mkWorld'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(set-box! "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V64, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V67, <<")"/utf8>>))))))))))} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V69, V70)) end end}, V4))))))))}, V59)) end end(E22, E23)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V71) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V72, V73)) end end}, V4))))))))}, V59)) end end end(E20, E21)); _ -> fun (V74) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V75) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V75)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V76, V77)) end end}, V4))))))))}, V74)) end end end(E18, E19)); _ -> fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V80, V81)) end end}, V4))))))))}, V78)) end end end(E16, E17)); _ -> fun (V82) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V84, V85)) end end}, V4))))))))}, V82)) end end end()); {'Idris.Compiler.Scheme.Common.NewArray'} -> (fun () -> case V4 of [E28 | E29] -> (fun (V86, V87) -> case V87 of [E30 | E31] -> (fun (V88, V89) -> case V89 of [E32 | E33] -> (fun (V90, V91) -> fun (V92) -> case V91 of [E34 | E35] -> (fun (V93, V94) -> case V94 of [] -> begin (V95 = (('un--schExp'(V0, V1, V2, V88))(V92))), case V95 of {'Idris.Prelude.Types.Left', E36} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V97) -> begin (V98 = (('un--schExp'(V0, V1, V2, V90))(V92))), case V98 of {'Idris.Prelude.Types.Left', E38} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V100) -> {'Idris.Prelude.Types.Right', ('un--mkWorld'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(make-vector "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V97, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V100, <<")"/utf8>>))))))))))} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V101) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V102, V103)) end end}, V4))))))))}, V92)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V105, V106)) end end}, V4))))))))}, V92)) end end end(E32, E33)); _ -> fun (V107) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V109, V110)) end end}, V4))))))))}, V107)) end end end(E30, E31)); _ -> fun (V111) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V113, V114)) end end}, V4))))))))}, V111)) end end end(E28, E29)); _ -> fun (V115) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V117, V118)) end end}, V4))))))))}, V115)) end end end()); {'Idris.Compiler.Scheme.Common.ArrayGet'} -> (fun () -> case V4 of [E40 | E41] -> (fun (V119, V120) -> case V120 of [E42 | E43] -> (fun (V121, V122) -> case V122 of [E44 | E45] -> (fun (V123, V124) -> fun (V125) -> case V124 of [E46 | E47] -> (fun (V126, V127) -> case V127 of [] -> begin (V128 = (('un--schExp'(V0, V1, V2, V121))(V125))), case V128 of {'Idris.Prelude.Types.Left', E48} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V130) -> begin (V131 = (('un--schExp'(V0, V1, V2, V123))(V125))), case V131 of {'Idris.Prelude.Types.Left', E50} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V133) -> {'Idris.Prelude.Types.Right', ('un--mkWorld'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V130, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V133, <<")"/utf8>>))))))))))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V134) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V134)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V135, V136)) end end}, V4))))))))}, V125)) end end(E46, E47)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V137) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V137)) end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V138, V139)) end end}, V4))))))))}, V125)) end end end(E44, E45)); _ -> fun (V140) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V141) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V141)) end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V142, V143)) end end}, V4))))))))}, V140)) end end end(E42, E43)); _ -> fun (V144) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V145) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V145)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V146, V147)) end end}, V4))))))))}, V144)) end end end(E40, E41)); _ -> fun (V148) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V149) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V149)) end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V150, V151)) end end}, V4))))))))}, V148)) end end end()); {'Idris.Compiler.Scheme.Common.ArraySet'} -> (fun () -> case V4 of [E52 | E53] -> (fun (V152, V153) -> case V153 of [E54 | E55] -> (fun (V154, V155) -> case V155 of [E56 | E57] -> (fun (V156, V157) -> case V157 of [E58 | E59] -> (fun (V158, V159) -> fun (V160) -> case V159 of [E60 | E61] -> (fun (V161, V162) -> case V162 of [] -> begin (V163 = (('un--schExp'(V0, V1, V2, V154))(V160))), case V163 of {'Idris.Prelude.Types.Left', E62} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V165) -> begin (V166 = (('un--schExp'(V0, V1, V2, V156))(V160))), case V166 of {'Idris.Prelude.Types.Left', E64} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V168) -> begin (V169 = (('un--schExp'(V0, V1, V2, V158))(V160))), case V169 of {'Idris.Prelude.Types.Left', E66} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V171) -> {'Idris.Prelude.Types.Right', ('un--mkWorld'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector-set! "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V165, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V168, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V171, <<")"/utf8>>))))))))))))))} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V172) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V172)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V173, V174)) end end}, V4))))))))}, V160)) end end(E60, E61)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V175) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V175)) end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V176, V177)) end end}, V4))))))))}, V160)) end end end(E58, E59)); _ -> fun (V178) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V179) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V179)) end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V180, V181)) end end}, V4))))))))}, V178)) end end end(E56, E57)); _ -> fun (V182) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V183) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V183)) end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V184, V185)) end end}, V4))))))))}, V182)) end end end(E54, E55)); _ -> fun (V186) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V187) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V187)) end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V188, V189)) end end}, V4))))))))}, V186)) end end end(E52, E53)); _ -> fun (V190) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V191) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V191)) end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V192, V193)) end end}, V4))))))))}, V190)) end end end()); {'Idris.Compiler.Scheme.Common.VoidElim'} -> (fun () -> case V4 of [E68 | E69] -> (fun (V194, V195) -> fun (V196) -> case V195 of [E70 | E71] -> (fun (V197, V198) -> case V198 of [] -> {'Idris.Prelude.Types.Right', <<"(display \x{22}Error: Executed \x{27}void\x{27}\x{22})"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V199) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V199)) end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V200, V201)) end end}, V4))))))))}, V196)) end end(E70, E71)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V202) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V202)) end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V203, V204)) end end}, V4))))))))}, V196)) end end end(E68, E69)); _ -> fun (V205) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V206) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V206)) end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V207, V208)) end end}, V4))))))))}, V205)) end end end()); {'Idris.Compiler.Scheme.Common.SysOS'} -> (fun () -> fun (V209) -> case V4 of [] -> {'Idris.Prelude.Types.Right', <<"(blodwen-os)"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V210) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V210)) end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V211, V212)) end end}, V4))))))))}, V209)) end end end()); {'Idris.Compiler.Scheme.Common.Unknown', E72} -> (fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t compile unknown external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V213))))}, V214)) end end(E72)); _ -> fun (V215) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed external primitive "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ExtPrim'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V216) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V216)) end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_NamedCExp'(V217, V218)) end end}, V4))))))))}, V215)) end end.
'un--schExp'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.CompileExpr.NmLocal', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', ('un--schName'(V5))} end end(E0, E1)); {'Idris.Core.CompileExpr.NmRef', E2, E3} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', ('un--schName'(V8))} end end(E2, E3)); {'Idris.Core.CompileExpr.NmLam', E4, E5, E6} -> (fun (V10, V11, V12) -> fun (V13) -> begin (V14 = (('un--schExp'(V0, V1, V2, V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(lambda ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V16, <<")"/utf8>>))))))))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6)); {'Idris.Core.CompileExpr.NmLet', E9, E10, E11, E12} -> (fun (V17, V18, V19, V20) -> fun (V21) -> begin (V22 = (('un--schExp'(V0, V1, V2, V19))(V21))), case V22 of {'Idris.Prelude.Types.Left', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V24) -> begin (V25 = (('un--schExp'(V0, V1, V2, V20))(V21))), case V25 of {'Idris.Prelude.Types.Left', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V24, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V27, <<")"/utf8>>))))))))))))} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11, E12)); {'Idris.Core.CompileExpr.NmApp', E17, E18, E19} -> (fun (V28, V29, V30) -> fun (V31) -> case V30 of [] -> begin (V32 = (('un--schExp'(V0, V1, V2, V29))(V31))), case V32 of {'Idris.Prelude.Types.Left', E24} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V34, <<")"/utf8>>))))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V35 = (('un--schExp'(V0, V1, V2, V29))(V31))), case V35 of {'Idris.Prelude.Types.Left', E20} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V37) -> begin (V39 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V38) -> ('un--schExp'(V0, V1, V2, V38)) end, V30, [], V31))), case V39 of {'Idris.Prelude.Types.Left', E22} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V41) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V37, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V41)), <<")"/utf8>>))))))))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E17, E18, E19)); {'Idris.Core.CompileExpr.NmCon', E26, E27, E28, E29, E30} -> (fun (V42, V43, V44, V45, V46) -> case V44 of 2 -> fun (V47) -> case V46 of [] -> {'Idris.Prelude.Types.Right', <<"\x{27}()"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Bad NIL"/utf8>>}, V47)) end end; 3 -> case V46 of [E33 | E34] -> (fun (V48, V49) -> fun (V50) -> case V49 of [E35 | E36] -> (fun (V51, V52) -> case V52 of [] -> begin (V53 = (('un--schExp'(V0, V1, V2, V48))(V50))), case V53 of {'Idris.Prelude.Types.Left', E37} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V55) -> begin (V56 = (('un--schExp'(V0, V1, V2, V51))(V50))), case V56 of {'Idris.Prelude.Types.Left', E39} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V58) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(cons "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V55, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V58, <<")"/utf8>>))))))))} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Bad CONS"/utf8>>}, V50)) end end(E35, E36)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Bad CONS"/utf8>>}, V50)) end end end(E33, E34)); _ -> fun (V59) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Bad CONS"/utf8>>}, V59)) end end; 5 -> fun (V60) -> case V46 of [] -> {'Idris.Prelude.Types.Right', <<"\x{27}()"/utf8>>}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Bad NOTHING"/utf8>>}, V60)) end end; 6 -> fun (V61) -> case V46 of [E41 | E42] -> (fun (V62, V63) -> case V63 of [] -> begin (V64 = (('un--schExp'(V0, V1, V2, V62))(V61))), case V64 of {'Idris.Prelude.Types.Left', E43} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V66) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(box "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V66, <<")"/utf8>>))))} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Bad JUST"/utf8>>}, V61)) end end(E41, E42)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Bad JUST"/utf8>>}, V61)) end end; 7 -> fun (V67) -> begin (V69 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V68) -> ('un--schExp'(V0, V1, V2, V68)) end, V46, [], V67))), case V69 of {'Idris.Prelude.Types.Left', E45} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V71) -> {'Idris.Prelude.Types.Right', ('un--schRecordCon'(V1, V43, V71))} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V72) -> begin (V74 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V73) -> ('un--schExp'(V0, V1, V2, V73)) end, V46, [], V72))), case V74 of {'Idris.Prelude.Types.Left', E31} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V76) -> {'Idris.Prelude.Types.Right', ('un--schConstructor'(V1, V43, V45, V76))} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26, E27, E28, E29, E30)); {'Idris.Core.CompileExpr.NmOp', E47, E48, E49, E50} -> (fun (V77, V78, V79, V80) -> fun (V81) -> begin (V82 = ('un--schArgs'(V0, V1, V2, V80, V81))), case V82 of {'Idris.Prelude.Types.Left', E51} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V84) -> (('un--schOp'(V79, V84))(V81)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E47, E48, E49, E50)); {'Idris.Core.CompileExpr.NmExtPrim', E53, E54, E55} -> (fun (V85, V86, V87) -> (((V0(V2))(('un--toPrim'(V86))))(V87)) end(E53, E54, E55)); {'Idris.Core.CompileExpr.NmForce', E56, E57, E58} -> (fun (V88, V89, V90) -> fun (V91) -> begin (V92 = (('un--schExp'(V0, V1, V2, V90))(V91))), case V92 of {'Idris.Prelude.Types.Left', E59} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V94) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V94, <<")"/utf8>>))))} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E56, E57, E58)); {'Idris.Core.CompileExpr.NmDelay', E61, E62, E63} -> (fun (V95, V96, V97) -> fun (V98) -> begin (V99 = (('un--schExp'(V0, V1, V2, V97))(V98))), case V99 of {'Idris.Prelude.Types.Left', E64} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V101) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(lambda () "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V101, <<")"/utf8>>))))} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61, E62, E63)); {'Idris.Core.CompileExpr.NmConCase', E66, E67, E68, E69} -> (fun (V102, V103, V104, V105) -> ('Idris.Idris2.Core.Core':'un--cond'([{'Idris.Builtin.MkPair', fun () -> ('nested--9357-5206--in--un--recordCase'(V0, V1, V105, V104, V103, V102, V2, V104)) end, fun () -> fun (V106) -> ('un--schRecordCase'(V0, V1, V2, V103, V104, V105, V106)) end end} | [{'Idris.Builtin.MkPair', fun () -> ('nested--9357-5205--in--un--maybeCase'(V0, V1, V105, V104, V103, V102, V2, V104)) end, fun () -> fun (V107) -> ('un--schMaybeCase'(V0, V1, V2, V103, V104, V105, V107)) end end} | [{'Idris.Builtin.MkPair', fun () -> ('nested--9357-5204--in--un--listCase'(V0, V1, V105, V104, V103, V102, V2, V104)) end, fun () -> fun (V108) -> ('un--schListCase'(V0, V1, V2, V103, V104, V105, V108)) end end} | []]]], ('un--schCaseTree'(V0, V1, V2, V103, V104, V105)))) end(E66, E67, E68, E69)); {'Idris.Core.CompileExpr.NmConstCase', E70, E71, E72, E73} -> (fun (V109, V110, V111, V112) -> fun (V113) -> case V112 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V114 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V110))(V113))), case V114 of {'Idris.Prelude.Types.Left', E84} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V116) -> begin (V117 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V110)) of 1 -> begin (V118 = (('nested--9357-5312--in--un--showConstAlts'(V0, V1, V111, V110, V109, V2, V116, V111))(V113))), case V118 of {'Idris.Prelude.Types.Left', E86} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V120) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(cond "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V120, <<")"/utf8>>))))} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V121 = (('nested--9357-5312--in--un--showConstAlts'(V0, V1, V111, V110, V109, V2, V117, V111))(V113))), case V121 of {'Idris.Prelude.Types.Left', E88} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V117, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V116, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (cond "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V123, <<"))"/utf8>>))))))))))))} end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V130 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V124) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V125) -> fun (V126) -> begin (V127 = (('un--schExp'(V0, V1, V2, V125))(V126))), case V127 of {'Idris.Prelude.Types.Left', E74} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V129) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V129}} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V112))(V113))), case V130 of {'Idris.Prelude.Types.Left', E76} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V132) -> begin (V133 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V110))(V113))), case V133 of {'Idris.Prelude.Types.Left', E78} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V135) -> begin (V136 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V110)) of 1 -> begin (V139 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V137) -> fun (V138) -> ('un--schConstAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V135, V137, V138)) end end, V111, [], V113))), case V139 of {'Idris.Prelude.Types.Left', E80} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V141) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(cond "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V141)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V132)), <<")"/utf8>>))))))} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V144 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V142) -> fun (V143) -> ('un--schConstAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V136, V142, V143)) end end, V111, [], V113))), case V144 of {'Idris.Prelude.Types.Left', E82} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V146) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V136, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V135, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (cond "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V146)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V132)), <<"))"/utf8>>))))))))))))))} end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E70, E71, E72, E73)); {'Idris.Core.CompileExpr.NmPrimVal', E90, E91} -> (fun (V147, V148) -> fun (V149) -> {'Idris.Prelude.Types.Right', ('un--schConstant'(V1, V148))} end end(E90, E91)); {'Idris.Core.CompileExpr.NmErased', E92} -> (fun (V150) -> fun (V151) -> {'Idris.Prelude.Types.Right', <<"\x{27}erased"/utf8>>} end end(E92)); {'Idris.Core.CompileExpr.NmCrash', E93, E94} -> (fun (V152, V153) -> fun (V154) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(blodwen-error-quit "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V153)), <<")"/utf8>>))))} end end(E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schDef'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.CompileExpr.MkNmFun', E0, E1} -> (fun (V6, V7) -> case V6 of [] -> begin (V8 = ('Idris.Idris2.Core.Context':'un--getFullName'(V2, V3, V5))), case V8 of {'Idris.Prelude.Types.Left', E6} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V10) -> begin (V11 = (('un--schExp'(V0, V1, 0, V7))(V5))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(define "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(blodwen-lazy (lambda () "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, <<")))\x{a}"/utf8>>))))))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getFullName'(V2, V3, V5))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = (('un--schExp'(V0, V1, 0, V7))(V5))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(define "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (lambda ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schArglist'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V19, <<"))\x{a}"/utf8>>))))))))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Core.CompileExpr.MkNmError', E10} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--getFullName'(V2, V3, V5))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> begin (V24 = (('un--schExp'(V0, V1, 0, V20))(V5))), case V24 of {'Idris.Prelude.Types.Left', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(define ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V23)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" . any-args) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V26, <<")\x{a}"/utf8>>))))))))} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); {'Idris.Core.CompileExpr.MkNmForeign', E15, E16, E17} -> (fun (V27, V28, V29) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end(E15, E16, E17)); {'Idris.Core.CompileExpr.MkNmCon', E18, E19, E20} -> (fun (V30, V31, V32) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schConstructor'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V3)), <<")"/utf8>>)))))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(vector "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V0(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V3)), <<")"/utf8>>)))))))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schConstant'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)) end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V3)) end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4)) end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V5)) end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6)) end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V7)) end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)) end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V10)) end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V11)) end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V12) -> (V0(V12)) end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V13) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V13)), 32)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V13)), 127)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"#\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_String'(V13)))); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(integer->char "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V13)))), <<")"/utf8>>)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V14)) end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> <<"#f"/utf8>> end()); {'Idris.Core.TT.IntType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.StringType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.CharType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.WorldType'} -> (fun () -> <<"#t"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schConstAlt'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.CompileExpr.MkNConstAlt', E0, E1} -> (fun (V6, V7) -> begin (V8 = (('un--schExp'(V0, V1, V2, V7))(V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((equal? "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schConstant'(V1, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<")"/utf8>>))))))))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schConUncheckedAlt'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> begin (V11 = (('un--schExp'(V0, V1, V2, V10))(V5))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('nested--9350-3263--in--un--bindArgs'(V0, V1, V10, V9, V8, V7, V6, V3, V2, 1, V9, V13))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schConAlt'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> begin (V11 = (('un--schExp'(V0, V1, V2, V10))(V5))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showTag'(V0, V1, V6, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--9349-3140--in--un--bindArgs'(V0, V1, V10, V9, V8, V7, V6, V3, V2, 1, V9, V13)), <<")"/utf8>>))))))))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schCaseTree'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> fun (V6) -> begin (V7 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V6))), case V7 of {'Idris.Prelude.Types.Left', E16} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V9) -> begin (V12 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', <<"\x{27}erased"/utf8>>} end end, fun () -> fun (V11) -> ('un--schExp'(V0, V1, V2, V11)) end end, V5))(V6))), case V12 of {'Idris.Prelude.Types.Left', E18} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> {'Idris.Prelude.Types.Right', V14}; 0 -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, <<")"/utf8>>))))))))))))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E20 | E21] -> (fun (V16, V17) -> case V17 of [] -> fun (V18) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V19 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V18))), case V19 of {'Idris.Prelude.Types.Left', E54} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> begin (V23 = ('un--schConUncheckedAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V21, V16, V18))), case V23 of {'Idris.Prelude.Types.Left', E56} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V26 = ('un--schConUncheckedAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V22, V16, V18))), case V26 of {'Idris.Prelude.Types.Left', E58} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V22, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V21, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, <<")"/utf8>>))))))))))))} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V29 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V18))), case V29 of {'Idris.Prelude.Types.Left', E48} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> begin (V33 = ('nested--9353-3610--in--un--showAlts'(V0, V1, V4, V3, V2, V31, V4, V18))), case V33 of {'Idris.Prelude.Types.Left', E50} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V31, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V35, <<")"/utf8>>))))))))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V36 = ('nested--9353-3610--in--un--showAlts'(V0, V1, V4, V3, V2, V32, V4, V18))), case V36 of {'Idris.Prelude.Types.Left', E52} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V32, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V31, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V32, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V38, <<"))"/utf8>>))))))))))))))))} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V39 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V18))), case V39 of {'Idris.Prelude.Types.Left', E38} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V41) -> begin (V48 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V43) -> fun (V44) -> begin (V45 = (('un--schExp'(V0, V1, V2, V43))(V44))), case V45 of {'Idris.Prelude.Types.Left', E40} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V47}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V5))(V18))), case V48 of {'Idris.Prelude.Types.Left', E42} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V52) -> fun (V53) -> ('un--schConAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V41, V52, V53)) end end, V4, [], V18))), case V54 of {'Idris.Prelude.Types.Left', E44} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V41, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V56)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V50)), <<")"/utf8>>))))))))))} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V59 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V57) -> fun (V58) -> ('un--schConAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V51, V57, V58)) end end, V4, [], V18))), case V59 of {'Idris.Prelude.Types.Left', E46} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V61) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V51, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V41, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V51, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V61)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V50)), <<"))"/utf8>>))))))))))))))))))} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> fun (V62) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V63 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V62))), case V63 of {'Idris.Prelude.Types.Left', E32} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> begin (V67 = ('nested--9353-3610--in--un--showAlts'(V0, V1, V4, V3, V2, V65, V4, V62))), case V67 of {'Idris.Prelude.Types.Left', E34} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V69) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V65, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V69, <<")"/utf8>>))))))))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V70 = ('nested--9353-3610--in--un--showAlts'(V0, V1, V4, V3, V2, V66, V4, V62))), case V70 of {'Idris.Prelude.Types.Left', E36} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V72) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V66, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V65, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V66, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V72, <<"))"/utf8>>))))))))))))))))} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V73 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V62))), case V73 of {'Idris.Prelude.Types.Left', E22} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V75) -> begin (V82 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V77) -> fun (V78) -> begin (V79 = (('un--schExp'(V0, V1, V2, V77))(V78))), case V79 of {'Idris.Prelude.Types.Left', E24} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V81}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V5))(V62))), case V82 of {'Idris.Prelude.Types.Left', E26} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> begin (V88 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V86) -> fun (V87) -> ('un--schConAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V75, V86, V87)) end end, V4, [], V62))), case V88 of {'Idris.Prelude.Types.Left', E28} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V90) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V75, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V90)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V84)), <<")"/utf8>>))))))))))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V93 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V91) -> fun (V92) -> ('un--schConAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V85, V91, V92)) end end, V4, [], V62))), case V93 of {'Idris.Prelude.Types.Left', E30} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V95) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V85, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V75, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V85, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V95)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V84)), <<"))"/utf8>>))))))))))))))))))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E20, E21)); _ -> fun (V96) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V97 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V96))), case V97 of {'Idris.Prelude.Types.Left', E10} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V99) -> begin (V100 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> begin (V101 = ('nested--9353-3610--in--un--showAlts'(V0, V1, V4, V3, V2, V99, V4, V96))), case V101 of {'Idris.Prelude.Types.Left', E12} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V103) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V99, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V103, <<")"/utf8>>))))))))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V104 = ('nested--9353-3610--in--un--showAlts'(V0, V1, V4, V3, V2, V100, V4, V96))), case V104 of {'Idris.Prelude.Types.Left', E14} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V106) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V100, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V99, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V100, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V106, <<"))"/utf8>>))))))))))))))))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V107 = (('un--schExp'(V0, V1, ((V2 + 1) rem 9223372036854775808), V3))(V96))), case V107 of {'Idris.Prelude.Types.Left', E0} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V109) -> begin (V116 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V111) -> fun (V112) -> begin (V113 = (('un--schExp'(V0, V1, V2, V111))(V112))), case V113 of {'Idris.Prelude.Types.Left', E2} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V115) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V115}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V5))(V96))), case V116 of {'Idris.Prelude.Types.Left', E4} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V118) -> begin (V119 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sc"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2))))), case ('un--var'(V3)) of 1 -> begin (V122 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V120) -> fun (V121) -> ('un--schConAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V109, V120, V121)) end end, V4, [], V96))), case V122 of {'Idris.Prelude.Types.Left', E6} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V124) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V109, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V124)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V118)), <<")"/utf8>>))))))))))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V127 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V125) -> fun (V126) -> ('un--schConAlt'(V0, V1, ((V2 + 1) rem 9223372036854775808), V119, V125, V126)) end end, V4, [], V96))), case V127 of {'Idris.Prelude.Types.Left', E8} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V129) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(let (("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V119, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V109, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")) (case (vector-ref "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V119, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" 0) "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V129)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schCaseDef'(V118)), <<"))"/utf8>>))))))))))))))))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--schCaseDef'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<""/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(else "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schArgs'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V5, V6) -> begin (V7 = (('un--schExp'(V0, V1, V2, V5))(V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('un--schArgs'(V0, V1, V2, V6, V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', V9, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--schArglist'(V0) -> case V0 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> ('un--schName'(V1)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--schName'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--schArglist'(V2)))))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--op'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V1)), <<")"/utf8>>)))))))).
'un--mul'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Core.TT.Signed', E1} -> (fun (V4) -> case V4 of {'Idris.Core.TT.P', E2} -> (fun (V5) -> ('un--op'(<<"bs*"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V5 - 1) rem 9223372036854775808))) | []]]])) end(E2)); _ -> ('un--op'(<<"*"/utf8>>, [V1 | [V2 | []]])) end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V6) -> ('un--op'(<<"bu*"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) | []]]])) end(E3)); _ -> ('un--op'(<<"*"/utf8>>, [V1 | [V2 | []]])) end end(E0)); _ -> ('un--op'(<<"*"/utf8>>, [V1 | [V2 | []]])) end.
'un--mkWorld'(V0) -> V0.
'un--getScheme'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> fun (V8) -> ('un--schDef'(V1, V2, V0, V4, V7, V8)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--firstExists'(V0, V1) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.Common':'un--exists'(V2, V1))), case V4 of 1 -> {'Idris.Prelude.Types.Just', V2}; 0 -> ('un--firstExists'(V3, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--div'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Core.TT.Signed', E1} -> (fun (V4) -> case V4 of {'Idris.Core.TT.Unlimited'} -> (fun () -> ('un--op'(<<"quotient"/utf8>>, [V1 | [V2 | []]])) end()); {'Idris.Core.TT.P', E2} -> (fun (V5) -> ('un--op'(<<"bs/"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V5 - 1) rem 9223372036854775808))) | []]]])) end(E2)); _ -> ('un--op'(<<"/"/utf8>>, [V1 | [V2 | []]])) end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V6) -> ('un--op'(<<"bu/"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) | []]]])) end(E3)); _ -> ('un--op'(<<"/"/utf8>>, [V1 | [V2 | []]])) end end(E0)); _ -> ('un--op'(<<"/"/utf8>>, [V1 | [V2 | []]])) end.
'un--constPrimitives'() -> {'Idris.Compiler.Common.MkConstantPrimitives', fun (V0) -> fun (V1) -> fun (V2) -> {'Idris.Prelude.Types.Right', ('nested--7220-974--in--un--charTo'(V0, V1))} end end end, fun (V3) -> fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', ('un--op'(<<"cast-int-char"/utf8>>, [V4 | []]))} end end end, fun (V6) -> fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', ('nested--7220-975--in--un--strTo'(V6, V7))} end end end, fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', ('un--op'(<<"number->string"/utf8>>, [V10 | []]))} end end end, fun (V12) -> fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', ('nested--7220-976--in--un--dblTo'(V12, V13))} end end end, fun (V15) -> fun (V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', ('un--op'(<<"exact->inexact"/utf8>>, [V16 | []]))} end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', ('nested--7220-977--in--un--intTo'(V18, V19, V20))} end end end end}.
'un--boolop'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(or (and "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--op'(V0, V1)), <<" 1) 0)"/utf8>>)))).
'un--add'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Core.TT.Signed', E1} -> (fun (V4) -> case V4 of {'Idris.Core.TT.P', E2} -> (fun (V5) -> ('un--op'(<<"bs+"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V5 - 1) rem 9223372036854775808))) | []]]])) end(E2)); _ -> ('un--op'(<<"+"/utf8>>, [V1 | [V2 | []]])) end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V6) -> ('un--op'(<<"bu+"/utf8>>, [V1 | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) | []]]])) end(E3)); _ -> ('un--op'(<<"+"/utf8>>, [V1 | [V2 | []]])) end end(E0)); _ -> ('un--op'(<<"+"/utf8>>, [V1 | [V2 | []]])) end.
