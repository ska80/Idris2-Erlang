-module('Idris.Idris2.Core.Name').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--nameEq-7998'/3,
  'with--with block in nameEq-7973'/4,
  'with--nameEq-7954'/5,
  'with--with block in nameEq-7929'/4,
  'with--nameEq-7910'/5,
  'with--with block in nameEq-7890'/4,
  'with--nameEq-7868'/5,
  'with--with block in nameEq-7837'/4,
  'with--nameEq-7826'/5,
  'with--with block in nameEq-7798'/4,
  'with--nameEq-7787'/5,
  'with--with block in nameEq-7762'/4,
  'with--nameEq-7747'/5,
  'with--with block in nameEq-7711'/4,
  'with--nameEq-7700'/5,
  'with--userNameEq-7660'/3,
  'with--userNameEq-7635'/3,
  'with--mkUserName-5978'/2,
  'case--isUnsafeBuiltin-6322'/2,
  'dn--un--show_Show_UserName'/1,
  'dn--un--show_Show_RawUNUserName'/1,
  'dn--un--show_Show_RawName'/1,
  'dn--un--show_Show_Name'/1,
  'dn--un--showPrec_Show_UserName'/2,
  'dn--un--showPrec_Show_RawUNUserName'/2,
  'dn--un--showPrec_Show_RawName'/2,
  'dn--un--showPrec_Show_Name'/2,
  'dn--un--pretty_Pretty_UserName'/1,
  'dn--un--pretty_Pretty_Name'/1,
  'dn--un--prettyPrec_Pretty_UserName'/2,
  'dn--un--prettyPrec_Pretty_Name'/2,
  'dn--un--min_Ord_UserName'/2,
  'dn--un--min_Ord_Name'/2,
  'dn--un--max_Ord_UserName'/2,
  'dn--un--max_Ord_Name'/2,
  'dn--un--compare_Ord_UserName'/2,
  'dn--un--compare_Ord_Name'/2,
  'dn--un--__Impl_Show_UserName'/0,
  'dn--un--__Impl_Show_Name'/0,
  'dn--un--__Impl_Pretty_UserName'/0,
  'dn--un--__Impl_Pretty_Name'/0,
  'dn--un--__Impl_Ord_UserName'/0,
  'dn--un--__Impl_Ord_Name'/0,
  'dn--un--__Impl_Eq_UserName'/0,
  'dn--un--__Impl_Eq_Name'/0,
  'dn--un-->_Ord_UserName'/2,
  'dn--un-->_Ord_Name'/2,
  'dn--un-->=_Ord_UserName'/2,
  'dn--un-->=_Ord_Name'/2,
  'dn--un--==_Eq_UserName'/2,
  'dn--un--==_Eq_Name'/2,
  'dn--un--<_Ord_UserName'/2,
  'dn--un--<_Ord_Name'/2,
  'dn--un--<=_Ord_UserName'/2,
  'dn--un--<=_Ord_Name'/2,
  'dn--un--/=_Eq_UserName'/2,
  'dn--un--/=_Eq_Name'/2,
  'un--usernameTag'/1,
  'un--userNameRoot'/1,
  'un--userNameEq'/2,
  'un--splitNS'/1,
  'un--namesEq'/2,
  'un--nameTag'/1,
  'un--nameRoot'/1,
  'un--nameEq'/2,
  'un--mkUserName'/1,
  'un--mkNamespacedName'/2,
  'un--mbApplyNS'/2,
  'un--matches'/2,
  'un--isUserName'/1,
  'un--isUnsafeBuiltin'/1,
  'un--isUnderscoreName'/1,
  'un--isUN'/1,
  'un--isSourceName'/1,
  'un--isRF'/1,
  'un--isPatternVariable'/1,
  'un--isBasic'/1,
  'un--dropNS'/1,
  'un--dropAllNS'/1,
  'un--displayUserName'/1,
  'un--displayName'/1,
  'un--asName'/3,
  'un--RawUN'/0,
  'un--Raw'/0
]).
'with--nameEq-7998'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V3) -> case V3 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in nameEq-7973'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.No', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Nothing'} end(E0)); {'Idris.Prelude.Types.Yes', E1} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameEq-7954'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.No', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Nothing'} end(E0)); {'Idris.Prelude.Types.Yes', E1} -> (fun (V6) -> case V6 of 0 -> ('with--with block in nameEq-7973'(V4, V3, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in nameEq-7929'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.No', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Nothing'} end(E0)); {'Idris.Prelude.Types.Yes', E1} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameEq-7910'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.No', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Nothing'} end(E0)); {'Idris.Prelude.Types.Yes', E1} -> (fun (V6) -> case V6 of 0 -> ('with--with block in nameEq-7929'(V4, V3, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in nameEq-7890'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameEq-7868'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.No', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Nothing'} end(E0)); {'Idris.Prelude.Types.Yes', E1} -> (fun (V6) -> case V6 of 0 -> ('with--with block in nameEq-7890'(V4, V3, ('un--nameEq'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in nameEq-7837'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameEq-7826'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V5) -> case V5 of 0 -> ('with--with block in nameEq-7837'(V4, V3, ('un--nameEq'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in nameEq-7798'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameEq-7787'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of 0 -> ('with--with block in nameEq-7798'(V4, V3, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in nameEq-7762'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameEq-7747'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V5) -> case V5 of 0 -> ('with--with block in nameEq-7762'(V4, V3, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--with block in nameEq-7711'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameEq-7700'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V5) -> case V5 of 0 -> ('with--with block in nameEq-7711'(V4, V3, ('un--nameEq'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--userNameEq-7660'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Basics':'un--cong'(V3))} end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--userNameEq-7635'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Basics':'un--cong'(V3))} end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--mkUserName-5978'(V0, V1) -> case V1 of {'Idris.Data.String.StrCons', E0, E1} -> (fun (V2, V3) -> case V2 of $. -> {'Idris.Core.Name.Field', V3}; _ -> {'Idris.Core.Name.Basic', V0} end end(E0, E1)); _ -> {'Idris.Core.Name.Basic', V0} end.
'case--isUnsafeBuiltin-6322'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.UN', E2} -> (fun (V4) -> case V4 of {'Idris.Core.Name.Basic', E3} -> (fun (V5) -> case case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, fun (V32) -> V32 end, [('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"assert_"/utf8>>, V5)) | [('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V35, V36)) end end}, V5, [<<"prim__believe_me"/utf8>> | [<<"believe_me"/utf8>> | [<<"prim__crash"/utf8>> | [<<"idris_crash"/utf8>> | []]]]])) | []]])); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> 0 end end(E2)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'dn--un--show_Show_UserName'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> V1 end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, V2)) end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> <<"_"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_RawUNUserName'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Basic "/utf8>>, V1)) end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Field "/utf8>>, V2)) end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> <<"Underscore"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_RawName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"NS "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_RawName'(V2)), <<")"/utf8>>)))))))) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"UN ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_RawUNUserName'(V3)), <<")"/utf8>>)))) end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"MN ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)))))))) end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"PV ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_RawName'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)))))))) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DN "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_RawName'(V9)), <<")"/utf8>>)))))))) end(E7, E8)); {'Idris.Core.Name.Nested', E9, E10} -> (fun (V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Nested "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}, {'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V16, V17)) end end}}, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_RawName'(V11)), <<")"/utf8>>)))))))) end(E9, E10)); {'Idris.Core.Name.CaseBlock', E11, E12} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CaseBlock "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)))))))) end(E11, E12)); {'Idris.Core.Name.WithBlock', E13, E14} -> (fun (V20, V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CaseBlock "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V20, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V21)))))))) end(E13, E14)); {'Idris.Core.Name.Resolved', E15} -> (fun (V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Resolved "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V22)))) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Name'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Core.Name.UN', E2} -> (fun (V3) -> case V3 of {'Idris.Core.Name.Field', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<".("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Name'(V2)), <<")"/utf8>>)))))) end(E3)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('dn--un--show_Show_Name'(V2)))))) end end(E2)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('dn--un--show_Show_Name'(V2)))))) end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V5) -> ('dn--un--show_Show_UserName'(V5)) end(E4)); {'Idris.Core.Name.MN', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)), <<"}"/utf8>>)))))))) end(E5, E6)); {'Idris.Core.Name.PV', E7, E8} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{P:"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), <<"}"/utf8>>)))))))) end(E7, E8)); {'Idris.Core.Name.DN', E9, E10} -> (fun (V10, V11) -> V10 end(E9, E10)); {'Idris.Core.Name.Nested', E11, E12} -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('dn--un--show_Show_Name'(V13)))))))))) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); {'Idris.Core.Name.CaseBlock', E15, E16} -> (fun (V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case block in "/utf8>>, V16)) end(E15, E16)); {'Idris.Core.Name.WithBlock', E17, E18} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with block in "/utf8>>, V18)) end(E17, E18)); {'Idris.Core.Name.Resolved', E19} -> (fun (V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$resolved"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20)))) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_UserName'(V0, V1) -> ('dn--un--show_Show_UserName'(V1)).
'dn--un--showPrec_Show_RawUNUserName'(V0, V1) -> ('dn--un--show_Show_RawUNUserName'(V1)).
'dn--un--showPrec_Show_RawName'(V0, V1) -> ('dn--un--show_Show_RawName'(V1)).
'dn--un--showPrec_Show_Name'(V0, V1) -> ('dn--un--show_Show_Name'(V1)).
'dn--un--pretty_Pretty_UserName'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V1)) end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"."/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V2)))) end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V3)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"_"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"_"/utf8>>)); 0 -> <<"_"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_Name'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Core.Name.UN', E2} -> (fun (V3) -> case V3 of {'Idris.Core.Name.Field', E3} -> (fun (V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Namespace'(V1)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('dn--un--pretty_Pretty_Name'(V2)))))) end(E3)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Namespace'(V1)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('dn--un--pretty_Pretty_Name'(V2)))) end end(E2)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Namespace'(V1)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('dn--un--pretty_Pretty_Name'(V2)))) end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V5) -> ('dn--un--pretty_Pretty_UserName'(V5)) end(E4)); {'Idris.Core.Name.MN', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--braces'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V6)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V7)))))) end(E5, E6)); {'Idris.Core.Name.PV', E7, E8} -> (fun (V8, V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--braces'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Char'($P)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('dn--un--pretty_Pretty_Name'(V8)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V9)))))) end(E7, E8)); {'Idris.Core.Name.DN', E9, E10} -> (fun (V10, V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V10)) end(E9, E10)); {'Idris.Core.Name.Nested', E11, E12} -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V14, V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V14)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V15)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('dn--un--pretty_Pretty_Name'(V13)))) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); {'Idris.Core.Name.CaseBlock', E15, E16} -> (fun (V16, V17) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"case block in"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V16)))) end(E15, E16)); {'Idris.Core.Name.WithBlock', E17, E18} -> (fun (V18, V19) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"with block in"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V18)))) end(E17, E18)); {'Idris.Core.Name.Resolved', E19} -> (fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"$resolved"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'(V20)))) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_UserName'(V0, V1) -> ('dn--un--pretty_Pretty_UserName'(V1)).
'dn--un--prettyPrec_Pretty_Name'(V0, V1) -> ('dn--un--pretty_Pretty_Name'(V1)).
'dn--un--min_Ord_UserName'(V0, V1) -> case ('dn--un--<_Ord_UserName'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_Name'(V0, V1) -> case ('dn--un--<_Ord_Name'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_UserName'(V0, V1) -> case ('dn--un-->_Ord_UserName'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_Name'(V0, V1) -> case ('dn--un-->_Ord_Name'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_UserName'(V0, V1) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Name.Basic', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V2, V3)) end(E1)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end end(E0)); {'Idris.Core.Name.Field', E2} -> (fun (V4) -> case V1 of {'Idris.Core.Name.Field', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V4, V5)) end(E3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end end(E2)); {'Idris.Core.Name.Underscore'} -> (fun () -> case V1 of {'Idris.Core.Name.Underscore'} -> (fun () -> 1 end()); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end end()); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--usernameTag'(V0)), ('un--usernameTag'(V1)))) end.
'dn--un--compare_Ord_Name'(V0, V1) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> case ('dn--un--compare_Ord_Name'(V3, V5)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_Namespace'(V2, V4)); 2 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V6) -> case V1 of {'Idris.Core.Name.UN', E5} -> (fun (V7) -> ('dn--un--compare_Ord_UserName'(V6, V7)) end(E5)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E4)); {'Idris.Core.Name.MN', E6, E7} -> (fun (V8, V9) -> case V1 of {'Idris.Core.Name.MN', E8, E9} -> (fun (V10, V11) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V9, V11)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V8, V10)); 2 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E6, E7)); {'Idris.Core.Name.PV', E10, E11} -> (fun (V12, V13) -> case V1 of {'Idris.Core.Name.PV', E12, E13} -> (fun (V14, V15) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V13, V15)) of 1 -> ('dn--un--compare_Ord_Name'(V12, V14)); 2 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E10, E11)); {'Idris.Core.Name.DN', E14, E15} -> (fun (V16, V17) -> case V1 of {'Idris.Core.Name.DN', E16, E17} -> (fun (V18, V19) -> ('dn--un--compare_Ord_Name'(V17, V19)) end(E16, E17)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E14, E15)); {'Idris.Core.Name.Nested', E18, E19} -> (fun (V20, V21) -> case V1 of {'Idris.Core.Name.Nested', E20, E21} -> (fun (V22, V23) -> case ('dn--un--compare_Ord_Name'(V21, V23)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V26, V27)) end end}, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V40, V41)) end end}, {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V44, V45)) end end}, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V58, V59)) end end}, V20, V22)); 2 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E18, E19)); {'Idris.Core.Name.CaseBlock', E22, E23} -> (fun (V60, V61) -> case V1 of {'Idris.Core.Name.CaseBlock', E24, E25} -> (fun (V62, V63) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V61, V63)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V60, V62)); 2 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E22, E23)); {'Idris.Core.Name.WithBlock', E26, E27} -> (fun (V64, V65) -> case V1 of {'Idris.Core.Name.WithBlock', E28, E29} -> (fun (V66, V67) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V65, V67)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V64, V66)); 2 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E26, E27)); {'Idris.Core.Name.Resolved', E30} -> (fun (V68) -> case V1 of {'Idris.Core.Name.Resolved', E31} -> (fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V68, V69)) end(E31)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end end(E30)); _ -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('un--nameTag'(V0)), ('un--nameTag'(V1)))) end.
'dn--un--__Impl_Show_UserName'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_UserName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_UserName'(V1, V2)) end end}.
'dn--un--__Impl_Show_Name'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Name'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Name'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_UserName'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_UserName'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_UserName'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_Name'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Name'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Name'(V3, V4)) end end end}.
'dn--un--__Impl_Ord_UserName'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UserName'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UserName'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_UserName'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_UserName'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_UserName'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_UserName'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_UserName'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_UserName'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_UserName'(V16, V17)) end end}.
'dn--un--__Impl_Ord_Name'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Name'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Name'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_Name'(V16, V17)) end end}.
'dn--un--__Impl_Eq_UserName'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UserName'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UserName'(V2, V3)) end end}.
'dn--un--__Impl_Eq_Name'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Name'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Name'(V2, V3)) end end}.
'dn--un-->_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 2)).
'dn--un-->_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 2)).
'dn--un-->=_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 0)).
'dn--un-->=_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 0)).
'dn--un--==_Eq_UserName'(V0, V1) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Name.Basic', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.Core.Name.Field', E2} -> (fun (V4) -> case V1 of {'Idris.Core.Name.Field', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)) end(E3)); _ -> 0 end end(E2)); {'Idris.Core.Name.Underscore'} -> (fun () -> case V1 of {'Idris.Core.Name.Underscore'} -> (fun () -> 1 end()); _ -> 0 end end()); _ -> 0 end.
'dn--un--==_Eq_Name'(V0, V1) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> case ('dn--un--==_Eq_Name'(V3, V5)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, V4)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V6) -> case V1 of {'Idris.Core.Name.UN', E5} -> (fun (V7) -> ('dn--un--==_Eq_UserName'(V6, V7)) end(E5)); _ -> 0 end end(E4)); {'Idris.Core.Name.MN', E6, E7} -> (fun (V8, V9) -> case V1 of {'Idris.Core.Name.MN', E8, E9} -> (fun (V10, V11) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V9, V11)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> 0 end end(E6, E7)); {'Idris.Core.Name.PV', E10, E11} -> (fun (V12, V13) -> case V1 of {'Idris.Core.Name.PV', E12, E13} -> (fun (V14, V15) -> case ('dn--un--==_Eq_Name'(V12, V14)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V13, V15)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> 0 end end(E10, E11)); {'Idris.Core.Name.DN', E14, E15} -> (fun (V16, V17) -> case V1 of {'Idris.Core.Name.DN', E16, E17} -> (fun (V18, V19) -> ('dn--un--==_Eq_Name'(V17, V19)) end(E16, E17)); _ -> 0 end end(E14, E15)); {'Idris.Core.Name.Nested', E18, E19} -> (fun (V20, V21) -> case V1 of {'Idris.Core.Name.Nested', E20, E21} -> (fun (V22, V23) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V26, V27)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V30, V31)) end end}, V20, V22)) of 1 -> ('dn--un--==_Eq_Name'(V21, V23)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> 0 end end(E18, E19)); {'Idris.Core.Name.CaseBlock', E22, E23} -> (fun (V32, V33) -> case V1 of {'Idris.Core.Name.CaseBlock', E24, E25} -> (fun (V34, V35) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V33, V35)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V32, V34)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25)); _ -> 0 end end(E22, E23)); {'Idris.Core.Name.WithBlock', E26, E27} -> (fun (V36, V37) -> case V1 of {'Idris.Core.Name.WithBlock', E28, E29} -> (fun (V38, V39) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V37, V39)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V36, V38)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> 0 end end(E26, E27)); {'Idris.Core.Name.Resolved', E30} -> (fun (V40) -> case V1 of {'Idris.Core.Name.Resolved', E31} -> (fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V40, V41)) end(E31)); _ -> 0 end end(E30)); _ -> 0 end.
'dn--un--<_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 0)).
'dn--un--<_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 0)).
'dn--un--<=_Ord_UserName'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UserName'(V0, V1)), 2)).
'dn--un--<=_Ord_Name'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_Name'(V0, V1)), 2)).
'dn--un--/=_Eq_UserName'(V0, V1) -> case ('dn--un--==_Eq_UserName'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_Name'(V0, V1) -> case ('dn--un--==_Eq_Name'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--usernameTag'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> 0 end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> 2 end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> 3 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--userNameRoot'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--userNameRoot'(V2)) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); {'Idris.Core.Name.DN', E3, E4} -> (fun (V4, V5) -> ('un--userNameRoot'(V5)) end(E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--userNameEq'(V0, V1) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Name.Basic', E1} -> (fun (V3) -> ('with--userNameEq-7635'(V2, V3, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'(V2, V3)))) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.Name.Field', E2} -> (fun (V4) -> case V1 of {'Idris.Core.Name.Field', E3} -> (fun (V5) -> ('with--userNameEq-7660'(V4, V5, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'(V4, V5)))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.Name.Underscore'} -> (fun () -> case V1 of {'Idris.Core.Name.Underscore'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--splitNS'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> case ('un--splitNS'(V2)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V1, V3)), V4} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V0} end.
'un--namesEq'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Idris.Prelude.Types.Just', 0}; _ -> {'Idris.Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--nameEq'(V2, V4)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--namesEq'(V3, V5)), fun (V7) -> {'Idris.Prelude.Types.Just', 0} end)) end)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--nameTag'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> 0 end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> 1 end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> 2 end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> 3 end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> 4 end(E7, E8)); {'Idris.Core.Name.Nested', E9, E10} -> (fun (V10, V11) -> 6 end(E9, E10)); {'Idris.Core.Name.CaseBlock', E11, E12} -> (fun (V12, V13) -> 7 end(E11, E12)); {'Idris.Core.Name.WithBlock', E13, E14} -> (fun (V14, V15) -> 8 end(E13, E14)); {'Idris.Core.Name.Resolved', E15} -> (fun (V16) -> 9 end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nameRoot'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--nameRoot'(V2)) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> ('un--displayUserName'(V3)) end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> V4 end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('un--nameRoot'(V6)) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('un--nameRoot'(V9)) end(E7, E8)); {'Idris.Core.Name.Nested', E9, E10} -> (fun (V10, V11) -> ('un--nameRoot'(V11)) end(E9, E10)); {'Idris.Core.Name.CaseBlock', E11, E12} -> (fun (V12, V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V12)))) end(E11, E12)); {'Idris.Core.Name.WithBlock', E13, E14} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V14)))) end(E13, E14)); {'Idris.Core.Name.Resolved', E15} -> (fun (V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16)))) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nameEq'(V0, V1) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> ('with--nameEq-7700'(V2, V4, ('Idris.Idris2.Core.Name.Namespace':'dn--un--decEq_DecEq_Namespace'(V2, V4)), V3, V5)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V6) -> case V1 of {'Idris.Core.Name.UN', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--cong'(V8)) end, ('un--userNameEq'(V6, V7)))) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.Name.MN', E6, E7} -> (fun (V9, V10) -> case V1 of {'Idris.Core.Name.MN', E8, E9} -> (fun (V11, V12) -> ('with--nameEq-7747'(V9, V11, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'(V9, V11)), V10, V12)) end(E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6, E7)); {'Idris.Core.Name.PV', E10, E11} -> (fun (V13, V14) -> case V1 of {'Idris.Core.Name.PV', E12, E13} -> (fun (V15, V16) -> ('with--nameEq-7787'(V13, V15, ('un--nameEq'(V13, V15)), V14, V16)) end(E12, E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); {'Idris.Core.Name.DN', E14, E15} -> (fun (V17, V18) -> case V1 of {'Idris.Core.Name.DN', E16, E17} -> (fun (V19, V20) -> ('with--nameEq-7826'(V17, V19, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'(V17, V19)), V18, V20)) end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14, E15)); {'Idris.Core.Name.Nested', E18, E19} -> (fun (V21, V22) -> case V1 of {'Idris.Core.Name.Nested', E20, E21} -> (fun (V23, V24) -> ('with--nameEq-7868'(V21, V23, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V25) -> fun (V26) -> ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V27, V28)) end end}, V21, V23)), V22, V24)) end(E20, E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18, E19)); {'Idris.Core.Name.CaseBlock', E22, E23} -> (fun (V29, V30) -> case V1 of {'Idris.Core.Name.CaseBlock', E24, E25} -> (fun (V31, V32) -> ('with--nameEq-7910'(V29, V31, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'(V29, V31)), V30, V32)) end(E24, E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22, E23)); {'Idris.Core.Name.WithBlock', E26, E27} -> (fun (V33, V34) -> case V1 of {'Idris.Core.Name.WithBlock', E28, E29} -> (fun (V35, V36) -> ('with--nameEq-7954'(V33, V35, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_String'(V33, V35)), V34, V36)) end(E28, E29)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E26, E27)); {'Idris.Core.Name.Resolved', E30} -> (fun (V37) -> case V1 of {'Idris.Core.Name.Resolved', E31} -> (fun (V38) -> ('with--nameEq-7998'(V37, V38, ('Idris.Idris2.Decidable.Equality':'dn--un--decEq_DecEq_Int'(V37, V38)))) end(E31)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E30)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mkUserName'(V0) -> case V0 of <<"_"/utf8>> -> {'Idris.Core.Name.Underscore'}; _ -> ('with--mkUserName-5978'(V0, ('Idris.Idris2.Data.String':'un--strM'(V0)))) end.
'un--mkNamespacedName'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Name.UN', V1} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> {'Idris.Core.Name.NS', V2, {'Idris.Core.Name.UN', V1}} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mbApplyNS'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> {'Idris.Core.Name.NS', V2, V1} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--matches'(V0, V1) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V2, V3) -> case V1 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> ('Idris.Idris2.Core.Name.Namespace':'un--isApproximationOf'(V2, V4)) end(E2, E3)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--isUserName'(V0) -> case V0 of {'Idris.Core.Name.PV', E0, E1} -> (fun (V1, V2) -> 0 end(E0, E1)); {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> 0 end(E2, E3)); {'Idris.Core.Name.NS', E4, E5} -> (fun (V5, V6) -> ('un--isUserName'(V6)) end(E4, E5)); {'Idris.Core.Name.DN', E6, E7} -> (fun (V7, V8) -> ('un--isUserName'(V8)) end(E6, E7)); _ -> 1 end.
'un--isUnsafeBuiltin'(V0) -> ('case--isUnsafeBuiltin-6322'(V0, ('un--splitNS'(V0)))).
'un--isUnderscoreName'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> case V1 of {'Idris.Core.Name.Underscore'} -> (fun () -> 1 end()); _ -> 0 end end(E0)); {'Idris.Core.Name.MN', E1, E2} -> (fun (V2, V3) -> case V2 of <<"_"/utf8>> -> 1; _ -> 0 end end(E1, E2)); _ -> 0 end.
'un--isUN'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> {'Idris.Prelude.Types.Just', V1} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--isSourceName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--isSourceName'(V2)) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> 1 end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> 0 end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('un--isSourceName'(V6)) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('un--isSourceName'(V9)) end(E7, E8)); {'Idris.Core.Name.Nested', E9, E10} -> (fun (V10, V11) -> ('un--isSourceName'(V11)) end(E9, E10)); {'Idris.Core.Name.CaseBlock', E11, E12} -> (fun (V12, V13) -> 0 end(E11, E12)); {'Idris.Core.Name.WithBlock', E13, E14} -> (fun (V14, V15) -> 0 end(E13, E14)); {'Idris.Core.Name.Resolved', E15} -> (fun (V16) -> 0 end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isRF'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V1, V4)), V5} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--isRF'(V2)))) end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V6) -> case V6 of {'Idris.Core.Name.Field', E5} -> (fun (V7) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V7}} end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--isPatternVariable'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V1)) end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> 0 end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> 1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isBasic'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> {'Idris.Prelude.Types.Just', V1} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--dropNS'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> V0 end.
'un--dropAllNS'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--dropAllNS'(V2)) end(E0, E1)); _ -> V0 end.
'un--displayUserName'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> V1 end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> V2 end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> <<"_"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--displayName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> case ('un--displayName'(V2)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V5) -> ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V1, V5)) end end, V3)))), V4} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.Core.Name.UN', E4} -> (fun (V6) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, ('un--displayUserName'(V6))} end(E4)); {'Idris.Core.Name.MN', E5, E6} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V7} end(E5, E6)); {'Idris.Core.Name.PV', E7, E8} -> (fun (V9, V10) -> ('un--displayName'(V9)) end(E7, E8)); {'Idris.Core.Name.DN', E9, E10} -> (fun (V11, V12) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V11} end(E9, E10)); {'Idris.Core.Name.Nested', E11, E12} -> (fun (V13, V14) -> ('un--displayName'(V14)) end(E11, E12)); {'Idris.Core.Name.CaseBlock', E13, E14} -> (fun (V15, V16) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case block in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V15))))} end(E13, E14)); {'Idris.Core.Name.WithBlock', E15, E16} -> (fun (V17, V18) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with block in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V17))))} end(E15, E16)); {'Idris.Core.Name.Resolved', E17} -> (fun (V19) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$resolved"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19))))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--asName'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Name.DN', V3, ('un--asName'(V0, V1, V4))} end(E0, E1)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V5, V6) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--replace'(V0, V1, V5)), V6} end(E2, E3)); _ -> V2 end.
'un--RawUN'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_RawUNUserName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_RawUNUserName'(V1, V2)) end end}.
'un--Raw'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_RawName'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_RawName'(V1, V2)) end end}.
