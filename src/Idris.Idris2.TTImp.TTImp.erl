-module('Idris.Idris2.TTImp.TTImp').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--weakenNs-10139'/3,
  'nested--6996-10172--in--un--wknName'/2,
  'nested--9828-12827--in--un--updateNs'/11,
  'nested--10825-13864--in--un--toRF'/12,
  'nested--9820-12762--in--un--setAs'/9,
  'nested--9828-12829--in--un--impAs'/12,
  'nested--10819-13667--in--un--getName'/3,
  'nested--10819-13668--in--un--getFieldName'/3,
  'nested--10825-13865--in--un--fnsUN'/11,
  'nested--10825-13866--in--un--fnsRF'/11,
  'nested--10825-13863--in--un--fldns\x{27}'/11,
  'nested--9828-12828--in--un--findImps'/13,
  'nested--10819-13669--in--un--expandNS'/4,
  'nested--10819-13670--in--un--defName'/4,
  'nested--11473-14319--in--un--app'/6,
  'nested--10825-13867--in--un--all'/11,
  'dn--un--weaken_Weaken_NestedNames'/1,
  'dn--un--weakenNs_Weaken_NestedNames'/2,
  'dn--un--toBuf_TTC_RawImp'/2,
  'dn--un--toBuf_TTC_ImpTy'/3,
  'dn--un--toBuf_TTC_ImpRecord'/3,
  'dn--un--toBuf_TTC_ImpDecl'/3,
  'dn--un--toBuf_TTC_ImpData'/3,
  'dn--un--toBuf_TTC_ImpClause'/3,
  'dn--un--toBuf_TTC_IFieldUpdate'/3,
  'dn--un--toBuf_TTC_IField'/3,
  'dn--un--toBuf_TTC_FnOpt'/3,
  'dn--un--toBuf_TTC_DataOpt'/3,
  'dn--un--toBuf_TTC_BuiltinType'/3,
  'dn--un--toBuf_TTC_BindMode'/3,
  'dn--un--toBuf_TTC_AltType'/3,
  'dn--un--show_Show_(RawImp\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpTy\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpRecord\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpDecl\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpData\x{27} $nm)'/2,
  'dn--un--show_Show_(ImpClause\x{27} $nm)'/2,
  'dn--un--show_Show_(IFieldUpdate\x{27} $nm)'/2,
  'dn--un--show_Show_(IField\x{27} $nm)'/2,
  'dn--un--show_Show_(FnOpt\x{27} $nm)'/2,
  'dn--un--showPrec_Show_(RawImp\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpTy\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpRecord\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpData\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(IFieldUpdate\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(IField\x{27} $nm)'/3,
  'dn--un--showPrec_Show_(FnOpt\x{27} $nm)'/3,
  'dn--un--fromBuf_TTC_RawImp'/2,
  'dn--un--fromBuf_TTC_ImpTy'/2,
  'dn--un--fromBuf_TTC_ImpRecord'/2,
  'dn--un--fromBuf_TTC_ImpDecl'/2,
  'dn--un--fromBuf_TTC_ImpData'/2,
  'dn--un--fromBuf_TTC_ImpClause'/2,
  'dn--un--fromBuf_TTC_IFieldUpdate'/2,
  'dn--un--fromBuf_TTC_IField'/2,
  'dn--un--fromBuf_TTC_FnOpt'/2,
  'dn--un--fromBuf_TTC_DataOpt'/2,
  'dn--un--fromBuf_TTC_BuiltinType'/2,
  'dn--un--fromBuf_TTC_BindMode'/2,
  'dn--un--fromBuf_TTC_AltType'/2,
  'dn--un--__Impl_Weaken_NestedNames'/0,
  'dn--un--__Impl_TTC_RawImp'/0,
  'dn--un--__Impl_TTC_ImpTy'/0,
  'dn--un--__Impl_TTC_ImpRecord'/0,
  'dn--un--__Impl_TTC_ImpDecl'/0,
  'dn--un--__Impl_TTC_ImpData'/0,
  'dn--un--__Impl_TTC_ImpClause'/0,
  'dn--un--__Impl_TTC_IFieldUpdate'/0,
  'dn--un--__Impl_TTC_IField'/0,
  'dn--un--__Impl_TTC_FnOpt'/0,
  'dn--un--__Impl_TTC_DataOpt'/0,
  'dn--un--__Impl_TTC_BuiltinType'/0,
  'dn--un--__Impl_TTC_BindMode'/0,
  'dn--un--__Impl_TTC_AltType'/0,
  'dn--un--__Impl_Show_(RawImp\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpTy\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpRecord\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpDecl\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpData\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(ImpClause\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(IFieldUpdate\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(IField\x{27} $nm)'/1,
  'dn--un--__Impl_Show_(FnOpt\x{27} $nm)'/1,
  'dn--un--__Impl_Eq_WithFlag'/0,
  'dn--un--__Impl_Eq_FnOpt'/0,
  'dn--un--__Impl_Eq_DataOpt'/0,
  'dn--un--==_Eq_WithFlag'/2,
  'dn--un--==_Eq_FnOpt'/2,
  'dn--un--==_Eq_DataOpt'/2,
  'dn--un--/=_Eq_WithFlag'/2,
  'dn--un--/=_Eq_FnOpt'/2,
  'dn--un--/=_Eq_DataOpt'/2,
  'un--mapAltType'/2,
  'un--logRaw'/6,
  'un--lhsInCurrentNS'/3,
  'un--isTotalityReq'/1,
  'un--isIPrimVal'/1,
  'un--implicitsAs'/5,
  'un--getFn'/1,
  'un--getFC'/1,
  'un--gapply'/2,
  'un--findImplicits'/1,
  'un--findIBinds'/1,
  'un--definedInBlock'/2,
  'un--apply'/2,
  'un--RawImp'/0,
  'un--ImpTy'/0,
  'un--ImpRecord'/0,
  'un--ImpParameter\x{27}'/1,
  'un--ImpDecl'/0,
  'un--ImpData'/0,
  'un--ImpClause'/0,
  'un--IRawImp'/0,
  'un--IImpClause'/0,
  'un--IFieldUpdate'/0,
  'un--IField'/0,
  'un--FnOpt'/0,
  'un--AltType'/0
]).
'case--weakenNs-10139'(V0, V1, V2) -> case V1 of 0 -> case V2 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> V0 end()); _ -> case V2 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V3) -> ('dn--un--weaken_Weaken_NestedNames'(('dn--un--weakenNs_Weaken_NestedNames'(V3, V0)))) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V2 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V4) -> ('dn--un--weaken_Weaken_NestedNames'(('dn--un--weakenNs_Weaken_NestedNames'(V4, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--6996-10172--in--un--wknName'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V8)) end, V6)), fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(((V7(V9))(V10)))) end end}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9828-12827--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', V12} end()); _ -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, {'Idris.Prelude.Types.Just', V9}, V11)) of 1 -> {'Idris.Prelude.Types.Just', V12}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--9828-12827--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12)), fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([V11 | V17])) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10825-13864--in--un--toRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Name.UN', E0} -> (fun (V12) -> case V12 of {'Idris.Core.Name.Basic', E1} -> (fun (V13) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Field', V13}} end(E1)); _ -> V11 end end(E0)); _ -> V11 end.
'nested--9820-12762--in--un--setAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V9, V10, V11) -> begin (V12 = ('nested--9820-12762--in--un--setAs'(V0, V1, V2, V3, V4, V5, [{'Idris.Prelude.Types.Nothing'} | V6], V10, V8))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V9, V14, V11}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V15, V16, V17) -> begin (V18 = ('nested--9820-12762--in--un--setAs'(V0, V1, V2, V3, V4, [{'Idris.Prelude.Types.Nothing'} | V5], V6, V16, V8))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAutoApp', V15, V20, V17}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E10, E11, E12, E13} -> (fun (V21, V22, V23, V24) -> begin (V25 = ('nested--9820-12762--in--un--setAs'(V0, V1, V2, V3, V4, [{'Idris.Prelude.Types.Just', V23} | V5], [{'Idris.Prelude.Types.Just', V23} | V6], V22, V8))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamedApp', V21, V27, V23, V24}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13)); {'Idris.TTImp.TTImp.IWithApp', E16, E17, E18} -> (fun (V28, V29, V30) -> begin (V31 = ('nested--9820-12762--in--un--setAs'(V0, V1, V2, V3, V4, V5, V6, V29, V8))), case V31 of {'Idris.Prelude.Types.Left', E19} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IWithApp', V28, V33, V30}} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17, E18)); {'Idris.TTImp.TTImp.IVar', E21, E22} -> (fun (V34, V35) -> begin (V66 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V3}, case V2 of {'Idris.Core.Context.MkDefs', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V36 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V66 of {'Idris.Prelude.Types.Left', E53} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V68) -> case V68 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V69 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Could not find variable "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)))) end, V8))), case V69 of {'Idris.Prelude.Types.Left', E55} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V34, V35}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E57} -> (fun (V72) -> begin (V73 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V4, [], V2, {'Idris.Core.Env.Nil'}, V72))(V8))), case V73 of {'Idris.Prelude.Types.Left', E58} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V75) -> begin (V76 = (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V35, V34, V6, V5, V5, V6, V1, V75))(V8))), case V76 of {'Idris.Prelude.Types.Left', E60} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V78) -> begin (V133 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  In the type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V72)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  Using locals: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V80, V81)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  Found implicits: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V84, V85)) end end}, {'Idris.Prelude.Show.MkShow', fun (V86) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V87) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V89, V90)) end end}, V87)) end, fun (V91) -> fun (V92) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V93)) end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V94, V95)) end end}, V91, V92)) end end}, V86)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V98) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V100, V101)) end end}, V98)) end, fun (V102) -> fun (V103) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V105, V106)) end end}, V102, V103)) end end}, V96, V97)) end end}}, V82)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V110, V111)) end end}, {'Idris.Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V113) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V115, V116)) end end}, V113)) end, fun (V117) -> fun (V118) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V119)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V120, V121)) end end}, V117, V118)) end end}, V112)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V124) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V125) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V126, V127)) end end}, V124)) end, fun (V128) -> fun (V129) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V130) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V131, V132)) end end}, V128, V129)) end end}, V122, V123)) end end}}, V107, V108)) end end}, V78)))))))))))))))) end, V8))), case V133 of {'Idris.Prelude.Types.Left', E62} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V135) -> {'Idris.Prelude.Types.Right', ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V35, V34, V6, V5, ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V34)), V78, {'Idris.TTImp.TTImp.IVar', V34, V35}))} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> {'Idris.Prelude.Types.Right', V7} end.
'nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V14 of {'Idris.Core.Name.UN', E5} -> (fun (V16) -> case V16 of {'Idris.Core.Name.Basic', E7} -> (fun (V17) -> case V15 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'Idris.TTImp.TTImp.INamedApp', V9, V11, V14, {'Idris.TTImp.TTImp.IBindVar', V9, V17}})) end()); _ -> case V15 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'Idris.TTImp.TTImp.INamedApp', V9, V11, V14, {'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, V14, {'Idris.TTImp.TTImp.Implicit', V9, 1}}})) end()); {'Idris.Core.TT.DefImplicit', E8} -> (fun (V18) -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'Idris.TTImp.TTImp.INamedApp', V9, V11, V14, {'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, V14, {'Idris.TTImp.TTImp.Implicit', V9, 1}}})) end(E8)); _ -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end end(E7)); _ -> case V15 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'Idris.TTImp.TTImp.INamedApp', V9, V11, V14, {'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, V14, {'Idris.TTImp.TTImp.Implicit', V9, 1}}})) end()); {'Idris.Core.TT.DefImplicit', E6} -> (fun (V19) -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'Idris.TTImp.TTImp.INamedApp', V9, V11, V14, {'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, V14, {'Idris.TTImp.TTImp.Implicit', V9, 1}}})) end(E6)); _ -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end end(E5)); _ -> case V15 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'Idris.TTImp.TTImp.INamedApp', V9, V11, V14, {'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, V14, {'Idris.TTImp.TTImp.Implicit', V9, 1}}})) end()); {'Idris.Core.TT.DefImplicit', E4} -> (fun (V20) -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, {'Idris.TTImp.TTImp.INamedApp', V9, V11, V14, {'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, V14, {'Idris.TTImp.TTImp.Implicit', V9, 1}}})) end(E4)); _ -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end end(E2, E3)); _ -> ('nested--9828-12829--in--un--impAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10819-13667--in--un--getName'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> V5 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10819-13668--in--un--getFieldName'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> V6 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10825-13865--in--un--fnsUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('nested--10819-13668--in--un--getFieldName'(V0, V1, V11)) end, V6)).
'nested--10825-13866--in--un--fnsRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('nested--10825-13864--in--un--toRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11)) end, ('nested--10825-13865--in--un--fnsUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)))).
'nested--10825-13863--in--un--fldns\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V10 end, fun () -> fun (V11) -> ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V10, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V11)))) end end, V9)).
'nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [E2 | E3] -> (fun (V13, V14) -> case V12 of {'Idris.Core.Value.NBind', E6, E7, E8, E9} -> (fun (V15, V16, V17, V18) -> fun (V19) -> case V17 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V24 = (((V18(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V15, 0}))))(V19))), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14, V26))(V19)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Giving up with the following locals left: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V28, V29)) end end}, V11)))) end, V19))), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> {'Idris.Prelude.Types.Right', []} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15)); _ -> begin (V36 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Giving up with the following locals left: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V34, V35)) end end}, V11)))) end, V19))), case V36 of {'Idris.Prelude.Types.Left', E10} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V38) -> {'Idris.Prelude.Types.Right', []} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6, E7, E8, E9)); _ -> fun (V39) -> begin (V43 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Giving up with the following locals left: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V41, V42)) end end}, V11)))) end, V39))), case V43 of {'Idris.Prelude.Types.Left', E4} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V45) -> {'Idris.Prelude.Types.Right', []} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); [] -> case V12 of {'Idris.Core.Value.NBind', E22, E23, E24, E25} -> (fun (V46, V47, V48, V49) -> fun (V50) -> case V48 of {'Idris.Core.TT.Pi', E28, E29, E30, E31} -> (fun (V51, V52, V53, V54) -> case V53 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V55 = (((V49(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V46, 0}))))(V50))), case V55 of {'Idris.Prelude.Types.Left', E36} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V57) -> case V10 of [E39 | E40] -> (fun (V58, V59) -> case V58 of {'Idris.Prelude.Types.Just', E42} -> (fun (V60) -> case V60 of {'Idris.Core.Name.UN', E44} -> (fun (V61) -> case V61 of {'Idris.Core.Name.Underscore'} -> (fun () -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V57))(V50)) end()); _ -> case ('nested--9828-12827--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V47, V10)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E45} -> (fun (V62) -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V62, [], V57))(V50)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> case ('nested--9828-12827--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V47, V10)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E43} -> (fun (V63) -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V63, [], V57))(V50)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> case ('nested--9828-12827--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V47, V10)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E41} -> (fun (V64) -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V64, [], V57))(V50)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); _ -> case ('nested--9828-12827--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V47, V10)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E38} -> (fun (V65) -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V65, [], V57))(V50)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> begin (V66 = (((V49(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V46, 0}))))(V50))), case V66 of {'Idris.Prelude.Types.Left', E46} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V68) -> case ('nested--9828-12827--in--un--updateNs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V47, V9)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V69 = (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V68))(V50))), case V69 of {'Idris.Prelude.Types.Left', E48} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V71) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V47, {'Idris.Core.TT.AutoImplicit'}} | V71]} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E50} -> (fun (V72) -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V72, V10, [], V68))(V50)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V73 = (((V49(V2))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V46, 0}))))(V50))), case V73 of {'Idris.Prelude.Types.Left', E32} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V75) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V80, V81)) end end}, V76, V77)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V86, V87)) end end}, V82, V83)) end end}, {'Idris.Prelude.Types.Just', V47}, V9)) of 1 -> (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V75))(V50)); 0 -> begin (V88 = (('nested--9828-12828--in--un--findImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, [], V75))(V50))), case V88 of {'Idris.Prelude.Types.Left', E34} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V90) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V47, ('Idris.Idris2.Core.TT':'un--forgetDef'(V53))} | V90]} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30, E31)); _ -> begin (V94 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Giving up with the following locals left: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V92, V93)) end end}, V11)))) end, V50))), case V94 of {'Idris.Prelude.Types.Left', E26} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V96) -> {'Idris.Prelude.Types.Right', []} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E22, E23, E24, E25)); _ -> fun (V97) -> begin (V101 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Giving up with the following locals left: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V99, V100)) end end}, V11)))) end, V97))), case V101 of {'Idris.Prelude.Types.Left', E20} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V103) -> {'Idris.Prelude.Types.Right', []} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V104) -> begin (V108 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Giving up with the following locals left: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V106, V107)) end end}, V11)))) end, V104))), case V108 of {'Idris.Prelude.Types.Left', E0} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V110) -> {'Idris.Prelude.Types.Right', []} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--10819-13669--in--un--expandNS'(V0, V1, V2, V3) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V2, ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()))) of 1 -> V3; 0 -> case V3 of {'Idris.Core.Name.UN', E0} -> (fun (V4) -> {'Idris.Core.Name.NS', V2, V3} end(E0)); {'Idris.Core.Name.MN', E1, E2} -> (fun (V5, V6) -> {'Idris.Core.Name.NS', V2, V3} end(E1, E2)); {'Idris.Core.Name.DN', E3, E4} -> (fun (V7, V8) -> {'Idris.Core.Name.NS', V2, V3} end(E3, E4)); _ -> V3 end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10819-13670--in--un--defName'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> [('nested--10819-13669--in--un--expandNS'(V0, V1, V2, ('nested--10819-13667--in--un--getName'(V0, V1, V8)))) | []] end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.MkImpData', E8, E9, E10, E11, E12} -> (fun (V12, V13, V14, V15, V16) -> [('nested--10819-13669--in--un--expandNS'(V0, V1, V2, V13)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('nested--10819-13669--in--un--expandNS'(V0, V1, V2, V17)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('nested--10819-13667--in--un--getName'(V0, V1, V18)) end, V16))))] end(E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.MkImpLater', E13, E14, E15} -> (fun (V19, V20, V21) -> [('nested--10819-13669--in--un--expandNS'(V0, V1, V2, V20)) | []] end(E13, E14, E15)); _ -> [] end end(E5, E6, E7)); {'Idris.TTImp.TTImp.IParameters', E16, E17, E18} -> (fun (V22, V23, V24) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V36)) end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V40, V41, V42, V43)) end end end end end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V45)) end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V48, V49, V50)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V51, V52)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V53) -> ('nested--10819-13670--in--un--defName'(V0, V1, V2, V53)) end, V24)) end(E16, E17, E18)); {'Idris.TTImp.TTImp.INamespace', E19, E20, E21} -> (fun (V54, V55, V56) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V68)) end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V72, V73, V74, V75)) end end end end end end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V77)) end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V80, V81, V82)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V83, V84)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V85) -> ('nested--10819-13670--in--un--defName'(V0, V1, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V2, V55)), V85)) end, V56)) end(E19, E20, E21)); {'Idris.TTImp.TTImp.IRecord', E22, E23, E24, E25} -> (fun (V86, V87, V88, V89) -> case V89 of {'Idris.TTImp.TTImp.MkImpRecord', E26, E27, E28, E29, E30} -> (fun (V90, V91, V92, V93, V94) -> [('nested--10819-13669--in--un--expandNS'(V0, V1, V2, V93)) | ('nested--10825-13867--in--un--all'(V0, V1, V86, V88, V90, V92, V94, V93, V91, V87, V2))] end(E26, E27, E28, E29, E30)); _ -> [] end end(E22, E23, E24, E25)); {'Idris.TTImp.TTImp.IPragma', E31, E32} -> (fun (V95, V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V97) -> ('nested--10819-13669--in--un--expandNS'(V0, V1, V2, V97)) end, V95)) end(E31, E32)); _ -> [] end.
'nested--11473-14319--in--un--app'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.TTImp.TTImp.IApp', ('un--getFC'(V3)), V3, V5} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> {'Idris.TTImp.TTImp.INamedApp', ('un--getFC'(V3)), V3, V6, V5} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10825-13867--in--un--all'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> [('nested--10819-13669--in--un--expandNS'(V0, V1, V10, V8)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('nested--10819-13669--in--un--expandNS'(V0, V1, ('nested--10825-13863--in--un--fldns\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)), V11)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--10825-13866--in--un--fnsRF'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)), ('nested--10825-13865--in--un--fnsUN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10))))))].
'dn--un--weaken_Weaken_NestedNames'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('nested--6996-10172--in--un--wknName'(V0, V1)) end, V0)).
'dn--un--weakenNs_Weaken_NestedNames'(V0, V1) -> ('case--weakenNs-10139'(V1, V0, ('Idris.Idris2.Core.TT':'un--sizedView'(V0)))).
'dn--un--toBuf_TTC_RawImp'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V2, V4))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V3, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E6, E7, E8, E9, E10, E11} -> (fun (V11, V12, V13, V14, V15, V16) -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V17))), case V18 of {'Idris.Prelude.Types.Left', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V11, V17))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V12))(V17))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> begin (V31 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V27) -> fun (V28) -> ('dn--un--toBuf_TTC_RawImp'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('dn--un--fromBuf_TTC_RawImp'(V29, V30)) end end}, V0, V13, V17))), case V31 of {'Idris.Prelude.Types.Left', E18} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V33) -> begin (V39 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V37, V38)) end end}, V0, V14, V17))), case V39 of {'Idris.Prelude.Types.Left', E20} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V41) -> begin (V42 = (('dn--un--toBuf_TTC_RawImp'(V0, V15))(V17))), case V42 of {'Idris.Prelude.Types.Left', E22} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V44) -> (('dn--un--toBuf_TTC_RawImp'(V0, V16))(V17)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ILam', E24, E25, E26, E27, E28, E29} -> (fun (V45, V46, V47, V48, V49, V50) -> fun (V51) -> begin (V52 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V51))), case V52 of {'Idris.Prelude.Types.Left', E30} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V45, V51))), case V55 of {'Idris.Prelude.Types.Left', E32} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V57) -> begin (V58 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V46))(V51))), case V58 of {'Idris.Prelude.Types.Left', E34} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V60) -> begin (V65 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V61) -> fun (V62) -> ('dn--un--toBuf_TTC_RawImp'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('dn--un--fromBuf_TTC_RawImp'(V63, V64)) end end}, V0, V47, V51))), case V65 of {'Idris.Prelude.Types.Left', E36} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V67) -> begin (V73 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V68, V69, V70)) end end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V71, V72)) end end}, V0, V48, V51))), case V73 of {'Idris.Prelude.Types.Left', E38} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V75) -> begin (V76 = (('dn--un--toBuf_TTC_RawImp'(V0, V49))(V51))), case V76 of {'Idris.Prelude.Types.Left', E40} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V78) -> (('dn--un--toBuf_TTC_RawImp'(V0, V50))(V51)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25, E26, E27, E28, E29)); {'Idris.TTImp.TTImp.ILet', E42, E43, E44, E45, E46, E47, E48} -> (fun (V79, V80, V81, V82, V83, V84, V85) -> fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V86))), case V87 of {'Idris.Prelude.Types.Left', E49} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V89) -> begin (V90 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V79, V86))), case V90 of {'Idris.Prelude.Types.Left', E51} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V92) -> begin (V93 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V80, V86))), case V93 of {'Idris.Prelude.Types.Left', E53} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V95) -> begin (V96 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V81))(V86))), case V96 of {'Idris.Prelude.Types.Left', E55} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V98) -> begin (V99 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V82, V86))), case V99 of {'Idris.Prelude.Types.Left', E57} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V101) -> begin (V102 = (('dn--un--toBuf_TTC_RawImp'(V0, V83))(V86))), case V102 of {'Idris.Prelude.Types.Left', E59} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V104) -> begin (V105 = (('dn--un--toBuf_TTC_RawImp'(V0, V84))(V86))), case V105 of {'Idris.Prelude.Types.Left', E61} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V107) -> (('dn--un--toBuf_TTC_RawImp'(V0, V85))(V86)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E42, E43, E44, E45, E46, E47, E48)); {'Idris.TTImp.TTImp.ICase', E63, E64, E65, E66} -> (fun (V108, V109, V110, V111) -> fun (V112) -> begin (V113 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V112))), case V113 of {'Idris.Prelude.Types.Left', E67} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V115) -> begin (V116 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V108, V112))), case V116 of {'Idris.Prelude.Types.Left', E69} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V118) -> begin (V119 = (('dn--un--toBuf_TTC_RawImp'(V0, V109))(V112))), case V119 of {'Idris.Prelude.Types.Left', E71} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V121) -> begin (V122 = (('dn--un--toBuf_TTC_RawImp'(V0, V110))(V112))), case V122 of {'Idris.Prelude.Types.Left', E73} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V124) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V125) -> fun (V126) -> fun (V127) -> ('dn--un--toBuf_TTC_ImpClause'(V125, V126, V127)) end end end, fun (V128) -> fun (V129) -> ('dn--un--fromBuf_TTC_ImpClause'(V128, V129)) end end}, V0, V111, V112)) end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63, E64, E65, E66)); {'Idris.TTImp.TTImp.ILocal', E75, E76, E77} -> (fun (V130, V131, V132) -> fun (V133) -> begin (V134 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V133))), case V134 of {'Idris.Prelude.Types.Left', E78} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V136) -> begin (V137 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V130, V133))), case V137 of {'Idris.Prelude.Types.Left', E80} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V139) -> begin (V145 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V140) -> fun (V141) -> fun (V142) -> ('dn--un--toBuf_TTC_ImpDecl'(V140, V141, V142)) end end end, fun (V143) -> fun (V144) -> ('dn--un--fromBuf_TTC_ImpDecl'(V143, V144)) end end}, V0, V131, V133))), case V145 of {'Idris.Prelude.Types.Left', E82} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V147) -> (('dn--un--toBuf_TTC_RawImp'(V0, V132))(V133)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75, E76, E77)); {'Idris.TTImp.TTImp.ICaseLocal', E84, E85, E86, E87, E88} -> (fun (V148, V149, V150, V151, V152) -> ('dn--un--toBuf_TTC_RawImp'(V0, V152)) end(E84, E85, E86, E87, E88)); {'Idris.TTImp.TTImp.IUpdate', E89, E90, E91} -> (fun (V153, V154, V155) -> fun (V156) -> begin (V157 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V156))), case V157 of {'Idris.Prelude.Types.Left', E92} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V159) -> begin (V160 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V153, V156))), case V160 of {'Idris.Prelude.Types.Left', E94} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V162) -> begin (V168 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V163) -> fun (V164) -> fun (V165) -> ('dn--un--toBuf_TTC_IFieldUpdate'(V163, V164, V165)) end end end, fun (V166) -> fun (V167) -> ('dn--un--fromBuf_TTC_IFieldUpdate'(V166, V167)) end end}, V0, V154, V156))), case V168 of {'Idris.Prelude.Types.Left', E96} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V170) -> (('dn--un--toBuf_TTC_RawImp'(V0, V155))(V156)) end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89, E90, E91)); {'Idris.TTImp.TTImp.IApp', E98, E99, E100} -> (fun (V171, V172, V173) -> fun (V174) -> begin (V175 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V174))), case V175 of {'Idris.Prelude.Types.Left', E101} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V177) -> begin (V178 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V171, V174))), case V178 of {'Idris.Prelude.Types.Left', E103} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V180) -> begin (V181 = (('dn--un--toBuf_TTC_RawImp'(V0, V172))(V174))), case V181 of {'Idris.Prelude.Types.Left', E105} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V183) -> (('dn--un--toBuf_TTC_RawImp'(V0, V173))(V174)) end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98, E99, E100)); {'Idris.TTImp.TTImp.INamedApp', E107, E108, E109, E110} -> (fun (V184, V185, V186, V187) -> fun (V188) -> begin (V189 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V188))), case V189 of {'Idris.Prelude.Types.Left', E111} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V191) -> begin (V192 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V184, V188))), case V192 of {'Idris.Prelude.Types.Left', E113} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V194) -> begin (V195 = (('dn--un--toBuf_TTC_RawImp'(V0, V185))(V188))), case V195 of {'Idris.Prelude.Types.Left', E115} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V197) -> begin (V198 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V186, V188))), case V198 of {'Idris.Prelude.Types.Left', E117} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V200) -> (('dn--un--toBuf_TTC_RawImp'(V0, V187))(V188)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E107, E108, E109, E110)); {'Idris.TTImp.TTImp.IWithApp', E119, E120, E121} -> (fun (V201, V202, V203) -> fun (V204) -> begin (V205 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V204))), case V205 of {'Idris.Prelude.Types.Left', E122} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V207) -> begin (V208 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V201, V204))), case V208 of {'Idris.Prelude.Types.Left', E124} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V210) -> begin (V211 = (('dn--un--toBuf_TTC_RawImp'(V0, V202))(V204))), case V211 of {'Idris.Prelude.Types.Left', E126} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V213) -> (('dn--un--toBuf_TTC_RawImp'(V0, V203))(V204)) end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120, E121)); {'Idris.TTImp.TTImp.ISearch', E128, E129} -> (fun (V214, V215) -> fun (V216) -> begin (V217 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 10, V216))), case V217 of {'Idris.Prelude.Types.Left', E130} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V219) -> begin (V220 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V214, V216))), case V220 of {'Idris.Prelude.Types.Left', E132} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V222) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V215, V216)) end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128, E129)); {'Idris.TTImp.TTImp.IAlternative', E134, E135, E136} -> (fun (V223, V224, V225) -> fun (V226) -> begin (V227 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 11, V226))), case V227 of {'Idris.Prelude.Types.Left', E137} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V229) -> begin (V230 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V223, V226))), case V230 of {'Idris.Prelude.Types.Left', E139} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V232) -> begin (V233 = ('dn--un--toBuf_TTC_AltType'(V0, V224, V226))), case V233 of {'Idris.Prelude.Types.Left', E141} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V235) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V236) -> fun (V237) -> ('dn--un--toBuf_TTC_RawImp'(V236, V237)) end end, fun (V238) -> fun (V239) -> ('dn--un--fromBuf_TTC_RawImp'(V238, V239)) end end}, V0, V225, V226)) end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E134, E135, E136)); {'Idris.TTImp.TTImp.IRewrite', E143, E144, E145} -> (fun (V240, V241, V242) -> fun (V243) -> begin (V244 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 12, V243))), case V244 of {'Idris.Prelude.Types.Left', E146} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V246) -> begin (V247 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V240, V243))), case V247 of {'Idris.Prelude.Types.Left', E148} -> (fun (V248) -> {'Idris.Prelude.Types.Left', V248} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V249) -> begin (V250 = (('dn--un--toBuf_TTC_RawImp'(V0, V241))(V243))), case V250 of {'Idris.Prelude.Types.Left', E150} -> (fun (V251) -> {'Idris.Prelude.Types.Left', V251} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V252) -> (('dn--un--toBuf_TTC_RawImp'(V0, V242))(V243)) end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E143, E144, E145)); {'Idris.TTImp.TTImp.ICoerced', E152, E153} -> (fun (V253, V254) -> fun (V255) -> begin (V256 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 13, V255))), case V256 of {'Idris.Prelude.Types.Left', E154} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V258) -> begin (V259 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V253, V255))), case V259 of {'Idris.Prelude.Types.Left', E156} -> (fun (V260) -> {'Idris.Prelude.Types.Left', V260} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V261) -> (('dn--un--toBuf_TTC_RawImp'(V0, V254))(V255)) end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E152, E153)); {'Idris.TTImp.TTImp.IBindHere', E158, E159, E160} -> (fun (V262, V263, V264) -> fun (V265) -> begin (V266 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 14, V265))), case V266 of {'Idris.Prelude.Types.Left', E161} -> (fun (V267) -> {'Idris.Prelude.Types.Left', V267} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V268) -> begin (V269 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V262, V265))), case V269 of {'Idris.Prelude.Types.Left', E163} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V271) -> begin (V272 = ('dn--un--toBuf_TTC_BindMode'(V0, V263, V265))), case V272 of {'Idris.Prelude.Types.Left', E165} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V274) -> (('dn--un--toBuf_TTC_RawImp'(V0, V264))(V265)) end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E158, E159, E160)); {'Idris.TTImp.TTImp.IBindVar', E167, E168} -> (fun (V275, V276) -> fun (V277) -> begin (V278 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 15, V277))), case V278 of {'Idris.Prelude.Types.Left', E169} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V280) -> begin (V281 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V275, V277))), case V281 of {'Idris.Prelude.Types.Left', E171} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V283) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V276))(V277)) end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E167, E168)); {'Idris.TTImp.TTImp.IAs', E173, E174, E175, E176, E177} -> (fun (V284, V285, V286, V287, V288) -> fun (V289) -> begin (V290 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 16, V289))), case V290 of {'Idris.Prelude.Types.Left', E178} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V292) -> begin (V293 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V284, V289))), case V293 of {'Idris.Prelude.Types.Left', E180} -> (fun (V294) -> {'Idris.Prelude.Types.Left', V294} end(E180)); {'Idris.Prelude.Types.Right', E181} -> (fun (V295) -> begin (V296 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V285, V289))), case V296 of {'Idris.Prelude.Types.Left', E182} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V298) -> begin (V299 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_UseSide'(V0, V286, V289))), case V299 of {'Idris.Prelude.Types.Left', E184} -> (fun (V300) -> {'Idris.Prelude.Types.Left', V300} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V301) -> begin (V302 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V287, V289))), case V302 of {'Idris.Prelude.Types.Left', E186} -> (fun (V303) -> {'Idris.Prelude.Types.Left', V303} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V304) -> (('dn--un--toBuf_TTC_RawImp'(V0, V288))(V289)) end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E173, E174, E175, E176, E177)); {'Idris.TTImp.TTImp.IMustUnify', E188, E189, E190} -> (fun (V305, V306, V307) -> fun (V308) -> begin (V309 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 17, V308))), case V309 of {'Idris.Prelude.Types.Left', E191} -> (fun (V310) -> {'Idris.Prelude.Types.Left', V310} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V311) -> begin (V312 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V305, V308))), case V312 of {'Idris.Prelude.Types.Left', E193} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V314) -> (('dn--un--toBuf_TTC_RawImp'(V0, V307))(V308)) end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E188, E189, E190)); {'Idris.TTImp.TTImp.IDelayed', E195, E196, E197} -> (fun (V315, V316, V317) -> fun (V318) -> begin (V319 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 18, V318))), case V319 of {'Idris.Prelude.Types.Left', E198} -> (fun (V320) -> {'Idris.Prelude.Types.Left', V320} end(E198)); {'Idris.Prelude.Types.Right', E199} -> (fun (V321) -> begin (V322 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V315, V318))), case V322 of {'Idris.Prelude.Types.Left', E200} -> (fun (V323) -> {'Idris.Prelude.Types.Left', V323} end(E200)); {'Idris.Prelude.Types.Right', E201} -> (fun (V324) -> begin (V325 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_LazyReason'(V0, V316, V318))), case V325 of {'Idris.Prelude.Types.Left', E202} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E202)); {'Idris.Prelude.Types.Right', E203} -> (fun (V327) -> (('dn--un--toBuf_TTC_RawImp'(V0, V317))(V318)) end(E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E195, E196, E197)); {'Idris.TTImp.TTImp.IDelay', E204, E205} -> (fun (V328, V329) -> fun (V330) -> begin (V331 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 19, V330))), case V331 of {'Idris.Prelude.Types.Left', E206} -> (fun (V332) -> {'Idris.Prelude.Types.Left', V332} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V333) -> begin (V334 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V328, V330))), case V334 of {'Idris.Prelude.Types.Left', E208} -> (fun (V335) -> {'Idris.Prelude.Types.Left', V335} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V336) -> (('dn--un--toBuf_TTC_RawImp'(V0, V329))(V330)) end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E204, E205)); {'Idris.TTImp.TTImp.IForce', E210, E211} -> (fun (V337, V338) -> fun (V339) -> begin (V340 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 20, V339))), case V340 of {'Idris.Prelude.Types.Left', E212} -> (fun (V341) -> {'Idris.Prelude.Types.Left', V341} end(E212)); {'Idris.Prelude.Types.Right', E213} -> (fun (V342) -> begin (V343 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V337, V339))), case V343 of {'Idris.Prelude.Types.Left', E214} -> (fun (V344) -> {'Idris.Prelude.Types.Left', V344} end(E214)); {'Idris.Prelude.Types.Right', E215} -> (fun (V345) -> (('dn--un--toBuf_TTC_RawImp'(V0, V338))(V339)) end(E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E210, E211)); {'Idris.TTImp.TTImp.IQuote', E216, E217} -> (fun (V346, V347) -> fun (V348) -> begin (V349 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 21, V348))), case V349 of {'Idris.Prelude.Types.Left', E218} -> (fun (V350) -> {'Idris.Prelude.Types.Left', V350} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V351) -> begin (V352 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V346, V348))), case V352 of {'Idris.Prelude.Types.Left', E220} -> (fun (V353) -> {'Idris.Prelude.Types.Left', V353} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V354) -> (('dn--un--toBuf_TTC_RawImp'(V0, V347))(V348)) end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E216, E217)); {'Idris.TTImp.TTImp.IQuoteName', E222, E223} -> (fun (V355, V356) -> fun (V357) -> begin (V358 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 22, V357))), case V358 of {'Idris.Prelude.Types.Left', E224} -> (fun (V359) -> {'Idris.Prelude.Types.Left', V359} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V360) -> begin (V361 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V355, V357))), case V361 of {'Idris.Prelude.Types.Left', E226} -> (fun (V362) -> {'Idris.Prelude.Types.Left', V362} end(E226)); {'Idris.Prelude.Types.Right', E227} -> (fun (V363) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V356, V357)) end(E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E222, E223)); {'Idris.TTImp.TTImp.IQuoteDecl', E228, E229} -> (fun (V364, V365) -> fun (V366) -> begin (V367 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 23, V366))), case V367 of {'Idris.Prelude.Types.Left', E230} -> (fun (V368) -> {'Idris.Prelude.Types.Left', V368} end(E230)); {'Idris.Prelude.Types.Right', E231} -> (fun (V369) -> begin (V370 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V364, V366))), case V370 of {'Idris.Prelude.Types.Left', E232} -> (fun (V371) -> {'Idris.Prelude.Types.Left', V371} end(E232)); {'Idris.Prelude.Types.Right', E233} -> (fun (V372) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V373) -> fun (V374) -> fun (V375) -> ('dn--un--toBuf_TTC_ImpDecl'(V373, V374, V375)) end end end, fun (V376) -> fun (V377) -> ('dn--un--fromBuf_TTC_ImpDecl'(V376, V377)) end end}, V0, V365, V366)) end(E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E228, E229)); {'Idris.TTImp.TTImp.IUnquote', E234, E235} -> (fun (V378, V379) -> fun (V380) -> begin (V381 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 24, V380))), case V381 of {'Idris.Prelude.Types.Left', E236} -> (fun (V382) -> {'Idris.Prelude.Types.Left', V382} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V383) -> begin (V384 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V378, V380))), case V384 of {'Idris.Prelude.Types.Left', E238} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E238)); {'Idris.Prelude.Types.Right', E239} -> (fun (V386) -> (('dn--un--toBuf_TTC_RawImp'(V0, V379))(V380)) end(E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E234, E235)); {'Idris.TTImp.TTImp.IRunElab', E240, E241} -> (fun (V387, V388) -> fun (V389) -> begin (V390 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 25, V389))), case V390 of {'Idris.Prelude.Types.Left', E242} -> (fun (V391) -> {'Idris.Prelude.Types.Left', V391} end(E242)); {'Idris.Prelude.Types.Right', E243} -> (fun (V392) -> begin (V393 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V387, V389))), case V393 of {'Idris.Prelude.Types.Left', E244} -> (fun (V394) -> {'Idris.Prelude.Types.Left', V394} end(E244)); {'Idris.Prelude.Types.Right', E245} -> (fun (V395) -> (('dn--un--toBuf_TTC_RawImp'(V0, V388))(V389)) end(E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E240, E241)); {'Idris.TTImp.TTImp.IPrimVal', E246, E247} -> (fun (V396, V397) -> fun (V398) -> begin (V399 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 26, V398))), case V399 of {'Idris.Prelude.Types.Left', E248} -> (fun (V400) -> {'Idris.Prelude.Types.Left', V400} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V401) -> begin (V402 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V396, V398))), case V402 of {'Idris.Prelude.Types.Left', E250} -> (fun (V403) -> {'Idris.Prelude.Types.Left', V403} end(E250)); {'Idris.Prelude.Types.Right', E251} -> (fun (V404) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Constant'(V0, V397, V398)) end(E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E246, E247)); {'Idris.TTImp.TTImp.IType', E252} -> (fun (V405) -> fun (V406) -> begin (V407 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 27, V406))), case V407 of {'Idris.Prelude.Types.Left', E253} -> (fun (V408) -> {'Idris.Prelude.Types.Left', V408} end(E253)); {'Idris.Prelude.Types.Right', E254} -> (fun (V409) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V405, V406)) end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E252)); {'Idris.TTImp.TTImp.IHole', E255, E256} -> (fun (V410, V411) -> fun (V412) -> begin (V413 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 28, V412))), case V413 of {'Idris.Prelude.Types.Left', E257} -> (fun (V414) -> {'Idris.Prelude.Types.Left', V414} end(E257)); {'Idris.Prelude.Types.Right', E258} -> (fun (V415) -> begin (V416 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V410, V412))), case V416 of {'Idris.Prelude.Types.Left', E259} -> (fun (V417) -> {'Idris.Prelude.Types.Left', V417} end(E259)); {'Idris.Prelude.Types.Right', E260} -> (fun (V418) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V411))(V412)) end(E260)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E258)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E255, E256)); {'Idris.TTImp.TTImp.IUnifyLog', E261, E262, E263} -> (fun (V419, V420, V421) -> ('dn--un--toBuf_TTC_RawImp'(V0, V421)) end(E261, E262, E263)); {'Idris.TTImp.TTImp.Implicit', E264, E265} -> (fun (V422, V423) -> fun (V424) -> begin (V425 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 29, V424))), case V425 of {'Idris.Prelude.Types.Left', E266} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E266)); {'Idris.Prelude.Types.Right', E267} -> (fun (V427) -> begin (V428 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V422, V424))), case V428 of {'Idris.Prelude.Types.Left', E268} -> (fun (V429) -> {'Idris.Prelude.Types.Left', V429} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V430) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, V423, V424)) end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E264, E265)); {'Idris.TTImp.TTImp.IWithUnambigNames', E270, E271, E272} -> (fun (V431, V432, V433) -> fun (V434) -> begin (V435 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 30, V434))), case V435 of {'Idris.Prelude.Types.Left', E273} -> (fun (V436) -> {'Idris.Prelude.Types.Left', V436} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V437) -> begin (V443 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V438) -> fun (V439) -> fun (V440) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V438, V439, V440)) end end end, fun (V441) -> fun (V442) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V441, V442)) end end}, V0, V432, V434))), case V443 of {'Idris.Prelude.Types.Left', E275} -> (fun (V444) -> {'Idris.Prelude.Types.Left', V444} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V445) -> (('dn--un--toBuf_TTC_RawImp'(V0, V433))(V434)) end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E270, E271, E272)); {'Idris.TTImp.TTImp.IAutoApp', E277, E278, E279} -> (fun (V446, V447, V448) -> fun (V449) -> begin (V450 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 31, V449))), case V450 of {'Idris.Prelude.Types.Left', E280} -> (fun (V451) -> {'Idris.Prelude.Types.Left', V451} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V452) -> begin (V453 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V446, V449))), case V453 of {'Idris.Prelude.Types.Left', E282} -> (fun (V454) -> {'Idris.Prelude.Types.Left', V454} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V455) -> begin (V456 = (('dn--un--toBuf_TTC_RawImp'(V0, V447))(V449))), case V456 of {'Idris.Prelude.Types.Left', E284} -> (fun (V457) -> {'Idris.Prelude.Types.Left', V457} end(E284)); {'Idris.Prelude.Types.Right', E285} -> (fun (V458) -> (('dn--un--toBuf_TTC_RawImp'(V0, V448))(V449)) end(E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E277, E278, E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_ImpTy'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V4, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V5, V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('dn--un--toBuf_TTC_RawImp'(V0, V6))(V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_ImpRecord'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V3, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V4, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V211 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V17, V18, V19)) end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V20, V21)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V27, V28)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> ('dn--un--toBuf_TTC_RawImp'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('dn--un--fromBuf_TTC_RawImp'(V37, V38)) end end}, V32, V33, V34)) end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> ('dn--un--toBuf_TTC_RawImp'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('dn--un--fromBuf_TTC_RawImp'(V43, V44)) end end}, V39, V40)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V45) -> fun (V46) -> ('dn--un--toBuf_TTC_RawImp'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('dn--un--fromBuf_TTC_RawImp'(V47, V48)) end end}}, V29, V30, V31)) end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> ('dn--un--toBuf_TTC_RawImp'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('dn--un--fromBuf_TTC_RawImp'(V56, V57)) end end}, V51, V52, V53)) end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V60) -> fun (V61) -> ('dn--un--toBuf_TTC_RawImp'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('dn--un--fromBuf_TTC_RawImp'(V62, V63)) end end}, V58, V59)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V64) -> fun (V65) -> ('dn--un--toBuf_TTC_RawImp'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('dn--un--fromBuf_TTC_RawImp'(V66, V67)) end end}}, V49, V50)) end end}}, V22, V23, V24)) end end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V72, V73)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V80) -> fun (V81) -> ('dn--un--toBuf_TTC_RawImp'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('dn--un--fromBuf_TTC_RawImp'(V82, V83)) end end}, V77, V78, V79)) end end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V86) -> fun (V87) -> ('dn--un--toBuf_TTC_RawImp'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('dn--un--fromBuf_TTC_RawImp'(V88, V89)) end end}, V84, V85)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V90) -> fun (V91) -> ('dn--un--toBuf_TTC_RawImp'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('dn--un--fromBuf_TTC_RawImp'(V92, V93)) end end}}, V74, V75, V76)) end end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V99) -> fun (V100) -> ('dn--un--toBuf_TTC_RawImp'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('dn--un--fromBuf_TTC_RawImp'(V101, V102)) end end}, V96, V97, V98)) end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V105) -> fun (V106) -> ('dn--un--toBuf_TTC_RawImp'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('dn--un--fromBuf_TTC_RawImp'(V107, V108)) end end}, V103, V104)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V109) -> fun (V110) -> ('dn--un--toBuf_TTC_RawImp'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('dn--un--fromBuf_TTC_RawImp'(V111, V112)) end end}}, V94, V95)) end end}}, V68, V69)) end end}}, V14, V15, V16)) end end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V115, V116, V117)) end end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V118, V119)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V125, V126)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V133) -> fun (V134) -> ('dn--un--toBuf_TTC_RawImp'(V133, V134)) end end, fun (V135) -> fun (V136) -> ('dn--un--fromBuf_TTC_RawImp'(V135, V136)) end end}, V130, V131, V132)) end end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V139) -> fun (V140) -> ('dn--un--toBuf_TTC_RawImp'(V139, V140)) end end, fun (V141) -> fun (V142) -> ('dn--un--fromBuf_TTC_RawImp'(V141, V142)) end end}, V137, V138)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V143) -> fun (V144) -> ('dn--un--toBuf_TTC_RawImp'(V143, V144)) end end, fun (V145) -> fun (V146) -> ('dn--un--fromBuf_TTC_RawImp'(V145, V146)) end end}}, V127, V128, V129)) end end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V149) -> fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V152) -> fun (V153) -> ('dn--un--toBuf_TTC_RawImp'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('dn--un--fromBuf_TTC_RawImp'(V154, V155)) end end}, V149, V150, V151)) end end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V158) -> fun (V159) -> ('dn--un--toBuf_TTC_RawImp'(V158, V159)) end end, fun (V160) -> fun (V161) -> ('dn--un--fromBuf_TTC_RawImp'(V160, V161)) end end}, V156, V157)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V162) -> fun (V163) -> ('dn--un--toBuf_TTC_RawImp'(V162, V163)) end end, fun (V164) -> fun (V165) -> ('dn--un--fromBuf_TTC_RawImp'(V164, V165)) end end}}, V147, V148)) end end}}, V120, V121, V122)) end end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V168, V169)) end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V170, V171)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V178) -> fun (V179) -> ('dn--un--toBuf_TTC_RawImp'(V178, V179)) end end, fun (V180) -> fun (V181) -> ('dn--un--fromBuf_TTC_RawImp'(V180, V181)) end end}, V175, V176, V177)) end end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V184) -> fun (V185) -> ('dn--un--toBuf_TTC_RawImp'(V184, V185)) end end, fun (V186) -> fun (V187) -> ('dn--un--fromBuf_TTC_RawImp'(V186, V187)) end end}, V182, V183)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V188) -> fun (V189) -> ('dn--un--toBuf_TTC_RawImp'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('dn--un--fromBuf_TTC_RawImp'(V190, V191)) end end}}, V172, V173, V174)) end end end, fun (V192) -> fun (V193) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V197) -> fun (V198) -> ('dn--un--toBuf_TTC_RawImp'(V197, V198)) end end, fun (V199) -> fun (V200) -> ('dn--un--fromBuf_TTC_RawImp'(V199, V200)) end end}, V194, V195, V196)) end end end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V203) -> fun (V204) -> ('dn--un--toBuf_TTC_RawImp'(V203, V204)) end end, fun (V205) -> fun (V206) -> ('dn--un--fromBuf_TTC_RawImp'(V205, V206)) end end}, V201, V202)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V207) -> fun (V208) -> ('dn--un--toBuf_TTC_RawImp'(V207, V208)) end end, fun (V209) -> fun (V210) -> ('dn--un--fromBuf_TTC_RawImp'(V209, V210)) end end}}, V192, V193)) end end}}, V166, V167)) end end}}, V113, V114)) end end}, V0, V5, V2))), case V211 of {'Idris.Prelude.Types.Left', E9} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V213) -> begin (V214 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V6, V2))), case V214 of {'Idris.Prelude.Types.Left', E11} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V216) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V217) -> fun (V218) -> fun (V219) -> ('dn--un--toBuf_TTC_IField'(V217, V218, V219)) end end end, fun (V220) -> fun (V221) -> ('dn--un--fromBuf_TTC_IField'(V220, V221)) end end}, V0, V7, V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_ImpDecl'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V3, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V4))(V2))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Visibility'(V0, V5, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V25 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--toBuf_TTC_FnOpt'(V20, V21, V22)) end end end, fun (V23) -> fun (V24) -> ('dn--un--fromBuf_TTC_FnOpt'(V23, V24)) end end}, V0, V6, V2))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> ('dn--un--toBuf_TTC_ImpTy'(V0, V7, V2)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E15, E16, E17} -> (fun (V28, V29, V30) -> begin (V31 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V31 of {'Idris.Prelude.Types.Left', E18} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V28, V2))), case V34 of {'Idris.Prelude.Types.Left', E20} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Visibility'(V0, V29, V2))), case V37 of {'Idris.Prelude.Types.Left', E22} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V39) -> ('dn--un--toBuf_TTC_ImpData'(V0, V30, V2)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16, E17)); {'Idris.TTImp.TTImp.IDef', E24, E25, E26} -> (fun (V40, V41, V42) -> begin (V43 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V43 of {'Idris.Prelude.Types.Left', E27} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V40, V2))), case V46 of {'Idris.Prelude.Types.Left', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V41, V2))), case V49 of {'Idris.Prelude.Types.Left', E31} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V51) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V52) -> fun (V53) -> fun (V54) -> ('dn--un--toBuf_TTC_ImpClause'(V52, V53, V54)) end end end, fun (V55) -> fun (V56) -> ('dn--un--fromBuf_TTC_ImpClause'(V55, V56)) end end}, V0, V42, V2)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25, E26)); {'Idris.TTImp.TTImp.IParameters', E33, E34, E35} -> (fun (V57, V58, V59) -> begin (V60 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2))), case V60 of {'Idris.Prelude.Types.Left', E36} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V62) -> begin (V63 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V57, V2))), case V63 of {'Idris.Prelude.Types.Left', E38} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V65) -> begin (V263 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V69, V70, V71)) end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V72, V73)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V77, V78)) end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V79, V80)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V87) -> fun (V88) -> ('dn--un--toBuf_TTC_RawImp'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('dn--un--fromBuf_TTC_RawImp'(V89, V90)) end end}, V84, V85, V86)) end end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V93) -> fun (V94) -> ('dn--un--toBuf_TTC_RawImp'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('dn--un--fromBuf_TTC_RawImp'(V95, V96)) end end}, V91, V92)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V97) -> fun (V98) -> ('dn--un--toBuf_TTC_RawImp'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('dn--un--fromBuf_TTC_RawImp'(V99, V100)) end end}}, V81, V82, V83)) end end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V106) -> fun (V107) -> ('dn--un--toBuf_TTC_RawImp'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('dn--un--fromBuf_TTC_RawImp'(V108, V109)) end end}, V103, V104, V105)) end end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V112) -> fun (V113) -> ('dn--un--toBuf_TTC_RawImp'(V112, V113)) end end, fun (V114) -> fun (V115) -> ('dn--un--fromBuf_TTC_RawImp'(V114, V115)) end end}, V110, V111)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V116) -> fun (V117) -> ('dn--un--toBuf_TTC_RawImp'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('dn--un--fromBuf_TTC_RawImp'(V118, V119)) end end}}, V101, V102)) end end}}, V74, V75, V76)) end end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V124, V125)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V132) -> fun (V133) -> ('dn--un--toBuf_TTC_RawImp'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('dn--un--fromBuf_TTC_RawImp'(V134, V135)) end end}, V129, V130, V131)) end end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V138) -> fun (V139) -> ('dn--un--toBuf_TTC_RawImp'(V138, V139)) end end, fun (V140) -> fun (V141) -> ('dn--un--fromBuf_TTC_RawImp'(V140, V141)) end end}, V136, V137)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V142) -> fun (V143) -> ('dn--un--toBuf_TTC_RawImp'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('dn--un--fromBuf_TTC_RawImp'(V144, V145)) end end}}, V126, V127, V128)) end end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V151) -> fun (V152) -> ('dn--un--toBuf_TTC_RawImp'(V151, V152)) end end, fun (V153) -> fun (V154) -> ('dn--un--fromBuf_TTC_RawImp'(V153, V154)) end end}, V148, V149, V150)) end end end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V157) -> fun (V158) -> ('dn--un--toBuf_TTC_RawImp'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('dn--un--fromBuf_TTC_RawImp'(V159, V160)) end end}, V155, V156)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V161) -> fun (V162) -> ('dn--un--toBuf_TTC_RawImp'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('dn--un--fromBuf_TTC_RawImp'(V163, V164)) end end}}, V146, V147)) end end}}, V120, V121)) end end}}, V66, V67, V68)) end end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V167, V168, V169)) end end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V170, V171)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V175, V176)) end end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V177, V178)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V179) -> fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V185) -> fun (V186) -> ('dn--un--toBuf_TTC_RawImp'(V185, V186)) end end, fun (V187) -> fun (V188) -> ('dn--un--fromBuf_TTC_RawImp'(V187, V188)) end end}, V182, V183, V184)) end end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V191) -> fun (V192) -> ('dn--un--toBuf_TTC_RawImp'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('dn--un--fromBuf_TTC_RawImp'(V193, V194)) end end}, V189, V190)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V195) -> fun (V196) -> ('dn--un--toBuf_TTC_RawImp'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('dn--un--fromBuf_TTC_RawImp'(V197, V198)) end end}}, V179, V180, V181)) end end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V201) -> fun (V202) -> fun (V203) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V204) -> fun (V205) -> ('dn--un--toBuf_TTC_RawImp'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('dn--un--fromBuf_TTC_RawImp'(V206, V207)) end end}, V201, V202, V203)) end end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V210) -> fun (V211) -> ('dn--un--toBuf_TTC_RawImp'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('dn--un--fromBuf_TTC_RawImp'(V212, V213)) end end}, V208, V209)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V214) -> fun (V215) -> ('dn--un--toBuf_TTC_RawImp'(V214, V215)) end end, fun (V216) -> fun (V217) -> ('dn--un--fromBuf_TTC_RawImp'(V216, V217)) end end}}, V199, V200)) end end}}, V172, V173, V174)) end end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V220) -> fun (V221) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V220, V221)) end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V222, V223)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V224) -> fun (V225) -> fun (V226) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V227) -> fun (V228) -> fun (V229) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V230) -> fun (V231) -> ('dn--un--toBuf_TTC_RawImp'(V230, V231)) end end, fun (V232) -> fun (V233) -> ('dn--un--fromBuf_TTC_RawImp'(V232, V233)) end end}, V227, V228, V229)) end end end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V236) -> fun (V237) -> ('dn--un--toBuf_TTC_RawImp'(V236, V237)) end end, fun (V238) -> fun (V239) -> ('dn--un--fromBuf_TTC_RawImp'(V238, V239)) end end}, V234, V235)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V240) -> fun (V241) -> ('dn--un--toBuf_TTC_RawImp'(V240, V241)) end end, fun (V242) -> fun (V243) -> ('dn--un--fromBuf_TTC_RawImp'(V242, V243)) end end}}, V224, V225, V226)) end end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V249) -> fun (V250) -> ('dn--un--toBuf_TTC_RawImp'(V249, V250)) end end, fun (V251) -> fun (V252) -> ('dn--un--fromBuf_TTC_RawImp'(V251, V252)) end end}, V246, V247, V248)) end end end, fun (V253) -> fun (V254) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V255) -> fun (V256) -> ('dn--un--toBuf_TTC_RawImp'(V255, V256)) end end, fun (V257) -> fun (V258) -> ('dn--un--fromBuf_TTC_RawImp'(V257, V258)) end end}, V253, V254)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V259) -> fun (V260) -> ('dn--un--toBuf_TTC_RawImp'(V259, V260)) end end, fun (V261) -> fun (V262) -> ('dn--un--fromBuf_TTC_RawImp'(V261, V262)) end end}}, V244, V245)) end end}}, V218, V219)) end end}}, V165, V166)) end end}, V0, V58, V2))), case V263 of {'Idris.Prelude.Types.Left', E40} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V265) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V266) -> fun (V267) -> fun (V268) -> ('dn--un--toBuf_TTC_ImpDecl'(V266, V267, V268)) end end end, fun (V269) -> fun (V270) -> ('dn--un--fromBuf_TTC_ImpDecl'(V269, V270)) end end}, V0, V59, V2)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34, E35)); {'Idris.TTImp.TTImp.IRecord', E42, E43, E44, E45} -> (fun (V271, V272, V273, V274) -> begin (V275 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2))), case V275 of {'Idris.Prelude.Types.Left', E46} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V277) -> begin (V278 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V271, V2))), case V278 of {'Idris.Prelude.Types.Left', E48} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V280) -> begin (V285 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V281) -> fun (V282) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V281, V282)) end end, fun (V283) -> fun (V284) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V283, V284)) end end}, V0, V272, V2))), case V285 of {'Idris.Prelude.Types.Left', E50} -> (fun (V286) -> {'Idris.Prelude.Types.Left', V286} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V287) -> begin (V288 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Visibility'(V0, V273, V2))), case V288 of {'Idris.Prelude.Types.Left', E52} -> (fun (V289) -> {'Idris.Prelude.Types.Left', V289} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V290) -> ('dn--un--toBuf_TTC_ImpRecord'(V0, V274, V2)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43, E44, E45)); {'Idris.TTImp.TTImp.INamespace', E54, E55, E56} -> (fun (V291, V292, V293) -> begin (V294 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2))), case V294 of {'Idris.Prelude.Types.Left', E57} -> (fun (V295) -> {'Idris.Prelude.Types.Left', V295} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V296) -> begin (V297 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V291, V2))), case V297 of {'Idris.Prelude.Types.Left', E59} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V299) -> begin (V300 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V0, V292, V2))), case V300 of {'Idris.Prelude.Types.Left', E61} -> (fun (V301) -> {'Idris.Prelude.Types.Left', V301} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V302) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V303) -> fun (V304) -> fun (V305) -> ('dn--un--toBuf_TTC_ImpDecl'(V303, V304, V305)) end end end, fun (V306) -> fun (V307) -> ('dn--un--fromBuf_TTC_ImpDecl'(V306, V307)) end end}, V0, V293, V2)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55, E56)); {'Idris.TTImp.TTImp.ITransform', E63, E64, E65, E66} -> (fun (V308, V309, V310, V311) -> begin (V312 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2))), case V312 of {'Idris.Prelude.Types.Left', E67} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V314) -> begin (V315 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V308, V2))), case V315 of {'Idris.Prelude.Types.Left', E69} -> (fun (V316) -> {'Idris.Prelude.Types.Left', V316} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V317) -> begin (V318 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V309, V2))), case V318 of {'Idris.Prelude.Types.Left', E71} -> (fun (V319) -> {'Idris.Prelude.Types.Left', V319} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V320) -> begin (V321 = (('dn--un--toBuf_TTC_RawImp'(V0, V310))(V2))), case V321 of {'Idris.Prelude.Types.Left', E73} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V323) -> (('dn--un--toBuf_TTC_RawImp'(V0, V311))(V2)) end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63, E64, E65, E66)); {'Idris.TTImp.TTImp.IRunElabDecl', E75, E76} -> (fun (V324, V325) -> begin (V326 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2))), case V326 of {'Idris.Prelude.Types.Left', E77} -> (fun (V327) -> {'Idris.Prelude.Types.Left', V327} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V328) -> begin (V329 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V324, V2))), case V329 of {'Idris.Prelude.Types.Left', E79} -> (fun (V330) -> {'Idris.Prelude.Types.Left', V330} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V331) -> (('dn--un--toBuf_TTC_RawImp'(V0, V325))(V2)) end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75, E76)); {'Idris.TTImp.TTImp.IPragma', E81, E82} -> (fun (V332, V333) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t write Pragma"/utf8>>}, V2)) end(E81, E82)); {'Idris.TTImp.TTImp.ILog', E83} -> (fun (V334) -> begin (V335 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2))), case V335 of {'Idris.Prelude.Types.Left', E84} -> (fun (V336) -> {'Idris.Prelude.Types.Left', V336} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V337) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V338) -> fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V341) -> fun (V342) -> fun (V343) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V344, V345)) end end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V346, V347)) end end}, V341, V342, V343)) end end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V350) -> fun (V351) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V350, V351)) end end, fun (V352) -> fun (V353) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V352, V353)) end end}, V348, V349)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V354) -> fun (V355) -> fun (V356) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V354, V355, V356)) end end end, fun (V357) -> fun (V358) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V357, V358)) end end}}, V338, V339, V340)) end end end, fun (V359) -> fun (V360) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V361) -> fun (V362) -> fun (V363) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V364) -> fun (V365) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V364, V365)) end end, fun (V366) -> fun (V367) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V366, V367)) end end}, V361, V362, V363)) end end end, fun (V368) -> fun (V369) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V370) -> fun (V371) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V370, V371)) end end, fun (V372) -> fun (V373) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V372, V373)) end end}, V368, V369)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V374) -> fun (V375) -> fun (V376) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V374, V375, V376)) end end end, fun (V377) -> fun (V378) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V377, V378)) end end}}, V359, V360)) end end}, V0, V334, V2)) end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); {'Idris.TTImp.TTImp.IBuiltin', E86, E87, E88} -> (fun (V379, V380, V381) -> begin (V382 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2))), case V382 of {'Idris.Prelude.Types.Left', E89} -> (fun (V383) -> {'Idris.Prelude.Types.Left', V383} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V384) -> begin (V385 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V379, V2))), case V385 of {'Idris.Prelude.Types.Left', E91} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V387) -> begin (V388 = ('dn--un--toBuf_TTC_BuiltinType'(V0, V380, V2))), case V388 of {'Idris.Prelude.Types.Left', E93} -> (fun (V389) -> {'Idris.Prelude.Types.Left', V389} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V390) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V381, V2)) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_ImpData'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V3, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V4, V2))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = (('dn--un--toBuf_TTC_RawImp'(V0, V5))(V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V25 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--toBuf_TTC_DataOpt'(V20, V21, V22)) end end end, fun (V23) -> fun (V24) -> ('dn--un--fromBuf_TTC_DataOpt'(V23, V24)) end end}, V0, V6, V2))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un--toBuf_TTC_ImpTy'(V28, V29, V30)) end end end, fun (V31) -> fun (V32) -> ('dn--un--fromBuf_TTC_ImpTy'(V31, V32)) end end}, V0, V7, V2)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E15, E16, E17} -> (fun (V33, V34, V35) -> begin (V36 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V36 of {'Idris.Prelude.Types.Left', E18} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V33, V2))), case V39 of {'Idris.Prelude.Types.Left', E20} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V34, V2))), case V42 of {'Idris.Prelude.Types.Left', E22} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V44) -> (('dn--un--toBuf_TTC_RawImp'(V0, V35))(V2)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_ImpClause'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V3, V2))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = (('dn--un--toBuf_TTC_RawImp'(V0, V4))(V2))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> (('dn--un--toBuf_TTC_RawImp'(V0, V5))(V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V15, V2))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> (('dn--un--toBuf_TTC_RawImp'(V0, V16))(V2)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); {'Idris.TTImp.TTImp.WithClause', E15, E16, E17, E18, E19, E20} -> (fun (V23, V24, V25, V26, V27, V28) -> begin (V29 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V29 of {'Idris.Prelude.Types.Left', E21} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V23, V2))), case V32 of {'Idris.Prelude.Types.Left', E23} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V34) -> begin (V35 = (('dn--un--toBuf_TTC_RawImp'(V0, V24))(V2))), case V35 of {'Idris.Prelude.Types.Left', E25} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V37) -> begin (V38 = (('dn--un--toBuf_TTC_RawImp'(V0, V25))(V2))), case V38 of {'Idris.Prelude.Types.Left', E27} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V40) -> begin (V46 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V44, V45)) end end}, V0, V26, V2))), case V46 of {'Idris.Prelude.Types.Left', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V48) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('dn--un--toBuf_TTC_ImpClause'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('dn--un--fromBuf_TTC_ImpClause'(V52, V53)) end end}, V0, V28, V2)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_IFieldUpdate'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V10, V11)) end end}, V0, V3, V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> (('dn--un--toBuf_TTC_RawImp'(V0, V4))(V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E6, E7} -> (fun (V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V24 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V22, V23)) end end}, V0, V15, V2))), case V24 of {'Idris.Prelude.Types.Left', E10} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V26) -> (('dn--un--toBuf_TTC_RawImp'(V0, V16))(V2)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_IField'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_FC'(V0, V3, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V4))(V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V18 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> ('dn--un--toBuf_TTC_RawImp'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--fromBuf_TTC_RawImp'(V16, V17)) end end}, V0, V5, V2))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V6, V2))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> (('dn--un--toBuf_TTC_RawImp'(V0, V7))(V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_FnOpt'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 11, V2)) end()); {'Idris.TTImp.TTImp.Hint', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.TTImp.TTImp.GlobalHint', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, V7, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2)) end()); {'Idris.TTImp.TTImp.ForeignFn', E6} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V15) -> fun (V16) -> ('dn--un--toBuf_TTC_RawImp'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('dn--un--fromBuf_TTC_RawImp'(V17, V18)) end end}, V0, V11, V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2)) end()); {'Idris.TTImp.TTImp.Totality', E9} -> (fun (V19) -> case V19 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2)) end()); {'Idris.TTImp.TTImp.SpecArgs', E10} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 10, V2))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V24, V25, V26)) end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V27, V28)) end end}, V0, V20, V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_DataOpt'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.SearchBy', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V10, V11)) end end}, V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.TTImp.TTImp.NoHints'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); {'Idris.TTImp.TTImp.UniqueSearch'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)) end()); {'Idris.TTImp.TTImp.External'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2)) end()); {'Idris.TTImp.TTImp.NoNewtype'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2)) end()); {'Idris.TTImp.TTImp.NoEnum'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_BuiltinType'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_BindMode'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.PI', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V3))(V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.TTImp.TTImp.PATTERN'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); {'Idris.TTImp.TTImp.NONE'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_AltType'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.FirstSuccess'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.TTImp.TTImp.Unique'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); {'Idris.TTImp.TTImp.UniqueDefault', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> (('dn--un--toBuf_TTC_RawImp'(V0, V3))(V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> case V0 of {'Idris.Prelude.Show.MkShow', E2, E3} -> (fun (V4, V5) -> (V4(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E4, E5, E6, E7, E8, E9} -> (fun (V6, V7, V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%pi "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V12) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V12)) end, fun (V13) -> fun (V14) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V13, V14)) end end}, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V16, V17)) end end}, {'Idris.Prelude.Show.App'}, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V11)), <<")"/utf8>>)))))))))))))))))))) end(E4, E5, E6, E7, E8, E9)); {'Idris.TTImp.TTImp.ILam', E10, E11, E12, E13, E14, E15} -> (fun (V18, V19, V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%lam "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V24) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V24)) end, fun (V25) -> fun (V26) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V25, V26)) end end}, V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V28, V29)) end end}, {'Idris.Prelude.Show.App'}, V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V23)), <<")"/utf8>>)))))))))))))))))))) end(E10, E11, E12, E13, E14, E15)); {'Idris.TTImp.TTImp.ILet', E16, E17, E18, E19, E20, E21, E22} -> (fun (V30, V31, V32, V33, V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V32)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V34)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V35)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V36)), <<")"/utf8>>)))))))))))))))))))))) end(E16, E17, E18, E19, E20, E21, E22)); {'Idris.TTImp.TTImp.ICase', E23, E24, E25, E26} -> (fun (V37, V38, V39, V40) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%case ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V38)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V39)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V41) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V41)) end, fun (V42) -> fun (V43) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V42, V43)) end end}, V40)), <<")"/utf8>>)))))))))))) end(E23, E24, E25, E26)); {'Idris.TTImp.TTImp.ILocal', E27, E28, E29} -> (fun (V44, V45, V46) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%local ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V47) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V47)) end, fun (V48) -> fun (V49) -> ('dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V48, V49)) end end}, V45)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V46)), <<")"/utf8>>)))))))) end(E27, E28, E29)); {'Idris.TTImp.TTImp.ICaseLocal', E30, E31, E32, E33, E34} -> (fun (V50, V51, V52, V53, V54) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%caselocal ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V52)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V56, V57)) end end}, V53)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V54)), <<")"/utf8>>)))))))))))))))) end(E30, E31, E32, E33, E34)); {'Idris.TTImp.TTImp.IUpdate', E35, E36, E37} -> (fun (V58, V59, V60) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%record "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V61) -> ('dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V61)) end, V59)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V60)), <<")"/utf8>>)))))))) end(E35, E36, E37)); {'Idris.TTImp.TTImp.IApp', E38, E39, E40} -> (fun (V62, V63, V64) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V63)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V64)), <<")"/utf8>>)))))))) end(E38, E39, E40)); {'Idris.TTImp.TTImp.INamedApp', E41, E42, E43, E44} -> (fun (V65, V66, V67, V68) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V66)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V67)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V68)), <<"])"/utf8>>)))))))))))) end(E41, E42, E43, E44)); {'Idris.TTImp.TTImp.IAutoApp', E45, E46, E47} -> (fun (V69, V70, V71) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V70)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V71)), <<"])"/utf8>>)))))))) end(E45, E46, E47)); {'Idris.TTImp.TTImp.IWithApp', E48, E49, E50} -> (fun (V72, V73, V74) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V73)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V74)), <<")"/utf8>>)))))))) end(E48, E49, E50)); {'Idris.TTImp.TTImp.ISearch', E51, E52} -> (fun (V75, V76) -> <<"%search"/utf8>> end(E51, E52)); {'Idris.TTImp.TTImp.IAlternative', E53, E54, E55} -> (fun (V77, V78, V79) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(|"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<","/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V80) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V80)) end, V79)))), <<"|)"/utf8>>)))) end(E53, E54, E55)); {'Idris.TTImp.TTImp.IRewrite', E56, E57, E58} -> (fun (V81, V82, V83) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%rewrite ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V82)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V83)), <<"))"/utf8>>)))))))) end(E56, E57, E58)); {'Idris.TTImp.TTImp.ICoerced', E59, E60} -> (fun (V84, V85) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%coerced "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V85)), <<")"/utf8>>)))) end(E59, E60)); {'Idris.TTImp.TTImp.IBindHere', E61, E62, E63} -> (fun (V86, V87, V88) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%bindhere "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V88)), <<")"/utf8>>)))) end(E61, E62, E63)); {'Idris.TTImp.TTImp.IBindVar', E64, E65} -> (fun (V89, V90) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$"/utf8>>, V90)) end(E64, E65)); {'Idris.TTImp.TTImp.IAs', E66, E67, E68, E69, E70} -> (fun (V91, V92, V93, V94, V95) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V94)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V95)), <<")"/utf8>>)))))) end(E66, E67, E68, E69, E70)); {'Idris.TTImp.TTImp.IMustUnify', E71, E72, E73} -> (fun (V96, V97, V98) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<".("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V98)), <<")"/utf8>>)))) end(E71, E72, E73)); {'Idris.TTImp.TTImp.IDelayed', E74, E75, E76} -> (fun (V99, V100, V101) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%delayed "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V101)), <<")"/utf8>>)))) end(E74, E75, E76)); {'Idris.TTImp.TTImp.IDelay', E77, E78} -> (fun (V102, V103) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%delay "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V103)), <<")"/utf8>>)))) end(E77, E78)); {'Idris.TTImp.TTImp.IForce', E79, E80} -> (fun (V104, V105) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%force "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V105)), <<")"/utf8>>)))) end(E79, E80)); {'Idris.TTImp.TTImp.IQuote', E81, E82} -> (fun (V106, V107) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%quote "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V107)), <<")"/utf8>>)))) end(E81, E82)); {'Idris.TTImp.TTImp.IQuoteName', E83, E84} -> (fun (V108, V109) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%quotename "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V109)), <<")"/utf8>>)))) end(E83, E84)); {'Idris.TTImp.TTImp.IQuoteDecl', E85, E86} -> (fun (V110, V111) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%quotedecl "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V112) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V112)) end, fun (V113) -> fun (V114) -> ('dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V113, V114)) end end}, V111)), <<")"/utf8>>)))) end(E85, E86)); {'Idris.TTImp.TTImp.IUnquote', E87, E88} -> (fun (V115, V116) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%unquote "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V116)), <<")"/utf8>>)))) end(E87, E88)); {'Idris.TTImp.TTImp.IRunElab', E89, E90} -> (fun (V117, V118) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%runelab "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V118)), <<")"/utf8>>)))) end(E89, E90)); {'Idris.TTImp.TTImp.IPrimVal', E91, E92} -> (fun (V119, V120) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V120)) end(E91, E92)); {'Idris.TTImp.TTImp.IHole', E93, E94} -> (fun (V121, V122) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, V122)) end(E93, E94)); {'Idris.TTImp.TTImp.IUnifyLog', E95, E96, E97} -> (fun (V123, V124, V125) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%logging "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Options.Log':'dn--un--show_Show_LogLevel'(V124)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V125)), <<")"/utf8>>)))))))) end(E95, E96, E97)); {'Idris.TTImp.TTImp.IType', E98} -> (fun (V126) -> <<"%type"/utf8>> end(E98)); {'Idris.TTImp.TTImp.Implicit', E99, E100} -> (fun (V127, V128) -> case V128 of 1 -> <<"_"/utf8>>; 0 -> <<"?"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E99, E100)); {'Idris.TTImp.TTImp.IWithUnambigNames', E101, E102, E103} -> (fun (V129, V130, V131) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%with "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V132) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V132)) end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V133, V134)) end end}, V130)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V131)), <<")"/utf8>>)))))))) end(E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%claim "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V5)), <<")"/utf8>>)))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"record "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)) end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V9, V10)) end end}, {'Idris.Prelude.Show.MkShow', fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V13, V14)) end end}, {'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V17) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V17)) end, fun (V18) -> fun (V19) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V18, V19)) end end}, V16)) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V22) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V22)) end, fun (V23) -> fun (V24) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V23, V24)) end end}, V20, V21)) end end}, {'Idris.Prelude.Show.MkShow', fun (V25) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V25)) end, fun (V26) -> fun (V27) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V26, V27)) end end}}, V15)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V31) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V31)) end, fun (V32) -> fun (V33) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V32, V33)) end end}, V30)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V36) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V36)) end, fun (V37) -> fun (V38) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V37, V38)) end end}, V34, V35)) end end}, {'Idris.Prelude.Show.MkShow', fun (V39) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V39)) end, fun (V40) -> fun (V41) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V40, V41)) end end}}, V28, V29)) end end}}, V11)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V45, V46)) end end}, {'Idris.Prelude.Show.MkShow', fun (V47) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V49) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V49)) end, fun (V50) -> fun (V51) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V50, V51)) end end}, V48)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V54) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V54)) end, fun (V55) -> fun (V56) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V55, V56)) end end}, V52, V53)) end end}, {'Idris.Prelude.Show.MkShow', fun (V57) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V57)) end, fun (V58) -> fun (V59) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V58, V59)) end end}}, V47)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V62) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V63) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V63)) end, fun (V64) -> fun (V65) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V64, V65)) end end}, V62)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V68) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V68)) end, fun (V69) -> fun (V70) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V69, V70)) end end}, V66, V67)) end end}, {'Idris.Prelude.Show.MkShow', fun (V71) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V71)) end, fun (V72) -> fun (V73) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V72, V73)) end end}}, V60, V61)) end end}}, V42, V43)) end end}}, V7)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V77, V78)) end end}, {'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V81, V82)) end end}, {'Idris.Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V85) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V85)) end, fun (V86) -> fun (V87) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V86, V87)) end end}, V84)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V90) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V90)) end, fun (V91) -> fun (V92) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V91, V92)) end end}, V88, V89)) end end}, {'Idris.Prelude.Show.MkShow', fun (V93) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V93)) end, fun (V94) -> fun (V95) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V94, V95)) end end}}, V83)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V98) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V99) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V99)) end, fun (V100) -> fun (V101) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V100, V101)) end end}, V98)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V104) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V104)) end, fun (V105) -> fun (V106) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V105, V106)) end end}, V102, V103)) end end}, {'Idris.Prelude.Show.MkShow', fun (V107) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V107)) end, fun (V108) -> fun (V109) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V108, V109)) end end}}, V96, V97)) end end}}, V79)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V112) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V113, V114)) end end}, {'Idris.Prelude.Show.MkShow', fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V117) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V117)) end, fun (V118) -> fun (V119) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V118, V119)) end end}, V116)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V122) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V122)) end, fun (V123) -> fun (V124) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V123, V124)) end end}, V120, V121)) end end}, {'Idris.Prelude.Show.MkShow', fun (V125) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V125)) end, fun (V126) -> fun (V127) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V126, V127)) end end}}, V115)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V131) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V131)) end, fun (V132) -> fun (V133) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V132, V133)) end end}, V130)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V136) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V136)) end, fun (V137) -> fun (V138) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V137, V138)) end end}, V134, V135)) end end}, {'Idris.Prelude.Show.MkShow', fun (V139) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V139)) end, fun (V140) -> fun (V141) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V140, V141)) end end}}, V128, V129)) end end}}, V110, V111)) end end}}, V74, V75)) end end}, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V142) -> ('dn--un--show_Show_(IField\x{27} $nm)'(V0, V142)) end, V6)))), <<"\x{a}"/utf8>>)))))))))))))))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V7) -> ('dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V7)) end, fun (V8) -> fun (V9) -> ('dn--un--showPrec_Show_(FnOpt\x{27} $nm)'(V0, V8, V9)) end end}, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V6)))))))))) end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V10, V11, V12) -> ('dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V12)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.IDef', E8, E9, E10} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%def "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V16) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V17, V18)) end end}, V15)), <<")"/utf8>>)))))))) end(E8, E9, E10)); {'Idris.TTImp.TTImp.IParameters', E11, E12, E13} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"parameters "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V24, V25)) end end}, {'Idris.Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V28, V29)) end end}, {'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V32) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V32)) end, fun (V33) -> fun (V34) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V33, V34)) end end}, V31)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V37) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V37)) end, fun (V38) -> fun (V39) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V38, V39)) end end}, V35, V36)) end end}, {'Idris.Prelude.Show.MkShow', fun (V40) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V40)) end, fun (V41) -> fun (V42) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V41, V42)) end end}}, V30)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V46) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V46)) end, fun (V47) -> fun (V48) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V47, V48)) end end}, V45)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V51) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V51)) end, fun (V52) -> fun (V53) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V52, V53)) end end}, V49, V50)) end end}, {'Idris.Prelude.Show.MkShow', fun (V54) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V54)) end, fun (V55) -> fun (V56) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V55, V56)) end end}}, V43, V44)) end end}}, V26)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V60, V61)) end end}, {'Idris.Prelude.Show.MkShow', fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V64) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V64)) end, fun (V65) -> fun (V66) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V65, V66)) end end}, V63)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V69) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V69)) end, fun (V70) -> fun (V71) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V70, V71)) end end}, V67, V68)) end end}, {'Idris.Prelude.Show.MkShow', fun (V72) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V72)) end, fun (V73) -> fun (V74) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V73, V74)) end end}}, V62)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V78) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V78)) end, fun (V79) -> fun (V80) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V79, V80)) end end}, V77)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V83) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V83)) end, fun (V84) -> fun (V85) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V84, V85)) end end}, V81, V82)) end end}, {'Idris.Prelude.Show.MkShow', fun (V86) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V86)) end, fun (V87) -> fun (V88) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V87, V88)) end end}}, V75, V76)) end end}}, V57, V58)) end end}}, V22)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V92, V93)) end end}, {'Idris.Prelude.Show.MkShow', fun (V94) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V95) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V96, V97)) end end}, {'Idris.Prelude.Show.MkShow', fun (V98) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V100) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V100)) end, fun (V101) -> fun (V102) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V101, V102)) end end}, V99)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V105) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V105)) end, fun (V106) -> fun (V107) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V106, V107)) end end}, V103, V104)) end end}, {'Idris.Prelude.Show.MkShow', fun (V108) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V108)) end, fun (V109) -> fun (V110) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V109, V110)) end end}}, V98)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V114) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V114)) end, fun (V115) -> fun (V116) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V115, V116)) end end}, V113)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V119) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V119)) end, fun (V120) -> fun (V121) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V120, V121)) end end}, V117, V118)) end end}, {'Idris.Prelude.Show.MkShow', fun (V122) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V122)) end, fun (V123) -> fun (V124) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V123, V124)) end end}}, V111, V112)) end end}}, V94)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V127) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V127)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V128, V129)) end end}, {'Idris.Prelude.Show.MkShow', fun (V130) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V132) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V132)) end, fun (V133) -> fun (V134) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V133, V134)) end end}, V131)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V137) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V137)) end, fun (V138) -> fun (V139) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V138, V139)) end end}, V135, V136)) end end}, {'Idris.Prelude.Show.MkShow', fun (V140) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V140)) end, fun (V141) -> fun (V142) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V141, V142)) end end}}, V130)) end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V145) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V146) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V146)) end, fun (V147) -> fun (V148) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V147, V148)) end end}, V145)) end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V151) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V151)) end, fun (V152) -> fun (V153) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V152, V153)) end end}, V149, V150)) end end}, {'Idris.Prelude.Show.MkShow', fun (V154) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V154)) end, fun (V155) -> fun (V156) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V155, V156)) end end}}, V143, V144)) end end}}, V125, V126)) end end}}, V89, V90)) end end}, V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V157) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V157)) end, V21)))))))))) end(E11, E12, E13)); {'Idris.TTImp.TTImp.IRecord', E14, E15, E16, E17} -> (fun (V158, V159, V160, V161) -> ('dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V161)) end(E14, E15, E16, E17)); {'Idris.TTImp.TTImp.INamespace', E18, E19, E20} -> (fun (V162, V163, V164) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"namespace "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V163)), ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V165) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V165)) end, V164)))))))) end(E18, E19, E20)); {'Idris.TTImp.TTImp.ITransform', E21, E22, E23, E24} -> (fun (V166, V167, V168, V169) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%transform "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V167)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V168)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ==> "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V169)))))))))))) end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.IRunElabDecl', E25, E26} -> (fun (V170, V171) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%runElab "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V171)))) end(E25, E26)); {'Idris.TTImp.TTImp.IPragma', E27, E28} -> (fun (V172, V173) -> <<"[externally defined pragma]"/utf8>> end(E27, E28)); {'Idris.TTImp.TTImp.ILog', E29} -> (fun (V174) -> case V174 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"%logging off"/utf8>> end()); {'Idris.Prelude.Types.Just', E30} -> (fun (V175) -> case V175 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V176, V177) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%logging "/utf8>>, case V176 of [] -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V177)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V180, V181, V182)) end end end end end, fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V185, V186, V187)) end end end end end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V189)) end end, fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V193, V194, V195, V196)) end end end end end end end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V198)) end end, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V201, V202, V203)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V204) -> fun (V205) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V204, V205)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Data.List':'un--intersperse'(<<"."/utf8>>, V176)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V177)))))) end)) end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); {'Idris.TTImp.TTImp.IBuiltin', E33, E34, E35} -> (fun (V206, V207, V208) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%builtin "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Context':'dn--un--show_Show_BuiltinType'(V207)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V208)))))))) end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%data "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V7) -> ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V7)) end, fun (V8) -> fun (V9) -> ('dn--un--showPrec_Show_(ImpTy\x{27} $nm)'(V0, V8, V9)) end end}, V6)), <<")"/utf8>>)))))))))))) end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(%datadecl "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V12)), <<")"/utf8>>)))))))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V4)))))) end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" proof "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)))) end end, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V12) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V12)) end, fun (V13) -> fun (V14) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V13, V14)) end end}, V10)))))))))))) end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V15, V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V16)), <<" impossible"/utf8>>)) end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"->"/utf8>>, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V3)))))) end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E2, E3} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"->"/utf8>>, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" $= "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V5)))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(IField\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V6)))))) end()); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V6)), <<"}"/utf8>>)))))))) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> <<"%inline"/utf8>> end()); {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> <<"%tcinline"/utf8>> end()); {'Idris.TTImp.TTImp.Hint', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%hint "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V2)))) end(E0)); {'Idris.TTImp.TTImp.GlobalHint', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%globalhint "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V3)))) end(E1)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> <<"%extern"/utf8>> end()); {'Idris.TTImp.TTImp.ForeignFn', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%foreign "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V5)) end, V4)))))) end(E2)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> <<"%invertible"/utf8>> end()); {'Idris.TTImp.TTImp.Totality', E3} -> (fun (V6) -> case V6 of 0 -> <<"total"/utf8>>; 1 -> <<"covering"/utf8>>; 2 -> <<"partial"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> <<"%macro"/utf8>> end()); {'Idris.TTImp.TTImp.SpecArgs', E4} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%spec "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)) end, V7)))))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpTy\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpRecord\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpData\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(IFieldUpdate\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(IField\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(IField\x{27} $nm)'(V0, V2)).
'dn--un--showPrec_Show_(FnOpt\x{27} $nm)'(V0, V1, V2) -> ('dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V2)).
'dn--un--fromBuf_TTC_RawImp'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V11 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V21 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> ('dn--un--toBuf_TTC_RawImp'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('dn--un--fromBuf_TTC_RawImp'(V19, V20)) end end}, V0, V1))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V29 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V24, V25, V26)) end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V27, V28)) end end}, V0, V1))), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> begin (V32 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> begin (V35 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V35 of {'Idris.Prelude.Types.Left', E16} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPi', V13, V16, V23, V31, V34, V37}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V38 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V38 of {'Idris.Prelude.Types.Left', E18} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V41 of {'Idris.Prelude.Types.Left', E20} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V43) -> begin (V48 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V44) -> fun (V45) -> ('dn--un--toBuf_TTC_RawImp'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('dn--un--fromBuf_TTC_RawImp'(V46, V47)) end end}, V0, V1))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> begin (V56 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V51, V52, V53)) end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V54, V55)) end end}, V0, V1))), case V56 of {'Idris.Prelude.Types.Left', E24} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V58) -> begin (V59 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V59 of {'Idris.Prelude.Types.Left', E26} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V61) -> begin (V62 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V62 of {'Idris.Prelude.Types.Left', E28} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILam', V40, V43, V50, V58, V61, V64}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V65 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V65 of {'Idris.Prelude.Types.Left', E30} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V68 of {'Idris.Prelude.Types.Left', E32} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V70) -> begin (V71 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V71 of {'Idris.Prelude.Types.Left', E34} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V73) -> begin (V74 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V74 of {'Idris.Prelude.Types.Left', E36} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V76) -> begin (V77 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V77 of {'Idris.Prelude.Types.Left', E38} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V79) -> begin (V80 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V80 of {'Idris.Prelude.Types.Left', E40} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V82) -> begin (V83 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V83 of {'Idris.Prelude.Types.Left', E42} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V85) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILet', V67, V70, V73, V76, V79, V82, V85}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V86 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V86 of {'Idris.Prelude.Types.Left', E44} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V88) -> begin (V89 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V89 of {'Idris.Prelude.Types.Left', E46} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V91) -> begin (V92 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V92 of {'Idris.Prelude.Types.Left', E48} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V94) -> begin (V100 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V95) -> fun (V96) -> fun (V97) -> ('dn--un--toBuf_TTC_ImpClause'(V95, V96, V97)) end end end, fun (V98) -> fun (V99) -> ('dn--un--fromBuf_TTC_ImpClause'(V98, V99)) end end}, V0, V1))), case V100 of {'Idris.Prelude.Types.Left', E50} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V102) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', V88, V91, V94, V102}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V103 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V103 of {'Idris.Prelude.Types.Left', E52} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V105) -> begin (V111 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V106) -> fun (V107) -> fun (V108) -> ('dn--un--toBuf_TTC_ImpDecl'(V106, V107, V108)) end end end, fun (V109) -> fun (V110) -> ('dn--un--fromBuf_TTC_ImpDecl'(V109, V110)) end end}, V0, V1))), case V111 of {'Idris.Prelude.Types.Left', E54} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V113) -> begin (V114 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V114 of {'Idris.Prelude.Types.Left', E56} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V116) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILocal', V105, V113, V116}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V117 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V117 of {'Idris.Prelude.Types.Left', E58} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V119) -> begin (V125 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V120) -> fun (V121) -> fun (V122) -> ('dn--un--toBuf_TTC_IFieldUpdate'(V120, V121, V122)) end end end, fun (V123) -> fun (V124) -> ('dn--un--fromBuf_TTC_IFieldUpdate'(V123, V124)) end end}, V0, V1))), case V125 of {'Idris.Prelude.Types.Left', E60} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V127) -> begin (V128 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V128 of {'Idris.Prelude.Types.Left', E62} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V130) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IUpdate', V119, V127, V130}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V131 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V131 of {'Idris.Prelude.Types.Left', E64} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V133) -> begin (V134 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V134 of {'Idris.Prelude.Types.Left', E66} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V136) -> begin (V137 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V137 of {'Idris.Prelude.Types.Left', E68} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V139) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V133, V136, V139}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V140 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V140 of {'Idris.Prelude.Types.Left', E70} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V142) -> begin (V143 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V143 of {'Idris.Prelude.Types.Left', E72} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V145) -> begin (V146 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V146 of {'Idris.Prelude.Types.Left', E74} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V148) -> begin (V149 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V149 of {'Idris.Prelude.Types.Left', E76} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V151) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamedApp', V142, V145, V148, V151}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> begin (V152 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V152 of {'Idris.Prelude.Types.Left', E78} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V154) -> begin (V155 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V155 of {'Idris.Prelude.Types.Left', E80} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V157) -> begin (V158 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V158 of {'Idris.Prelude.Types.Left', E82} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V160) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IWithApp', V154, V157, V160}} end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 10 -> begin (V161 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V161 of {'Idris.Prelude.Types.Left', E84} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V163) -> begin (V164 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V164 of {'Idris.Prelude.Types.Left', E86} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V166) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ISearch', V163, V166}} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 11 -> begin (V167 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V167 of {'Idris.Prelude.Types.Left', E88} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V169) -> begin (V170 = ('dn--un--fromBuf_TTC_AltType'(V0, V1))), case V170 of {'Idris.Prelude.Types.Left', E90} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V172) -> begin (V177 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V173) -> fun (V174) -> ('dn--un--toBuf_TTC_RawImp'(V173, V174)) end end, fun (V175) -> fun (V176) -> ('dn--un--fromBuf_TTC_RawImp'(V175, V176)) end end}, V0, V1))), case V177 of {'Idris.Prelude.Types.Left', E92} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V179) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V169, V172, V179}} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 12 -> begin (V180 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V180 of {'Idris.Prelude.Types.Left', E94} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V182) -> begin (V183 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V183 of {'Idris.Prelude.Types.Left', E96} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V185) -> begin (V186 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V186 of {'Idris.Prelude.Types.Left', E98} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V188) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRewrite', V182, V185, V188}} end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 13 -> begin (V189 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V189 of {'Idris.Prelude.Types.Left', E100} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V191) -> begin (V192 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V192 of {'Idris.Prelude.Types.Left', E102} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V194) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICoerced', V191, V194}} end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 14 -> begin (V195 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V195 of {'Idris.Prelude.Types.Left', E104} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V197) -> begin (V198 = ('dn--un--fromBuf_TTC_BindMode'(V0, V1))), case V198 of {'Idris.Prelude.Types.Left', E106} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V200) -> begin (V201 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V201 of {'Idris.Prelude.Types.Left', E108} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V203) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IBindHere', V197, V200, V203}} end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 15 -> begin (V204 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V204 of {'Idris.Prelude.Types.Left', E110} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V206) -> begin (V207 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V207 of {'Idris.Prelude.Types.Left', E112} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V209) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IBindVar', V206, V209}} end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 16 -> begin (V210 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V210 of {'Idris.Prelude.Types.Left', E114} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V212) -> begin (V213 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V213 of {'Idris.Prelude.Types.Left', E116} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V215) -> begin (V216 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_UseSide'(V0, V1))), case V216 of {'Idris.Prelude.Types.Left', E118} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V218) -> begin (V219 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V219 of {'Idris.Prelude.Types.Left', E120} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V221) -> begin (V222 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V222 of {'Idris.Prelude.Types.Left', E122} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V224) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAs', V212, V215, V218, V221, V224}} end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 17 -> begin (V225 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V225 of {'Idris.Prelude.Types.Left', E124} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V227) -> begin (V228 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V228 of {'Idris.Prelude.Types.Left', E126} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V230) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IMustUnify', V227, 5, V230}} end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 18 -> begin (V231 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V231 of {'Idris.Prelude.Types.Left', E128} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V233) -> begin (V234 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_LazyReason'(V0, V1))), case V234 of {'Idris.Prelude.Types.Left', E130} -> (fun (V235) -> {'Idris.Prelude.Types.Left', V235} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V236) -> begin (V237 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V237 of {'Idris.Prelude.Types.Left', E132} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V239) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDelayed', V233, V236, V239}} end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 19 -> begin (V240 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V240 of {'Idris.Prelude.Types.Left', E134} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V242) -> begin (V243 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V243 of {'Idris.Prelude.Types.Left', E136} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V245) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDelay', V242, V245}} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 20 -> begin (V246 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V246 of {'Idris.Prelude.Types.Left', E138} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V248) -> begin (V249 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V249 of {'Idris.Prelude.Types.Left', E140} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V251) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IForce', V248, V251}} end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 21 -> begin (V252 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V252 of {'Idris.Prelude.Types.Left', E142} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V254) -> begin (V255 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V255 of {'Idris.Prelude.Types.Left', E144} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V257) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IQuote', V254, V257}} end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 22 -> begin (V258 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V258 of {'Idris.Prelude.Types.Left', E146} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V260) -> begin (V261 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V261 of {'Idris.Prelude.Types.Left', E148} -> (fun (V262) -> {'Idris.Prelude.Types.Left', V262} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V263) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IQuoteName', V260, V263}} end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 23 -> begin (V264 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V264 of {'Idris.Prelude.Types.Left', E150} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V266) -> begin (V272 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V267) -> fun (V268) -> fun (V269) -> ('dn--un--toBuf_TTC_ImpDecl'(V267, V268, V269)) end end end, fun (V270) -> fun (V271) -> ('dn--un--fromBuf_TTC_ImpDecl'(V270, V271)) end end}, V0, V1))), case V272 of {'Idris.Prelude.Types.Left', E152} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V274) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IQuoteDecl', V266, V274}} end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 24 -> begin (V275 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V275 of {'Idris.Prelude.Types.Left', E154} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V277) -> begin (V278 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V278 of {'Idris.Prelude.Types.Left', E156} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V280) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IUnquote', V277, V280}} end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 25 -> begin (V281 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V281 of {'Idris.Prelude.Types.Left', E158} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V283) -> begin (V284 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V284 of {'Idris.Prelude.Types.Left', E160} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V286) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRunElab', V283, V286}} end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 26 -> begin (V287 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V287 of {'Idris.Prelude.Types.Left', E162} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V289) -> begin (V290 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Constant'(V0, V1))), case V290 of {'Idris.Prelude.Types.Left', E164} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V292) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPrimVal', V289, V292}} end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 27 -> begin (V293 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V293 of {'Idris.Prelude.Types.Left', E166} -> (fun (V294) -> {'Idris.Prelude.Types.Left', V294} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V295) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IType', V295}} end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 28 -> begin (V296 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V296 of {'Idris.Prelude.Types.Left', E168} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V298) -> begin (V299 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V299 of {'Idris.Prelude.Types.Left', E170} -> (fun (V300) -> {'Idris.Prelude.Types.Left', V300} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V301) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IHole', V298, V301}} end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 29 -> begin (V302 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V302 of {'Idris.Prelude.Types.Left', E172} -> (fun (V303) -> {'Idris.Prelude.Types.Left', V303} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V304) -> begin (V305 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V305 of {'Idris.Prelude.Types.Left', E174} -> (fun (V306) -> {'Idris.Prelude.Types.Left', V306} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V307) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V304, V307}} end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 30 -> begin (V308 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V308 of {'Idris.Prelude.Types.Left', E176} -> (fun (V309) -> {'Idris.Prelude.Types.Left', V309} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V310) -> begin (V316 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V311) -> fun (V312) -> fun (V313) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V311, V312, V313)) end end end, fun (V314) -> fun (V315) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V314, V315)) end end}, V0, V1))), case V316 of {'Idris.Prelude.Types.Left', E178} -> (fun (V317) -> {'Idris.Prelude.Types.Left', V317} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V318) -> begin (V319 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V319 of {'Idris.Prelude.Types.Left', E180} -> (fun (V320) -> {'Idris.Prelude.Types.Left', V320} end(E180)); {'Idris.Prelude.Types.Right', E181} -> (fun (V321) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IWithUnambigNames', V310, V318, V321}} end(E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 31 -> begin (V322 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V322 of {'Idris.Prelude.Types.Left', E182} -> (fun (V323) -> {'Idris.Prelude.Types.Left', V323} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V324) -> begin (V325 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V325 of {'Idris.Prelude.Types.Left', E184} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V327) -> begin (V328 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V328 of {'Idris.Prelude.Types.Left', E186} -> (fun (V329) -> {'Idris.Prelude.Types.Left', V329} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V330) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAutoApp', V324, V327, V330}} end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"RawImp"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_ImpTy'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpTy', V4, V7, V10, V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_ImpRecord'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V205 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V11, V12, V13)) end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V14, V15)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V21, V22)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V29) -> fun (V30) -> ('dn--un--toBuf_TTC_RawImp'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('dn--un--fromBuf_TTC_RawImp'(V31, V32)) end end}, V26, V27, V28)) end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> ('dn--un--toBuf_TTC_RawImp'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('dn--un--fromBuf_TTC_RawImp'(V37, V38)) end end}, V33, V34)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V39) -> fun (V40) -> ('dn--un--toBuf_TTC_RawImp'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('dn--un--fromBuf_TTC_RawImp'(V41, V42)) end end}}, V23, V24, V25)) end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V48) -> fun (V49) -> ('dn--un--toBuf_TTC_RawImp'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('dn--un--fromBuf_TTC_RawImp'(V50, V51)) end end}, V45, V46, V47)) end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> ('dn--un--toBuf_TTC_RawImp'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('dn--un--fromBuf_TTC_RawImp'(V56, V57)) end end}, V52, V53)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V58) -> fun (V59) -> ('dn--un--toBuf_TTC_RawImp'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('dn--un--fromBuf_TTC_RawImp'(V60, V61)) end end}}, V43, V44)) end end}}, V16, V17, V18)) end end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V66, V67)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V74) -> fun (V75) -> ('dn--un--toBuf_TTC_RawImp'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('dn--un--fromBuf_TTC_RawImp'(V76, V77)) end end}, V71, V72, V73)) end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V80) -> fun (V81) -> ('dn--un--toBuf_TTC_RawImp'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('dn--un--fromBuf_TTC_RawImp'(V82, V83)) end end}, V78, V79)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V84) -> fun (V85) -> ('dn--un--toBuf_TTC_RawImp'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('dn--un--fromBuf_TTC_RawImp'(V86, V87)) end end}}, V68, V69, V70)) end end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V93) -> fun (V94) -> ('dn--un--toBuf_TTC_RawImp'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('dn--un--fromBuf_TTC_RawImp'(V95, V96)) end end}, V90, V91, V92)) end end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V99) -> fun (V100) -> ('dn--un--toBuf_TTC_RawImp'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('dn--un--fromBuf_TTC_RawImp'(V101, V102)) end end}, V97, V98)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V103) -> fun (V104) -> ('dn--un--toBuf_TTC_RawImp'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--fromBuf_TTC_RawImp'(V105, V106)) end end}}, V88, V89)) end end}}, V62, V63)) end end}}, V8, V9, V10)) end end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V109, V110, V111)) end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V112, V113)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V119, V120)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V127) -> fun (V128) -> ('dn--un--toBuf_TTC_RawImp'(V127, V128)) end end, fun (V129) -> fun (V130) -> ('dn--un--fromBuf_TTC_RawImp'(V129, V130)) end end}, V124, V125, V126)) end end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V133) -> fun (V134) -> ('dn--un--toBuf_TTC_RawImp'(V133, V134)) end end, fun (V135) -> fun (V136) -> ('dn--un--fromBuf_TTC_RawImp'(V135, V136)) end end}, V131, V132)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V137) -> fun (V138) -> ('dn--un--toBuf_TTC_RawImp'(V137, V138)) end end, fun (V139) -> fun (V140) -> ('dn--un--fromBuf_TTC_RawImp'(V139, V140)) end end}}, V121, V122, V123)) end end end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V146) -> fun (V147) -> ('dn--un--toBuf_TTC_RawImp'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('dn--un--fromBuf_TTC_RawImp'(V148, V149)) end end}, V143, V144, V145)) end end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V152) -> fun (V153) -> ('dn--un--toBuf_TTC_RawImp'(V152, V153)) end end, fun (V154) -> fun (V155) -> ('dn--un--fromBuf_TTC_RawImp'(V154, V155)) end end}, V150, V151)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V156) -> fun (V157) -> ('dn--un--toBuf_TTC_RawImp'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('dn--un--fromBuf_TTC_RawImp'(V158, V159)) end end}}, V141, V142)) end end}}, V114, V115, V116)) end end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V162, V163)) end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V164, V165)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V172) -> fun (V173) -> ('dn--un--toBuf_TTC_RawImp'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('dn--un--fromBuf_TTC_RawImp'(V174, V175)) end end}, V169, V170, V171)) end end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V178) -> fun (V179) -> ('dn--un--toBuf_TTC_RawImp'(V178, V179)) end end, fun (V180) -> fun (V181) -> ('dn--un--fromBuf_TTC_RawImp'(V180, V181)) end end}, V176, V177)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V182) -> fun (V183) -> ('dn--un--toBuf_TTC_RawImp'(V182, V183)) end end, fun (V184) -> fun (V185) -> ('dn--un--fromBuf_TTC_RawImp'(V184, V185)) end end}}, V166, V167, V168)) end end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V188) -> fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V191) -> fun (V192) -> ('dn--un--toBuf_TTC_RawImp'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('dn--un--fromBuf_TTC_RawImp'(V193, V194)) end end}, V188, V189, V190)) end end end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V197) -> fun (V198) -> ('dn--un--toBuf_TTC_RawImp'(V197, V198)) end end, fun (V199) -> fun (V200) -> ('dn--un--fromBuf_TTC_RawImp'(V199, V200)) end end}, V195, V196)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V201) -> fun (V202) -> ('dn--un--toBuf_TTC_RawImp'(V201, V202)) end end, fun (V203) -> fun (V204) -> ('dn--un--fromBuf_TTC_RawImp'(V203, V204)) end end}}, V186, V187)) end end}}, V160, V161)) end end}}, V107, V108)) end end}, V0, V1))), case V205 of {'Idris.Prelude.Types.Left', E4} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V207) -> begin (V208 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V208 of {'Idris.Prelude.Types.Left', E6} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V210) -> begin (V216 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V211) -> fun (V212) -> fun (V213) -> ('dn--un--toBuf_TTC_IField'(V211, V212, V213)) end end end, fun (V214) -> fun (V215) -> ('dn--un--fromBuf_TTC_IField'(V214, V215)) end end}, V0, V1))), case V216 of {'Idris.Prelude.Types.Left', E8} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V218) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpRecord', V4, V7, V207, V210, V218}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_ImpDecl'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Visibility'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V19 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--toBuf_TTC_FnOpt'(V14, V15, V16)) end end end, fun (V17) -> fun (V18) -> ('dn--un--fromBuf_TTC_FnOpt'(V17, V18)) end end}, V0, V1))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('dn--un--fromBuf_TTC_ImpTy'(V0, V1))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IClaim', V7, V10, V13, V21, V24}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V25 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Visibility'(V0, V1))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> begin (V31 = ('dn--un--fromBuf_TTC_ImpData'(V0, V1))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IData', V27, V30, V33}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V34 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> begin (V45 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V40) -> fun (V41) -> fun (V42) -> ('dn--un--toBuf_TTC_ImpClause'(V40, V41, V42)) end end end, fun (V43) -> fun (V44) -> ('dn--un--fromBuf_TTC_ImpClause'(V43, V44)) end end}, V0, V1))), case V45 of {'Idris.Prelude.Types.Left', E22} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDef', V36, V39, V47}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V48 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V48 of {'Idris.Prelude.Types.Left', E24} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V50) -> begin (V248 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V57, V58)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V64, V65)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V72) -> fun (V73) -> ('dn--un--toBuf_TTC_RawImp'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('dn--un--fromBuf_TTC_RawImp'(V74, V75)) end end}, V69, V70, V71)) end end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V78) -> fun (V79) -> ('dn--un--toBuf_TTC_RawImp'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('dn--un--fromBuf_TTC_RawImp'(V80, V81)) end end}, V76, V77)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V82) -> fun (V83) -> ('dn--un--toBuf_TTC_RawImp'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('dn--un--fromBuf_TTC_RawImp'(V84, V85)) end end}}, V66, V67, V68)) end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V91) -> fun (V92) -> ('dn--un--toBuf_TTC_RawImp'(V91, V92)) end end, fun (V93) -> fun (V94) -> ('dn--un--fromBuf_TTC_RawImp'(V93, V94)) end end}, V88, V89, V90)) end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V97) -> fun (V98) -> ('dn--un--toBuf_TTC_RawImp'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('dn--un--fromBuf_TTC_RawImp'(V99, V100)) end end}, V95, V96)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V101) -> fun (V102) -> ('dn--un--toBuf_TTC_RawImp'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('dn--un--fromBuf_TTC_RawImp'(V103, V104)) end end}}, V86, V87)) end end}}, V59, V60, V61)) end end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V109, V110)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V117) -> fun (V118) -> ('dn--un--toBuf_TTC_RawImp'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('dn--un--fromBuf_TTC_RawImp'(V119, V120)) end end}, V114, V115, V116)) end end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V123) -> fun (V124) -> ('dn--un--toBuf_TTC_RawImp'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('dn--un--fromBuf_TTC_RawImp'(V125, V126)) end end}, V121, V122)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V127) -> fun (V128) -> ('dn--un--toBuf_TTC_RawImp'(V127, V128)) end end, fun (V129) -> fun (V130) -> ('dn--un--fromBuf_TTC_RawImp'(V129, V130)) end end}}, V111, V112, V113)) end end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V133) -> fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V136) -> fun (V137) -> ('dn--un--toBuf_TTC_RawImp'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('dn--un--fromBuf_TTC_RawImp'(V138, V139)) end end}, V133, V134, V135)) end end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V142) -> fun (V143) -> ('dn--un--toBuf_TTC_RawImp'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('dn--un--fromBuf_TTC_RawImp'(V144, V145)) end end}, V140, V141)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V146) -> fun (V147) -> ('dn--un--toBuf_TTC_RawImp'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('dn--un--fromBuf_TTC_RawImp'(V148, V149)) end end}}, V131, V132)) end end}}, V105, V106)) end end}}, V51, V52, V53)) end end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V152, V153, V154)) end end end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V155, V156)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V160, V161)) end end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V162, V163)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V170) -> fun (V171) -> ('dn--un--toBuf_TTC_RawImp'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('dn--un--fromBuf_TTC_RawImp'(V172, V173)) end end}, V167, V168, V169)) end end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V176) -> fun (V177) -> ('dn--un--toBuf_TTC_RawImp'(V176, V177)) end end, fun (V178) -> fun (V179) -> ('dn--un--fromBuf_TTC_RawImp'(V178, V179)) end end}, V174, V175)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V180) -> fun (V181) -> ('dn--un--toBuf_TTC_RawImp'(V180, V181)) end end, fun (V182) -> fun (V183) -> ('dn--un--fromBuf_TTC_RawImp'(V182, V183)) end end}}, V164, V165, V166)) end end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V189) -> fun (V190) -> ('dn--un--toBuf_TTC_RawImp'(V189, V190)) end end, fun (V191) -> fun (V192) -> ('dn--un--fromBuf_TTC_RawImp'(V191, V192)) end end}, V186, V187, V188)) end end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V195) -> fun (V196) -> ('dn--un--toBuf_TTC_RawImp'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('dn--un--fromBuf_TTC_RawImp'(V197, V198)) end end}, V193, V194)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V199) -> fun (V200) -> ('dn--un--toBuf_TTC_RawImp'(V199, V200)) end end, fun (V201) -> fun (V202) -> ('dn--un--fromBuf_TTC_RawImp'(V201, V202)) end end}}, V184, V185)) end end}}, V157, V158, V159)) end end end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V205, V206)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V207, V208)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V209) -> fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V215) -> fun (V216) -> ('dn--un--toBuf_TTC_RawImp'(V215, V216)) end end, fun (V217) -> fun (V218) -> ('dn--un--fromBuf_TTC_RawImp'(V217, V218)) end end}, V212, V213, V214)) end end end, fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V221) -> fun (V222) -> ('dn--un--toBuf_TTC_RawImp'(V221, V222)) end end, fun (V223) -> fun (V224) -> ('dn--un--fromBuf_TTC_RawImp'(V223, V224)) end end}, V219, V220)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V225) -> fun (V226) -> ('dn--un--toBuf_TTC_RawImp'(V225, V226)) end end, fun (V227) -> fun (V228) -> ('dn--un--fromBuf_TTC_RawImp'(V227, V228)) end end}}, V209, V210, V211)) end end end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V231) -> fun (V232) -> fun (V233) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V234) -> fun (V235) -> ('dn--un--toBuf_TTC_RawImp'(V234, V235)) end end, fun (V236) -> fun (V237) -> ('dn--un--fromBuf_TTC_RawImp'(V236, V237)) end end}, V231, V232, V233)) end end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V240) -> fun (V241) -> ('dn--un--toBuf_TTC_RawImp'(V240, V241)) end end, fun (V242) -> fun (V243) -> ('dn--un--fromBuf_TTC_RawImp'(V242, V243)) end end}, V238, V239)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V244) -> fun (V245) -> ('dn--un--toBuf_TTC_RawImp'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('dn--un--fromBuf_TTC_RawImp'(V246, V247)) end end}}, V229, V230)) end end}}, V203, V204)) end end}}, V150, V151)) end end}, V0, V1))), case V248 of {'Idris.Prelude.Types.Left', E26} -> (fun (V249) -> {'Idris.Prelude.Types.Left', V249} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V250) -> begin (V256 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V251) -> fun (V252) -> fun (V253) -> ('dn--un--toBuf_TTC_ImpDecl'(V251, V252, V253)) end end end, fun (V254) -> fun (V255) -> ('dn--un--fromBuf_TTC_ImpDecl'(V254, V255)) end end}, V0, V1))), case V256 of {'Idris.Prelude.Types.Left', E28} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V258) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IParameters', V50, V250, V258}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V259 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V259 of {'Idris.Prelude.Types.Left', E30} -> (fun (V260) -> {'Idris.Prelude.Types.Left', V260} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V261) -> begin (V266 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V262) -> fun (V263) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V262, V263)) end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V264, V265)) end end}, V0, V1))), case V266 of {'Idris.Prelude.Types.Left', E32} -> (fun (V267) -> {'Idris.Prelude.Types.Left', V267} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V268) -> begin (V269 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Visibility'(V0, V1))), case V269 of {'Idris.Prelude.Types.Left', E34} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V271) -> begin (V272 = ('dn--un--fromBuf_TTC_ImpRecord'(V0, V1))), case V272 of {'Idris.Prelude.Types.Left', E36} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V274) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRecord', V261, V268, V271, V274}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V275 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V275 of {'Idris.Prelude.Types.Left', E38} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V277) -> begin (V278 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V0, V1))), case V278 of {'Idris.Prelude.Types.Left', E40} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V280) -> begin (V286 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V281) -> fun (V282) -> fun (V283) -> ('dn--un--toBuf_TTC_ImpDecl'(V281, V282, V283)) end end end, fun (V284) -> fun (V285) -> ('dn--un--fromBuf_TTC_ImpDecl'(V284, V285)) end end}, V0, V1))), case V286 of {'Idris.Prelude.Types.Left', E42} -> (fun (V287) -> {'Idris.Prelude.Types.Left', V287} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V288) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamespace', V277, V280, V288}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V289 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V289 of {'Idris.Prelude.Types.Left', E44} -> (fun (V290) -> {'Idris.Prelude.Types.Left', V290} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V291) -> begin (V292 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V292 of {'Idris.Prelude.Types.Left', E46} -> (fun (V293) -> {'Idris.Prelude.Types.Left', V293} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V294) -> begin (V295 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V295 of {'Idris.Prelude.Types.Left', E48} -> (fun (V296) -> {'Idris.Prelude.Types.Left', V296} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V297) -> begin (V298 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V298 of {'Idris.Prelude.Types.Left', E50} -> (fun (V299) -> {'Idris.Prelude.Types.Left', V299} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V300) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ITransform', V291, V294, V297, V300}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V301 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V301 of {'Idris.Prelude.Types.Left', E52} -> (fun (V302) -> {'Idris.Prelude.Types.Left', V302} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V303) -> begin (V304 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V304 of {'Idris.Prelude.Types.Left', E54} -> (fun (V305) -> {'Idris.Prelude.Types.Left', V305} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V306) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRunElabDecl', V303, V306}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V348 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V307) -> fun (V308) -> fun (V309) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V310) -> fun (V311) -> fun (V312) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V313) -> fun (V314) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V313, V314)) end end, fun (V315) -> fun (V316) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V315, V316)) end end}, V310, V311, V312)) end end end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V319) -> fun (V320) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V319, V320)) end end, fun (V321) -> fun (V322) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V321, V322)) end end}, V317, V318)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V323) -> fun (V324) -> fun (V325) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V323, V324, V325)) end end end, fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V326, V327)) end end}}, V307, V308, V309)) end end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V330) -> fun (V331) -> fun (V332) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V333) -> fun (V334) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V333, V334)) end end, fun (V335) -> fun (V336) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V335, V336)) end end}, V330, V331, V332)) end end end, fun (V337) -> fun (V338) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V339, V340)) end end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V341, V342)) end end}, V337, V338)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V343) -> fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V343, V344, V345)) end end end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V346, V347)) end end}}, V328, V329)) end end}, V0, V1))), case V348 of {'Idris.Prelude.Types.Left', E56} -> (fun (V349) -> {'Idris.Prelude.Types.Left', V349} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V350) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILog', V350}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> begin (V351 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V351 of {'Idris.Prelude.Types.Left', E58} -> (fun (V352) -> {'Idris.Prelude.Types.Left', V352} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V353) -> begin (V354 = ('dn--un--fromBuf_TTC_BuiltinType'(V0, V1))), case V354 of {'Idris.Prelude.Types.Left', E60} -> (fun (V355) -> {'Idris.Prelude.Types.Left', V355} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V356) -> begin (V357 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V357 of {'Idris.Prelude.Types.Left', E62} -> (fun (V358) -> {'Idris.Prelude.Types.Left', V358} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V359) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IBuiltin', V353, V356, V359}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"ImpDecl"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_ImpData'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V19 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--toBuf_TTC_DataOpt'(V14, V15, V16)) end end end, fun (V17) -> fun (V18) -> ('dn--un--fromBuf_TTC_DataOpt'(V17, V18)) end end}, V0, V1))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V27 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V22) -> fun (V23) -> fun (V24) -> ('dn--un--toBuf_TTC_ImpTy'(V22, V23, V24)) end end end, fun (V25) -> fun (V26) -> ('dn--un--fromBuf_TTC_ImpTy'(V25, V26)) end end}, V0, V1))), case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpData', V7, V10, V13, V21, V29}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V30 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V36 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V36 of {'Idris.Prelude.Types.Left', E16} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpLater', V32, V35, V38}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"ImpData"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_ImpClause'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V7, V10, V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V14 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ImpossibleClause', V16, V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V20 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V23 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> begin (V26 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V26 of {'Idris.Prelude.Types.Left', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V28) -> begin (V34 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V29, V30, V31)) end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V32, V33)) end end}, V0, V1))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V42 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V37) -> fun (V38) -> fun (V39) -> ('dn--un--toBuf_TTC_ImpClause'(V37, V38, V39)) end end end, fun (V40) -> fun (V41) -> ('dn--un--fromBuf_TTC_ImpClause'(V40, V41)) end end}, V0, V1))), case V42 of {'Idris.Prelude.Types.Left', E20} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.WithClause', V22, V25, V28, V36, [], V44}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"ImpClause"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_IFieldUpdate'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V7, V8)) end end}, V0, V1))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ISetField', V11, V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V19 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V17, V18)) end end}, V0, V1))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ISetFieldApp', V21, V24}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"IFieldUpdate"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_IField'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V12 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> ('dn--un--toBuf_TTC_RawImp'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--fromBuf_TTC_RawImp'(V10, V11)) end end}, V0, V1))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkIField', V4, V7, V14, V17, V20}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_FnOpt'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Inline'}}; 1 -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Hint', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.GlobalHint', V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ExternFn'}}; 4 -> begin (V15 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V11) -> fun (V12) -> ('dn--un--toBuf_TTC_RawImp'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--fromBuf_TTC_RawImp'(V13, V14)) end end}, V0, V1))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ForeignFn', V17}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Invertible'}}; 6 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Totality', 0}}; 7 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Totality', 1}}; 8 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Totality', 2}}; 9 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Macro'}}; 10 -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V21, V22)) end end}, V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.SpecArgs', V25}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 11 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.TCInline'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"FnOpt"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_DataOpt'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V10 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V8, V9)) end end}, V0, V1))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.SearchBy', V12}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.NoHints'}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.UniqueSearch'}}; 3 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.External'}}; 4 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.NoNewtype'}}; 5 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.NoEnum'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"DataOpt"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_BuiltinType'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; 2 -> {'Idris.Prelude.Types.Right', 2}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"BuiltinType"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_BindMode'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PI', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PATTERN'}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.NONE'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"BindMode"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_AltType'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.FirstSuccess'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Unique'}}; 2 -> begin (V5 = ('dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.UniqueDefault', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"AltType"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_Weaken_NestedNames'() -> {'Idris.Core.TT.dn--un--__mkWeaken', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--weaken_Weaken_NestedNames'(V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--weakenNs_Weaken_NestedNames'(V5, V6)) end end end end}.
'dn--un--__Impl_TTC_RawImp'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_RawImp'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_RawImp'(V2, V3)) end end}.
'dn--un--__Impl_TTC_ImpTy'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_ImpTy'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_ImpTy'(V3, V4)) end end}.
'dn--un--__Impl_TTC_ImpRecord'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_ImpRecord'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_ImpRecord'(V3, V4)) end end}.
'dn--un--__Impl_TTC_ImpDecl'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_ImpDecl'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_ImpDecl'(V3, V4)) end end}.
'dn--un--__Impl_TTC_ImpData'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_ImpData'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_ImpData'(V3, V4)) end end}.
'dn--un--__Impl_TTC_ImpClause'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_ImpClause'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_ImpClause'(V3, V4)) end end}.
'dn--un--__Impl_TTC_IFieldUpdate'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_IFieldUpdate'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_IFieldUpdate'(V3, V4)) end end}.
'dn--un--__Impl_TTC_IField'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_IField'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_IField'(V3, V4)) end end}.
'dn--un--__Impl_TTC_FnOpt'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_FnOpt'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_FnOpt'(V3, V4)) end end}.
'dn--un--__Impl_TTC_DataOpt'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_DataOpt'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_DataOpt'(V3, V4)) end end}.
'dn--un--__Impl_TTC_BuiltinType'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_BuiltinType'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_BuiltinType'(V3, V4)) end end}.
'dn--un--__Impl_TTC_BindMode'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_BindMode'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_BindMode'(V3, V4)) end end}.
'dn--un--__Impl_TTC_AltType'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_AltType'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_AltType'(V3, V4)) end end}.
'dn--un--__Impl_Show_(RawImp\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(RawImp\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(RawImp\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpTy\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpTy\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpTy\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpRecord\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpRecord\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpRecord\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpDecl\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpDecl\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpData\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpData\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpData\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(ImpClause\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(ImpClause\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(ImpClause\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(IFieldUpdate\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(IFieldUpdate\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(IFieldUpdate\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(IField\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(IField\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(IField\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(FnOpt\x{27} $nm)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(FnOpt\x{27} $nm)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(FnOpt\x{27} $nm)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Eq_WithFlag'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_WithFlag'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_WithFlag'(V2, V3)) end end}.
'dn--un--__Impl_Eq_FnOpt'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_FnOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_FnOpt'(V2, V3)) end end}.
'dn--un--__Impl_Eq_DataOpt'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DataOpt'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DataOpt'(V2, V3)) end end}.
'dn--un--==_Eq_WithFlag'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_FnOpt'(V0, V1) -> case V0 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.Hint', E0} -> (fun (V2) -> case V1 of {'Idris.TTImp.TTImp.Hint', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.TTImp.TTImp.GlobalHint', E2} -> (fun (V4) -> case V1 of {'Idris.TTImp.TTImp.GlobalHint', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V4, V5)) end(E3)); _ -> 0 end end(E2)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.ForeignFn', E4} -> (fun (V6) -> case V1 of {'Idris.TTImp.TTImp.ForeignFn', E5} -> (fun (V7) -> 1 end(E5)); _ -> 0 end end(E4)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.Totality', E6} -> (fun (V8) -> case V1 of {'Idris.TTImp.TTImp.Totality', E7} -> (fun (V9) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_TotalReq'(V8, V9)) end(E7)); _ -> 0 end end(E6)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.Macro'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.SpecArgs', E8} -> (fun (V10) -> case V1 of {'Idris.TTImp.TTImp.SpecArgs', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V10, V11)) end(E9)); _ -> 0 end end(E8)); _ -> 0 end.
'dn--un--==_Eq_DataOpt'(V0, V1) -> case V0 of {'Idris.TTImp.TTImp.SearchBy', E0} -> (fun (V2) -> case V1 of {'Idris.TTImp.TTImp.SearchBy', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.TTImp.TTImp.NoHints'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.NoHints'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.UniqueSearch'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.UniqueSearch'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.External'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.External'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.NoNewtype'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.NoNewtype'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.TTImp.TTImp.NoEnum'} -> (fun () -> case V1 of {'Idris.TTImp.TTImp.NoEnum'} -> (fun () -> 1 end()); _ -> 0 end end()); _ -> 0 end.
'dn--un--/=_Eq_WithFlag'(V0, V1) -> case ('dn--un--==_Eq_WithFlag'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_FnOpt'(V0, V1) -> case ('dn--un--==_Eq_FnOpt'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_DataOpt'(V0, V1) -> case ('dn--un--==_Eq_DataOpt'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapAltType'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.UniqueDefault', E0} -> (fun (V2) -> {'Idris.TTImp.TTImp.UniqueDefault', (V0(V2))} end(E0)); _ -> V1 end.
'un--logRaw'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V0, V1, V2, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of 1 -> case V1 of <<""/utf8>> -> begin (V39 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V3()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V37, V38)) end end}, V4))))))))))))))(V5))), {'Idris.Prelude.Types.Right', V39} end; _ -> begin (V70 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> V46 end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), begin (V54 = (V51(V52))), (V53(V54)) end end end end end end end}, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), ((V58(V60))(V59)) end end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> begin (V64 = (V62(V63))), (V64(V63)) end end end end}, fun (V65) -> fun (V66) -> V66 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V3()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V68, V69)) end end}, V4))))))))))))))))))(V5))), {'Idris.Prelude.Types.Right', V70} end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lhsInCurrentNS'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V3, V4, V5) -> fun (V6) -> begin (V7 = (('un--lhsInCurrentNS'(V0, V1, V4))(V6))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V3, V9, V5}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V10, V11, V12) -> fun (V13) -> begin (V14 = (('un--lhsInCurrentNS'(V0, V1, V11))(V13))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAutoApp', V10, V16, V12}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E10, E11, E12, E13} -> (fun (V17, V18, V19, V20) -> fun (V21) -> begin (V22 = (('un--lhsInCurrentNS'(V0, V1, V18))(V21))), case V22 of {'Idris.Prelude.Types.Left', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamedApp', V17, V24, V19, V20}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13)); {'Idris.TTImp.TTImp.IWithApp', E16, E17, E18} -> (fun (V25, V26, V27) -> fun (V28) -> begin (V29 = (('un--lhsInCurrentNS'(V0, V1, V26))(V28))), case V29 of {'Idris.Prelude.Types.Left', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IWithApp', V25, V31, V27}} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18)); {'Idris.TTImp.TTImp.IVar', E21, E22} -> (fun (V32, V33) -> fun (V34) -> case V33 of {'Idris.Core.Name.NS', E26, E27} -> (fun (V35, V36) -> {'Idris.Prelude.Types.Right', V2} end(E26, E27)); _ -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V39, V40)) end end}, V33, V1)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V41 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V33, V34))), case V41 of {'Idris.Prelude.Types.Left', E23} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V32, V43}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E25} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V32, V33}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21, E22)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', V2} end end.
'un--isTotalityReq'(V0) -> case V0 of {'Idris.TTImp.TTImp.Totality', E0} -> (fun (V1) -> 1 end(E0)); _ -> 0 end.
'un--isIPrimVal'(V0) -> case V0 of {'Idris.TTImp.TTImp.IPrimVal', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', V2} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--implicitsAs'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--findIBinds'(V4))), fun (V6) -> begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"declare.def.lhs.implicits"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found implicits: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V8, V9)) end end}, V5)))) end, V6))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> ('nested--9820-12762--in--un--setAs'(V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> {'Idris.Prelude.Types.Just', V13} end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V14}} end, V5)))))), [], V4, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getFn'(V0) -> case V0 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V1, V2, V3) -> ('un--getFn'(V2)) end(E0, E1, E2)); {'Idris.TTImp.TTImp.IWithApp', E3, E4, E5} -> (fun (V4, V5, V6) -> ('un--getFn'(V5)) end(E3, E4, E5)); {'Idris.TTImp.TTImp.INamedApp', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> ('un--getFn'(V8)) end(E6, E7, E8, E9)); {'Idris.TTImp.TTImp.IAutoApp', E10, E11, E12} -> (fun (V11, V12, V13) -> ('un--getFn'(V12)) end(E10, E11, E12)); {'Idris.TTImp.TTImp.IAs', E13, E14, E15, E16, E17} -> (fun (V14, V15, V16, V17, V18) -> ('un--getFn'(V18)) end(E13, E14, E15, E16, E17)); {'Idris.TTImp.TTImp.IMustUnify', E18, E19, E20} -> (fun (V19, V20, V21) -> ('un--getFn'(V21)) end(E18, E19, E20)); _ -> V0 end.
'un--getFC'(V0) -> case V0 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E8, E9, E10, E11, E12, E13)); {'Idris.TTImp.TTImp.ILet', E14, E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V15 end(E14, E15, E16, E17, E18, E19, E20)); {'Idris.TTImp.TTImp.ICase', E21, E22, E23, E24} -> (fun (V22, V23, V24, V25) -> V22 end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.ILocal', E25, E26, E27} -> (fun (V26, V27, V28) -> V26 end(E25, E26, E27)); {'Idris.TTImp.TTImp.ICaseLocal', E28, E29, E30, E31, E32} -> (fun (V29, V30, V31, V32, V33) -> V29 end(E28, E29, E30, E31, E32)); {'Idris.TTImp.TTImp.IUpdate', E33, E34, E35} -> (fun (V34, V35, V36) -> V34 end(E33, E34, E35)); {'Idris.TTImp.TTImp.IApp', E36, E37, E38} -> (fun (V37, V38, V39) -> V37 end(E36, E37, E38)); {'Idris.TTImp.TTImp.INamedApp', E39, E40, E41, E42} -> (fun (V40, V41, V42, V43) -> V40 end(E39, E40, E41, E42)); {'Idris.TTImp.TTImp.IAutoApp', E43, E44, E45} -> (fun (V44, V45, V46) -> V44 end(E43, E44, E45)); {'Idris.TTImp.TTImp.IWithApp', E46, E47, E48} -> (fun (V47, V48, V49) -> V47 end(E46, E47, E48)); {'Idris.TTImp.TTImp.ISearch', E49, E50} -> (fun (V50, V51) -> V50 end(E49, E50)); {'Idris.TTImp.TTImp.IAlternative', E51, E52, E53} -> (fun (V52, V53, V54) -> V52 end(E51, E52, E53)); {'Idris.TTImp.TTImp.IRewrite', E54, E55, E56} -> (fun (V55, V56, V57) -> V55 end(E54, E55, E56)); {'Idris.TTImp.TTImp.ICoerced', E57, E58} -> (fun (V58, V59) -> V58 end(E57, E58)); {'Idris.TTImp.TTImp.IPrimVal', E59, E60} -> (fun (V60, V61) -> V60 end(E59, E60)); {'Idris.TTImp.TTImp.IHole', E61, E62} -> (fun (V62, V63) -> V62 end(E61, E62)); {'Idris.TTImp.TTImp.IUnifyLog', E63, E64, E65} -> (fun (V64, V65, V66) -> V64 end(E63, E64, E65)); {'Idris.TTImp.TTImp.IType', E66} -> (fun (V67) -> V67 end(E66)); {'Idris.TTImp.TTImp.IBindVar', E67, E68} -> (fun (V68, V69) -> V68 end(E67, E68)); {'Idris.TTImp.TTImp.IBindHere', E69, E70, E71} -> (fun (V70, V71, V72) -> V70 end(E69, E70, E71)); {'Idris.TTImp.TTImp.IMustUnify', E72, E73, E74} -> (fun (V73, V74, V75) -> V73 end(E72, E73, E74)); {'Idris.TTImp.TTImp.IDelayed', E75, E76, E77} -> (fun (V76, V77, V78) -> V76 end(E75, E76, E77)); {'Idris.TTImp.TTImp.IDelay', E78, E79} -> (fun (V79, V80) -> V79 end(E78, E79)); {'Idris.TTImp.TTImp.IForce', E80, E81} -> (fun (V81, V82) -> V81 end(E80, E81)); {'Idris.TTImp.TTImp.IQuote', E82, E83} -> (fun (V83, V84) -> V83 end(E82, E83)); {'Idris.TTImp.TTImp.IQuoteName', E84, E85} -> (fun (V85, V86) -> V85 end(E84, E85)); {'Idris.TTImp.TTImp.IQuoteDecl', E86, E87} -> (fun (V87, V88) -> V87 end(E86, E87)); {'Idris.TTImp.TTImp.IUnquote', E88, E89} -> (fun (V89, V90) -> V89 end(E88, E89)); {'Idris.TTImp.TTImp.IRunElab', E90, E91} -> (fun (V91, V92) -> V91 end(E90, E91)); {'Idris.TTImp.TTImp.IAs', E92, E93, E94, E95, E96} -> (fun (V93, V94, V95, V96, V97) -> V93 end(E92, E93, E94, E95, E96)); {'Idris.TTImp.TTImp.Implicit', E97, E98} -> (fun (V98, V99) -> V98 end(E97, E98)); {'Idris.TTImp.TTImp.IWithUnambigNames', E99, E100, E101} -> (fun (V100, V101, V102) -> V100 end(E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--gapply'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> ('un--gapply'(('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V4) -> fun (V5) -> ('nested--11473-14319--in--un--app'(V2, V3, V0, V0, V4, V5)) end end, V2)), V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findImplicits'(V0) -> case V0 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Prelude.Types.Just', E6} -> (fun (V7) -> case V7 of {'Idris.Core.Name.UN', E7} -> (fun (V8) -> case V8 of {'Idris.Core.Name.Basic', E8} -> (fun (V9) -> [V9 | ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6))))] end(E8)); _ -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6)))) end end(E7)); _ -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6)))) end end(E6)); _ -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V5)), ('un--findImplicits'(V6)))) end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E9, E10, E11, E12, E13, E14} -> (fun (V10, V11, V12, V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V14)), ('un--findImplicits'(V15)))) end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.IApp', E15, E16, E17} -> (fun (V16, V17, V18) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V17)), ('un--findImplicits'(V18)))) end(E15, E16, E17)); {'Idris.TTImp.TTImp.IAutoApp', E18, E19, E20} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V20)), ('un--findImplicits'(V21)))) end(E18, E19, E20)); {'Idris.TTImp.TTImp.INamedApp', E21, E22, E23, E24} -> (fun (V22, V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V23)), ('un--findImplicits'(V25)))) end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.IWithApp', E25, E26, E27} -> (fun (V26, V27, V28) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findImplicits'(V27)), ('un--findImplicits'(V28)))) end(E25, E26, E27)); {'Idris.TTImp.TTImp.IAs', E28, E29, E30, E31, E32} -> (fun (V29, V30, V31, V32, V33) -> ('un--findImplicits'(V33)) end(E28, E29, E30, E31, E32)); {'Idris.TTImp.TTImp.IMustUnify', E33, E34, E35} -> (fun (V34, V35, V36) -> ('un--findImplicits'(V36)) end(E33, E34, E35)); {'Idris.TTImp.TTImp.IAlternative', E36, E37, E38} -> (fun (V37, V38, V39) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V51)) end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V55, V56, V57, V58)) end end end end end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V60)) end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V63, V64, V65)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V66, V67)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V68) -> ('un--findImplicits'(V68)) end, V39)) end(E36, E37, E38)); {'Idris.TTImp.TTImp.IDelayed', E39, E40, E41} -> (fun (V69, V70, V71) -> ('un--findImplicits'(V71)) end(E39, E40, E41)); {'Idris.TTImp.TTImp.IDelay', E42, E43} -> (fun (V72, V73) -> ('un--findImplicits'(V73)) end(E42, E43)); {'Idris.TTImp.TTImp.IForce', E44, E45} -> (fun (V74, V75) -> ('un--findImplicits'(V75)) end(E44, E45)); {'Idris.TTImp.TTImp.IQuote', E46, E47} -> (fun (V76, V77) -> ('un--findImplicits'(V77)) end(E46, E47)); {'Idris.TTImp.TTImp.IUnquote', E48, E49} -> (fun (V78, V79) -> ('un--findImplicits'(V79)) end(E48, E49)); {'Idris.TTImp.TTImp.IRunElab', E50, E51} -> (fun (V80, V81) -> ('un--findImplicits'(V81)) end(E50, E51)); {'Idris.TTImp.TTImp.IBindVar', E52, E53} -> (fun (V82, V83) -> [V83 | []] end(E52, E53)); _ -> [] end.
'un--findIBinds'(V0) -> case V0 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V5)), ('un--findIBinds'(V6)))) end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V7, V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V11)), ('un--findIBinds'(V12)))) end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IApp', E12, E13, E14} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V14)), ('un--findIBinds'(V15)))) end(E12, E13, E14)); {'Idris.TTImp.TTImp.IAutoApp', E15, E16, E17} -> (fun (V16, V17, V18) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V17)), ('un--findIBinds'(V18)))) end(E15, E16, E17)); {'Idris.TTImp.TTImp.INamedApp', E18, E19, E20, E21} -> (fun (V19, V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V20)), ('un--findIBinds'(V22)))) end(E18, E19, E20, E21)); {'Idris.TTImp.TTImp.IWithApp', E22, E23, E24} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--findIBinds'(V24)), ('un--findIBinds'(V25)))) end(E22, E23, E24)); {'Idris.TTImp.TTImp.IAs', E25, E26, E27, E28, E29} -> (fun (V26, V27, V28, V29, V30) -> case V29 of {'Idris.Core.Name.UN', E30} -> (fun (V31) -> case V31 of {'Idris.Core.Name.Basic', E31} -> (fun (V32) -> [V32 | ('un--findIBinds'(V30))] end(E31)); _ -> ('un--findIBinds'(V30)) end end(E30)); _ -> ('un--findIBinds'(V30)) end end(E25, E26, E27, E28, E29)); {'Idris.TTImp.TTImp.IMustUnify', E32, E33, E34} -> (fun (V33, V34, V35) -> ('un--findIBinds'(V35)) end(E32, E33, E34)); {'Idris.TTImp.TTImp.IAlternative', E35, E36, E37} -> (fun (V36, V37, V38) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V46, V47, V48)) end end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V50)) end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V54, V55, V56, V57)) end end end end end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V59)) end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V62, V63, V64)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V65, V66)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V67) -> ('un--findIBinds'(V67)) end, V38)) end(E35, E36, E37)); {'Idris.TTImp.TTImp.IDelayed', E38, E39, E40} -> (fun (V68, V69, V70) -> ('un--findIBinds'(V70)) end(E38, E39, E40)); {'Idris.TTImp.TTImp.IDelay', E41, E42} -> (fun (V71, V72) -> ('un--findIBinds'(V72)) end(E41, E42)); {'Idris.TTImp.TTImp.IForce', E43, E44} -> (fun (V73, V74) -> ('un--findIBinds'(V74)) end(E43, E44)); {'Idris.TTImp.TTImp.IQuote', E45, E46} -> (fun (V75, V76) -> ('un--findIBinds'(V76)) end(E45, E46)); {'Idris.TTImp.TTImp.IUnquote', E47, E48} -> (fun (V77, V78) -> ('un--findIBinds'(V78)) end(E47, E48)); {'Idris.TTImp.TTImp.IRunElab', E49, E50} -> (fun (V79, V80) -> ('un--findIBinds'(V80)) end(E49, E50)); {'Idris.TTImp.TTImp.IBindHere', E51, E52, E53} -> (fun (V81, V82, V83) -> ('un--findIBinds'(V83)) end(E51, E52, E53)); {'Idris.TTImp.TTImp.IBindVar', E54, E55} -> (fun (V84, V85) -> [V85 | []] end(E54, E55)); _ -> [] end.
'un--definedInBlock'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V28, V29)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V30) -> ('nested--10819-13670--in--un--defName'(V1, V0, V0, V30)) end, V1)).
'un--apply'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> begin (V4 = ('un--getFC'(V0))), ('un--apply'({'Idris.TTImp.TTImp.IApp', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V4 end, ('Idris.Idris2.Core.FC':'un--mergeFC'(V4, ('un--getFC'(V2)))))), V0, V2}, V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--RawImp'() -> {'Idris.TTImp.TTImp.RawImp\x{27}', {'Idris.Core.Name.Name'}}.
'un--ImpTy'() -> {'Idris.TTImp.TTImp.ImpTy\x{27}', {'Idris.Core.Name.Name'}}.
'un--ImpRecord'() -> {'Idris.TTImp.TTImp.ImpRecord\x{27}', {'Idris.Core.Name.Name'}}.
'un--ImpParameter\x{27}'(V0) -> {'Idris.Builtin.Pair', {'Idris.Core.Name.Name'}, {'Idris.Builtin.Pair', ('Idris.Idris2.Algebra':'un--RigCount'()), {'Idris.Builtin.Pair', {'Idris.Core.TT.PiInfo', {'Idris.TTImp.TTImp.RawImp\x{27}', V0}}, {'Idris.TTImp.TTImp.RawImp\x{27}', V0}}}}.
'un--ImpDecl'() -> {'Idris.TTImp.TTImp.ImpDecl\x{27}', {'Idris.Core.Name.Name'}}.
'un--ImpData'() -> {'Idris.TTImp.TTImp.ImpData\x{27}', {'Idris.Core.Name.Name'}}.
'un--ImpClause'() -> {'Idris.TTImp.TTImp.ImpClause\x{27}', {'Idris.Core.Name.Name'}}.
'un--IRawImp'() -> {'Idris.TTImp.TTImp.RawImp\x{27}', {'Idris.Core.TT.KindedName'}}.
'un--IImpClause'() -> {'Idris.TTImp.TTImp.ImpClause\x{27}', {'Idris.Core.TT.KindedName'}}.
'un--IFieldUpdate'() -> {'Idris.TTImp.TTImp.IFieldUpdate\x{27}', {'Idris.Core.Name.Name'}}.
'un--IField'() -> {'Idris.TTImp.TTImp.IField\x{27}', {'Idris.Core.Name.Name'}}.
'un--FnOpt'() -> {'Idris.TTImp.TTImp.FnOpt\x{27}', {'Idris.Core.Name.Name'}}.
'un--AltType'() -> {'Idris.TTImp.TTImp.AltType\x{27}', {'Idris.Core.Name.Name'}}.
