-module('Idris.Idris2.Control.Monad.Error.Either').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in <|>-2001'/6,
  'case--<|>-1971'/4,
  'case--<+>-1195'/4,
  'case--max-965'/4,
  'case--min-920'/4,
  'dn--un--traverse_Traversable_((EitherT $e) $m)'/4,
  'dn--un--toList_Foldable_((EitherT $e) $m)'/2,
  'dn--un--show_Show_(((EitherT $e) $m) $a)'/2,
  'dn--un--showPrec_Show_(((EitherT $e) $m) $a)'/3,
  'dn--un--pure_Applicative_((EitherT $e) $m)'/2,
  'dn--un--null_Foldable_((EitherT $e) $m)'/2,
  'dn--un--min_Ord_(((EitherT $e) $m) $a)'/3,
  'dn--un--max_Ord_(((EitherT $e) $m) $a)'/3,
  'dn--un--map_Functor_((EitherT $e) $m)'/3,
  'dn--un--lift_MonadTrans_(EitherT $e)'/2,
  'dn--un--liftIO_HasIO_((EitherT $e) $m)'/2,
  'dn--un--join_Monad_((EitherT $e) $m)'/2,
  'dn--un--foldr_Foldable_((EitherT $e) $m)'/4,
  'dn--un--foldl_Foldable_((EitherT $e) $m)'/4,
  'dn--un--foldlM_Foldable_((EitherT $e) $m)'/5,
  'dn--un--foldMap_Foldable_((EitherT $e) $m)'/4,
  'dn--un--empty_Alternative_((EitherT $e) $m)'/1,
  'dn--un--compare_Ord_(((EitherT $e) $m) $a)'/3,
  'dn--un--__Impl_Traversable_((EitherT $e) $m)'/1,
  'dn--un--__Impl_Show_(((EitherT $e) $m) $a)'/1,
  'dn--un--__Impl_Semigroup_(((EitherT $e) $m) $a)'/3,
  'dn--un--__Impl_Ord_(((EitherT $e) $m) $a)'/1,
  'dn--un--__Impl_Monad_((EitherT $e) $m)'/1,
  'dn--un--__Impl_MonadTrans_(EitherT $e)'/4,
  'dn--un--__Impl_HasIO_((EitherT $e) $m)'/1,
  'dn--un--__Impl_Functor_((EitherT $e) $m)'/5,
  'dn--un--__Impl_Foldable_((EitherT $e) $m)'/1,
  'dn--un--__Impl_Eq_(((EitherT $e) $m) $a)'/1,
  'dn--un--__Impl_Applicative_((EitherT $e) $m)'/1,
  'dn--un--__Impl_Alternative_((EitherT $e) $m)'/1,
  'dn--un-->_Ord_(((EitherT $e) $m) $a)'/3,
  'dn--un-->>=_Monad_((EitherT $e) $m)'/3,
  'dn--un-->=_Ord_(((EitherT $e) $m) $a)'/3,
  'dn--un--==_Eq_(((EitherT $e) $m) $a)'/3,
  'dn--un--<|>_Alternative_((EitherT $e) $m)'/3,
  'dn--un--<_Ord_(((EitherT $e) $m) $a)'/3,
  'dn--un--<=_Ord_(((EitherT $e) $m) $a)'/3,
  'dn--un--<+>_Semigroup_(((EitherT $e) $m) $a)'/3,
  'dn--un--<*>_Applicative_((EitherT $e) $m)'/3,
  'dn--un--/=_Eq_(((EitherT $e) $m) $a)'/3,
  'un--throwE'/2,
  'un--swapEitherT'/2,
  'un--runEitherT'/1,
  'un--right'/2,
  'un--mapEitherT'/2,
  'un--left'/2,
  'un--eitherT'/4,
  'un--catchE'/3,
  'un--bimapEitherT'/4
]).
'case--case block in <|>-2001'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E1, E2, E3} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E4, E5, E6} -> (fun (V10, V11, V12) -> ((V11('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E7, E8} -> (fun (V13, V14) -> ((V13(V3))(V6)) end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V19, V20, V21) -> ((V20('erased'))({'Idris.Prelude.Types.Right', V15})) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--<|>-1971'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E1, E2, E3} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))((V2())))(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E5, E6, E7} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E8, E9, E10} -> (fun (V13, V14, V15) -> ((V14('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E11, E12} -> (fun (V16, V17) -> ((V16(V4))(V9)) end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Right', E13} -> (fun (V18) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V19, V20, V21) -> case V19 of {'Idris.Prelude.Interfaces.MkApplicative', E17, E18, E19} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Prelude.Types.Right', V18})) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Right', E20} -> (fun (V25) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E21, E22, E23} -> (fun (V26, V27, V28) -> case V26 of {'Idris.Prelude.Interfaces.MkApplicative', E24, E25, E26} -> (fun (V29, V30, V31) -> ((V30('erased'))({'Idris.Prelude.Types.Right', V25})) end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--<+>-1195'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E1, E2, E3} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E4, E5, E6} -> (fun (V8, V9, V10) -> ((V9('erased'))(V3)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E7} -> (fun (V11) -> V2 end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-965'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-920'(V0, V1, V2, V3) -> case V3 of 1 -> V2; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--traverse_Traversable_((EitherT $e) $m)'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V1 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V4, V5, V6) -> V4 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V7) -> V7 end, case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E3, E4, E5} -> (fun (V8, V9, V10) -> ((((((V10('erased'))('erased'))('erased'))(V1))(fun (V11) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V12) -> case V1 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))({'Idris.Prelude.Types.Left', V12})) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun () -> fun (V16) -> case V1 of {'Idris.Prelude.Interfaces.MkApplicative', E9, E10, E11} -> (fun (V17, V18, V19) -> ((((V17('erased'))('erased'))(fun (V20) -> {'Idris.Prelude.Types.Right', V20} end))((V2(V16)))) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V11)) end))(V3)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--toList_Foldable_((EitherT $e) $m)'(V0, V1) -> ('dn--un--foldr_Foldable_((EitherT $e) $m)'(V0, fun (V2) -> fun (V3) -> [V2 | V3] end end, [], V1)).
'dn--un--show_Show_(((EitherT $e) $m) $a)'(V0, V1) -> ('dn--un--showPrec_Show_(((EitherT $e) $m) $a)'(V0, {'Idris.Prelude.Show.Open'}, V1)).
'dn--un--showPrec_Show_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V1, <<"MkEitherT"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'(V0, V2)))).
'dn--un--pure_Applicative_((EitherT $e) $m)'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V3('erased'))({'Idris.Prelude.Types.Right', V1})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--null_Foldable_((EitherT $e) $m)'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkFoldable', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> ((V4('erased'))(V1)) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2) -> case ('dn--un--<_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2) -> case ('dn--un-->_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2)) of 1 -> V1; 0 -> V2; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_((EitherT $e) $m)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(V0, fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V1(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)).
'dn--un--lift_MonadTrans_(EitherT $e)'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V2, V3, V4) -> case V2 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V5, V6, V7) -> ((((V5('erased'))('erased'))(fun (V8) -> {'Idris.Prelude.Types.Right', V8} end))(V1)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--liftIO_HasIO_((EitherT $e) $m)'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> begin (V5 = (V1(V4))), {'Idris.Prelude.Types.Right', V5} end end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_((EitherT $e) $m)'(V0, V1) -> ('dn--un-->>=_Monad_((EitherT $e) $m)'(V0, V1, fun (V2) -> V2 end)).
'dn--un--foldr_Foldable_((EitherT $e) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkFoldable', E0, E1, E2, E3, E4, E5} -> (fun (V4, V5, V6, V7, V8, V9) -> (((((V4('erased'))('erased'))(fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V12) -> V11 end end, fun () -> fun (V13) -> ((V1(V13))(V11)) end end, V10)) end end))(V2))(V3)) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldl_Foldable_((EitherT $e) $m)'(V0, V1, V2, V3) -> (('dn--un--foldr_Foldable_((EitherT $e) $m)'(V0, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V6) -> fun (V7) -> fun (V8) -> (V6((V7(V8)))) end end end, fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V4, V9)) end, V5)) end end, fun (V10) -> V10 end, V3))(V2)).
'dn--un--foldlM_Foldable_((EitherT $e) $m)'(V0, V1, V2, V3, V4) -> ('dn--un--foldl_Foldable_((EitherT $e) $m)'(V0, fun (V5) -> fun (V6) -> case V1 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(V5))(fun (V10) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(V2, V6, V10)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V1 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V14, V15, V16) -> ((V15('erased'))(V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)).
'dn--un--foldMap_Foldable_((EitherT $e) $m)'(V0, V1, V2, V3) -> ('dn--un--foldr_Foldable_((EitherT $e) $m)'(V0, fun (V4) -> fun (V5) -> case V1 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V6, V7) -> ((V6((V2(V4))))(V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V1 of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V8, V9) -> V9 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)).
'dn--un--empty_Alternative_((EitherT $e) $m)'(V0) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V1, V2, V3) -> case V1 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V4, V5, V6) -> ((V5('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E6, E7} -> (fun (V7, V8) -> V8 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--on'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12) -> ((V6(V3))(V4)) end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V13) -> V13 end, V1, V2)).
'dn--un--__Impl_Traversable_((EitherT $e) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkTraversable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--foldr_Foldable_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E3, E4, E5} -> (fun (V13, V14, V15) -> V14 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10, V11, V12)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--foldl_Foldable_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E6, E7, E8} -> (fun (V21, V22, V23) -> V22 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18, V19, V20)) end end end end end, fun (V24) -> fun (V25) -> ('dn--un--null_Foldable_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E9, E10, E11} -> (fun (V26, V27, V28) -> V27 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V25)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--foldlM_Foldable_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E12, E13, E14} -> (fun (V36, V37, V38) -> V37 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V32, V33, V34, V35)) end end end end end end end, fun (V39) -> fun (V40) -> ('dn--un--toList_Foldable_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E15, E16, E17} -> (fun (V41, V42, V43) -> V42 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V40)) end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('dn--un--foldMap_Foldable_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkTraversable', E18, E19, E20} -> (fun (V49, V50, V51) -> V50 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46, V47, V48)) end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('dn--un--traverse_Traversable_((EitherT $e) $m)'(V0, V55, V56, V57)) end end end end end end}.
'dn--un--__Impl_Show_(((EitherT $e) $m) $a)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(((EitherT $e) $m) $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(((EitherT $e) $m) $a)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Semigroup_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('dn--un--<+>_Semigroup_(((EitherT $e) $m) $a)'(V0, V1, V2)).
'dn--un--__Impl_Ord_(((EitherT $e) $m) $a)'(V0) -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(((EitherT $e) $m) $a)'(case V0 of {'Idris.Prelude.EqOrd.MkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2)) end end, fun (V11) -> fun (V12) -> ('dn--un--/=_Eq_(((EitherT $e) $m) $a)'(case V0 of {'Idris.Prelude.EqOrd.MkOrd', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20) -> V13 end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11, V12)) end end}, fun (V21) -> fun (V22) -> ('dn--un--compare_Ord_(((EitherT $e) $m) $a)'(V0, V21, V22)) end end, fun (V23) -> fun (V24) -> ('dn--un--<_Ord_(((EitherT $e) $m) $a)'(V0, V23, V24)) end end, fun (V25) -> fun (V26) -> ('dn--un-->_Ord_(((EitherT $e) $m) $a)'(V0, V25, V26)) end end, fun (V27) -> fun (V28) -> ('dn--un--<=_Ord_(((EitherT $e) $m) $a)'(V0, V27, V28)) end end, fun (V29) -> fun (V30) -> ('dn--un-->=_Ord_(((EitherT $e) $m) $a)'(V0, V29, V30)) end end, fun (V31) -> fun (V32) -> ('dn--un--max_Ord_(((EitherT $e) $m) $a)'(V0, V31, V32)) end end, fun (V33) -> fun (V34) -> ('dn--un--min_Ord_(((EitherT $e) $m) $a)'(V0, V33, V34)) end end}.
'dn--un--__Impl_Monad_((EitherT $e) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V11) -> fun (V12) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E6, E7, E8} -> (fun (V13, V14, V15) -> V13 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V20, V21, V22) -> V20 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18, V19)) end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un-->>=_Monad_((EitherT $e) $m)'(V0, V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('dn--un--join_Monad_((EitherT $e) $m)'(V0, V28)) end end}.
'dn--un--__Impl_MonadTrans_(EitherT $e)'(V0, V1, V2, V3) -> ('dn--un--lift_MonadTrans_(EitherT $e)'(V2, V3)).
'dn--un--__Impl_HasIO_((EitherT $e) $m)'(V0) -> {'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> V10 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V13) -> fun (V14) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V17, V18, V19) -> V17 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14)) end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V24, V25) -> case V24 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V26, V27, V28) -> V26 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22, V23)) end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('dn--un-->>=_Monad_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E18, E19} -> (fun (V33, V34) -> V33 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V31, V32)) end end end end, fun (V35) -> fun (V36) -> ('dn--un--join_Monad_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E20, E21} -> (fun (V37, V38) -> V37 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V36)) end end}, fun (V39) -> fun (V40) -> ('dn--un--liftIO_HasIO_((EitherT $e) $m)'(V0, V40)) end end}.
'dn--un--__Impl_Functor_((EitherT $e) $m)'(V0, V1, V2, V3, V4) -> ('dn--un--map_Functor_((EitherT $e) $m)'(V0, V3, V4)).
'dn--un--__Impl_Foldable_((EitherT $e) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--foldr_Foldable_((EitherT $e) $m)'(V0, V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--foldl_Foldable_((EitherT $e) $m)'(V0, V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('dn--un--null_Foldable_((EitherT $e) $m)'(V0, V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--foldlM_Foldable_((EitherT $e) $m)'(V0, V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('dn--un--toList_Foldable_((EitherT $e) $m)'(V0, V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--foldMap_Foldable_((EitherT $e) $m)'(V0, V24, V25, V26)) end end end end end}.
'dn--un--__Impl_Eq_(((EitherT $e) $m) $a)'(V0) -> {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('dn--un--==_Eq_(((EitherT $e) $m) $a)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--/=_Eq_(((EitherT $e) $m) $a)'(V0, V3, V4)) end end}.
'dn--un--__Impl_Applicative_((EitherT $e) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_((EitherT $e) $m)'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V5, V6, V7) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V8) -> fun (V9) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'(V0, V9)) end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'(V0, V12, V13)) end end end end}.
'dn--un--__Impl_Alternative_((EitherT $e) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_((EitherT $e) $m)'(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end end end, fun (V11) -> fun (V12) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E6, E7, E8} -> (fun (V13, V14, V15) -> V13 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V20, V21, V22) -> V20 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18, V19)) end end end end}, fun (V23) -> ('dn--un--empty_Alternative_((EitherT $e) $m)'(V0)) end, fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--<|>_Alternative_((EitherT $e) $m)'(V0, V25, V26)) end end end}.
'dn--un-->_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2)), 2)).
'dn--un-->>=_Monad_((EitherT $e) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(V1))(fun (V6) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V7) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V11, V12, V13) -> ((V12('erased'))({'Idris.Prelude.Types.Left', V7})) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun () -> fun (V14) -> (V2(V14)) end end, V6)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un-->=_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2)), 0)).
'dn--un--==_Eq_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--on'(fun (V3) -> fun (V4) -> case V0 of {'Idris.Prelude.EqOrd.MkEq', E0, E1} -> (fun (V5, V6) -> ((V5(V3))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V7) -> V7 end, V1, V2)).
'dn--un--<|>_Alternative_((EitherT $e) $m)'(V0, V1, V2) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(V1))(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))((V2())))(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V16, V17, V18) -> ((V17('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E14, E15} -> (fun (V19, V20) -> ((V19(V7))(V12)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); {'Idris.Prelude.Types.Right', E16} -> (fun (V21) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V25, V26, V27) -> ((V26('erased'))({'Idris.Prelude.Types.Right', V21})) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Right', E23} -> (fun (V28) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E24, E25, E26} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Prelude.Interfaces.MkApplicative', E27, E28, E29} -> (fun (V32, V33, V34) -> ((V33('erased'))({'Idris.Prelude.Types.Right', V28})) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2)), 0)).
'dn--un--<=_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2)), 2)).
'dn--un--<+>_Semigroup_(((EitherT $e) $m) $a)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(V1))(fun (V6) -> case V6 of {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E4, E5, E6} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E7, E8, E9} -> (fun (V11, V12, V13) -> ((V12('erased'))(V6)) end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Left', E10} -> (fun (V14) -> V2 end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<*>_Applicative_((EitherT $e) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V3, V4, V5) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V6, V7, V8) -> ((((V8('erased'))('erased'))(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V9, V10, V11) -> ((V10('erased'))(fun (V12) -> fun (V13) -> case V12 of {'Idris.Prelude.Types.Left', E9} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V15) -> case V13 of {'Idris.Prelude.Types.Right', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Right', (V15(V16))} end(E11)); {'Idris.Prelude.Types.Left', E12} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(((EitherT $e) $m) $a)'(V0, V1, V2) -> case ('dn--un--==_Eq_(((EitherT $e) $m) $a)'(V0, V1, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--throwE'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V3('erased'))({'Idris.Prelude.Types.Left', V1})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--swapEitherT'(V0, V1) -> ((((V0('erased'))('erased'))(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', V3} end end, fun () -> fun (V4) -> {'Idris.Prelude.Types.Left', V4} end end, V2)) end))(V1)).
'un--runEitherT'(V0) -> V0.
'un--right'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V3('erased'))({'Idris.Prelude.Types.Right', V1})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapEitherT'(V0, V1) -> (V0(V1)).
'un--left'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V3('erased'))({'Idris.Prelude.Types.Left', V1})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--eitherT'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(V3))(fun (V7) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> V1 end, fun () -> V2 end, V7)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--catchE'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(V1))(fun (V6) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V7) -> (V2(V7)) end end, fun () -> fun (V8) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E6, E7, E8} -> (fun (V12, V13, V14) -> ((V13('erased'))({'Idris.Prelude.Types.Right', V8})) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V6)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bimapEitherT'(V0, V1, V2, V3) -> ((((V0('erased'))('erased'))(fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V5) -> {'Idris.Prelude.Types.Left', (V1(V5))} end end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', (V2(V6))} end end, V4)) end))(V3)).
