-module('Idris.Idris2.Core.TTC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--11825-6474--in--un--fromBuf3'/3,
  'nested--11825-6473--in--un--fromBuf2'/3,
  'nested--11825-6472--in--un--fromBuf1'/3,
  'nested--16244-10441--in--un--cwName'/3,
  'dn--un--toBuf_TTC_Visibility'/3,
  'dn--un--toBuf_TTC_VirtualIdent'/3,
  'dn--un--toBuf_TTC_UseSide'/3,
  'dn--un--toBuf_TTC_TypeFlags'/3,
  'dn--un--toBuf_TTC_Transform'/3,
  'dn--un--toBuf_TTC_Totality'/3,
  'dn--un--toBuf_TTC_TotalReq'/3,
  'dn--un--toBuf_TTC_Terminating'/3,
  'dn--un--toBuf_TTC_SizeChange'/3,
  'dn--un--toBuf_TTC_SCCall'/3,
  'dn--un--toBuf_TTC_RigCount'/2,
  'dn--un--toBuf_TTC_RewriteNames'/3,
  'dn--un--toBuf_TTC_PrimNames'/3,
  'dn--un--toBuf_TTC_Pat'/3,
  'dn--un--toBuf_TTC_PartialReason'/3,
  'dn--un--toBuf_TTC_PairNames'/3,
  'dn--un--toBuf_TTC_PMDefInfo'/3,
  'dn--un--toBuf_TTC_OriginDesc'/3,
  'dn--un--toBuf_TTC_Namespace'/3,
  'dn--un--toBuf_TTC_NameType'/3,
  'dn--un--toBuf_TTC_Name'/3,
  'dn--un--toBuf_TTC_ModuleIdent'/3,
  'dn--un--toBuf_TTC_LazyReason'/3,
  'dn--un--toBuf_TTC_HoleInfo'/3,
  'dn--un--toBuf_TTC_GlobalDef'/3,
  'dn--un--toBuf_TTC_FC'/3,
  'dn--un--toBuf_TTC_DefFlag'/3,
  'dn--un--toBuf_TTC_Def'/3,
  'dn--un--toBuf_TTC_Covering'/3,
  'dn--un--toBuf_TTC_Constant'/3,
  'dn--un--toBuf_TTC_ConInfo'/3,
  'dn--un--toBuf_TTC_CG'/3,
  'dn--un--toBuf_TTC_CFType'/3,
  'dn--un--toBuf_TTC_CDef'/3,
  'dn--un--toBuf_TTC_(Term $vars)'/3,
  'dn--un--toBuf_TTC_(PrimFn $n)'/3,
  'dn--un--toBuf_TTC_(PiInfo $t)'/4,
  'dn--un--toBuf_TTC_(CaseTree $vars)'/4,
  'dn--un--toBuf_TTC_(CaseAlt $vars)'/4,
  'dn--un--toBuf_TTC_(CExp $vars)'/4,
  'dn--un--toBuf_TTC_(CConstAlt $vars)'/4,
  'dn--un--toBuf_TTC_(CConAlt $vars)'/4,
  'dn--un--toBuf_TTC_(Binder (Term $vars))'/4,
  'dn--un--toBuf_TTC_((Env Term) $vars)'/4,
  'dn--un--fromBuf_TTC_Visibility'/2,
  'dn--un--fromBuf_TTC_VirtualIdent'/2,
  'dn--un--fromBuf_TTC_UseSide'/2,
  'dn--un--fromBuf_TTC_TypeFlags'/2,
  'dn--un--fromBuf_TTC_Transform'/2,
  'dn--un--fromBuf_TTC_Totality'/2,
  'dn--un--fromBuf_TTC_TotalReq'/2,
  'dn--un--fromBuf_TTC_Terminating'/2,
  'dn--un--fromBuf_TTC_SizeChange'/2,
  'dn--un--fromBuf_TTC_SCCall'/2,
  'dn--un--fromBuf_TTC_RigCount'/2,
  'dn--un--fromBuf_TTC_RewriteNames'/2,
  'dn--un--fromBuf_TTC_PrimNames'/2,
  'dn--un--fromBuf_TTC_Pat'/2,
  'dn--un--fromBuf_TTC_PartialReason'/2,
  'dn--un--fromBuf_TTC_PairNames'/2,
  'dn--un--fromBuf_TTC_PMDefInfo'/2,
  'dn--un--fromBuf_TTC_OriginDesc'/2,
  'dn--un--fromBuf_TTC_Namespace'/2,
  'dn--un--fromBuf_TTC_NameType'/2,
  'dn--un--fromBuf_TTC_Name'/2,
  'dn--un--fromBuf_TTC_ModuleIdent'/2,
  'dn--un--fromBuf_TTC_LazyReason'/2,
  'dn--un--fromBuf_TTC_HoleInfo'/2,
  'dn--un--fromBuf_TTC_GlobalDef'/2,
  'dn--un--fromBuf_TTC_FC'/2,
  'dn--un--fromBuf_TTC_DefFlag'/2,
  'dn--un--fromBuf_TTC_Def'/2,
  'dn--un--fromBuf_TTC_Covering'/2,
  'dn--un--fromBuf_TTC_Constant'/2,
  'dn--un--fromBuf_TTC_ConInfo'/2,
  'dn--un--fromBuf_TTC_CG'/2,
  'dn--un--fromBuf_TTC_CFType'/2,
  'dn--un--fromBuf_TTC_CDef'/2,
  'dn--un--fromBuf_TTC_(Term $vars)'/3,
  'dn--un--fromBuf_TTC_(PrimFn $n)'/2,
  'dn--un--fromBuf_TTC_(PiInfo $t)'/3,
  'dn--un--fromBuf_TTC_(CaseTree $vars)'/3,
  'dn--un--fromBuf_TTC_(CaseAlt $vars)'/3,
  'dn--un--fromBuf_TTC_(CExp $vars)'/3,
  'dn--un--fromBuf_TTC_(CConstAlt $vars)'/3,
  'dn--un--fromBuf_TTC_(CConAlt $vars)'/3,
  'dn--un--fromBuf_TTC_(Binder (Term $vars))'/3,
  'dn--un--fromBuf_TTC_((Env Term) $vars)'/3,
  'dn--un--__Impl_TTC_Visibility'/0,
  'dn--un--__Impl_TTC_VirtualIdent'/0,
  'dn--un--__Impl_TTC_UseSide'/0,
  'dn--un--__Impl_TTC_TypeFlags'/0,
  'dn--un--__Impl_TTC_Transform'/0,
  'dn--un--__Impl_TTC_Totality'/0,
  'dn--un--__Impl_TTC_TotalReq'/0,
  'dn--un--__Impl_TTC_Terminating'/0,
  'dn--un--__Impl_TTC_SizeChange'/0,
  'dn--un--__Impl_TTC_SCCall'/0,
  'dn--un--__Impl_TTC_RigCount'/0,
  'dn--un--__Impl_TTC_RewriteNames'/0,
  'dn--un--__Impl_TTC_PrimNames'/0,
  'dn--un--__Impl_TTC_Pat'/0,
  'dn--un--__Impl_TTC_PartialReason'/0,
  'dn--un--__Impl_TTC_PairNames'/0,
  'dn--un--__Impl_TTC_PMDefInfo'/0,
  'dn--un--__Impl_TTC_OriginDesc'/0,
  'dn--un--__Impl_TTC_Namespace'/0,
  'dn--un--__Impl_TTC_NameType'/0,
  'dn--un--__Impl_TTC_Name'/0,
  'dn--un--__Impl_TTC_ModuleIdent'/0,
  'dn--un--__Impl_TTC_LazyReason'/0,
  'dn--un--__Impl_TTC_HoleInfo'/0,
  'dn--un--__Impl_TTC_GlobalDef'/0,
  'dn--un--__Impl_TTC_FC'/0,
  'dn--un--__Impl_TTC_Def'/0,
  'dn--un--__Impl_TTC_Covering'/0,
  'dn--un--__Impl_TTC_Constant'/0,
  'dn--un--__Impl_TTC_ConInfo'/0,
  'dn--un--__Impl_TTC_CG'/0,
  'dn--un--__Impl_TTC_CFType'/0,
  'dn--un--__Impl_TTC_CDef'/0,
  'dn--un--__Impl_TTC_(Term $vars)'/1,
  'dn--un--__Impl_TTC_(PrimFn $n)'/1,
  'dn--un--__Impl_TTC_(PiInfo $t)'/1,
  'dn--un--__Impl_TTC_(CaseTree $vars)'/1,
  'dn--un--__Impl_TTC_(CaseAlt $vars)'/1,
  'dn--un--__Impl_TTC_(CExp $vars)'/1,
  'dn--un--__Impl_TTC_(CConstAlt $vars)'/1,
  'dn--un--__Impl_TTC_(CConAlt $vars)'/1,
  'dn--un--__Impl_TTC_(Binder (Term $vars))'/1,
  'dn--un--__Impl_TTC_((Env Term) $vars)'/1,
  'un--getName'/2
]).
'nested--11825-6474--in--un--fromBuf3'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 18 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrSubstr'}}; 100 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BelieveMe'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"PrimFn 3"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11825-6473--in--un--fromBuf2'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V6 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Add', V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V9 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Sub', V11}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V12 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Mul', V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V15 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Div', V17}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V18 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Mod', V20}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V21 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.LT', V23}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V24 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.LTE', V26}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V27 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V27 of {'Idris.Prelude.Types.Left', E16} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.EQ', V29}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> begin (V30 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V30 of {'Idris.Prelude.Types.Left', E18} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.GTE', V32}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 10 -> begin (V33 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V33 of {'Idris.Prelude.Types.Left', E20} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.GT', V35}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 14 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrIndex'}}; 15 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrCons'}}; 16 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrAppend'}}; 21 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoublePow'}}; 35 -> begin (V36 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.ShiftL', V38}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 36 -> begin (V39 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V39 of {'Idris.Prelude.Types.Left', E24} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.ShiftR', V41}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 37 -> begin (V42 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V42 of {'Idris.Prelude.Types.Left', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BAnd', V44}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 38 -> begin (V45 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BOr', V47}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 39 -> begin (V48 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BXOr', V50}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 101 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Crash'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"PrimFn 2"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11825-6472--in--un--fromBuf1'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 5 -> begin (V6 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Neg', V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 11 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrLength'}}; 12 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrHead'}}; 13 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrTail'}}; 17 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StrReverse'}}; 19 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleExp'}}; 20 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleLog'}}; 22 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleSin'}}; 23 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleCos'}}; 24 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleTan'}}; 25 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleASin'}}; 26 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleACos'}}; 27 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleATan'}}; 32 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleSqrt'}}; 33 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleFloor'}}; 34 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleCeiling'}}; 99 -> begin (V9 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('dn--un--fromBuf_TTC_Constant'(V0, V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Cast', V11, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"PrimFn 1"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--16244-10441--in--un--cwName'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.CaseBlock', E0, E1} -> (fun (V3, V4) -> 1 end(E0, E1)); {'Idris.Core.Name.WithBlock', E2, E3} -> (fun (V5, V6) -> 1 end(E2, E3)); _ -> 0 end.
'dn--un--toBuf_TTC_Visibility'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_VirtualIdent'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_UseSide'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_TypeFlags'(V0, V1, V2) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, case V1 of {'Idris.Core.Context.Context.MkTypeFlags', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, case V1 of {'Idris.Core.Context.Context.MkTypeFlags', E4, E5} -> (fun (V8, V9) -> V9 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_Transform'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--toBuf_TTC_Name'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> ('dn--un--fromBuf_TTC_Name'(V11, V12)) end end}, V0, V3, V2))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V16 = ('dn--un--toBuf_TTC_Name'(V0, V4, V2))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> begin (V19 = ('dn--un--toBuf_TTC_((Env Term) $vars)'(V3, V0, V5, V2))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> begin (V22 = (('dn--un--toBuf_TTC_(Term $vars)'(V3, V0, V6))(V2))), case V22 of {'Idris.Prelude.Types.Left', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V24) -> (('dn--un--toBuf_TTC_(Term $vars)'(V3, V0, V7))(V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Totality'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('dn--un--toBuf_TTC_Terminating'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> ('dn--un--toBuf_TTC_Covering'(V0, V4, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_TotalReq'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Terminating'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Unchecked'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.TT.IsTerminating'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); {'Idris.Core.TT.NotTerminating', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('dn--un--toBuf_TTC_PartialReason'(V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_SizeChange'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_SCCall'(V0, V1, V2) -> begin (V5 = ('dn--un--toBuf_TTC_Name'(V0, case V1 of {'Idris.Core.Context.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V14, V15, V16)) end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V17, V18)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--toBuf_TTC_SizeChange'(V19, V20, V21)) end end end, fun (V22) -> fun (V23) -> ('dn--un--fromBuf_TTC_SizeChange'(V22, V23)) end end}}, V11, V12, V13)) end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V26, V27, V28)) end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V29, V30)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V31) -> fun (V32) -> fun (V33) -> ('dn--un--toBuf_TTC_SizeChange'(V31, V32, V33)) end end end, fun (V34) -> fun (V35) -> ('dn--un--fromBuf_TTC_SizeChange'(V34, V35)) end end}}, V24, V25)) end end}, V8, V9, V10)) end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V44, V45)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('dn--un--toBuf_TTC_SizeChange'(V46, V47, V48)) end end end, fun (V49) -> fun (V50) -> ('dn--un--fromBuf_TTC_SizeChange'(V49, V50)) end end}}, V38, V39, V40)) end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V53, V54, V55)) end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V56, V57)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V58) -> fun (V59) -> fun (V60) -> ('dn--un--toBuf_TTC_SizeChange'(V58, V59, V60)) end end end, fun (V61) -> fun (V62) -> ('dn--un--fromBuf_TTC_SizeChange'(V61, V62)) end end}}, V51, V52)) end end}, V36, V37)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkSCCall', E4, E5} -> (fun (V63, V64) -> V64 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_RigCount'(V0, V1) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V2, V3)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V8, V9)) end end}}, fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V10)) end, fun (V11) -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V11)) end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V13)) end end, V1)).
'dn--un--toBuf_TTC_RewriteNames'(V0, V1, V2) -> begin (V5 = ('dn--un--toBuf_TTC_Name'(V0, case V1 of {'Idris.Core.Options.MkRewriteNs', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> ('dn--un--toBuf_TTC_Name'(V0, case V1 of {'Idris.Core.Options.MkRewriteNs', E4, E5} -> (fun (V8, V9) -> V9 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_PrimNames'(V0, V1, V2) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--toBuf_TTC_Name'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> ('dn--un--fromBuf_TTC_Name'(V6, V7)) end end}, V0, case V1 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> V8 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V24 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--toBuf_TTC_Name'(V15, V16, V17)) end end end, fun (V18) -> fun (V19) -> ('dn--un--fromBuf_TTC_Name'(V18, V19)) end end}, V0, case V1 of {'Idris.Core.Options.MkPrimNs', E6, E7, E8, E9} -> (fun (V20, V21, V22, V23) -> V21 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V24 of {'Idris.Prelude.Types.Left', E10} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V26) -> begin (V36 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--toBuf_TTC_Name'(V27, V28, V29)) end end end, fun (V30) -> fun (V31) -> ('dn--un--fromBuf_TTC_Name'(V30, V31)) end end}, V0, case V1 of {'Idris.Core.Options.MkPrimNs', E12, E13, E14, E15} -> (fun (V32, V33, V34, V35) -> V34 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V36 of {'Idris.Prelude.Types.Left', E16} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V39) -> fun (V40) -> fun (V41) -> ('dn--un--toBuf_TTC_Name'(V39, V40, V41)) end end end, fun (V42) -> fun (V43) -> ('dn--un--fromBuf_TTC_Name'(V42, V43)) end end}, V0, case V1 of {'Idris.Core.Options.MkPrimNs', E18, E19, E20, E21} -> (fun (V44, V45, V46, V47) -> V47 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_Pat'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V9 = ('dn--un--toBuf_TTC_FC'(V0, V3, V2))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = ('dn--un--toBuf_TTC_Name'(V0, V4, V2))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> ('dn--un--toBuf_TTC_Pat'(V0, V5, V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E9, E10, E11, E12, E13} -> (fun (V15, V16, V17, V18, V19) -> begin (V20 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V20 of {'Idris.Prelude.Types.Left', E14} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V22) -> begin (V23 = ('dn--un--toBuf_TTC_FC'(V0, V15, V2))), case V23 of {'Idris.Prelude.Types.Left', E16} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V25) -> begin (V26 = ('dn--un--toBuf_TTC_Name'(V0, V16, V2))), case V26 of {'Idris.Prelude.Types.Left', E18} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V17, V2))), case V29 of {'Idris.Prelude.Types.Left', E20} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V18, V2))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--toBuf_TTC_Pat'(V35, V36, V37)) end end end, fun (V38) -> fun (V39) -> ('dn--un--fromBuf_TTC_Pat'(V38, V39)) end end}, V0, V19, V2)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11, E12, E13)); {'Idris.Core.CaseTree.PTyCon', E24, E25, E26, E27} -> (fun (V40, V41, V42, V43) -> begin (V44 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> begin (V47 = ('dn--un--toBuf_TTC_FC'(V0, V40, V2))), case V47 of {'Idris.Prelude.Types.Left', E30} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V49) -> begin (V50 = ('dn--un--toBuf_TTC_Name'(V0, V41, V2))), case V50 of {'Idris.Prelude.Types.Left', E32} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V42, V2))), case V53 of {'Idris.Prelude.Types.Left', E34} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V55) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V56) -> fun (V57) -> fun (V58) -> ('dn--un--toBuf_TTC_Pat'(V56, V57, V58)) end end end, fun (V59) -> fun (V60) -> ('dn--un--fromBuf_TTC_Pat'(V59, V60)) end end}, V0, V43, V2)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25, E26, E27)); {'Idris.Core.CaseTree.PConst', E36, E37} -> (fun (V61, V62) -> begin (V63 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2))), case V63 of {'Idris.Prelude.Types.Left', E38} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V65) -> begin (V66 = ('dn--un--toBuf_TTC_FC'(V0, V61, V2))), case V66 of {'Idris.Prelude.Types.Left', E40} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V68) -> ('dn--un--toBuf_TTC_Constant'(V0, V62, V2)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37)); {'Idris.Core.CaseTree.PArrow', E42, E43, E44, E45} -> (fun (V69, V70, V71, V72) -> begin (V73 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2))), case V73 of {'Idris.Prelude.Types.Left', E46} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V75) -> begin (V76 = ('dn--un--toBuf_TTC_FC'(V0, V69, V2))), case V76 of {'Idris.Prelude.Types.Left', E48} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V78) -> begin (V79 = ('dn--un--toBuf_TTC_Name'(V0, V70, V2))), case V79 of {'Idris.Prelude.Types.Left', E50} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V81) -> begin (V82 = ('dn--un--toBuf_TTC_Pat'(V0, V71, V2))), case V82 of {'Idris.Prelude.Types.Left', E52} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V84) -> ('dn--un--toBuf_TTC_Pat'(V0, V72, V2)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43, E44, E45)); {'Idris.Core.CaseTree.PDelay', E54, E55, E56, E57} -> (fun (V85, V86, V87, V88) -> begin (V89 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2))), case V89 of {'Idris.Prelude.Types.Left', E58} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V91) -> begin (V92 = ('dn--un--toBuf_TTC_FC'(V0, V85, V2))), case V92 of {'Idris.Prelude.Types.Left', E60} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V94) -> begin (V95 = ('dn--un--toBuf_TTC_LazyReason'(V0, V86, V2))), case V95 of {'Idris.Prelude.Types.Left', E62} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V97) -> begin (V98 = ('dn--un--toBuf_TTC_Pat'(V0, V87, V2))), case V98 of {'Idris.Prelude.Types.Left', E64} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V100) -> ('dn--un--toBuf_TTC_Pat'(V0, V88, V2)) end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55, E56, E57)); {'Idris.Core.CaseTree.PLoc', E66, E67} -> (fun (V101, V102) -> begin (V103 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2))), case V103 of {'Idris.Prelude.Types.Left', E68} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V105) -> begin (V106 = ('dn--un--toBuf_TTC_FC'(V0, V101, V2))), case V106 of {'Idris.Prelude.Types.Left', E70} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V108) -> ('dn--un--toBuf_TTC_Name'(V0, V102, V2)) end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66, E67)); {'Idris.Core.CaseTree.PUnmatchable', E72, E73} -> (fun (V109, V110) -> begin (V111 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2))), case V111 of {'Idris.Prelude.Types.Left', E74} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V113) -> begin (V114 = ('dn--un--toBuf_TTC_FC'(V0, V109, V2))), case V114 of {'Idris.Prelude.Types.Left', E76} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V116) -> (('dn--un--toBuf_TTC_(Term $vars)'([], V0, V110))(V2)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_PartialReason'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--toBuf_TTC_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> ('dn--un--fromBuf_TTC_Name'(V10, V11)) end end}, V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--toBuf_TTC_Name'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> ('dn--un--fromBuf_TTC_Name'(V19, V20)) end end}, V0, V12, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_PairNames'(V0, V1, V2) -> begin (V6 = ('dn--un--toBuf_TTC_Name'(V0, case V1 of {'Idris.Core.Options.MkPairNs', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V12 = ('dn--un--toBuf_TTC_Name'(V0, case V1 of {'Idris.Core.Options.MkPairNs', E5, E6, E7} -> (fun (V9, V10, V11) -> V10 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> ('dn--un--toBuf_TTC_Name'(V0, case V1 of {'Idris.Core.Options.MkPairNs', E10, E11, E12} -> (fun (V15, V16, V17) -> V17 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_PMDefInfo'(V0, V1, V2) -> begin (V6 = ('dn--un--toBuf_TTC_HoleInfo'(V0, case V1 of {'Idris.Core.Context.Context.MkPMDefInfo', E0, E1, E2} -> (fun (V3, V4, V5) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, case V1 of {'Idris.Core.Context.Context.MkPMDefInfo', E5, E6, E7} -> (fun (V9, V10, V11) -> V10 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, case V1 of {'Idris.Core.Context.Context.MkPMDefInfo', E10, E11, E12} -> (fun (V15, V16, V17) -> V17 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_OriginDesc'(V0, V1, V2) -> case V1 of {'Idris.Core.FC.PhysicalIdrSrc', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('dn--un--toBuf_TTC_ModuleIdent'(V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.FC.PhysicalPkgSrc', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V7))(V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Core.FC.Virtual', E6} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> ('dn--un--toBuf_TTC_VirtualIdent'(V0, V11, V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Namespace'(V0, V1, V2) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V5, V6)) end end}, V0, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V1)), V2)).
'dn--un--toBuf_TTC_NameType'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Bound'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.TT.Func'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); {'Idris.Core.TT.DataCon', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V3, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V4, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.TT.TyCon', E6, E7} -> (fun (V11, V12) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V11, V2))), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V12, V2)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Name'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--toBuf_TTC_Namespace'(V0, V3, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('dn--un--toBuf_TTC_Name'(V0, V4, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.Name.UN', E6} -> (fun (V11) -> case V11 of {'Idris.Core.Name.Basic', E7} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V12))(V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); {'Idris.Core.Name.Field', E10} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V16))(V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); {'Idris.Core.Name.Underscore'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Core.Name.MN', E13, E14} -> (fun (V20, V21) -> begin (V22 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V22 of {'Idris.Prelude.Types.Left', E15} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V20))(V2))), case V25 of {'Idris.Prelude.Types.Left', E17} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V21, V2)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13, E14)); {'Idris.Core.Name.PV', E19, E20} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2))), case V30 of {'Idris.Prelude.Types.Left', E21} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V32) -> begin (V33 = ('dn--un--toBuf_TTC_Name'(V0, V28, V2))), case V33 of {'Idris.Prelude.Types.Left', E23} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V35) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V29, V2)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20)); {'Idris.Core.Name.DN', E25, E26} -> (fun (V36, V37) -> begin (V38 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2))), case V38 of {'Idris.Prelude.Types.Left', E27} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V36))(V2))), case V41 of {'Idris.Prelude.Types.Left', E29} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V43) -> ('dn--un--toBuf_TTC_Name'(V0, V37, V2)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25, E26)); {'Idris.Core.Name.Nested', E31, E32} -> (fun (V44, V45) -> begin (V46 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2))), case V46 of {'Idris.Prelude.Types.Left', E33} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V48) -> begin (V59 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V52, V53)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V57, V58)) end end}}, V0, V44, V2))), case V59 of {'Idris.Prelude.Types.Left', E35} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V61) -> ('dn--un--toBuf_TTC_Name'(V0, V45, V2)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); {'Idris.Core.Name.CaseBlock', E37, E38} -> (fun (V62, V63) -> begin (V64 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2))), case V64 of {'Idris.Prelude.Types.Left', E39} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V66) -> begin (V67 = (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V62))(V2))), case V67 of {'Idris.Prelude.Types.Left', E41} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V69) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V63, V2)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37, E38)); {'Idris.Core.Name.WithBlock', E43, E44} -> (fun (V70, V71) -> begin (V72 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2))), case V72 of {'Idris.Prelude.Types.Left', E45} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V74) -> begin (V75 = (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V70))(V2))), case V75 of {'Idris.Prelude.Types.Left', E47} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V77) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V71, V2)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44)); {'Idris.Core.Name.Resolved', E49} -> (fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t write resolved name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V78))))}, V2)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_ModuleIdent'(V0, V1, V2) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V5, V6)) end end}, V0, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V1)), V2)).
'dn--un--toBuf_TTC_LazyReason'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_HoleInfo'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.NotHole'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.Context.Context.SolvedHole', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_GlobalDef'(V0, V1, V2) -> begin (V28 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--toBuf_TTC_CDef'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> ('dn--un--fromBuf_TTC_CDef'(V6, V7)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V26 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V28 of {'Idris.Prelude.Types.Left', E20} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V30) -> begin (V107 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V37) -> fun (V38) -> fun (V39) -> ('dn--un--toBuf_TTC_Name'(V37, V38, V39)) end end end, fun (V40) -> fun (V41) -> ('dn--un--fromBuf_TTC_Name'(V40, V41)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V42, V43, V44)) end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V45, V46)) end end}}, V34, V35, V36)) end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('dn--un--toBuf_TTC_Name'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('dn--un--fromBuf_TTC_Name'(V52, V53)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V57, V58)) end end}}, V47, V48)) end end}, V31, V32, V33)) end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V64) -> fun (V65) -> fun (V66) -> ('dn--un--toBuf_TTC_Name'(V64, V65, V66)) end end end, fun (V67) -> fun (V68) -> ('dn--un--fromBuf_TTC_Name'(V67, V68)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V69, V70, V71)) end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V72, V73)) end end}}, V61, V62, V63)) end end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V76) -> fun (V77) -> fun (V78) -> ('dn--un--toBuf_TTC_Name'(V76, V77, V78)) end end end, fun (V79) -> fun (V80) -> ('dn--un--fromBuf_TTC_Name'(V79, V80)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V81, V82, V83)) end end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V84, V85)) end end}}, V74, V75)) end end}, V59, V60)) end end}, V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V86) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V86)) end, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V100 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V107 of {'Idris.Prelude.Types.Left', E42} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V109) -> begin (V130 = ('dn--un--toBuf_TTC_FC'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> V110 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V130 of {'Idris.Prelude.Types.Left', E64} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V132) -> begin (V153 = (('dn--un--toBuf_TTC_RigCount'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> V140 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V153 of {'Idris.Prelude.Types.Left', E86} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V155) -> begin (V176 = ('dn--un--toBuf_TTC_Name'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175) -> V157 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V176 of {'Idris.Prelude.Types.Left', E108} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V178) -> begin (V255 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V179) -> fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V185) -> fun (V186) -> fun (V187) -> ('dn--un--toBuf_TTC_Name'(V185, V186, V187)) end end end, fun (V188) -> fun (V189) -> ('dn--un--fromBuf_TTC_Name'(V188, V189)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V190, V191, V192)) end end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V193, V194)) end end}}, V182, V183, V184)) end end end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V197) -> fun (V198) -> fun (V199) -> ('dn--un--toBuf_TTC_Name'(V197, V198, V199)) end end end, fun (V200) -> fun (V201) -> ('dn--un--fromBuf_TTC_Name'(V200, V201)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V202) -> fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V202, V203, V204)) end end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V205, V206)) end end}}, V195, V196)) end end}, V179, V180, V181)) end end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V209) -> fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V212) -> fun (V213) -> fun (V214) -> ('dn--un--toBuf_TTC_Name'(V212, V213, V214)) end end end, fun (V215) -> fun (V216) -> ('dn--un--fromBuf_TTC_Name'(V215, V216)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V217, V218, V219)) end end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V220, V221)) end end}}, V209, V210, V211)) end end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V224) -> fun (V225) -> fun (V226) -> ('dn--un--toBuf_TTC_Name'(V224, V225, V226)) end end end, fun (V227) -> fun (V228) -> ('dn--un--fromBuf_TTC_Name'(V227, V228)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V229, V230, V231)) end end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V232, V233)) end end}}, V222, V223)) end end}, V207, V208)) end end}, V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V234) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V234)) end, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254) -> V247 end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V255 of {'Idris.Prelude.Types.Left', E130} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V257) -> begin (V278 = ('dn--un--toBuf_TTC_Def'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151} -> (fun (V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277) -> V275 end(E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V278 of {'Idris.Prelude.Types.Left', E152} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V280) -> case case ('Idris.Idris2.Core.Name':'un--isUserName'(case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455} -> (fun (V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300) -> V282 end(E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> 1; 0 -> ('nested--16244-10441--in--un--cwName'(V1, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435} -> (fun (V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320) -> V302 end(E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V341 = (('dn--un--toBuf_TTC_(Term $vars)'([], V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173} -> (fun (V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340) -> V323 end(E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V341 of {'Idris.Prelude.Types.Left', E174} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V343) -> begin (V369 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V344) -> fun (V345) -> fun (V346) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V344, V345, V346)) end end end, fun (V347) -> fun (V348) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V347, V348)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195} -> (fun (V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368) -> V352 end(E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V369 of {'Idris.Prelude.Types.Left', E196} -> (fun (V370) -> {'Idris.Prelude.Types.Left', V370} end(E196)); {'Idris.Prelude.Types.Right', E197} -> (fun (V371) -> begin (V397 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V372) -> fun (V373) -> fun (V374) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V372, V373, V374)) end end end, fun (V375) -> fun (V376) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V375, V376)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217} -> (fun (V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396) -> V381 end(E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V397 of {'Idris.Prelude.Types.Left', E218} -> (fun (V398) -> {'Idris.Prelude.Types.Left', V398} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V399) -> begin (V425 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V400) -> fun (V401) -> fun (V402) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V400, V401, V402)) end end end, fun (V403) -> fun (V404) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V403, V404)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239} -> (fun (V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424) -> V410 end(E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V425 of {'Idris.Prelude.Types.Left', E240} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E240)); {'Idris.Prelude.Types.Right', E241} -> (fun (V427) -> begin (V453 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V428) -> fun (V429) -> fun (V430) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V428, V429, V430)) end end end, fun (V431) -> fun (V432) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V431, V432)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261} -> (fun (V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452) -> V439 end(E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V453 of {'Idris.Prelude.Types.Left', E262} -> (fun (V454) -> {'Idris.Prelude.Types.Left', V454} end(E262)); {'Idris.Prelude.Types.Right', E263} -> (fun (V455) -> begin (V481 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V456) -> fun (V457) -> fun (V458) -> ('dn--un--toBuf_TTC_Name'(V456, V457, V458)) end end end, fun (V459) -> fun (V460) -> ('dn--un--fromBuf_TTC_Name'(V459, V460)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283} -> (fun (V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480) -> V469 end(E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V481 of {'Idris.Prelude.Types.Left', E284} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E284)); {'Idris.Prelude.Types.Right', E285} -> (fun (V483) -> begin (V504 = ('dn--un--toBuf_TTC_Visibility'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305} -> (fun (V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503) -> V493 end(E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V504 of {'Idris.Prelude.Types.Left', E306} -> (fun (V505) -> {'Idris.Prelude.Types.Left', V505} end(E306)); {'Idris.Prelude.Types.Right', E307} -> (fun (V506) -> begin (V527 = ('dn--un--toBuf_TTC_Totality'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327} -> (fun (V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526) -> V517 end(E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V527 of {'Idris.Prelude.Types.Left', E328} -> (fun (V528) -> {'Idris.Prelude.Types.Left', V528} end(E328)); {'Idris.Prelude.Types.Right', E329} -> (fun (V529) -> begin (V555 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V530) -> fun (V531) -> fun (V532) -> ('dn--un--toBuf_TTC_DefFlag'(V530, V531, V532)) end end end, fun (V533) -> fun (V534) -> ('dn--un--fromBuf_TTC_DefFlag'(V533, V534)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349} -> (fun (V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554) -> V546 end(E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V555 of {'Idris.Prelude.Types.Left', E350} -> (fun (V556) -> {'Idris.Prelude.Types.Left', V556} end(E350)); {'Idris.Prelude.Types.Right', E351} -> (fun (V557) -> begin (V578 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371} -> (fun (V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577) -> V572 end(E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V578 of {'Idris.Prelude.Types.Left', E372} -> (fun (V579) -> {'Idris.Prelude.Types.Left', V579} end(E372)); {'Idris.Prelude.Types.Right', E373} -> (fun (V580) -> begin (V601 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393} -> (fun (V581, V582, V583, V584, V585, V586, V587, V588, V589, V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600) -> V596 end(E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V601 of {'Idris.Prelude.Types.Left', E394} -> (fun (V602) -> {'Idris.Prelude.Types.Left', V602} end(E394)); {'Idris.Prelude.Types.Right', E395} -> (fun (V603) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V604) -> fun (V605) -> fun (V606) -> ('dn--un--toBuf_TTC_SCCall'(V604, V605, V606)) end end end, fun (V607) -> fun (V608) -> ('dn--un--fromBuf_TTC_SCCall'(V607, V608)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415} -> (fun (V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628) -> V628 end(E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E395)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E373)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E351)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E329)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E197)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_FC'(V0, V1, V2) -> case V1 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V9 = ('dn--un--toBuf_TTC_OriginDesc'(V0, V3, V2))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V22 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V12, V13, V14)) end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V15, V16)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V17, V18, V19)) end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V20, V21)) end end}}, V0, V4, V2))), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V28, V29)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V30, V31, V32)) end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V33, V34)) end end}}, V0, V5, V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.Core.FC.MkVirtualFC', E9, E10, E11} -> (fun (V35, V36, V37) -> begin (V38 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V38 of {'Idris.Prelude.Types.Left', E12} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V40) -> begin (V41 = ('dn--un--toBuf_TTC_OriginDesc'(V0, V35, V2))), case V41 of {'Idris.Prelude.Types.Left', E14} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V43) -> begin (V54 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V44, V45, V46)) end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V47, V48)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V52, V53)) end end}}, V0, V36, V2))), case V54 of {'Idris.Prelude.Types.Left', E16} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V56) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V57, V58, V59)) end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V60, V61)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V62, V63, V64)) end end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V65, V66)) end end}}, V0, V37, V2)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_DefFlag'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.Inline'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)) end()); {'Idris.Core.Context.Context.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2)) end()); {'Idris.Core.Context.Context.Overloadable'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2)) end()); {'Idris.Core.Context.Context.TCInline'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2)) end()); {'Idris.Core.Context.Context.SetTotal', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('dn--un--toBuf_TTC_TotalReq'(V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.Context.Context.BlockedHint'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2)) end()); {'Idris.Core.Context.Context.Macro'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2)) end()); {'Idris.Core.Context.Context.PartialEval', E3} -> (fun (V7) -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2)) end(E3)); {'Idris.Core.Context.Context.AllGuarded'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 10, V2)) end()); {'Idris.Core.Context.Context.ConType', E4} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 11, V2))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> ('dn--un--toBuf_TTC_ConInfo'(V0, V8, V2)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Core.Context.Context.Identity', E7} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 12, V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V12, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Def'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.None'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--toBuf_TTC_PMDefInfo'(V0, V3, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V19 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--toBuf_TTC_Name'(V14, V15, V16)) end end end, fun (V17) -> fun (V18) -> ('dn--un--fromBuf_TTC_Name'(V17, V18)) end end}, V0, V4, V2))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> begin (V22 = ('dn--un--toBuf_TTC_(CaseTree $vars)'(V4, V0, V5, V2))), case V22 of {'Idris.Prelude.Types.Left', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V24) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_((DPair $a) $p)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V31) -> fun (V32) -> fun (V33) -> ('dn--un--toBuf_TTC_Name'(V31, V32, V33)) end end end, fun (V34) -> fun (V35) -> ('dn--un--fromBuf_TTC_Name'(V34, V35)) end end}, V28, V29, V30)) end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V38) -> fun (V39) -> fun (V40) -> ('dn--un--toBuf_TTC_Name'(V38, V39, V40)) end end end, fun (V41) -> fun (V42) -> ('dn--un--fromBuf_TTC_Name'(V41, V42)) end end}, V36, V37)) end end}, fun (V43) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V47) -> fun (V48) -> fun (V49) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V43, V47, V48, V49)) end end end, fun (V50) -> fun (V51) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V43, V50, V51)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V55) -> fun (V56) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V55, V56)) end end, fun (V57) -> fun (V58) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V57, V58)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V59) -> fun (V60) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V59, V60)) end end, fun (V61) -> fun (V62) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V61, V62)) end end}}, V52, V53, V54)) end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V65) -> fun (V66) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V65, V66)) end end, fun (V67) -> fun (V68) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V67, V68)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V69) -> fun (V70) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V69, V70)) end end, fun (V71) -> fun (V72) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V71, V72)) end end}}, V63, V64)) end end}}, V44, V45, V46)) end end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V75) -> fun (V76) -> fun (V77) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V43, V75, V76, V77)) end end end, fun (V78) -> fun (V79) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V43, V78, V79)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V83) -> fun (V84) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V83, V84)) end end, fun (V85) -> fun (V86) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V85, V86)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V87) -> fun (V88) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V87, V88)) end end, fun (V89) -> fun (V90) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V89, V90)) end end}}, V80, V81, V82)) end end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V93) -> fun (V94) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V93, V94)) end end, fun (V95) -> fun (V96) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V95, V96)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V97) -> fun (V98) -> ('dn--un--toBuf_TTC_(Term $vars)'(V43, V97, V98)) end end, fun (V99) -> fun (V100) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V43, V99, V100)) end end}}, V91, V92)) end end}}, V73, V74)) end end} end}, V25, V26, V27)) end end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_((DPair $a) $p)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V106) -> fun (V107) -> fun (V108) -> ('dn--un--toBuf_TTC_Name'(V106, V107, V108)) end end end, fun (V109) -> fun (V110) -> ('dn--un--fromBuf_TTC_Name'(V109, V110)) end end}, V103, V104, V105)) end end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V113) -> fun (V114) -> fun (V115) -> ('dn--un--toBuf_TTC_Name'(V113, V114, V115)) end end end, fun (V116) -> fun (V117) -> ('dn--un--fromBuf_TTC_Name'(V116, V117)) end end}, V111, V112)) end end}, fun (V118) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V122) -> fun (V123) -> fun (V124) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V118, V122, V123, V124)) end end end, fun (V125) -> fun (V126) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V118, V125, V126)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V130) -> fun (V131) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V130, V131)) end end, fun (V132) -> fun (V133) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V132, V133)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V134) -> fun (V135) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V134, V135)) end end, fun (V136) -> fun (V137) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V136, V137)) end end}}, V127, V128, V129)) end end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V140) -> fun (V141) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V140, V141)) end end, fun (V142) -> fun (V143) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V142, V143)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V144) -> fun (V145) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V144, V145)) end end, fun (V146) -> fun (V147) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V146, V147)) end end}}, V138, V139)) end end}}, V119, V120, V121)) end end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V150) -> fun (V151) -> fun (V152) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V118, V150, V151, V152)) end end end, fun (V153) -> fun (V154) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V118, V153, V154)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V155) -> fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V158) -> fun (V159) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V158, V159)) end end, fun (V160) -> fun (V161) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V160, V161)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V162) -> fun (V163) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V162, V163)) end end, fun (V164) -> fun (V165) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V164, V165)) end end}}, V155, V156, V157)) end end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V168) -> fun (V169) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V168, V169)) end end, fun (V170) -> fun (V171) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V170, V171)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V172) -> fun (V173) -> ('dn--un--toBuf_TTC_(Term $vars)'(V118, V172, V173)) end end, fun (V174) -> fun (V175) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V118, V174, V175)) end end}}, V166, V167)) end end}}, V148, V149)) end end} end}, V101, V102)) end end}, V0, V7, V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.ExternDef', E13} -> (fun (V176) -> begin (V177 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V177 of {'Idris.Prelude.Types.Left', E14} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V179) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V176, V2)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); {'Idris.Core.Context.Context.ForeignDef', E16, E17} -> (fun (V180, V181) -> begin (V182 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2))), case V182 of {'Idris.Prelude.Types.Left', E18} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V184) -> begin (V185 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V180, V2))), case V185 of {'Idris.Prelude.Types.Left', E20} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V187) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V188) -> fun (V189) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V188, V189)) end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V190, V191)) end end}, V0, V181, V2)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); {'Idris.Core.Context.Context.Builtin', E22, E23} -> (fun (V192, V193) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Trying to serialise a Builtin"/utf8>>}, V2)) end(E22, E23)); {'Idris.Core.Context.Context.DCon', E24, E25, E26} -> (fun (V194, V195, V196) -> begin (V197 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2))), case V197 of {'Idris.Prelude.Types.Left', E27} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V199) -> begin (V200 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V194, V2))), case V200 of {'Idris.Prelude.Types.Left', E29} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V202) -> begin (V203 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V195, V2))), case V203 of {'Idris.Prelude.Types.Left', E31} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V205) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V206) -> fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V209) -> fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V209, V210, V211)) end end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V212, V213)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V214) -> fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V214, V215, V216)) end end end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V217, V218)) end end}}, V206, V207, V208)) end end end, fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V221) -> fun (V222) -> fun (V223) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V221, V222, V223)) end end end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V224, V225)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V226, V227, V228)) end end end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V229, V230)) end end}}, V219, V220)) end end}, V0, V196, V2)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25, E26)); {'Idris.Core.Context.Context.TCon', E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V231, V232, V233, V234, V235, V236, V237, V238) -> begin (V239 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2))), case V239 of {'Idris.Prelude.Types.Left', E41} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V241) -> begin (V242 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V231, V2))), case V242 of {'Idris.Prelude.Types.Left', E43} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V244) -> begin (V245 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V232, V2))), case V245 of {'Idris.Prelude.Types.Left', E45} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V247) -> begin (V253 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V248, V249, V250)) end end end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V251, V252)) end end}, V0, V233, V2))), case V253 of {'Idris.Prelude.Types.Left', E47} -> (fun (V254) -> {'Idris.Prelude.Types.Left', V254} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V255) -> begin (V261 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V256) -> fun (V257) -> fun (V258) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V256, V257, V258)) end end end, fun (V259) -> fun (V260) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V259, V260)) end end}, V0, V234, V2))), case V261 of {'Idris.Prelude.Types.Left', E49} -> (fun (V262) -> {'Idris.Prelude.Types.Left', V262} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V263) -> begin (V264 = ('dn--un--toBuf_TTC_TypeFlags'(V0, V235, V2))), case V264 of {'Idris.Prelude.Types.Left', E51} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V266) -> begin (V272 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V267) -> fun (V268) -> fun (V269) -> ('dn--un--toBuf_TTC_Name'(V267, V268, V269)) end end end, fun (V270) -> fun (V271) -> ('dn--un--fromBuf_TTC_Name'(V270, V271)) end end}, V0, V236, V2))), case V272 of {'Idris.Prelude.Types.Left', E53} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V274) -> begin (V280 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V275) -> fun (V276) -> fun (V277) -> ('dn--un--toBuf_TTC_Name'(V275, V276, V277)) end end end, fun (V278) -> fun (V279) -> ('dn--un--fromBuf_TTC_Name'(V278, V279)) end end}, V0, V237, V2))), case V280 of {'Idris.Prelude.Types.Left', E55} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V282) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V283) -> fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V286) -> fun (V287) -> fun (V288) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V286, V287, V288)) end end end, fun (V289) -> fun (V290) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V289, V290)) end end}, V283, V284, V285)) end end end, fun (V291) -> fun (V292) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V293) -> fun (V294) -> fun (V295) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V293, V294, V295)) end end end, fun (V296) -> fun (V297) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V296, V297)) end end}, V291, V292)) end end}, V0, V238, V2)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34, E35, E36, E37, E38, E39, E40)); {'Idris.Core.Context.Context.Hole', E57, E58} -> (fun (V298, V299) -> begin (V300 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2))), case V300 of {'Idris.Prelude.Types.Left', E59} -> (fun (V301) -> {'Idris.Prelude.Types.Left', V301} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V302) -> begin (V303 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V298, V2))), case V303 of {'Idris.Prelude.Types.Left', E61} -> (fun (V304) -> {'Idris.Prelude.Types.Left', V304} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V305) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V0, case V299 of {'Idris.Core.Context.Context.MkHoleFlags', E63, E64} -> (fun (V306, V307) -> V306 end(E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58)); {'Idris.Core.Context.Context.BySearch', E65, E66, E67} -> (fun (V308, V309, V310) -> begin (V311 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2))), case V311 of {'Idris.Prelude.Types.Left', E68} -> (fun (V312) -> {'Idris.Prelude.Types.Left', V312} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V313) -> begin (V314 = (('dn--un--toBuf_TTC_RigCount'(V0, V308))(V2))), case V314 of {'Idris.Prelude.Types.Left', E70} -> (fun (V315) -> {'Idris.Prelude.Types.Left', V315} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V316) -> begin (V317 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V309, V2))), case V317 of {'Idris.Prelude.Types.Left', E72} -> (fun (V318) -> {'Idris.Prelude.Types.Left', V318} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V319) -> ('dn--un--toBuf_TTC_Name'(V0, V310, V2)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65, E66, E67)); {'Idris.Core.Context.Context.Guess', E74, E75, E76} -> (fun (V320, V321, V322) -> begin (V323 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2))), case V323 of {'Idris.Prelude.Types.Left', E77} -> (fun (V324) -> {'Idris.Prelude.Types.Left', V324} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V325) -> begin (V326 = (('dn--un--toBuf_TTC_(Term $vars)'([], V0, V320))(V2))), case V326 of {'Idris.Prelude.Types.Left', E79} -> (fun (V327) -> {'Idris.Prelude.Types.Left', V327} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V328) -> begin (V329 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V321, V2))), case V329 of {'Idris.Prelude.Types.Left', E81} -> (fun (V330) -> {'Idris.Prelude.Types.Left', V330} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V331) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V332) -> fun (V333) -> fun (V334) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V332, V333, V334)) end end end, fun (V335) -> fun (V336) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V335, V336)) end end}, V0, V322, V2)) end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74, E75, E76)); {'Idris.Core.Context.Context.ImpBind'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2)) end()); {'Idris.Core.Context.Context.Delayed'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 10, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Covering'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V7) -> fun (V8) -> ('dn--un--toBuf_TTC_(Term $vars)'([], V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--fromBuf_TTC_(Term $vars)'([], V9, V10)) end end}, V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--toBuf_TTC_Name'(V15, V16, V17)) end end end, fun (V18) -> fun (V19) -> ('dn--un--fromBuf_TTC_Name'(V18, V19)) end end}, V0, V11, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Constant'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V3, V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.BI', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Integer'(V0, V7, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Core.TT.B8', E6} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V11, V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Core.TT.B16', E9} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2))), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V15, V2)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); {'Idris.Core.TT.B32', E12} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V0, V19, V2)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); {'Idris.Core.TT.B64', E15} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Integer'(V0, V23, V2)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); {'Idris.Core.TT.Str', E18} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V27))(V2)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); {'Idris.Core.TT.Ch', E21} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Char'(V0, V31))(V2)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); {'Idris.Core.TT.Db', E24} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2))), case V36 of {'Idris.Prelude.Types.Left', E25} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Double'(V0, V35, V2)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); {'Idris.Core.TT.WorldVal'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2)) end()); {'Idris.Core.TT.IntType'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 10, V2)) end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 11, V2)) end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 12, V2)) end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 13, V2)) end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 14, V2)) end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 15, V2)) end()); {'Idris.Core.TT.StringType'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 16, V2)) end()); {'Idris.Core.TT.CharType'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 17, V2)) end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 18, V2)) end()); {'Idris.Core.TT.WorldType'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 19, V2)) end()); {'Idris.Core.TT.I32', E27} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 20, V2))), case V40 of {'Idris.Prelude.Types.Left', E28} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Integer'(V0, V39, V2)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); {'Idris.Core.TT.I64', E30} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 21, V2))), case V44 of {'Idris.Prelude.Types.Left', E31} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Integer'(V0, V43, V2)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Core.TT.Int32Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 22, V2)) end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 23, V2)) end()); {'Idris.Core.TT.I8', E33} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 24, V2))), case V48 of {'Idris.Prelude.Types.Left', E34} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V50) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Integer'(V0, V47, V2)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); {'Idris.Core.TT.I16', E36} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 25, V2))), case V52 of {'Idris.Prelude.Types.Left', E37} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V54) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Integer'(V0, V51, V2)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); {'Idris.Core.TT.Int8Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 26, V2)) end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 27, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_ConInfo'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)); 3 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2)); 4 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2)); 5 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2)); 6 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2)); 7 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2)); 8 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2)); 9 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_CG'(V0, V1, V2) -> case V1 of {'Idris.Core.Options.Chez'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.Options.ChezSep'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); {'Idris.Core.Options.Racket'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)) end()); {'Idris.Core.Options.Gambit'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2)) end()); {'Idris.Core.Options.Other', E0} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V3))(V2)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.Options.Node'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2)) end()); {'Idris.Core.Options.Javascript'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2)) end()); {'Idris.Core.Options.RefC'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2)) end()); {'Idris.Core.Options.VMCodeInterp'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_CFType'(V0, V1, V2) -> case V1 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)) end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2)) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 4, V2)) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 5, V2)) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 6, V2)) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 7, V2)) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 8, V2)) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 9, V2)) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 10, V2)) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 11, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--toBuf_TTC_CFType'(V0, V3, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('dn--un--toBuf_TTC_CFType'(V0, V4, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E6} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 12, V2))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> ('dn--un--toBuf_TTC_CFType'(V0, V11, V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Core.CompileExpr.CFStruct', E9, E10} -> (fun (V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 13, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V0, V15))(V2))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V28, V29)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V30) -> fun (V31) -> fun (V32) -> ('dn--un--toBuf_TTC_CFType'(V30, V31, V32)) end end end, fun (V33) -> fun (V34) -> ('dn--un--fromBuf_TTC_CFType'(V33, V34)) end end}}, V23, V24, V25)) end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V39, V40)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--toBuf_TTC_CFType'(V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> ('dn--un--fromBuf_TTC_CFType'(V44, V45)) end end}}, V35, V36)) end end}, V0, V16, V2)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); {'Idris.Core.CompileExpr.CFUser', E15, E16} -> (fun (V46, V47) -> begin (V48 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 14, V2))), case V48 of {'Idris.Prelude.Types.Left', E17} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V50) -> begin (V51 = ('dn--un--toBuf_TTC_Name'(V0, V46, V2))), case V51 of {'Idris.Prelude.Types.Left', E19} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V53) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('dn--un--toBuf_TTC_CFType'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('dn--un--fromBuf_TTC_CFType'(V57, V58)) end end}, V0, V47, V2)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16)); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 15, V2)) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 16, V2)) end()); {'Idris.Core.CompileExpr.CFInt8'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 17, V2)) end()); {'Idris.Core.CompileExpr.CFInt16'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 18, V2)) end()); {'Idris.Core.CompileExpr.CFInt32'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 19, V2)) end()); {'Idris.Core.CompileExpr.CFInt64'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 20, V2)) end()); {'Idris.Core.CompileExpr.CFForeignObj'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 21, V2)) end()); {'Idris.Core.CompileExpr.CFInteger'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 22, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_CDef'(V0, V1, V2) -> case V1 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--toBuf_TTC_Name'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> ('dn--un--fromBuf_TTC_Name'(V11, V12)) end end}, V0, V3, V2))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V3, V0, V4, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.CompileExpr.MkCon', E6, E7, E8} -> (fun (V16, V17, V18) -> begin (V19 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> begin (V27 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V22, V23, V24)) end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V25, V26)) end end}, V0, V16, V2))), case V27 of {'Idris.Prelude.Types.Left', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V0, V17, V2))), case V30 of {'Idris.Prelude.Types.Left', E13} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V32) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V33, V34, V35)) end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V36, V37)) end end}, V0, V18, V2)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8)); {'Idris.Core.CompileExpr.MkForeign', E15, E16, E17} -> (fun (V38, V39, V40) -> begin (V41 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2))), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V48 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V46, V47)) end end}, V0, V38, V2))), case V48 of {'Idris.Prelude.Types.Left', E20} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V50) -> begin (V56 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V51) -> fun (V52) -> fun (V53) -> ('dn--un--toBuf_TTC_CFType'(V51, V52, V53)) end end end, fun (V54) -> fun (V55) -> ('dn--un--fromBuf_TTC_CFType'(V54, V55)) end end}, V0, V39, V2))), case V56 of {'Idris.Prelude.Types.Left', E22} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V58) -> ('dn--un--toBuf_TTC_CFType'(V0, V40, V2)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16, E17)); {'Idris.Core.CompileExpr.MkError', E24} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2))), case V60 of {'Idris.Prelude.Types.Left', E25} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V62) -> ('dn--un--toBuf_TTC_(CExp $vars)'([], V0, V59, V2)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V3, V4, V5) -> fun (V6) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V5, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(243)))) of 1 -> begin (V7 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, ((13 + ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V5))) rem 9223372036854775808), V6))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V10, V11, V12)) end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V13, V14)) end end}, V1, V4, V6)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V15 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 0, V6))), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V21, V22)) end end}, V1, V4, V6))), case V23 of {'Idris.Prelude.Types.Left', E7} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V25) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V1, V5, V6)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E9, E10, E11} -> (fun (V26, V27, V28) -> fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 1, V29))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V33 = ('dn--un--toBuf_TTC_NameType'(V1, V27, V29))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> ('dn--un--toBuf_TTC_Name'(V1, V28, V29)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); {'Idris.Core.TT.Meta', E16, E17, E18, E19} -> (fun (V36, V37, V38, V39) -> fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 2, V40))), case V41 of {'Idris.Prelude.Types.Left', E20} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V43) -> begin (V44 = ('dn--un--toBuf_TTC_Name'(V1, V37, V40))), case V44 of {'Idris.Prelude.Types.Left', E22} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V47) -> fun (V48) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V49, V50)) end end}, V1, V39, V40)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); {'Idris.Core.TT.Bind', E24, E25, E26, E27} -> (fun (V51, V52, V53, V54) -> fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 3, V55))), case V56 of {'Idris.Prelude.Types.Left', E28} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V58) -> begin (V59 = ('dn--un--toBuf_TTC_Name'(V1, V52, V55))), case V59 of {'Idris.Prelude.Types.Left', E30} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V61) -> begin (V62 = ('dn--un--toBuf_TTC_(Binder (Term $vars))'(V0, V1, V53, V55))), case V62 of {'Idris.Prelude.Types.Left', E32} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V64) -> (('dn--un--toBuf_TTC_(Term $vars)'([V52 | V0], V1, V54))(V55)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25, E26, E27)); {'Idris.Core.TT.App', E34, E35, E36} -> (fun (V65, V66, V67) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'({'Idris.Core.TT.App', V65, V66, V67})) of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V68, V69) -> fun (V70) -> case V69 of [E43 | E44] -> (fun (V71, V72) -> case V72 of [] -> begin (V73 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 4, V70))), case V73 of {'Idris.Prelude.Types.Left', E49} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V75) -> begin (V76 = (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V68))(V70))), case V76 of {'Idris.Prelude.Types.Left', E51} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V78) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V71))(V70)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V79 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 12, V70))), case V79 of {'Idris.Prelude.Types.Left', E45} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V81) -> begin (V82 = (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V68))(V70))), case V82 of {'Idris.Prelude.Types.Left', E47} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V84) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V85) -> fun (V86) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V85, V86)) end end, fun (V87) -> fun (V88) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V87, V88)) end end}, V1, V69, V70)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43, E44)); _ -> begin (V89 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 12, V70))), case V89 of {'Idris.Prelude.Types.Left', E39} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V91) -> begin (V92 = (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V68))(V70))), case V92 of {'Idris.Prelude.Types.Left', E41} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V94) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V95) -> fun (V96) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V95, V96)) end end, fun (V97) -> fun (V98) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V97, V98)) end end}, V1, V69, V70)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36)); {'Idris.Core.TT.As', E53, E54, E55, E56} -> (fun (V99, V100, V101, V102) -> fun (V103) -> begin (V104 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 5, V103))), case V104 of {'Idris.Prelude.Types.Left', E57} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V106) -> begin (V107 = (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V101))(V103))), case V107 of {'Idris.Prelude.Types.Left', E59} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V109) -> begin (V110 = ('dn--un--toBuf_TTC_UseSide'(V1, V100, V103))), case V110 of {'Idris.Prelude.Types.Left', E61} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V112) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V102))(V103)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54, E55, E56)); {'Idris.Core.TT.TDelayed', E63, E64, E65} -> (fun (V113, V114, V115) -> fun (V116) -> begin (V117 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 6, V116))), case V117 of {'Idris.Prelude.Types.Left', E66} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V119) -> begin (V120 = ('dn--un--toBuf_TTC_LazyReason'(V1, V114, V116))), case V120 of {'Idris.Prelude.Types.Left', E68} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V122) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V115))(V116)) end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63, E64, E65)); {'Idris.Core.TT.TDelay', E70, E71, E72, E73} -> (fun (V123, V124, V125, V126) -> fun (V127) -> begin (V128 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 7, V127))), case V128 of {'Idris.Prelude.Types.Left', E74} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V130) -> begin (V131 = ('dn--un--toBuf_TTC_LazyReason'(V1, V124, V127))), case V131 of {'Idris.Prelude.Types.Left', E76} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V133) -> begin (V134 = (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V125))(V127))), case V134 of {'Idris.Prelude.Types.Left', E78} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V136) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V126))(V127)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E70, E71, E72, E73)); {'Idris.Core.TT.TForce', E80, E81, E82} -> (fun (V137, V138, V139) -> fun (V140) -> begin (V141 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 8, V140))), case V141 of {'Idris.Prelude.Types.Left', E83} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V143) -> begin (V144 = ('dn--un--toBuf_TTC_LazyReason'(V1, V138, V140))), case V144 of {'Idris.Prelude.Types.Left', E85} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V146) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V139))(V140)) end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E80, E81, E82)); {'Idris.Core.TT.PrimVal', E87, E88} -> (fun (V147, V148) -> fun (V149) -> begin (V150 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 9, V149))), case V150 of {'Idris.Prelude.Types.Left', E89} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V152) -> ('dn--un--toBuf_TTC_Constant'(V1, V148, V149)) end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E87, E88)); {'Idris.Core.TT.Erased', E91, E92} -> (fun (V153, V154) -> fun (V155) -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 10, V155)) end end(E91, E92)); {'Idris.Core.TT.TType', E93} -> (fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 11, V157)) end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(PrimFn $n)'(V0, V1, V2) -> case V0 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V3 = (V0 - 1)), case V3 of 0 -> fun (V4) -> case V2 of {'Idris.Core.TT.Neg', E45} -> (fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 5, V4))), case V6 of {'Idris.Prelude.Types.Left', E46} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V8) -> ('dn--un--toBuf_TTC_Constant'(V1, V5, V4)) end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); {'Idris.Core.TT.StrLength'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 11, V4)) end()); {'Idris.Core.TT.StrHead'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 12, V4)) end()); {'Idris.Core.TT.StrTail'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 13, V4)) end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 17, V4)) end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 19, V4)) end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 20, V4)) end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 22, V4)) end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 23, V4)) end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 24, V4)) end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 25, V4)) end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 26, V4)) end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 27, V4)) end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 32, V4)) end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 33, V4)) end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 34, V4)) end()); {'Idris.Core.TT.Cast', E48, E49} -> (fun (V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 99, V4))), case V11 of {'Idris.Prelude.Types.Left', E50} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V13) -> begin (V14 = ('dn--un--toBuf_TTC_Constant'(V1, V9, V4))), case V14 of {'Idris.Prelude.Types.Left', E52} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V16) -> ('dn--un--toBuf_TTC_Constant'(V1, V10, V4)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V17 = (V3 - 1)), case V17 of 0 -> fun (V18) -> case V2 of {'Idris.Core.TT.Add', E0} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 0, V18))), case V20 of {'Idris.Prelude.Types.Left', E1} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V22) -> ('dn--un--toBuf_TTC_Constant'(V1, V19, V18)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.Sub', E3} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 1, V18))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> ('dn--un--toBuf_TTC_Constant'(V1, V23, V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Core.TT.Mul', E6} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 2, V18))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> ('dn--un--toBuf_TTC_Constant'(V1, V27, V18)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Core.TT.Div', E9} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 3, V18))), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> ('dn--un--toBuf_TTC_Constant'(V1, V31, V18)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); {'Idris.Core.TT.Mod', E12} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 4, V18))), case V36 of {'Idris.Prelude.Types.Left', E13} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V38) -> ('dn--un--toBuf_TTC_Constant'(V1, V35, V18)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); {'Idris.Core.TT.ShiftL', E15} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 35, V18))), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> ('dn--un--toBuf_TTC_Constant'(V1, V39, V18)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); {'Idris.Core.TT.ShiftR', E18} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 36, V18))), case V44 of {'Idris.Prelude.Types.Left', E19} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V46) -> ('dn--un--toBuf_TTC_Constant'(V1, V43, V18)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); {'Idris.Core.TT.BAnd', E21} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 37, V18))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> ('dn--un--toBuf_TTC_Constant'(V1, V47, V18)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); {'Idris.Core.TT.BOr', E24} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 38, V18))), case V52 of {'Idris.Prelude.Types.Left', E25} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V54) -> ('dn--un--toBuf_TTC_Constant'(V1, V51, V18)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); {'Idris.Core.TT.BXOr', E27} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 39, V18))), case V56 of {'Idris.Prelude.Types.Left', E28} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V58) -> ('dn--un--toBuf_TTC_Constant'(V1, V55, V18)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); {'Idris.Core.TT.LT', E30} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 6, V18))), case V60 of {'Idris.Prelude.Types.Left', E31} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V62) -> ('dn--un--toBuf_TTC_Constant'(V1, V59, V18)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Core.TT.LTE', E33} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 7, V18))), case V64 of {'Idris.Prelude.Types.Left', E34} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V66) -> ('dn--un--toBuf_TTC_Constant'(V1, V63, V18)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); {'Idris.Core.TT.EQ', E36} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 8, V18))), case V68 of {'Idris.Prelude.Types.Left', E37} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V70) -> ('dn--un--toBuf_TTC_Constant'(V1, V67, V18)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); {'Idris.Core.TT.GTE', E39} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 9, V18))), case V72 of {'Idris.Prelude.Types.Left', E40} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V74) -> ('dn--un--toBuf_TTC_Constant'(V1, V71, V18)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); {'Idris.Core.TT.GT', E42} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 10, V18))), case V76 of {'Idris.Prelude.Types.Left', E43} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V78) -> ('dn--un--toBuf_TTC_Constant'(V1, V75, V18)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); {'Idris.Core.TT.StrIndex'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 14, V18)) end()); {'Idris.Core.TT.StrCons'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 15, V18)) end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 16, V18)) end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 21, V18)) end()); {'Idris.Core.TT.Crash'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 101, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V79 = (V17 - 1)), case V79 of 0 -> fun (V80) -> case V2 of {'Idris.Core.TT.StrSubstr'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 18, V80)) end()); {'Idris.Core.TT.BelieveMe'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 100, V80)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Nat case not covered")) end end end end end end end.
'dn--un--toBuf_TTC_(PiInfo $t)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 0, V3)) end()); {'Idris.Core.TT.Explicit'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 1, V3)) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 2, V3)) end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 3, V3))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E3, E4} -> (fun (V8, V9) -> (((V8(V1))(V4))(V3)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(CaseTree $vars)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 0, V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('dn--un--toBuf_TTC_Name'(V1, V4, V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V1, V5, V3))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--toBuf_TTC_(CaseAlt $vars)'(V0, V17, V18, V19)) end end end, fun (V20) -> fun (V21) -> ('dn--un--fromBuf_TTC_(CaseAlt $vars)'(V0, V20, V21)) end end}, V1, V7, V3)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E10, E11} -> (fun (V22, V23) -> begin (V24 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 1, V3))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V23))(V3)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); {'Idris.Core.CaseTree.Unmatched', E14} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 2, V3))), case V28 of {'Idris.Prelude.Types.Left', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V30) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V1, V27))(V3)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 3, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(CaseAlt $vars)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 0, V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('dn--un--toBuf_TTC_Name'(V1, V4, V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V1, V5, V3))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V22 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--toBuf_TTC_Name'(V17, V18, V19)) end end end, fun (V20) -> fun (V21) -> ('dn--un--fromBuf_TTC_Name'(V20, V21)) end end}, V1, V6, V3))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> ('dn--un--toBuf_TTC_(CaseTree $vars)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V0)), V1, V7, V3)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E12, E13, E14} -> (fun (V25, V26, V27) -> begin (V28 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 1, V3))), case V28 of {'Idris.Prelude.Types.Left', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V30) -> begin (V31 = ('dn--un--toBuf_TTC_Name'(V1, V25, V3))), case V31 of {'Idris.Prelude.Types.Left', E17} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V33) -> begin (V34 = ('dn--un--toBuf_TTC_Name'(V1, V26, V3))), case V34 of {'Idris.Prelude.Types.Left', E19} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V36) -> ('dn--un--toBuf_TTC_(CaseTree $vars)'([V25 | [V26 | V0]], V1, V27, V3)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13, E14)); {'Idris.Core.CaseTree.ConstCase', E21, E22} -> (fun (V37, V38) -> begin (V39 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 2, V3))), case V39 of {'Idris.Prelude.Types.Left', E23} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V41) -> begin (V42 = ('dn--un--toBuf_TTC_Constant'(V1, V37, V3))), case V42 of {'Idris.Prelude.Types.Left', E25} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V44) -> ('dn--un--toBuf_TTC_(CaseTree $vars)'(V0, V1, V38, V3)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); {'Idris.Core.CaseTree.DefaultCase', E27} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 3, V3))), case V46 of {'Idris.Prelude.Types.Left', E28} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V48) -> ('dn--un--toBuf_TTC_(CaseTree $vars)'(V0, V1, V45, V3)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 0, V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('dn--un--toBuf_TTC_FC'(V1, V5, V3))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V1, V4, V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E6, E7} -> (fun (V12, V13) -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 1, V3))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = ('dn--un--toBuf_TTC_FC'(V1, V12, V3))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> ('dn--un--toBuf_TTC_Name'(V1, V13, V3)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); {'Idris.Core.CompileExpr.CLam', E12, E13, E14} -> (fun (V20, V21, V22) -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 2, V3))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V26 = ('dn--un--toBuf_TTC_FC'(V1, V20, V3))), case V26 of {'Idris.Prelude.Types.Left', E17} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V28) -> begin (V29 = ('dn--un--toBuf_TTC_Name'(V1, V21, V3))), case V29 of {'Idris.Prelude.Types.Left', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V31) -> ('dn--un--toBuf_TTC_(CExp $vars)'([V21 | V0], V1, V22, V3)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13, E14)); {'Idris.Core.CompileExpr.CLet', E21, E22, E23, E24, E25} -> (fun (V32, V33, V34, V35, V36) -> begin (V37 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 3, V3))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> begin (V40 = ('dn--un--toBuf_TTC_FC'(V1, V32, V3))), case V40 of {'Idris.Prelude.Types.Left', E28} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V42) -> begin (V43 = ('dn--un--toBuf_TTC_Name'(V1, V33, V3))), case V43 of {'Idris.Prelude.Types.Left', E30} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V1, V34, V3))), case V46 of {'Idris.Prelude.Types.Left', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V48) -> begin (V49 = ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V35, V3))), case V49 of {'Idris.Prelude.Types.Left', E34} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V51) -> ('dn--un--toBuf_TTC_(CExp $vars)'([V33 | V0], V1, V36, V3)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22, E23, E24, E25)); {'Idris.Core.CompileExpr.CApp', E36, E37, E38} -> (fun (V52, V53, V54) -> begin (V55 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 4, V3))), case V55 of {'Idris.Prelude.Types.Left', E39} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V57) -> begin (V58 = ('dn--un--toBuf_TTC_FC'(V1, V52, V3))), case V58 of {'Idris.Prelude.Types.Left', E41} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V60) -> begin (V61 = ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V53, V3))), case V61 of {'Idris.Prelude.Types.Left', E43} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V63) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V64) -> fun (V65) -> fun (V66) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V64, V65, V66)) end end end, fun (V67) -> fun (V68) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V67, V68)) end end}, V1, V54, V3)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38)); {'Idris.Core.CompileExpr.CCon', E45, E46, E47, E48, E49} -> (fun (V69, V70, V71, V72, V73) -> begin (V74 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 5, V3))), case V74 of {'Idris.Prelude.Types.Left', E50} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V76) -> begin (V77 = ('dn--un--toBuf_TTC_FC'(V1, V69, V3))), case V77 of {'Idris.Prelude.Types.Left', E52} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V79) -> begin (V80 = ('dn--un--toBuf_TTC_Name'(V1, V70, V3))), case V80 of {'Idris.Prelude.Types.Left', E54} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V82) -> begin (V83 = ('dn--un--toBuf_TTC_ConInfo'(V1, V71, V3))), case V83 of {'Idris.Prelude.Types.Left', E56} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V85) -> begin (V91 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V86, V87, V88)) end end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V89, V90)) end end}, V1, V72, V3))), case V91 of {'Idris.Prelude.Types.Left', E58} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V93) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V94) -> fun (V95) -> fun (V96) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V94, V95, V96)) end end end, fun (V97) -> fun (V98) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V97, V98)) end end}, V1, V73, V3)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45, E46, E47, E48, E49)); {'Idris.Core.CompileExpr.COp', E60, E61, E62, E63} -> (fun (V99, V100, V101, V102) -> begin (V103 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 6, V3))), case V103 of {'Idris.Prelude.Types.Left', E64} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V105) -> begin (V106 = ('dn--un--toBuf_TTC_FC'(V1, V100, V3))), case V106 of {'Idris.Prelude.Types.Left', E66} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V108) -> begin (V109 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V1, V99, V3))), case V109 of {'Idris.Prelude.Types.Left', E68} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V111) -> begin (V112 = (('dn--un--toBuf_TTC_(PrimFn $n)'(V99, V1, V101))(V3))), case V112 of {'Idris.Prelude.Types.Left', E70} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V114) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_((Vect $n) $a)'(V99, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V115) -> fun (V116) -> fun (V117) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V115, V116, V117)) end end end, fun (V118) -> fun (V119) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V118, V119)) end end}, V1, V102, V3)) end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60, E61, E62, E63)); {'Idris.Core.CompileExpr.CExtPrim', E72, E73, E74} -> (fun (V120, V121, V122) -> begin (V123 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 7, V3))), case V123 of {'Idris.Prelude.Types.Left', E75} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V125) -> begin (V126 = ('dn--un--toBuf_TTC_FC'(V1, V120, V3))), case V126 of {'Idris.Prelude.Types.Left', E77} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V128) -> begin (V129 = ('dn--un--toBuf_TTC_Name'(V1, V121, V3))), case V129 of {'Idris.Prelude.Types.Left', E79} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V131) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V132) -> fun (V133) -> fun (V134) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V132, V133, V134)) end end end, fun (V135) -> fun (V136) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V135, V136)) end end}, V1, V122, V3)) end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72, E73, E74)); {'Idris.Core.CompileExpr.CForce', E81, E82, E83} -> (fun (V137, V138, V139) -> begin (V140 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 8, V3))), case V140 of {'Idris.Prelude.Types.Left', E84} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V142) -> begin (V143 = ('dn--un--toBuf_TTC_FC'(V1, V137, V3))), case V143 of {'Idris.Prelude.Types.Left', E86} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V145) -> begin (V146 = ('dn--un--toBuf_TTC_LazyReason'(V1, V138, V3))), case V146 of {'Idris.Prelude.Types.Left', E88} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V148) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V139, V3)) end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81, E82, E83)); {'Idris.Core.CompileExpr.CDelay', E90, E91, E92} -> (fun (V149, V150, V151) -> begin (V152 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 9, V3))), case V152 of {'Idris.Prelude.Types.Left', E93} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V154) -> begin (V155 = ('dn--un--toBuf_TTC_FC'(V1, V149, V3))), case V155 of {'Idris.Prelude.Types.Left', E95} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V157) -> begin (V158 = ('dn--un--toBuf_TTC_LazyReason'(V1, V150, V3))), case V158 of {'Idris.Prelude.Types.Left', E97} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V160) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V151, V3)) end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90, E91, E92)); {'Idris.Core.CompileExpr.CConCase', E99, E100, E101, E102} -> (fun (V161, V162, V163, V164) -> begin (V165 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 10, V3))), case V165 of {'Idris.Prelude.Types.Left', E103} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V167) -> begin (V168 = ('dn--un--toBuf_TTC_FC'(V1, V161, V3))), case V168 of {'Idris.Prelude.Types.Left', E105} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V170) -> begin (V171 = ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V162, V3))), case V171 of {'Idris.Prelude.Types.Left', E107} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V173) -> begin (V179 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V174) -> fun (V175) -> fun (V176) -> ('dn--un--toBuf_TTC_(CConAlt $vars)'(V0, V174, V175, V176)) end end end, fun (V177) -> fun (V178) -> ('dn--un--fromBuf_TTC_(CConAlt $vars)'(V0, V177, V178)) end end}, V1, V163, V3))), case V179 of {'Idris.Prelude.Types.Left', E109} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V181) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V182) -> fun (V183) -> fun (V184) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V182, V183, V184)) end end end, fun (V185) -> fun (V186) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V185, V186)) end end}, V1, V164, V3)) end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99, E100, E101, E102)); {'Idris.Core.CompileExpr.CConstCase', E111, E112, E113, E114} -> (fun (V187, V188, V189, V190) -> begin (V191 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 11, V3))), case V191 of {'Idris.Prelude.Types.Left', E115} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V193) -> begin (V194 = ('dn--un--toBuf_TTC_FC'(V1, V187, V3))), case V194 of {'Idris.Prelude.Types.Left', E117} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V196) -> begin (V197 = ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V188, V3))), case V197 of {'Idris.Prelude.Types.Left', E119} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V199) -> begin (V205 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V200) -> fun (V201) -> fun (V202) -> ('dn--un--toBuf_TTC_(CConstAlt $vars)'(V0, V200, V201, V202)) end end end, fun (V203) -> fun (V204) -> ('dn--un--fromBuf_TTC_(CConstAlt $vars)'(V0, V203, V204)) end end}, V1, V189, V3))), case V205 of {'Idris.Prelude.Types.Left', E121} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V207) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V208) -> fun (V209) -> fun (V210) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V208, V209, V210)) end end end, fun (V211) -> fun (V212) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V211, V212)) end end}, V1, V190, V3)) end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111, E112, E113, E114)); {'Idris.Core.CompileExpr.CPrimVal', E123, E124} -> (fun (V213, V214) -> begin (V215 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 12, V3))), case V215 of {'Idris.Prelude.Types.Left', E125} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V217) -> begin (V218 = ('dn--un--toBuf_TTC_FC'(V1, V213, V3))), case V218 of {'Idris.Prelude.Types.Left', E127} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V220) -> ('dn--un--toBuf_TTC_Constant'(V1, V214, V3)) end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123, E124)); {'Idris.Core.CompileExpr.CErased', E129} -> (fun (V221) -> begin (V222 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 13, V3))), case V222 of {'Idris.Prelude.Types.Left', E130} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V224) -> ('dn--un--toBuf_TTC_FC'(V1, V221, V3)) end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); {'Idris.Core.CompileExpr.CCrash', E132, E133} -> (fun (V225, V226) -> begin (V227 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 14, V3))), case V227 of {'Idris.Prelude.Types.Left', E134} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V229) -> begin (V230 = ('dn--un--toBuf_TTC_FC'(V1, V225, V3))), case V230 of {'Idris.Prelude.Types.Left', E136} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V232) -> (('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V1, V226))(V3)) end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132, E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(CConstAlt $vars)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('dn--un--toBuf_TTC_Constant'(V1, V4, V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V5, V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(CConAlt $vars)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V9 = ('dn--un--toBuf_TTC_Name'(V1, V4, V3))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = ('dn--un--toBuf_TTC_ConInfo'(V1, V5, V3))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> begin (V20 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V15, V16, V17)) end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V18, V19)) end end}, V1, V6, V3))), case V20 of {'Idris.Prelude.Types.Left', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V22) -> begin (V28 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--toBuf_TTC_Name'(V23, V24, V25)) end end end, fun (V26) -> fun (V27) -> ('dn--un--fromBuf_TTC_Name'(V26, V27)) end end}, V1, V7, V3))), case V28 of {'Idris.Prelude.Types.Left', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V30) -> ('dn--un--toBuf_TTC_(CExp $vars)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V7, V0)), V1, V8, V3)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_(Binder (Term $vars))'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 0, V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = (('dn--un--toBuf_TTC_RigCount'(V1, V5))(V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V18 = ('dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V14) -> fun (V15) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V16, V17)) end end}, V1, V6, V3))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V7))(V3)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E10, E11, E12, E13} -> (fun (V21, V22, V23, V24) -> begin (V25 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 1, V3))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> begin (V28 = (('dn--un--toBuf_TTC_RigCount'(V1, V22))(V3))), case V28 of {'Idris.Prelude.Types.Left', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V30) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V23))(V3)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13)); {'Idris.Core.TT.Pi', E18, E19, E20, E21} -> (fun (V31, V32, V33, V34) -> begin (V35 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 2, V3))), case V35 of {'Idris.Prelude.Types.Left', E22} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V37) -> begin (V38 = (('dn--un--toBuf_TTC_RigCount'(V1, V32))(V3))), case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V40) -> begin (V45 = ('dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V41, V42)) end end, fun (V43) -> fun (V44) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V43, V44)) end end}, V1, V33, V3))), case V45 of {'Idris.Prelude.Types.Left', E26} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V47) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V34))(V3)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19, E20, E21)); {'Idris.Core.TT.PVar', E28, E29, E30, E31} -> (fun (V48, V49, V50, V51) -> begin (V52 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 3, V3))), case V52 of {'Idris.Prelude.Types.Left', E32} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V54) -> begin (V55 = (('dn--un--toBuf_TTC_RigCount'(V1, V49))(V3))), case V55 of {'Idris.Prelude.Types.Left', E34} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V57) -> begin (V62 = ('dn--un--toBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V58) -> fun (V59) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V58, V59)) end end, fun (V60) -> fun (V61) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V60, V61)) end end}, V1, V50, V3))), case V62 of {'Idris.Prelude.Types.Left', E36} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V64) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V51))(V3)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29, E30, E31)); {'Idris.Core.TT.PLet', E38, E39, E40, E41} -> (fun (V65, V66, V67, V68) -> begin (V69 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 4, V3))), case V69 of {'Idris.Prelude.Types.Left', E42} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V71) -> begin (V72 = (('dn--un--toBuf_TTC_RigCount'(V1, V66))(V3))), case V72 of {'Idris.Prelude.Types.Left', E44} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V74) -> (('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V67))(V3)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39, E40, E41)); {'Idris.Core.TT.PVTy', E46, E47, E48} -> (fun (V75, V76, V77) -> begin (V78 = ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V1, 5, V3))), case V78 of {'Idris.Prelude.Types.Left', E49} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V80) -> (('dn--un--toBuf_TTC_RigCount'(V1, V76))(V3)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_((Env Term) $vars)'(V0, V1, V2, V3) -> case V0 of [] -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V4, V5) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V6, V7) -> begin (V8 = ('dn--un--toBuf_TTC_(Binder (Term $vars))'(V5, V1, V6, V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V5, V1, V7, V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--fromBuf_TTC_Visibility'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; 2 -> {'Idris.Prelude.Types.Right', 2}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Visibility"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_VirtualIdent'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"VirtualIdent"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_UseSide'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"UseSide"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_TypeFlags'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkTypeFlags', V4, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Transform'(V0, V1) -> begin (V7 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC_Name'(V2, V3, V4)) end end end, fun (V5) -> fun (V6) -> ('dn--un--fromBuf_TTC_Name'(V5, V6)) end end}, V0, V1))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V9, V0, V1))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('dn--un--fromBuf_TTC_(Term $vars)'(V9, V0, V1))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = ('dn--un--fromBuf_TTC_(Term $vars)'(V9, V0, V1))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V9, V12, V15, V18, V21}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Totality'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Terminating'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('dn--un--fromBuf_TTC_Covering'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V4, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_TotalReq'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; 2 -> {'Idris.Prelude.Types.Right', 2}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"TotalReq"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Terminating'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Unchecked'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}}; 2 -> begin (V5 = ('dn--un--fromBuf_TTC_PartialReason'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Terminating"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_SizeChange'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; 2 -> {'Idris.Prelude.Types.Right', 2}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"SizeChange"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_SCCall'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V60 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V11, V12, V13)) end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V14, V15)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--toBuf_TTC_SizeChange'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> ('dn--un--fromBuf_TTC_SizeChange'(V19, V20)) end end}}, V8, V9, V10)) end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V23, V24, V25)) end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V26, V27)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un--toBuf_TTC_SizeChange'(V28, V29, V30)) end end end, fun (V31) -> fun (V32) -> ('dn--un--fromBuf_TTC_SizeChange'(V31, V32)) end end}}, V21, V22)) end end}, V5, V6, V7)) end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V38, V39, V40)) end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V41, V42)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V43) -> fun (V44) -> fun (V45) -> ('dn--un--toBuf_TTC_SizeChange'(V43, V44, V45)) end end end, fun (V46) -> fun (V47) -> ('dn--un--fromBuf_TTC_SizeChange'(V46, V47)) end end}}, V35, V36, V37)) end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V50, V51, V52)) end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V53, V54)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V55) -> fun (V56) -> fun (V57) -> ('dn--un--toBuf_TTC_SizeChange'(V55, V56, V57)) end end end, fun (V58) -> fun (V59) -> ('dn--un--fromBuf_TTC_SizeChange'(V58, V59)) end end}}, V48, V49)) end end}, V33, V34)) end end}, V0, V1))), case V60 of {'Idris.Prelude.Types.Left', E2} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkSCCall', V4, V62}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_RigCount'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V5, V6)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}; 1 -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}; 2 -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"RigCount"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_RewriteNames'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.MkRewriteNs', V4, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_PrimNames'(V0, V1) -> begin (V7 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC_Name'(V2, V3, V4)) end end end, fun (V5) -> fun (V6) -> ('dn--un--fromBuf_TTC_Name'(V5, V6)) end end}, V0, V1))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V15 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--toBuf_TTC_Name'(V10, V11, V12)) end end end, fun (V13) -> fun (V14) -> ('dn--un--fromBuf_TTC_Name'(V13, V14)) end end}, V0, V1))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--toBuf_TTC_Name'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> ('dn--un--fromBuf_TTC_Name'(V21, V22)) end end}, V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V31 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V26) -> fun (V27) -> fun (V28) -> ('dn--un--toBuf_TTC_Name'(V26, V27, V28)) end end end, fun (V29) -> fun (V30) -> ('dn--un--fromBuf_TTC_Name'(V29, V30)) end end}, V0, V1))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.MkPrimNs', V9, V17, V25, V33}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Pat'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('dn--un--fromBuf_TTC_Pat'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PAs', V7, V10, V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V14 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> begin (V31 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V26) -> fun (V27) -> fun (V28) -> ('dn--un--toBuf_TTC_Pat'(V26, V27, V28)) end end end, fun (V29) -> fun (V30) -> ('dn--un--fromBuf_TTC_Pat'(V29, V30)) end end}, V0, V1))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PCon', V16, V19, V22, V25, V33}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V34 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V40 of {'Idris.Prelude.Types.Left', E22} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V42) -> begin (V48 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V43) -> fun (V44) -> fun (V45) -> ('dn--un--toBuf_TTC_Pat'(V43, V44, V45)) end end end, fun (V46) -> fun (V47) -> ('dn--un--fromBuf_TTC_Pat'(V46, V47)) end end}, V0, V1))), case V48 of {'Idris.Prelude.Types.Left', E24} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PTyCon', V36, V39, V42, V50}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V51 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V51 of {'Idris.Prelude.Types.Left', E26} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V53) -> begin (V54 = ('dn--un--fromBuf_TTC_Constant'(V0, V1))), case V54 of {'Idris.Prelude.Types.Left', E28} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PConst', V53, V56}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V57 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> begin (V60 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V60 of {'Idris.Prelude.Types.Left', E32} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V62) -> begin (V63 = ('dn--un--fromBuf_TTC_Pat'(V0, V1))), case V63 of {'Idris.Prelude.Types.Left', E34} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V65) -> begin (V66 = ('dn--un--fromBuf_TTC_Pat'(V0, V1))), case V66 of {'Idris.Prelude.Types.Left', E36} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PArrow', V59, V62, V65, V68}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V69 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V69 of {'Idris.Prelude.Types.Left', E38} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V71) -> begin (V72 = ('dn--un--fromBuf_TTC_LazyReason'(V0, V1))), case V72 of {'Idris.Prelude.Types.Left', E40} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V74) -> begin (V75 = ('dn--un--fromBuf_TTC_Pat'(V0, V1))), case V75 of {'Idris.Prelude.Types.Left', E42} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V77) -> begin (V78 = ('dn--un--fromBuf_TTC_Pat'(V0, V1))), case V78 of {'Idris.Prelude.Types.Left', E44} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PDelay', V71, V74, V77, V80}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V81 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V81 of {'Idris.Prelude.Types.Left', E46} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V83) -> begin (V84 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V84 of {'Idris.Prelude.Types.Left', E48} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V83, V86}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V87 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V87 of {'Idris.Prelude.Types.Left', E50} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V89) -> begin (V90 = ('dn--un--fromBuf_TTC_(Term $vars)'([], V0, V1))), case V90 of {'Idris.Prelude.Types.Left', E52} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V89, V92}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Pat"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_PartialReason'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}}; 1 -> begin (V10 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--toBuf_TTC_Name'(V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> ('dn--un--fromBuf_TTC_Name'(V8, V9)) end end}, V0, V1))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V12}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V18 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--toBuf_TTC_Name'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> ('dn--un--fromBuf_TTC_Name'(V16, V17)) end end}, V0, V1))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V20}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"PartialReason"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_PairNames'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.MkPairNs', V4, V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_PMDefInfo'(V0, V1) -> begin (V2 = ('dn--un--fromBuf_TTC_HoleInfo'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkPMDefInfo', V4, V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_OriginDesc'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Idris.Prelude.Types.Right', fun (V6) -> {'Idris.Core.FC.PhysicalIdrSrc', V6} end} end, fun (V7) -> ('dn--un--fromBuf_TTC_ModuleIdent'(V0, V7)) end, V1)); 1 -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> {'Idris.Core.FC.PhysicalPkgSrc', V9} end} end, fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V10)) end, V1)); 2 -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> {'Idris.Core.FC.Virtual', V12} end} end, fun (V13) -> ('dn--un--fromBuf_TTC_VirtualIdent'(V0, V13)) end, V1)); _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"OriginDesc"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Namespace'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name.Namespace':'un--unsafeFoldNamespace'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V8, V9)) end end}, V0, V5)) end, V1)).
'dn--un--fromBuf_TTC_NameType'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bound'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Func'}}; 2 -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DataCon', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V11 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TyCon', V13, V16}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"NameType"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Name'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('dn--un--fromBuf_TTC_Namespace'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V11 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V13}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', V16, V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V20 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.PV', V22, V25}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V26 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V26 of {'Idris.Prelude.Types.Left', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V28) -> begin (V29 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V29 of {'Idris.Prelude.Types.Left', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.DN', V28, V31}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V32 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', {'Idris.Core.Name.Field', V34}}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V45 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V35, V36, V37)) end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V38, V39)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V40, V41, V42)) end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V43, V44)) end end}}, V0, V1))), case V45 of {'Idris.Prelude.Types.Left', E22} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V47) -> begin (V48 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V48 of {'Idris.Prelude.Types.Left', E24} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Nested', V47, V50}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V51 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V51 of {'Idris.Prelude.Types.Left', E26} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V54 of {'Idris.Prelude.Types.Left', E28} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.CaseBlock', V53, V56}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V57 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V60 of {'Idris.Prelude.Types.Left', E32} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.WithBlock', V59, V62}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Name"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_ModuleIdent'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name.Namespace':'un--unsafeFoldModuleIdent'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V8, V9)) end end}, V0, V5)) end, V1)).
'dn--un--fromBuf_TTC_LazyReason'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; 2 -> {'Idris.Prelude.Types.Right', 2}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"LazyReason"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_HoleInfo'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.NotHole'}}; 1 -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.SolvedHole', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"HoleInfo"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_GlobalDef'(V0, V1) -> begin (V7 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--toBuf_TTC_CDef'(V2, V3, V4)) end end end, fun (V5) -> fun (V6) -> ('dn--un--fromBuf_TTC_CDef'(V5, V6)) end end}, V0, V1))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V65 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--toBuf_TTC_Name'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> ('dn--un--fromBuf_TTC_Name'(V19, V20)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V21, V22, V23)) end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V24, V25)) end end}}, V13, V14, V15)) end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un--toBuf_TTC_Name'(V28, V29, V30)) end end end, fun (V31) -> fun (V32) -> ('dn--un--fromBuf_TTC_Name'(V31, V32)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V33, V34, V35)) end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V36, V37)) end end}}, V26, V27)) end end}, V10, V11, V12)) end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V43) -> fun (V44) -> fun (V45) -> ('dn--un--toBuf_TTC_Name'(V43, V44, V45)) end end end, fun (V46) -> fun (V47) -> ('dn--un--fromBuf_TTC_Name'(V46, V47)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V48, V49, V50)) end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V51, V52)) end end}}, V40, V41, V42)) end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V55) -> fun (V56) -> fun (V57) -> ('dn--un--toBuf_TTC_Name'(V55, V56, V57)) end end end, fun (V58) -> fun (V59) -> ('dn--un--fromBuf_TTC_Name'(V58, V59)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V60, V61, V62)) end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V63, V64)) end end}}, V53, V54)) end end}, V38, V39)) end end}, V0, V1))), case V65 of {'Idris.Prelude.Types.Left', E2} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V67) -> begin (V69 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V68) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'(V68)) end, V67))), begin (V70 = ('dn--un--fromBuf_TTC_FC'(V0, V1))), case V70 of {'Idris.Prelude.Types.Left', E4} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V72) -> begin (V73 = ('dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V73 of {'Idris.Prelude.Types.Left', E6} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V75) -> begin (V76 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V76 of {'Idris.Prelude.Types.Left', E8} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V78) -> begin (V134 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V85) -> fun (V86) -> fun (V87) -> ('dn--un--toBuf_TTC_Name'(V85, V86, V87)) end end end, fun (V88) -> fun (V89) -> ('dn--un--fromBuf_TTC_Name'(V88, V89)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V90, V91, V92)) end end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V93, V94)) end end}}, V82, V83, V84)) end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V97) -> fun (V98) -> fun (V99) -> ('dn--un--toBuf_TTC_Name'(V97, V98, V99)) end end end, fun (V100) -> fun (V101) -> ('dn--un--fromBuf_TTC_Name'(V100, V101)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V102, V103, V104)) end end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V105, V106)) end end}}, V95, V96)) end end}, V79, V80, V81)) end end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V112) -> fun (V113) -> fun (V114) -> ('dn--un--toBuf_TTC_Name'(V112, V113, V114)) end end end, fun (V115) -> fun (V116) -> ('dn--un--fromBuf_TTC_Name'(V115, V116)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V117, V118, V119)) end end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V120, V121)) end end}}, V109, V110, V111)) end end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V124) -> fun (V125) -> fun (V126) -> ('dn--un--toBuf_TTC_Name'(V124, V125, V126)) end end end, fun (V127) -> fun (V128) -> ('dn--un--fromBuf_TTC_Name'(V127, V128)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V129, V130, V131)) end end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V132, V133)) end end}}, V122, V123)) end end}, V107, V108)) end end}, V0, V1))), case V134 of {'Idris.Prelude.Types.Left', E10} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V136) -> begin (V138 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V137) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'(V137)) end, V136))), begin (V139 = ('dn--un--fromBuf_TTC_Def'(V0, V1))), case V139 of {'Idris.Prelude.Types.Left', E12} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V141) -> case ('Idris.Idris2.Core.Name':'un--isUserName'(V78)) of 1 -> begin (V142 = ('dn--un--fromBuf_TTC_(Term $vars)'([], V0, V1))), case V142 of {'Idris.Prelude.Types.Left', E14} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V144) -> begin (V150 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V145, V146, V147)) end end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V148, V149)) end end}, V0, V1))), case V150 of {'Idris.Prelude.Types.Left', E16} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V152) -> begin (V158 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V153, V154, V155)) end end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V156, V157)) end end}, V0, V1))), case V158 of {'Idris.Prelude.Types.Left', E18} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V160) -> begin (V166 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V161, V162, V163)) end end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V164, V165)) end end}, V0, V1))), case V166 of {'Idris.Prelude.Types.Left', E20} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V168) -> begin (V174 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V169, V170, V171)) end end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V172, V173)) end end}, V0, V1))), case V174 of {'Idris.Prelude.Types.Left', E22} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V176) -> begin (V182 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V177) -> fun (V178) -> fun (V179) -> ('dn--un--toBuf_TTC_Name'(V177, V178, V179)) end end end, fun (V180) -> fun (V181) -> ('dn--un--fromBuf_TTC_Name'(V180, V181)) end end}, V0, V1))), case V182 of {'Idris.Prelude.Types.Left', E24} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V184) -> begin (V185 = ('dn--un--fromBuf_TTC_Visibility'(V0, V1))), case V185 of {'Idris.Prelude.Types.Left', E26} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V187) -> begin (V188 = ('dn--un--fromBuf_TTC_Totality'(V0, V1))), case V188 of {'Idris.Prelude.Types.Left', E28} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V190) -> begin (V196 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V191) -> fun (V192) -> fun (V193) -> ('dn--un--toBuf_TTC_DefFlag'(V191, V192, V193)) end end end, fun (V194) -> fun (V195) -> ('dn--un--fromBuf_TTC_DefFlag'(V194, V195)) end end}, V0, V1))), case V196 of {'Idris.Prelude.Types.Left', E30} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V198) -> begin (V199 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V199 of {'Idris.Prelude.Types.Left', E32} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V201) -> begin (V202 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V202 of {'Idris.Prelude.Types.Left', E34} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V204) -> begin (V210 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V205) -> fun (V206) -> fun (V207) -> ('dn--un--toBuf_TTC_SCCall'(V205, V206, V207)) end end end, fun (V208) -> fun (V209) -> ('dn--un--fromBuf_TTC_SCCall'(V208, V209)) end end}, V0, V1))), case V210 of {'Idris.Prelude.Types.Left', E36} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V212) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkGlobalDef', V72, V78, V144, V152, V160, V168, V176, V75, V184, V187, V190, V198, V138, V69, V201, V204, 1, V141, V9, V212}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkGlobalDef', V72, V78, {'Idris.Core.TT.Erased', V72, 0}, [], [], [], [], V75, [], 2, ('Idris.Idris2.Core.TT':'un--unchecked'()), [], V138, V69, 0, 0, 1, V141, V9, []}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_FC'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('dn--un--fromBuf_TTC_OriginDesc'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V18 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V11, V12)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V16, V17)) end end}}, V0, V1))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V31 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V21, V22, V23)) end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V24, V25)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V26, V27, V28)) end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V29, V30)) end end}}, V0, V1))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.MkFC', V7, V20, V33}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.EmptyFC'}}; 2 -> begin (V34 = ('dn--un--fromBuf_TTC_OriginDesc'(V0, V1))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> begin (V47 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V37, V38, V39)) end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V40, V41)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V42, V43, V44)) end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V45, V46)) end end}}, V0, V1))), case V47 of {'Idris.Prelude.Types.Left', E10} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V49) -> begin (V60 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V50, V51, V52)) end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V53, V54)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V55, V56, V57)) end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V58, V59)) end end}}, V0, V1))), case V60 of {'Idris.Prelude.Types.Left', E12} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.MkVirtualFC', V36, V49, V62}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"FC"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_DefFlag'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 2 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Inline'}}; 3 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Invertible'}}; 4 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Overloadable'}}; 5 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.TCInline'}}; 6 -> begin (V5 = ('dn--un--fromBuf_TTC_TotalReq'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.SetTotal', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.BlockedHint'}}; 8 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Macro'}}; 9 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.PartialEval', []}}; 10 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.AllGuarded'}}; 11 -> begin (V8 = ('dn--un--fromBuf_TTC_ConInfo'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.ConType', V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 12 -> begin (V11 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Identity', V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"DefFlag"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Def'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.None'}}; 1 -> begin (V5 = ('dn--un--fromBuf_TTC_PMDefInfo'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--toBuf_TTC_Name'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> ('dn--un--fromBuf_TTC_Name'(V11, V12)) end end}, V0, V1))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('dn--un--fromBuf_TTC_(CaseTree $vars)'(V15, V0, V1))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V170 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_((DPair $a) $p)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--toBuf_TTC_Name'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> ('dn--un--fromBuf_TTC_Name'(V28, V29)) end end}, V22, V23, V24)) end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V32) -> fun (V33) -> fun (V34) -> ('dn--un--toBuf_TTC_Name'(V32, V33, V34)) end end end, fun (V35) -> fun (V36) -> ('dn--un--fromBuf_TTC_Name'(V35, V36)) end end}, V30, V31)) end end}, fun (V37) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V37, V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V37, V44, V45)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V49, V50)) end end, fun (V51) -> fun (V52) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V51, V52)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V53) -> fun (V54) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V53, V54)) end end, fun (V55) -> fun (V56) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V55, V56)) end end}}, V46, V47, V48)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V59) -> fun (V60) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V59, V60)) end end, fun (V61) -> fun (V62) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V61, V62)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V63) -> fun (V64) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V63, V64)) end end, fun (V65) -> fun (V66) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V65, V66)) end end}}, V57, V58)) end end}}, V38, V39, V40)) end end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V69) -> fun (V70) -> fun (V71) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V37, V69, V70, V71)) end end end, fun (V72) -> fun (V73) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V37, V72, V73)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V77) -> fun (V78) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V77, V78)) end end, fun (V79) -> fun (V80) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V79, V80)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V81) -> fun (V82) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V81, V82)) end end, fun (V83) -> fun (V84) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V83, V84)) end end}}, V74, V75, V76)) end end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V87) -> fun (V88) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V87, V88)) end end, fun (V89) -> fun (V90) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V89, V90)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V91) -> fun (V92) -> ('dn--un--toBuf_TTC_(Term $vars)'(V37, V91, V92)) end end, fun (V93) -> fun (V94) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V37, V93, V94)) end end}}, V85, V86)) end end}}, V67, V68)) end end} end}, V19, V20, V21)) end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_((DPair $a) $p)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V100) -> fun (V101) -> fun (V102) -> ('dn--un--toBuf_TTC_Name'(V100, V101, V102)) end end end, fun (V103) -> fun (V104) -> ('dn--un--fromBuf_TTC_Name'(V103, V104)) end end}, V97, V98, V99)) end end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V107) -> fun (V108) -> fun (V109) -> ('dn--un--toBuf_TTC_Name'(V107, V108, V109)) end end end, fun (V110) -> fun (V111) -> ('dn--un--fromBuf_TTC_Name'(V110, V111)) end end}, V105, V106)) end end}, fun (V112) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V116) -> fun (V117) -> fun (V118) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V112, V116, V117, V118)) end end end, fun (V119) -> fun (V120) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V112, V119, V120)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V124) -> fun (V125) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V124, V125)) end end, fun (V126) -> fun (V127) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V126, V127)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V128) -> fun (V129) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V128, V129)) end end, fun (V130) -> fun (V131) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V130, V131)) end end}}, V121, V122, V123)) end end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V134) -> fun (V135) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V134, V135)) end end, fun (V136) -> fun (V137) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V136, V137)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V138) -> fun (V139) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V138, V139)) end end, fun (V140) -> fun (V141) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V140, V141)) end end}}, V132, V133)) end end}}, V113, V114, V115)) end end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V144) -> fun (V145) -> fun (V146) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V112, V144, V145, V146)) end end end, fun (V147) -> fun (V148) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V112, V147, V148)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V149) -> fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V152) -> fun (V153) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V152, V153)) end end, fun (V154) -> fun (V155) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V154, V155)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V156) -> fun (V157) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V156, V157)) end end, fun (V158) -> fun (V159) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V158, V159)) end end}}, V149, V150, V151)) end end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V162) -> fun (V163) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V162, V163)) end end, fun (V164) -> fun (V165) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V164, V165)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V166) -> fun (V167) -> ('dn--un--toBuf_TTC_(Term $vars)'(V112, V166, V167)) end end, fun (V168) -> fun (V169) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V112, V168, V169)) end end}}, V160, V161)) end end}}, V142, V143)) end end} end}, V95, V96)) end end}, V0, V1))), case V170 of {'Idris.Prelude.Types.Left', E8} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.PMDef', V7, V15, V18, {'Idris.Core.CaseTree.Unmatched', <<""/utf8>>}, V172}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V173 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V173 of {'Idris.Prelude.Types.Left', E10} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V175) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.ExternDef', V175}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V176 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V176 of {'Idris.Prelude.Types.Left', E12} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V178) -> begin (V183 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V179, V180)) end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V181, V182)) end end}, V0, V1))), case V183 of {'Idris.Prelude.Types.Left', E14} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V185) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.ForeignDef', V178, V185}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V186 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V186 of {'Idris.Prelude.Types.Left', E16} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V188) -> begin (V189 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V189 of {'Idris.Prelude.Types.Left', E18} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V191) -> begin (V217 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V195) -> fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V195, V196, V197)) end end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V198, V199)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V200) -> fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V200, V201, V202)) end end end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V203, V204)) end end}}, V192, V193, V194)) end end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V207, V208, V209)) end end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V210, V211)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V212, V213, V214)) end end end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V215, V216)) end end}}, V205, V206)) end end}, V0, V1))), case V217 of {'Idris.Prelude.Types.Left', E20} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V219) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.DCon', V188, V191, V219}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V220 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V220 of {'Idris.Prelude.Types.Left', E22} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V222) -> begin (V223 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V223 of {'Idris.Prelude.Types.Left', E24} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V225) -> begin (V231 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V226, V227, V228)) end end end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V229, V230)) end end}, V0, V1))), case V231 of {'Idris.Prelude.Types.Left', E26} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V233) -> begin (V239 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V234) -> fun (V235) -> fun (V236) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V234, V235, V236)) end end end, fun (V237) -> fun (V238) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V237, V238)) end end}, V0, V1))), case V239 of {'Idris.Prelude.Types.Left', E28} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V241) -> begin (V242 = ('dn--un--fromBuf_TTC_TypeFlags'(V0, V1))), case V242 of {'Idris.Prelude.Types.Left', E30} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V244) -> begin (V250 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V245) -> fun (V246) -> fun (V247) -> ('dn--un--toBuf_TTC_Name'(V245, V246, V247)) end end end, fun (V248) -> fun (V249) -> ('dn--un--fromBuf_TTC_Name'(V248, V249)) end end}, V0, V1))), case V250 of {'Idris.Prelude.Types.Left', E32} -> (fun (V251) -> {'Idris.Prelude.Types.Left', V251} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V252) -> begin (V258 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V253) -> fun (V254) -> fun (V255) -> ('dn--un--toBuf_TTC_Name'(V253, V254, V255)) end end end, fun (V256) -> fun (V257) -> ('dn--un--fromBuf_TTC_Name'(V256, V257)) end end}, V0, V1))), case V258 of {'Idris.Prelude.Types.Left', E34} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V260) -> begin (V276 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V261) -> fun (V262) -> fun (V263) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V264) -> fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V264, V265, V266)) end end end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V267, V268)) end end}, V261, V262, V263)) end end end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V271) -> fun (V272) -> fun (V273) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V271, V272, V273)) end end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V274, V275)) end end}, V269, V270)) end end}, V0, V1))), case V276 of {'Idris.Prelude.Types.Left', E36} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V278) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.TCon', V222, V225, V233, V241, V244, V252, V260, V278}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V279 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V279 of {'Idris.Prelude.Types.Left', E38} -> (fun (V280) -> {'Idris.Prelude.Types.Left', V280} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V281) -> begin (V282 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V0, V1))), case V282 of {'Idris.Prelude.Types.Left', E40} -> (fun (V283) -> {'Idris.Prelude.Types.Left', V283} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V284) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Hole', V281, ('Idris.Idris2.Core.Context.Context':'un--holeInit'(V284))}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V285 = ('dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V285 of {'Idris.Prelude.Types.Left', E42} -> (fun (V286) -> {'Idris.Prelude.Types.Left', V286} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V287) -> begin (V288 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V288 of {'Idris.Prelude.Types.Left', E44} -> (fun (V289) -> {'Idris.Prelude.Types.Left', V289} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V290) -> begin (V291 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V291 of {'Idris.Prelude.Types.Left', E46} -> (fun (V292) -> {'Idris.Prelude.Types.Left', V292} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V293) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.BySearch', V287, V290, V293}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V294 = ('dn--un--fromBuf_TTC_(Term $vars)'([], V0, V1))), case V294 of {'Idris.Prelude.Types.Left', E48} -> (fun (V295) -> {'Idris.Prelude.Types.Left', V295} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V296) -> begin (V297 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V297 of {'Idris.Prelude.Types.Left', E50} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V299) -> begin (V305 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V300) -> fun (V301) -> fun (V302) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V300, V301, V302)) end end end, fun (V303) -> fun (V304) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V303, V304)) end end}, V0, V1))), case V305 of {'Idris.Prelude.Types.Left', E52} -> (fun (V306) -> {'Idris.Prelude.Types.Left', V306} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V307) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Guess', V296, V299, V307}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.ImpBind'}}; 10 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Delayed'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Def"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Covering'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}}; 1 -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> ('dn--un--toBuf_TTC_(Term $vars)'([], V5, V6)) end end, fun (V7) -> fun (V8) -> ('dn--un--fromBuf_TTC_(Term $vars)'([], V7, V8)) end end}, V0, V1))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V11}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--toBuf_TTC_Name'(V12, V13, V14)) end end end, fun (V15) -> fun (V16) -> ('dn--un--fromBuf_TTC_Name'(V15, V16)) end end}, V0, V1))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V19}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Covering"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Constant'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V8 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Integer'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BI', V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V11 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B8', V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B16', V16}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V0, V1))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B32', V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V20 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Integer'(V0, V1))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B64', V22}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Str', V25}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V26 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Char'(V0, V1))), case V26 of {'Idris.Prelude.Types.Left', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ch', V28}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V29 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Double'(V0, V1))), case V29 of {'Idris.Prelude.Types.Left', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Db', V31}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.WorldVal'}}; 10 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IntType'}}; 11 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IntegerType'}}; 12 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits8Type'}}; 13 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits16Type'}}; 14 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits32Type'}}; 15 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits64Type'}}; 16 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StringType'}}; 17 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.CharType'}}; 18 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleType'}}; 19 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.WorldType'}}; 20 -> begin (V32 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Integer'(V0, V1))), case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I32', V34}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 21 -> begin (V35 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Integer'(V0, V1))), case V35 of {'Idris.Prelude.Types.Left', E22} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I64', V37}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 22 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int32Type'}}; 23 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int64Type'}}; 24 -> begin (V38 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Integer'(V0, V1))), case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I8', V40}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 25 -> begin (V41 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Integer'(V0, V1))), case V41 of {'Idris.Prelude.Types.Left', E26} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I16', V43}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 26 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int8Type'}}; 27 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int16Type'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Constant"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_ConInfo'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; 2 -> {'Idris.Prelude.Types.Right', 2}; 3 -> {'Idris.Prelude.Types.Right', 3}; 4 -> {'Idris.Prelude.Types.Right', 4}; 5 -> {'Idris.Prelude.Types.Right', 5}; 6 -> {'Idris.Prelude.Types.Right', 6}; 7 -> {'Idris.Prelude.Types.Right', 7}; 8 -> {'Idris.Prelude.Types.Right', 8}; 9 -> {'Idris.Prelude.Types.Right', 9}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"ConInfo"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_CG'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.Chez'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.ChezSep'}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.Racket'}}; 3 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.Gambit'}}; 4 -> begin (V5 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.Other', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.Node'}}; 6 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.Javascript'}}; 7 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.RefC'}}; 8 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.VMCodeInterp'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"CG"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_CFType'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFUnit'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFInt'}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFUnsigned8'}}; 3 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFUnsigned16'}}; 4 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFUnsigned32'}}; 5 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFUnsigned64'}}; 6 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFString'}}; 7 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFDouble'}}; 8 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFChar'}}; 9 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFPtr'}}; 10 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFWorld'}}; 11 -> begin (V5 = ('dn--un--fromBuf_TTC_CFType'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--fromBuf_TTC_CFType'(V0, V1))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFFun', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 12 -> begin (V11 = ('dn--un--fromBuf_TTC_CFType'(V0, V1))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFIORes', V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 13 -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V0, V1))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V40 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V22, V23)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--toBuf_TTC_CFType'(V24, V25, V26)) end end end, fun (V27) -> fun (V28) -> ('dn--un--fromBuf_TTC_CFType'(V27, V28)) end end}}, V17, V18, V19)) end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V33, V34)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--toBuf_TTC_CFType'(V35, V36, V37)) end end end, fun (V38) -> fun (V39) -> ('dn--un--fromBuf_TTC_CFType'(V38, V39)) end end}}, V29, V30)) end end}, V0, V1))), case V40 of {'Idris.Prelude.Types.Left', E10} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFStruct', V16, V42}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 14 -> begin (V43 = ('dn--un--fromBuf_TTC_Name'(V0, V1))), case V43 of {'Idris.Prelude.Types.Left', E12} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V45) -> begin (V51 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('dn--un--toBuf_TTC_CFType'(V46, V47, V48)) end end end, fun (V49) -> fun (V50) -> ('dn--un--fromBuf_TTC_CFType'(V49, V50)) end end}, V0, V1))), case V51 of {'Idris.Prelude.Types.Left', E14} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFUser', V45, V53}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 15 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFGCPtr'}}; 16 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFBuffer'}}; 17 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFInt8'}}; 18 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFInt16'}}; 19 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFInt32'}}; 20 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFInt64'}}; 21 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFForeignObj'}}; 22 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CFInteger'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"CFType"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_CDef'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> begin (V10 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--toBuf_TTC_Name'(V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> ('dn--un--fromBuf_TTC_Name'(V8, V9)) end end}, V0, V1))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V12, V0, V1))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkFun', V12, V15}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V21 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V19, V20)) end end}, V0, V1))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V0, V1))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> begin (V32 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V27, V28, V29)) end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V30, V31)) end end}, V0, V1))), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkCon', V23, V26, V34}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V39 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V37, V38)) end end}, V0, V1))), case V39 of {'Idris.Prelude.Types.Left', E12} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V41) -> begin (V47 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--toBuf_TTC_CFType'(V42, V43, V44)) end end end, fun (V45) -> fun (V46) -> ('dn--un--fromBuf_TTC_CFType'(V45, V46)) end end}, V0, V1))), case V47 of {'Idris.Prelude.Types.Left', E14} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V49) -> begin (V50 = ('dn--un--fromBuf_TTC_CFType'(V0, V1))), case V50 of {'Idris.Prelude.Types.Left', E16} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkForeign', V41, V49, V52}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V53 = ('dn--un--fromBuf_TTC_(CExp $vars)'([], V0, V1))), case V53 of {'Idris.Prelude.Types.Left', E18} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkError', V55}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"CDef"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V11 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V6, V7, V8)) end end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V9, V10)) end end}, V1, V2))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V1, V2))), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> begin (V20 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V17) -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Term"/utf8>>, V17)) end end, fun () -> fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', V18} end end end, ('un--getName'(V16, V0))))(V2))), case V20 of {'Idris.Prelude.Types.Left', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V13, V16}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V23 = ('dn--un--fromBuf_TTC_NameType'(V1, V2))), case V23 of {'Idris.Prelude.Types.Left', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V25) -> begin (V26 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V26 of {'Idris.Prelude.Types.Left', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V25, V28}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V29 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V29 of {'Idris.Prelude.Types.Left', E15} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V31) -> begin (V36 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V32) -> fun (V33) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V32, V33)) end end, fun (V34) -> fun (V35) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V34, V35)) end end}, V1, V2))), case V36 of {'Idris.Prelude.Types.Left', E17} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V31, 0, V38}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V39 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V39 of {'Idris.Prelude.Types.Left', E19} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V41) -> begin (V42 = ('dn--un--fromBuf_TTC_(Binder (Term $vars))'(V0, V1, V2))), case V42 of {'Idris.Prelude.Types.Left', E21} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V44) -> begin (V45 = ('dn--un--fromBuf_TTC_(Term $vars)'([V41 | V0], V1, V2))), case V45 of {'Idris.Prelude.Types.Left', E23} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V41, V44, V47}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V48 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V48 of {'Idris.Prelude.Types.Left', E25} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V50) -> begin (V51 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V51 of {'Idris.Prelude.Types.Left', E27} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V50, V53}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V54 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V54 of {'Idris.Prelude.Types.Left', E29} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V56) -> begin (V57 = ('dn--un--fromBuf_TTC_UseSide'(V1, V2))), case V57 of {'Idris.Prelude.Types.Left', E31} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V59) -> begin (V60 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V60 of {'Idris.Prelude.Types.Left', E33} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V59, V56, V62}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V63 = ('dn--un--fromBuf_TTC_LazyReason'(V1, V2))), case V63 of {'Idris.Prelude.Types.Left', E35} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V65) -> begin (V66 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V66 of {'Idris.Prelude.Types.Left', E37} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V65, V68}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V69 = ('dn--un--fromBuf_TTC_LazyReason'(V1, V2))), case V69 of {'Idris.Prelude.Types.Left', E39} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V71) -> begin (V72 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V72 of {'Idris.Prelude.Types.Left', E41} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V74) -> begin (V75 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V75 of {'Idris.Prelude.Types.Left', E43} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V71, V74, V77}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V78 = ('dn--un--fromBuf_TTC_LazyReason'(V1, V2))), case V78 of {'Idris.Prelude.Types.Left', E45} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V80) -> begin (V81 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V81 of {'Idris.Prelude.Types.Left', E47} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V80, V83}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> begin (V84 = ('dn--un--fromBuf_TTC_Constant'(V1, V2))), case V84 of {'Idris.Prelude.Types.Left', E49} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V86}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 10 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Erased', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0}}; 11 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TType', ('Idris.Idris2.Core.FC':'un--emptyFC'())}}; 12 -> begin (V87 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V87 of {'Idris.Prelude.Types.Left', E51} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V89) -> begin (V94 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V90) -> fun (V91) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V90, V91)) end end, fun (V92) -> fun (V93) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V92, V93)) end end}, V1, V2))), case V94 of {'Idris.Prelude.Types.Left', E53} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V96) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--apply'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V89, V96))} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V102 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Bool'(V97, V98, V99)) end end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V100, V101)) end end}, V1, V2))), case V102 of {'Idris.Prelude.Types.Left', E2} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V104) -> begin (V105 = ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((V5 - 13) rem 9223372036854775808)))))), case ('un--getName'(V105, V0)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V104, V105}} end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Term"/utf8>>, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(PrimFn $n)'(V0, V1) -> case V0 of 0 -> fun (V2) -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"PrimFn"/utf8>>, V2)) end; _ -> begin (V3 = (V0 - 1)), case V3 of 0 -> fun (V4) -> ('nested--11825-6472--in--un--fromBuf1'(V1, V0, V4)) end; _ -> begin (V5 = (V3 - 1)), case V5 of 0 -> fun (V6) -> ('nested--11825-6473--in--un--fromBuf2'(V1, V0, V6)) end; _ -> begin (V7 = (V5 - 1)), fun (V8) -> case V7 of 0 -> ('nested--11825-6474--in--un--fromBuf3'(V1, V0, V8)); _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"PrimFn"/utf8>>, V8)) end end end end end end end end.
'dn--un--fromBuf_TTC_(PiInfo $t)'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}}; 3 -> begin (V8 = case V0 of {'Idris.Core.Binary.Prims.dn--un--__mkTTC', E2, E3} -> (fun (V6, V7) -> ((V7(V1))(V2)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"PiInfo"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(CaseTree $vars)'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V6 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--toBuf_TTC_(CaseAlt $vars)'(V0, V12, V13, V14)) end end end, fun (V15) -> fun (V16) -> ('dn--un--fromBuf_TTC_(CaseAlt $vars)'(V0, V15, V16)) end end}, V1, V2))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V8, V11, {'Idris.Core.TT.Erased', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0}, V19}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V20 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', 0, V22}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V23 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V1, V2))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Unmatched', V25}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Impossible'}}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"CaseTree"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(CaseAlt $vars)'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V6 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--toBuf_TTC_Name'(V12, V13, V14)) end end end, fun (V15) -> fun (V16) -> ('dn--un--fromBuf_TTC_Name'(V15, V16)) end end}, V1, V2))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('dn--un--fromBuf_TTC_(CaseTree $vars)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V0)), V1, V2))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V8, V11, V19, V22}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V23 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> begin (V29 = ('dn--un--fromBuf_TTC_(CaseTree $vars)'([V25 | [V28 | V0]], V1, V2))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V25, V28, V31}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V32 = ('dn--un--fromBuf_TTC_Constant'(V1, V2))), case V32 of {'Idris.Prelude.Types.Left', E16} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V34) -> begin (V35 = ('dn--un--fromBuf_TTC_(CaseTree $vars)'(V0, V1, V2))), case V35 of {'Idris.Prelude.Types.Left', E18} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V34, V37}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V38 = ('dn--un--fromBuf_TTC_(CaseTree $vars)'(V0, V1, V2))), case V38 of {'Idris.Prelude.Types.Left', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V40}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"CaseAlt"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V6 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> case ('un--getName'(V11, V0)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CLocal', V11, V8}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"CExp"/utf8>>, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V13 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> begin (V16 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V16 of {'Idris.Prelude.Types.Left', E9} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CRef', V15, V18}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V19 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V19 of {'Idris.Prelude.Types.Left', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V21) -> begin (V22 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V22 of {'Idris.Prelude.Types.Left', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V24) -> begin (V25 = ('dn--un--fromBuf_TTC_(CExp $vars)'([V24 | V0], V1, V2))), case V25 of {'Idris.Prelude.Types.Left', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CLam', V21, V24, V27}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V28 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> begin (V31 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V31 of {'Idris.Prelude.Types.Left', E19} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Bool'(V1, V2))), case V34 of {'Idris.Prelude.Types.Left', E21} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V36) -> begin (V37 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2))), case V37 of {'Idris.Prelude.Types.Left', E23} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V39) -> begin (V40 = ('dn--un--fromBuf_TTC_(CExp $vars)'([V33 | V0], V1, V2))), case V40 of {'Idris.Prelude.Types.Left', E25} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CLet', V30, V33, V36, V39, V42}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V43 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V43 of {'Idris.Prelude.Types.Left', E27} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V45) -> begin (V46 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2))), case V46 of {'Idris.Prelude.Types.Left', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V48) -> begin (V54 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V52, V53)) end end}, V1, V2))), case V54 of {'Idris.Prelude.Types.Left', E31} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CApp', V45, V48, V56}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V57 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V57 of {'Idris.Prelude.Types.Left', E33} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V59) -> begin (V60 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V60 of {'Idris.Prelude.Types.Left', E35} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V62) -> begin (V63 = ('dn--un--fromBuf_TTC_ConInfo'(V1, V2))), case V63 of {'Idris.Prelude.Types.Left', E37} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V65) -> begin (V71 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V66, V67, V68)) end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V69, V70)) end end}, V1, V2))), case V71 of {'Idris.Prelude.Types.Left', E39} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V73) -> begin (V79 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V74) -> fun (V75) -> fun (V76) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V74, V75, V76)) end end end, fun (V77) -> fun (V78) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V77, V78)) end end}, V1, V2))), case V79 of {'Idris.Prelude.Types.Left', E41} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CCon', V59, V62, V65, V73, V81}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 6 -> begin (V82 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V82 of {'Idris.Prelude.Types.Left', E43} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V1, V2))), case V85 of {'Idris.Prelude.Types.Left', E45} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V87) -> begin (V88 = (('dn--un--fromBuf_TTC_(PrimFn $n)'(V87, V1))(V2))), case V88 of {'Idris.Prelude.Types.Left', E47} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V90) -> begin (V96 = (('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_((Vect $n) $a)'(V87, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V91) -> fun (V92) -> fun (V93) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V91, V92, V93)) end end end, fun (V94) -> fun (V95) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V94, V95)) end end}, V1))(V2))), case V96 of {'Idris.Prelude.Types.Left', E49} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V98) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.COp', V87, V84, V90, V98}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> begin (V99 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V99 of {'Idris.Prelude.Types.Left', E51} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V101) -> begin (V102 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V102 of {'Idris.Prelude.Types.Left', E53} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V104) -> begin (V110 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V105) -> fun (V106) -> fun (V107) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V105, V106, V107)) end end end, fun (V108) -> fun (V109) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V108, V109)) end end}, V1, V2))), case V110 of {'Idris.Prelude.Types.Left', E55} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V112) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CExtPrim', V101, V104, V112}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 8 -> begin (V113 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V113 of {'Idris.Prelude.Types.Left', E57} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V115) -> begin (V116 = ('dn--un--fromBuf_TTC_LazyReason'(V1, V2))), case V116 of {'Idris.Prelude.Types.Left', E59} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V118) -> begin (V119 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2))), case V119 of {'Idris.Prelude.Types.Left', E61} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V121) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CForce', V115, V118, V121}} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 9 -> begin (V122 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V122 of {'Idris.Prelude.Types.Left', E63} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V124) -> begin (V125 = ('dn--un--fromBuf_TTC_LazyReason'(V1, V2))), case V125 of {'Idris.Prelude.Types.Left', E65} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V127) -> begin (V128 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2))), case V128 of {'Idris.Prelude.Types.Left', E67} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V130) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CDelay', V124, V127, V130}} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 10 -> begin (V131 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V131 of {'Idris.Prelude.Types.Left', E69} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V133) -> begin (V134 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2))), case V134 of {'Idris.Prelude.Types.Left', E71} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V136) -> begin (V142 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V137) -> fun (V138) -> fun (V139) -> ('dn--un--toBuf_TTC_(CConAlt $vars)'(V0, V137, V138, V139)) end end end, fun (V140) -> fun (V141) -> ('dn--un--fromBuf_TTC_(CConAlt $vars)'(V0, V140, V141)) end end}, V1, V2))), case V142 of {'Idris.Prelude.Types.Left', E73} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V144) -> begin (V150 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V145) -> fun (V146) -> fun (V147) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V145, V146, V147)) end end end, fun (V148) -> fun (V149) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V148, V149)) end end}, V1, V2))), case V150 of {'Idris.Prelude.Types.Left', E75} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CConCase', V133, V136, V144, V152}} end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 11 -> begin (V153 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V153 of {'Idris.Prelude.Types.Left', E77} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V155) -> begin (V156 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2))), case V156 of {'Idris.Prelude.Types.Left', E79} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V158) -> begin (V164 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V159) -> fun (V160) -> fun (V161) -> ('dn--un--toBuf_TTC_(CConstAlt $vars)'(V0, V159, V160, V161)) end end end, fun (V162) -> fun (V163) -> ('dn--un--fromBuf_TTC_(CConstAlt $vars)'(V0, V162, V163)) end end}, V1, V2))), case V164 of {'Idris.Prelude.Types.Left', E81} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V166) -> begin (V172 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V167) -> fun (V168) -> fun (V169) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V167, V168, V169)) end end end, fun (V170) -> fun (V171) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V170, V171)) end end}, V1, V2))), case V172 of {'Idris.Prelude.Types.Left', E83} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V174) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CConstCase', V155, V158, V166, V174}} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 12 -> begin (V175 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V175 of {'Idris.Prelude.Types.Left', E85} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V177) -> begin (V178 = ('dn--un--fromBuf_TTC_Constant'(V1, V2))), case V178 of {'Idris.Prelude.Types.Left', E87} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V180) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CPrimVal', V177, V180}} end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 13 -> begin (V181 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V181 of {'Idris.Prelude.Types.Left', E89} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V183) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CErased', V183}} end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 14 -> begin (V184 = ('dn--un--fromBuf_TTC_FC'(V1, V2))), case V184 of {'Idris.Prelude.Types.Left', E91} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V186) -> begin (V187 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V1, V2))), case V187 of {'Idris.Prelude.Types.Left', E93} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V189) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.CCrash', V186, V189}} end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"CExp"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(CConstAlt $vars)'(V0, V1, V2) -> begin (V3 = ('dn--un--fromBuf_TTC_Constant'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V1, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkConstAlt', V5, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(CConAlt $vars)'(V0, V1, V2) -> begin (V3 = ('dn--un--fromBuf_TTC_Name'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('dn--un--fromBuf_TTC_ConInfo'(V1, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V14 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Int'(V9, V10, V11)) end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Int'(V12, V13)) end end}, V1, V2))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V22 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--toBuf_TTC_Name'(V17, V18, V19)) end end end, fun (V20) -> fun (V21) -> ('dn--un--fromBuf_TTC_Name'(V20, V21)) end end}, V1, V2))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> begin (V25 = ('dn--un--fromBuf_TTC_(CExp $vars)'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V24, V0)), V1, V2))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CompileExpr.MkConAlt', V5, V8, V16, V24, V27}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_(Binder (Term $vars))'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V6 = ('dn--un--fromBuf_TTC_RigCount'(V1, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V13 = ('dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V9) -> fun (V10) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V9, V10)) end end, fun (V11) -> fun (V12) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V11, V12)) end end}, V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Lam', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V8, V15, V18}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V19 = ('dn--un--fromBuf_TTC_RigCount'(V1, V2))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Let', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V21, V24, {'Idris.Core.TT.Erased', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V25 = ('dn--un--fromBuf_TTC_RigCount'(V1, V2))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V32 = ('dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V28, V29)) end end, fun (V30) -> fun (V31) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V30, V31)) end end}, V1, V2))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> begin (V35 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V35 of {'Idris.Prelude.Types.Left', E16} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Pi', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V27, V34, V37}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V38 = ('dn--un--fromBuf_TTC_RigCount'(V1, V2))), case V38 of {'Idris.Prelude.Types.Left', E18} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V40) -> begin (V45 = ('dn--un--fromBuf_TTC_(PiInfo $t)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V41, V42)) end end, fun (V43) -> fun (V44) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V43, V44)) end end}, V1, V2))), case V45 of {'Idris.Prelude.Types.Left', E20} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V47) -> begin (V48 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PVar', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V40, V47, V50}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V51 = ('dn--un--fromBuf_TTC_RigCount'(V1, V2))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> begin (V54 = ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V1, V2))), case V54 of {'Idris.Prelude.Types.Left', E26} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PLet', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V53, V56, {'Idris.Core.TT.Erased', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0}}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> begin (V57 = ('dn--un--fromBuf_TTC_RigCount'(V1, V2))), case V57 of {'Idris.Prelude.Types.Left', E28} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PVTy', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V59, {'Idris.Core.TT.Erased', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0}}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Binder"/utf8>>, V2)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_((Env Term) $vars)'(V0, V1, V2) -> case V0 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ('dn--un--fromBuf_TTC_(Binder (Term $vars))'(V4, V1, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V4, V1, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_TTC_Visibility'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Visibility'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Visibility'(V3, V4)) end end}.
'dn--un--__Impl_TTC_VirtualIdent'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_VirtualIdent'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_VirtualIdent'(V3, V4)) end end}.
'dn--un--__Impl_TTC_UseSide'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_UseSide'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_UseSide'(V3, V4)) end end}.
'dn--un--__Impl_TTC_TypeFlags'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_TypeFlags'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_TypeFlags'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Transform'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Transform'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Transform'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Totality'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Totality'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Totality'(V3, V4)) end end}.
'dn--un--__Impl_TTC_TotalReq'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_TotalReq'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_TotalReq'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Terminating'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Terminating'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Terminating'(V3, V4)) end end}.
'dn--un--__Impl_TTC_SizeChange'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_SizeChange'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_SizeChange'(V3, V4)) end end}.
'dn--un--__Impl_TTC_SCCall'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_SCCall'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_SCCall'(V3, V4)) end end}.
'dn--un--__Impl_TTC_RigCount'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_RigCount'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_RigCount'(V2, V3)) end end}.
'dn--un--__Impl_TTC_RewriteNames'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_RewriteNames'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_RewriteNames'(V3, V4)) end end}.
'dn--un--__Impl_TTC_PrimNames'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_PrimNames'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_PrimNames'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Pat'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Pat'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Pat'(V3, V4)) end end}.
'dn--un--__Impl_TTC_PartialReason'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_PartialReason'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_PartialReason'(V3, V4)) end end}.
'dn--un--__Impl_TTC_PairNames'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_PairNames'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_PairNames'(V3, V4)) end end}.
'dn--un--__Impl_TTC_PMDefInfo'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_PMDefInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_PMDefInfo'(V3, V4)) end end}.
'dn--un--__Impl_TTC_OriginDesc'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_OriginDesc'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_OriginDesc'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Namespace'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Namespace'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Namespace'(V3, V4)) end end}.
'dn--un--__Impl_TTC_NameType'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_NameType'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_NameType'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Name'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Name'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Name'(V3, V4)) end end}.
'dn--un--__Impl_TTC_ModuleIdent'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_ModuleIdent'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_ModuleIdent'(V3, V4)) end end}.
'dn--un--__Impl_TTC_LazyReason'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_LazyReason'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_LazyReason'(V3, V4)) end end}.
'dn--un--__Impl_TTC_HoleInfo'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_HoleInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_HoleInfo'(V3, V4)) end end}.
'dn--un--__Impl_TTC_GlobalDef'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_GlobalDef'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_GlobalDef'(V3, V4)) end end}.
'dn--un--__Impl_TTC_FC'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_FC'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_FC'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Def'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Def'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Def'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Covering'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Covering'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Covering'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Constant'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Constant'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Constant'(V3, V4)) end end}.
'dn--un--__Impl_TTC_ConInfo'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_ConInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_ConInfo'(V3, V4)) end end}.
'dn--un--__Impl_TTC_CG'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_CG'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_CG'(V3, V4)) end end}.
'dn--un--__Impl_TTC_CFType'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_CFType'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_CFType'(V3, V4)) end end}.
'dn--un--__Impl_TTC_CDef'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_CDef'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_CDef'(V3, V4)) end end}.
'dn--un--__Impl_TTC_(Term $vars)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(Term $vars)'(V0, V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_(Term $vars)'(V0, V3, V4)) end end}.
'dn--un--__Impl_TTC_(PrimFn $n)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_(PrimFn $n)'(V0, V1, V2)) end end, fun (V3) -> ('dn--un--fromBuf_TTC_(PrimFn $n)'(V0, V3)) end}.
'dn--un--__Impl_TTC_(PiInfo $t)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(PiInfo $t)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(PiInfo $t)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(CaseTree $vars)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(CaseTree $vars)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(CaseTree $vars)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(CaseAlt $vars)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(CaseAlt $vars)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(CaseAlt $vars)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(CExp $vars)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(CExp $vars)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(CExp $vars)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(CConstAlt $vars)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(CConstAlt $vars)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(CConstAlt $vars)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(CConAlt $vars)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(CConAlt $vars)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(CConAlt $vars)'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_(Binder (Term $vars))'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_(Binder (Term $vars))'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_(Binder (Term $vars))'(V0, V4, V5)) end end}.
'dn--un--__Impl_TTC_((Env Term) $vars)'(V0) -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--toBuf_TTC_((Env Term) $vars)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> ('dn--un--fromBuf_TTC_((Env Term) $vars)'(V0, V4, V5)) end end}.
'un--getName'(V0, V1) -> case V0 of 0 -> case V1 of [E2 | E3] -> (fun (V2, V3) -> {'Idris.Prelude.Types.Just', V2} end(E2, E3)); _ -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V4 = (V0 - 1)), case V1 of [E0 | E1] -> (fun (V5, V6) -> ('un--getName'(V4, V6)) end(E0, E1)); _ -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
