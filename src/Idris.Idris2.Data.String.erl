-module('Idris.Idris2.Data.String').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--parseInteger,parseIntTrimmed-3056'/5,
  'with--parsePositive,parsePosTrimmed-2962'/5,
  'with--ltrim-2752'/2,
  'with--asList-2736'/2,
  'case--case block in parseDouble,wfe-3506'/4,
  'case--parseDouble,wfe-3343'/2,
  'case--case block in case block in with block in parseInteger,parseIntTrimmed-3163'/5,
  'case--case block in with block in parseInteger,parseIntTrimmed-3115'/5,
  'case--with block in parseInteger,parseIntTrimmed-3073'/5,
  'case--with block in parsePositive,parsePosTrimmed-3002'/5,
  'case--words\x{27}-2566'/2,
  'nested--3600-3213--in--un--wfe'/1,
  'nested--2941-2537--in--un--unlines\x{27}'/1,
  'nested--3343-2960--in--un--parsePosTrimmed'/3,
  'nested--3434-3054--in--un--parseIntTrimmed'/3,
  'nested--3601-3216--in--un--num'/4,
  'nested--3600-3211--in--un--natpow'/2,
  'nested--3600-3212--in--un--mkDouble'/1,
  'nested--3030-2633--in--un--linesHelp'/3,
  'nested--3600-3210--in--un--intPow'/2,
  'nested--3002-2601--in--un--addSpace'/3,
  'un--words\x{27}'/1,
  'un--words'/1,
  'un--unwords\x{27}'/1,
  'un--unwords'/1,
  'un--unlines\x{27}'/1,
  'un--unlines'/1,
  'un--trim'/1,
  'un--toUpper'/1,
  'un--toLower'/1,
  'un--stringToNatOrZ'/1,
  'un--strTail'/1,
  'un--strSubstr'/3,
  'un--strM'/1,
  'un--strLength'/1,
  'un--strIndex'/2,
  'un--split'/2,
  'un--span'/2,
  'un--singleton'/1,
  'un--replicate'/2,
  'un--parsePositive'/2,
  'un--parseNumWithoutSign'/2,
  'un--parseInteger'/2,
  'un--parseDouble'/1,
  'un--padRight'/3,
  'un--padLeft'/3,
  'un--null'/1,
  'un--ltrim'/1,
  'un--lines\x{27}'/1,
  'un--lines'/1,
  'un--isSuffixOf'/2,
  'un--isPrefixOf'/2,
  'un--isInfixOf'/2,
  'un--indent'/2,
  'un--foldr1'/2,
  'un--fastUnlines'/1,
  'un--fastAppend'/1,
  'un--break'/2,
  'un--asList'/1
]).
'with--parseInteger,parseIntTrimmed-3056'(V0, V1, V2, V3, V4) -> case V3 of <<""/utf8>> -> case V4 of {'Idris.Data.String.StrNil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> case V4 of {'Idris.Data.String.StrCons', E14, E15} -> (fun (V5, V6) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V5, $-)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V7) -> case ('Idris.Idris2.Builtin':'un--snd'(V1)) of {'Idris.Prelude.Num.MkNeg', E16, E17, E18} -> (fun (V8, V9, V10) -> (V9(case ('Idris.Idris2.Builtin':'un--fst'(V1)) of {'Idris.Prelude.Num.MkNum', E19, E20, E21} -> (fun (V11, V12, V13) -> (V13(V7)) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)), 0)))); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V5, $+)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V14) -> case ('Idris.Idris2.Builtin':'un--fst'(V1)) of {'Idris.Prelude.Num.MkNum', E22, E23, E24} -> (fun (V15, V16, V17) -> (V17(V14)) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(0)))))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V5, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V5, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V18) -> case ('Idris.Idris2.Builtin':'un--fst'(V1)) of {'Idris.Prelude.Num.MkNum', E25, E26, E27} -> (fun (V19, V20, V21) -> (V21(V18)) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V5)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V4 of {'Idris.Data.String.StrCons', E0, E1} -> (fun (V22, V23) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V22, $-)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V24) -> case ('Idris.Idris2.Builtin':'un--snd'(V1)) of {'Idris.Prelude.Num.MkNeg', E2, E3, E4} -> (fun (V25, V26, V27) -> (V26(case ('Idris.Idris2.Builtin':'un--fst'(V1)) of {'Idris.Prelude.Num.MkNum', E5, E6, E7} -> (fun (V28, V29, V30) -> (V30(V24)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V23)), 0)))); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V22, $+)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V31) -> case ('Idris.Idris2.Builtin':'un--fst'(V1)) of {'Idris.Prelude.Num.MkNum', E8, E9, E10} -> (fun (V32, V33, V34) -> (V34(V31)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V23)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(0)))))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V22, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V22, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V35) -> case ('Idris.Idris2.Builtin':'un--fst'(V1)) of {'Idris.Prelude.Num.MkNum', E11, E12, E13} -> (fun (V36, V37, V38) -> (V38(V35)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V23)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V22)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'with--parsePositive,parsePosTrimmed-2962'(V0, V1, V2, V3, V4) -> case V3 of <<""/utf8>> -> case V4 of {'Idris.Data.String.StrNil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> case V4 of {'Idris.Data.String.StrCons', E8, E9} -> (fun (V5, V6) -> case V5 of $+ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V7) -> case V1 of {'Idris.Prelude.Num.MkNum', E13, E14, E15} -> (fun (V8, V9, V10) -> (V10(V7)) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)), 0)))); _ -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V5, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V5, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V11) -> case V1 of {'Idris.Prelude.Num.MkNum', E10, E11, E12} -> (fun (V12, V13, V14) -> (V14(V11)) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V5)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V4 of {'Idris.Data.String.StrCons', E0, E1} -> (fun (V15, V16) -> case V15 of $+ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V17) -> case V1 of {'Idris.Prelude.Num.MkNum', E5, E6, E7} -> (fun (V18, V19, V20) -> (V20(V17)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V16)), 0)))); _ -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V15, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V15, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V21) -> case V1 of {'Idris.Prelude.Num.MkNum', E2, E3, E4} -> (fun (V22, V23, V24) -> (V24(V21)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V16)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V15)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'with--ltrim-2752'(V0, V1) -> case V0 of <<""/utf8>> -> case V1 of {'Idris.Data.String.Nil'} -> (fun () -> <<""/utf8>> end()); _ -> case V1 of {'Idris.Data.String.::', E3, E4, E5} -> (fun (V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Prelude.Types':'un--strCons'(V2, V3))), case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V2)) of 1 -> ('with--ltrim-2752'(V3, (V4()))); 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V1 of {'Idris.Data.String.::', E0, E1, E2} -> (fun (V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Prelude.Types':'un--strCons'(V6, V7))), case ('Idris.Idris2.Prelude.Types':'un--isSpace'(V6)) of 1 -> ('with--ltrim-2752'(V7, (V8()))); 0 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'with--asList-2736'(V0, V1) -> case V0 of <<""/utf8>> -> case V1 of {'Idris.Data.String.StrNil'} -> (fun () -> {'Idris.Data.String.Nil'} end()); _ -> case V1 of {'Idris.Data.String.StrCons', E2, E3} -> (fun (V2, V3) -> {'Idris.Data.String.::', V2, V3, fun () -> ('un--asList'(V3)) end} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V1 of {'Idris.Data.String.StrCons', E0, E1} -> (fun (V4, V5) -> {'Idris.Data.String.::', V4, V5, fun () -> ('un--asList'(V5)) end} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in parseDouble,wfe-3506'(V0, V1, V2, V3) -> case V3 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V4, V5) -> case V4 of <<""/utf8>> -> case V5 of [E6 | E7] -> (fun (V6, V7) -> case V7 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> case V5 of [E8 | E9] -> (fun (V8, V9) -> case V9 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V12, V13)) end end end end, fun (V14) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V14)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V15) -> fun (V16) -> (V15 + V16) end end, fun (V17) -> fun (V18) -> (V17 * V18) end end, fun (V19) -> V19 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V20) -> fun (V21) -> (V20 + V21) end end, fun (V22) -> fun (V23) -> (V22 * V23) end end, fun (V24) -> V24 end}, fun (V25) -> (0 - V25) end, fun (V26) -> fun (V27) -> (V26 - V27) end end}}, V1)))), fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V31, V32)) end end end end, fun (V33) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(V33, ('nested--3600-3211--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)))))) end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V36, V37)) end end end end, fun (V38) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V38)) end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V40) -> fun (V41) -> (V40 + V41) end end, fun (V42) -> fun (V43) -> (V42 * V43) end end, fun (V44) -> V44 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V45) -> fun (V46) -> (V45 + V46) end end, fun (V47) -> fun (V48) -> (V47 * V48) end end, fun (V49) -> V49 end}, fun (V50) -> (0 - V50) end, fun (V51) -> fun (V52) -> (V51 - V52) end end}}, V8)), fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V28, {'Idris.Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V28, ('Idris.Idris2.Prelude.Num':'dn--un--fromInteger_Num_Double'(0)))) of 1 -> ('erlang':'-'(V39)); 0 -> V39; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V53}})) end)) end)) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V56, V57)) end end end end, fun (V58) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V58)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V59) -> fun (V60) -> (V59 + V60) end end, fun (V61) -> fun (V62) -> (V61 * V62) end end, fun (V63) -> V63 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V64) -> fun (V65) -> (V64 + V65) end end, fun (V66) -> fun (V67) -> (V66 * V67) end end, fun (V68) -> V68 end}, fun (V69) -> (0 - V69) end, fun (V70) -> fun (V71) -> (V70 - V71) end end}}, V1)))), fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V75, V76)) end end end end, fun (V77) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(V77, ('nested--3600-3211--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)))))) end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V80, V81)) end end end end, fun (V82) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V82)) end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V72, {'Idris.Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V72, ('Idris.Idris2.Prelude.Num':'dn--un--fromInteger_Num_Double'(0)))) of 1 -> ('erlang':'-'(V83)); 0 -> V83; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0}})) end)) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end end(E6, E7)); _ -> case V5 of [E4 | E5] -> (fun (V84, V85) -> case V85 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V88, V89)) end end end end, fun (V90) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V90)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V91) -> fun (V92) -> (V91 + V92) end end, fun (V93) -> fun (V94) -> (V93 * V94) end end, fun (V95) -> V95 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V96) -> fun (V97) -> (V96 + V97) end end, fun (V98) -> fun (V99) -> (V98 * V99) end end, fun (V100) -> V100 end}, fun (V101) -> (0 - V101) end, fun (V102) -> fun (V103) -> (V102 - V103) end end}}, V1)))), fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V107, V108)) end end end end, fun (V109) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(V109, ('nested--3600-3211--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)))))) end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V112, V113)) end end end end, fun (V114) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V114)) end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V115) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V116) -> fun (V117) -> (V116 + V117) end end, fun (V118) -> fun (V119) -> (V118 * V119) end end, fun (V120) -> V120 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V121) -> fun (V122) -> (V121 + V122) end end, fun (V123) -> fun (V124) -> (V123 * V124) end end, fun (V125) -> V125 end}, fun (V126) -> (0 - V126) end, fun (V127) -> fun (V128) -> (V127 - V128) end end}}, V84)), fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V104, {'Idris.Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V104, ('Idris.Idris2.Prelude.Num':'dn--un--fromInteger_Num_Double'(0)))) of 1 -> ('erlang':'-'(V115)); 0 -> V115; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V129}})) end)) end)) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V132, V133)) end end end end, fun (V134) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V134)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V135) -> fun (V136) -> (V135 + V136) end end, fun (V137) -> fun (V138) -> (V137 * V138) end end, fun (V139) -> V139 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V140) -> fun (V141) -> (V140 + V141) end end, fun (V142) -> fun (V143) -> (V142 * V143) end end, fun (V144) -> V144 end}, fun (V145) -> (0 - V145) end, fun (V146) -> fun (V147) -> (V146 - V147) end end}}, V1)))), fun (V148) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V151, V152)) end end end end, fun (V153) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(V153, ('nested--3600-3211--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)))))) end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V156, V157)) end end end end, fun (V158) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V158)) end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V159) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V148, {'Idris.Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V148, ('Idris.Idris2.Prelude.Num':'dn--un--fromInteger_Num_Double'(0)))) of 1 -> ('erlang':'-'(V159)); 0 -> V159; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0}})) end)) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end; _ -> case V5 of [E2 | E3] -> (fun (V160, V161) -> case V161 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V164, V165)) end end end end, fun (V166) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V166)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V167) -> fun (V168) -> (V167 + V168) end end, fun (V169) -> fun (V170) -> (V169 * V170) end end, fun (V171) -> V171 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V172) -> fun (V173) -> (V172 + V173) end end, fun (V174) -> fun (V175) -> (V174 * V175) end end, fun (V176) -> V176 end}, fun (V177) -> (0 - V177) end, fun (V178) -> fun (V179) -> (V178 - V179) end end}}, V1)))), fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V183, V184)) end end end end, fun (V185) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(V185, ('nested--3600-3211--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)))))) end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V188, V189)) end end end end, fun (V190) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V190)) end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V191) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V192) -> fun (V193) -> (V192 + V193) end end, fun (V194) -> fun (V195) -> (V194 * V195) end end, fun (V196) -> V196 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V197) -> fun (V198) -> (V197 + V198) end end, fun (V199) -> fun (V200) -> (V199 * V200) end end, fun (V201) -> V201 end}, fun (V202) -> (0 - V202) end, fun (V203) -> fun (V204) -> (V203 - V204) end end}}, V160)), fun (V205) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V180, {'Idris.Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V180, ('Idris.Idris2.Prelude.Num':'dn--un--fromInteger_Num_Double'(0)))) of 1 -> ('erlang':'-'(V191)); 0 -> V191; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V205}})) end)) end)) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V208, V209)) end end end end, fun (V210) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V210)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V211) -> fun (V212) -> (V211 + V212) end end, fun (V213) -> fun (V214) -> (V213 * V214) end end, fun (V215) -> V215 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V216) -> fun (V217) -> (V216 + V217) end end, fun (V218) -> fun (V219) -> (V218 * V219) end end, fun (V220) -> V220 end}, fun (V221) -> (0 - V221) end, fun (V222) -> fun (V223) -> (V222 - V223) end end}}, V1)))), fun (V224) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V227, V228)) end end end end, fun (V229) -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(V229, ('nested--3600-3211--in--un--natpow'(10.0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)))))) end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V232, V233)) end end end end, fun (V234) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V234)) end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V4)), 0)))))), fun (V235) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V224, {'Idris.Builtin.MkPair', case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V224, ('Idris.Idris2.Prelude.Num':'dn--un--fromInteger_Num_Double'(0)))) of 1 -> ('erlang':'-'(V235)); 0 -> V235; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0}})) end)) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--parseDouble,wfe-3343'(V0, V1) -> case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> case V3 of [] -> case ('un--split'(fun (V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, $e)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, $E)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)) of {'Idris.Data.List1.:::', E2, E3} -> (fun (V5, V6) -> case V6 of [E4 | E5] -> (fun (V7, V8) -> case V8 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end, fun (V13) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V13)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V14) -> fun (V15) -> (V14 + V15) end end, fun (V16) -> fun (V17) -> (V16 * V17) end end, fun (V18) -> V18 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V19) -> fun (V20) -> (V19 + V20) end end, fun (V21) -> fun (V22) -> (V21 * V22) end end, fun (V23) -> V23 end}, fun (V24) -> (0 - V24) end, fun (V25) -> fun (V26) -> (V25 - V26) end end}}, V5)))), fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V28) -> fun (V29) -> (V28 + V29) end end, fun (V30) -> fun (V31) -> (V30 * V31) end end, fun (V32) -> V32 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V33) -> fun (V34) -> (V33 + V34) end end, fun (V35) -> fun (V36) -> (V35 * V36) end end, fun (V37) -> V37 end}, fun (V38) -> (0 - V38) end, fun (V39) -> fun (V40) -> (V39 - V40) end end}}, V7)), fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', 0.0, V41}})) end)) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); [] -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V44, V45)) end end end end, fun (V46) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V46)) end, ('un--parseInteger'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkNum', fun (V47) -> fun (V48) -> (V47 + V48) end end, fun (V49) -> fun (V50) -> (V49 * V50) end end, fun (V51) -> V51 end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V52) -> fun (V53) -> (V52 + V53) end end, fun (V54) -> fun (V55) -> (V54 * V55) end end, fun (V56) -> V56 end}, fun (V57) -> (0 - V57) end, fun (V58) -> fun (V59) -> (V58 - V59) end end}}, V5)))), fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V60, {'Idris.Builtin.MkPair', 0.0, 0}})) end)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end; [E6 | E7] -> (fun (V61, V62) -> case V62 of [] -> ('case--case block in parseDouble,wfe-3506'(V0, V2, V61, ('un--split'(fun (V63) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V63, $e)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V63, $E)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V61)))); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in case block in with block in parseInteger,parseIntTrimmed-3163'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V5) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Num.MkNum', E0, E1, E2} -> (fun (V6, V7, V8) -> (V8(V5)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V3)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in with block in parseInteger,parseIntTrimmed-3115'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V5) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Num.MkNum', E0, E1, E2} -> (fun (V6, V7, V8) -> (V8(V5)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(0)))))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V3, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V3, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V9) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Num.MkNum', E3, E4, E5} -> (fun (V10, V11, V12) -> (V12(V9)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V3)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in parseInteger,parseIntTrimmed-3073'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V5) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Num.MkNeg', E0, E1, E2} -> (fun (V6, V7, V8) -> (V7(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Num.MkNum', E3, E4, E5} -> (fun (V9, V10, V11) -> (V11(V5)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), 0)))); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V3, $+)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V12) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Num.MkNum', E6, E7, E8} -> (fun (V13, V14, V15) -> (V15(V12)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(0)))))); 0 -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V3, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V3, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V16) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Num.MkNum', E9, E10, E11} -> (fun (V17, V18, V19) -> (V19(V16)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V3)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in parsePositive,parsePosTrimmed-3002'(V0, V1, V2, V3, V4) -> case V4 of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V5) -> case V0 of {'Idris.Prelude.Num.MkNum', E0, E1, E2} -> (fun (V6, V7, V8) -> (V8(V5)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--parseNumWithoutSign'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V2)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V3)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808))))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--words\x{27}-2566'(V0, V1) -> case V1 of [] -> []; _ -> case ('Idris.Idris2.Data.List':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V2)) end, V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> [V3 | ('un--words\x{27}'(V4))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--3600-3213--in--un--wfe'(V0) -> ('case--parseDouble,wfe-3343'(V0, ('un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $.)) end, V0)))).
'nested--2941-2537--in--un--unlines\x{27}'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [V1 | [<<"\x{a}"/utf8>> | ('nested--2941-2537--in--un--unlines\x{27}'(V2))]] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3343-2960--in--un--parsePosTrimmed'(V0, V1, V2) -> ('with--parsePositive,parsePosTrimmed-2962'('erased', V0, V2, V2, ('un--strM'(V2)))).
'nested--3434-3054--in--un--parseIntTrimmed'(V0, V1, V2) -> ('with--parseInteger,parseIntTrimmed-3056'('erased', V0, V2, V2, ('un--strM'(V2)))).
'nested--3601-3216--in--un--num'(V0, V1, V2, V3) -> case V3 of 0 -> 1.0; _ -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V3, 0)) of 1 -> ('Idris.Idris2.Prelude.Num':'dn--un--*_Num_Double'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V2)), ('nested--3601-3216--in--un--num'(V0, V1, V2, (V3 + 1))))); 0 -> ('Idris.Idris2.Prelude.Num':'dn--un--*_Num_Double'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V2)), ('nested--3601-3216--in--un--num'(V0, V1, V2, (V3 - 1))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--3600-3211--in--un--natpow'(V0, V1) -> case V1 of 0 -> 1.0; _ -> begin (V2 = (V1 - 1)), ('Idris.Idris2.Prelude.Num':'dn--un--*_Num_Double'(V0, ('nested--3600-3211--in--un--natpow'(V0, V2)))) end end.
'nested--3600-3212--in--un--mkDouble'(V0) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> case V1 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V4, V5) -> begin (V6 = ('nested--3600-3210--in--un--intPow'(10, V5))), {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Num':'dn--un--+_Num_Double'(('Idris.Idris2.Prelude.Num':'dn--un--*_Num_Double'(V2, V6)), ('Idris.Idris2.Prelude.Num':'dn--un--*_Num_Double'(V4, V6))))} end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3030-2633--in--un--linesHelp'(V0, V1, V2) -> case V1 of [] -> case V2 of [] -> []; _ -> case V2 of [] -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | []]; [E4 | E5] -> (fun (V3, V4) -> case V3 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V4))]; $\x{d} -> case V4 of [E6 | E7] -> (fun (V5, V6) -> case V5 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V6))]; _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V4))] end end(E6, E7)); _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V4))] end; _ -> ('nested--3030-2633--in--un--linesHelp'(V0, [V3 | V1], V4)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V2 of [] -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | []]; [E0 | E1] -> (fun (V7, V8) -> case V7 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V8))]; $\x{d} -> case V8 of [E2 | E3] -> (fun (V9, V10) -> case V9 of $\x{a} -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V10))]; _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V8))] end end(E2, E3)); _ -> [('Idris.Idris2.Prelude.Types.List':'un--reverse'(V1)) | ('nested--3030-2633--in--un--linesHelp'(V0, [], V8))] end; _ -> ('nested--3030-2633--in--un--linesHelp'(V0, [V7 | V1], V8)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--3600-3210--in--un--intPow'(V0, V1) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V1, 0)) of 1 -> ('nested--3601-3216--in--un--num'(V1, V0, V0, V1)); 0 -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(('Idris.Idris2.Prelude.Num':'dn--un--fromInteger_Num_Double'(1)), ('nested--3601-3216--in--un--num'(V1, V0, V0, V1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3002-2601--in--un--addSpace'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, [$  | V2])).
'un--words\x{27}'(V0) -> ('case--words\x{27}-2566'(V0, ('Idris.Idris2.Data.List':'un--dropWhile'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V1)) end, V0)))).
'un--words'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end, ('un--words\x{27}'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'un--unwords\x{27}'(V0) -> case V0 of [] -> []; _ -> ('un--foldr1'(fun (V1) -> fun (V2) -> ('nested--3002-2601--in--un--addSpace'(V0, V1, V2)) end end, V0)) end.
'un--unwords'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('un--unwords\x{27}'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)) end, V0)))))).
'un--unlines\x{27}'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V1, [$\x{a} | ('un--unlines\x{27}'(V2))])) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unlines'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('un--unlines\x{27}'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)) end, V0)))))).
'un--trim'(V0) -> ('un--ltrim'(('Idris.Idris2.Prelude.Types':'un--reverse'(('un--ltrim'(('Idris.Idris2.Prelude.Types':'un--reverse'(V0)))))))).
'un--toUpper'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--toUpper'(V1)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'un--toLower'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--toLower'(V1)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'un--stringToNatOrZ'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(case ('string':'to_integer'(V0)) of {E0, E1} when (erlang:'is_integer'(E0)) -> (fun (V1, V2) -> case ('string':'is_empty'(V2)) of 'true' -> V1; _ -> 0 end end(E0, E1)); _ -> 0 end)).
'un--strTail'(V0) -> case ('string':'next_grapheme'(V0)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> <<""/utf8>> end.
'un--strSubstr'(V0, V1, V2) -> ('string':'slice'(V2, V0, V1)).
'un--strM'(V0) -> case V0 of <<""/utf8>> -> {'Idris.Data.String.StrNil'}; _ -> ('Idris.Idris2.Builtin':'un--believe_me'({'Idris.Data.String.StrCons', ('erlang':'hd'(('string':'next_grapheme'(V0)))), case ('string':'next_grapheme'(V0)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> <<""/utf8>> end})) end.
'un--strLength'(V0) -> ('string':'length'(V0)).
'un--strIndex'(V0, V1) -> ('erlang':'hd'(('string':'next_grapheme'(('string':'slice'(V0, V1, 1)))))).
'un--split'(V0, V1) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)) end, ('Idris.Idris2.Data.List':'un--split'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))).
'un--span'(V0, V1) -> case ('Idris.Idris2.Data.List':'un--span'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)), ('Idris.Idris2.Prelude.Types':'un--fastPack'(V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--singleton'(V0) -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V0, <<""/utf8>>)).
'un--replicate'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(V0, V1)))).
'un--parsePositive'(V0, V1) -> ('nested--3343-2960--in--un--parsePosTrimmed'(V0, V1, ('un--trim'(V1)))).
'un--parseNumWithoutSign'(V0, V1) -> case V0 of [] -> {'Idris.Prelude.Types.Just', V1}; [E0 | E1] -> (fun (V2, V3) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V2, $0)) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V2, $9)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--parseNumWithoutSign'(V3, ((V1 * 10) + ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(((('Idris.Idris2.Prelude.Types':'un--ord'(V2)) - ('Idris.Idris2.Prelude.Types':'un--ord'($0))) rem 9223372036854775808)))))); 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parseInteger'(V0, V1) -> ('nested--3434-3054--in--un--parseIntTrimmed'(V0, V1, ('un--trim'(V1)))).
'un--parseDouble'(V0) -> ('nested--3600-3212--in--un--mkDouble'(('nested--3600-3213--in--un--wfe'(('un--trim'(V0)))))).
'un--padRight'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('un--replicate'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V0 - ('Idris.Idris2.Prelude.Types.String':'un--length'(V2))))), V1)))).
'un--padLeft'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--replicate'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'((V0 - ('Idris.Idris2.Prelude.Types.String':'un--length'(V2))))), V1)), V2)).
'un--null'(V0) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, <<""/utf8>>)).
'un--ltrim'(V0) -> ('with--ltrim-2752'(V0, ('un--asList'(V0)))).
'un--lines\x{27}'(V0) -> ('nested--3030-2633--in--un--linesHelp'(V0, [], V0)).
'un--lines'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V1)) end, ('un--lines\x{27}'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))))).
'un--isSuffixOf'(V0, V1) -> ('Idris.Idris2.Data.List':'un--isSuffixOf'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, V5)) end end}, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'un--isPrefixOf'(V0, V1) -> ('Idris.Idris2.Data.List':'un--isPrefixOf'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, V5)) end end}, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'un--isInfixOf'(V0, V1) -> ('Idris.Idris2.Data.List':'un--isInfixOf'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, V5)) end end}, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))).
'un--indent'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--replicate'(V0, $ )), V1)).
'un--foldr1'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> V2; _ -> ((V0(V2))(('un--foldr1'(V0, V3)))) end end(E0, E1)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(<<"Unhandled input for Data.String.foldr1 at Data.String:34:1--34:17"/utf8>>)) end.
'un--fastUnlines'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('nested--2941-2537--in--un--unlines\x{27}'(V0)))).
'un--fastAppend'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'(V0)).
'un--break'(V0, V1) -> ('un--span'(fun (V2) -> case (V0(V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1)).
'un--asList'(V0) -> ('with--asList-2736'(V0, ('un--strM'(V0)))).
