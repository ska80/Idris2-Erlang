-module('Idris.Idris2.Core.Primitives').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9233-5268--in--un--pow\x{27}'/3,
  'un--unaryOp'/3,
  'un--toInt'/1,
  'un--sub'/2,
  'un--strTail'/1,
  'un--strSubstr'/1,
  'un--strReverse'/1,
  'un--strLength'/1,
  'un--strIndex'/1,
  'un--strHead'/1,
  'un--strCons'/1,
  'un--strAppend'/1,
  'un--signedShift'/2,
  'un--shiftr'/2,
  'un--shiftl'/2,
  'un--primTypes'/0,
  'un--prim'/1,
  'un--predTy'/2,
  'un--pi'/5,
  'un--opName'/1,
  'un--numTypes'/0,
  'un--neg'/1,
  'un--mul'/2,
  'un--mod'/2,
  'un--lte'/2,
  'un--lt'/2,
  'un--integralTypes'/0,
  'un--intCastWrap'/2,
  'un--int8max'/0,
  'un--int8CastWrap'/1,
  'un--int64max'/0,
  'un--int64CastWrap'/1,
  'un--int32max'/0,
  'un--int32CastWrap'/1,
  'un--int16max'/0,
  'un--int16CastWrap'/1,
  'un--gte'/2,
  'un--gt'/2,
  'un--getOp'/2,
  'un--eq'/2,
  'un--doubleTy'/0,
  'un--doubleTan'/1,
  'un--doubleSqrt'/1,
  'un--doubleSin'/1,
  'un--doublePow'/2,
  'un--doubleOp'/2,
  'un--doubleLog'/1,
  'un--doubleFloor'/1,
  'un--doubleExp'/1,
  'un--doubleCos'/1,
  'un--doubleCeiling'/1,
  'un--doubleATan'/1,
  'un--doubleASin'/1,
  'un--doubleACos'/1,
  'un--div'/2,
  'un--crashTy'/0,
  'un--constantIntegerValue'/1,
  'un--constTy3'/4,
  'un--constTy'/3,
  'un--cmpTy'/1,
  'un--castTo'/2,
  'un--castString'/1,
  'un--castInteger'/1,
  'un--castInt8'/1,
  'un--castInt64'/1,
  'un--castInt32'/1,
  'un--castInt16'/1,
  'un--castInt'/1,
  'un--castDouble'/1,
  'un--castChar'/1,
  'un--castBits8'/1,
  'un--castBits64'/1,
  'un--castBits32'/1,
  'un--castBits16'/1,
  'un--bxor'/2,
  'un--bor'/2,
  'un--bitCastWrap'/4,
  'un--bit8CastWrap'/1,
  'un--bit64CastWrap'/1,
  'un--bit32CastWrap'/1,
  'un--bit16CastWrap'/1,
  'un--binOp'/3,
  'un--believeMeTy'/0,
  'un--believeMe'/1,
  'un--band'/2,
  'un--b8max'/0,
  'un--b64max'/0,
  'un--b32max'/0,
  'un--b16max'/0,
  'un--arithTy'/1,
  'un--allPrimitives'/0,
  'un--add'/2
]).
'nested--9233-5268--in--un--pow\x{27}'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Db', E0} -> (fun (V3) -> case V2 of {'Idris.Core.TT.Db', E1} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Types':'un--pow'(V3, V4))})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--unaryOp'(V0, V1, V2) -> case V2 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V5, V6) -> case V4 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V7) -> {'Idris.Core.Value.NPrimVal', V5, V7} end, (V0(V6)))) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--toInt'(V0) -> case V0 of 1 -> {'Idris.Core.TT.I', 1}; 0 -> {'Idris.Core.TT.I', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sub'(V0, V1) -> case V0 of {'Idris.Core.TT.BI', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.BI', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (V2 - V3)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', ((V4 - V5) rem 9223372036854775808)})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I8', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I8', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--int8CastWrap'((V6 - V7)))})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I16', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I16', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--int16CastWrap'((V8 - V9)))})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I32', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I32', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--int32CastWrap'((V10 - V11)))})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.I64', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.I64', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--int64CastWrap'((V12 - V13)))})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', ('un--bit8CastWrap'(((V14 - V15) rem 9223372036854775808)))})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', ('un--bit16CastWrap'(((V16 - V17) rem 9223372036854775808)))})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', ('un--bit32CastWrap'(((V18 - V19) rem 9223372036854775808)))})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', ('un--bit64CastWrap'((V20 - V21)))})) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Ch', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Ch', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Ch', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(((('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V22)) - ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V23))) rem 9223372036854775808)))})) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Db', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Db', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Db', (V24 - V25)})) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strTail'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.Str', E4} -> (fun (V5) -> case V5 of <<""/utf8>> -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', case ('string':'next_grapheme'(V5)) of [E7 | E8] when (erlang:'is_binary'(E8)) -> (fun (V6, V7) -> V7 end(E7, E8)); _ -> <<""/utf8>> end}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end; _ -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', case ('string':'next_grapheme'(V5)) of [E5 | E6] when (erlang:'is_binary'(E6)) -> (fun (V8, V9) -> V9 end(E5, E6)); _ -> <<""/utf8>> end}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strSubstr'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V6, V7) -> case V6 of {'Idris.Core.Value.NPrimVal', E7, E8} -> (fun (V8, V9) -> case V9 of {'Idris.Core.TT.I', E9} -> (fun (V10) -> case V7 of {'Idris.Data.Vect.::', E10, E11} -> (fun (V11, V12) -> case V11 of {'Idris.Core.Value.NPrimVal', E12, E13} -> (fun (V13, V14) -> case V14 of {'Idris.Core.TT.Str', E14} -> (fun (V15) -> case V12 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('string':'slice'(V15, V5, V10))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12, E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strReverse'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.Str', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Types':'un--reverse'(V5))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strLength'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.Str', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.String':'un--length'(V5))))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strIndex'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.Str', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V6, V7) -> case V6 of {'Idris.Core.Value.NPrimVal', E7, E8} -> (fun (V8, V9) -> case V9 of {'Idris.Core.TT.I', E9} -> (fun (V10) -> case V7 of {'Idris.Data.Vect.Nil'} -> (fun () -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V10, 0)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V10)))), ('Idris.Idris2.Prelude.Types.String':'un--length'(V5)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Ch', ('erlang':'hd'(('string':'next_grapheme'(('string':'slice'(V5, V10, 1))))))}}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strHead'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.Str', E4} -> (fun (V5) -> case V5 of <<""/utf8>> -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Ch', ('erlang':'hd'(('string':'next_grapheme'(V5))))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end; _ -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Ch', ('erlang':'hd'(('string':'next_grapheme'(V5))))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strCons'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.Ch', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V6, V7) -> case V6 of {'Idris.Core.Value.NPrimVal', E7, E8} -> (fun (V8, V9) -> case V9 of {'Idris.Core.TT.Str', E9} -> (fun (V10) -> case V7 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Types':'un--strCons'(V5, V10))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--strAppend'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.Str', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V6, V7) -> case V6 of {'Idris.Core.Value.NPrimVal', E7, E8} -> (fun (V8, V9) -> case V9 of {'Idris.Core.TT.Str', E9} -> (fun (V10) -> case V7 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, V10))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--signedShift'(V0, V1) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'((V0 band V1), 0)) of 1 -> (V0 band (V1 - 1)); 0 -> (V0 bor (0 - V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--shiftr'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', (V2 bsr V3)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--signedShift'((V4 bsr V5), ('un--int8max'())))})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--signedShift'((V6 bsr V7), ('un--int16max'())))})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--signedShift'((V8 bsr V9), ('un--int32max'())))})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--signedShift'((V10 bsr V11), ('un--int64max'())))})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.B8', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.B8', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', (V12 bsr V13)})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B16', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B16', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', (V14 bsr V15)})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B32', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B32', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', (V16 bsr V17)})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B64', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B64', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', (V18 bsr V19)})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--shiftl'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', ((V2 bsl V3) rem 9223372036854775808)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--signedShift'((V4 bsl V5), ('un--int8max'())))})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--signedShift'((V6 bsl V7), ('un--int16max'())))})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--signedShift'((V8 bsl V9), ('un--int32max'())))})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--signedShift'((V10 bsl V11), ('un--int64max'())))})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (V12 bsl V13)})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V14 bsl V15) rem 9223372036854775808), ('un--b8max'())))})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V16 bsl V17) rem 9223372036854775808), ('un--b16max'())))})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V18 bsl V19) rem 9223372036854775808), ('un--b32max'())))})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'((V20 bsl V21), ('un--b64max'())))})) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--primTypes'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--numTypes'()), [{'Idris.Core.TT.StringType'} | [{'Idris.Core.TT.CharType'} | []]])).
'un--prim'(V0) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim__"/utf8>>, V0))}}.
'un--predTy'(V0, V1) -> begin (V4 = fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.TT':'un--fnType'([], ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2, V3)) end end), ((V4({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V0}))({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V1})) end.
'un--pi'(V0, V1, V2, V3, V4) -> {'Idris.Core.TT.Bind', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V0}}, {'Idris.Core.TT.Pi', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V1, V2, V3}, V4}.
'un--opName'(V0) -> case V0 of {'Idris.Core.TT.Add', E0} -> (fun (V1) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"add_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)))))) end(E0)); {'Idris.Core.TT.Sub', E1} -> (fun (V2) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sub_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)))))) end(E1)); {'Idris.Core.TT.Mul', E2} -> (fun (V3) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"mul_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V3)))))) end(E2)); {'Idris.Core.TT.Div', E3} -> (fun (V4) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"div_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V4)))))) end(E3)); {'Idris.Core.TT.Mod', E4} -> (fun (V5) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"mod_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V5)))))) end(E4)); {'Idris.Core.TT.Neg', E5} -> (fun (V6) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"negate_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V6)))))) end(E5)); {'Idris.Core.TT.ShiftL', E6} -> (fun (V7) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shl_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V7)))))) end(E6)); {'Idris.Core.TT.ShiftR', E7} -> (fun (V8) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shr_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V8)))))) end(E7)); {'Idris.Core.TT.BAnd', E8} -> (fun (V9) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"and_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V9)))))) end(E8)); {'Idris.Core.TT.BOr', E9} -> (fun (V10) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"or_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V10)))))) end(E9)); {'Idris.Core.TT.BXOr', E10} -> (fun (V11) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"xor_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V11)))))) end(E10)); {'Idris.Core.TT.LT', E11} -> (fun (V12) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"lt_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V12)))))) end(E11)); {'Idris.Core.TT.LTE', E12} -> (fun (V13) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"lte_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V13)))))) end(E12)); {'Idris.Core.TT.EQ', E13} -> (fun (V14) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"eq_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V14)))))) end(E13)); {'Idris.Core.TT.GTE', E14} -> (fun (V15) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"gte_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V15)))))) end(E14)); {'Idris.Core.TT.GT', E15} -> (fun (V16) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"gt_"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V16)))))) end(E15)); {'Idris.Core.TT.StrLength'} -> (fun () -> ('un--prim'(<<"strLength"/utf8>>)) end()); {'Idris.Core.TT.StrHead'} -> (fun () -> ('un--prim'(<<"strHead"/utf8>>)) end()); {'Idris.Core.TT.StrTail'} -> (fun () -> ('un--prim'(<<"strTail"/utf8>>)) end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> ('un--prim'(<<"strIndex"/utf8>>)) end()); {'Idris.Core.TT.StrCons'} -> (fun () -> ('un--prim'(<<"strCons"/utf8>>)) end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> ('un--prim'(<<"strAppend"/utf8>>)) end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> ('un--prim'(<<"strReverse"/utf8>>)) end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> ('un--prim'(<<"strSubstr"/utf8>>)) end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> ('un--prim'(<<"doubleExp"/utf8>>)) end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> ('un--prim'(<<"doubleLog"/utf8>>)) end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> ('un--prim'(<<"doublePow"/utf8>>)) end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> ('un--prim'(<<"doubleSin"/utf8>>)) end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> ('un--prim'(<<"doubleCos"/utf8>>)) end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> ('un--prim'(<<"doubleTan"/utf8>>)) end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> ('un--prim'(<<"doubleASin"/utf8>>)) end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> ('un--prim'(<<"doubleACos"/utf8>>)) end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> ('un--prim'(<<"doubleATan"/utf8>>)) end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> ('un--prim'(<<"doubleSqrt"/utf8>>)) end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> ('un--prim'(<<"doubleFloor"/utf8>>)) end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> ('un--prim'(<<"doubleCeiling"/utf8>>)) end()); {'Idris.Core.TT.Cast', E16, E17} -> (fun (V17, V18) -> ('un--prim'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"cast_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V17)), ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V18)))))))) end(E16, E17)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> ('un--prim'(<<"believe_me"/utf8>>)) end()); {'Idris.Core.TT.Crash'} -> (fun () -> ('un--prim'(<<"crash"/utf8>>)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--numTypes'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--integralTypes'()), [{'Idris.Core.TT.DoubleType'} | []])).
'un--neg'(V0) -> case V0 of {'Idris.Core.TT.BI', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (0 - V1)})) end(E0)); {'Idris.Core.TT.I', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', ((0 - V2) rem 9223372036854775808)})) end(E1)); {'Idris.Core.TT.I8', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--int8CastWrap'((0 - V3)))})) end(E2)); {'Idris.Core.TT.I16', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--int16CastWrap'((0 - V4)))})) end(E3)); {'Idris.Core.TT.I32', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--int32CastWrap'((0 - V5)))})) end(E4)); {'Idris.Core.TT.I64', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--int64CastWrap'((0 - V6)))})) end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', ('un--bit8CastWrap'(((0 - V7) rem 9223372036854775808)))})) end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', ('un--bit16CastWrap'(((0 - V8) rem 9223372036854775808)))})) end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', ('un--bit32CastWrap'(((0 - V9) rem 9223372036854775808)))})) end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', ('un--bit64CastWrap'((0 - V10)))})) end(E9)); {'Idris.Core.TT.Db', E10} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Db', ('erlang':'-'(V11))})) end(E10)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mul'(V0, V1) -> case V0 of {'Idris.Core.TT.BI', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.BI', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (V2 * V3)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.B8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.B8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V4 * V5) rem 9223372036854775808), ('un--b8max'())))})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.B16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.B16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V6 * V7) rem 9223372036854775808), ('un--b16max'())))})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.B32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.B32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V8 * V9) rem 9223372036854775808), ('un--b32max'())))})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.B64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.B64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'((V10 * V11), ('un--b64max'())))})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.I', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.I', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', ((V12 * V13) rem 9223372036854775808)})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.I8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.I8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--int8CastWrap'((V14 * V15)))})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.I16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.I16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--int16CastWrap'((V16 * V17)))})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.I32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.I32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--int32CastWrap'((V18 * V19)))})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.I64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.I64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--int64CastWrap'((V20 * V21)))})) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Db', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Db', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Num':'dn--un--*_Num_Double'(V22, V23))})) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mod'(V0, V1) -> case V0 of {'Idris.Core.TT.BI', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.BI', E1} -> (fun (V3) -> case V3 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V2, V3))})) end end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I', E3} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V4, V5))})) end end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I8', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I8', E5} -> (fun (V7) -> case V7 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--int8CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V6, V7))))})) end end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I16', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I16', E7} -> (fun (V9) -> case V9 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--int16CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V8, V9))))})) end end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I32', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I32', E9} -> (fun (V11) -> case V11 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--int32CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V10, V11))))})) end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.I64', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.I64', E11} -> (fun (V13) -> case V13 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--int64CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V12, V13))))})) end end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> case V15 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', ('un--bit8CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V14, V15))))})) end end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> case V17 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', ('un--bit16CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V16, V17))))})) end end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> case V19 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', ('un--bit32CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V18, V19))))})) end end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> case V21 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', ('un--bit64CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V20, V21))))})) end end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--lte'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V2, V3)))))) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V4, V5)))))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V6, V7)))))) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V8, V9)))))) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V10, V11)))))) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V12, V13)))))) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V14, V15)))))) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V16, V17)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V18, V19)))))) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V20, V21)))))) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Str', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Str', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V22, V23)))))) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Ch', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Ch', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V24, V25)))))) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); {'Idris.Core.TT.Db', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Db', E25} -> (fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Double'(V26, V27)))))) end(E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--lt'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, V3)))))) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V4, V5)))))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V6, V7)))))) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V8, V9)))))) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V10, V11)))))) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V12, V13)))))) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V14, V15)))))) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V16, V17)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V18, V19)))))) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V20, V21)))))) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Str', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Str', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V22, V23)))))) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Ch', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Ch', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V24, V25)))))) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); {'Idris.Core.TT.Db', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Db', E25} -> (fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Double'(V26, V27)))))) end(E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--integralTypes'() -> [{'Idris.Core.TT.IntType'} | [{'Idris.Core.TT.Int8Type'} | [{'Idris.Core.TT.Int16Type'} | [{'Idris.Core.TT.Int32Type'} | [{'Idris.Core.TT.Int64Type'} | [{'Idris.Core.TT.IntegerType'} | [{'Idris.Core.TT.Bits8Type'} | [{'Idris.Core.TT.Bits16Type'} | [{'Idris.Core.TT.Bits32Type'} | [{'Idris.Core.TT.Bits64Type'} | []]]]]]]]]]].
'un--intCastWrap'(V0, V1) -> begin (V2 = (2 * V1)), begin (V3 = ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V0, V2))), begin (V4 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V3, 0)) of 1 -> (V3 + V2); 0 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V4, V1)) of 1 -> (V4 - V2); 0 -> V4; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--int8max'() -> 128.
'un--int8CastWrap'(V0) -> ('un--intCastWrap'(V0, ('un--int8max'()))).
'un--int64max'() -> 9223372036854775808.
'un--int64CastWrap'(V0) -> ('un--intCastWrap'(V0, ('un--int64max'()))).
'un--int32max'() -> 2147483648.
'un--int32CastWrap'(V0) -> ('un--intCastWrap'(V0, ('un--int32max'()))).
'un--int16max'() -> 32768.
'un--int16CastWrap'(V0) -> ('un--intCastWrap'(V0, ('un--int16max'()))).
'un--gte'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, V3)))))) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V4, V5)))))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V6, V7)))))) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V8, V9)))))) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V10, V11)))))) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V12, V13)))))) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V14, V15)))))) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V16, V17)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V18, V19)))))) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V20, V21)))))) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Str', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Str', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V22, V23)))))) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Ch', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Ch', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V24, V25)))))) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); {'Idris.Core.TT.Db', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Db', E25} -> (fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Double'(V26, V27)))))) end(E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--gt'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V2, V3)))))) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V4, V5)))))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V6, V7)))))) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V8, V9)))))) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V10, V11)))))) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V12, V13)))))) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V14, V15)))))) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V16, V17)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V18, V19)))))) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V20, V21)))))) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Str', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Str', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V22, V23)))))) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Ch', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Ch', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V24, V25)))))) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); {'Idris.Core.TT.Db', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Db', E25} -> (fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Double'(V26, V27)))))) end(E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getOp'(V0, V1) -> case V0 of {'Idris.Core.TT.Add', E0} -> (fun (V2) -> fun (V3) -> ('un--binOp'(fun (V4) -> fun (V5) -> ('un--add'(V4, V5)) end end, V1, V3)) end end(E0)); {'Idris.Core.TT.Sub', E1} -> (fun (V6) -> fun (V7) -> ('un--binOp'(fun (V8) -> fun (V9) -> ('un--sub'(V8, V9)) end end, V1, V7)) end end(E1)); {'Idris.Core.TT.Mul', E2} -> (fun (V10) -> fun (V11) -> ('un--binOp'(fun (V12) -> fun (V13) -> ('un--mul'(V12, V13)) end end, V1, V11)) end end(E2)); {'Idris.Core.TT.Div', E3} -> (fun (V14) -> fun (V15) -> ('un--binOp'(fun (V16) -> fun (V17) -> ('un--div'(V16, V17)) end end, V1, V15)) end end(E3)); {'Idris.Core.TT.Mod', E4} -> (fun (V18) -> fun (V19) -> ('un--binOp'(fun (V20) -> fun (V21) -> ('un--mod'(V20, V21)) end end, V1, V19)) end end(E4)); {'Idris.Core.TT.Neg', E5} -> (fun (V22) -> fun (V23) -> ('un--unaryOp'(fun (V24) -> ('un--neg'(V24)) end, V1, V23)) end end(E5)); {'Idris.Core.TT.ShiftL', E6} -> (fun (V25) -> fun (V26) -> ('un--binOp'(fun (V27) -> fun (V28) -> ('un--shiftl'(V27, V28)) end end, V1, V26)) end end(E6)); {'Idris.Core.TT.ShiftR', E7} -> (fun (V29) -> fun (V30) -> ('un--binOp'(fun (V31) -> fun (V32) -> ('un--shiftr'(V31, V32)) end end, V1, V30)) end end(E7)); {'Idris.Core.TT.BAnd', E8} -> (fun (V33) -> fun (V34) -> ('un--binOp'(fun (V35) -> fun (V36) -> ('un--band'(V35, V36)) end end, V1, V34)) end end(E8)); {'Idris.Core.TT.BOr', E9} -> (fun (V37) -> fun (V38) -> ('un--binOp'(fun (V39) -> fun (V40) -> ('un--bor'(V39, V40)) end end, V1, V38)) end end(E9)); {'Idris.Core.TT.BXOr', E10} -> (fun (V41) -> fun (V42) -> ('un--binOp'(fun (V43) -> fun (V44) -> ('un--bxor'(V43, V44)) end end, V1, V42)) end end(E10)); {'Idris.Core.TT.LT', E11} -> (fun (V45) -> fun (V46) -> ('un--binOp'(fun (V47) -> fun (V48) -> ('un--lt'(V47, V48)) end end, V1, V46)) end end(E11)); {'Idris.Core.TT.LTE', E12} -> (fun (V49) -> fun (V50) -> ('un--binOp'(fun (V51) -> fun (V52) -> ('un--lte'(V51, V52)) end end, V1, V50)) end end(E12)); {'Idris.Core.TT.EQ', E13} -> (fun (V53) -> fun (V54) -> ('un--binOp'(fun (V55) -> fun (V56) -> ('un--eq'(V55, V56)) end end, V1, V54)) end end(E13)); {'Idris.Core.TT.GTE', E14} -> (fun (V57) -> fun (V58) -> ('un--binOp'(fun (V59) -> fun (V60) -> ('un--gte'(V59, V60)) end end, V1, V58)) end end(E14)); {'Idris.Core.TT.GT', E15} -> (fun (V61) -> fun (V62) -> ('un--binOp'(fun (V63) -> fun (V64) -> ('un--gt'(V63, V64)) end end, V1, V62)) end end(E15)); {'Idris.Core.TT.StrLength'} -> (fun () -> fun (V65) -> ('un--strLength'(V65)) end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> fun (V66) -> ('un--strHead'(V66)) end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> fun (V67) -> ('un--strTail'(V67)) end end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> fun (V68) -> ('un--strIndex'(V68)) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> fun (V69) -> ('un--strCons'(V69)) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> fun (V70) -> ('un--strAppend'(V70)) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> fun (V71) -> ('un--strReverse'(V71)) end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> fun (V72) -> ('un--strSubstr'(V72)) end end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> fun (V73) -> ('un--doubleExp'(V73)) end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> fun (V74) -> ('un--doubleLog'(V74)) end end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> fun (V75) -> ('un--doublePow'(V1, V75)) end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> fun (V76) -> ('un--doubleSin'(V76)) end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> fun (V77) -> ('un--doubleCos'(V77)) end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> fun (V78) -> ('un--doubleTan'(V78)) end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> fun (V79) -> ('un--doubleASin'(V79)) end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> fun (V80) -> ('un--doubleACos'(V80)) end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> fun (V81) -> ('un--doubleATan'(V81)) end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> fun (V82) -> ('un--doubleSqrt'(V82)) end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> fun (V83) -> ('un--doubleFloor'(V83)) end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> fun (V84) -> ('un--doubleCeiling'(V84)) end end()); {'Idris.Core.TT.Cast', E16, E17} -> (fun (V85, V86) -> fun (V87) -> ('un--castTo'(V86, V87)) end end(E16, E17)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> fun (V88) -> ('un--believeMe'(V88)) end end()); _ -> fun (V89) -> {'Idris.Prelude.Types.Nothing'} end end.
'un--eq'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V3)))))) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V4, V5)))))) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)))))) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V8, V9)))))) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V10, V11)))))) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V12, V13)))))) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)))))) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V16, V17)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V18, V19)))))) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V20, V21)))))) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Str', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Str', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23)))))) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Ch', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Ch', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V24, V25)))))) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); {'Idris.Core.TT.Db', E24} -> (fun (V26) -> case V1 of {'Idris.Core.TT.Db', E25} -> (fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('un--toInt'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Double'(V26, V27)))))) end(E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--doubleTy'() -> ('un--predTy'({'Idris.Core.TT.DoubleType'}, {'Idris.Core.TT.DoubleType'})).
'un--doubleTan'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--tan'(V1)) end, V0)).
'un--doubleSqrt'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--sqrt'(V1)) end, V0)).
'un--doubleSin'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--sin'(V1)) end, V0)).
'un--doublePow'(V0, V1) -> ('un--binOp'(fun (V2) -> fun (V3) -> ('nested--9233-5268--in--un--pow\x{27}'(V0, V2, V3)) end end, V0, V1)).
'un--doubleOp'(V0, V1) -> case V1 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Core.TT.Db', E4} -> (fun (V6) -> case V3 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V4, {'Idris.Core.TT.Db', (V0(V6))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--doubleLog'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--log'(V1)) end, V0)).
'un--doubleFloor'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--floor'(V1)) end, V0)).
'un--doubleExp'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--exp'(V1)) end, V0)).
'un--doubleCos'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--cos'(V1)) end, V0)).
'un--doubleCeiling'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--ceiling'(V1)) end, V0)).
'un--doubleATan'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--atan'(V1)) end, V0)).
'un--doubleASin'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--asin'(V1)) end, V0)).
'un--doubleACos'(V0) -> ('un--doubleOp'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--acos'(V1)) end, V0)).
'un--div'(V0, V1) -> case V0 of {'Idris.Core.TT.BI', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.BI', E1} -> (fun (V3) -> case V3 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V2, V3))})) end end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I', E3} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V4, V5))})) end end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I8', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I8', E5} -> (fun (V7) -> case V7 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--int8CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V6, V7))))})) end end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I16', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I16', E7} -> (fun (V9) -> case V9 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--int16CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V8, V9))))})) end end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I32', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I32', E9} -> (fun (V11) -> case V11 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--int32CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V10, V11))))})) end end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.I64', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.I64', E11} -> (fun (V13) -> case V13 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--int64CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V12, V13))))})) end end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> case V15 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', ('un--bit8CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V14, V15))))})) end end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> case V17 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', ('un--bit16CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V16, V17))))})) end end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> case V19 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', ('un--bit32CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V18, V19))))})) end end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> case V21 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', ('un--bit64CastWrap'(('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V20, V21))))})) end end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Db', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Db', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(V22, V23))})) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--crashTy'() -> ('un--pi'(<<"a"/utf8>>, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V0) -> fun (V1) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V0, V1)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V2, V3)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.TType', ('Idris.Idris2.Core.FC':'un--emptyFC'())}, ('un--pi'(<<"msg"/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Core.TT.StringType'}}, {'Idris.Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Prelude.Types.Nothing'}, (1 + 0)})))).
'un--constantIntegerValue'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))} end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> {'Idris.Prelude.Types.Just', V4} end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> {'Idris.Prelude.Types.Just', V5} end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> {'Idris.Prelude.Types.Just', V6} end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V7) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V7))} end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V8) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V8))} end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V9) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V9))} end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V10) -> {'Idris.Prelude.Types.Just', V10} end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--constTy3'(V0, V1, V2, V3) -> begin (V6 = fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.TT':'un--fnType'([], ('Idris.Idris2.Core.FC':'un--emptyFC'()), V4, V5)) end end), ((V6({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V0}))(((V6({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V1}))(((V6({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2}))({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V3})))))) end.
'un--constTy'(V0, V1, V2) -> begin (V5 = fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.TT':'un--fnType'([], ('Idris.Idris2.Core.FC':'un--emptyFC'()), V3, V4)) end end), ((V5({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V0}))(((V5({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V1}))({'Idris.Core.TT.PrimVal', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2})))) end.
'un--cmpTy'(V0) -> ('un--constTy'(V0, V0, {'Idris.Core.TT.IntType'})).
'un--castTo'(V0, V1) -> case V0 of {'Idris.Core.TT.IntType'} -> (fun () -> ('un--castInt'(V1)) end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> ('un--castInt8'(V1)) end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> ('un--castInt16'(V1)) end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> ('un--castInt32'(V1)) end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> ('un--castInt64'(V1)) end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> ('un--castInteger'(V1)) end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> ('un--castBits8'(V1)) end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> ('un--castBits16'(V1)) end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> ('un--castBits32'(V1)) end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> ('un--castBits64'(V1)) end()); {'Idris.Core.TT.StringType'} -> (fun () -> ('un--castString'(V1)) end()); {'Idris.Core.TT.CharType'} -> (fun () -> ('un--castChar'(V1)) end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> ('un--castDouble'(V1)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castString'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I8', E5} -> (fun (V6) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5)); {'Idris.Core.TT.I16', E6} -> (fun (V7) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V7))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I32', E7} -> (fun (V8) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V8))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7)); {'Idris.Core.TT.I64', E8} -> (fun (V9) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V9))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E9} -> (fun (V10) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V10))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); {'Idris.Core.TT.B8', E10} -> (fun (V11) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B16', E11} -> (fun (V12) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E11)); {'Idris.Core.TT.B32', E12} -> (fun (V13) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B64', E13} -> (fun (V14) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V14))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13)); {'Idris.Core.TT.Ch', E14} -> (fun (V15) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Libraries.Utils.String':'un--stripQuotes'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V15))))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.Db', E15} -> (fun (V16) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Str', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V16))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castInteger'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V5))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I8', E5} -> (fun (V6) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', V6}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5)); {'Idris.Core.TT.I16', E6} -> (fun (V7) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', V7}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I32', E7} -> (fun (V8) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', V8}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7)); {'Idris.Core.TT.I64', E8} -> (fun (V9) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', V9}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.B8', E9} -> (fun (V10) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V10))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); {'Idris.Core.TT.B16', E10} -> (fun (V11) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V11))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B32', E11} -> (fun (V12) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V12))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E11)); {'Idris.Core.TT.B64', E12} -> (fun (V13) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', V13}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.Ch', E13} -> (fun (V14) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V14))))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13)); {'Idris.Core.TT.Db', E14} -> (fun (V15) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Double_Integer'(V15))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.Str', E15} -> (fun (V16) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Integer'(V16))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castInt8'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V6 = ('un--int8CastWrap'(V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I8', V6}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castInt64'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V6 = ('un--int64CastWrap'(V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I64', V6}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castInt32'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V6 = ('un--int32CastWrap'(V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I32', V6}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castInt16'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V6 = ('un--int16CastWrap'(V5))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I16', V6}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castInt'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.I8', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V5}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I16', E5} -> (fun (V6) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V6}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5)); {'Idris.Core.TT.I32', E6} -> (fun (V7) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V7}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E7} -> (fun (V8) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V8}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7)); {'Idris.Core.TT.BI', E8} -> (fun (V9) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V9}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.B8', E9} -> (fun (V10) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V10}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); {'Idris.Core.TT.B16', E10} -> (fun (V11) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V11}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B32', E11} -> (fun (V12) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V12}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E11)); {'Idris.Core.TT.B64', E12} -> (fun (V13) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', V13}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.Db', E13} -> (fun (V14) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Double_Int'(V14))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13)); {'Idris.Core.TT.Ch', E14} -> (fun (V15) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V15))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.Str', E15} -> (fun (V16) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.I', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Int'(V16))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castDouble'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Double'(V5))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I8', E5} -> (fun (V6) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V6))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5)); {'Idris.Core.TT.I16', E6} -> (fun (V7) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V7))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I32', E7} -> (fun (V8) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V8))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7)); {'Idris.Core.TT.I64', E8} -> (fun (V9) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V9))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E9} -> (fun (V10) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Double'(V10))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V11) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Double'(V11))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castChar'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.Ch', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(V5))}}} end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castBits8'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V33 = ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V22, V23)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V24) -> fun (V25) -> (V24 + V25) end end, fun (V26) -> fun (V27) -> (V26 * V27) end end, fun (V28) -> V28 end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V31, V32)) end end}, V5, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('un--b8max'())))))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.B8', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V33))}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castBits64'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V33 = ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V22, V23)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V24) -> fun (V25) -> (V24 + V25) end end, fun (V26) -> fun (V27) -> (V26 * V27) end end, fun (V28) -> V28 end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V31, V32)) end end}, V5, ('un--b64max'())))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.B64', V33}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castBits32'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V33 = ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V22, V23)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V24) -> fun (V25) -> (V24 + V25) end end, fun (V26) -> fun (V27) -> (V26 * V27) end end, fun (V28) -> V28 end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V31, V32)) end end}, V5, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('un--b32max'())))))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.B32', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V33))}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--castBits16'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V3, V4) -> case V2 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--constantIntegerValue'(V4)), fun (V5) -> begin (V33 = ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V22, V23)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V24) -> fun (V25) -> (V24 + V25) end end, fun (V26) -> fun (V27) -> (V26 * V27) end end, fun (V28) -> V28 end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V31, V32)) end end}, V5, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('un--b16max'())))))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.Value.NPrimVal', V3, {'Idris.Core.TT.B16', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Integer_Int'(V33))}})) end end)) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--bxor'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', (V2 bxor V3)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.B8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.B8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', (V4 bxor V5)})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.B16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.B16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', (V6 bxor V7)})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.B32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.B32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', (V8 bxor V9)})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.B64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.B64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', (V10 bxor V11)})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.I8', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.I8', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', (V12 bxor V13)})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.I16', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.I16', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', (V14 bxor V15)})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.I32', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.I32', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', (V16 bxor V17)})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.I64', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.I64', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', (V18 bxor V19)})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.BI', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.BI', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (V20 bxor V21)})) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--bor'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', (V2 bor V3)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', (V4 bor V5)})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', (V6 bor V7)})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', (V8 bor V9)})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', (V10 bor V11)})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (V12 bor V13)})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', (V14 bor V15)})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', (V16 bor V17)})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', (V18 bor V19)})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', (V20 bor V21)})) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--bitCastWrap'(V0, V1, V2, V3) -> case case V0 of {'Idris.Prelude.EqOrd.MkOrd', E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11) -> ((V9(V2))(case V1 of {'Idris.Prelude.Num.MkIntegral', E20, E21, E22} -> (fun (V12, V13, V14) -> case V12 of {'Idris.Prelude.Num.MkNum', E23, E24, E25} -> (fun (V15, V16, V17) -> (V17(0)) end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case V1 of {'Idris.Prelude.Num.MkIntegral', E0, E1, E2} -> (fun (V18, V19, V20) -> ((V20(V2))(V3)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V1 of {'Idris.Prelude.Num.MkIntegral', E3, E4, E5} -> (fun (V21, V22, V23) -> case V21 of {'Idris.Prelude.Num.MkNum', E6, E7, E8} -> (fun (V24, V25, V26) -> ((V24(V3))(case V1 of {'Idris.Prelude.Num.MkIntegral', E9, E10, E11} -> (fun (V27, V28, V29) -> ((V29(V2))(V3)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bit8CastWrap'(V0) -> ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V17, V18)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V19) -> fun (V20) -> ((V19 + V20) rem 9223372036854775808) end end, fun (V21) -> fun (V22) -> ((V21 * V22) rem 9223372036854775808) end end, fun (V23) -> V23 end}, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V26, V27)) end end}, V0, ('un--b8max'()))).
'un--bit64CastWrap'(V0) -> ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Integer'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Integer'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Integer'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Integer'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Integer'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Integer'(V17, V18)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V19) -> fun (V20) -> (V19 + V20) end end, fun (V21) -> fun (V22) -> (V21 * V22) end end, fun (V23) -> V23 end}, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Integer'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'(V26, V27)) end end}, V0, ('un--b64max'()))).
'un--bit32CastWrap'(V0) -> ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V17, V18)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V19) -> fun (V20) -> ((V19 + V20) rem 9223372036854775808) end end, fun (V21) -> fun (V22) -> ((V21 * V22) rem 9223372036854775808) end end, fun (V23) -> V23 end}, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V26, V27)) end end}, V0, ('un--b32max'()))).
'un--bit16CastWrap'(V0) -> ('un--bitCastWrap'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V17, V18)) end end}, {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V19) -> fun (V20) -> ((V19 + V20) rem 9223372036854775808) end end, fun (V21) -> fun (V22) -> ((V21 * V22) rem 9223372036854775808) end end, fun (V23) -> V23 end}, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V26, V27)) end end}, V0, ('un--b16max'()))).
'un--binOp'(V0, V1, V2) -> case V2 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V5, V6) -> case V4 of {'Idris.Data.Vect.::', E4, E5} -> (fun (V7, V8) -> case V7 of {'Idris.Core.Value.NPrimVal', E6, E7} -> (fun (V9, V10) -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V11) -> {'Idris.Core.Value.NPrimVal', V5, V11} end, ((V0(V6))(V10)))) end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--believeMeTy'() -> ('un--pi'(<<"a"/utf8>>, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V0) -> fun (V1) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V0, V1)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V2) -> fun (V3) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V2, V3)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.TType', ('Idris.Idris2.Core.FC':'un--emptyFC'())}, ('un--pi'(<<"b"/utf8>>, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.TType', ('Idris.Idris2.Core.FC':'un--emptyFC'())}, ('un--pi'(<<"x"/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Prelude.Types.Nothing'}, (1 + 0)}, {'Idris.Core.TT.Local', ('Idris.Idris2.Core.FC':'un--emptyFC'()), {'Idris.Prelude.Types.Nothing'}, (1 + 0)})))))).
'un--believeMe'(V0) -> case V0 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Data.Vect.::', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Data.Vect.::', E4, E5} -> (fun (V5, V6) -> case V5 of {'Idris.Core.Value.NDCon', E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11) -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', V5} end()); _ -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9, E10)); {'Idris.Core.Value.NTCon', E11, E12, E13, E14, E15} -> (fun (V12, V13, V14, V15, V16) -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', V5} end()); _ -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13, E14, E15)); {'Idris.Core.Value.NPrimVal', E16, E17} -> (fun (V17, V18) -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', V5} end()); _ -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); {'Idris.Core.Value.NType', E18} -> (fun (V19) -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.Value.NType', V19}} end()); _ -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--band'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.I', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', (V2 band V3)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I8', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', (V4 band V5)})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I16', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I16', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', (V6 band V7)})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I32', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I32', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', (V8 band V9)})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I64', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I64', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', (V10 band V11)})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.BI', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.BI', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (V12 band V13)})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', (V14 band V15)})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', (V16 band V17)})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', (V18 band V19)})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', (V20 band V21)})) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--b8max'() -> 256.
'un--b64max'() -> 18446744073709551616.
'un--b32max'() -> 4294967296.
'un--b16max'() -> 65536.
'un--arithTy'(V0) -> ('un--constTy'(V0, V0, V0)).
'un--allPrimitives'() -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.Add', V0}, ('un--arithTy'(V0)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.Sub', V1}, ('un--arithTy'(V1)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.Mul', V2}, ('un--arithTy'(V2)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> {'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.Neg', V3}, ('un--predTy'(V3, V3)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.Div', V4}, ('un--arithTy'(V4)), ('Idris.Idris2.Core.TT':'un--notCovering'())} end, ('un--numTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.Mod', V5}, ('un--arithTy'(V5)), ('Idris.Idris2.Core.TT':'un--notCovering'())} end, ('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.ShiftL', V6}, ('un--arithTy'(V6)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.ShiftR', V7}, ('un--arithTy'(V7)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.BAnd', V8}, ('un--arithTy'(V8)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.BOr', V9}, ('un--arithTy'(V9)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.BXOr', V10}, ('un--arithTy'(V10)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--integralTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.LT', V11}, ('un--cmpTy'(V11)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.LTE', V12}, ('un--cmpTy'(V12)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.EQ', V13}, ('un--cmpTy'(V13)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.GTE', V14}, ('un--cmpTy'(V14)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> {'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.GT', V15}, ('un--cmpTy'(V15)), ('Idris.Idris2.Core.TT':'un--isTotal'())} end, ('un--primTypes'()))), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.StrLength'}, ('un--predTy'({'Idris.Core.TT.StringType'}, {'Idris.Core.TT.IntType'})), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.StrHead'}, ('un--predTy'({'Idris.Core.TT.StringType'}, {'Idris.Core.TT.CharType'})), ('Idris.Idris2.Core.TT':'un--notCovering'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.StrTail'}, ('un--predTy'({'Idris.Core.TT.StringType'}, {'Idris.Core.TT.StringType'})), ('Idris.Idris2.Core.TT':'un--notCovering'())} | [{'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.StrIndex'}, ('un--constTy'({'Idris.Core.TT.StringType'}, {'Idris.Core.TT.IntType'}, {'Idris.Core.TT.CharType'})), ('Idris.Idris2.Core.TT':'un--notCovering'())} | [{'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.StrCons'}, ('un--constTy'({'Idris.Core.TT.CharType'}, {'Idris.Core.TT.StringType'}, {'Idris.Core.TT.StringType'})), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.StrAppend'}, ('un--arithTy'({'Idris.Core.TT.StringType'})), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.StrReverse'}, ('un--predTy'({'Idris.Core.TT.StringType'}, {'Idris.Core.TT.StringType'})), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + (1 + (1 + 0))), {'Idris.Core.TT.StrSubstr'}, ('un--constTy3'({'Idris.Core.TT.IntType'}, {'Idris.Core.TT.IntType'}, {'Idris.Core.TT.StringType'}, {'Idris.Core.TT.StringType'})), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + (1 + (1 + 0))), {'Idris.Core.TT.BelieveMe'}, ('un--believeMeTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.Crash'}, ('un--crashTy'()), ('Idris.Idris2.Core.TT':'un--notCovering'())} | []]]]]]]]]]], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'([{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleExp'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleLog'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + (1 + 0)), {'Idris.Core.TT.DoublePow'}, ('un--arithTy'({'Idris.Core.TT.DoubleType'})), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleSin'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleCos'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleTan'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleASin'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleACos'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleATan'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleSqrt'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleFloor'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | [{'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.DoubleCeiling'}, ('un--doubleTy'()), ('Idris.Idris2.Core.TT':'un--isTotal'())} | []]]]]]]]]]]]], ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--primTypes'()), fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('un--primTypes'()), fun (V17) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V20, V21)) end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V26, V27)) end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V30, V31)) end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'(V33)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V36, V37)) end end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V39)) end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V42, V43)) end end end end}, fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_List'()) end, fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_List'(V46, V47)) end end end}, case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V16, V17)) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V50, V51)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V54, V55)) end end}, {'Idris.Builtin.MkPair', V16, V17}, {'Idris.Builtin.MkPair', {'Idris.Core.TT.StringType'}, {'Idris.Core.TT.CharType'}})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V58, V59)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V62, V63)) end end}, {'Idris.Builtin.MkPair', V16, V17}, {'Idris.Builtin.MkPair', {'Idris.Core.TT.DoubleType'}, {'Idris.Core.TT.CharType'}})) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V66, V67)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V70, V71)) end end}, {'Idris.Builtin.MkPair', V16, V17}, {'Idris.Builtin.MkPair', {'Idris.Core.TT.CharType'}, {'Idris.Core.TT.DoubleType'}})); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'({'Idris.Core.Primitives.MkPrim', (1 + 0), {'Idris.Core.TT.Cast', V16, V17}, ('un--predTy'(V16, V17)), ('Idris.Idris2.Core.TT':'un--isTotal'())})) end)) end)) end)))))))))))))))))))))))))))))))))))))).
'un--add'(V0, V1) -> case V0 of {'Idris.Core.TT.BI', E0} -> (fun (V2) -> case V1 of {'Idris.Core.TT.BI', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.BI', (V2 + V3)})) end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); {'Idris.Core.TT.I', E2} -> (fun (V4) -> case V1 of {'Idris.Core.TT.I', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I', ((V4 + V5) rem 9223372036854775808)})) end(E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2)); {'Idris.Core.TT.I8', E4} -> (fun (V6) -> case V1 of {'Idris.Core.TT.I8', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I8', ('un--int8CastWrap'((V6 + V7)))})) end(E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4)); {'Idris.Core.TT.I16', E6} -> (fun (V8) -> case V1 of {'Idris.Core.TT.I16', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I16', ('un--int16CastWrap'((V8 + V9)))})) end(E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E6)); {'Idris.Core.TT.I32', E8} -> (fun (V10) -> case V1 of {'Idris.Core.TT.I32', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I32', ('un--int32CastWrap'((V10 + V11)))})) end(E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8)); {'Idris.Core.TT.I64', E10} -> (fun (V12) -> case V1 of {'Idris.Core.TT.I64', E11} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.I64', ('un--int64CastWrap'((V12 + V13)))})) end(E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10)); {'Idris.Core.TT.B8', E12} -> (fun (V14) -> case V1 of {'Idris.Core.TT.B8', E13} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B8', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V14 + V15) rem 9223372036854775808), ('un--b8max'())))})) end(E13)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E12)); {'Idris.Core.TT.B16', E14} -> (fun (V16) -> case V1 of {'Idris.Core.TT.B16', E15} -> (fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B16', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V16 + V17) rem 9223372036854775808), ('un--b16max'())))})) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E14)); {'Idris.Core.TT.B32', E16} -> (fun (V18) -> case V1 of {'Idris.Core.TT.B32', E17} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B32', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(((V18 + V19) rem 9223372036854775808), ('un--b32max'())))})) end(E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E16)); {'Idris.Core.TT.B64', E18} -> (fun (V20) -> case V1 of {'Idris.Core.TT.B64', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.B64', ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Integer'((V20 + V21), ('un--b64max'())))})) end(E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E18)); {'Idris.Core.TT.Ch', E20} -> (fun (V22) -> case V1 of {'Idris.Core.TT.Ch', E21} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Ch', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(((('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V22)) + ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V23))) rem 9223372036854775808)))})) end(E21)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E20)); {'Idris.Core.TT.Db', E22} -> (fun (V24) -> case V1 of {'Idris.Core.TT.Db', E23} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Db', ('Idris.Idris2.Prelude.Num':'dn--un--+_Num_Double'(V24, V25))})) end(E23)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E22)); _ -> {'Idris.Prelude.Types.Nothing'} end.
