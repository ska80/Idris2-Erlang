-module('Idris.Idris2.Compiler.Interpreter.VMCode').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in callFunc-3953'/13,
  'case--callFunc-3816'/10,
  'case--step-3211'/7,
  'case--callPrim-2471'/5,
  'nested--7091-2024--in--un--showWithIndex'/6,
  'nested--7739-2637--in--un--prim_putStr'/3,
  'nested--7739-2634--in--un--prim_putChar'/3,
  'nested--7739-2636--in--un--prim_getStr'/3,
  'nested--7739-2635--in--un--prim_getChar'/3,
  'nested--8102-3477--in--un--matchConst'/10,
  'nested--8102-3332--in--un--matchCon'/10,
  'nested--7511-2447--in--un--getConst'/5,
  'dn--un--show_Show_Object'/1,
  'dn--un--showPrec_Show_Object'/2,
  'un--unit'/0,
  'un--step'/4,
  'un--showType'/1,
  'un--showSep'/2,
  'un--showDepth'/2,
  'un--setReg'/5,
  'un--saveLocals'/3,
  'un--knownForeign'/0,
  'un--knownExtern'/0,
  'un--ioRes'/1,
  'un--interpError'/4,
  'un--initInterpState'/1,
  'un--indexMaybe'/2,
  'un--getReg'/4,
  'un--executeExpr'/4,
  'un--compileLibrary'/6,
  'un--compileExpr'/6,
  'un--codegenVMCodeInterp'/0,
  'un--callPrim'/4,
  'un--callFunc'/6,
  'un--beginFunction'/4,
  'un--argError'/4,
  'un--NS_UN'/2
]).
'case--case block in callFunc-3953'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> ('un--interpError'(V1, V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unkown foreign function: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)))), V13)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> case V14 of {'Idris.Builtin.DPair.MkDPair', E1, E2} -> (fun (V15, V16) -> case ('Idris.Idris2.Data.Vect':'un--toVect'(V15, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V17) -> ('un--interpError'(V1, V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Wrong number of arguments, found: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", expected: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V15)))))))), V17)) end end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V18) -> (((V16(V1))(V4))(V18)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--callFunc-3816'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('un--interpError'(V1, V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Undefined function: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)))), V10)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> case V11 of {'Idris.Compiler.VMCode.MkVMFun', E1, E2} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = case ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V12)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V2)))) of 1 -> ('un--interpError'(V1, V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected argument count during function call, expected: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V12)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", found: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V2)))))))))), V14)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> begin (V20 = (('un--beginFunction'(V1, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V12, V2)), V13, ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V18, V19)) end end, -1, V12))))(V14))), case V20 of {'Idris.Prelude.Types.Left', E5} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V22) -> begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V23) -> ('un--step'(V0, V7, V1, V23)) end, V22, V14))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> ('un--getReg'(V1, V7, {'Idris.Compiler.VMCode.RVal'}, V14)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); {'Idris.Compiler.VMCode.MkVMForeign', E9, E10, E11} -> (fun (V27, V28, V29) -> ('case--case block in callFunc-3953'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V27, V28, V29, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V3, ('un--knownForeign'()))))) end(E9, E10, E11)); {'Idris.Compiler.VMCode.MkVMError', E12} -> (fun (V30) -> fun (V31) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V32) -> ('un--step'(V0, V7, V1, V32)) end, V30, V31))), case V33 of {'Idris.Prelude.Types.Left', E13} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V35) -> ('un--getReg'(V1, V7, {'Idris.Compiler.VMCode.RVal'}, V31)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--step-3211'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> ('un--interpError'(V1, V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"EXTPRIM: Unkown foreign function: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)))), V7)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.DPair.MkDPair', E1, E2} -> (fun (V9, V10) -> fun (V11) -> case ('Idris.Idris2.Data.Vect':'un--toVect'(V9, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--interpError'(V1, V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"EXTPRIM: Wrong number of arguments, found: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", expected: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V9)))))))), V11)) end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V12) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V13) -> fun (V14) -> ('un--getReg'(V1, V5, V13, V14)) end end, V12, V11))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V18 = ((((V10(V1))(V5))(V17))(V11))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> ('un--setReg'(V1, V5, V4, V20, V11)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--callPrim-2471'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> case (('Idris.Idris2.Core.Primitives':'un--getOp'(V2, []))(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V8, V9)) end end end end, fun (V10) -> {'Idris.Core.Value.NPrimVal', {'Idris.Core.FC.EmptyFC'}, V10} end, V5)))) of {'Idris.Prelude.Types.Just', E1} -> (fun (V11) -> fun (V12) -> case V11 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V13, V14) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Interpreter.VMCode.Const', V14}} end(E2, E3)); _ -> ('un--interpError'(V0, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OP: Error calling "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.Primitives':'un--opName'(V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with operands: "/utf8>>, ('Idris.Idris2.Data.Vect':'dn--un--show_Show_((Vect $len) $elem)'({'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V16, V17)) end end}, V5)))))))), V12)) end end end(E1)); _ -> fun (V18) -> ('un--interpError'(V0, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OP: Error calling "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.Primitives':'un--opName'(V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with operands: "/utf8>>, ('Idris.Idris2.Data.Vect':'dn--un--show_Show_((Vect $len) $elem)'({'Idris.Prelude.Show.MkShow', fun (V19) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V19)) end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V20, V21)) end end}, V5)))))))), V18)) end end end(E0)); {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> fun (V23) -> ('un--interpError'(V0, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OP: Expected Constant, found "/utf8>>, ('un--showType'(V22)))), V23)) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7091-2024--in--un--showWithIndex'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V4 of {'Idris.Prelude.Show.MkShow', E2, E3} -> (fun (V8, V9) -> (V8(V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('nested--7091-2024--in--un--showWithIndex'(V0, V1, V2, (1 + V3), V4, V7)))))))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7739-2637--in--un--prim_putStr'(V0, V1, V2) -> case V2 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Compiler.Interpreter.VMCode.Const', E2} -> (fun (V5) -> case V5 of {'Idris.Core.TT.Str', E3} -> (fun (V6) -> case V4 of {'Idris.Data.Vect.::', E4, E5} -> (fun (V7, V8) -> case V7 of {'Idris.Compiler.Interpreter.VMCode.Const', E6} -> (fun (V9) -> case V9 of {'Idris.Core.TT.WorldVal'} -> (fun () -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('un--ioRes'(('un--unit'())))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', 0} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> begin (V46 = (('Idris.Idris2.Prelude.IO':'un--putStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> V25 end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), begin (V33 = (V30(V31))), (V32(V33)) end end end end end end end}, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), ((V37(V39))(V38)) end end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V41(V42))), (V43(V42)) end end end end}, fun (V44) -> fun (V45) -> V45 end end}, V6))(V18))), {'Idris.Prelude.Types.Right', V46} end end, V14)) end, V10)) end end()); _ -> fun (V47) -> ('un--argError'(V0, V1, V2, V47)) end end end()); _ -> fun (V48) -> ('un--argError'(V0, V1, V2, V48)) end end end(E6)); _ -> fun (V49) -> ('un--argError'(V0, V1, V2, V49)) end end end(E4, E5)); _ -> fun (V50) -> ('un--argError'(V0, V1, V2, V50)) end end end(E3)); _ -> fun (V51) -> ('un--argError'(V0, V1, V2, V51)) end end end(E2)); _ -> fun (V52) -> ('un--argError'(V0, V1, V2, V52)) end end end(E0, E1)); _ -> fun (V53) -> ('un--argError'(V0, V1, V2, V53)) end end.
'nested--7739-2634--in--un--prim_putChar'(V0, V1, V2) -> case V2 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Compiler.Interpreter.VMCode.Const', E2} -> (fun (V5) -> case V5 of {'Idris.Core.TT.Ch', E3} -> (fun (V6) -> case V4 of {'Idris.Data.Vect.::', E4, E5} -> (fun (V7, V8) -> case V7 of {'Idris.Compiler.Interpreter.VMCode.Const', E6} -> (fun (V9) -> case V9 of {'Idris.Core.TT.WorldVal'} -> (fun () -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('un--ioRes'(('un--unit'())))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', 0} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> begin (V46 = (('Idris.Idris2.Prelude.IO':'un--putChar'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> V25 end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), begin (V33 = (V30(V31))), (V32(V33)) end end end end end end end}, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), ((V37(V39))(V38)) end end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V41(V42))), (V43(V42)) end end end end}, fun (V44) -> fun (V45) -> V45 end end}, V6))(V18))), {'Idris.Prelude.Types.Right', V46} end end, V14)) end, V10)) end end()); _ -> fun (V47) -> ('un--argError'(V0, V1, V2, V47)) end end end()); _ -> fun (V48) -> ('un--argError'(V0, V1, V2, V48)) end end end(E6)); _ -> fun (V49) -> ('un--argError'(V0, V1, V2, V49)) end end end(E4, E5)); _ -> fun (V50) -> ('un--argError'(V0, V1, V2, V50)) end end end(E3)); _ -> fun (V51) -> ('un--argError'(V0, V1, V2, V51)) end end end(E2)); _ -> fun (V52) -> ('un--argError'(V0, V1, V2, V52)) end end end(E0, E1)); _ -> fun (V53) -> ('un--argError'(V0, V1, V2, V53)) end end.
'nested--7739-2636--in--un--prim_getStr'(V0, V1, V2) -> case V2 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Compiler.Interpreter.VMCode.Const', E2} -> (fun (V5) -> case V5 of {'Idris.Core.TT.WorldVal'} -> (fun () -> case V4 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Interpreter.VMCode.Const', {'Idris.Core.TT.Str', V9}}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> begin (V38 = (('Idris.Idris2.Prelude.IO':'un--getLine'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}))(V10))), {'Idris.Prelude.Types.Right', V38} end end, V6)) end end()); _ -> fun (V39) -> ('un--argError'(V0, V1, V2, V39)) end end end()); _ -> fun (V40) -> ('un--argError'(V0, V1, V2, V40)) end end end(E2)); _ -> fun (V41) -> ('un--argError'(V0, V1, V2, V41)) end end end(E0, E1)); _ -> fun (V42) -> ('un--argError'(V0, V1, V2, V42)) end end.
'nested--7739-2635--in--un--prim_getChar'(V0, V1, V2) -> case V2 of {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Compiler.Interpreter.VMCode.Const', E2} -> (fun (V5) -> case V5 of {'Idris.Core.TT.WorldVal'} -> (fun () -> case V4 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', ('un--ioRes'({'Idris.Compiler.Interpreter.VMCode.Const', {'Idris.Core.TT.Ch', V9}}))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> begin (V38 = (('Idris.Idris2.Prelude.IO':'un--getChar'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}))(V10))), {'Idris.Prelude.Types.Right', V38} end end, V6)) end end()); _ -> fun (V39) -> ('un--argError'(V0, V1, V2, V39)) end end end()); _ -> fun (V40) -> ('un--argError'(V0, V1, V2, V40)) end end end(E2)); _ -> fun (V41) -> ('un--argError'(V0, V1, V2, V41)) end end end(E0, E1)); _ -> fun (V42) -> ('un--argError'(V0, V1, V2, V42)) end end.
'nested--8102-3477--in--un--matchConst'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> fun (V10) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--interpError'(V1, V6, <<"CONSTCASE: Missing matching alternative or default"/utf8>>, V10)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V12) -> ('un--step'(V0, V6, V1, V12)) end, V11, V10)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E1 | E2] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V15, V16) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V7, V15)) of 1 -> fun (V17) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V18) -> ('un--step'(V0, V6, V1, V18)) end, V16, V17)) end; 0 -> ('nested--8102-3477--in--un--matchConst'(V0, V1, V2, V3, V4, V5, V6, V7, V14, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8102-3332--in--un--matchCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> fun (V10) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--interpError'(V1, V6, <<"CASE: Missing matching alternative or default"/utf8>>, V10)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V12) -> ('un--step'(V0, V6, V1, V12)) end, V11, V10)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E1 | E2] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V15, V16) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V19, V20)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V23, V24)) end end}}, V7, V15)) of 1 -> fun (V25) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V26) -> ('un--step'(V0, V6, V1, V26)) end, V16, V25)) end; 0 -> ('nested--8102-3332--in--un--matchCon'(V0, V1, V2, V3, V4, V5, V6, V7, V14, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7511-2447--in--un--getConst'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Compiler.Interpreter.VMCode.Const', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Right', V5} end(E0)); _ -> {'Idris.Prelude.Types.Left', V4} end.
'dn--un--show_Show_Object'(V0) -> ('un--showDepth'((1 + (1 + (1 + (1 + (1 + 0))))), V0)).
'dn--un--showPrec_Show_Object'(V0, V1) -> ('dn--un--show_Show_Object'(V1)).
'un--unit'() -> {'Idris.Compiler.Interpreter.VMCode.Const', {'Idris.Core.TT.I', 0}}.
'un--step'(V0, V1, V2, V3) -> case V3 of {'Idris.Compiler.VMCode.DECLARE', E0} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', 0} end end(E0)); {'Idris.Compiler.VMCode.START'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', 0} end end()); {'Idris.Compiler.VMCode.ASSIGN', E1, E2} -> (fun (V7, V8) -> fun (V9) -> begin (V10 = ('un--getReg'(V2, V1, V8, V9))), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> ('un--setReg'(V2, V1, V7, V12, V9)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); {'Idris.Compiler.VMCode.MKCON', E5, E6, E7} -> (fun (V13, V14, V15) -> fun (V16) -> begin (V19 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V17) -> fun (V18) -> ('un--getReg'(V2, V1, V17, V18)) end end, V15, [], V16))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> ('un--setReg'(V2, V1, V13, {'Idris.Compiler.Interpreter.VMCode.Constructor', V14, V21}, V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); {'Idris.Compiler.VMCode.MKCLOSURE', E10, E11, E12, E13} -> (fun (V22, V23, V24, V25) -> fun (V26) -> begin (V29 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V27) -> fun (V28) -> ('un--getReg'(V2, V1, V27, V28)) end end, V25, [], V26))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> ('un--setReg'(V2, V1, V22, {'Idris.Compiler.Interpreter.VMCode.Closure', ('Idris.Idris2.Data.Nat':'un--pred'(V24)), ('Idris.Idris2.Data.SnocList':'un--<><'({'Idris.Prelude.Basics.Lin'}, V31)), V23}, V26)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13)); {'Idris.Compiler.VMCode.MKCONSTANT', E16, E17} -> (fun (V32, V33) -> fun (V34) -> ('un--setReg'(V2, V1, V32, {'Idris.Compiler.Interpreter.VMCode.Const', V33}, V34)) end end(E16, E17)); {'Idris.Compiler.VMCode.APPLY', E18, E19, E20} -> (fun (V35, V36, V37) -> fun (V38) -> begin (V39 = ('un--getReg'(V2, V1, V36, V38))), case V39 of {'Idris.Prelude.Types.Left', E21} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V41) -> begin (V42 = ('un--getReg'(V2, V1, V37, V38))), case V42 of {'Idris.Prelude.Types.Left', E23} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V44) -> case V41 of {'Idris.Compiler.Interpreter.VMCode.Closure', E25, E26, E27} -> (fun (V45, V46, V47) -> case V45 of 0 -> begin (V48 = ('un--callFunc'(V0, V2, V1, V47, ('Idris.Idris2.Data.SnocList':'un--<>>'(V46, [V44 | []])), V38))), case V48 of {'Idris.Prelude.Types.Left', E28} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V50) -> ('un--setReg'(V2, V1, V35, V50, V38)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V51 = (V45 - 1)), ('un--setReg'(V2, V1, V35, {'Idris.Compiler.Interpreter.VMCode.Closure', V51, {'Idris.Prelude.Basics.:<', V46, V44}, V47}, V38)) end end end(E25, E26, E27)); _ -> ('un--interpError'(V2, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"APPLY: While applying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.VMCode':'dn--un--show_Show_Reg'(V36)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", expected closure, found: "/utf8>>, ('dn--un--show_Show_Object'(V41)))))))), V38)) end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20)); {'Idris.Compiler.VMCode.CALL', E30, E31, E32, E33} -> (fun (V52, V53, V54, V55) -> fun (V56) -> begin (V59 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V57) -> fun (V58) -> ('un--getReg'(V2, V1, V57, V58)) end end, V55, [], V56))), case V59 of {'Idris.Prelude.Types.Left', E34} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V61) -> begin (V62 = ('un--callFunc'(V0, V2, V1, V54, V61, V56))), case V62 of {'Idris.Prelude.Types.Left', E36} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V64) -> ('un--setReg'(V2, V1, V52, V64, V56)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30, E31, E32, E33)); {'Idris.Compiler.VMCode.OP', E38, E39, E40} -> (fun (V65, V66, V67) -> fun (V68) -> begin (V71 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V69) -> fun (V70) -> ('un--getReg'(V2, V1, V69, V70)) end end, V67, V68))), case V71 of {'Idris.Prelude.Types.Left', E41} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V73) -> begin (V74 = (('un--callPrim'(V2, V1, V66, V73))(V68))), case V74 of {'Idris.Prelude.Types.Left', E43} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V76) -> ('un--setReg'(V2, V1, V65, V76, V68)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E38, E39, E40)); {'Idris.Compiler.VMCode.EXTPRIM', E45, E46, E47} -> (fun (V77, V78, V79) -> ('case--step-3211'(V0, V2, V79, V78, V77, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V78, ('un--knownExtern'()))))) end(E45, E46, E47)); {'Idris.Compiler.VMCode.CASE', E48, E49, E50} -> (fun (V80, V81, V82) -> fun (V83) -> begin (V84 = ('un--getReg'(V2, V1, V80, V83))), case V84 of {'Idris.Prelude.Types.Left', E51} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V86) -> case V86 of {'Idris.Compiler.Interpreter.VMCode.Constructor', E53, E54} -> (fun (V87, V88) -> (('nested--8102-3332--in--un--matchCon'(V0, V2, V82, V81, V80, V1, V1, V87, V81, V82))(V83)) end(E53, E54)); _ -> ('un--interpError'(V2, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CASE: Expected Constructor, found "/utf8>>, ('un--showType'(V86)))), V83)) end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E48, E49, E50)); {'Idris.Compiler.VMCode.CONSTCASE', E55, E56, E57} -> (fun (V89, V90, V91) -> fun (V92) -> begin (V93 = ('un--getReg'(V2, V1, V89, V92))), case V93 of {'Idris.Prelude.Types.Left', E58} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V95) -> case V95 of {'Idris.Compiler.Interpreter.VMCode.Const', E60} -> (fun (V96) -> (('nested--8102-3477--in--un--matchConst'(V0, V2, V91, V90, V89, V1, V1, V96, V90, V91))(V92)) end(E60)); _ -> ('un--interpError'(V2, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CONSTCASE: Expected Constant, found "/utf8>>, ('un--showType'(V95)))), V92)) end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E55, E56, E57)); {'Idris.Compiler.VMCode.PROJECT', E61, E62, E63} -> (fun (V97, V98, V99) -> fun (V100) -> begin (V101 = ('un--getReg'(V2, V1, V98, V100))), case V101 of {'Idris.Prelude.Types.Left', E64} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V103) -> case V103 of {'Idris.Compiler.Interpreter.VMCode.Constructor', E66, E67} -> (fun (V104, V105) -> begin (V106 = {'Idris.Compiler.Interpreter.VMCode.Constructor', V104, V105}), case ('un--indexMaybe'(V105, V99)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--interpError'(V2, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"PROJECT: Unable to project index "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V99)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", missing arguments for constructor:\x{a}"/utf8>>, ('dn--un--show_Show_Object'(V106)))))))), V100)) end()); {'Idris.Prelude.Types.Just', E68} -> (fun (V107) -> ('un--setReg'(V2, V1, V97, V107, V100)) end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66, E67)); _ -> ('un--interpError'(V2, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"PROJECT: Expected Constructor, found "/utf8>>, ('un--showType'(V103)))), V100)) end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61, E62, E63)); {'Idris.Compiler.VMCode.NULL', E69} -> (fun (V108) -> fun (V109) -> ('un--setReg'(V2, V1, V108, {'Idris.Compiler.Interpreter.VMCode.Null'}, V109)) end end(E69)); {'Idris.Compiler.VMCode.ERROR', E70} -> (fun (V110) -> fun (V111) -> ('un--interpError'(V2, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ERROR: "/utf8>>, V110)), V111)) end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showType'(V0) -> case V0 of {'Idris.Compiler.Interpreter.VMCode.Closure', E0, E1, E2} -> (fun (V1, V2, V3) -> <<"Closure"/utf8>> end(E0, E1, E2)); {'Idris.Compiler.Interpreter.VMCode.Constructor', E3, E4} -> (fun (V4, V5) -> <<"Constructor"/utf8>> end(E3, E4)); {'Idris.Compiler.Interpreter.VMCode.Const', E5} -> (fun (V6) -> <<"Constant"/utf8>> end(E5)); {'Idris.Compiler.Interpreter.VMCode.Null'} -> (fun () -> <<"Null"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showSep'(V0, V1) -> case V1 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('un--showDepth'(V0, V2)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showDepth'(V0, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('un--showSep'(V0, V3)))))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showDepth'(V0, V1) -> case V0 of 0 -> ('un--showType'(V1)); _ -> begin (V2 = (V0 - 1)), case V1 of {'Idris.Compiler.Interpreter.VMCode.Closure', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showSep'(V2, ('Idris.Idris2.Data.SnocList':'un--<>>'(V4, [])))), <<")"/utf8>>)))))))))) end(E0, E1, E2)); {'Idris.Compiler.Interpreter.VMCode.Constructor', E3, E4} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Types.Left', E5} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"tag"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showSep'(V2, V7)), <<")"/utf8>>)))))))) end(E5)); _ -> ('un--showType'(V1)) end end(E3, E4)); {'Idris.Compiler.Interpreter.VMCode.Const', E6} -> (fun (V9) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V9)) end(E6)); _ -> ('un--showType'(V1)) end end end.
'un--setReg'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Compiler.VMCode.RVal'} -> (fun () -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V12 = ('erlang':'put'(V0, case V8 of {'Idris.Compiler.Interpreter.VMCode.MkInterpState', E2, E3, E4} -> (fun (V9, V10, V11) -> {'Idris.Compiler.Interpreter.VMCode.MkInterpState', V9, V10, {'Idris.Prelude.Types.Just', V3}} end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V12} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Compiler.VMCode.Loc', E5} -> (fun (V13) -> begin (V22 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', case V16 of {'Idris.Compiler.Interpreter.VMCode.MkInterpState', E8, E9, E10} -> (fun (V17, V18, V19) -> V18 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V20) -> begin (V21 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V21} end end, V4))), case V22 of {'Idris.Prelude.Types.Left', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V24) -> begin (V25 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, ('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V24)))) of 1 -> ('un--interpError'(V0, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Attempt to set register: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", size of locals: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V24)))))))))), V4)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> begin (V55 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> V34 end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), begin (V42 = (V39(V40))), (V41(V42)) end end end end end end end}, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), ((V46(V48))(V47)) end end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V50(V51))), (V52(V51)) end end end end}, fun (V53) -> fun (V54) -> V54 end end}, V24, V13, V3))(V4))), {'Idris.Prelude.Types.Right', V55} end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); {'Idris.Compiler.VMCode.Discard'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--saveLocals'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (V1(V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'put'(V0, V6))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', V9} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--knownForeign'() -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'([{'Idris.Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__putChar"/utf8>>)), {'Idris.Builtin.DPair.MkDPair', (1 + (1 + 0)), fun (V0) -> fun (V1) -> fun (V2) -> ('nested--7739-2634--in--un--prim_putChar'(V0, V1, V2)) end end end}} | [{'Idris.Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__getChar"/utf8>>)), {'Idris.Builtin.DPair.MkDPair', (1 + 0), fun (V3) -> fun (V4) -> fun (V5) -> ('nested--7739-2635--in--un--prim_getChar'(V3, V4, V5)) end end end}} | [{'Idris.Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__getStr"/utf8>>)), {'Idris.Builtin.DPair.MkDPair', (1 + 0), fun (V6) -> fun (V7) -> fun (V8) -> ('nested--7739-2636--in--un--prim_getStr'(V6, V7, V8)) end end end}} | [{'Idris.Builtin.MkPair', ('un--NS_UN'(('Idris.Idris2.Core.Name.Namespace':'un--ioNS'()), <<"prim__putStr"/utf8>>)), {'Idris.Builtin.DPair.MkDPair', (1 + (1 + 0)), fun (V9) -> fun (V10) -> fun (V11) -> ('nested--7739-2637--in--un--prim_putStr'(V9, V10, V11)) end end end}} | []]]]])).
'un--knownExtern'() -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()).
'un--ioRes'(V0) -> {'Idris.Compiler.Interpreter.VMCode.Constructor', {'Idris.Prelude.Types.Left', 0}, [{'Idris.Compiler.Interpreter.VMCode.Const', {'Idris.Core.TT.WorldVal'}} | [V0 | []]]}.
'un--interpError'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Compiler.Interpreter.VMCode.MkInterpState', E2, E3, E4} -> (fun (V8, V9, V10) -> begin (V39 = begin (V38 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V9))(V3))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E5} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Interpreter Error in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V43, V44)) end end}, ('Idris.Idris2.Data.List':'un--take'((1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{a}locals:\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--7091-2024--in--un--showWithIndex'(V0, V2, V1, 0, {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V46) -> ('dn--un--show_Show_Object'(V46)) end, fun (V47) -> fun (V48) -> ('dn--un--showPrec_Show_Object'(V47, V48)) end end}, V45)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V51) -> ('dn--un--show_Show_Object'(V51)) end, fun (V52) -> fun (V53) -> ('dn--un--showPrec_Show_Object'(V52, V53)) end end}, V49, V50)) end end}, V41)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}return:\x{a}  "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V54) -> ('dn--un--show_Show_Object'(V54)) end, fun (V55) -> fun (V56) -> ('dn--un--showPrec_Show_Object'(V55, V56)) end end}, V10))))))))))))))))}, V3)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initInterpState'(V0) -> begin (V1 = ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'(V0))), fun (V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, 0))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> begin (V35 = fun (V34) -> {'Idris.Prelude.Types.Nothing'} end), {'Idris.Prelude.Types.Right', {'Idris.Compiler.Interpreter.VMCode.MkInterpState', V1, V33, (V35('erased'))}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--indexMaybe'(V0, V1) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V1, 0)) of 1 -> {'Idris.Prelude.Types.Just', V2}; 0 -> ('un--indexMaybe'(V3, ((V1 - 1) rem 9223372036854775808))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getReg'(V0, V1, V2, V3) -> case V2 of {'Idris.Compiler.VMCode.Loc', E0} -> (fun (V4) -> begin (V13 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Compiler.Interpreter.VMCode.MkInterpState', E3, E4, E5} -> (fun (V8, V9, V10) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> begin (V12 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V12} end end, V3))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, V15, V4))(V3))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E8} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V46) -> case V46 of {'Idris.Prelude.Types.Just', E10} -> (fun (V47) -> {'Idris.Prelude.Types.Right', V47} end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--interpError'(V0, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing local "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)))), V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Compiler.VMCode.RVal'} -> (fun () -> begin (V56 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V48) -> case V48 of {'Idris.Prelude.Types.Left', E11} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V50) -> {'Idris.Prelude.Types.Right', case V50 of {'Idris.Compiler.Interpreter.VMCode.MkInterpState', E13, E14, E15} -> (fun (V51, V52, V53) -> V53 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V54) -> begin (V55 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V55} end end, V3))), case V56 of {'Idris.Prelude.Types.Left', E16} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V58) -> case V58 of {'Idris.Prelude.Types.Just', E18} -> (fun (V59) -> {'Idris.Prelude.Types.Right', V59} end(E18)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--interpError'(V0, V1, <<"Missing returnObj val"/utf8>>, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Compiler.VMCode.Discard'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Interpreter.VMCode.Null'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 3, V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V15 = begin (V12 = (('un--initInterpState'(case V6 of {'Idris.Compiler.Common.MkCompileData', E2, E3, E4, E5, E6} -> (fun (V7, V8, V9, V10, V11) -> V11 end(E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Interpreter.VMCode.State'}, V14, V3)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V18) -> case V18 of {'Idris.Prelude.Types.Left', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Right', 0} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V21) -> ('un--callFunc'(V0, V17, [], {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}, [], V21)) end, V3)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileLibrary'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Compiling to library is not supported."/utf8>>))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"compile not implemeted for vmcode-interp"/utf8>>}, V9)) end, V5)).
'un--codegenVMCodeInterp'() -> {'Idris.Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('un--compileExpr'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('un--executeExpr'(V6, V7, V8, V9)) end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('un--compileLibrary'(V10, V11, V12, V13, V14, V15)) end end end end end end, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}.
'un--callPrim'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E12, E13} -> (fun (V4, V5) -> case V5 of {'Idris.Data.Vect.::', E20, E21} -> (fun (V6, V7) -> case V7 of {'Idris.Data.Vect.::', E28, E29} -> (fun (V8, V9) -> case V9 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', V8} end end()); _ -> ('case--callPrim-2471'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E30} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V16) -> {'Idris.Prelude.Types.Right', (V13(V16))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', V18} end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> case V21 of {'Idris.Prelude.Types.Left', E32} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V24) -> case V22 of {'Idris.Prelude.Types.Right', E34} -> (fun (V25) -> {'Idris.Prelude.Types.Right', (V24(V25))} end(E34)); {'Idris.Prelude.Types.Left', E35} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V27) -> ('nested--7511-2447--in--un--getConst'(V0, V3, V2, V1, V27)) end, V3)))) end end(E28, E29)); _ -> ('case--callPrim-2471'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Idris.Prelude.Interfaces.MkApplicative', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> {'Idris.Prelude.Types.Right', (V30(V33))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V34) -> fun (V35) -> {'Idris.Prelude.Types.Right', V35} end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V41) -> case V39 of {'Idris.Prelude.Types.Right', E26} -> (fun (V42) -> {'Idris.Prelude.Types.Right', (V41(V42))} end(E26)); {'Idris.Prelude.Types.Left', E27} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V44) -> ('nested--7511-2447--in--un--getConst'(V0, V3, V2, V1, V44)) end, V3)))) end end(E20, E21)); _ -> ('case--callPrim-2471'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Idris.Prelude.Interfaces.MkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> case V48 of {'Idris.Prelude.Types.Left', E14} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V50) -> {'Idris.Prelude.Types.Right', (V47(V50))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V51) -> fun (V52) -> {'Idris.Prelude.Types.Right', V52} end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> case V55 of {'Idris.Prelude.Types.Left', E16} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V58) -> case V56 of {'Idris.Prelude.Types.Right', E18} -> (fun (V59) -> {'Idris.Prelude.Types.Right', (V58(V59))} end(E18)); {'Idris.Prelude.Types.Left', E19} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V61) -> ('nested--7511-2447--in--un--getConst'(V0, V3, V2, V1, V61)) end, V3)))) end end(E12, E13)); _ -> ('case--callPrim-2471'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Idris.Prelude.Interfaces.MkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> case V65 of {'Idris.Prelude.Types.Left', E6} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V67) -> {'Idris.Prelude.Types.Right', (V64(V67))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V68) -> fun (V69) -> {'Idris.Prelude.Types.Right', V69} end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> case V72 of {'Idris.Prelude.Types.Left', E8} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V75) -> case V73 of {'Idris.Prelude.Types.Right', E10} -> (fun (V76) -> {'Idris.Prelude.Types.Right', (V75(V76))} end(E10)); {'Idris.Prelude.Types.Left', E11} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V78) -> ('nested--7511-2447--in--un--getConst'(V0, V3, V2, V1, V78)) end, V3)))) end end()); _ -> ('case--callPrim-2471'(V0, V3, V2, V1, ('Idris.Idris2.Data.Vect':'dn--un--traverse_Traversable_(Vect $k)'({'Idris.Prelude.Interfaces.MkApplicative', fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> case V82 of {'Idris.Prelude.Types.Left', E0} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V84) -> {'Idris.Prelude.Types.Right', (V81(V84))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V85) -> fun (V86) -> {'Idris.Prelude.Types.Right', V86} end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> case V89 of {'Idris.Prelude.Types.Left', E2} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V92) -> case V90 of {'Idris.Prelude.Types.Right', E4} -> (fun (V93) -> {'Idris.Prelude.Types.Right', (V92(V93))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V95) -> ('nested--7511-2447--in--un--getConst'(V0, V3, V2, V1, V95)) end, V3)))) end.
'un--callFunc'(V0, V1, V2, V3, V4, V5) -> ('un--saveLocals'(V1, begin (V10 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V8, V9)) end end end end, $|, V2))))), fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V0, <<"compiler.interpreter"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V46 = case V14 of 1 -> begin (V45 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Calling "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with args: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V42) -> ('dn--un--show_Show_Object'(V42)) end, fun (V43) -> fun (V44) -> ('dn--un--showPrec_Show_Object'(V43, V44)) end end}, V4))))))))))))(V11))), {'Idris.Prelude.Types.Right', V45} end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V46 of {'Idris.Prelude.Types.Left', E2} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V48) -> begin (V49 = [V3 | V2]), begin (V58 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V50) -> case V50 of {'Idris.Prelude.Types.Left', E4} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V52) -> {'Idris.Prelude.Types.Right', case V52 of {'Idris.Compiler.Interpreter.VMCode.MkInterpState', E6, E7, E8} -> (fun (V53, V54, V55) -> V53 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V56) -> begin (V57 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V57} end end, V11))), case V58 of {'Idris.Prelude.Types.Left', E9} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V60) -> begin (V61 = (('case--callFunc-3816'(V0, V1, V4, V3, V2, V10, V14, V49, V60, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V3, V60))))(V11))), case V61 of {'Idris.Prelude.Types.Left', E11} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V63) -> begin (V92 = case V14 of 1 -> begin (V91 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> V70 end end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), begin (V78 = (V75(V76))), (V77(V78)) end end end end end end end}, fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V81(V83))), ((V82(V84))(V83)) end end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V86(V87))), (V88(V87)) end end end end}, fun (V89) -> fun (V90) -> V90 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Result: "/utf8>>, ('dn--un--show_Show_Object'(V63))))))))(V11))), {'Idris.Prelude.Types.Right', V91} end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V92 of {'Idris.Prelude.Types.Left', E13} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V94) -> {'Idris.Prelude.Types.Right', V63} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V5)).
'un--beginFunction'(V0, V1, V2, V3) -> case V2 of [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Compiler.VMCode.DECLARE', E2} -> (fun (V6) -> case V6 of {'Idris.Compiler.VMCode.Loc', E3} -> (fun (V7) -> ('un--beginFunction'(V0, V1, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V7, V3)))) end(E3)); _ -> ('un--beginFunction'(V0, V1, V5, V3)) end end(E2)); {'Idris.Compiler.VMCode.START'} -> (fun () -> fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, ((V3 + 1) rem 9223372036854775808)))(V8))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> begin (V76 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E6} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V42) -> {'Idris.Prelude.Types.Right', 0} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V44) -> fun (V45) -> case V44 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V46, V47) -> begin (V75 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> V54 end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), begin (V62 = (V59(V60))), (V61(V62)) end end end end end end end}, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), ((V66(V68))(V67)) end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V70(V71))), (V72(V71)) end end end end}, fun (V73) -> fun (V74) -> V74 end end}, V39, V46, V47))(V45))), {'Idris.Prelude.Types.Right', V75} end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V1, [], V43)) end, V8))), case V76 of {'Idris.Prelude.Types.Left', E10} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V78) -> begin (V87 = begin (V80 = begin (V79 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E12} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V82) -> begin (V86 = ('erlang':'put'(V0, case V82 of {'Idris.Compiler.Interpreter.VMCode.MkInterpState', E14, E15, E16} -> (fun (V83, V84, V85) -> {'Idris.Compiler.Interpreter.VMCode.MkInterpState', V83, V39, {'Idris.Prelude.Types.Nothing'}} end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V86} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V87 of {'Idris.Prelude.Types.Left', E17} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V89) -> {'Idris.Prelude.Types.Right', V5} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V90) -> {'Idris.Prelude.Types.Right', V2} end end end(E0, E1)); _ -> fun (V91) -> {'Idris.Prelude.Types.Right', V2} end end.
'un--argError'(V0, V1, V2, V3) -> ('un--interpError'(V0, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected arguments: "/utf8>>, ('Idris.Idris2.Data.Vect':'dn--un--foldMap_Foldable_(Vect $n)'({'Idris.Prelude.Interfaces.MkMonoid', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V4, V5)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}, fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--showType'(V6)))) end, V2)))), V3)).
'un--NS_UN'(V0, V1) -> {'Idris.Core.Name.NS', V0, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V1}}}.
