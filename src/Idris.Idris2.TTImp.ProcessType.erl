-module('Idris.Idris2.TTImp.ProcessType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--findInferrable,findInf-10771'/9,
  'case--processFnOpt,insertDeps-9441'/10,
  'nested--8383-9842--in--un--splitPs'/15,
  'nested--10364-11290--in--un--isNested'/30,
  'nested--8213-9419--in--un--insertDeps'/8,
  'nested--8213-9424--in--un--getNamePos'/8,
  'nested--8213-9421--in--un--getDepsArgs'/9,
  'nested--8213-9422--in--un--getDeps'/8,
  'nested--9845-10741--in--un--findInfs'/7,
  'nested--9845-10740--in--un--findInf'/6,
  'nested--9845-10742--in--un--fi'/8,
  'nested--8213-9423--in--un--collectSpec'/10,
  'nested--8213-9420--in--un--collectDDeps'/7,
  'un--processType'/13,
  'un--processFnOpt'/5,
  'un--initDef'/8,
  'un--getRetTy'/3,
  'un--getFnString'/5,
  'un--findInferrable'/3
]).
'case--findInferrable,findInf-10771'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V6} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V12, V13)) end end}, V9, V6)) of 1 -> {'Idris.Prelude.Types.Right', V6}; 0 -> {'Idris.Prelude.Types.Right', [V9 | V6]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,insertDeps-9441'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--8213-9419--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V13, V14)) end end}, V10, V8)) of 1 -> ('nested--8213-9419--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)); 0 -> ('nested--8213-9419--in--un--insertDeps'(V0, V1, V2, V3, V4, [V10 | V8], V7, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8383-9842--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> {'Idris.Builtin.MkPair', [], []}; [E0 | E1] -> (fun (V15, V16) -> case ('nested--8383-9842--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V12)), V13, V16)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V21, V22)) end end}, V12, V13)) of 1 -> {'Idris.Builtin.MkPair', [V15 | V17], V18}; 0 -> {'Idris.Builtin.MkPair', V17, [V15 | V18]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10364-11290--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Core.Name.Nested', E0, E1} -> (fun (V30, V31) -> 1 end(E0, E1)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V32, V33) -> ('nested--10364-11290--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V33)) end(E2, E3)); _ -> 0 end.
'nested--8213-9419--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V5; [E0 | E1] -> (fun (V8, V9) -> ('case--processFnOpt,insertDeps-9441'(V0, V1, V2, V3, V4, V8, V9, V6, V5, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V8, V6)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8213-9424--in--un--getNamePos'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V23 = begin (V20 = (((V11(V19))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V8, 0}))))(V7))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> ('nested--8213-9424--in--un--getNamePos'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V5)), V22, V7)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V9, V5} | V25]} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'nested--8213-9421--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V7}; [E0 | E1] -> (fun (V9, V10) -> begin (V11 = (('nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V9, V7))(V8))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> ('nested--8213-9421--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V10, V13, V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> fun (V12) -> case V10 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E16} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V20) -> begin (V24 = begin (V21 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V20, V16))(V12))), case V21 of {'Idris.Prelude.Types.Left', E18} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V23) -> (('nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V23, V7))(V12)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E20} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V26) -> begin (V27 = (((V11(V20))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 0}))))(V12))), case V27 of {'Idris.Prelude.Types.Left', E22} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V29) -> (('nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V29, V26))(V12)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13, E14, E15)); _ -> begin (V31 = begin (V30 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> begin (V37 = begin (V34 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V33, ('Idris.Idris2.Core.TT':'un--binderType'(V10))))(V12))), case V34 of {'Idris.Prelude.Types.Left', E6} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V36) -> (('nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, 0, V36, V7))(V12)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V37 of {'Idris.Prelude.Types.Left', E8} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V39) -> begin (V40 = (((V11(V33))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 0}))))(V12))), case V40 of {'Idris.Prelude.Types.Left', E10} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V42) -> (('nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, 0, V42, V7))(V12)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E24, E25, E26} -> (fun (V43, V44, V45) -> fun (V46) -> case V44 of {'Idris.Core.Value.NRef', E27, E28} -> (fun (V47, V48) -> case V47 of {'Idris.Core.TT.Bound'} -> (fun () -> begin (V50 = begin (V49 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E29} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V52) -> begin (V57 = begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V52, ('Idris.Idris2.Builtin':'un--snd'(V53)))) end, V45, [], V46))), case V54 of {'Idris.Prelude.Types.Left', E31} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V56) -> ('nested--8213-9421--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V56, V7, V46)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V57 of {'Idris.Prelude.Types.Left', E33} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V59) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V48, V5, V59))} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', V7} end end(E27, E28)); _ -> {'Idris.Prelude.Types.Right', V7} end end end(E24, E25, E26)); {'Idris.Core.Value.NDCon', E35, E36, E37, E38, E39} -> (fun (V60, V61, V62, V63, V64) -> fun (V65) -> begin (V67 = begin (V66 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V66} end), case V67 of {'Idris.Prelude.Types.Left', E40} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V69) -> begin (V71 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V70) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V69, ('Idris.Idris2.Builtin':'un--snd'(V70)))) end, V64, [], V65))), case V71 of {'Idris.Prelude.Types.Left', E42} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V73) -> ('nested--8213-9421--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V73, V7, V65)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35, E36, E37, E38, E39)); {'Idris.Core.Value.NTCon', E44, E45, E46, E47, E48} -> (fun (V74, V75, V76, V77, V78) -> fun (V79) -> begin (V81 = begin (V80 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V80} end), case V81 of {'Idris.Prelude.Types.Left', E49} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V83) -> begin (V126 = begin (V114 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V75, case V83 of {'Idris.Core.Context.MkDefs', E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V84 end(E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V79))), case V114 of {'Idris.Prelude.Types.Left', E81} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V116) -> case V116 of {'Idris.Prelude.Types.Just', E83} -> (fun (V117) -> case V117 of {'Idris.Core.Context.Context.TCon', E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V118, V119, V120, V121, V122, V123, V124, V125) -> {'Idris.Prelude.Types.Right', V120} end(E84, E85, E86, E87, E88, E89, E90, E91)); _ -> {'Idris.Prelude.Types.Right', []} end end(E83)); _ -> {'Idris.Prelude.Types.Right', []} end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V126 of {'Idris.Prelude.Types.Left', E92} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V128) -> case ('nested--8383-9842--in--un--splitPs'(V0, V1, V2, V3, V4, V74, V78, V77, V76, V75, V7, V5, 0, V128, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V129) -> ('Idris.Idris2.Builtin':'un--snd'(V129)) end, V78)))) of {'Idris.Builtin.MkPair', E94, E95} -> (fun (V130, V131) -> begin (V136 = begin (V133 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V132) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V83, V132)) end, V130, [], V79))), case V133 of {'Idris.Prelude.Types.Left', E96} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V135) -> ('nested--8213-9421--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 1, V135, V7, V79)) end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V136 of {'Idris.Prelude.Types.Left', E98} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V138) -> begin (V140 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V139) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V83, V139)) end, V131, [], V79))), case V140 of {'Idris.Prelude.Types.Left', E100} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V142) -> ('nested--8213-9421--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V142, V138, V79)) end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E44, E45, E46, E47, E48)); {'Idris.Core.Value.NDelayed', E102, E103, E104} -> (fun (V143, V144, V145) -> ('nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V145, V7)) end(E102, E103, E104)); _ -> fun (V146) -> {'Idris.Prelude.Types.Right', V7} end end.
'nested--9845-10741--in--un--findInfs'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', V3}; [E0 | E1] -> (fun (V7, V8) -> begin (V9 = ('nested--9845-10741--in--un--findInfs'(V0, V1, V2, V3, V4, V8, V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> (('nested--9845-10740--in--un--findInf'(V0, V1, V2, V11, V4, V7))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9845-10740--in--un--findInf'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V9, V10) -> case V9 of {'Idris.Core.TT.Bound'} -> (fun () -> case V8 of [] -> fun (V11) -> ('case--findInferrable,findInf-10771'(V0, V1, V2, V6, V10, V4, V3, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V10, V4)), V11)) end; _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V3} end end end()); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', V3} end end end(E3, E4)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', V3} end end end(E0, E1, E2)); {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V19, V20, V21, V22, V23) -> fun (V24) -> begin (V26 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V25)))) end, V23, [], V24))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> ('nested--9845-10741--in--un--findInfs'(V0, V1, V2, V3, V4, V28, V24)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NTCon', E12, E13, E14, E15, E16} -> (fun (V29, V30, V31, V32, V33) -> fun (V34) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V35)))) end, V33, [], V34))), case V36 of {'Idris.Prelude.Types.Left', E17} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V38) -> ('nested--9845-10741--in--un--findInfs'(V0, V1, V2, V3, V4, V38, V34)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16)); {'Idris.Core.Value.NDelayed', E19, E20, E21} -> (fun (V39, V40, V41) -> ('nested--9845-10740--in--un--findInf'(V0, V1, V2, V3, V4, V41)) end(E19, E20, E21)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', V3} end end.
'nested--9845-10742--in--un--fi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V16 = {'Idris.Core.Name.MN', <<"inf"/utf8>>, V4}), fun (V17) -> begin (V18 = (((V11(V1))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Bound'}, V16}))))(V17))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V24 = begin (V21 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V2, [], V1, V15))(V17))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> (('nested--9845-10740--in--un--findInf'(V0, V1, V2, V6, V5, V23))(V17)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> begin (V27 = (('nested--9845-10742--in--un--fi'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), ((1 + V4) rem 9223372036854775808), [{'Idris.Builtin.MkPair', V16, V3} | V5], V26, V20))(V17))), case V27 of {'Idris.Prelude.Types.Left', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Right', V29} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> ('nested--9845-10740--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end end(E0, E1, E2, E3)); _ -> ('nested--9845-10740--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end.
'nested--8213-9423--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> case V12 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V14, V15, V16, V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V21, V9))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = (((V13(V21))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V11}))))(V9))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, V11, V1)) of 1 -> begin (V35 = begin (V32 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V4, [], V21, V17))(V9))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> (('nested--8213-9422--in--un--getDeps'(V0, V1, V2, V3, V4, 1, V34, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())))(V9)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V35 of {'Idris.Prelude.Types.Left', E16} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V37) -> begin (V43 = ('Idris.Idris2.Data.List':'un--filter'(fun (V38) -> case ('Idris.Idris2.Builtin':'un--snd'(V38)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V41, V42)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V38)), V6)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V37))))), begin (V45 = ('nested--8213-9419--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V7, [V11 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V44) -> ('Idris.Idris2.Builtin':'un--fst'(V44)) end, V43))]))), ('nested--8213-9423--in--un--collectSpec'(V0, V1, V2, V3, V4, V45, V6, V7, V27, V9)) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('nested--8213-9423--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7, V27, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', V5} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', V5} end.
'nested--8213-9420--in--un--collectDDeps'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V18, V6))), case V19 of {'Idris.Prelude.Types.Left', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V21) -> begin (V22 = (((V10(V18))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V7, {'Idris.Core.TT.Bound'}, V8}))))(V6))), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, V8, V1)) of 1 -> ('nested--8213-9420--in--un--collectDDeps'(V0, V1, V2, V3, V4, V24, V6)); 0 -> begin (V29 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V4, [], V21, {'Idris.Core.Env.Nil'}, V14, V6))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}}, V31))))), begin (V33 = ('nested--8213-9420--in--un--collectDDeps'(V0, V1, V2, V3, V4, V24, V6))), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V35, V32))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'un--processType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V13, V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V15, V12))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V2, V1, V14, V19, V12))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)))) end, V12))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V29 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Checking type decl:"/utf8>> | [('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V8)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)) | [<<":"/utf8>> | [('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}, V16)) | []]]]]])) end, V12))), case V29 of {'Idris.Prelude.Types.Left', E10} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V19, V12))), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V69 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V34}, case V38 of {'Idris.Core.Context.MkDefs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V39 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), case V69 of {'Idris.Prelude.Types.Left', E46} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V71) -> case V71 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V78 = (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V72) -> {'Idris.Core.Core.InType', V7, V19, V72} end, fun (V73) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V34, {'Idris.TTImp.Elab.Check.InType'}, [0 | V4], V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V74) -> fun (V75) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V74, V75)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V76) -> fun (V77) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V76, V77)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V16}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V7)), V73)) end))(V12))), case V78 of {'Idris.Prelude.Types.Left', E48} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V80) -> begin (V81 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)))) end, {'Idris.Core.Env.Nil'}, ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V13, V6, V80)), V12))), case V81 of {'Idris.Prelude.Types.Left', E50} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V83) -> begin (V84 = (('un--initDef'(V0, V1, V2, V3, V19, V6, V80, V10))(V12))), case V84 of {'Idris.Prelude.Types.Left', E52} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V13, V6, V80))), begin (V88 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V87, V12))), case V88 of {'Idris.Prelude.Types.Left', E54} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V90) -> begin (V91 = {'Idris.Prelude.Types.Nothing'}), case V90 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V92, V93) -> begin (V95 = begin (V94 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V94} end), case V95 of {'Idris.Prelude.Types.Left', E58} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V97) -> begin (V98 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V97, V12))), case V98 of {'Idris.Prelude.Types.Left', E60} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V100) -> begin (V104 = begin (V101 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, [], V97, {'Idris.Core.Env.Nil'}, V87))(V12))), case V101 of {'Idris.Prelude.Types.Left', E62} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V103) -> (('un--findInferrable'(V1, V100, V103))(V12)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V104 of {'Idris.Prelude.Types.Left', E64} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V106) -> begin (V131 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V107) -> case V107 of {'Idris.Prelude.Types.Left', E66} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V109) -> {'Idris.Prelude.Types.Right', 0} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V110) -> ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Idris.Core.Name.Resolved', V34}, case ('Idris.Idris2.Core.Context':'un--newDef'(V7, V19, V8, V0, V87, V9, V86)) of {'Idris.Core.Context.Context.MkGlobalDef', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130) -> {'Idris.Core.Context.Context.MkGlobalDef', V111, V112, V113, V92, V93, V116, V106, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130} end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V110)) end, V12))), case V131 of {'Idris.Prelude.Types.Left', E88} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V133) -> begin (V138 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V134) -> fun (V135) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V136, V137)) end end}, 1, V4)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V1, V34, 1, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V138 of {'Idris.Prelude.Types.Left', E90} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V140) -> begin (V150 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V141) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(FnOpt\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V142) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V142)) end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V143, V144)) end end}, V141)) end, fun (V145) -> fun (V146) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(FnOpt\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V147)) end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V148, V149)) end end}, V145, V146)) end end}, V10)))))))) end, V12))), case V150 of {'Idris.Prelude.Types.Left', E92} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V152) -> begin (V153 = {'Idris.Core.Name.Resolved', V34}), begin (V155 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V154) -> ('un--processFnOpt'(V1, V7, case ('nested--10364-11290--in--un--isNested'(V16, V15, V14, V13, V10, V9, V8, V7, V0, V6, V5, V4, V3, V2, V1, V19, V34, V38, V91, V80, V86, V87, V92, V93, V90, V97, V100, V106, V153, V19)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V153, V154)) end, V10, V12))), case V155 of {'Idris.Prelude.Types.Left', E94} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V157) -> begin (V188 = begin (V158 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V12))), case V158 of {'Idris.Prelude.Types.Left', E96} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V160) -> case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V163, V164, V165)) end end end end end, fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V168, V169, V170)) end end end end end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V172)) end end, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V176, V177, V178, V179)) end end end end end end end, fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V181)) end end, fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V184, V185, V186)) end end end end end}, fun (V187) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V187)) end, V10)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V153, {'Idris.Core.Context.Context.SetTotal', V160}, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V188 of {'Idris.Prelude.Types.Left', E98} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V190) -> begin (V191 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V0, V1, V2, V7, {'Idris.Core.Name.Resolved', V34}, V6, V80, V12))), case V191 of {'Idris.Prelude.Types.Left', E100} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V193) -> begin (V194 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"processType is adding \x{2193}"/utf8>> end, V12))), case V194 of {'Idris.Prelude.Types.Left', E102} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V196) -> begin (V197 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V14, {'Idris.Core.Name.Resolved', V34}, V6, V80, V12))), case V197 of {'Idris.Prelude.Types.Left', E104} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V199) -> begin (V202 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V200, V201)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V80)))), V12))), case V202 of {'Idris.Prelude.Types.Left', E106} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V204) -> begin (V205 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V19, V12))), case V205 of {'Idris.Prelude.Types.Left', E108} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V207) -> begin (V211 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V208) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V208)) end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V209, V210)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V80)))))))))))) end, V12))), case V211 of {'Idris.Prelude.Types.Left', E110} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V213) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(V9, 0)) of 1 -> begin (V223 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V214) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V214)) end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V215, V216)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V217, V218, V219)) end end end, fun (V220) -> fun (V221) -> fun (V222) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V220, V221, V222)) end end end}, V19, V12))), case V223 of {'Idris.Prelude.Types.Left', E112} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V225) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V226) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V226)) end, fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V227, V228)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V229, V230, V231)) end end end, fun (V232) -> fun (V233) -> fun (V234) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V232, V233, V234)) end end end}, V80, V12)) end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E114} -> (fun (V235) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V19}, V12)) end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processFnOpt'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V5)) end end()); {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.TCInline'}, V6)) end end()); _ -> case V2 of 1 -> case V4 of {'Idris.TTImp.TTImp.Hint', E368} -> (fun (V7) -> fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E369} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E369)); {'Idris.Prelude.Types.Right', E370} -> (fun (V12) -> begin (V43 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V12 of {'Idris.Core.Context.MkDefs', E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V13 end(E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V43 of {'Idris.Prelude.Types.Left', E401} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E401)); {'Idris.Prelude.Types.Right', E402} -> (fun (V45) -> case V45 of {'Idris.Prelude.Types.Just', E403} -> (fun (V46) -> begin (V50 = begin (V47 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V12, {'Idris.Core.Env.Nil'}, V46))(V8))), case V47 of {'Idris.Prelude.Types.Left', E404} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E404)); {'Idris.Prelude.Types.Right', E405} -> (fun (V49) -> ('un--getRetTy'(V12, V49, V8)) end(E405)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V50 of {'Idris.Prelude.Types.Left', E406} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E406)); {'Idris.Prelude.Types.Right', E407} -> (fun (V52) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V52, V3, V7, 0, V8)) end(E407)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E403)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E402)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E370)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E368)); _ -> case V4 of {'Idris.TTImp.TTImp.Hint', E363} -> (fun (V53) -> fun (V54) -> begin (V64 = begin (V61 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V55, V56, V57)) end end end, fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V58, V59, V60)) end end end}, V3, V54))), case V61 of {'Idris.Prelude.Types.Left', E364} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E364)); {'Idris.Prelude.Types.Right', E365} -> (fun (V63) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding local hint "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V63)))) end, V54)) end(E365)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V64 of {'Idris.Prelude.Types.Left', E366} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E366)); {'Idris.Prelude.Types.Right', E367} -> (fun (V66) -> ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3, V54)) end(E367)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E363)); _ -> case V2 of 1 -> fun (V67) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E362} -> (fun (V68) -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V68, V67)) end(E362)); _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E273} -> (fun (V69) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V67)) end(E273)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V67)) end()); {'Idris.TTImp.TTImp.ForeignFn', E274} -> (fun (V70) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V67)) end(E274)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Invertible'}, V67)) end()); {'Idris.TTImp.TTImp.Totality', E275} -> (fun (V71) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.SetTotal', V71}, V67)) end(E275)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Macro'}, V67)) end()); {'Idris.TTImp.TTImp.SpecArgs', E276} -> (fun (V72) -> begin (V74 = begin (V73 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V73} end), case V74 of {'Idris.Prelude.Types.Left', E277} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V76) -> begin (V107 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V76 of {'Idris.Core.Context.MkDefs', E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V77 end(E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V67))), case V107 of {'Idris.Prelude.Types.Left', E309} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E309)); {'Idris.Prelude.Types.Right', E310} -> (fun (V109) -> case V109 of {'Idris.Prelude.Types.Just', E311} -> (fun (V110) -> begin (V131 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V76, {'Idris.Core.Env.Nil'}, case V110 of {'Idris.Core.Context.Context.MkGlobalDef', E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130) -> V113 end(E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V67))), case V131 of {'Idris.Prelude.Types.Left', E332} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E332)); {'Idris.Prelude.Types.Right', E333} -> (fun (V133) -> begin (V134 = ('nested--8213-9424--in--un--getNamePos'(V2, V72, V3, V1, V0, 0, V133, V67))), case V134 of {'Idris.Prelude.Types.Left', E334} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E334)); {'Idris.Prelude.Types.Right', E335} -> (fun (V136) -> begin (V137 = ('nested--8213-9420--in--un--collectDDeps'(V2, V72, V3, V1, V0, V133, V67))), case V137 of {'Idris.Prelude.Types.Left', E336} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E336)); {'Idris.Prelude.Types.Right', E337} -> (fun (V139) -> begin (V140 = ('nested--8213-9423--in--un--collectSpec'(V2, V72, V3, V1, V0, [], V139, V136, V133, V67))), case V140 of {'Idris.Prelude.Types.Left', E338} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E338)); {'Idris.Prelude.Types.Right', E339} -> (fun (V142) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V143) -> case V143 of {'Idris.Prelude.Types.Left', E340} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E340)); {'Idris.Prelude.Types.Right', E341} -> (fun (V145) -> {'Idris.Prelude.Types.Right', 0} end(E341)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V146) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V110 of {'Idris.Core.Context.Context.MkGlobalDef', E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361} -> (fun (V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166) -> {'Idris.Core.Context.Context.MkGlobalDef', V147, V148, V149, V150, V151, V142, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166} end(E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V146)) end, V67)) end(E339)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E337)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E335)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E333)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E311)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V67)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E310)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V167) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E184} -> (fun (V168) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V167)) end(E184)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V167)) end()); {'Idris.TTImp.TTImp.ForeignFn', E185} -> (fun (V169) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V167)) end(E185)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Invertible'}, V167)) end()); {'Idris.TTImp.TTImp.Totality', E186} -> (fun (V170) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.SetTotal', V170}, V167)) end(E186)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Macro'}, V167)) end()); {'Idris.TTImp.TTImp.SpecArgs', E187} -> (fun (V171) -> begin (V173 = begin (V172 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V172} end), case V173 of {'Idris.Prelude.Types.Left', E188} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V175) -> begin (V206 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V175 of {'Idris.Core.Context.MkDefs', E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219} -> (fun (V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205) -> V176 end(E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V167))), case V206 of {'Idris.Prelude.Types.Left', E220} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V208) -> case V208 of {'Idris.Prelude.Types.Just', E222} -> (fun (V209) -> begin (V230 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V175, {'Idris.Core.Env.Nil'}, case V209 of {'Idris.Core.Context.Context.MkGlobalDef', E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242} -> (fun (V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229) -> V212 end(E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V167))), case V230 of {'Idris.Prelude.Types.Left', E243} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V232) -> begin (V233 = ('nested--8213-9424--in--un--getNamePos'(V2, V171, V3, V1, V0, 0, V232, V167))), case V233 of {'Idris.Prelude.Types.Left', E245} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E245)); {'Idris.Prelude.Types.Right', E246} -> (fun (V235) -> begin (V236 = ('nested--8213-9420--in--un--collectDDeps'(V2, V171, V3, V1, V0, V232, V167))), case V236 of {'Idris.Prelude.Types.Left', E247} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E247)); {'Idris.Prelude.Types.Right', E248} -> (fun (V238) -> begin (V239 = ('nested--8213-9423--in--un--collectSpec'(V2, V171, V3, V1, V0, [], V238, V235, V232, V167))), case V239 of {'Idris.Prelude.Types.Left', E249} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E249)); {'Idris.Prelude.Types.Right', E250} -> (fun (V241) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V242) -> case V242 of {'Idris.Prelude.Types.Left', E251} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V244) -> {'Idris.Prelude.Types.Right', 0} end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V245) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V209 of {'Idris.Core.Context.Context.MkGlobalDef', E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272} -> (fun (V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265) -> {'Idris.Core.Context.Context.MkGlobalDef', V246, V247, V248, V249, V250, V241, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265} end(E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V245)) end, V167)) end(E250)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E222)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V167)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V4 of {'Idris.TTImp.TTImp.Hint', E179} -> (fun (V266) -> fun (V267) -> begin (V277 = begin (V274 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V268) -> fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V268, V269, V270)) end end end, fun (V271) -> fun (V272) -> fun (V273) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V271, V272, V273)) end end end}, V3, V267))), case V274 of {'Idris.Prelude.Types.Left', E180} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E180)); {'Idris.Prelude.Types.Right', E181} -> (fun (V276) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding local hint "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V276)))) end, V267)) end(E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V277 of {'Idris.Prelude.Types.Left', E182} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V279) -> ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3, V267)) end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E179)); _ -> case V2 of 1 -> fun (V280) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E178} -> (fun (V281) -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V281, V280)) end(E178)); _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E89} -> (fun (V282) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V280)) end(E89)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V280)) end()); {'Idris.TTImp.TTImp.ForeignFn', E90} -> (fun (V283) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V280)) end(E90)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Invertible'}, V280)) end()); {'Idris.TTImp.TTImp.Totality', E91} -> (fun (V284) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.SetTotal', V284}, V280)) end(E91)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Macro'}, V280)) end()); {'Idris.TTImp.TTImp.SpecArgs', E92} -> (fun (V285) -> begin (V287 = begin (V286 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V286} end), case V287 of {'Idris.Prelude.Types.Left', E93} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V289) -> begin (V320 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V289 of {'Idris.Core.Context.MkDefs', E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319) -> V290 end(E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V280))), case V320 of {'Idris.Prelude.Types.Left', E125} -> (fun (V321) -> {'Idris.Prelude.Types.Left', V321} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V322) -> case V322 of {'Idris.Prelude.Types.Just', E127} -> (fun (V323) -> begin (V344 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V289, {'Idris.Core.Env.Nil'}, case V323 of {'Idris.Core.Context.Context.MkGlobalDef', E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147} -> (fun (V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343) -> V326 end(E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V280))), case V344 of {'Idris.Prelude.Types.Left', E148} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V346) -> begin (V347 = ('nested--8213-9424--in--un--getNamePos'(V2, V285, V3, V1, V0, 0, V346, V280))), case V347 of {'Idris.Prelude.Types.Left', E150} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V349) -> begin (V350 = ('nested--8213-9420--in--un--collectDDeps'(V2, V285, V3, V1, V0, V346, V280))), case V350 of {'Idris.Prelude.Types.Left', E152} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V352) -> begin (V353 = ('nested--8213-9423--in--un--collectSpec'(V2, V285, V3, V1, V0, [], V352, V349, V346, V280))), case V353 of {'Idris.Prelude.Types.Left', E154} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V355) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V356) -> case V356 of {'Idris.Prelude.Types.Left', E156} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V358) -> {'Idris.Prelude.Types.Right', 0} end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V359) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V323 of {'Idris.Core.Context.Context.MkGlobalDef', E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177} -> (fun (V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379) -> {'Idris.Core.Context.Context.MkGlobalDef', V360, V361, V362, V363, V364, V355, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379} end(E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V359)) end, V280)) end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V280)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V380) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E0} -> (fun (V381) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V380)) end(E0)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V380)) end()); {'Idris.TTImp.TTImp.ForeignFn', E1} -> (fun (V382) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Inline'}, V380)) end(E1)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Invertible'}, V380)) end()); {'Idris.TTImp.TTImp.Totality', E2} -> (fun (V383) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.SetTotal', V383}, V380)) end(E2)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Context.Macro'}, V380)) end()); {'Idris.TTImp.TTImp.SpecArgs', E3} -> (fun (V384) -> begin (V386 = begin (V385 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V385} end), case V386 of {'Idris.Prelude.Types.Left', E4} -> (fun (V387) -> {'Idris.Prelude.Types.Left', V387} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V388) -> begin (V419 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V388 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418) -> V389 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V380))), case V419 of {'Idris.Prelude.Types.Left', E36} -> (fun (V420) -> {'Idris.Prelude.Types.Left', V420} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V421) -> case V421 of {'Idris.Prelude.Types.Just', E38} -> (fun (V422) -> begin (V443 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V388, {'Idris.Core.Env.Nil'}, case V422 of {'Idris.Core.Context.Context.MkGlobalDef', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442) -> V425 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V380))), case V443 of {'Idris.Prelude.Types.Left', E59} -> (fun (V444) -> {'Idris.Prelude.Types.Left', V444} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V445) -> begin (V446 = ('nested--8213-9424--in--un--getNamePos'(V2, V384, V3, V1, V0, 0, V445, V380))), case V446 of {'Idris.Prelude.Types.Left', E61} -> (fun (V447) -> {'Idris.Prelude.Types.Left', V447} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V448) -> begin (V449 = ('nested--8213-9420--in--un--collectDDeps'(V2, V384, V3, V1, V0, V445, V380))), case V449 of {'Idris.Prelude.Types.Left', E63} -> (fun (V450) -> {'Idris.Prelude.Types.Left', V450} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V451) -> begin (V452 = ('nested--8213-9423--in--un--collectSpec'(V2, V384, V3, V1, V0, [], V451, V448, V445, V380))), case V452 of {'Idris.Prelude.Types.Left', E65} -> (fun (V453) -> {'Idris.Prelude.Types.Left', V453} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V454) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V455) -> case V455 of {'Idris.Prelude.Types.Left', E67} -> (fun (V456) -> {'Idris.Prelude.Types.Left', V456} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V457) -> {'Idris.Prelude.Types.Right', 0} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V458) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V422 of {'Idris.Core.Context.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478) -> {'Idris.Core.Context.Context.MkGlobalDef', V459, V460, V461, V462, V463, V454, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478} end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V458)) end, V380)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V380)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--initDef'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, 0, V4, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.None'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E2 | E3] -> (fun (V12, V13) -> case V12 of {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V18, V5, V6, V14))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.ExternDef', V21}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.TTImp.TTImp.ForeignFn', E8} -> (fun (V22) -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V27, V5, V6, V23))), case V28 of {'Idris.Prelude.Types.Left', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V30) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('un--getFnString'(V1, V2, V3, V31, V32)) end end, V22, [], V23))), case V33 of {'Idris.Prelude.Types.Left', E13} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.ForeignDef', V30, V35}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('un--initDef'(V0, V1, V2, V3, V4, V5, V6, V13)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRetTy'(V0, V1, V2) -> case V1 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> begin (V11 = (((V6(V0))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 0}))))(V2))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> ('un--getRetTy'(V0, V13, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V1)), <<"Can only add hints for concrete return types"/utf8>>}, V2)) end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V14, V15, V16, V17, V18) -> {'Idris.Prelude.Types.Right', V15} end(E10, E11, E12, E13, E14)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V1)), <<"Can only add hints for concrete return types"/utf8>>}, V2)) end.
'un--getFnString'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.TTImp.TTImp.IPrimVal', E11, E12} -> (fun (V5, V6) -> case V6 of {'Idris.Core.TT.Str', E24} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E24)); _ -> begin (V8 = ('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"[foreign]"/utf8>>}}, V4))), case V8 of {'Idris.Prelude.Types.Left', E13} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V12 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V11, {'Idris.Core.TT.StringType'}}))), begin (V13 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V10, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V12, V4))), case V13 of {'Idris.Prelude.Types.Left', E15} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E17} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V19, {'Idris.Core.Env.Nil'}, V15))(V4))), case V20 of {'Idris.Prelude.Types.Left', E19} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V22) -> case V22 of {'Idris.Core.Value.NPrimVal', E21, E22} -> (fun (V23, V24) -> case V24 of {'Idris.Core.TT.Str', E23} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E23)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V11, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E21, E22)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V11, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12)); _ -> begin (V26 = ('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"[foreign]"/utf8>>}}, V4))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V30 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V29, {'Idris.Core.TT.StringType'}}))), begin (V31 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V28, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V30, V4))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V35 = begin (V34 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V37, {'Idris.Core.Env.Nil'}, V33))(V4))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> case V40 of {'Idris.Core.Value.NPrimVal', E8, E9} -> (fun (V41, V42) -> case V42 of {'Idris.Core.TT.Str', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Right', V43} end(E10)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V29, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E8, E9)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V29, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--findInferrable'(V0, V1, V2) -> ('nested--9845-10742--in--un--fi'(V2, V1, V0, 0, 0, [], [], V2)).
