-module('Idris.Idris2.Control.Monad.Writer.CPS').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case-->>=-1141'/5,
  'case--case block in <*>-935'/8,
  'case--<*>-899'/5,
  'case--map-770'/5,
  'case--mapWriter-702'/3,
  'case--mapWriterT-586'/5,
  'case--writerT-463'/4,
  'dn--un--pure_Applicative_((WriterT $w) $m)'/3,
  'dn--un--map_Functor_((WriterT $w) $m)'/4,
  'dn--un--lift_MonadTrans_(WriterT $w)'/3,
  'dn--un--liftIO_HasIO_((WriterT $w) $m)'/3,
  'dn--un--join_Monad_((WriterT $w) $m)'/3,
  'dn--un--empty_Alternative_((WriterT $w) $m)'/2,
  'dn--un--__Impl_Monad_((WriterT $w) $m)'/1,
  'dn--un--__Impl_MonadTrans_(WriterT $w)'/5,
  'dn--un--__Impl_HasIO_((WriterT $w) $m)'/1,
  'dn--un--__Impl_Functor_((WriterT $w) $m)'/6,
  'dn--un--__Impl_Applicative_((WriterT $w) $m)'/1,
  'dn--un--__Impl_Alternative_((WriterT $w) $m)'/1,
  'dn--un-->>=_Monad_((WriterT $w) $m)'/4,
  'dn--un--<|>_Alternative_((WriterT $w) $m)'/4,
  'dn--un--<*>_Applicative_((WriterT $w) $m)'/4,
  'un--writerT'/3,
  'un--runWriterT'/2,
  'un--runWriter'/2,
  'un--mapWriterT'/4,
  'un--mapWriter'/4,
  'un--execWriterT'/2,
  'un--execWriter'/2,
  'un--Writer'/2
]).
'case-->>=-1141'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ((V1(V5))(V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in <*>-935'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V13, V14, V15) -> ((V14('erased'))({'Idris.Builtin.MkPair', (V4(V8)), V9})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--<*>-899'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))((V2(V6))))(fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V11, V12) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E7, E8, E9} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E10, E11, E12} -> (fun (V16, V17, V18) -> ((V17('erased'))({'Idris.Builtin.MkPair', (V5(V11)), V12})) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--map-770'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', (V2(V5)), V6} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mapWriter-702'(V0, V1, V2) -> (V1(V2)).
'case--mapWriterT-586'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V5, ((('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0))))(V3))(V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--writerT-463'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Builtin.MkPair', V4, ((('Idris.Idris2.Builtin':'un--snd'(V0))(V2))(V5))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pure_Applicative_((WriterT $w) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V6, V7, V8) -> ((V7('erased'))({'Idris.Builtin.MkPair', V1, V2})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_((WriterT $w) $m)'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(V0, fun (V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', (V1(V5)), V6} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V2(V3)))).
'dn--un--lift_MonadTrans_(WriterT $w)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V6, V7, V8) -> ((((V6('erased'))('erased'))(fun (V9) -> {'Idris.Builtin.MkPair', V9, V2} end))(V1)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--liftIO_HasIO_((WriterT $w) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V8, V9, V10) -> ((((V8('erased'))('erased'))(fun (V13) -> {'Idris.Builtin.MkPair', V13, V2} end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V11, V12) -> ((V12('erased'))(V1)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_((WriterT $w) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))((V1(V2))))(fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V7, V8) -> (V7(V8)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--empty_Alternative_((WriterT $w) $m)'(V0, V1) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkAlternative', E0, E1, E2} -> (fun (V2, V3, V4) -> (V3('erased')) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Monad_((WriterT $w) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V13, V14) -> {'Idris.Builtin.MkPair', (V3(V13)), V14} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V4(V5)))) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V21, V22, V23) -> ((V22('erased'))({'Idris.Builtin.MkPair', V16, V17})) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V29, V30, V31) -> ((((V30('erased'))('erased'))((V26(V28))))(fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V33, V34) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V35, V36, V37) -> ((((V36('erased'))('erased'))((V27(V34))))(fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V39, V40) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E24, E25, E26} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E27, E28, E29} -> (fun (V44, V45, V46) -> ((V45('erased'))({'Idris.Builtin.MkPair', (V33(V39)), V40})) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E30, E31, E32} -> (fun (V52, V53, V54) -> ((((V53('erased'))('erased'))((V49(V51))))(fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V56, V57) -> ((V50(V56))(V57)) end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E35, E36, E37} -> (fun (V61, V62, V63) -> ((((V62('erased'))('erased'))((V59(V60))))(fun (V64) -> case V64 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V65, V66) -> (V65(V66)) end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'dn--un--__Impl_MonadTrans_(WriterT $w)'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V8, V9, V10) -> ((((V8('erased'))('erased'))(fun (V11) -> {'Idris.Builtin.MkPair', V11, V4} end))(V3)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_HasIO_((WriterT $w) $m)'(V0) -> {'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V11, V12, V13) -> V11 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V15, V16) -> {'Idris.Builtin.MkPair', (V3(V15)), V16} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V4(V5)))) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E10, E11} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Prelude.Interfaces.MkApplicative', E15, E16, E17} -> (fun (V25, V26, V27) -> ((V26('erased'))({'Idris.Builtin.MkPair', V18, V19})) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E18, E19} -> (fun (V33, V34) -> case V33 of {'Idris.Prelude.Interfaces.MkMonad', E20, E21, E22} -> (fun (V35, V36, V37) -> ((((V36('erased'))('erased'))((V30(V32))))(fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V39, V40) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E25, E26} -> (fun (V41, V42) -> case V41 of {'Idris.Prelude.Interfaces.MkMonad', E27, E28, E29} -> (fun (V43, V44, V45) -> ((((V44('erased'))('erased'))((V31(V40))))(fun (V46) -> case V46 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V47, V48) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E32, E33} -> (fun (V49, V50) -> case V49 of {'Idris.Prelude.Interfaces.MkMonad', E34, E35, E36} -> (fun (V51, V52, V53) -> case V51 of {'Idris.Prelude.Interfaces.MkApplicative', E37, E38, E39} -> (fun (V54, V55, V56) -> ((V55('erased'))({'Idris.Builtin.MkPair', (V39(V47)), V48})) end(E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E40, E41} -> (fun (V62, V63) -> case V62 of {'Idris.Prelude.Interfaces.MkMonad', E42, E43, E44} -> (fun (V64, V65, V66) -> ((((V65('erased'))('erased'))((V59(V61))))(fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V68, V69) -> ((V60(V68))(V69)) end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E47, E48} -> (fun (V73, V74) -> case V73 of {'Idris.Prelude.Interfaces.MkMonad', E49, E50, E51} -> (fun (V75, V76, V77) -> ((((V76('erased'))('erased'))((V71(V72))))(fun (V78) -> case V78 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V79, V80) -> (V79(V80)) end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}, fun (V81) -> fun (V82) -> fun (V83) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E54, E55} -> (fun (V84, V85) -> case V84 of {'Idris.Prelude.Interfaces.MkMonad', E56, E57, E58} -> (fun (V86, V87, V88) -> case V86 of {'Idris.Prelude.Interfaces.MkApplicative', E59, E60, E61} -> (fun (V89, V90, V91) -> ((((V89('erased'))('erased'))(fun (V94) -> {'Idris.Builtin.MkPair', V94, V83} end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E62, E63} -> (fun (V92, V93) -> ((V93('erased'))(V82)) end(E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'dn--un--__Impl_Functor_((WriterT $w) $m)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(V0, fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', (V3(V7)), V8} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V4(V5)))).
'dn--un--__Impl_Applicative_((WriterT $w) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V13, V14) -> {'Idris.Builtin.MkPair', (V3(V13)), V14} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V4(V5)))) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V21, V22, V23) -> ((V22('erased'))({'Idris.Builtin.MkPair', V16, V17})) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V29, V30, V31) -> ((((V30('erased'))('erased'))((V26(V28))))(fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V33, V34) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V35, V36, V37) -> ((((V36('erased'))('erased'))((V27(V34))))(fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V39, V40) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E24, E25, E26} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E27, E28, E29} -> (fun (V44, V45, V46) -> ((V45('erased'))({'Idris.Builtin.MkPair', (V33(V39)), V40})) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}.
'dn--un--__Impl_Alternative_((WriterT $w) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V13, V14) -> {'Idris.Builtin.MkPair', (V3(V13)), V14} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V4(V5)))) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V18, V19, V20) -> case V18 of {'Idris.Prelude.Interfaces.MkApplicative', E11, E12, E13} -> (fun (V21, V22, V23) -> ((V22('erased'))({'Idris.Builtin.MkPair', V16, V17})) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E14, E15, E16} -> (fun (V29, V30, V31) -> ((((V30('erased'))('erased'))((V26(V28))))(fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V33, V34) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V35, V36, V37) -> ((((V36('erased'))('erased'))((V27(V34))))(fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V39, V40) -> case ('Idris.Idris2.Builtin':'un--fst'(V0)) of {'Idris.Prelude.Interfaces.MkMonad', E24, E25, E26} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E27, E28, E29} -> (fun (V44, V45, V46) -> ((V45('erased'))({'Idris.Builtin.MkPair', (V33(V39)), V40})) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V47) -> fun (V48) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkAlternative', E30, E31, E32} -> (fun (V49, V50, V51) -> (V50('erased')) end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkAlternative', E33, E34, E35} -> (fun (V56, V57, V58) -> (((V58('erased'))((V53(V55))))(fun () -> ((V54())(V55)) end)) end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}.
'dn--un-->>=_Monad_((WriterT $w) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))((V1(V3))))(fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V8, V9) -> ((V2(V8))(V9)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<|>_Alternative_((WriterT $w) $m)'(V0, V1, V2, V3) -> case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkAlternative', E0, E1, E2} -> (fun (V4, V5, V6) -> (((V6('erased'))((V1(V3))))(fun () -> ((V2())(V3)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<*>_Applicative_((WriterT $w) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))((V1(V3))))(fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V8, V9) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E5, E6, E7} -> (fun (V10, V11, V12) -> ((((V11('erased'))('erased'))((V2(V9))))(fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V14, V15) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V19, V20, V21) -> ((V20('erased'))({'Idris.Builtin.MkPair', (V8(V14)), V15})) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--writerT'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(('Idris.Idris2.Builtin':'un--fst'(V0)), fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> {'Idris.Builtin.MkPair', V4, ((('Idris.Idris2.Builtin':'un--snd'(V0))(V2))(V5))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1)).
'un--runWriterT'(V0, V1) -> (V1(case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V2, V3) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--runWriter'(V0, V1) -> (V1(case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V2, V3) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--mapWriterT'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(('Idris.Idris2.Builtin':'un--fst'(V0)), fun (V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V5, ((('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'(V0))))(V3))(V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V1((V2(case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'(V0)))) of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'un--mapWriter'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(('Idris.Idris2.Builtin':'un--fst'({'Idris.Builtin.MkPair', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V6, V7)) end end end end, V0})), fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', V9, ((('Idris.Idris2.Builtin':'un--snd'(('Idris.Idris2.Builtin':'un--snd'({'Idris.Builtin.MkPair', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V13, V14)) end end end end, V0}))))(V3))(V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V1((V2(case ('Idris.Idris2.Builtin':'un--fst'(('Idris.Idris2.Builtin':'un--snd'({'Idris.Builtin.MkPair', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V17, V18)) end end end end, V0})))) of {'Idris.Prelude.Interfaces.MkMonoid', E2, E3} -> (fun (V19, V20) -> V20 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'un--execWriterT'(V0, V1) -> ((((('Idris.Idris2.Builtin':'un--fst'(V0))('erased'))('erased'))(fun (V4) -> ('Idris.Idris2.Builtin':'un--snd'(V4)) end))((V1(case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V2, V3) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))).
'un--execWriter'(V0, V1) -> ((((('Idris.Idris2.Builtin':'un--fst'({'Idris.Builtin.MkPair', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V11, V12)) end end end end, V0}))('erased'))('erased'))(fun (V8) -> ('Idris.Idris2.Builtin':'un--snd'(V8)) end))((V1(case ('Idris.Idris2.Builtin':'un--snd'({'Idris.Builtin.MkPair', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V4, V5)) end end end end, V0})) of {'Idris.Prelude.Interfaces.MkMonoid', E0, E1} -> (fun (V6, V7) -> V7 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))).
'un--Writer'(V0, V1) -> {'Idris.Control.Monad.Writer.CPS.WriterT', V0, fun (V2) -> {'Idris.Control.Monad.Identity.Identity', V2} end, V1}.
