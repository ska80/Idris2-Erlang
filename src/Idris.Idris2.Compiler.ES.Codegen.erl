-module('Idris.Idris2.Compiler.ES.Codegen').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in makeForeign-4319'/9,
  'case--castInt-3185'/4,
  'case--castInt,intImpl-2868'/8,
  'nested--8178-2744--in--un--truncInt'/6,
  'nested--8178-2745--in--un--shrink'/5,
  'nested--7461-2046--in--un--okchar'/2,
  'nested--7329-1915--in--un--okchar'/2,
  'nested--8178-2747--in--un--intImpl'/5,
  'nested--8178-2746--in--un--expand'/5,
  'nested--10813-5299--in--un--anyCase'/5,
  'nested--10952-5774--in--un--alt'/8,
  'nested--10952-5617--in--un--alt'/9,
  'nested--10813-5300--in--un--alt'/4,
  'un--var'/1,
  'un--useBigInt\x{27}'/1,
  'un--useBigInt'/1,
  'un--truncateUnsigned'/2,
  'un--truncateSigned'/2,
  'un--toInt'/1,
  'un--toBigInt'/1,
  'un--tailRec'/0,
  'un--tag2es'/1,
  'un--switch'/3,
  'un--stringList'/1,
  'un--stmt'/3,
  'un--searchForeign'/2,
  'un--readCCPart'/1,
  'un--printDoc'/2,
  'un--minimal'/1,
  'un--makeForeign'/5,
  'un--mainExpr'/0,
  'un--lambdaArgs'/1,
  'un--keywordSafe'/1,
  'un--jsUserName'/1,
  'un--jsStringDoc'/1,
  'un--jsString'/1,
  'un--jsPrim'/3,
  'un--jsOp'/2,
  'un--jsNumberOfString'/1,
  'un--jsNameDoc'/1,
  'un--jsName'/1,
  'un--jsIntOfString'/1,
  'un--jsIntOfDouble'/2,
  'un--jsIntOfChar'/2,
  'un--jsIntKind'/1,
  'un--jsIdent'/1,
  'un--jsCrashExp'/1,
  'un--jsConstant'/1,
  'un--jsCharOfInt'/2,
  'un--jsBigIntOfString'/1,
  'un--jsAnyToString'/1,
  'un--isFun'/1,
  'un--isArg'/2,
  'un--insertBreak'/2,
  'un--function'/3,
  'un--fromInt'/1,
  'un--fromBigInt'/1,
  'un--foreignDecl'/5,
  'un--foreign'/3,
  'un--exp'/2,
  'un--esName'/1,
  'un--def'/3,
  'un--constant'/2,
  'un--conTags'/1,
  'un--compileToES'/5,
  'un--castInt'/3,
  'un--callFun1'/2,
  'un--callFun'/2,
  'un--breakDrop1'/2,
  'un--boundedUIntOp'/4,
  'un--boundedOp'/5,
  'un--boundedIntOp'/4,
  'un--boolOp'/3,
  'un--binOp'/3,
  'un--arithOp'/3,
  'un--applyObj'/1,
  'un--applyList'/4,
  'un--applyCon'/3,
  'un--app'/2
]).
'case--case block in case block in makeForeign-4319'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"js/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<".js"/utf8>>)))), V8))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Compiler.ES.State':'un--addToPreamble'(V2, V10, V13, V8))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('un--constant'(V4, {'Idris.Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, V9))))}))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--castInt-3185'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V6 of {'Idris.Core.TT.CharType'} -> (fun () -> case V5 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E18} -> (fun (V10) -> ('nested--8178-2744--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V10)), V10, ('un--jsIntOfChar'(V10, V0)))) end(E18)); _ -> case V7 of {'Idris.Prelude.Types.Just', E14} -> (fun (V11) -> case V5 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V12, V13) -> case V12 of {'Idris.Core.TT.CharType'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', ('un--jsCharOfInt'(V11, V0))} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> fun (V15) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V0))} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', (('un--fromInt'(V11))(V0))} end end()); _ -> case V13 of {'Idris.Prelude.Types.Just', E17} -> (fun (V17) -> ('nested--8178-2747--in--un--intImpl'(V0, V1, V2, V11, V17)) end(E17)); _ -> fun (V18) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V18)) end end end end(E15, E16)); _ -> fun (V19) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V19)) end end end(E14)); _ -> fun (V20) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V20)) end end end end(E12, E13)); _ -> case V7 of {'Idris.Prelude.Types.Just', E8} -> (fun (V21) -> case V5 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V22, V23) -> case V22 of {'Idris.Core.TT.CharType'} -> (fun () -> fun (V24) -> {'Idris.Prelude.Types.Right', ('un--jsCharOfInt'(V21, V0))} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> fun (V25) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V0))} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> fun (V26) -> {'Idris.Prelude.Types.Right', (('un--fromInt'(V21))(V0))} end end()); _ -> case V23 of {'Idris.Prelude.Types.Just', E11} -> (fun (V27) -> ('nested--8178-2747--in--un--intImpl'(V0, V1, V2, V21, V27)) end(E11)); _ -> fun (V28) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V28)) end end end end(E9, E10)); _ -> fun (V29) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V29)) end end end(E8)); _ -> fun (V30) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V30)) end end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V5 of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V31, V32) -> case V32 of {'Idris.Prelude.Types.Just', E29} -> (fun (V33) -> ('nested--8178-2744--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V33)), V33, (('un--jsIntOfString'(V33))(V0)))) end(E29)); _ -> case V7 of {'Idris.Prelude.Types.Just', E25} -> (fun (V34) -> case V5 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V35, V36) -> case V35 of {'Idris.Core.TT.CharType'} -> (fun () -> fun (V37) -> {'Idris.Prelude.Types.Right', ('un--jsCharOfInt'(V34, V0))} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V0))} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> fun (V39) -> {'Idris.Prelude.Types.Right', (('un--fromInt'(V34))(V0))} end end()); _ -> case V36 of {'Idris.Prelude.Types.Just', E28} -> (fun (V40) -> ('nested--8178-2747--in--un--intImpl'(V0, V1, V2, V34, V40)) end(E28)); _ -> fun (V41) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V41)) end end end end(E26, E27)); _ -> fun (V42) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V42)) end end end(E25)); _ -> fun (V43) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V43)) end end end end(E23, E24)); _ -> case V7 of {'Idris.Prelude.Types.Just', E19} -> (fun (V44) -> case V5 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V45, V46) -> case V45 of {'Idris.Core.TT.CharType'} -> (fun () -> fun (V47) -> {'Idris.Prelude.Types.Right', ('un--jsCharOfInt'(V44, V0))} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> fun (V48) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V0))} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> fun (V49) -> {'Idris.Prelude.Types.Right', (('un--fromInt'(V44))(V0))} end end()); _ -> case V46 of {'Idris.Prelude.Types.Just', E22} -> (fun (V50) -> ('nested--8178-2747--in--un--intImpl'(V0, V1, V2, V44, V50)) end(E22)); _ -> fun (V51) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V51)) end end end end(E20, E21)); _ -> fun (V52) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V52)) end end end(E19)); _ -> fun (V53) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V53)) end end end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V5 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V54, V55) -> case V55 of {'Idris.Prelude.Types.Just', E40} -> (fun (V56) -> ('nested--8178-2744--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V56)), V56, ('un--jsIntOfDouble'(V56, V0)))) end(E40)); _ -> case V7 of {'Idris.Prelude.Types.Just', E36} -> (fun (V57) -> case V5 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V58, V59) -> case V58 of {'Idris.Core.TT.CharType'} -> (fun () -> fun (V60) -> {'Idris.Prelude.Types.Right', ('un--jsCharOfInt'(V57, V0))} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> fun (V61) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V0))} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> fun (V62) -> {'Idris.Prelude.Types.Right', (('un--fromInt'(V57))(V0))} end end()); _ -> case V59 of {'Idris.Prelude.Types.Just', E39} -> (fun (V63) -> ('nested--8178-2747--in--un--intImpl'(V0, V1, V2, V57, V63)) end(E39)); _ -> fun (V64) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V64)) end end end end(E37, E38)); _ -> fun (V65) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V65)) end end end(E36)); _ -> fun (V66) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V66)) end end end end(E34, E35)); _ -> case V7 of {'Idris.Prelude.Types.Just', E30} -> (fun (V67) -> case V5 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V68, V69) -> case V68 of {'Idris.Core.TT.CharType'} -> (fun () -> fun (V70) -> {'Idris.Prelude.Types.Right', ('un--jsCharOfInt'(V67, V0))} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> fun (V71) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V0))} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> fun (V72) -> {'Idris.Prelude.Types.Right', (('un--fromInt'(V67))(V0))} end end()); _ -> case V69 of {'Idris.Prelude.Types.Just', E33} -> (fun (V73) -> ('nested--8178-2747--in--un--intImpl'(V0, V1, V2, V67, V73)) end(E33)); _ -> fun (V74) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V74)) end end end end(E31, E32)); _ -> fun (V75) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V75)) end end end(E30)); _ -> fun (V76) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V76)) end end end end()); _ -> case V7 of {'Idris.Prelude.Types.Just', E4} -> (fun (V77) -> case V5 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V78, V79) -> case V78 of {'Idris.Core.TT.CharType'} -> (fun () -> fun (V80) -> {'Idris.Prelude.Types.Right', ('un--jsCharOfInt'(V77, V0))} end end()); {'Idris.Core.TT.StringType'} -> (fun () -> fun (V81) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V0))} end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> fun (V82) -> {'Idris.Prelude.Types.Right', (('un--fromInt'(V77))(V0))} end end()); _ -> case V79 of {'Idris.Prelude.Types.Just', E7} -> (fun (V83) -> ('nested--8178-2747--in--un--intImpl'(V0, V1, V2, V77, V83)) end(E7)); _ -> fun (V84) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V84)) end end end end(E5, E6)); _ -> fun (V85) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V85)) end end end(E4)); _ -> fun (V86) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V86)) end end end end(E2, E3)); _ -> fun (V87) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V87)) end end end(E0, E1)); _ -> fun (V88) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"invalid cast: + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)) | [<<" + \x{27} -> \x{27} + "/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)) | []]]]], V88)) end end.
'case--castInt,intImpl-2868'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Core.TT.Signed', E8} -> (fun (V10) -> case V10 of {'Idris.Core.TT.Unlimited'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', V5} end end()); _ -> case V8 of {'Idris.Core.TT.Signed', E9} -> (fun (V12) -> case V9 of {'Idris.Core.TT.Signed', E10} -> (fun (V13) -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'(V13, V12)) of 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', V5} end; 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.Unsigned', E11} -> (fun (V15) -> case ('un--useBigInt'(V4)) of 0 -> case ('un--useBigInt'(V3)) of 1 -> ('nested--8178-2744--in--un--truncInt'(V0, V1, V2, 1, V3, ('un--toBigInt'(V0)))); _ -> V6 end; _ -> V6 end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); {'Idris.Core.TT.Unsigned', E12} -> (fun (V16) -> case V9 of {'Idris.Core.TT.Unsigned', E13} -> (fun (V17) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V17, V16)) of 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', V5} end; 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); {'Idris.Core.TT.Signed', E14} -> (fun (V19) -> case ('Idris.Idris2.Core.TT':'dn--un-->_Ord_Precision'(V19, {'Idris.Core.TT.P', V16})) of 1 -> fun (V20) -> {'Idris.Prelude.Types.Right', V5} end; 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> case V8 of {'Idris.Core.TT.Signed', E2} -> (fun (V21) -> case V9 of {'Idris.Core.TT.Signed', E3} -> (fun (V22) -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'(V22, V21)) of 1 -> fun (V23) -> {'Idris.Prelude.Types.Right', V5} end; 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Core.TT.Unsigned', E4} -> (fun (V24) -> case ('un--useBigInt'(V4)) of 0 -> case ('un--useBigInt'(V3)) of 1 -> ('nested--8178-2744--in--un--truncInt'(V0, V1, V2, 1, V3, ('un--toBigInt'(V0)))); _ -> V6 end; _ -> V6 end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Core.TT.Unsigned', E5} -> (fun (V25) -> case V9 of {'Idris.Core.TT.Unsigned', E6} -> (fun (V26) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V26, V25)) of 1 -> fun (V27) -> {'Idris.Prelude.Types.Right', V5} end; 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Core.TT.Signed', E7} -> (fun (V28) -> case ('Idris.Idris2.Core.TT':'dn--un-->_Ord_Precision'(V28, {'Idris.Core.TT.P', V25})) of 1 -> fun (V29) -> {'Idris.Prelude.Types.Right', V5} end; 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8178-2744--in--un--truncInt'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Signed', E0} -> (fun (V6) -> fun (V7) -> case V6 of {'Idris.Core.TT.Unlimited'} -> (fun () -> {'Idris.Prelude.Types.Right', V5} end()); {'Idris.Core.TT.P', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', (('un--truncateSigned'(V3, V8))(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.Unsigned', E2} -> (fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', (('un--truncateUnsigned'(V3, V9))(V5))} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8178-2745--in--un--shrink'(V0, V1, V2, V3, V4) -> case ('un--useBigInt'(V3)) of 1 -> case ('un--useBigInt'(V4)) of 0 -> fun (V5) -> ('un--fromBigInt'(V5)) end; _ -> fun (V6) -> V6 end end; _ -> fun (V7) -> V7 end end.
'nested--7461-2046--in--un--okchar'(V0, V1) -> case V1 of $_ -> <<"_"/utf8>>; _ -> case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_String'(V1)); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"x"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--7329-1915--in--un--okchar'(V0, V1) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V1, $ )) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{5c})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{22})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{27})) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V1, $~)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_String'(V1)); 0 -> case V1 of $\x{0} -> <<"\x{5c}0"/utf8>>; $\x{27} -> <<"\x{5c}\x{27}"/utf8>>; $\x{22} -> <<"\x{5c}\x{22}"/utf8>>; $\x{d} -> <<"\x{5c}r"/utf8>>; $\x{a} -> <<"\x{5c}n"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}u{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))), <<"}"/utf8>>)))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8178-2747--in--un--intImpl'(V0, V1, V2, V3, V4) -> begin (V5 = (('nested--8178-2746--in--un--expand'(V0, V1, V2, V3, V4))(V0))), begin (V10 = fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', (('nested--8178-2745--in--un--shrink'(V0, V1, V2, V3, V4))(V9))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--8178-2744--in--un--truncInt'(V0, V1, V2, ('un--useBigInt'(V3)), V4, V0)), V6)) end), ('case--castInt,intImpl-2868'(V0, V1, V2, V4, V3, V5, V10, {'Idris.Builtin.MkPair', V3, V4})) end end.
'nested--8178-2746--in--un--expand'(V0, V1, V2, V3, V4) -> case ('un--useBigInt'(V3)) of 0 -> case ('un--useBigInt'(V4)) of 1 -> fun (V5) -> ('un--toBigInt'(V5)) end; _ -> fun (V6) -> V6 end end; _ -> fun (V7) -> V7 end end.
'nested--10813-5299--in--un--anyCase'(V0, V1, V2, V3, V4) -> begin (V5 = case ('Idris.Idris2.Compiler.ES.Doc':'un--isMultiline'(V4)) of 1 -> ('Idris.Idris2.Compiler.ES.Doc':'un--block'(V4)); 0 -> V4; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V3, ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), V5)) end.
'nested--10952-5774--in--un--alt'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Compiler.ES.Ast.MkEConstAlt', E0, E1} -> (fun (V8, V9) -> begin (V10 = (('un--stmt'({'Idris.Prelude.Types.Just', V0}, V4, V9))(V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.Doc.Text', ('un--jsConstant'(V8))}, V12}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10952-5617--in--un--alt'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Compiler.ES.Ast.MkEConAlt', E0, E1, E2} -> (fun (V9, V10, V11) -> case V10 of 7 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V12) -> case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.Doc.Text', <<"undefined"/utf8>>}, V14}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V6}, V4, V11)), V8)); 2 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.Doc.Text', <<"0"/utf8>>}, V17}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V6}, V4, V11)), V8)); 3 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V18) -> case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.Doc.Text', <<"undefined"/utf8>>}, V20}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V6}, V4, V11)), V8)); 5 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.Doc.Text', <<"0"/utf8>>}, V23}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V6}, V4, V11)), V8)); 6 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V24) -> case V24 of {'Idris.Prelude.Types.Left', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.Doc.Text', <<"undefined"/utf8>>}, V26}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V6}, V4, V11)), V8)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V27) -> case V27 of {'Idris.Prelude.Types.Left', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('un--tag2es'(V9)), V29}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V6}, V4, V11)), V8)) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10813-5300--in--un--alt'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('nested--10813-5299--in--un--anyCase'(V0, V1, V2, ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Idris.Compiler.ES.Doc.Text', <<"case"/utf8>>}, V4)), V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--var'(V0) -> case V0 of {'Idris.Compiler.ES.Ast.VName', E0} -> (fun (V1) -> ('un--jsNameDoc'(V1)) end(E0)); {'Idris.Compiler.ES.Ast.VLoc', E1} -> (fun (V2) -> {'Idris.Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(V2))))} end(E1)); {'Idris.Compiler.ES.Ast.VRef', E2} -> (fun (V3) -> {'Idris.Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$R"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(V3))))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--useBigInt\x{27}'(V0) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V0, 32)).
'un--useBigInt'(V0) -> case V0 of {'Idris.Core.TT.Signed', E0} -> (fun (V1) -> case V1 of {'Idris.Core.TT.P', E1} -> (fun (V2) -> ('un--useBigInt\x{27}'(V2)) end(E1)); {'Idris.Core.TT.Unlimited'} -> (fun () -> 1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Unsigned', E2} -> (fun (V3) -> ('un--useBigInt\x{27}'(V3)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--truncateUnsigned'(V0, V1) -> begin (V2 = case V0 of 1 -> <<"BigInt"/utf8>>; 0 -> <<"Int"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V3) -> ('un--callFun1'(('Idris.Idris2.Prelude.Types.String':'un--++'(('un--esName'(<<"truncU"/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))))), V3)) end end.
'un--truncateSigned'(V0, V1) -> begin (V2 = case V0 of 1 -> <<"BigInt"/utf8>>; 0 -> <<"Int"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V3) -> ('un--callFun1'(('Idris.Idris2.Prelude.Types.String':'un--++'(('un--esName'(<<"trunc"/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))))), V3)) end end.
'un--toInt'(V0) -> case ('un--useBigInt'(V0)) of 1 -> fun (V1) -> ('un--toBigInt'(V1)) end; 0 -> fun (V2) -> V2 end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toBigInt'(V0) -> ('un--callFun1'(<<"BigInt"/utf8>>, V0)).
'un--tailRec'() -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"__tailRec"/utf8>>}}.
'un--tag2es'(V0) -> case V0 of {'Idris.Prelude.Types.Left', E0} -> (fun (V1) -> {'Idris.Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V2) -> ('un--jsStringDoc'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--switch'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"switch"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--paren'(V0)))), {'Idris.Compiler.ES.Doc.SoftSpace'}))), begin (V33 = ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_Maybe'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'(V27, V28, V29)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V30, V31)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('nested--10813-5299--in--un--anyCase'(V2, V1, V0, {'Idris.Compiler.ES.Doc.Text', <<"default"/utf8>>}, V32)))) end, V2))), ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V3, ('Idris.Idris2.Compiler.ES.Doc':'un--block'(('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V34) -> ('nested--10813-5300--in--un--alt'(V2, V1, V0, V34)) end, V1)), V33)))))))) end end.
'un--stringList'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Data.List':'un--intersperse'(<<","/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)) end, V0)))))).
'un--stmt'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Just', E6} -> (fun (V3) -> case V3 of {'Idris.Compiler.ES.Ast.Returns'} -> (fun () -> case V2 of {'Idris.Compiler.ES.Ast.Return', E77} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E78} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Idris.Compiler.ES.Doc.Text', <<"return"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V8, {'Idris.Compiler.ES.Doc.Text', <<";"/utf8>>}))))} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--exp'(V1, V4)), V5)) end end(E77)); _ -> fun (V9) -> case V2 of {'Idris.Compiler.ES.Ast.ConSwitch', E48, E49, E50, E51} -> (fun (V10, V11, V12, V13) -> begin (V20 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E52} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V18) -> {'Idris.Prelude.Types.Right', ('un--insertBreak'(V3, V18))} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V19) -> ('nested--10952-5617--in--un--alt'(V3, V13, V12, V11, V1, V0, V3, V14, V19)) end, V15)) end end, V12, [], V9))), case V20 of {'Idris.Prelude.Types.Left', E54} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V22) -> begin (V27 = case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E56} -> (fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V24) -> case V24 of {'Idris.Prelude.Types.Left', E57} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V26}} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V3}, V1, V23)), V9)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V27 of {'Idris.Prelude.Types.Left', E59} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V29) -> {'Idris.Prelude.Types.Right', ('un--switch'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--minimal'(V11)), {'Idris.Compiler.ES.Doc.Text', <<".h"/utf8>>})), V22, V29))} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49, E50, E51)); {'Idris.Compiler.ES.Ast.ConstSwitch', E61, E62, E63, E64} -> (fun (V30, V31, V32, V33) -> begin (V40 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V36) -> case V36 of {'Idris.Prelude.Types.Left', E65} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('un--insertBreak'(V3, V38))} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V39) -> ('nested--10952-5774--in--un--alt'(V3, V33, V32, V31, V1, V0, V34, V39)) end, V35)) end end, V32, [], V9))), case V40 of {'Idris.Prelude.Types.Left', E67} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V42) -> begin (V47 = case V33 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E69} -> (fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V44) -> case V44 of {'Idris.Prelude.Types.Left', E70} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V46}} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V3}, V1, V43)), V9)) end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V47 of {'Idris.Prelude.Types.Left', E72} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V49) -> begin (V50 = (('un--exp'(V1, V31))(V9))), case V50 of {'Idris.Prelude.Types.Left', E74} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V52) -> {'Idris.Prelude.Types.Right', ('un--switch'(V52, V42, V49))} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61, E62, E63, E64)); {'Idris.Compiler.ES.Ast.Error', E76} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--jsCrashExp'(('un--jsStringDoc'(V53)))), {'Idris.Compiler.ES.Doc.Text', <<";"/utf8>>}))} end(E76)); _ -> case V2 of {'Idris.Compiler.ES.Ast.Block', E42, E43} -> (fun (V54, V55) -> begin (V57 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V56) -> ('un--stmt'({'Idris.Prelude.Types.Nothing'}, V1, V56)) end, ('Idris.Idris2.Data.List1':'un--forget'(V54)), [], V9))), case V57 of {'Idris.Prelude.Types.Left', E44} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V59) -> begin (V60 = (('un--stmt'(V0, V1, V55))(V9))), case V60 of {'Idris.Prelude.Types.Left', E46} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V62) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V59, [V62 | []]))))} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); {'Idris.Compiler.ES.Ast.ErrorWithout', E80} -> (fun (V63) -> case V2 of {'Idris.Compiler.ES.Ast.Assign', E116, E117} -> (fun (V64, V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V67) -> case V67 of {'Idris.Prelude.Types.Left', E118} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V69) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([('un--var'(V63)) | [('Idris.Idris2.Compiler.ES.Doc':'un--softEq'()) | [V69 | [{'Idris.Compiler.ES.Doc.Text', <<";"/utf8>>} | []]]]]))} end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--exp'(V1, V65)), V66)) end end(E116, E117)); _ -> fun (V70) -> case V2 of {'Idris.Compiler.ES.Ast.ConSwitch', E87, E88, E89, E90} -> (fun (V71, V72, V73, V74) -> begin (V81 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V77) -> case V77 of {'Idris.Prelude.Types.Left', E91} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('un--insertBreak'(V3, V79))} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V80) -> ('nested--10952-5617--in--un--alt'(V3, V74, V73, V72, V1, V0, V3, V75, V80)) end, V76)) end end, V73, [], V70))), case V81 of {'Idris.Prelude.Types.Left', E93} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V83) -> begin (V88 = case V74 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E95} -> (fun (V84) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V85) -> case V85 of {'Idris.Prelude.Types.Left', E96} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V87}} end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V3}, V1, V84)), V70)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V88 of {'Idris.Prelude.Types.Left', E98} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V90) -> {'Idris.Prelude.Types.Right', ('un--switch'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--minimal'(V72)), {'Idris.Compiler.ES.Doc.Text', <<".h"/utf8>>})), V83, V90))} end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87, E88, E89, E90)); {'Idris.Compiler.ES.Ast.ConstSwitch', E100, E101, E102, E103} -> (fun (V91, V92, V93, V94) -> begin (V101 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E104} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V99) -> {'Idris.Prelude.Types.Right', ('un--insertBreak'(V3, V99))} end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V100) -> ('nested--10952-5774--in--un--alt'(V3, V94, V93, V92, V1, V0, V95, V100)) end, V96)) end end, V93, [], V70))), case V101 of {'Idris.Prelude.Types.Left', E106} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V103) -> begin (V108 = case V94 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E108} -> (fun (V104) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V105) -> case V105 of {'Idris.Prelude.Types.Left', E109} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V107) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V107}} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V3}, V1, V104)), V70)) end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V108 of {'Idris.Prelude.Types.Left', E111} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V110) -> begin (V111 = (('un--exp'(V1, V92))(V70))), case V111 of {'Idris.Prelude.Types.Left', E113} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V113) -> {'Idris.Prelude.Types.Right', ('un--switch'(V113, V103, V110))} end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100, E101, E102, E103)); {'Idris.Compiler.ES.Ast.Error', E115} -> (fun (V114) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--jsCrashExp'(('un--jsStringDoc'(V114)))), {'Idris.Compiler.ES.Doc.Text', <<";"/utf8>>}))} end(E115)); _ -> case V2 of {'Idris.Compiler.ES.Ast.Block', E81, E82} -> (fun (V115, V116) -> begin (V118 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V117) -> ('un--stmt'({'Idris.Prelude.Types.Nothing'}, V1, V117)) end, ('Idris.Idris2.Data.List1':'un--forget'(V115)), [], V70))), case V118 of {'Idris.Prelude.Types.Left', E83} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V120) -> begin (V121 = (('un--stmt'(V0, V1, V116))(V70))), case V121 of {'Idris.Prelude.Types.Left', E85} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V120, [V123 | []]))))} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E80)); _ -> fun (V124) -> case V2 of {'Idris.Compiler.ES.Ast.ConSwitch', E13, E14, E15, E16} -> (fun (V125, V126, V127, V128) -> begin (V135 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V131) -> case V131 of {'Idris.Prelude.Types.Left', E17} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V133) -> {'Idris.Prelude.Types.Right', ('un--insertBreak'(V3, V133))} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V134) -> ('nested--10952-5617--in--un--alt'(V3, V128, V127, V126, V1, V0, V3, V129, V134)) end, V130)) end end, V127, [], V124))), case V135 of {'Idris.Prelude.Types.Left', E19} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V137) -> begin (V142 = case V128 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E21} -> (fun (V138) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V139) -> case V139 of {'Idris.Prelude.Types.Left', E22} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V141) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V141}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V3}, V1, V138)), V124)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V142 of {'Idris.Prelude.Types.Left', E24} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V144) -> {'Idris.Prelude.Types.Right', ('un--switch'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--minimal'(V126)), {'Idris.Compiler.ES.Doc.Text', <<".h"/utf8>>})), V137, V144))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13, E14, E15, E16)); {'Idris.Compiler.ES.Ast.ConstSwitch', E26, E27, E28, E29} -> (fun (V145, V146, V147, V148) -> begin (V155 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V151) -> case V151 of {'Idris.Prelude.Types.Left', E30} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V153) -> {'Idris.Prelude.Types.Right', ('un--insertBreak'(V3, V153))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V154) -> ('nested--10952-5774--in--un--alt'(V3, V148, V147, V146, V1, V0, V149, V154)) end, V150)) end end, V147, [], V124))), case V155 of {'Idris.Prelude.Types.Left', E32} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V157) -> begin (V162 = case V148 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E34} -> (fun (V158) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V159) -> case V159 of {'Idris.Prelude.Types.Left', E35} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V161) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V161}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', V3}, V1, V158)), V124)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V162 of {'Idris.Prelude.Types.Left', E37} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V164) -> begin (V165 = (('un--exp'(V1, V146))(V124))), case V165 of {'Idris.Prelude.Types.Left', E39} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V167) -> {'Idris.Prelude.Types.Right', ('un--switch'(V167, V157, V164))} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27, E28, E29)); {'Idris.Compiler.ES.Ast.Error', E41} -> (fun (V168) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--jsCrashExp'(('un--jsStringDoc'(V168)))), {'Idris.Compiler.ES.Doc.Text', <<";"/utf8>>}))} end(E41)); _ -> case V2 of {'Idris.Compiler.ES.Ast.Block', E7, E8} -> (fun (V169, V170) -> begin (V172 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V171) -> ('un--stmt'({'Idris.Prelude.Types.Nothing'}, V1, V171)) end, ('Idris.Idris2.Data.List1':'un--forget'(V169)), [], V124))), case V172 of {'Idris.Prelude.Types.Left', E9} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V174) -> begin (V175 = (('un--stmt'(V0, V1, V170))(V124))), case V175 of {'Idris.Prelude.Types.Left', E11} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V177) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V174, [V177 | []]))))} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V178) -> case V2 of {'Idris.Compiler.ES.Ast.Const', E126, E127} -> (fun (V179, V180) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V181) -> case V181 of {'Idris.Prelude.Types.Left', E128} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V183) -> {'Idris.Prelude.Types.Right', ('un--constant'(('un--var'(V179)), V183))} end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--exp'(V1, V180)), V178)) end(E126, E127)); {'Idris.Compiler.ES.Ast.Declare', E130, E131} -> (fun (V184, V185) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V186) -> case V186 of {'Idris.Prelude.Types.Left', E132} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V188) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'([('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Idris.Compiler.ES.Doc.Text', <<"let"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--var'(V184)), {'Idris.Compiler.ES.Doc.Text', <<";"/utf8>>})))) | [V188 | []]]))} end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.Ast.ErrorWithout', V184}}, V1, V185)), V178)) end(E130, E131)); _ -> case V2 of {'Idris.Compiler.ES.Ast.Block', E120, E121} -> (fun (V189, V190) -> begin (V192 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V191) -> ('un--stmt'({'Idris.Prelude.Types.Nothing'}, V1, V191)) end, ('Idris.Idris2.Data.List1':'un--forget'(V189)), [], V178))), case V192 of {'Idris.Prelude.Types.Left', E122} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V194) -> begin (V195 = (('un--stmt'(V0, V1, V190))(V178))), case V195 of {'Idris.Prelude.Types.Left', E124} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V197) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V194, [V197 | []]))))} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V198) -> case V2 of {'Idris.Compiler.ES.Ast.Block', E0, E1} -> (fun (V199, V200) -> begin (V202 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V201) -> ('un--stmt'({'Idris.Prelude.Types.Nothing'}, V1, V201)) end, ('Idris.Idris2.Data.List1':'un--forget'(V199)), [], V198))), case V202 of {'Idris.Prelude.Types.Left', E2} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V204) -> begin (V205 = (('un--stmt'(V0, V1, V200))(V198))), case V205 of {'Idris.Prelude.Types.Left', E4} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V207) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V204, [V207 | []]))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--searchForeign'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('un--readCCPart'(V2)) end, V1))), begin (V5 = {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('Idris.Idris2.Builtin':'un--fst'(V4)) end, V3))}), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V5 end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'(V6))} end end, ('Idris.Idris2.Data.List':'un--find'(fun (V7) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V10, V11)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V7)), V0)) end, V3)))) end end.
'un--readCCPart'(V0) -> ('un--breakDrop1'($:, V0)).
'un--printDoc'(V0, V1) -> case V0 of 0 -> ('Idris.Idris2.Compiler.ES.Doc':'un--pretty'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V1, {'Idris.Compiler.ES.Doc.LineBreak'})))); 1 -> ('Idris.Idris2.Compiler.ES.Doc':'un--compact'(V1)); 2 -> ('Idris.Idris2.Compiler.ES.Doc':'un--compact'(V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--minimal'(V0) -> case V0 of {'Idris.Compiler.ES.Ast.MVar', E0} -> (fun (V1) -> ('un--var'(V1)) end(E0)); {'Idris.Compiler.ES.Ast.MProjection', E1, E2} -> (fun (V2, V3) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--minimal'(V3)), {'Idris.Compiler.ES.Doc.Text', <<".a"/utf8>>})), {'Idris.Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))})) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeForeign'(V0, V1, V2, V3, V4) -> begin (V9 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('un--var'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V1, V2, V8)) end, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case ('un--readCCPart'(V3)) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> case V12 of <<"lambda"/utf8>> -> {'Idris.Prelude.Types.Right', ('un--constant'(V11, ('Idris.Idris2.Compiler.ES.Doc':'un--paren'({'Idris.Compiler.ES.Doc.Text', V13}))))}; <<"support"/utf8>> -> begin (V14 = <<"support"/utf8>>), ('case--case block in case block in makeForeign-4319'(V3, V2, V1, V0, V11, V13, V14, ('un--breakDrop1'($,, V13)), V4)) end; <<"stringIterator"/utf8>> -> case V13 of <<"new"/utf8>> -> {'Idris.Prelude.Types.Right', ('un--constant'(V11, {'Idris.Compiler.ES.Doc.Text', <<"__prim_stringIteratorNew"/utf8>>}))}; <<"next"/utf8>> -> {'Idris.Prelude.Types.Right', ('un--constant'(V11, {'Idris.Compiler.ES.Doc.Text', <<"__prim_stringIteratorNext"/utf8>>}))}; <<"toString"/utf8>> -> {'Idris.Prelude.Types.Right', ('un--constant'(V11, {'Idris.Compiler.ES.Doc.Text', <<"__prim_stringIteratorToString"/utf8>>}))}; _ -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"Invalid string iterator function: "/utf8>> | [V13 | [<<". "/utf8>> | [<<"Supported functions are: "/utf8>> | [('un--stringList'([<<"new"/utf8>> | [<<"next"/utf8>> | [<<"toString"/utf8>> | []]]])) | [<<"."/utf8>> | []]]]]]], V4)) end; _ -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"Invalid foreign type : "/utf8>> | [V12 | [<<". "/utf8>> | [<<"Supported types are: "/utf8>> | [('un--stringList'([<<"lambda"/utf8>> | [<<"support"/utf8>> | [<<"stringIterator"/utf8>> | []]]])) | []]]]]], V4)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mainExpr'() -> {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}.
'un--lambdaArgs'(V0) -> case V0 of [] -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"()"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--lambdaArrow'()))); _ -> ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V3, V4)) end end end end, fun (V5) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--var'(V5)), ('Idris.Idris2.Compiler.ES.Doc':'un--lambdaArrow'()))) end, V0)))) end.
'un--keywordSafe'(V0) -> case V0 of <<"var"/utf8>> -> <<"var$"/utf8>>; <<"switch"/utf8>> -> <<"switch$"/utf8>>; <<"return"/utf8>> -> <<"return$"/utf8>>; <<"const"/utf8>> -> <<"const$"/utf8>>; <<"function"/utf8>> -> <<"function$"/utf8>>; _ -> V0 end.
'un--jsUserName'(V0) -> case V0 of {'Idris.Core.Name.Basic', E0} -> (fun (V1) -> ('un--keywordSafe'(('un--jsIdent'(V1)))) end(E0)); {'Idris.Core.Name.Field', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rf__"/utf8>>, ('un--jsIdent'(V2)))) end(E1)); {'Idris.Core.Name.Underscore'} -> (fun () -> ('un--keywordSafe'(('un--jsIdent'(<<"_"/utf8>>)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsStringDoc'(V0) -> {'Idris.Compiler.ES.Doc.Text', ('un--jsString'(V0))}.
'un--jsString'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V29) -> ('nested--7329-1915--in--un--okchar'(V0, V29)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))), <<"\x{27}"/utf8>>)))).
'un--jsPrim'(V0, V1, V2) -> case ('Idris.Idris2.Core.Name':'un--dropAllNS'(V1)) of {'Idris.Core.Name.UN', E0} -> (fun (V3) -> case V3 of {'Idris.Core.Name.Basic', E1} -> (fun (V4) -> case V4 of <<"prim__newIORef"/utf8>> -> case V2 of [E2 | E3] -> (fun (V5, V6) -> case V6 of [E4 | E5] -> (fun (V7, V8) -> fun (V9) -> case V8 of [E6 | E7] -> (fun (V10, V11) -> case V11 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"({value:"/utf8>>} | [V7 | [{'Idris.Compiler.ES.Doc.Text', <<"})"/utf8>>} | []]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V9)) end end(E6, E7)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V9)) end end end(E4, E5)); _ -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V12)) end end end(E2, E3)); _ -> fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V13)) end end; <<"prim__readIORef"/utf8>> -> case V2 of [E8 | E9] -> (fun (V14, V15) -> case V15 of [E10 | E11] -> (fun (V16, V17) -> fun (V18) -> case V17 of [E12 | E13] -> (fun (V19, V20) -> case V20 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"("/utf8>>} | [V16 | [{'Idris.Compiler.ES.Doc.Text', <<".value)"/utf8>>} | []]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V18)) end end(E12, E13)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V18)) end end end(E10, E11)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V21)) end end end(E8, E9)); _ -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V22)) end end; <<"prim__writeIORef"/utf8>> -> case V2 of [E14 | E15] -> (fun (V23, V24) -> case V24 of [E16 | E17] -> (fun (V25, V26) -> case V26 of [E18 | E19] -> (fun (V27, V28) -> fun (V29) -> case V28 of [E20 | E21] -> (fun (V30, V31) -> case V31 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"("/utf8>>} | [V25 | [{'Idris.Compiler.ES.Doc.Text', <<".value="/utf8>>} | [V27 | [{'Idris.Compiler.ES.Doc.Text', <<")"/utf8>>} | []]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V29)) end end(E20, E21)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V29)) end end end(E18, E19)); _ -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V32)) end end end(E16, E17)); _ -> fun (V33) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V33)) end end end(E14, E15)); _ -> fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V34)) end end; <<"prim__newArray"/utf8>> -> case V2 of [E22 | E23] -> (fun (V35, V36) -> case V36 of [E24 | E25] -> (fun (V37, V38) -> case V38 of [E26 | E27] -> (fun (V39, V40) -> fun (V41) -> case V40 of [E28 | E29] -> (fun (V42, V43) -> case V43 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"(Array("/utf8>>} | [V37 | [{'Idris.Compiler.ES.Doc.Text', <<").fill("/utf8>>} | [V39 | [{'Idris.Compiler.ES.Doc.Text', <<"))"/utf8>>} | []]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V41)) end end(E28, E29)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V41)) end end end(E26, E27)); _ -> fun (V44) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V44)) end end end(E24, E25)); _ -> fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V45)) end end end(E22, E23)); _ -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V46)) end end; <<"prim__arrayGet"/utf8>> -> case V2 of [E30 | E31] -> (fun (V47, V48) -> case V48 of [E32 | E33] -> (fun (V49, V50) -> case V50 of [E34 | E35] -> (fun (V51, V52) -> fun (V53) -> case V52 of [E36 | E37] -> (fun (V54, V55) -> case V55 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"("/utf8>>} | [V49 | [{'Idris.Compiler.ES.Doc.Text', <<"["/utf8>>} | [V51 | [{'Idris.Compiler.ES.Doc.Text', <<"])"/utf8>>} | []]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V53)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V53)) end end end(E34, E35)); _ -> fun (V56) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V56)) end end end(E32, E33)); _ -> fun (V57) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V57)) end end end(E30, E31)); _ -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V58)) end end; <<"prim__arraySet"/utf8>> -> case V2 of [E38 | E39] -> (fun (V59, V60) -> case V60 of [E40 | E41] -> (fun (V61, V62) -> case V62 of [E42 | E43] -> (fun (V63, V64) -> case V64 of [E44 | E45] -> (fun (V65, V66) -> fun (V67) -> case V66 of [E46 | E47] -> (fun (V68, V69) -> case V69 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"("/utf8>>} | [V61 | [{'Idris.Compiler.ES.Doc.Text', <<"["/utf8>>} | [V63 | [{'Idris.Compiler.ES.Doc.Text', <<"]="/utf8>>} | [V65 | [{'Idris.Compiler.ES.Doc.Text', <<")"/utf8>>} | []]]]]]]]))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V67)) end end(E46, E47)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V67)) end end end(E44, E45)); _ -> fun (V70) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V70)) end end end(E42, E43)); _ -> fun (V71) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V71)) end end end(E40, E41)); _ -> fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V72)) end end end(E38, E39)); _ -> fun (V73) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V73)) end end; <<"void"/utf8>> -> case V2 of [E48 | E49] -> (fun (V74, V75) -> fun (V76) -> case V75 of [E50 | E51] -> (fun (V77, V78) -> case V78 of [] -> {'Idris.Prelude.Types.Right', ('un--jsCrashExp'(('un--jsStringDoc'(<<"Error: Executed \x{27}void\x{27}"/utf8>>))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V76)) end end(E50, E51)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V76)) end end end(E48, E49)); _ -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V79)) end end; <<"prim__void"/utf8>> -> case V2 of [E52 | E53] -> (fun (V80, V81) -> fun (V82) -> case V81 of [E54 | E55] -> (fun (V83, V84) -> case V84 of [] -> {'Idris.Prelude.Types.Right', ('un--jsCrashExp'(('un--jsStringDoc'(<<"Error: Executed \x{27}void\x{27}"/utf8>>))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V82)) end end(E54, E55)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V82)) end end end(E52, E53)); _ -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V85)) end end; <<"prim__codegen"/utf8>> -> fun (V86) -> case V2 of [] -> begin (V101 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V87) -> case V87 of {'Idris.Prelude.Types.Left', E56} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V89) -> {'Idris.Prelude.Types.Right', case V89 of {'Idris.Compiler.ES.State.MkESSt', E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98) -> V98 end(E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V99) -> begin (V100 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V100} end end, V86))), case V101 of {'Idris.Prelude.Types.Left', E67} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V103) -> case V103 of [E69 | E70] -> (fun (V104, V105) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Doc.Text', ('un--jsString'(V104))}} end(E69, E70)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Doc.Text', <<"\x{22}javascript\x{22}"/utf8>>}} end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V86)) end end; <<"prim__os"/utf8>> -> fun (V106) -> case V2 of [] -> begin (V121 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V107) -> case V107 of {'Idris.Prelude.Types.Left', E71} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V109) -> {'Idris.Prelude.Types.Right', case V109 of {'Idris.Compiler.ES.State.MkESSt', E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V118 end(E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V119) -> begin (V120 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V120} end end, V106))), case V121 of {'Idris.Prelude.Types.Left', E82} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V123) -> case ('un--searchForeign'(V123, [<<"node"/utf8>> | []])) of {'Idris.Prelude.Types.Right', E84} -> (fun (V124) -> begin (V125 = ('Idris.Idris2.Compiler.ES.State':'un--addToPreamble'(V0, <<"prim__os"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const _sysos = ((o => o === \x{27}linux\x{27}?\x{27}unix\x{27}:o===\x{27}win32\x{27}?\x{27}windows\x{27}:o)"/utf8>>, <<"(require(\x{27}os\x{27}).platform()));"/utf8>>)), V106))), case V125 of {'Idris.Prelude.Types.Left', E85} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V127) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Doc.Text', ('un--esName'(<<"sysos"/utf8>>))}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); {'Idris.Prelude.Types.Left', E87} -> (fun (V128) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"prim not implemented: prim__os"/utf8>>}, V106)) end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V106)) end end; _ -> fun (V129) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V129)) end end end(E1)); _ -> fun (V130) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V130)) end end end(E0)); _ -> fun (V131) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}, V131)) end end.
'un--jsOp'(V0, V1) -> case V0 of {'Idris.Core.TT.Add', E0} -> (fun (V2) -> case V1 of {'Idris.Data.Vect.::', E1, E2} -> (fun (V3, V4) -> fun (V5) -> case V4 of {'Idris.Data.Vect.::', E3, E4} -> (fun (V6, V7) -> case V7 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V2)), <<"+"/utf8>>, <<"add"/utf8>>))(V3))(V6))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Sub', E5} -> (fun (V8) -> case V1 of {'Idris.Data.Vect.::', E6, E7} -> (fun (V9, V10) -> fun (V11) -> case V10 of {'Idris.Data.Vect.::', E8, E9} -> (fun (V12, V13) -> case V13 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V8)), <<"-"/utf8>>, <<"sub"/utf8>>))(V9))(V12))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Core.TT.Mul', E10} -> (fun (V14) -> case V1 of {'Idris.Data.Vect.::', E11, E12} -> (fun (V15, V16) -> fun (V17) -> case V16 of {'Idris.Data.Vect.::', E13, E14} -> (fun (V18, V19) -> case V19 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V14)), <<"*"/utf8>>, <<"mul"/utf8>>))(V15))(V18))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.Div', E15} -> (fun (V20) -> case V1 of {'Idris.Data.Vect.::', E16, E17} -> (fun (V21, V22) -> fun (V23) -> case V22 of {'Idris.Data.Vect.::', E18, E19} -> (fun (V24, V25) -> case V25 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V20)), <<"/"/utf8>>, <<"div"/utf8>>))(V21))(V24))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); {'Idris.Core.TT.Mod', E20} -> (fun (V26) -> case V1 of {'Idris.Data.Vect.::', E21, E22} -> (fun (V27, V28) -> fun (V29) -> case V28 of {'Idris.Data.Vect.::', E23, E24} -> (fun (V30, V31) -> case V31 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"%"/utf8>>, V27, V30))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); {'Idris.Core.TT.Neg', E25} -> (fun (V32) -> fun (V33) -> case V1 of {'Idris.Data.Vect.::', E26, E27} -> (fun (V34, V35) -> case V35 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"(-("/utf8>>)), V34)), {'Idris.Compiler.ES.Doc.Text', <<"))"/utf8>>}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); {'Idris.Core.TT.ShiftL', E28} -> (fun (V36) -> case V36 of {'Idris.Core.TT.Int32Type'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E37, E38} -> (fun (V37, V38) -> case V38 of {'Idris.Data.Vect.::', E43, E44} -> (fun (V39, V40) -> case V40 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V41) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"<<"/utf8>>, V37, V39))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E45, E46} -> (fun (V42, V43) -> fun (V44) -> case V43 of {'Idris.Data.Vect.::', E47, E48} -> (fun (V45, V46) -> case V46 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V36)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V42))(V45))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44)); _ -> case V1 of {'Idris.Data.Vect.::', E39, E40} -> (fun (V47, V48) -> fun (V49) -> case V48 of {'Idris.Data.Vect.::', E41, E42} -> (fun (V50, V51) -> case V51 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V36)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V47))(V50))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37, E38)); _ -> case V1 of {'Idris.Data.Vect.::', E33, E34} -> (fun (V52, V53) -> fun (V54) -> case V53 of {'Idris.Data.Vect.::', E35, E36} -> (fun (V55, V56) -> case V56 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V36)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V52))(V55))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E53, E54} -> (fun (V57, V58) -> case V58 of {'Idris.Data.Vect.::', E59, E60} -> (fun (V59, V60) -> case V60 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V61) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"<<"/utf8>>, V57, V59))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E61, E62} -> (fun (V62, V63) -> fun (V64) -> case V63 of {'Idris.Data.Vect.::', E63, E64} -> (fun (V65, V66) -> case V66 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V36)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V62))(V65))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59, E60)); _ -> case V1 of {'Idris.Data.Vect.::', E55, E56} -> (fun (V67, V68) -> fun (V69) -> case V68 of {'Idris.Data.Vect.::', E57, E58} -> (fun (V70, V71) -> case V71 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V36)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V67))(V70))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53, E54)); _ -> case V1 of {'Idris.Data.Vect.::', E49, E50} -> (fun (V72, V73) -> fun (V74) -> case V73 of {'Idris.Data.Vect.::', E51, E52} -> (fun (V75, V76) -> case V76 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V36)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V72))(V75))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E29, E30} -> (fun (V77, V78) -> fun (V79) -> case V78 of {'Idris.Data.Vect.::', E31, E32} -> (fun (V80, V81) -> case V81 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V36)), <<"<<"/utf8>>, <<"shl"/utf8>>))(V77))(V80))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); {'Idris.Core.TT.ShiftR', E65} -> (fun (V82) -> case V82 of {'Idris.Core.TT.Int32Type'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E74, E75} -> (fun (V83, V84) -> case V84 of {'Idris.Data.Vect.::', E80, E81} -> (fun (V85, V86) -> case V86 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V87) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<">>"/utf8>>, V83, V85))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E82, E83} -> (fun (V88, V89) -> fun (V90) -> case V89 of {'Idris.Data.Vect.::', E84, E85} -> (fun (V91, V92) -> case V92 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V82)), <<">>"/utf8>>, <<"shr"/utf8>>))(V88))(V91))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80, E81)); _ -> case V1 of {'Idris.Data.Vect.::', E76, E77} -> (fun (V93, V94) -> fun (V95) -> case V94 of {'Idris.Data.Vect.::', E78, E79} -> (fun (V96, V97) -> case V97 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V82)), <<">>"/utf8>>, <<"shr"/utf8>>))(V93))(V96))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74, E75)); _ -> case V1 of {'Idris.Data.Vect.::', E70, E71} -> (fun (V98, V99) -> fun (V100) -> case V99 of {'Idris.Data.Vect.::', E72, E73} -> (fun (V101, V102) -> case V102 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V82)), <<">>"/utf8>>, <<"shr"/utf8>>))(V98))(V101))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E90, E91} -> (fun (V103, V104) -> case V104 of {'Idris.Data.Vect.::', E96, E97} -> (fun (V105, V106) -> case V106 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V107) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<">>"/utf8>>, V103, V105))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E98, E99} -> (fun (V108, V109) -> fun (V110) -> case V109 of {'Idris.Data.Vect.::', E100, E101} -> (fun (V111, V112) -> case V112 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V82)), <<">>"/utf8>>, <<"shr"/utf8>>))(V108))(V111))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96, E97)); _ -> case V1 of {'Idris.Data.Vect.::', E92, E93} -> (fun (V113, V114) -> fun (V115) -> case V114 of {'Idris.Data.Vect.::', E94, E95} -> (fun (V116, V117) -> case V117 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V82)), <<">>"/utf8>>, <<"shr"/utf8>>))(V113))(V116))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90, E91)); _ -> case V1 of {'Idris.Data.Vect.::', E86, E87} -> (fun (V118, V119) -> fun (V120) -> case V119 of {'Idris.Data.Vect.::', E88, E89} -> (fun (V121, V122) -> case V122 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V82)), <<">>"/utf8>>, <<"shr"/utf8>>))(V118))(V121))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E66, E67} -> (fun (V123, V124) -> fun (V125) -> case V124 of {'Idris.Data.Vect.::', E68, E69} -> (fun (V126, V127) -> case V127 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ((('un--arithOp'(('un--jsIntKind'(V82)), <<">>"/utf8>>, <<"shr"/utf8>>))(V123))(V126))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); {'Idris.Core.TT.BAnd', E102} -> (fun (V128) -> case V128 of {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E111, E112} -> (fun (V129, V130) -> case V130 of {'Idris.Data.Vect.::', E117, E118} -> (fun (V131, V132) -> case V132 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V133) -> {'Idris.Prelude.Types.Right', ('un--boundedUIntOp'(32, <<"and"/utf8>>, V129, V131))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E119, E120} -> (fun (V134, V135) -> fun (V136) -> case V135 of {'Idris.Data.Vect.::', E121, E122} -> (fun (V137, V138) -> case V138 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V134, V137))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117, E118)); _ -> case V1 of {'Idris.Data.Vect.::', E113, E114} -> (fun (V139, V140) -> fun (V141) -> case V140 of {'Idris.Data.Vect.::', E115, E116} -> (fun (V142, V143) -> case V143 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V139, V142))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111, E112)); _ -> case V1 of {'Idris.Data.Vect.::', E107, E108} -> (fun (V144, V145) -> fun (V146) -> case V145 of {'Idris.Data.Vect.::', E109, E110} -> (fun (V147, V148) -> case V148 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V144, V147))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E103, E104} -> (fun (V149, V150) -> fun (V151) -> case V150 of {'Idris.Data.Vect.::', E105, E106} -> (fun (V152, V153) -> case V153 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V149, V152))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E105, E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); {'Idris.Core.TT.BOr', E123} -> (fun (V154) -> case V154 of {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E132, E133} -> (fun (V155, V156) -> case V156 of {'Idris.Data.Vect.::', E138, E139} -> (fun (V157, V158) -> case V158 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V159) -> {'Idris.Prelude.Types.Right', ('un--boundedUIntOp'(32, <<"or"/utf8>>, V155, V157))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E140, E141} -> (fun (V160, V161) -> fun (V162) -> case V161 of {'Idris.Data.Vect.::', E142, E143} -> (fun (V163, V164) -> case V164 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V160, V163))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E142, E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138, E139)); _ -> case V1 of {'Idris.Data.Vect.::', E134, E135} -> (fun (V165, V166) -> fun (V167) -> case V166 of {'Idris.Data.Vect.::', E136, E137} -> (fun (V168, V169) -> case V169 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V165, V168))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132, E133)); _ -> case V1 of {'Idris.Data.Vect.::', E128, E129} -> (fun (V170, V171) -> fun (V172) -> case V171 of {'Idris.Data.Vect.::', E130, E131} -> (fun (V173, V174) -> case V174 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V170, V173))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E124, E125} -> (fun (V175, V176) -> fun (V177) -> case V176 of {'Idris.Data.Vect.::', E126, E127} -> (fun (V178, V179) -> case V179 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V175, V178))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); {'Idris.Core.TT.BXOr', E144} -> (fun (V180) -> case V180 of {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E153, E154} -> (fun (V181, V182) -> case V182 of {'Idris.Data.Vect.::', E159, E160} -> (fun (V183, V184) -> case V184 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V185) -> {'Idris.Prelude.Types.Right', ('un--boundedUIntOp'(32, <<"xor"/utf8>>, V181, V183))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E161, E162} -> (fun (V186, V187) -> fun (V188) -> case V187 of {'Idris.Data.Vect.::', E163, E164} -> (fun (V189, V190) -> case V190 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V186, V189))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E163, E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159, E160)); _ -> case V1 of {'Idris.Data.Vect.::', E155, E156} -> (fun (V191, V192) -> fun (V193) -> case V192 of {'Idris.Data.Vect.::', E157, E158} -> (fun (V194, V195) -> case V195 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V191, V194))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E153, E154)); _ -> case V1 of {'Idris.Data.Vect.::', E149, E150} -> (fun (V196, V197) -> fun (V198) -> case V197 of {'Idris.Data.Vect.::', E151, E152} -> (fun (V199, V200) -> case V200 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V196, V199))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E145, E146} -> (fun (V201, V202) -> fun (V203) -> case V202 of {'Idris.Data.Vect.::', E147, E148} -> (fun (V204, V205) -> case V205 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V201, V204))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); {'Idris.Core.TT.LT', E165} -> (fun (V206) -> case V1 of {'Idris.Data.Vect.::', E166, E167} -> (fun (V207, V208) -> fun (V209) -> case V208 of {'Idris.Data.Vect.::', E168, E169} -> (fun (V210, V211) -> case V211 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<"<"/utf8>>, V207, V210))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E165)); {'Idris.Core.TT.LTE', E170} -> (fun (V212) -> case V1 of {'Idris.Data.Vect.::', E171, E172} -> (fun (V213, V214) -> fun (V215) -> case V214 of {'Idris.Data.Vect.::', E173, E174} -> (fun (V216, V217) -> case V217 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<"<="/utf8>>, V213, V216))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E171, E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E170)); {'Idris.Core.TT.EQ', E175} -> (fun (V218) -> case V1 of {'Idris.Data.Vect.::', E176, E177} -> (fun (V219, V220) -> fun (V221) -> case V220 of {'Idris.Data.Vect.::', E178, E179} -> (fun (V222, V223) -> case V223 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<"==="/utf8>>, V219, V222))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E178, E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E176, E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E175)); {'Idris.Core.TT.GTE', E180} -> (fun (V224) -> case V1 of {'Idris.Data.Vect.::', E181, E182} -> (fun (V225, V226) -> fun (V227) -> case V226 of {'Idris.Data.Vect.::', E183, E184} -> (fun (V228, V229) -> case V229 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<">="/utf8>>, V225, V228))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E180)); {'Idris.Core.TT.GT', E185} -> (fun (V230) -> case V1 of {'Idris.Data.Vect.::', E186, E187} -> (fun (V231, V232) -> fun (V233) -> case V232 of {'Idris.Data.Vect.::', E188, E189} -> (fun (V234, V235) -> case V235 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<">"/utf8>>, V231, V234))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E188, E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E186, E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E185)); {'Idris.Core.TT.StrLength'} -> (fun () -> fun (V236) -> case V1 of {'Idris.Data.Vect.::', E190, E191} -> (fun (V237, V238) -> case V238 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V237, {'Idris.Compiler.ES.Doc.Text', <<".length"/utf8>>}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E190, E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> fun (V239) -> case V1 of {'Idris.Data.Vect.::', E192, E193} -> (fun (V240, V241) -> case V241 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"("/utf8>>)), V240)), {'Idris.Compiler.ES.Doc.Text', <<".charAt(0))"/utf8>>}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> fun (V242) -> case V1 of {'Idris.Data.Vect.::', E194, E195} -> (fun (V243, V244) -> case V244 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"("/utf8>>)), V243)), {'Idris.Compiler.ES.Doc.Text', <<".slice(1))"/utf8>>}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E194, E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E196, E197} -> (fun (V245, V246) -> fun (V247) -> case V246 of {'Idris.Data.Vect.::', E198, E199} -> (fun (V248, V249) -> case V249 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"("/utf8>>)), V245)), {'Idris.Compiler.ES.Doc.Text', <<".charAt("/utf8>>})), V248)), {'Idris.Compiler.ES.Doc.Text', <<"))"/utf8>>}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E196, E197)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E200, E201} -> (fun (V250, V251) -> fun (V252) -> case V251 of {'Idris.Data.Vect.::', E202, E203} -> (fun (V253, V254) -> case V254 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"+"/utf8>>, V250, V253))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E200, E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E204, E205} -> (fun (V255, V256) -> fun (V257) -> case V256 of {'Idris.Data.Vect.::', E206, E207} -> (fun (V258, V259) -> case V259 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"+"/utf8>>, V255, V258))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E206, E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E204, E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> fun (V260) -> case V1 of {'Idris.Data.Vect.::', E208, E209} -> (fun (V261, V262) -> case V262 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(('un--esName'(<<"strReverse"/utf8>>)), V261))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E208, E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E210, E211} -> (fun (V263, V264) -> case V264 of {'Idris.Data.Vect.::', E212, E213} -> (fun (V265, V266) -> fun (V267) -> case V266 of {'Idris.Data.Vect.::', E214, E215} -> (fun (V268, V269) -> case V269 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun'(('un--esName'(<<"substr"/utf8>>)), [V263 | [V265 | [V268 | []]]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E214, E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E210, E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> fun (V270) -> case V1 of {'Idris.Data.Vect.::', E216, E217} -> (fun (V271, V272) -> case V272 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.exp"/utf8>>, V271))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> fun (V273) -> case V1 of {'Idris.Data.Vect.::', E218, E219} -> (fun (V274, V275) -> case V275 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.log"/utf8>>, V274))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoublePow'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E220, E221} -> (fun (V276, V277) -> fun (V278) -> case V277 of {'Idris.Data.Vect.::', E222, E223} -> (fun (V279, V280) -> case V280 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun'(<<"Math.pow"/utf8>>, [V276 | [V279 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E222, E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> fun (V281) -> case V1 of {'Idris.Data.Vect.::', E224, E225} -> (fun (V282, V283) -> case V283 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.sin"/utf8>>, V282))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E224, E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> fun (V284) -> case V1 of {'Idris.Data.Vect.::', E226, E227} -> (fun (V285, V286) -> case V286 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.cos"/utf8>>, V285))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E226, E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> fun (V287) -> case V1 of {'Idris.Data.Vect.::', E228, E229} -> (fun (V288, V289) -> case V289 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.tan"/utf8>>, V288))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E228, E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> fun (V290) -> case V1 of {'Idris.Data.Vect.::', E230, E231} -> (fun (V291, V292) -> case V292 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.asin"/utf8>>, V291))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E230, E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> fun (V293) -> case V1 of {'Idris.Data.Vect.::', E232, E233} -> (fun (V294, V295) -> case V295 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.acos"/utf8>>, V294))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E232, E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> fun (V296) -> case V1 of {'Idris.Data.Vect.::', E234, E235} -> (fun (V297, V298) -> case V298 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.atan"/utf8>>, V297))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E234, E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> fun (V299) -> case V1 of {'Idris.Data.Vect.::', E236, E237} -> (fun (V300, V301) -> case V301 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.sqrt"/utf8>>, V300))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E236, E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> fun (V302) -> case V1 of {'Idris.Data.Vect.::', E238, E239} -> (fun (V303, V304) -> case V304 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.floor"/utf8>>, V303))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E238, E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> fun (V305) -> case V1 of {'Idris.Data.Vect.::', E240, E241} -> (fun (V306, V307) -> case V307 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--callFun1'(<<"Math.ceil"/utf8>>, V306))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E240, E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Cast', E242, E243} -> (fun (V308, V309) -> case V308 of {'Idris.Core.TT.StringType'} -> (fun () -> case V309 of {'Idris.Core.TT.DoubleType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E268, E269} -> (fun (V310, V311) -> case V311 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V312) -> {'Idris.Prelude.Types.Right', ('un--jsNumberOfString'(V310))} end end()); _ -> case V309 of {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E274, E275} -> (fun (V313, V314) -> case V314 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V315) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V313))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E276, E277} -> (fun (V316, V317) -> case V317 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V316)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E276, E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E274, E275)); _ -> case V1 of {'Idris.Data.Vect.::', E272, E273} -> (fun (V318, V319) -> case V319 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V318)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E272, E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E270, E271} -> (fun (V320, V321) -> case V321 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V320)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E270, E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E268, E269)); _ -> case V309 of {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E264, E265} -> (fun (V322, V323) -> case V323 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V324) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V322))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E266, E267} -> (fun (V325, V326) -> case V326 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V325)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E266, E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E264, E265)); _ -> case V1 of {'Idris.Data.Vect.::', E262, E263} -> (fun (V327, V328) -> case V328 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V327)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E262, E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E260, E261} -> (fun (V329, V330) -> case V330 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V329)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E260, E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> case V309 of {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E256, E257} -> (fun (V331, V332) -> case V332 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V333) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V331))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E258, E259} -> (fun (V334, V335) -> case V335 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V334)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E258, E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E256, E257)); _ -> case V1 of {'Idris.Data.Vect.::', E254, E255} -> (fun (V336, V337) -> case V337 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V336)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E254, E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E252, E253} -> (fun (V338, V339) -> case V339 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V338)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> case V309 of {'Idris.Core.TT.StringType'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E248, E249} -> (fun (V340, V341) -> case V341 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V342) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V340))} end end()); _ -> case V1 of {'Idris.Data.Vect.::', E250, E251} -> (fun (V343, V344) -> case V344 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V343)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E250, E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E248, E249)); _ -> case V1 of {'Idris.Data.Vect.::', E246, E247} -> (fun (V345, V346) -> case V346 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V345)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V1 of {'Idris.Data.Vect.::', E244, E245} -> (fun (V347, V348) -> case V348 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--castInt'(V308, V309, V347)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E244, E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E242, E243)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E278, E279} -> (fun (V349, V350) -> case V350 of {'Idris.Data.Vect.::', E280, E281} -> (fun (V351, V352) -> fun (V353) -> case V352 of {'Idris.Data.Vect.::', E282, E283} -> (fun (V354, V355) -> case V355 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', V354} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E282, E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E280, E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E278, E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E284, E285} -> (fun (V356, V357) -> fun (V358) -> case V357 of {'Idris.Data.Vect.::', E286, E287} -> (fun (V359, V360) -> case V360 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--jsCrashExp'(V359))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E286, E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E284, E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsNumberOfString'(V0) -> ('un--callFun1'(('un--esName'(<<"numberOfString"/utf8>>)), V0)).
'un--jsNameDoc'(V0) -> {'Idris.Compiler.ES.Doc.Text', ('un--jsName'(V0))}.
'un--jsName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"_"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--jsName'(V2)))))) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> ('un--jsUserName'(V3)) end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)))))) end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pat__"/utf8>>, ('un--jsName'(V6)))) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('un--jsName'(V9)) end(E7, E8)); {'Idris.Core.Name.Nested', E9, E10} -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V12, V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"n__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--jsName'(V11)))))))))))) end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); {'Idris.Core.Name.CaseBlock', E13, E14} -> (fun (V14, V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15)))))))) end(E13, E14)); {'Idris.Core.Name.WithBlock', E15, E16} -> (fun (V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V17)))))))) end(E15, E16)); {'Idris.Core.Name.Resolved', E17} -> (fun (V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fn__"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)))) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsIntOfString'(V0) -> case ('un--useBigInt'(V0)) of 1 -> fun (V1) -> ('un--jsBigIntOfString'(V1)) end; 0 -> fun (V2) -> ('un--callFun1'(('un--esName'(<<"intOfString"/utf8>>)), V2)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsIntOfDouble'(V0, V1) -> (('un--toInt'(V0))(('un--callFun1'(<<"Math.trunc"/utf8>>, V1)))).
'un--jsIntOfChar'(V0, V1) -> (('un--toInt'(V0))(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V1, {'Idris.Compiler.ES.Doc.Text', <<".codePointAt(0)"/utf8>>})))).
'un--jsIntKind'(V0) -> case V0 of {'Idris.Core.TT.IntType'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Signed', {'Idris.Core.TT.P', 32}}} end()); _ -> ('Idris.Idris2.Core.TT':'un--intKind'(V0)) end.
'un--jsIdent'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V29) -> ('nested--7461-2046--in--un--okchar'(V0, V29)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--jsCrashExp'(V0) -> ('un--callFun1'(('un--esName'(<<"crashExp"/utf8>>)), V0)).
'un--jsConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2)) end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V3)) end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4)) end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V5)), <<"n"/utf8>>)) end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6)), <<"n"/utf8>>)) end(E5)); {'Idris.Core.TT.Str', E6} -> (fun (V7) -> ('un--jsString'(V7)) end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V8) -> ('un--jsString'(('Idris.Idris2.Data.String':'un--singleton'(V8)))) end(E7)); {'Idris.Core.TT.Db', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V9)) end(E8)); {'Idris.Core.TT.WorldVal'} -> (fun () -> ('un--esName'(<<"idrisworld"/utf8>>)) end()); {'Idris.Core.TT.B8', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V10)) end(E9)); {'Idris.Core.TT.B16', E10} -> (fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11)) end(E10)); {'Idris.Core.TT.B32', E11} -> (fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end(E11)); {'Idris.Core.TT.B64', E12} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V13)), <<"n"/utf8>>)) end(E12)); {'Idris.Core.TT.IntType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.StringType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.CharType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> <<"#t"/utf8>> end()); {'Idris.Core.TT.WorldType'} -> (fun () -> <<"#t"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsCharOfInt'(V0, V1) -> ('un--callFun1'(('un--esName'(<<"truncToChar"/utf8>>)), (('un--fromInt'(V0))(V1)))).
'un--jsBigIntOfString'(V0) -> ('un--callFun1'(('un--esName'(<<"bigIntOfString"/utf8>>)), V0)).
'un--jsAnyToString'(V0) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"(\x{27}\x{27}+"/utf8>>)), V0)), {'Idris.Compiler.ES.Doc.Text', <<")"/utf8>>})).
'un--isFun'(V0) -> case V0 of {'Idris.Compiler.ES.Ast.ELam', E0, E1} -> (fun (V1, V2) -> 0 end(E0, E1)); _ -> 1 end.
'un--isArg'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Compiler.ES.Ast.ELam', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Compiler.ES.Ast.Block', E2, E3} -> (fun (V4, V5) -> 0 end(E2, E3)); {'Idris.Compiler.ES.Ast.ConSwitch', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case V6 of {'Idris.Compiler.ES.Ast.Returns'} -> (fun () -> 0 end()); _ -> 1 end end(E4, E5, E6, E7)); {'Idris.Compiler.ES.Ast.ConstSwitch', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> case V10 of {'Idris.Compiler.ES.Ast.Returns'} -> (fun () -> 0 end()); _ -> 1 end end(E8, E9, E10, E11)); {'Idris.Compiler.ES.Ast.Error', E12} -> (fun (V14) -> 0 end(E12)); _ -> 1 end end(E0, E1)); _ -> 1 end; _ -> 1 end.
'un--insertBreak'(V0, V1) -> case V0 of {'Idris.Compiler.ES.Ast.Returns'} -> (fun () -> V1 end()); {'Idris.Compiler.ES.Ast.ErrorWithout', E0} -> (fun (V2) -> case V1 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', V3, ('Idris.Idris2.Compiler.ES.Doc':'un--vcat'([V4 | [{'Idris.Compiler.ES.Doc.Text', <<"break;"/utf8>>} | []]]))} end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--function'(V0, V1, V2) -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Idris.Compiler.ES.Doc.Text', <<"function"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--app'(V0, V1)), {'Idris.Compiler.ES.Doc.SoftSpace'})), ('Idris.Idris2.Compiler.ES.Doc':'un--block'(V2)))))).
'un--fromInt'(V0) -> case ('un--useBigInt'(V0)) of 1 -> fun (V1) -> ('un--fromBigInt'(V1)) end; 0 -> fun (V2) -> V2 end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromBigInt'(V0) -> ('un--callFun1'(<<"Number"/utf8>>, V0)).
'un--foreignDecl'(V0, V1, V2, V3, V4) -> begin (V19 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Compiler.ES.State.MkESSt', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V17) -> begin (V18 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V18} end end, V4))), case V19 of {'Idris.Prelude.Types.Left', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V21) -> case ('un--searchForeign'(V21, V3)) of {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> ('un--makeForeign'(V0, V1, V2, V22, V4)) end(E13)); {'Idris.Prelude.Types.Left', E14} -> (fun (V23) -> ('Idris.Idris2.Compiler.ES.State':'un--errorConcat'([<<"No supported backend found in the definition of "/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) | [<<". "/utf8>> | [<<"Supported backends: "/utf8>> | [('un--stringList'(V21)) | [<<". "/utf8>> | [<<"Backends in definition: "/utf8>> | [('un--stringList'(V23)) | [<<"."/utf8>> | []]]]]]]]]], V4)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--foreign'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> fun (V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Core.CompileExpr.MkNmForeign', E4, E5, E6} -> (fun (V8, V9, V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Compiler.ES.Doc':'un--pretty'(V13))))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V14) -> ('un--foreignDecl'(V1, V0, V3, V8, V14)) end, V5)) end(E4, E5, E6)); _ -> {'Idris.Prelude.Types.Right', []} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', []} end end.
'un--exp'(V0, V1) -> case V1 of {'Idris.Compiler.ES.Ast.EMinimal', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', ('un--minimal'(V2))} end end(E0)); {'Idris.Compiler.ES.Ast.ELam', E1, E2} -> (fun (V4, V5) -> fun (V6) -> case V5 of {'Idris.Compiler.ES.Ast.Return', E5} -> (fun (V7) -> case V7 of {'Idris.Compiler.ES.Ast.ECon', E8, E9, E10} -> (fun (V8, V9, V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E11} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--lambdaArgs'(V4)), ('Idris.Idris2.Compiler.ES.Doc':'un--paren'(V13))))} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--exp'(V0, V7)), V6)) end(E8, E9, E10)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--lambdaArgs'(V4)), V16))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--exp'(V0, V7)), V6)) end end(E5)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E3} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('un--lambdaArgs'(V4)), ('Idris.Idris2.Compiler.ES.Doc':'un--block'(V19))))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--stmt'({'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.Ast.Returns'}}, V0, V5)), V6)) end end end(E1, E2)); {'Idris.Compiler.ES.Ast.EApp', E13, E14} -> (fun (V20, V21) -> fun (V22) -> begin (V23 = (('un--exp'(V0, V20))(V22))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> ('un--exp'(V0, V26)) end, V21, [], V22))), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', ('un--app'(V25, V29))} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14)); {'Idris.Compiler.ES.Ast.ECon', E19, E20, E21} -> (fun (V30, V31, V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> {'Idris.Prelude.Types.Right', ('un--applyCon'(V31, V30, V36))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V37) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V38) -> ('un--exp'(V0, V38)) end, V32, [], V37)) end, V33)) end end(E19, E20, E21)); {'Idris.Compiler.ES.Ast.EOp', E24, E25} -> (fun (V39, V40) -> fun (V41) -> begin (V43 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V42) -> ('un--exp'(V0, V42)) end, V40, V41))), case V43 of {'Idris.Prelude.Types.Left', E26} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V45) -> (('un--jsOp'(V39, V45))(V41)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25)); {'Idris.Compiler.ES.Ast.EExtPrim', E28, E29} -> (fun (V46, V47) -> fun (V48) -> begin (V50 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V49) -> ('un--exp'(V0, V49)) end, V47, [], V48))), case V50 of {'Idris.Prelude.Types.Left', E30} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V52) -> (('un--jsPrim'(V0, V46, V52))(V48)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29)); {'Idris.Compiler.ES.Ast.EPrimVal', E32} -> (fun (V53) -> fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Doc.Text', ('un--jsConstant'(V53))}} end end(E32)); {'Idris.Compiler.ES.Ast.EErased'} -> (fun () -> fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.Doc.Text', <<"undefined"/utf8>>}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--esName'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, V0)).
'un--def'(V0, V1, V2) -> case V1 of {'Idris.Compiler.ES.TailRec.MkFunction', E0, E1, E2} -> (fun (V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Compiler.ES.State':'un--reset'(V0, V2))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V0, V3, V2))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> fun (V13) -> ('Idris.Idris2.Compiler.ES.State':'un--registerLocal'(V0, V12, V13)) end end, V4, [], V2))), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> begin (V31 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Right', case V19 of {'Idris.Compiler.ES.State.MkESSt', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V20 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V29) -> begin (V30 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V30} end end, V2))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> begin (V37 = begin (V34 = (('Idris.Idris2.Compiler.ES.ToAst':'un--stmt'(V0, {'Idris.Compiler.ES.Ast.Returns'}, V5))(V2))), case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> (('un--stmt'({'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.Ast.Returns'}}, V0, V36))(V2)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V37 of {'Idris.Prelude.Types.Left', E24} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V39) -> case V16 of [] -> {'Idris.Prelude.Types.Right', ('un--printDoc'(V33, ('un--constant'(('un--var'(V11)), ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"__lazy("/utf8>>)), ('un--function'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--neutral_Monoid_Doc'()), [], V39)))), {'Idris.Compiler.ES.Doc.Text', <<")"/utf8>>}))))))}; _ -> {'Idris.Prelude.Types.Right', ('un--printDoc'(V33, ('un--function'(('un--var'(V11)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V40) -> ('un--var'(V40)) end, V16)), V39))))} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constant'(V0, V1) -> ('Idris.Idris2.Compiler.ES.Doc':'un--<++>'({'Idris.Compiler.ES.Doc.Text', <<"const"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V0, ('Idris.Idris2.Compiler.ES.Doc':'un--softEq'()))), V1)), {'Idris.Compiler.ES.Doc.Text', <<";"/utf8>>})))).
'un--conTags'(V0) -> ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V1) -> fun (V2) -> ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"a"/utf8>>} | [{'Idris.Compiler.ES.Doc.Text', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1))} | [('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()) | [V2 | []]]]])) end end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V0)))), V0)).
'un--compileToES'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V0, 0, 0, V2, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--getDirectives'(V0, V1, V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V21 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V13, V14)) end end}, <<"minimal"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('Idris.Idris2.Builtin':'un--snd'(V15)) end, V10)))) of 1 -> 2; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V18, V19)) end end}, <<"compact"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'(V20)) end, V10)))) of 1 -> 1; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V24 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.ES.State.ESs'}, ('Idris.Idris2.Compiler.ES.State':'un--init'(V21, fun (V22) -> ('un--isArg'(V21, V22)) end, fun (V23) -> ('un--isFun'(V23)) end, V3)), V4))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Compiler.ES.State':'un--addRef'(V26, ('un--tailRec'()), {'Idris.Compiler.ES.Ast.VName', ('un--tailRec'())}, V4))), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> begin (V40 = [{'Idris.Builtin.MkPair', ('un--mainExpr'()), {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.CompileExpr.MkNmFun', [], ('Idris.Idris2.Core.CompileExpr':'un--forget'([], case V7 of {'Idris.Compiler.Common.MkCompileData', E8, E9, E10, E11, E12} -> (fun (V30, V31, V32, V33, V34) -> V30 end(E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}}} | case V7 of {'Idris.Compiler.Common.MkCompileData', E13, E14, E15, E16, E17} -> (fun (V35, V36, V37, V38, V39) -> V36 end(E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end]), begin (V41 = ('Idris.Idris2.Compiler.ES.TailRec':'un--functions'(('un--tailRec'()), V40))), begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V42) -> fun (V43) -> ('un--def'(V26, V42, V43)) end end, V41, [], V4))), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V80 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V47) -> case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V65, V66, V67, V68)) end end end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V73, V74, V75)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V76, V77)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V49))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V78) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V79) -> ('un--foreign'(V26, V0, V79)) end, V40, [], V78)) end, V4))), case V80 of {'Idris.Prelude.Types.Left', E22} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V82) -> begin (V87 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V83) -> case V83 of {'Idris.Prelude.Types.Left', E24} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V85) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Doc':'un--compact'(('un--var'(V85))))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V86) -> ('Idris.Idris2.Compiler.ES.State':'un--getOrRegisterRef'(V26, ('un--mainExpr'()), V86)) end, V4))), case V87 of {'Idris.Prelude.Types.Left', E26} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V89) -> begin (V90 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"try{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V89, <<"()}catch(e){if(e instanceof IdrisError){console.log(\x{27}ERROR: \x{27} + e.message)}else{throw e} }"/utf8>>))))), begin (V91 = ('Idris.Idris2.Data.String':'un--fastUnlines'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V82, V46))))), begin (V93 = begin (V92 = ('erlang':'get'(V26))), {'Idris.Prelude.Types.Right', V92} end), case V93 of {'Idris.Prelude.Types.Left', E28} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V95) -> begin (V96 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"js/support.js"/utf8>>, V4))), case V96 of {'Idris.Prelude.Types.Left', E30} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V98) -> begin (V108 = ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, [V98 | ('Idris.Idris2.Libraries.Data.SortedMap':'un--values'(case V95 of {'Idris.Compiler.ES.State.MkESSt', E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V106 end(E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.String':'un--fastUnlines'([V108 | [V91 | [V90 | []]]]))} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--castInt'(V0, V1, V2) -> ('case--castInt-3185'(V2, V1, V0, {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V0, ('un--jsIntKind'(V0))}, {'Idris.Builtin.MkPair', V1, ('un--jsIntKind'(V1))}})).
'un--callFun1'(V0, V1) -> ('un--callFun'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V1)))).
'un--callFun'(V0, V1) -> ('un--app'({'Idris.Compiler.ES.Doc.Text', V0}, V1)).
'un--breakDrop1'(V0, V1) -> case ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V0)) end, V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', V3, ('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'((1 + 0), V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--boundedUIntOp'(V0, V1, V2, V3) -> ('un--boundedOp'(<<"u"/utf8>>, V0, V1, V2, V3)).
'un--boundedOp'(V0, V1, V2, V3, V4) -> ('un--callFun'(('Idris.Idris2.Prelude.Types':'un--fastConcat'([<<"_"/utf8>> | [V2 | [('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) | [V0 | []]]]])), [V3 | [V4 | []]])).
'un--boundedIntOp'(V0, V1, V2, V3) -> ('un--boundedOp'(<<"s"/utf8>>, V0, V1, V2, V3)).
'un--boolOp'(V0, V1, V2) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"("/utf8>>)), ('un--binOp'(V0, V1, V2)))), {'Idris.Compiler.ES.Doc.Text', <<"?1:0)"/utf8>>})).
'un--binOp'(V0, V1, V2) -> ('Idris.Idris2.Compiler.ES.Doc':'un--hcat'([{'Idris.Compiler.ES.Doc.Text', <<"("/utf8>>} | [V1 | [{'Idris.Compiler.ES.Doc.Text', V0} | [V2 | [{'Idris.Compiler.ES.Doc.Text', <<")"/utf8>>} | []]]]]])).
'un--arithOp'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> case V3 of {'Idris.Core.TT.Signed', E1} -> (fun (V5) -> fun (V6) -> case V5 of {'Idris.Core.TT.P', E2} -> (fun (V7) -> ('un--boundedIntOp'(V7, V2, V4, V6)) end(E2)); _ -> ('un--binOp'(V1, V4, V6)) end end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V8) -> fun (V9) -> ('un--boundedUIntOp'(V8, V2, V4, V9)) end end(E3)); _ -> fun (V10) -> ('un--binOp'(V1, V4, V10)) end end end end(E0)); _ -> fun (V11) -> fun (V12) -> ('un--binOp'(V1, V11, V12)) end end end.
'un--applyObj'(V0) -> ('un--applyList'({'Idris.Compiler.ES.Doc.Text', <<"{"/utf8>>}, {'Idris.Compiler.ES.Doc.Text', <<"}"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'un--softComma'()), V0)).
'un--applyList'(V0, V1, V2, V3) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V0, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V19, V20, V21, V22)) end end end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V27, V28, V29)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V30) -> fun (V31) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V30, V31)) end end, ('Idris.Idris2.Compiler.ES.Doc':'dn--un--neutral_Monoid_Doc'())}}, ('Idris.Idris2.Data.List':'un--intersperse'(V2, V3)))))), V1)).
'un--applyCon'(V0, V1, V2) -> case V0 of 2 -> case V2 of [] -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"{h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), {'Idris.Compiler.ES.Doc.Text', <<"0}"/utf8>>})); _ -> ('un--applyObj'([('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), ('un--tag2es'(V1)))) | ('un--conTags'(V2))])) end; 5 -> case V2 of [] -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"{h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), {'Idris.Compiler.ES.Doc.Text', <<"0}"/utf8>>})); _ -> ('un--applyObj'([('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), ('un--tag2es'(V1)))) | ('un--conTags'(V2))])) end; 3 -> ('un--applyObj'(('un--conTags'(V2)))); 6 -> ('un--applyObj'(('un--conTags'(V2)))); 7 -> ('un--applyObj'(('un--conTags'(V2)))); _ -> ('un--applyObj'([('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(('Idris.Idris2.Compiler.ES.Doc':'dn--un--fromString_FromString_Doc'(<<"h"/utf8>>)), ('Idris.Idris2.Compiler.ES.Doc':'un--softColon'()))), ('un--tag2es'(V1)))) | ('un--conTags'(V2))])) end.
'un--app'(V0, V1) -> ('Idris.Idris2.Compiler.ES.Doc':'dn--un--<+>_Semigroup_Doc'(V0, ('un--applyList'({'Idris.Compiler.ES.Doc.Text', <<"("/utf8>>}, {'Idris.Compiler.ES.Doc.Text', <<")"/utf8>>}, ('Idris.Idris2.Compiler.ES.Doc':'un--softComma'()), V1)))).
