-module('Idris.Idris2.TTImp.Interactive.GenerateDef').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--propBindableUsed-3917'/2,
  'case--case block in case block in expandClause-2558'/16,
  'nested--10516-2887--in--un--valid'/9,
  'nested--10010-2450--in--un--updateRHS'/9,
  'nested--10516-2889--in--un--updateLHS'/10,
  'nested--9965-2404--in--un--mkUniqueName'/6,
  'nested--11603-3831--in--un--getProp'/2,
  'nested--10516-2888--in--un--fixNames'/9,
  'nested--10010-2451--in--un--dropLams'/9,
  'un--uniqueRHS'/3,
  'un--trySplit'/9,
  'un--tryAllSplits'/7,
  'un--splittableNames'/1,
  'un--propBindableUsed'/1,
  'un--mostUsed'/2,
  'un--mkSplits'/7,
  'un--makeDefSort'/8,
  'un--makeDefN'/7,
  'un--makeDefFromType'/9,
  'un--makeDef'/6,
  'un--generateSplits'/8,
  'un--fnName'/2,
  'un--expandClause'/8,
  'un--collectClauses'/4,
  'un--bindableUsed'/1
]).
'case--propBindableUsed-3917'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V2, 0)) of 1 -> 1.0; 0 -> ('Idris.Idris2.Prelude.Num':'dn--un--/_Fractional_Double'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Double'(V3)), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Double'(V2)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in expandClause-2558'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Meta', E0, E1, E2, E3} -> (fun (V16, V17, V18, V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V54 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Idris.Core.Name.Resolved', V18}, case V23 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V24 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15))), case V54 of {'Idris.Prelude.Types.Left', E36} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V56) -> case V56 of {'Idris.Prelude.Types.Just', E38} -> (fun (V57) -> case V57 of {'Idris.Core.Context.Context.Hole', E39, E40} -> (fun (V58, V59) -> begin (V66 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.generate"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expression search for "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V61, V62)) end end}, {'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V64, V65)) end end}}, {'Idris.Builtin.MkPair', V17, V18})))) end, V15))), case V66 of {'Idris.Prelude.Types.Left', E41} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--exprSearchOpts'(V0, V6, V5, V3, V4, {'Idris.Core.Name.Resolved', V18}, [], V15))), case V69 of {'Idris.Prelude.Types.Left', E43} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V71) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--traverse'(fun (V72) -> begin (V73 = ('nested--10010-2451--in--un--dropLams'(V0, V1, V2, V3, V4, V5, V6, V58, V72))), fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V9, V0, <<"interaction.generate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Got clause"/utf8>> end, V12, V11, V74))), case V75 of {'Idris.Prelude.Types.Left', E45} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V77) -> begin (V81 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.generate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"        = "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V78)) end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V79, V80)) end end}, V73)))) end, V74))), case V81 of {'Idris.Prelude.Types.Left', E47} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V83) -> {'Idris.Prelude.Types.Right', [('nested--10010-2450--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V73)) | []]} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V71, V15)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V4, <<"No searchable hole on RHS"/utf8>>}, V15)) end end(E38)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V4, <<"No searchable hole on RHS"/utf8>>}, V15)) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V4, <<"No searchable hole on RHS"/utf8>>}, V15)) end.
'nested--10516-2887--in--un--valid'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.Interactive.CaseSplit.Valid', E0, E1} -> (fun (V9, V10) -> {'Idris.Prelude.Types.Just', V10} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--10010-2450--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.PatClause', V9, V10, V8} end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V12, V13, V14, V15, V16, V17) -> {'Idris.TTImp.TTImp.WithClause', V12, V13, V14, V15, V16, V17} end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V18, V19) -> {'Idris.TTImp.TTImp.ImpossibleClause', V18, V19} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10516-2889--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V10, V11) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V11, V8)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.TTImp.TTImp.IVar', V10, V11} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V16) -> ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V16)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V17, V18) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V21, V22)) end end}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V18}}, V8)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.TTImp.TTImp.IBindVar', V17, V18} end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V23) -> ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V23)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); {'Idris.TTImp.TTImp.IApp', E6, E7, E8} -> (fun (V24, V25, V26) -> {'Idris.TTImp.TTImp.IApp', V24, ('nested--10516-2889--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V25)), ('nested--10516-2889--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V26))} end(E6, E7, E8)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V27, V28, V29) -> {'Idris.TTImp.TTImp.IAutoApp', V27, ('nested--10516-2889--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V28)), ('nested--10516-2889--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V29))} end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E12, E13, E14, E15} -> (fun (V30, V31, V32, V33) -> {'Idris.TTImp.TTImp.INamedApp', V30, ('nested--10516-2889--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V31)), V32, ('nested--10516-2889--in--un--updateLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V33))} end(E12, E13, E14, E15)); _ -> V9 end.
'nested--9965-2404--in--un--mkUniqueName'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.TTImp.TTImp.IHole', E0, E1} -> (fun (V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.TTImp.Utils':'un--uniqueName'(V11, [], V7, V5))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IHole', V6, V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', V4} end.
'nested--11603-3831--in--un--getProp'(V0, V1) -> case V1 of [] -> {'Idris.Builtin.MkPair', 0, 0}; [E0 | E1] -> (fun (V2, V3) -> case ('nested--11603-3831--in--un--getProp'(V0, V3)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case ('un--bindableUsed'(V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Builtin.MkPair', V4, V5} end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V4, ('Idris.Idris2.Prelude.Types.List':'un--length'(('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V7)))))), ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V5, ('Idris.Idris2.Prelude.Types.List':'un--length'(('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, V8))))))} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Core.Name.UN', E2} -> (fun (V11) -> case V11 of {'Idris.Core.Name.Basic', E3} -> (fun (V12) -> {'Idris.TTImp.TTImp.IBindVar', V9, V12} end(E3)); _ -> V8 end end(E2)); {'Idris.Core.Name.MN', E4, E5} -> (fun (V13, V14) -> {'Idris.TTImp.TTImp.Implicit', V9, 1} end(E4, E5)); _ -> V8 end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E6, E7, E8} -> (fun (V15, V16, V17) -> {'Idris.TTImp.TTImp.IApp', V15, ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V16)), ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V17))} end(E6, E7, E8)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V18, V19, V20) -> {'Idris.TTImp.TTImp.IAutoApp', V18, ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V19)), ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V20))} end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E12, E13, E14, E15} -> (fun (V21, V22, V23, V24) -> {'Idris.TTImp.TTImp.INamedApp', V21, ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V22)), V23, ('nested--10516-2888--in--un--fixNames'(V0, V1, V2, V3, V4, V5, V6, V7, V24))} end(E12, E13, E14, E15)); _ -> V8 end.
'nested--10010-2451--in--un--dropLams'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of 0 -> V8; _ -> begin (V9 = (V7 - 1)), case V8 of {'Idris.TTImp.TTImp.ILam', E0, E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14, V15) -> ('nested--10010-2451--in--un--dropLams'(V0, V1, V2, V3, V4, V5, V6, V9, V15)) end(E0, E1, E2, E3, E4, E5)); _ -> V8 end end end.
'un--uniqueRHS'(V0, V1, V2) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V3, V4, V5) -> begin (V6 = ('nested--9965-2404--in--un--mkUniqueName'(V5, V4, V3, V0, V5, V2))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V3, V4, V8}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'un--trySplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getSplitsLHS'(V0, V1, V2, V3, 0, V5, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.TTImp.Interactive.CaseSplit.OK', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> {'Idris.TTImp.TTImp.PatClause', V3, ('nested--10516-2889--in--un--updateLHS'(V7, V6, V5, V4, V3, V2, V1, V0, V13, V4)), V6} end, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V14) -> ('nested--10516-2887--in--un--valid'(V7, V6, V5, V4, V3, V2, V1, V0, V14)) end, V12))))}} end(E2)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, []}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tryAllSplits'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V7)) end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of [] -> ('un--tryAllSplits'(V0, V1, V2, V3, V4, V5, V9)); _ -> fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.generate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Splitting on "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)))) end, V12))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> (('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--trySearch'(V0, V2, fun (V16) -> begin (V18 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V17) -> ('un--mkSplits'(V0, V1, V2, V3, V4, V5, V17)) end, V11, [], V16))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> ('un--collectClauses'(V0, V2, V20, V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, ('un--tryAllSplits'(V0, V1, V2, V3, V4, V5, V9))))(V12)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--splittableNames'(V0) -> case V0 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--splittableNames'(V2)), [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V5}} | []])) end(E3, E4)); _ -> ('un--splittableNames'(V2)) end end(E0, E1, E2)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V6, V7, V8) -> ('un--splittableNames'(V7)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> ('un--splittableNames'(V10)) end(E8, E9, E10, E11)); _ -> [] end.
'un--propBindableUsed'(V0) -> ('case--propBindableUsed-3917'(V0, ('nested--11603-3831--in--un--getProp'(V0, V0)))).
'un--mostUsed'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Double'(('un--propBindableUsed'(V1)), ('un--propBindableUsed'(V0)))).
'un--mkSplits'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--trySearch'(V0, V2, fun (V7) -> case case V4 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V15 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V7)); 0 -> ('un--expandClause'(V0, V1, V2, V3, V4, V5, V6, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> begin (V19 = ('un--generateSplits'(V1, V0, V2, V3, V4, V5, V6, V18))), case V19 of {'Idris.Prelude.Types.Left', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V21) -> begin (V73 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.generate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Splits: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V24, V25)) end end}, {'Idris.Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V28)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V29, V30)) end end}, V27)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V34, V35)) end end}, V31, V32)) end end}, V26)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V38) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V40, V41)) end end}, V38)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V45, V46)) end end}, V42, V43)) end end}, V36, V37)) end end}}, V22)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V50, V51)) end end}, {'Idris.Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V53) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V55, V56)) end end}, V53)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V60, V61)) end end}, V57, V58)) end end}, V52)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V66, V67)) end end}, V64)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V71, V72)) end end}, V68, V69)) end end}, V62, V63)) end end}}, V47, V48)) end end}, V21)))) end, V18))), case V73 of {'Idris.Prelude.Types.Left', E12} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V75) -> (('un--tryAllSplits'(V0, V1, V2, V3, case V4 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V76, V77, V78, V79, V80, V81, V82, 0, 1, V85} end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V21))(V18)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)).
'un--makeDefSort'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--searchSort'(V0, V2, V4, fun (V8) -> ('un--makeDef'(V0, V1, V2, V3, V6, V8)) end, fun (V9) -> fun (V10) -> ((V5(('Idris.Idris2.Builtin':'un--snd'(V9))))(('Idris.Idris2.Builtin':'un--snd'(V10)))) end end, V7)).
'un--makeDefN'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--searchN'(V0, V2, V4, fun (V7) -> ('un--makeDef'(V0, V1, V2, V3, V5, V7)) end, V6))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Right', V11} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--makeDefFromType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'(V0, V2, fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V24 = begin (V21 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, [], V12, {'Idris.Core.Env.Nil'}, V7))(V9))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> (('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getEnvArgNames'(V0, V12, V6, V23))(V9)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Data.List':'un--replicate'(V6, {'Idris.TTImp.TTImp.Implicit', V3, 1}))), begin (V28 = ('Idris.Idris2.TTImp.Utils':'un--uniqueName'(V12, [], ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fnName'(0, V5)), <<"_rhs"/utf8>>)), V9))), case V28 of {'Idris.Prelude.Types.Left', E10} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V30) -> begin (V32 = {'Idris.TTImp.TTImp.PatClause', V3, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V3, V5}, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V27, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> {'Idris.TTImp.TTImp.IBindVar', V3, V31} end, V26)))))), {'Idris.TTImp.TTImp.IHole', V3, V30}}), case ('Idris.Idris2.Core.Context':'un--getNameID'(V5, case V12 of {'Idris.Core.Context.MkDefs', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V33 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E12} -> (fun (V63) -> begin (V64 = (('un--mkSplits'(V0, V1, V2, V3, V4, V63, V32))(V9))), case V64 of {'Idris.Prelude.Types.Left', E13} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V66) -> begin (V68 = begin (V67 = ('erlang':'put'(V0, V12))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E15} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V70) -> begin (V72 = begin (V71 = ('erlang':'put'(V1, V16))), {'Idris.Prelude.Types.Right', V71} end), case V72 of {'Idris.Prelude.Types.Left', E17} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V74) -> begin (V76 = begin (V75 = ('erlang':'put'(V2, V20))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E19} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V78) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.Interactive.ExprSearch':'dn--un--map_Functor_Search'(fun (V79) -> {'Idris.Builtin.MkPair', V3, V79} end, V66))} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V3, V5, V9)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V80) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V80)) end, V8)).
'un--makeDef'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Metadata':'un--findTyDeclAt'(V1, V3, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V14, V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V12, V5))), case V16 of {'Idris.Prelude.Types.Left', E9} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"interaction.generate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Searching for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)))) end, V15, V5))), case V19 of {'Idris.Prelude.Types.Left', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V21) -> begin (V37 = case ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--initSearchOpts'(1, (1 + (1 + (1 + (1 + (1 + 0))))))) of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', V22, V23, V24, V25, V26, V27, V28, V29, V30, {'Idris.Prelude.Types.Just', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('un--makeDefFromType'(V0, V1, V2, ('Idris.Idris2.Core.FC':'un--justFC'(V10)), V32, V33, V34, V35, V36)) end end end end end}} end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--makeDefFromType'(V0, V1, V2, ('Idris.Idris2.Core.FC':'un--justFC'(V10)), V37, V18, V14, V15, V5)) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--generateSplits'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.TTImp.TTImp.ImpossibleClause', E0, E1} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', []} end(E0, E1)); {'Idris.TTImp.TTImp.WithClause', E2, E3, E4, E5, E6, E7} -> (fun (V10, V11, V12, V13, V14, V15) -> {'Idris.Prelude.Types.Right', []} end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.PatClause', E8, E9, E10} -> (fun (V16, V17, V18) -> begin (V23 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V1, V0, V2, V5, {'Idris.TTImp.Elab.Check.InLHS', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, [], [], {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IBindHere', V3, {'Idris.TTImp.TTImp.PATTERN'}, V17}, {'Idris.Prelude.Types.Nothing'}))(V7))), case V23 of {'Idris.Prelude.Types.Left', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V26, V27) -> begin (V38 = case case V4 of {'Idris.TTImp.Interactive.ExprSearch.MkSearchOpts', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V34 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--splittableNames'(V17)); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('un--splittableNames'(V17)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V39) -> fun (V40) -> ('un--trySplit'(V0, V1, V2, V16, V17, V26, V18, V39, V40)) end end, V38, [], V7)) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fnName'(V0, V1) -> case V1 of {'Idris.Core.Name.UN', E0} -> (fun (V2) -> case V2 of {'Idris.Core.Name.Basic', E1} -> (fun (V3) -> case ('Idris.Idris2.Parser.Lexer.Common':'un--isIdentNormal'(V3)) of 1 -> V3; 0 -> case V0 of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<")"/utf8>>)))); 0 -> <<"op"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end end(E0)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> ('un--fnName'(V0, V5)) end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V6, V7) -> V6 end(E4, E5)); _ -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V1)) end.
'un--expandClause'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--uniqueRHS'(V0, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V15 = ('Idris.Idris2.TTImp.ProcessDef':'un--checkClause'([], V0, V1, V2, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 0, 2, 0, V5, [], [], {'Idris.Core.Env.Nil'}, V10, V7))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> case V17 of {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V19 = {'Idris.Prelude.Types.Right', V18}), case V18 of {'Idris.Core.Context.Context.MkClause', E5, E6, E7, E8} -> (fun (V20, V21, V22, V23) -> begin (V24 = {'Idris.Core.Context.Context.MkClause', V20, V21, V22, V23}), ('case--case block in case block in expandClause-2558'(V0, V6, V5, V4, V3, V2, V1, V10, V19, V20, V23, V22, V21, V24, ('Idris.Idris2.Core.TT':'un--getFn'(V23)), V7)) end end(E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Left', E9} -> (fun (V25) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--noResult'(V7)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--collectClauses'(V0, V1, V2, V3) -> case V2 of [] -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--one'([], V3)); [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('un--collectClauses'(V0, V1, V5, V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--combine'(V0, V1, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V9, V10)) end end, V4, V8, V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindableUsed'(V0) -> case V0 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V1, V2, V3) -> begin (V4 = ('Idris.Idris2.TTImp.Utils':'un--findIBindVars'(V2))), begin (V5 = ('Idris.Idris2.TTImp.Utils':'un--findAllNames'([], V3))), {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, ('Idris.Idris2.Data.List':'un--filter'(fun (V6) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, V6, V4)) end, V5))}} end end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
