-module('Idris.Idris2.TTImp.Elab.Case').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkCase,guessScrType-12622'/19,
  'nested--10140-10135--in--un--usedIn'/17,
  'nested--10140-10138--in--un--updateClause'/21,
  'nested--10140-10133--in--un--replace'/19,
  'nested--10140-10136--in--un--nestLHS'/18,
  'nested--10140-10134--in--un--mkSplit'/19,
  'nested--12834-12356--in--un--guessScrType'/15,
  'nested--12834-12355--in--un--getRetTy'/17,
  'nested--10004-10014--in--un--getNameFrom'/8,
  'nested--10140-10131--in--un--getBindName'/19,
  'nested--10004-10013--in--un--getArg'/9,
  'nested--12834-12353--in--un--checkConcrete'/16,
  'nested--12834-12354--in--un--applyTo'/17,
  'nested--10140-10137--in--un--applyNested'/18,
  'nested--10140-10132--in--un--addEnv'/20,
  'un--updateMults'/2,
  'un--toRig1'/2,
  'un--toRig0'/2,
  'un--getNestData'/1,
  'un--findScrutinee'/3,
  'un--findImpsIn'/5,
  'un--explicitPi'/1,
  'un--checkCase'/15,
  'un--changeVar'/3,
  'un--caseBlock'/17,
  'un--bindCaseLocals'/4,
  'un--allow'/2
]).
'case--checkCase,guessScrType-12622'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V56 = ('Idris.Idris2.Core.Context':'un--lookupTyName'(V20, case V25 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V26 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V21))), case V56 of {'Idris.Prelude.Types.Left', E34} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V58) -> case V58 of [E36 | E37] -> (fun (V59, V60) -> case V59 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V61, V62) -> case V62 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V63, V64) -> case V60 of [] -> begin (V68 = begin (V65 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V13, [], V25, {'Idris.Core.Env.Nil'}, V64))(V21))), case V65 of {'Idris.Prelude.Types.Left', E42} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V67) -> ('nested--12834-12355--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25, V67, V21)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V68 of {'Idris.Prelude.Types.Left', E44} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V70) -> case V70 of {'Idris.Prelude.Types.Just', E46} -> (fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V72, V73) -> (('nested--12834-12354--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25, {'Idris.TTImp.TTImp.IVar', V5, V72}, V73))(V21)) end(E47, E48)); _ -> (('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E46)); _ -> (('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> (('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E40, E41)); _ -> (('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E38, E39)); _ -> (('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E36, E37)); _ -> (('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end.
'nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.TTImp.TTImp.IBindVar', E0, E1} -> (fun (V17, V18) -> [{'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V18}} | []] end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20)), ('nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21)))) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAs', E5, E6, E7, E8, E9} -> (fun (V22, V23, V24, V25, V26) -> [V25 | ('nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V26))] end(E5, E6, E7, E8, E9)); {'Idris.TTImp.TTImp.IAlternative', E10, E11, E12} -> (fun (V27, V28, V29) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V41)) end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V45, V46, V47, V48)) end end end end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V50)) end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V53, V54, V55)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V56, V57)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V58) -> ('nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V58)) end, V29)) end(E10, E11, E12)); _ -> [] end.
'nested--10140-10138--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V21, V22, V23) -> case ('nested--10140-10132--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V22)))) of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V24, V25) -> begin (V26 = ('nested--10140-10134--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V22, V25))), begin (V27 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V21, V16}, V26))), {'Idris.TTImp.TTImp.PatClause', V21, ('nested--10140-10137--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V27)), ('un--bindCaseLocals'(V21, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> ('un--getNestData'(V28)) end, V18)), V24, V23))} end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E5, E6, E7, E8, E9, E10} -> (fun (V29, V30, V31, V32, V33, V34) -> case ('nested--10140-10132--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V30)))) of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V35, V36) -> begin (V37 = ('nested--10140-10134--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V30, V36))), begin (V38 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V29, V16}, V37))), {'Idris.TTImp.TTImp.WithClause', V29, ('nested--10140-10137--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V38)), V31, V32, V33, V34} end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9, E10)); {'Idris.TTImp.TTImp.ImpossibleClause', E13, E14} -> (fun (V39, V40) -> case ('nested--10140-10132--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--10140-10135--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V40)))) of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V41, V42) -> begin (V43 = ('nested--10140-10134--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V40, V42))), begin (V44 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V39, V16}, V43))), {'Idris.TTImp.TTImp.ImpossibleClause', V39, ('nested--10140-10137--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V44))} end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10140-10133--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of 0 -> case V18 of [E2 | E3] -> (fun (V19, V20) -> begin (V26 = case V19 of {'Idris.TTImp.TTImp.IAs', E4, E5, E6, E7, E8} -> (fun (V21, V22, V23, V24, V25) -> {'Idris.TTImp.TTImp.IAs', V21, V22, V23, V24, V17} end(E4, E5, E6, E7, E8)); _ -> V17 end), [V26 | V20] end end(E2, E3)); _ -> V18 end; _ -> begin (V27 = (V16 - 1)), case V18 of [E0 | E1] -> (fun (V28, V29) -> [V28 | ('nested--10140-10133--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V27, V17, V29))] end(E0, E1)); _ -> V18 end end end.
'nested--10140-10136--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V22, V23) -> {'Idris.Builtin.MkPair', V18, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V16, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V18 end, V20))}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> {'Idris.TTImp.TTImp.Implicit', V16, 0} end, V22))))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10140-10134--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.List':'un--reverse'([V17 | V18])) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types.List':'un--reverse'(('nested--10140-10133--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V17, V18)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V5, 0}} end; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.TTImp.TTImp.PatClause', E2, E3, E4} -> (fun (V18, V19, V20) -> ('case--checkCase,guessScrType-12622'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, V20, V19, V17, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V19)))) end(E2, E3, E4)); _ -> ('nested--12834-12356--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12834-12355--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V17, V18, V19, V20) -> case V19 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V21, V22, V23, V24) -> begin (V25 = (((V20(V14))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V17, 0}))))(V16))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> ('nested--12834-12355--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V27, V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V28, V29, V30, V31, V32) -> begin (V63 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V29, case V14 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V33 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16))), case V63 of {'Idris.Prelude.Types.Left', E45} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V65) -> case V65 of {'Idris.Prelude.Types.Just', E47} -> (fun (V66) -> begin (V67 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V13, [], V14, {'Idris.Core.Env.Nil'}, V66))(V16))), case V67 of {'Idris.Prelude.Types.Left', E48} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V29, V69}}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13, E14)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end.
'nested--10004-10014--in--un--getNameFrom'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('nested--10004-10013--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V5, V7)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> V8 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10140-10131--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Core.Name.UN', E0} -> (fun (V19) -> begin (V20 = {'Idris.Core.Name.UN', V19}), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V23, V24)) end end}, V20, V18)) of 1 -> {'Idris.Builtin.MkPair', V20, {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'un--displayUserName'(V19)), V16}}; 0 -> {'Idris.Builtin.MkPair', V20, V20}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, V17, V18)) of 1 -> {'Idris.Builtin.MkPair', V17, {'Idris.Core.Name.MN', <<"_cn"/utf8>>, V16}}; 0 -> {'Idris.Builtin.MkPair', V17, V17}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--10004-10013--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V8 of 0 -> {'Idris.Prelude.Types.Just', V12}; _ -> case V8 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V13 = (V8 - 1)), ('nested--10004-10013--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V10, V13)) end end end end(E2, E3)); _ -> case V8 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V14 = (V8 - 1)), ('nested--10004-10013--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V10, V14)) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12834-12353--in--un--checkConcrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V5, <<"Can\x{27}t infer type for case scrutinee"/utf8>>}, V15)) end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'nested--12834-12354--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V17, V18, V19, V20) -> fun (V21) -> case V19 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V26 = (((V20(V14))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V17, 0}))))(V21))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> (('nested--12834-12354--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.TTImp.TTImp.IApp', V17, V15, {'Idris.TTImp.TTImp.Implicit', V17, 0}}, V28))(V21)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V29 = (((V20(V14))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 0}))))(V21))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> (('nested--12834-12354--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.TTImp.TTImp.INamedApp', V5, V15, V18, {'Idris.TTImp.TTImp.Implicit', V5, 0}}, V31))(V21)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', V15} end end end(E0, E1, E2, E3)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', V15} end end.
'nested--10140-10137--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V18 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V17))), ('Idris.Idris2.TTImp.Utils':'un--substNames'([], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('nested--10140-10136--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V19)) end, V16)), V17)) end.
'nested--10140-10132--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V16 of [] -> case V18 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Builtin.MkPair', [], []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V20, V21) -> case V18 of {'Idris.Core.Env.::', E2, E3} -> (fun (V22, V23) -> begin (V24 = ('nested--10140-10131--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V20, V19))), case ('nested--10140-10132--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21, ((V17 + 1) rem 9223372036854775808), V23, [('Idris.Idris2.Builtin':'un--snd'(V24)) | V19])) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V25, V26) -> begin (V27 = [V24 | V25]), {'Idris.Builtin.MkPair', V27, [{'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, ('Idris.Idris2.Builtin':'un--snd'(V24)), {'Idris.TTImp.TTImp.Implicit', V9, 1}} | V26]} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateMults'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--updateMults'(V3, ('un--toRig0'(V2, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toRig1'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V2, V3) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V10, V11)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V2)))) of 1 -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V2, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), V3}; 0 -> {'Idris.Core.Env.::', V2, V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V16 = (V0 - 1)), case V1 of {'Idris.Core.Env.::', E0, E1} -> (fun (V17, V18) -> {'Idris.Core.Env.::', V17, ('un--toRig1'(V16, V18))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--toRig0'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V2, V3) -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), V3} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V8 = (V0 - 1)), case V1 of {'Idris.Core.Env.::', E0, E1} -> (fun (V9, V10) -> {'Idris.Core.Env.::', V9, ('un--toRig0'(V8, V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--getNestData'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, V5}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findScrutinee'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V5, V6) -> case V2 of {'Idris.TTImp.TTImp.IVar', E4, E5} -> (fun (V7, V8) -> case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V8)) of 1 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V5)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--findScrutinee'(V4, V6, {'Idris.TTImp.TTImp.IVar', V7, V8})), fun (V9) -> {'Idris.Prelude.Types.Just', (1 + V9)} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--findImpsIn'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, [{'Idris.Builtin.MkPair', V6, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V12))} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V13)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V13))))} end, V3))], V8)) end()); _ -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V14)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V14))))} end, V3)), V8)) end end(E4, E5, E6, E7)); _ -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V15)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V15))))} end, V3)), V8)) end end(E0, E1, E2, E3)); _ -> fun (V16) -> case ('Idris.Idris2.Data.List':'un--isNil'(V3)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TryWithImplicits', V0, V1, V2, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V3))}, V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--explicitPi'(V0) -> case V0 of {'Idris.Core.Env.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.TT.Pi', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V3, V4, {'Idris.Core.TT.Explicit'}, V6}, ('un--explicitPi'(V2))} end(E2, E3, E4, E5)); _ -> {'Idris.Core.Env.::', V1, ('un--explicitPi'(V2))} end end(E0, E1)); {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayElab'(V0, V1, V2, V3, V4, V9, V5, V8, V13, 0, fun (V15) -> begin (V18 = case V11 of {'Idris.TTImp.TTImp.Implicit', E0, E1} -> (fun (V16, V17) -> (('nested--12834-12356--in--un--guessScrType'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V12))(V15)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', V11} end), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V25 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V6, V7, V8, V20, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V9))}, V15))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected scrutinee type"/utf8>> end, V28, V15))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V45 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V39, V40)) end end}}, V5)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V41, V42)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V43, V44)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V49 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V47, V48)) end end}, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V45)))))))) end, V15))), case V49 of {'Idris.Prelude.Types.Left', E10} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V51) -> begin (V87 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V52) -> begin (V55 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V53) -> 1 end, fun (V54) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V45, V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V28))}, V54)) end, V52))), case V55 of {'Idris.Prelude.Types.Left', E12} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V57)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V57)), V45}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V58) -> case V58 of {'Idris.Core.Core.LinearMisuse', E14, E15, E16, E17} -> (fun (V59, V60, V61, V62) -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V63) -> fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V63, V64)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V65) -> fun (V66) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V65, V66)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V67) -> fun (V68) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V69, V70)) end end}}, fun () -> fun (V71) -> begin (V78 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, fun (V72) -> 1 end, fun (V73) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V74) -> fun (V75) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V74, V75)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V76) -> fun (V77) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V76, V77)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V8, V28))}, V73)) end, V71))), case V78 of {'Idris.Prelude.Types.Left', E18} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V80)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V80)), ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V81, V82)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V83) -> fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V83, V84)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V58, V85)) end end, V61)) end(E14, E15, E16, E17)); _ -> fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V58, V86)) end end end, V15))), case V87 of {'Idris.Prelude.Types.Left', E20} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V89) -> case V89 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V90, V91) -> case V91 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V92, V93) -> begin (V94 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V92))(V15))), case V94 of {'Idris.Prelude.Types.Left', E26} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V96) -> begin (V97 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Scrutinee type"/utf8>> end, V8, V96, V15))), case V97 of {'Idris.Prelude.Types.Left', E28} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V99) -> begin (V101 = begin (V100 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V100} end), case V101 of {'Idris.Prelude.Types.Left', E30} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V103) -> begin (V107 = begin (V104 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V1, V0, V103, V8, V96))(V15))), case V104 of {'Idris.Prelude.Types.Left', E32} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V106) -> ('nested--12834-12353--in--un--checkConcrete'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V106, V15)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V107 of {'Idris.Prelude.Types.Left', E34} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V109) -> ('un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V9, V7, V8, V10, V90, V96, V93, V12, V13, V15)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V14)).
'un--changeVar'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Local', E25, E26, E27} -> (fun (V3, V4, V5) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V5)) of 1 -> {'Idris.Core.TT.Local', V3, V4, V1}; 0 -> {'Idris.Core.TT.Local', V3, V4, V5}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> case V2 of {'Idris.Core.TT.Meta', E21, E22, E23, E24} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Meta', V6, V7, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--changeVar'(V0, V1, V10)) end, V9))} end(E21, E22, E23, E24)); _ -> case V2 of {'Idris.Core.TT.Bind', E17, E18, E19, E20} -> (fun (V11, V12, V13, V14) -> {'Idris.Core.TT.Bind', V11, V12, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V15) -> ('un--changeVar'(V0, V1, V15)) end, V13)), ('un--changeVar'((1 + V0), (1 + V1), V14))} end(E17, E18, E19, E20)); _ -> case V2 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V16, V17, V18) -> {'Idris.Core.TT.App', V16, ('un--changeVar'(V0, V1, V17)), ('un--changeVar'(V0, V1, V18))} end(E0, E1, E2)); {'Idris.Core.TT.As', E3, E4, E5, E6} -> (fun (V19, V20, V21, V22) -> {'Idris.Core.TT.As', V19, V20, ('un--changeVar'(V0, V1, V21)), ('un--changeVar'(V0, V1, V22))} end(E3, E4, E5, E6)); {'Idris.Core.TT.TDelayed', E7, E8, E9} -> (fun (V23, V24, V25) -> {'Idris.Core.TT.TDelayed', V23, V24, ('un--changeVar'(V0, V1, V25))} end(E7, E8, E9)); {'Idris.Core.TT.TDelay', E10, E11, E12, E13} -> (fun (V26, V27, V28, V29) -> {'Idris.Core.TT.TDelay', V26, V27, ('un--changeVar'(V0, V1, V28)), ('un--changeVar'(V0, V1, V29))} end(E10, E11, E12, E13)); {'Idris.Core.TT.TForce', E14, E15, E16} -> (fun (V30, V31, V32) -> {'Idris.Core.TT.TForce', V30, V31, ('un--changeVar'(V0, V1, V32))} end(E14, E15, E16)); _ -> V2 end end end end.
'un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V33 = ('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--getToBind'(V0, V1, V4, V3, V7, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V21, V22, V23, V24, V25, V26) -> V21 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E8, E9, E10, E11, E12, E13} -> (fun (V27, V28, V29, V30, V31, V32) -> V28 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, [], V16))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V51 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Doing a case under unbound implicits "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V38, V39)) end end}, {'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V41, V42)) end end}}, V36)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}, {'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V49, V50)) end end}}, V43, V44)) end end}, V35)))) end, V16))), case V51 of {'Idris.Prelude.Types.Left', E16} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"scr"/utf8>>, V16))), case V54 of {'Idris.Prelude.Types.Left', E18} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V56) -> begin (V83 = begin (V77 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V57, V58, V59)) end end end, fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V60, V61, V62)) end end end}, {'Idris.Core.Name.Resolved', case V20 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V64 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V16))), case V77 of {'Idris.Prelude.Types.Left', E34} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V79) -> begin (V80 = (('Idris.Idris2.Core.Context':'un--prettyName'(V1, V79))(V16))), case V80 of {'Idris.Prelude.Types.Left', E36} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V82) -> ('Idris.Idris2.Core.UnifyState':'un--genCaseName'(V1, V3, V82, V16)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V83 of {'Idris.Prelude.Types.Left', E38} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V85) -> begin (V100 = ('un--updateMults'(case V20 of {'Idris.TTImp.Elab.Check.MkEState', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V97 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), begin (V102 = begin (V101 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E54} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V104) -> begin (V149 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', case V20 of {'Idris.TTImp.Elab.Check.MkEState', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V106 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, case V104 of {'Idris.Core.Context.MkDefs', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148) -> V119 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V149 of {'Idris.Prelude.Types.Left', E100} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V151) -> begin (V173 = case V151 of {'Idris.Prelude.Types.Just', E102} -> (fun (V152) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V152 of {'Idris.Core.Context.Context.MkGlobalDef', E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122} -> (fun (V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172) -> V162 end(E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 2)) of 1 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E102)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> 2 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V174 = ('un--findScrutinee'(V0, V100, V10))), begin (V183 = case V15 of {'Idris.Prelude.Types.Just', E125} -> (fun (V175) -> (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V175))(V16)) end(E125)); _ -> begin (V176 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"caseTy"/utf8>>, V16))), case V176 of {'Idris.Prelude.Types.Left', E123} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V178) -> ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V7, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V179) -> fun (V180) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V179, V180)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V181) -> fun (V182) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V181, V182)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V100, V178, {'Idris.Core.TT.TType', V7}, V16)) end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V183 of {'Idris.Prelude.Types.Left', E126} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V185) -> begin (V192 = ('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--bindImplicits'(V1, V0, V7, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E128, E129, E130, E131, E132, E133} -> (fun (V186, V187, V188, V189, V190, V191) -> V187 end(E128, E129, E130, E131, E132, E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V104, V100, V35, V185, {'Idris.Core.TT.TType', V7}, V16))), case V192 of {'Idris.Prelude.Types.Left', E134} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V194) -> case V194 of {'Idris.Builtin.MkPair', E136, E137} -> (fun (V195, V196) -> begin (V198 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V7, ('un--allow'(V174, ('un--explicitPi'(V100)))), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.TT.Bind', V7, V56, {'Idris.Core.TT.Pi', V7, V13, {'Idris.Core.TT.Explicit'}, V12}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V195))} end, fun () -> fun (V197) -> V195 end end, V174))))), begin (V199 = ('Idris.Idris2.Core.Normalise':'un--normaliseSizeLimit'(V1, [], V104, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), {'Idris.Core.Env.Nil'}, V198, V16))), case V199 of {'Idris.Prelude.Types.Left', E138} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V201) -> begin (V202 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V201, V16))), case V202 of {'Idris.Prelude.Types.Left', E140} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V204) -> case V204 of {'Idris.Builtin.MkPair', E142, E143} -> (fun (V205, V206) -> begin (V207 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), <<"Case env"/utf8>>, V100, V16))), case V207 of {'Idris.Prelude.Types.Left', E144} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V209) -> begin (V210 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Case function type: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V85)))) end, {'Idris.Core.Env.Nil'}, V201, V16))), case V210 of {'Idris.Prelude.Types.Left', E146} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V212) -> begin (V215 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V213, V214)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V201)))), V16))), case V215 of {'Idris.Prelude.Types.Left', E148} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V217) -> begin (V218 = case ('Idris.Idris2.Data.List':'un--isNil'(V35)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> (('un--findImpsIn'([], V7, {'Idris.Core.Env.Nil'}, [], V201))(V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V218 of {'Idris.Prelude.Types.Left', E150} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V220) -> begin (V253 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V85, case ('Idris.Idris2.Core.Context':'un--newDef'(V7, V85, case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V221) -> fun (V222) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V221, V222)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V223) -> fun (V224) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V223, V224)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V225) -> fun (V226) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V225, V226)) end end, fun (V227) -> fun (V228) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V227, V228)) end end}}, V5)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V229) -> fun (V230) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V229, V230)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V231) -> fun (V232) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V231, V232)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V201, V173, {'Idris.Core.Context.Context.None'})) of {'Idris.Core.Context.Context.MkGlobalDef', E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171} -> (fun (V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252) -> {'Idris.Core.Context.Context.MkGlobalDef', V233, V234, V235, V205, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252} end(E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16))), case V253 of {'Idris.Prelude.Types.Left', E172} -> (fun (V254) -> {'Idris.Prelude.Types.Left', V254} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V255) -> begin (V277 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 2 end, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V151, fun (V256) -> ('Idris.Idris2.Core.Context.Context':'un--findSetTotal'(case V256 of {'Idris.Core.Context.Context.MkGlobalDef', E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193} -> (fun (V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276) -> V268 end(E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))))), begin (V278 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Setting totality requirement for"/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V85)) | [<<"to"/utf8>> | [('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V277)) | []]]]])) end, V16))), case V278 of {'Idris.Prelude.Types.Left', E194} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E194)); {'Idris.Prelude.Types.Right', E195} -> (fun (V280) -> begin (V281 = ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, {'Idris.Core.Name.Resolved', V255}, {'Idris.Core.Context.Context.SetTotal', V277}, V16))), case V281 of {'Idris.Prelude.Types.Left', E196} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E196)); {'Idris.Prelude.Types.Right', E197} -> (fun (V283) -> begin (V284 = {'Idris.Core.TT.Ref', V7, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V255}}), begin (V285 = ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V0, V7, V284, V100))), begin (V287 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.TT.App', V7, V285, V11} end, fun () -> fun (V286) -> V285 end end, V174))), begin (V289 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V288) -> ('nested--10140-10138--in--un--updateClause'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V85, V174, V8, V100, V288)) end, V14))), begin (V378 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Nested: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V290) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V291) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V291)) end, fun (V292) -> fun (V293) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V292, V293)) end end}, {'Idris.Prelude.Show.MkShow', fun (V294) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V295) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V296) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V296)) end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V297, V298)) end end}, V295)) end, fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V301) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V301)) end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V302, V303)) end end}, V299, V300)) end end}, {'Idris.Prelude.Show.MkShow', fun (V304) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V305) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V305)) end, fun (V306) -> fun (V307) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V306, V307)) end end}, V304)) end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V310) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V310)) end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V311, V312)) end end}, V308, V309)) end end}}, V294)) end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V315) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V316) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V316)) end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V317, V318)) end end}, V315)) end, fun (V319) -> fun (V320) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V321) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V321)) end, fun (V322) -> fun (V323) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V322, V323)) end end}, V319, V320)) end end}, {'Idris.Prelude.Show.MkShow', fun (V324) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V325) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V325)) end, fun (V326) -> fun (V327) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V326, V327)) end end}, V324)) end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V330) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V330)) end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V331, V332)) end end}, V328, V329)) end end}}, V313, V314)) end end}}, V290)) end, fun (V333) -> fun (V334) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V335) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V335)) end, fun (V336) -> fun (V337) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V336, V337)) end end}, {'Idris.Prelude.Show.MkShow', fun (V338) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V339) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V340) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V340)) end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V341, V342)) end end}, V339)) end, fun (V343) -> fun (V344) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V345) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V345)) end, fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V346, V347)) end end}, V343, V344)) end end}, {'Idris.Prelude.Show.MkShow', fun (V348) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V349) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V349)) end, fun (V350) -> fun (V351) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V350, V351)) end end}, V348)) end, fun (V352) -> fun (V353) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V354) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V354)) end, fun (V355) -> fun (V356) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V355, V356)) end end}, V352, V353)) end end}}, V338)) end, fun (V357) -> fun (V358) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V359) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V360) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V360)) end, fun (V361) -> fun (V362) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V361, V362)) end end}, V359)) end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V365) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V365)) end, fun (V366) -> fun (V367) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V366, V367)) end end}, V363, V364)) end end}, {'Idris.Prelude.Show.MkShow', fun (V368) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V369) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V369)) end, fun (V370) -> fun (V371) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V370, V371)) end end}, V368)) end, fun (V372) -> fun (V373) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V374) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V374)) end, fun (V375) -> fun (V376) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V375, V376)) end end}, V372, V373)) end end}}, V357, V358)) end end}}, V333, V334)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V377) -> ('un--getNestData'(V377)) end, V8)))))) end, V16))), case V378 of {'Idris.Prelude.Types.Left', E198} -> (fun (V379) -> {'Idris.Prelude.Types.Left', V379} end(E198)); {'Idris.Prelude.Types.Right', E199} -> (fun (V380) -> begin (V390 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated alts: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V381) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V382) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V382)) end, fun (V383) -> fun (V384) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V383, V384)) end end}, V381)) end, fun (V385) -> fun (V386) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V387) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V387)) end, fun (V388) -> fun (V389) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V388, V389)) end end}, V385, V386)) end end}, V289)))) end, V16))), case V390 of {'Idris.Prelude.Types.Left', E200} -> (fun (V391) -> {'Idris.Prelude.Types.Left', V391} end(E200)); {'Idris.Prelude.Types.Right', E201} -> (fun (V392) -> begin (V393 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> <<"Case application"/utf8>> end, V100, V287, V16))), case V393 of {'Idris.Prelude.Types.Left', E202} -> (fun (V394) -> {'Idris.Prelude.Types.Left', V394} end(E202)); {'Idris.Prelude.Types.Right', E203} -> (fun (V395) -> begin (V396 = []), begin (V398 = begin (V397 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V397} end), case V398 of {'Idris.Prelude.Types.Left', E204} -> (fun (V399) -> {'Idris.Prelude.Types.Left', V399} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V400) -> begin (V413 = case V400 of {'Idris.Core.UnifyState.MkUState', E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217} -> (fun (V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412) -> V411 end(E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V427 = begin (V426 = ('erlang':'put'(V3, case V400 of {'Idris.Core.UnifyState.MkUState', E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229} -> (fun (V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425) -> {'Idris.Core.UnifyState.MkUState', V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, [], V425} end(E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V426} end), case V427 of {'Idris.Prelude.Types.Left', E230} -> (fun (V428) -> {'Idris.Prelude.Types.Left', V428} end(E230)); {'Idris.Prelude.Types.Right', E231} -> (fun (V429) -> begin (V430 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V1, V2, V3, [1 | []], V396, {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IDef', V7, V85, V289}))(V16))), case V430 of {'Idris.Prelude.Types.Left', E232} -> (fun (V431) -> {'Idris.Prelude.Types.Left', V431} end(E232)); {'Idris.Prelude.Types.Right', E233} -> (fun (V432) -> begin (V434 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V433) -> 1 end end, V174))), begin (V435 = case V434 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V85, {'Idris.Core.Context.Context.Inline'}, V16)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V435 of {'Idris.Prelude.Types.Left', E234} -> (fun (V436) -> {'Idris.Prelude.Types.Left', V436} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V437) -> begin (V439 = begin (V438 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V438} end), case V439 of {'Idris.Prelude.Types.Left', E236} -> (fun (V440) -> {'Idris.Prelude.Types.Left', V440} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V441) -> begin (V455 = begin (V454 = ('erlang':'put'(V3, case V441 of {'Idris.Core.UnifyState.MkUState', E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249} -> (fun (V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453) -> {'Idris.Core.UnifyState.MkUState', V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V413, V453} end(E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V454} end), case V455 of {'Idris.Prelude.Types.Left', E250} -> (fun (V456) -> {'Idris.Prelude.Types.Left', V456} end(E250)); {'Idris.Prelude.Types.Right', E251} -> (fun (V457) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V287, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V100, V195))}} end(E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E197)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142, E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindCaseLocals'(V0, V1, V2, V3) -> case V1 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> {'Idris.TTImp.TTImp.ICaseLocal', V0, V6, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V6 end, V8)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('nested--10004-10014--in--un--getNameFrom'(V6, V8, V9, V5, V3, V2, V0, V10)) end, V9)), ('un--bindCaseLocals'(V0, V5, V2, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allow'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('un--toRig1'(V2, V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
