-module('Idris.Idris2.Parser.Lexer.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lex-6422'/2,
  'nested--4472-6408--in--un--useful'/2,
  'dn--un--show_Show_Token'/1,
  'dn--un--showPrec_Show_Token'/2,
  'dn--un--pretty_Pretty_Token'/1,
  'dn--un--prettyPrec_Pretty_Token'/2,
  'dn--un--__Impl_Show_Token'/0,
  'dn--un--__Impl_Pretty_Token'/0,
  'un--separator'/0,
  'un--rawTokens'/0,
  'un--lte'/0,
  'un--lt'/0,
  'un--lex'/1,
  'un--gte'/0,
  'un--gt'/0,
  'un--equals'/0,
  'un--eqop'/0,
  'un--dot'/0,
  'un--andop'/0
]).
'case--lex-6422'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of <<""/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Data.List':'un--filter'(fun (V8) -> ('nested--4472-6408--in--un--useful'(V0, case V8 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V9, V10, V11) -> V9 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V2)), [{'Idris.Libraries.Text.Bounded.MkBounded', {'Idris.Parser.Lexer.Package.EndOfInput'}, 0, {'Idris.Libraries.Text.Bounded.MkBounds', V4, V6, V4, V6}} | []]))}; _ -> {'Idris.Prelude.Types.Left', V3} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4472-6408--in--un--useful'(V0, V1) -> case V1 of {'Idris.Parser.Lexer.Package.Comment', E0} -> (fun (V2) -> 0 end(E0)); {'Idris.Parser.Lexer.Package.Space'} -> (fun () -> 0 end()); _ -> 1 end.
'dn--un--show_Show_Token'(V0) -> case V0 of {'Idris.Parser.Lexer.Package.Comment', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Comment: "/utf8>>, V1)) end(E0)); {'Idris.Parser.Lexer.Package.EndOfInput'} -> (fun () -> <<"EndOfInput"/utf8>> end()); {'Idris.Parser.Lexer.Package.Equals'} -> (fun () -> <<"Equals"/utf8>> end()); {'Idris.Parser.Lexer.Package.DotSepIdent', E1, E2} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DotSepIdentifier: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--showPrec_Show_Namespace'(V5, V6)) end end}, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3)))))))) end(E1, E2)); {'Idris.Parser.Lexer.Package.Separator'} -> (fun () -> <<"Separator"/utf8>> end()); {'Idris.Parser.Lexer.Package.Dot'} -> (fun () -> <<"Dot"/utf8>> end()); {'Idris.Parser.Lexer.Package.LTE'} -> (fun () -> <<"LTE"/utf8>> end()); {'Idris.Parser.Lexer.Package.GTE'} -> (fun () -> <<"GTE"/utf8>> end()); {'Idris.Parser.Lexer.Package.LT'} -> (fun () -> <<"LT"/utf8>> end()); {'Idris.Parser.Lexer.Package.GT'} -> (fun () -> <<"GT"/utf8>> end()); {'Idris.Parser.Lexer.Package.EqOp'} -> (fun () -> <<"EqOp"/utf8>> end()); {'Idris.Parser.Lexer.Package.AndOp'} -> (fun () -> <<"AndOp"/utf8>> end()); {'Idris.Parser.Lexer.Package.Space'} -> (fun () -> <<"Space"/utf8>> end()); {'Idris.Parser.Lexer.Package.StringLit', E3} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"StringLit: "/utf8>>, V7)) end(E3)); {'Idris.Parser.Lexer.Package.IntegerLit', E4} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"IntegerLit: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V8)))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_Token'(V0, V1) -> ('dn--un--show_Show_Token'(V1)).
'dn--un--pretty_Pretty_Token'(V0) -> case V0 of {'Idris.Parser.Lexer.Package.Comment', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"Comment:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V1)))) end(E0)); {'Idris.Parser.Lexer.Package.EndOfInput'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V2)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"EndOfInput"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"EndOfInput"/utf8>>)); 0 -> <<"EndOfInput"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.Equals'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V3)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Equals"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Equals"/utf8>>)); 0 -> <<"Equals"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.DotSepIdent', E1, E2} -> (fun (V4, V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"DotSepIdentifier:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_(Maybe $a)'({'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_Namespace'(V7)) end end, fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--prettyPrec_Pretty_Namespace'(V9, V10)) end end end}, V4)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dot'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V5)))))) end(E1, E2)); {'Idris.Parser.Lexer.Package.Separator'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V11)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Separator"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Separator"/utf8>>)); 0 -> <<"Separator"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.Dot'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V12)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Dot"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Dot"/utf8>>)); 0 -> <<"Dot"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.LTE'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V13)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"LTE"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"LTE"/utf8>>)); 0 -> <<"LTE"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.GTE'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V14)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"GTE"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"GTE"/utf8>>)); 0 -> <<"GTE"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.LT'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V15)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"LT"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"LT"/utf8>>)); 0 -> <<"LT"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.GT'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V16)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"GT"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"GT"/utf8>>)); 0 -> <<"GT"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.EqOp'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V17)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"EqOp"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"EqOp"/utf8>>)); 0 -> <<"EqOp"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.AndOp'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V18)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"AndOp"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"AndOp"/utf8>>)); 0 -> <<"AndOp"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.Space'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V19)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Space"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Space"/utf8>>)); 0 -> <<"Space"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); {'Idris.Parser.Lexer.Package.StringLit', E3} -> (fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"StringLit:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V20)))) end(E3)); {'Idris.Parser.Lexer.Package.IntegerLit', E4} -> (fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"IntegerLit:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Integer'(V21)))) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_Token'(V0, V1) -> ('dn--un--pretty_Pretty_Token'(V1)).
'dn--un--__Impl_Show_Token'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Token'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Token'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_Token'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Token'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Token'(V3, V4)) end end end}.
'un--separator'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($,)).
'un--rawTokens'() -> [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--comment'()), fun (V0) -> {'Idris.Parser.Lexer.Package.Comment', ('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'((1 + (1 + 0)), V0))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--namespacedIdent'()), fun (V1) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V2) -> fun (V3) -> {'Idris.Parser.Lexer.Package.DotSepIdent', V2, V3} end end, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespacedIdent'(V1)))) end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--identAllowDashes'()), fun (V4) -> {'Idris.Parser.Lexer.Package.DotSepIdent', {'Idris.Prelude.Types.Nothing'}, V4} end} | [{'Idris.Builtin.MkPair', ('un--separator'()), fun (V5) -> {'Idris.Parser.Lexer.Package.Separator'} end} | [{'Idris.Builtin.MkPair', ('un--dot'()), fun (V6) -> {'Idris.Parser.Lexer.Package.Dot'} end} | [{'Idris.Builtin.MkPair', ('un--lte'()), fun (V7) -> {'Idris.Parser.Lexer.Package.LTE'} end} | [{'Idris.Builtin.MkPair', ('un--gte'()), fun (V8) -> {'Idris.Parser.Lexer.Package.GTE'} end} | [{'Idris.Builtin.MkPair', ('un--lt'()), fun (V9) -> {'Idris.Parser.Lexer.Package.LT'} end} | [{'Idris.Builtin.MkPair', ('un--gt'()), fun (V10) -> {'Idris.Parser.Lexer.Package.GT'} end} | [{'Idris.Builtin.MkPair', ('un--eqop'()), fun (V11) -> {'Idris.Parser.Lexer.Package.EqOp'} end} | [{'Idris.Builtin.MkPair', ('un--andop'()), fun (V12) -> {'Idris.Parser.Lexer.Package.AndOp'} end} | [{'Idris.Builtin.MkPair', ('un--equals'()), fun (V13) -> {'Idris.Parser.Lexer.Package.Equals'} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Parser.Lexer.Common':'un--spacesOrNewlines'()), fun (V14) -> {'Idris.Parser.Lexer.Package.Space'} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--stringLit'()), fun (V15) -> {'Idris.Parser.Lexer.Package.StringLit', ('Idris.Idris2.Libraries.Utils.String':'un--stripQuotes'(V15))} end} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Text.Lexer':'un--intLit'()), fun (V16) -> {'Idris.Parser.Lexer.Package.IntegerLit', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Integer'(V16))} end} | []]]]]]]]]]]]]]]].
'un--lte'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($<)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)) end}.
'un--lt'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($<)).
'un--lex'(V0) -> ('case--lex-6422'(V0, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--lexTo'(fun (V1) -> 0 end, ('un--rawTokens'()), V0)))).
'un--gte'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($>)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)) end}.
'un--gt'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($>)).
'un--equals'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)).
'un--eqop'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($=)) end}.
'un--dot'() -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($.)).
'un--andop'() -> {'Idris.Libraries.Text.Lexer.Core.SeqEat', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($&)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($&)) end}.
