-module('Idris.Idris2.Idris.SetOptions').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--setIncrementalCG-4529'/7,
  'case--pkgDir-3434'/2,
  'nested--12604-3886--in--un--viable'/2,
  'nested--12057-3380--in--un--toVersion'/2,
  'nested--12938-4234--in--un--prefixes'/1,
  'nested--12723-4020--in--un--pkgDesc'/3,
  'nested--12604-3884--in--un--notHidden'/2,
  'nested--12604-3885--in--un--notDenylisted'/2,
  'nested--12212-3538--in--un--checkBounds'/4,
  'un--visiblePackages'/1,
  'un--setIncrementalCG'/5,
  'un--prefixOnlyIfNonEmpty'/2,
  'un--prefixOnly'/2,
  'un--preOptions'/3,
  'un--postOptions'/7,
  'un--pkgDir'/1,
  'un--opts'/3,
  'un--logLevels'/0,
  'un--localPackageDir'/2,
  'un--listPackages'/3,
  'un--ideModeSocket'/1,
  'un--ideMode'/1,
  'un--globalPackageDir'/2,
  'un--getPackageDirs'/2,
  'un--findPackages'/2,
  'un--findIpkg'/2,
  'un--dirOption'/5,
  'un--completionScript'/1,
  'un--codegens'/2,
  'un--candidateDirs'/3,
  'un--addPkgDir'/4
]).
'case--setIncrementalCG-4529'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Idris.ProcessIdr':'un--getCG'(V2, V3, V7, V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E3} -> (fun (V11) -> case V11 of {'Idris.Compiler.Common.MkCG', E4, E5, E6, E7, E8} -> (fun (V12, V13, V14, V15, V16) -> case V15 of {'Idris.Prelude.Types.Just', E9} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--getSession'(V3, V6))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> ('Idris.Idris2.Core.Context':'un--setSession'(V3, case V20 of {'Idris.Core.Options.MkSessionOpts', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Options.MkSessionOpts', V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, [V7 | V44], V45, V46} end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V1 of 1 -> begin (V75 = begin (V74 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V49, V50, V51)) end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> V53 end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V57(V59))), begin (V61 = (V58(V59))), (V60(V61)) end end end end end end end}, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V64(V66))), ((V65(V67))(V66)) end end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V69(V70))), (V71(V70)) end end end end}, fun (V72) -> fun (V73) -> V73 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<" does not support incremental builds"/utf8>>))))(V6))), {'Idris.Prelude.Types.Right', V74} end), case V75 of {'Idris.Prelude.Types.Left', E38} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V77) -> begin (V105 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V80, V81, V82)) end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> V84 end end end, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V88(V90))), begin (V92 = (V89(V90))), (V91(V92)) end end end end end end end}, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), ((V96(V98))(V97)) end end end end end end, fun (V99) -> fun (V100) -> fun (V101) -> begin (V102 = (V100(V101))), (V102(V101)) end end end end}, fun (V103) -> fun (V104) -> V104 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V6))), {'Idris.Prelude.Types.Right', V105} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V1 of 1 -> begin (V134 = begin (V133 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V108, V109, V110)) end end end end end, fun (V111) -> fun (V112) -> fun (V113) -> V112 end end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> begin (V119 = (V116(V118))), begin (V120 = (V117(V118))), (V119(V120)) end end end end end end end}, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V123(V125))), ((V124(V126))(V125)) end end end end end end, fun (V127) -> fun (V128) -> fun (V129) -> begin (V130 = (V128(V129))), (V130(V129)) end end end end}, fun (V131) -> fun (V132) -> V132 end end}, <<"No such code generator"/utf8>>))(V6))), {'Idris.Prelude.Types.Right', V133} end), case V134 of {'Idris.Prelude.Types.Left', E40} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V136) -> begin (V196 = begin (V195 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V139, V140, V141)) end end end end end, fun (V142) -> fun (V143) -> fun (V144) -> V143 end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), begin (V151 = (V148(V149))), (V150(V151)) end end end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V154(V156))), ((V155(V157))(V156)) end end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V159(V160))), (V161(V160)) end end end end}, fun (V162) -> fun (V163) -> V163 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Code generators available: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V164) -> ('Idris.Idris2.Builtin':'un--fst'(V164)) end, ('Idris.Idris2.Core.Options':'un--availableCGs'(case V4 of {'Idris.Core.Context.MkDefs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194) -> V169 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))(V6))), {'Idris.Prelude.Types.Right', V195} end), case V196 of {'Idris.Prelude.Types.Left', E72} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V198) -> begin (V226 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V201, V202, V203)) end end end end end, fun (V204) -> fun (V205) -> fun (V206) -> V205 end end end, fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> begin (V212 = (V209(V211))), begin (V213 = (V210(V211))), (V212(V213)) end end end end end end end}, fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> begin (V219 = (V216(V218))), ((V217(V219))(V218)) end end end end end end, fun (V220) -> fun (V221) -> fun (V222) -> begin (V223 = (V221(V222))), (V223(V222)) end end end end}, fun (V224) -> fun (V225) -> V225 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V6))), {'Idris.Prelude.Types.Right', V226} end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--pkgDir-3434'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of [] -> {'Idris.Idris.SetOptions.MkPkgDir', V0, V3, {'Idris.Prelude.Types.Nothing'}}; _ -> case ('nested--12057-3380--in--un--toVersion'(V0, V3)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V4) -> {'Idris.Idris.SetOptions.MkPkgDir', V0, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V31, V32)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Data.List':'un--intersperse'(<<"-"/utf8>>, V2)))), {'Idris.Prelude.Types.Just', V4}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.SetOptions.MkPkgDir', V0, V0, {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12604-3886--in--un--viable'(V0, V1) -> case ('nested--12604-3884--in--un--notHidden'(V0, V1)) of 1 -> ('nested--12604-3885--in--un--notDenylisted'(V0, V1)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12057-3380--in--un--toVersion'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V2) -> V2 end, ('Idris.Idris2.Data.List1':'dn--un--traverse_Traversable_List1'({'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V8)) end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V11, V12)) end end end end}, fun (V13) -> ('Idris.Idris2.Data.String':'un--parsePositive'({'Idris.Prelude.Num.MkNum', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--*_Num_Nat'(V16, V17)) end end, fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V18)) end}, V13)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V19, $.)) end, V1)))))).
'nested--12938-4234--in--un--prefixes'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [V1 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"."/utf8>>)), V3)) end, ('nested--12938-4234--in--un--prefixes'(V2))))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12723-4020--in--un--pkgDesc'(V0, V1, V2) -> case V2 of {'Idris.Idris.SetOptions.MkPkgDir', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V4)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_(Maybe $a)'({'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V6) -> fun (V7) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--pretty_Pretty_PkgVersion'(V7)) end end, fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--prettyPrec_Pretty_PkgVersion'(V9, V10)) end end end}, V5)))))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12604-3884--in--un--notHidden'(V0, V1) -> case ('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"."/utf8>>, case V1 of {'Idris.Idris.SetOptions.MkPkgDir', E0, E1, E2} -> (fun (V2, V3, V4) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12604-3885--in--un--notDenylisted'(V0, V1) -> case ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V6, V7)) end end}, V2, V3)) end end, [<<"include"/utf8>> | [<<"lib"/utf8>> | [<<"support"/utf8>> | [<<"refc"/utf8>> | []]]]], case V1 of {'Idris.Idris.SetOptions.MkPkgDir', E0, E1, E2} -> (fun (V8, V9, V10) -> V9 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12212-3538--in--un--checkBounds'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.SetOptions.MkPkgDir', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V15, V16)) end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V19, V20)) end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V22)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V31, V32)) end end end end}, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V35, V36)) end end end}, case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V1)) of 1 -> ('Idris.Idris2.Idris.Package.Types':'un--inBounds'(V6, V0)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V4)), V6})) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--visiblePackages'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V7) -> ('nested--12604-3886--in--un--viable'(V0, V7)) end, V6)) end, fun (V8) -> ('un--getPackageDirs'(V0, V8)) end)).
'un--setIncrementalCG'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('case--setIncrementalCG-4529'(V3, V2, V1, V0, V8, ('Idris.Idris2.Core.Options':'un--getCG'(case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)), V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--prefixOnlyIfNonEmpty'(V0, V1) -> case V0 of <<"--"/utf8>> -> V1; _ -> ('un--prefixOnly'(V0, V1)) end.
'un--prefixOnly'(V0, V1) -> ('Idris.Idris2.Libraries.Data.List.Extra':'un--sortedNub'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V4, V5)) end end}, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V18, V19)) end end}, ('Idris.Idris2.Data.List':'un--filter'(fun (V20) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V0, V20)) of 1 -> ('Idris.Idris2.Data.String':'un--isPrefixOf'(V0, V20)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1)))).
'un--preOptions'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Idris.CommandLine.NoBanner'} -> (fun () -> fun (V6) -> begin (V36 = begin (V7 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V9 of {'Idris.Core.Options.MkSessionOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Options.MkSessionOpts', V10, V11, 1, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> (('un--preOptions'(V0, V1, V5))(V6)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.OutputFile', E32} -> (fun (V39) -> fun (V40) -> begin (V70 = begin (V41 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V40))), case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V43 of {'Idris.Core.Options.MkSessionOpts', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> {'Idris.Core.Options.MkSessionOpts', V44, V45, 1, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V40)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V70 of {'Idris.Prelude.Types.Left', E61} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V72) -> (('un--preOptions'(V0, V1, V5))(V40)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32)); {'Idris.Idris.CommandLine.ExecFn', E63} -> (fun (V73) -> fun (V74) -> begin (V104 = begin (V75 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V74))), case V75 of {'Idris.Prelude.Types.Left', E64} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V77) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V77 of {'Idris.Core.Options.MkSessionOpts', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> {'Idris.Core.Options.MkSessionOpts', V78, V79, 1, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103} end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V74)) end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V104 of {'Idris.Prelude.Types.Left', E92} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V106) -> (('un--preOptions'(V0, V1, V5))(V74)) end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63)); {'Idris.Idris.CommandLine.IdeMode'} -> (fun () -> fun (V107) -> begin (V137 = begin (V108 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V107))), case V108 of {'Idris.Prelude.Types.Left', E94} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V110) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V110 of {'Idris.Core.Options.MkSessionOpts', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> {'Idris.Core.Options.MkSessionOpts', V111, V112, 1, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136} end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V107)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V137 of {'Idris.Prelude.Types.Left', E122} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V139) -> (('un--preOptions'(V0, V1, V5))(V107)) end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.IdeModeSocket', E124} -> (fun (V140) -> fun (V141) -> begin (V171 = begin (V142 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V141))), case V142 of {'Idris.Prelude.Types.Left', E125} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V144) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V144 of {'Idris.Core.Options.MkSessionOpts', E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170) -> {'Idris.Core.Options.MkSessionOpts', V145, V146, 1, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170} end(E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V141)) end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V171 of {'Idris.Prelude.Types.Left', E153} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V173) -> (('un--preOptions'(V0, V1, V5))(V141)) end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E124)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V174) -> begin (V204 = begin (V175 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V174))), case V175 of {'Idris.Prelude.Types.Left', E155} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V177) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V177 of {'Idris.Core.Options.MkSessionOpts', E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182} -> (fun (V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203) -> {'Idris.Core.Options.MkSessionOpts', V178, V179, 1, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203} end(E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V174)) end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V204 of {'Idris.Prelude.Types.Left', E183} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V206) -> (('un--preOptions'(V0, V1, V5))(V174)) end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Profile'} -> (fun () -> fun (V207) -> begin (V237 = begin (V208 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V207))), case V208 of {'Idris.Prelude.Types.Left', E185} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E185)); {'Idris.Prelude.Types.Right', E186} -> (fun (V210) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V210 of {'Idris.Core.Options.MkSessionOpts', E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212} -> (fun (V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236) -> {'Idris.Core.Options.MkSessionOpts', V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, 1, V230, V231, V232, V233, V234, V235, V236} end(E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V207)) end(E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V237 of {'Idris.Prelude.Types.Left', E213} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V239) -> (('un--preOptions'(V0, V1, V5))(V207)) end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Quiet'} -> (fun () -> fun (V240) -> begin (V241 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V1, {'Idris.Idris.REPL.Opts.REPL', 1}, V240))), case V241 of {'Idris.Prelude.Types.Left', E215} -> (fun (V242) -> {'Idris.Prelude.Types.Left', V242} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V243) -> (('un--preOptions'(V0, V1, V5))(V240)) end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.NoPrelude'} -> (fun () -> fun (V244) -> begin (V274 = begin (V245 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V244))), case V245 of {'Idris.Prelude.Types.Left', E217} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V247) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V247 of {'Idris.Core.Options.MkSessionOpts', E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244} -> (fun (V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273) -> {'Idris.Core.Options.MkSessionOpts', 1, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273} end(E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V244)) end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V274 of {'Idris.Prelude.Types.Left', E245} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E245)); {'Idris.Prelude.Types.Right', E246} -> (fun (V276) -> (('un--preOptions'(V0, V1, V5))(V244)) end(E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.SetCG', E247} -> (fun (V277) -> fun (V278) -> begin (V280 = begin (V279 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V279} end), case V280 of {'Idris.Prelude.Types.Left', E248} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V282) -> case ('Idris.Idris2.Core.Options':'un--getCG'(case V282 of {'Idris.Core.Context.MkDefs', E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316} -> (fun (V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312) -> V287 end(E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V277)) of {'Idris.Prelude.Types.Just', E250} -> (fun (V313) -> begin (V314 = ('Idris.Idris2.Core.Context':'un--setCG'(V0, V313, V278))), case V314 of {'Idris.Prelude.Types.Left', E251} -> (fun (V315) -> {'Idris.Prelude.Types.Left', V315} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V316) -> (('un--preOptions'(V0, V1, V5))(V278)) end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E250)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V345 = begin (V344 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V317) -> fun (V318) -> fun (V319) -> fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V319, V320, V321)) end end end end end, fun (V322) -> fun (V323) -> fun (V324) -> V323 end end end, fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> begin (V330 = (V327(V329))), begin (V331 = (V328(V329))), (V330(V331)) end end end end end end end}, fun (V332) -> fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> begin (V337 = (V334(V336))), ((V335(V337))(V336)) end end end end end end, fun (V338) -> fun (V339) -> fun (V340) -> begin (V341 = (V339(V340))), (V341(V340)) end end end end}, fun (V342) -> fun (V343) -> V343 end end}, <<"No such code generator"/utf8>>))(V278))), {'Idris.Prelude.Types.Right', V344} end), case V345 of {'Idris.Prelude.Types.Left', E253} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E253)); {'Idris.Prelude.Types.Right', E254} -> (fun (V347) -> begin (V407 = begin (V406 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V348) -> fun (V349) -> fun (V350) -> fun (V351) -> fun (V352) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V350, V351, V352)) end end end end end, fun (V353) -> fun (V354) -> fun (V355) -> V354 end end end, fun (V356) -> fun (V357) -> fun (V358) -> fun (V359) -> fun (V360) -> begin (V361 = (V358(V360))), begin (V362 = (V359(V360))), (V361(V362)) end end end end end end end}, fun (V363) -> fun (V364) -> fun (V365) -> fun (V366) -> fun (V367) -> begin (V368 = (V365(V367))), ((V366(V368))(V367)) end end end end end end, fun (V369) -> fun (V370) -> fun (V371) -> begin (V372 = (V370(V371))), (V372(V371)) end end end end}, fun (V373) -> fun (V374) -> V374 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Code generators available: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V375) -> ('Idris.Idris2.Builtin':'un--fst'(V375)) end, ('Idris.Idris2.Core.Options':'un--availableCGs'(case V282 of {'Idris.Core.Context.MkDefs', E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284} -> (fun (V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405) -> V380 end(E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))(V278))), {'Idris.Prelude.Types.Right', V406} end), case V407 of {'Idris.Prelude.Types.Left', E285} -> (fun (V408) -> {'Idris.Prelude.Types.Left', V408} end(E285)); {'Idris.Prelude.Types.Right', E286} -> (fun (V409) -> begin (V437 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> fun (V414) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V412, V413, V414)) end end end end end, fun (V415) -> fun (V416) -> fun (V417) -> V416 end end end, fun (V418) -> fun (V419) -> fun (V420) -> fun (V421) -> fun (V422) -> begin (V423 = (V420(V422))), begin (V424 = (V421(V422))), (V423(V424)) end end end end end end end}, fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> fun (V429) -> begin (V430 = (V427(V429))), ((V428(V430))(V429)) end end end end end end, fun (V431) -> fun (V432) -> fun (V433) -> begin (V434 = (V432(V433))), (V434(V433)) end end end end}, fun (V435) -> fun (V436) -> V436 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V278))), {'Idris.Prelude.Types.Right', V437} end end(E286)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E247)); {'Idris.Idris.CommandLine.Directive', E317} -> (fun (V438) -> fun (V439) -> begin (V469 = begin (V440 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V439))), case V440 of {'Idris.Prelude.Types.Left', E318} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E318)); {'Idris.Prelude.Types.Right', E319} -> (fun (V442) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V442 of {'Idris.Core.Options.MkSessionOpts', E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345} -> (fun (V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468) -> {'Idris.Core.Options.MkSessionOpts', V443, V444, V445, V446, V447, [V438 | V448], V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468} end(E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V439)) end(E319)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V469 of {'Idris.Prelude.Types.Left', E346} -> (fun (V470) -> {'Idris.Prelude.Types.Left', V470} end(E346)); {'Idris.Prelude.Types.Right', E347} -> (fun (V471) -> (('un--preOptions'(V0, V1, V5))(V439)) end(E347)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E317)); {'Idris.Idris.CommandLine.PkgPath', E348} -> (fun (V472) -> fun (V473) -> begin (V474 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, V472, V473))), case V474 of {'Idris.Prelude.Types.Left', E349} -> (fun (V475) -> {'Idris.Prelude.Types.Left', V475} end(E349)); {'Idris.Prelude.Types.Right', E350} -> (fun (V476) -> (('un--preOptions'(V0, V1, V5))(V473)) end(E350)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E348)); {'Idris.Idris.CommandLine.SourceDir', E351} -> (fun (V477) -> fun (V478) -> begin (V479 = ('Idris.Idris2.Core.Context':'un--setSourceDir'(V0, {'Idris.Prelude.Types.Just', V477}, V478))), case V479 of {'Idris.Prelude.Types.Left', E352} -> (fun (V480) -> {'Idris.Prelude.Types.Left', V480} end(E352)); {'Idris.Prelude.Types.Right', E353} -> (fun (V481) -> (('un--preOptions'(V0, V1, V5))(V478)) end(E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E351)); {'Idris.Idris.CommandLine.BuildDir', E354} -> (fun (V482) -> fun (V483) -> begin (V484 = ('Idris.Idris2.Core.Context':'un--setBuildDir'(V0, V482, V483))), case V484 of {'Idris.Prelude.Types.Left', E355} -> (fun (V485) -> {'Idris.Prelude.Types.Left', V485} end(E355)); {'Idris.Prelude.Types.Right', E356} -> (fun (V486) -> (('un--preOptions'(V0, V1, V5))(V483)) end(E356)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E354)); {'Idris.Idris.CommandLine.OutputDir', E357} -> (fun (V487) -> fun (V488) -> begin (V489 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V0, {'Idris.Prelude.Types.Just', V487}, V488))), case V489 of {'Idris.Prelude.Types.Left', E358} -> (fun (V490) -> {'Idris.Prelude.Types.Left', V490} end(E358)); {'Idris.Prelude.Types.Right', E359} -> (fun (V491) -> (('un--preOptions'(V0, V1, V5))(V488)) end(E359)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E357)); {'Idris.Idris.CommandLine.Directory', E360} -> (fun (V492) -> fun (V493) -> begin (V495 = begin (V494 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V494} end), case V495 of {'Idris.Prelude.Types.Left', E361} -> (fun (V496) -> {'Idris.Prelude.Types.Left', V496} end(E361)); {'Idris.Prelude.Types.Right', E362} -> (fun (V497) -> begin (V538 = ('un--dirOption'(V0, V1, case V497 of {'Idris.Core.Context.MkDefs', E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392} -> (fun (V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527) -> case V502 of {'Idris.Core.Options.MkOptions', E393, E394, E395, E396, E397, E398, E399, E400, E401, E402} -> (fun (V528, V529, V530, V531, V532, V533, V534, V535, V536, V537) -> V528 end(E393, E394, E395, E396, E397, E398, E399, E400, E401, E402)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V492, V493))), case V538 of {'Idris.Prelude.Types.Left', E403} -> (fun (V539) -> {'Idris.Prelude.Types.Left', V539} end(E403)); {'Idris.Prelude.Types.Right', E404} -> (fun (V540) -> {'Idris.Prelude.Types.Right', 0} end(E404)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E362)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E360)); {'Idris.Idris.CommandLine.ListPackages'} -> (fun () -> fun (V541) -> begin (V542 = ('un--listPackages'(V0, V1, V541))), case V542 of {'Idris.Prelude.Types.Left', E405} -> (fun (V543) -> {'Idris.Prelude.Types.Left', V543} end(E405)); {'Idris.Prelude.Types.Right', E406} -> (fun (V544) -> {'Idris.Prelude.Types.Right', 0} end(E406)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Timing'} -> (fun () -> fun (V545) -> begin (V546 = ('Idris.Idris2.Core.Context':'un--setLogTimings'(V0, 1, V545))), case V546 of {'Idris.Prelude.Types.Left', E407} -> (fun (V547) -> {'Idris.Prelude.Types.Left', V547} end(E407)); {'Idris.Prelude.Types.Right', E408} -> (fun (V548) -> (('un--preOptions'(V0, V1, V5))(V545)) end(E408)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.DebugElabCheck'} -> (fun () -> fun (V549) -> begin (V550 = ('Idris.Idris2.Core.Context':'un--setDebugElabCheck'(V0, 1, V549))), case V550 of {'Idris.Prelude.Types.Left', E409} -> (fun (V551) -> {'Idris.Prelude.Types.Left', V551} end(E409)); {'Idris.Prelude.Types.Right', E410} -> (fun (V552) -> (('un--preOptions'(V0, V1, V5))(V549)) end(E410)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.AltErrorCount', E411} -> (fun (V553) -> fun (V554) -> begin (V584 = begin (V555 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V554))), case V555 of {'Idris.Prelude.Types.Left', E412} -> (fun (V556) -> {'Idris.Prelude.Types.Left', V556} end(E412)); {'Idris.Prelude.Types.Right', E413} -> (fun (V557) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V557 of {'Idris.Core.Options.MkSessionOpts', E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439} -> (fun (V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583) -> {'Idris.Core.Options.MkSessionOpts', V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V553, V578, V579, V580, V581, V582, V583} end(E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V554)) end(E413)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V584 of {'Idris.Prelude.Types.Left', E440} -> (fun (V585) -> {'Idris.Prelude.Types.Left', V585} end(E440)); {'Idris.Prelude.Types.Right', E441} -> (fun (V586) -> (('un--preOptions'(V0, V1, V5))(V554)) end(E441)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E411)); {'Idris.Idris.CommandLine.RunREPL', E442} -> (fun (V587) -> fun (V588) -> begin (V589 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V1, {'Idris.Idris.REPL.Opts.REPL', 1}, V588))), case V589 of {'Idris.Prelude.Types.Left', E443} -> (fun (V590) -> {'Idris.Prelude.Types.Left', V590} end(E443)); {'Idris.Prelude.Types.Right', E444} -> (fun (V591) -> begin (V621 = begin (V592 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V588))), case V592 of {'Idris.Prelude.Types.Left', E445} -> (fun (V593) -> {'Idris.Prelude.Types.Left', V593} end(E445)); {'Idris.Prelude.Types.Right', E446} -> (fun (V594) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V594 of {'Idris.Core.Options.MkSessionOpts', E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472} -> (fun (V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620) -> {'Idris.Core.Options.MkSessionOpts', V595, V596, 1, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620} end(E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V588)) end(E446)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V621 of {'Idris.Prelude.Types.Left', E473} -> (fun (V622) -> {'Idris.Prelude.Types.Left', V622} end(E473)); {'Idris.Prelude.Types.Right', E474} -> (fun (V623) -> (('un--preOptions'(V0, V1, V5))(V588)) end(E474)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E444)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E442)); {'Idris.Idris.CommandLine.FindIPKG'} -> (fun () -> fun (V624) -> begin (V654 = begin (V625 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V624))), case V625 of {'Idris.Prelude.Types.Left', E475} -> (fun (V626) -> {'Idris.Prelude.Types.Left', V626} end(E475)); {'Idris.Prelude.Types.Right', E476} -> (fun (V627) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V627 of {'Idris.Core.Options.MkSessionOpts', E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499, E500, E501, E502} -> (fun (V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652, V653) -> {'Idris.Core.Options.MkSessionOpts', V628, V629, V630, 1, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652, V653} end(E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499, E500, E501, E502)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V624)) end(E476)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V654 of {'Idris.Prelude.Types.Left', E503} -> (fun (V655) -> {'Idris.Prelude.Types.Left', V655} end(E503)); {'Idris.Prelude.Types.Right', E504} -> (fun (V656) -> (('un--preOptions'(V0, V1, V5))(V624)) end(E504)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.IgnoreMissingIPKG'} -> (fun () -> fun (V657) -> begin (V687 = begin (V658 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V657))), case V658 of {'Idris.Prelude.Types.Left', E505} -> (fun (V659) -> {'Idris.Prelude.Types.Left', V659} end(E505)); {'Idris.Prelude.Types.Right', E506} -> (fun (V660) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V660 of {'Idris.Core.Options.MkSessionOpts', E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527, E528, E529, E530, E531, E532} -> (fun (V661, V662, V663, V664, V665, V666, V667, V668, V669, V670, V671, V672, V673, V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684, V685, V686) -> {'Idris.Core.Options.MkSessionOpts', V661, V662, V663, V664, V665, V666, V667, V668, V669, 1, V671, V672, V673, V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684, V685, V686} end(E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527, E528, E529, E530, E531, E532)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V657)) end(E506)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V687 of {'Idris.Prelude.Types.Left', E533} -> (fun (V688) -> {'Idris.Prelude.Types.Left', V688} end(E533)); {'Idris.Prelude.Types.Right', E534} -> (fun (V689) -> (('un--preOptions'(V0, V1, V5))(V657)) end(E534)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.ChangedModules', E535} -> (fun (V690) -> fun (V691) -> begin (V721 = begin (V692 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V691))), case V692 of {'Idris.Prelude.Types.Left', E536} -> (fun (V693) -> {'Idris.Prelude.Types.Left', V693} end(E536)); {'Idris.Prelude.Types.Right', E537} -> (fun (V694) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V694 of {'Idris.Core.Options.MkSessionOpts', E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563} -> (fun (V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719, V720) -> {'Idris.Core.Options.MkSessionOpts', V695, V696, V697, V698, V699, V700, V701, V690, V703, V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719, V720} end(E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V691)) end(E537)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V721 of {'Idris.Prelude.Types.Left', E564} -> (fun (V722) -> {'Idris.Prelude.Types.Left', V722} end(E564)); {'Idris.Prelude.Types.Right', E565} -> (fun (V723) -> (('un--preOptions'(V0, V1, V5))(V691)) end(E565)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E535)); {'Idris.Idris.CommandLine.DumpCases', E566} -> (fun (V724) -> fun (V725) -> begin (V755 = begin (V726 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V725))), case V726 of {'Idris.Prelude.Types.Left', E567} -> (fun (V727) -> {'Idris.Prelude.Types.Left', V727} end(E567)); {'Idris.Prelude.Types.Right', E568} -> (fun (V728) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V728 of {'Idris.Core.Options.MkSessionOpts', E569, E570, E571, E572, E573, E574, E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594} -> (fun (V729, V730, V731, V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, V743, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, V754) -> {'Idris.Core.Options.MkSessionOpts', V729, V730, V731, V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, {'Idris.Prelude.Types.Just', V724}, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, V754} end(E569, E570, E571, E572, E573, E574, E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V725)) end(E568)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V755 of {'Idris.Prelude.Types.Left', E595} -> (fun (V756) -> {'Idris.Prelude.Types.Left', V756} end(E595)); {'Idris.Prelude.Types.Right', E596} -> (fun (V757) -> (('un--preOptions'(V0, V1, V5))(V725)) end(E596)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E566)); {'Idris.Idris.CommandLine.DumpLifted', E597} -> (fun (V758) -> fun (V759) -> begin (V789 = begin (V760 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V759))), case V760 of {'Idris.Prelude.Types.Left', E598} -> (fun (V761) -> {'Idris.Prelude.Types.Left', V761} end(E598)); {'Idris.Prelude.Types.Right', E599} -> (fun (V762) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V762 of {'Idris.Core.Options.MkSessionOpts', E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624, E625} -> (fun (V763, V764, V765, V766, V767, V768, V769, V770, V771, V772, V773, V774, V775, V776, V777, V778, V779, V780, V781, V782, V783, V784, V785, V786, V787, V788) -> {'Idris.Core.Options.MkSessionOpts', V763, V764, V765, V766, V767, V768, V769, V770, V771, V772, V773, V774, V775, V776, V777, {'Idris.Prelude.Types.Just', V758}, V779, V780, V781, V782, V783, V784, V785, V786, V787, V788} end(E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624, E625)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V759)) end(E599)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V789 of {'Idris.Prelude.Types.Left', E626} -> (fun (V790) -> {'Idris.Prelude.Types.Left', V790} end(E626)); {'Idris.Prelude.Types.Right', E627} -> (fun (V791) -> (('un--preOptions'(V0, V1, V5))(V759)) end(E627)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E597)); {'Idris.Idris.CommandLine.DumpANF', E628} -> (fun (V792) -> fun (V793) -> begin (V823 = begin (V794 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V793))), case V794 of {'Idris.Prelude.Types.Left', E629} -> (fun (V795) -> {'Idris.Prelude.Types.Left', V795} end(E629)); {'Idris.Prelude.Types.Right', E630} -> (fun (V796) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V796 of {'Idris.Core.Options.MkSessionOpts', E631, E632, E633, E634, E635, E636, E637, E638, E639, E640, E641, E642, E643, E644, E645, E646, E647, E648, E649, E650, E651, E652, E653, E654, E655, E656} -> (fun (V797, V798, V799, V800, V801, V802, V803, V804, V805, V806, V807, V808, V809, V810, V811, V812, V813, V814, V815, V816, V817, V818, V819, V820, V821, V822) -> {'Idris.Core.Options.MkSessionOpts', V797, V798, V799, V800, V801, V802, V803, V804, V805, V806, V807, V808, V809, V810, V811, V812, {'Idris.Prelude.Types.Just', V792}, V814, V815, V816, V817, V818, V819, V820, V821, V822} end(E631, E632, E633, E634, E635, E636, E637, E638, E639, E640, E641, E642, E643, E644, E645, E646, E647, E648, E649, E650, E651, E652, E653, E654, E655, E656)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V793)) end(E630)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V823 of {'Idris.Prelude.Types.Left', E657} -> (fun (V824) -> {'Idris.Prelude.Types.Left', V824} end(E657)); {'Idris.Prelude.Types.Right', E658} -> (fun (V825) -> (('un--preOptions'(V0, V1, V5))(V793)) end(E658)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E628)); {'Idris.Idris.CommandLine.DumpVMCode', E659} -> (fun (V826) -> fun (V827) -> begin (V857 = begin (V828 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V827))), case V828 of {'Idris.Prelude.Types.Left', E660} -> (fun (V829) -> {'Idris.Prelude.Types.Left', V829} end(E660)); {'Idris.Prelude.Types.Right', E661} -> (fun (V830) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V830 of {'Idris.Core.Options.MkSessionOpts', E662, E663, E664, E665, E666, E667, E668, E669, E670, E671, E672, E673, E674, E675, E676, E677, E678, E679, E680, E681, E682, E683, E684, E685, E686, E687} -> (fun (V831, V832, V833, V834, V835, V836, V837, V838, V839, V840, V841, V842, V843, V844, V845, V846, V847, V848, V849, V850, V851, V852, V853, V854, V855, V856) -> {'Idris.Core.Options.MkSessionOpts', V831, V832, V833, V834, V835, V836, V837, V838, V839, V840, V841, V842, V843, V844, V845, V846, V847, {'Idris.Prelude.Types.Just', V826}, V849, V850, V851, V852, V853, V854, V855, V856} end(E662, E663, E664, E665, E666, E667, E668, E669, E670, E671, E672, E673, E674, E675, E676, E677, E678, E679, E680, E681, E682, E683, E684, E685, E686, E687)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V827)) end(E661)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V857 of {'Idris.Prelude.Types.Left', E688} -> (fun (V858) -> {'Idris.Prelude.Types.Left', V858} end(E688)); {'Idris.Prelude.Types.Right', E689} -> (fun (V859) -> (('un--preOptions'(V0, V1, V5))(V827)) end(E689)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E659)); {'Idris.Idris.CommandLine.Logging', E690} -> (fun (V860) -> fun (V861) -> begin (V891 = begin (V862 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V861))), case V862 of {'Idris.Prelude.Types.Left', E691} -> (fun (V863) -> {'Idris.Prelude.Types.Left', V863} end(E691)); {'Idris.Prelude.Types.Right', E692} -> (fun (V864) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V864 of {'Idris.Core.Options.MkSessionOpts', E693, E694, E695, E696, E697, E698, E699, E700, E701, E702, E703, E704, E705, E706, E707, E708, E709, E710, E711, E712, E713, E714, E715, E716, E717, E718} -> (fun (V865, V866, V867, V868, V869, V870, V871, V872, V873, V874, V875, V876, V877, V878, V879, V880, V881, V882, V883, V884, V885, V886, V887, V888, V889, V890) -> {'Idris.Core.Options.MkSessionOpts', V865, V866, V867, V868, V869, V870, V871, V872, V873, V874, 1, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V860, V876)), V877, V878, V879, V880, V881, V882, V883, V884, V885, V886, V887, V888, V889, V890} end(E693, E694, E695, E696, E697, E698, E699, E700, E701, E702, E703, E704, E705, E706, E707, E708, E709, E710, E711, E712, E713, E714, E715, E716, E717, E718)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V861)) end(E692)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V891 of {'Idris.Prelude.Types.Left', E719} -> (fun (V892) -> {'Idris.Prelude.Types.Left', V892} end(E719)); {'Idris.Prelude.Types.Right', E720} -> (fun (V893) -> (('un--preOptions'(V0, V1, V5))(V861)) end(E720)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E690)); {'Idris.Idris.CommandLine.ConsoleWidth', E721} -> (fun (V894) -> fun (V895) -> begin (V896 = ('Idris.Idris2.Idris.REPL.Opts':'un--setConsoleWidth'(V1, V894, V895))), case V896 of {'Idris.Prelude.Types.Left', E722} -> (fun (V897) -> {'Idris.Prelude.Types.Left', V897} end(E722)); {'Idris.Prelude.Types.Right', E723} -> (fun (V898) -> (('un--preOptions'(V0, V1, V5))(V895)) end(E723)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E721)); {'Idris.Idris.CommandLine.Color', E724} -> (fun (V899) -> fun (V900) -> begin (V901 = ('Idris.Idris2.Idris.REPL.Opts':'un--setColor'(V1, V899, V900))), case V901 of {'Idris.Prelude.Types.Left', E725} -> (fun (V902) -> {'Idris.Prelude.Types.Left', V902} end(E725)); {'Idris.Prelude.Types.Right', E726} -> (fun (V903) -> (('un--preOptions'(V0, V1, V5))(V900)) end(E726)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E724)); {'Idris.Idris.CommandLine.WarningsAsErrors'} -> (fun () -> fun (V904) -> begin (V934 = begin (V905 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V904))), case V905 of {'Idris.Prelude.Types.Left', E727} -> (fun (V906) -> {'Idris.Prelude.Types.Left', V906} end(E727)); {'Idris.Prelude.Types.Right', E728} -> (fun (V907) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V907 of {'Idris.Core.Options.MkSessionOpts', E729, E730, E731, E732, E733, E734, E735, E736, E737, E738, E739, E740, E741, E742, E743, E744, E745, E746, E747, E748, E749, E750, E751, E752, E753, E754} -> (fun (V908, V909, V910, V911, V912, V913, V914, V915, V916, V917, V918, V919, V920, V921, V922, V923, V924, V925, V926, V927, V928, V929, V930, V931, V932, V933) -> {'Idris.Core.Options.MkSessionOpts', V908, V909, V910, V911, V912, V913, V914, V915, V916, V917, V918, V919, V920, V921, V922, V923, V924, V925, V926, V927, 1, V929, V930, V931, V932, V933} end(E729, E730, E731, E732, E733, E734, E735, E736, E737, E738, E739, E740, E741, E742, E743, E744, E745, E746, E747, E748, E749, E750, E751, E752, E753, E754)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V904)) end(E728)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V934 of {'Idris.Prelude.Types.Left', E755} -> (fun (V935) -> {'Idris.Prelude.Types.Left', V935} end(E755)); {'Idris.Prelude.Types.Right', E756} -> (fun (V936) -> (('un--preOptions'(V0, V1, V5))(V904)) end(E756)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.IgnoreShadowingWarnings'} -> (fun () -> fun (V937) -> begin (V967 = begin (V938 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V937))), case V938 of {'Idris.Prelude.Types.Left', E757} -> (fun (V939) -> {'Idris.Prelude.Types.Left', V939} end(E757)); {'Idris.Prelude.Types.Right', E758} -> (fun (V940) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V940 of {'Idris.Core.Options.MkSessionOpts', E759, E760, E761, E762, E763, E764, E765, E766, E767, E768, E769, E770, E771, E772, E773, E774, E775, E776, E777, E778, E779, E780, E781, E782, E783, E784} -> (fun (V941, V942, V943, V944, V945, V946, V947, V948, V949, V950, V951, V952, V953, V954, V955, V956, V957, V958, V959, V960, V961, V962, V963, V964, V965, V966) -> {'Idris.Core.Options.MkSessionOpts', V941, V942, V943, V944, V945, V946, V947, V948, V949, V950, V951, V952, V953, V954, V955, V956, V957, V958, V959, V960, V961, 0, V963, V964, V965, V966} end(E759, E760, E761, E762, E763, E764, E765, E766, E767, E768, E769, E770, E771, E772, E773, E774, E775, E776, E777, E778, E779, E780, E781, E782, E783, E784)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V937)) end(E758)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V967 of {'Idris.Prelude.Types.Left', E785} -> (fun (V968) -> {'Idris.Prelude.Types.Left', V968} end(E785)); {'Idris.Prelude.Types.Right', E786} -> (fun (V969) -> (('un--preOptions'(V0, V1, V5))(V937)) end(E786)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.HashesInsteadOfModTime'} -> (fun () -> fun (V970) -> begin (V971 = ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"-Xcheck-hashes disabled (see issue #1935)"/utf8>>}, V970))), case V971 of {'Idris.Prelude.Types.Left', E787} -> (fun (V972) -> {'Idris.Prelude.Types.Left', V972} end(E787)); {'Idris.Prelude.Types.Right', E788} -> (fun (V973) -> begin (V1003 = begin (V974 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V970))), case V974 of {'Idris.Prelude.Types.Left', E789} -> (fun (V975) -> {'Idris.Prelude.Types.Left', V975} end(E789)); {'Idris.Prelude.Types.Right', E790} -> (fun (V976) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V976 of {'Idris.Core.Options.MkSessionOpts', E791, E792, E793, E794, E795, E796, E797, E798, E799, E800, E801, E802, E803, E804, E805, E806, E807, E808, E809, E810, E811, E812, E813, E814, E815, E816} -> (fun (V977, V978, V979, V980, V981, V982, V983, V984, V985, V986, V987, V988, V989, V990, V991, V992, V993, V994, V995, V996, V997, V998, V999, V1000, V1001, V1002) -> {'Idris.Core.Options.MkSessionOpts', V977, V978, V979, V980, V981, V982, V983, V984, V985, V986, V987, V988, V989, V990, V991, V992, V993, V994, V995, V996, V997, V998, 1, V1000, V1001, V1002} end(E791, E792, E793, E794, E795, E796, E797, E798, E799, E800, E801, E802, E803, E804, E805, E806, E807, E808, E809, E810, E811, E812, E813, E814, E815, E816)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V970)) end(E790)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V1003 of {'Idris.Prelude.Types.Left', E817} -> (fun (V1004) -> {'Idris.Prelude.Types.Left', V1004} end(E817)); {'Idris.Prelude.Types.Right', E818} -> (fun (V1005) -> (('un--preOptions'(V0, V1, V5))(V970)) end(E818)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E788)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.CaseTreeHeuristics'} -> (fun () -> fun (V1006) -> begin (V1036 = begin (V1007 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V1006))), case V1007 of {'Idris.Prelude.Types.Left', E819} -> (fun (V1008) -> {'Idris.Prelude.Types.Left', V1008} end(E819)); {'Idris.Prelude.Types.Right', E820} -> (fun (V1009) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1009 of {'Idris.Core.Options.MkSessionOpts', E821, E822, E823, E824, E825, E826, E827, E828, E829, E830, E831, E832, E833, E834, E835, E836, E837, E838, E839, E840, E841, E842, E843, E844, E845, E846} -> (fun (V1010, V1011, V1012, V1013, V1014, V1015, V1016, V1017, V1018, V1019, V1020, V1021, V1022, V1023, V1024, V1025, V1026, V1027, V1028, V1029, V1030, V1031, V1032, V1033, V1034, V1035) -> {'Idris.Core.Options.MkSessionOpts', V1010, V1011, V1012, V1013, V1014, V1015, V1016, V1017, V1018, V1019, V1020, V1021, V1022, V1023, V1024, V1025, V1026, V1027, V1028, V1029, V1030, V1031, V1032, V1033, V1034, 1} end(E821, E822, E823, E824, E825, E826, E827, E828, E829, E830, E831, E832, E833, E834, E835, E836, E837, E838, E839, E840, E841, E842, E843, E844, E845, E846)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1006)) end(E820)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V1036 of {'Idris.Prelude.Types.Left', E847} -> (fun (V1037) -> {'Idris.Prelude.Types.Left', V1037} end(E847)); {'Idris.Prelude.Types.Right', E848} -> (fun (V1038) -> (('un--preOptions'(V0, V1, V5))(V1006)) end(E848)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.IncrementalCG', E849} -> (fun (V1039) -> fun (V1040) -> begin (V1042 = begin (V1041 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V1041} end), case V1042 of {'Idris.Prelude.Types.Left', E850} -> (fun (V1043) -> {'Idris.Prelude.Types.Left', V1043} end(E850)); {'Idris.Prelude.Types.Right', E851} -> (fun (V1044) -> begin (V1045 = ('un--setIncrementalCG'(V0, V1, 1, V1039, V1040))), case V1045 of {'Idris.Prelude.Types.Left', E852} -> (fun (V1046) -> {'Idris.Prelude.Types.Left', V1046} end(E852)); {'Idris.Prelude.Types.Right', E853} -> (fun (V1047) -> (('un--preOptions'(V0, V1, V5))(V1040)) end(E853)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E851)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E849)); {'Idris.Idris.CommandLine.WholeProgram'} -> (fun () -> fun (V1048) -> begin (V1078 = begin (V1049 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V1048))), case V1049 of {'Idris.Prelude.Types.Left', E854} -> (fun (V1050) -> {'Idris.Prelude.Types.Left', V1050} end(E854)); {'Idris.Prelude.Types.Right', E855} -> (fun (V1051) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1051 of {'Idris.Core.Options.MkSessionOpts', E856, E857, E858, E859, E860, E861, E862, E863, E864, E865, E866, E867, E868, E869, E870, E871, E872, E873, E874, E875, E876, E877, E878, E879, E880, E881} -> (fun (V1052, V1053, V1054, V1055, V1056, V1057, V1058, V1059, V1060, V1061, V1062, V1063, V1064, V1065, V1066, V1067, V1068, V1069, V1070, V1071, V1072, V1073, V1074, V1075, V1076, V1077) -> {'Idris.Core.Options.MkSessionOpts', V1052, V1053, V1054, V1055, V1056, V1057, V1058, V1059, V1060, V1061, V1062, V1063, V1064, V1065, V1066, V1067, V1068, V1069, V1070, V1071, V1072, V1073, V1074, V1075, 1, V1077} end(E856, E857, E858, E859, E860, E861, E862, E863, E864, E865, E866, E867, E868, E869, E870, E871, E872, E873, E874, E875, E876, E877, E878, E879, E880, E881)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1048)) end(E855)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V1078 of {'Idris.Prelude.Types.Left', E882} -> (fun (V1079) -> {'Idris.Prelude.Types.Left', V1079} end(E882)); {'Idris.Prelude.Types.Right', E883} -> (fun (V1080) -> (('un--preOptions'(V0, V1, V5))(V1048)) end(E883)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.BashCompletion', E884, E885} -> (fun (V1081, V1082) -> fun (V1083) -> begin (V1084 = (('un--opts'(V0, V1081, V1082))(V1083))), case V1084 of {'Idris.Prelude.Types.Left', E886} -> (fun (V1085) -> {'Idris.Prelude.Types.Left', V1085} end(E886)); {'Idris.Prelude.Types.Right', E887} -> (fun (V1086) -> begin (V1115 = begin (V1114 = (('Idris.Idris2.Prelude.IO':'un--putStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1087) -> fun (V1088) -> fun (V1089) -> fun (V1090) -> fun (V1091) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1089, V1090, V1091)) end end end end end, fun (V1092) -> fun (V1093) -> fun (V1094) -> V1093 end end end, fun (V1095) -> fun (V1096) -> fun (V1097) -> fun (V1098) -> fun (V1099) -> begin (V1100 = (V1097(V1099))), begin (V1101 = (V1098(V1099))), (V1100(V1101)) end end end end end end end}, fun (V1102) -> fun (V1103) -> fun (V1104) -> fun (V1105) -> fun (V1106) -> begin (V1107 = (V1104(V1106))), ((V1105(V1107))(V1106)) end end end end end end, fun (V1108) -> fun (V1109) -> fun (V1110) -> begin (V1111 = (V1109(V1110))), (V1111(V1110)) end end end end}, fun (V1112) -> fun (V1113) -> V1113 end end}, ('Idris.Idris2.Data.String':'un--fastUnlines'(V1086))))(V1083))), {'Idris.Prelude.Types.Right', V1114} end), case V1115 of {'Idris.Prelude.Types.Left', E888} -> (fun (V1116) -> {'Idris.Prelude.Types.Left', V1116} end(E888)); {'Idris.Prelude.Types.Right', E889} -> (fun (V1117) -> {'Idris.Prelude.Types.Right', 0} end(E889)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E887)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E884, E885)); {'Idris.Idris.CommandLine.BashCompletionScript', E890} -> (fun (V1118) -> fun (V1119) -> begin (V1148 = begin (V1147 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1120) -> fun (V1121) -> fun (V1122) -> fun (V1123) -> fun (V1124) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V1122, V1123, V1124)) end end end end end, fun (V1125) -> fun (V1126) -> fun (V1127) -> V1126 end end end, fun (V1128) -> fun (V1129) -> fun (V1130) -> fun (V1131) -> fun (V1132) -> begin (V1133 = (V1130(V1132))), begin (V1134 = (V1131(V1132))), (V1133(V1134)) end end end end end end end}, fun (V1135) -> fun (V1136) -> fun (V1137) -> fun (V1138) -> fun (V1139) -> begin (V1140 = (V1137(V1139))), ((V1138(V1140))(V1139)) end end end end end end, fun (V1141) -> fun (V1142) -> fun (V1143) -> begin (V1144 = (V1142(V1143))), (V1144(V1143)) end end end end}, fun (V1145) -> fun (V1146) -> V1146 end end}, ('un--completionScript'(V1118))))(V1119))), {'Idris.Prelude.Types.Right', V1147} end), case V1148 of {'Idris.Prelude.Types.Left', E891} -> (fun (V1149) -> {'Idris.Prelude.Types.Left', V1149} end(E891)); {'Idris.Prelude.Types.Right', E892} -> (fun (V1150) -> {'Idris.Prelude.Types.Right', 0} end(E892)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E890)); {'Idris.Idris.CommandLine.Total'} -> (fun () -> fun (V1151) -> begin (V1181 = begin (V1152 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V1151))), case V1152 of {'Idris.Prelude.Types.Left', E893} -> (fun (V1153) -> {'Idris.Prelude.Types.Left', V1153} end(E893)); {'Idris.Prelude.Types.Right', E894} -> (fun (V1154) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V1154 of {'Idris.Core.Options.MkSessionOpts', E895, E896, E897, E898, E899, E900, E901, E902, E903, E904, E905, E906, E907, E908, E909, E910, E911, E912, E913, E914, E915, E916, E917, E918, E919, E920} -> (fun (V1155, V1156, V1157, V1158, V1159, V1160, V1161, V1162, V1163, V1164, V1165, V1166, V1167, V1168, V1169, V1170, V1171, V1172, V1173, V1174, V1175, V1176, V1177, V1178, V1179, V1180) -> {'Idris.Core.Options.MkSessionOpts', V1155, 0, V1157, V1158, V1159, V1160, V1161, V1162, V1163, V1164, V1165, V1166, V1167, V1168, V1169, V1170, V1171, V1172, V1173, V1174, V1175, V1176, V1177, V1178, V1179, V1180} end(E895, E896, E897, E898, E899, E900, E901, E902, E903, E904, E905, E906, E907, E908, E909, E910, E911, E912, E913, E914, E915, E916, E917, E918, E919, E920)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1151)) end(E894)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V1181 of {'Idris.Prelude.Types.Left', E921} -> (fun (V1182) -> {'Idris.Prelude.Types.Left', V1182} end(E921)); {'Idris.Prelude.Types.Right', E922} -> (fun (V1183) -> (('un--preOptions'(V0, V1, V5))(V1151)) end(E922)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('un--preOptions'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--postOptions'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', 1} end; _ -> case V5 of {'Idris.Idris.REPL.Common.ErrorLoadingFile', E27, E28} -> (fun (V8, V9) -> case V6 of [E56 | E57] -> (fun (V10, V11) -> case V10 of {'Idris.Idris.CommandLine.OutputFile', E85} -> (fun (V12) -> fun (V13) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E86} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V16) -> {'Idris.Prelude.Types.Right', 0} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V11)), V13))), case V17 of {'Idris.Prelude.Types.Left', E88} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V19) -> {'Idris.Prelude.Types.Right', 0} end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E85)); _ -> case V6 of [E58 | E59] -> (fun (V20, V21) -> case V20 of {'Idris.Idris.CommandLine.OutputFile', E60} -> (fun (V22) -> fun (V23) -> begin (V28 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V24) -> case V24 of {'Idris.Prelude.Types.Left', E61} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V26) -> {'Idris.Prelude.Types.Right', 0} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V27) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"main"/utf8>>}}}, V22, V27)) end, V23))), case V28 of {'Idris.Prelude.Types.Left', E63} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V30) -> begin (V34 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V31) -> case V31 of {'Idris.Prelude.Types.Left', E65} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V33) -> {'Idris.Prelude.Types.Right', 0} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)), V23))), case V34 of {'Idris.Prelude.Types.Left', E67} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V36) -> {'Idris.Prelude.Types.Right', 0} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60)); {'Idris.Idris.CommandLine.ExecFn', E69} -> (fun (V37) -> fun (V38) -> begin (V43 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E70} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V41) -> {'Idris.Prelude.Types.Right', 0} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V37}}}, V42)) end, V38))), case V43 of {'Idris.Prelude.Types.Left', E72} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V45) -> begin (V49 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E74} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V48) -> {'Idris.Prelude.Types.Right', 0} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)), V38))), case V49 of {'Idris.Prelude.Types.Left', E76} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V51) -> {'Idris.Prelude.Types.Right', 0} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E69)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V52) -> begin (V56 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V53) -> case V53 of {'Idris.Prelude.Types.Left', E78} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V55) -> {'Idris.Prelude.Types.Right', 0} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)), V52))), case V56 of {'Idris.Prelude.Types.Left', E80} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V58) -> {'Idris.Prelude.Types.Right', 0} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.RunREPL', E82} -> (fun (V59) -> fun (V60) -> begin (V61 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V59, V60))), case V61 of {'Idris.Prelude.Types.Left', E83} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V63) -> {'Idris.Prelude.Types.Right', 0} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E82)); _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)) end end(E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56, E57)); _ -> case V6 of [E29 | E30] -> (fun (V64, V65) -> case V64 of {'Idris.Idris.CommandLine.OutputFile', E31} -> (fun (V66) -> fun (V67) -> begin (V72 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V68) -> case V68 of {'Idris.Prelude.Types.Left', E32} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V70) -> {'Idris.Prelude.Types.Right', 0} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V71) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"main"/utf8>>}}}, V66, V71)) end, V67))), case V72 of {'Idris.Prelude.Types.Left', E34} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V74) -> begin (V78 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V75) -> case V75 of {'Idris.Prelude.Types.Left', E36} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V77) -> {'Idris.Prelude.Types.Right', 0} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)), V67))), case V78 of {'Idris.Prelude.Types.Left', E38} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V80) -> {'Idris.Prelude.Types.Right', 0} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); {'Idris.Idris.CommandLine.ExecFn', E40} -> (fun (V81) -> fun (V82) -> begin (V87 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V83) -> case V83 of {'Idris.Prelude.Types.Left', E41} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V85) -> {'Idris.Prelude.Types.Right', 0} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V86) -> ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V81}}}, V86)) end, V82))), case V87 of {'Idris.Prelude.Types.Left', E43} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V89) -> begin (V93 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V90) -> case V90 of {'Idris.Prelude.Types.Left', E45} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V92) -> {'Idris.Prelude.Types.Right', 0} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)), V82))), case V93 of {'Idris.Prelude.Types.Left', E47} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V95) -> {'Idris.Prelude.Types.Right', 0} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V96) -> begin (V100 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E49} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V99) -> {'Idris.Prelude.Types.Right', 0} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)), V96))), case V100 of {'Idris.Prelude.Types.Left', E51} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V102) -> {'Idris.Prelude.Types.Right', 0} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.RunREPL', E53} -> (fun (V103) -> fun (V104) -> begin (V105 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V103, V104))), case V105 of {'Idris.Prelude.Types.Left', E54} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V107) -> {'Idris.Prelude.Types.Right', 0} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53)); _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28)); _ -> case V6 of [E0 | E1] -> (fun (V108, V109) -> case V108 of {'Idris.Idris.CommandLine.OutputFile', E2} -> (fun (V110) -> fun (V111) -> begin (V116 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V112) -> case V112 of {'Idris.Prelude.Types.Left', E3} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V114) -> {'Idris.Prelude.Types.Right', 0} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V115) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"main"/utf8>>}}}, V110, V115)) end, V111))), case V116 of {'Idris.Prelude.Types.Left', E5} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V118) -> begin (V122 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V119) -> case V119 of {'Idris.Prelude.Types.Left', E7} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V121) -> {'Idris.Prelude.Types.Right', 0} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)), V111))), case V122 of {'Idris.Prelude.Types.Left', E9} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V124) -> {'Idris.Prelude.Types.Right', 0} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); {'Idris.Idris.CommandLine.ExecFn', E11} -> (fun (V125) -> fun (V126) -> begin (V131 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V127) -> case V127 of {'Idris.Prelude.Types.Left', E12} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V129) -> {'Idris.Prelude.Types.Right', 0} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V130) -> ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V125}}}, V130)) end, V126))), case V131 of {'Idris.Prelude.Types.Left', E14} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V133) -> begin (V137 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V134) -> case V134 of {'Idris.Prelude.Types.Left', E16} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V136) -> {'Idris.Prelude.Types.Right', 0} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)), V126))), case V137 of {'Idris.Prelude.Types.Left', E18} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V139) -> {'Idris.Prelude.Types.Right', 0} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V140) -> begin (V144 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V141) -> case V141 of {'Idris.Prelude.Types.Left', E20} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V143) -> {'Idris.Prelude.Types.Right', 0} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)), V140))), case V144 of {'Idris.Prelude.Types.Left', E22} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V146) -> {'Idris.Prelude.Types.Right', 0} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.RunREPL', E24} -> (fun (V147) -> fun (V148) -> begin (V149 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V147, V148))), case V149 of {'Idris.Prelude.Types.Left', E25} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V151) -> {'Idris.Prelude.Types.Right', 0} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24)); _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--pkgDir'(V0) -> ('case--pkgDir-3434'(V0, ('Idris.Idris2.Libraries.Data.List1':'un--unsnoc'(('Idris.Idris2.Data.String':'un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $-)) end, V0)))))).
'un--opts'(V0, V1, V2) -> case V1 of <<"--"/utf8>> -> case V2 of <<"idris2"/utf8>> -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'())} end; _ -> case V2 of <<"--cg"/utf8>> -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E62} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V7))} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('un--codegens'(V0, V8)) end, V4)) end; <<"--codegen"/utf8>> -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E64} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V12))} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> ('un--codegens'(V0, V13)) end, V9)) end; <<"-p"/utf8>> -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E66} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V17) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> case V18 of {'Idris.Idris.SetOptions.MkPkgDir', E68, E69, E70} -> (fun (V19, V20, V21) -> V20 end(E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V17))))} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V22) -> ('un--findPackages'(V0, V22)) end, V14)) end; <<"--package"/utf8>> -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V24) -> case V24 of {'Idris.Prelude.Types.Left', E71} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> case V27 of {'Idris.Idris.SetOptions.MkPkgDir', E73, E74, E75} -> (fun (V28, V29, V30) -> V29 end(E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V26))))} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V31) -> ('un--findPackages'(V0, V31)) end, V23)) end; <<"--log"/utf8>> -> fun (V32) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('un--logLevels'())))} end; _ -> case V1 of <<"--"/utf8>> -> fun (V33) -> case V2 of <<"-o"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--source-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--build-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; _ -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E50} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V36) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V36))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V37) -> ('un--findIpkg'(V0, V37)) end, V33)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V38) -> case V38 of {'Idris.Prelude.Types.Left', E52} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V40) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V40))} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V41) -> ('un--findIpkg'(V0, V41)) end, V33)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E54} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V44) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V44))} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> ('un--findIpkg'(V0, V45)) end, V33)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E56} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V48) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V48))} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V49) -> ('un--findIpkg'(V0, V49)) end, V33)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V50) -> case V50 of {'Idris.Prelude.Types.Left', E58} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V52) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V52))} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V53) -> ('un--findIpkg'(V0, V53)) end, V33)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V54) -> case V54 of {'Idris.Prelude.Types.Left', E60} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V56))} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V57) -> ('un--findIpkg'(V0, V57)) end, V33)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V60, V61)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end; _ -> fun (V62) -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V63) -> case V63 of {'Idris.Prelude.Types.Left', E38} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V65) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V65))} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('un--findIpkg'(V0, V66)) end, V62)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V67) -> case V67 of {'Idris.Prelude.Types.Left', E40} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V69) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V69))} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V70) -> ('un--findIpkg'(V0, V70)) end, V62)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V71) -> case V71 of {'Idris.Prelude.Types.Left', E42} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V73))} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V74) -> ('un--findIpkg'(V0, V74)) end, V62)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V75) -> case V75 of {'Idris.Prelude.Types.Left', E44} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V77) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V77))} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V78) -> ('un--findIpkg'(V0, V78)) end, V62)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V79) -> case V79 of {'Idris.Prelude.Types.Left', E46} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V81) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V81))} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V82) -> ('un--findIpkg'(V0, V82)) end, V62)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V83) -> case V83 of {'Idris.Prelude.Types.Left', E48} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V85) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V85))} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V86) -> ('un--findIpkg'(V0, V86)) end, V62)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V89, V90)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end end; _ -> case V2 of <<"--cg"/utf8>> -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V92) -> case V92 of {'Idris.Prelude.Types.Left', E24} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V94) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V94))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V95) -> ('un--codegens'(V0, V95)) end, V91)) end; <<"--codegen"/utf8>> -> fun (V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E26} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V99) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V99))} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V100) -> ('un--codegens'(V0, V100)) end, V96)) end; <<"-p"/utf8>> -> fun (V101) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V102) -> case V102 of {'Idris.Prelude.Types.Left', E28} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V104) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V105) -> case V105 of {'Idris.Idris.SetOptions.MkPkgDir', E30, E31, E32} -> (fun (V106, V107, V108) -> V107 end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V104))))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V109) -> ('un--findPackages'(V0, V109)) end, V101)) end; <<"--package"/utf8>> -> fun (V110) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V111) -> case V111 of {'Idris.Prelude.Types.Left', E33} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V113) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V114) -> case V114 of {'Idris.Idris.SetOptions.MkPkgDir', E35, E36, E37} -> (fun (V115, V116, V117) -> V116 end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V113))))} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V118) -> ('un--findPackages'(V0, V118)) end, V110)) end; <<"--log"/utf8>> -> fun (V119) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('un--logLevels'())))} end; _ -> case V1 of <<"--"/utf8>> -> fun (V120) -> case V2 of <<"-o"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--source-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--build-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; _ -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V121) -> case V121 of {'Idris.Prelude.Types.Left', E12} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V123))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V124) -> ('un--findIpkg'(V0, V124)) end, V120)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V125) -> case V125 of {'Idris.Prelude.Types.Left', E14} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V127) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V127))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V128) -> ('un--findIpkg'(V0, V128)) end, V120)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V129) -> case V129 of {'Idris.Prelude.Types.Left', E16} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V131) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V131))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V132) -> ('un--findIpkg'(V0, V132)) end, V120)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V133) -> case V133 of {'Idris.Prelude.Types.Left', E18} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V135) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V135))} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V136) -> ('un--findIpkg'(V0, V136)) end, V120)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V137) -> case V137 of {'Idris.Prelude.Types.Left', E20} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V139) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V139))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V140) -> ('un--findIpkg'(V0, V140)) end, V120)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V141) -> case V141 of {'Idris.Prelude.Types.Left', E22} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V143) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V143))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V144) -> ('un--findIpkg'(V0, V144)) end, V120)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V145, V146)) end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V147, V148)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end; _ -> fun (V149) -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V150) -> case V150 of {'Idris.Prelude.Types.Left', E0} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V152) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V152))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V153) -> ('un--findIpkg'(V0, V153)) end, V149)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V154) -> case V154 of {'Idris.Prelude.Types.Left', E2} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V156) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V156))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V157) -> ('un--findIpkg'(V0, V157)) end, V149)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V158) -> case V158 of {'Idris.Prelude.Types.Left', E4} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V160) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V160))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V161) -> ('un--findIpkg'(V0, V161)) end, V149)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V162) -> case V162 of {'Idris.Prelude.Types.Left', E6} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V164) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V164))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V165) -> ('un--findIpkg'(V0, V165)) end, V149)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V166) -> case V166 of {'Idris.Prelude.Types.Left', E8} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V168) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V168))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V169) -> ('un--findIpkg'(V0, V169)) end, V149)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V170) -> case V170 of {'Idris.Prelude.Types.Left', E10} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V172) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V172))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V173) -> ('un--findIpkg'(V0, V173)) end, V149)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V174, V175)) end end, fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V176, V177)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end end.
'un--logLevels'() -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> ('Idris.Idris2.Builtin':'un--fst'(V0)) end, ('Idris.Idris2.Core.Options.Log':'un--knownTopics'()))), fun (V1) -> ('nested--12938-4234--in--un--prefixes'(('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.String':'un--split'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $.)) end, V1)))))) end)).
'un--localPackageDir'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}))(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E4} -> (fun (V37) -> begin (V88 = case V5 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> case V42 of {'Idris.Core.Options.MkOptions', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> case V68 of {'Idris.Core.Options.MkDirs', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V81 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V37, V88))} end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--listPackages'(V0, V1, V2) -> begin (V15 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--sortBy'(fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Basics':'un--on'(fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V8, V9)) end end, fun (V10) -> case V10 of {'Idris.Idris.SetOptions.MkPkgDir', E2, E3, E4} -> (fun (V11, V12, V13) -> V12 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6, V7)) end end, V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V14) -> ('un--findPackages'(V0, V14)) end, V2))), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('nested--12723-4020--in--un--pkgDesc'(V1, V0, V18)), V19)) end end, V17, V2)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--ideModeSocket'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IdeModeSocket', E2} -> (fun (V3) -> 1 end(E2)); _ -> ('un--ideModeSocket'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ideMode'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IdeMode'} -> (fun () -> 1 end()); _ -> ('un--ideMode'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--globalPackageDir'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V36 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V51 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Libraries.Data.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'())))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getPackageDirs'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.Directory':'un--listDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('un--pkgDir'(V31)) end, V30)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V32) -> [] end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findPackages'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V10 = begin (V6 = ('un--globalPackageDir'(V0, V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = (('un--visiblePackages'(V8))(V1))), {'Idris.Prelude.Types.Right', V9} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V63 = case V5 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V17 of {'Idris.Core.Options.MkOptions', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> case V43 of {'Idris.Core.Options.MkDirs', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V60 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V81 = begin (V80 = (('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> V70 end end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), begin (V78 = (V75(V76))), (V77(V78)) end end end end end end end}, fun (V79) -> ('un--visiblePackages'(V79)) end, V63))(V1))), {'Idris.Prelude.Types.Right', V80} end), case V81 of {'Idris.Prelude.Types.Left', E56} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V83) -> begin (V88 = begin (V84 = ('un--localPackageDir'(V0, V1))), case V84 of {'Idris.Prelude.Types.Left', E58} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V86) -> begin (V87 = (('un--visiblePackages'(V86))(V1))), {'Idris.Prelude.Types.Right', V87} end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V88 of {'Idris.Prelude.Types.Left', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V90) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'(V83)), V90))))} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findIpkg'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Just', E2} -> (fun (V33) -> begin (V62 = begin (V61 = (('Idris.Idris2.Erlang.System.Directory':'un--listDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> V40 end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), begin (V48 = (V45(V46))), (V47(V48)) end end end end end end end}, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), ((V52(V54))(V53)) end end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V56(V57))), (V58(V57)) end end end end}, fun (V59) -> fun (V60) -> V60 end end}, V33))(V1))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E3} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V64) -> case V64 of {'Idris.Prelude.Types.Right', E5} -> (fun (V65) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V66) -> ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<".ipkg"/utf8>>, V66)) end, V65))} end(E5)); {'Idris.Prelude.Types.Left', E6} -> (fun (V67) -> {'Idris.Prelude.Types.Right', []} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dirOption'(V0, V1, V2, V3, V4) -> case V3 of 0 -> begin (V42 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V2 of {'Idris.Core.Options.MkDirs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V37 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Libraries.Data.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'())))))))))(V4))), {'Idris.Prelude.Types.Right', V42} end; 2 -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Options':'un--toString'(V2)))), V4)); 1 -> begin (V70 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}, ('Idris.Idris2.IdrisPaths':'un--yprefix'())))(V4))), {'Idris.Prelude.Types.Right', V70} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--completionScript'(V0) -> begin (V1 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, V0))), ('Idris.Idris2.Data.String':'un--fastUnlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"()"/utf8>>)) | [<<"{"/utf8>> | [<<"  ED=$([ -z $2 ] && echo \x{22}--\x{22} || echo $2)"/utf8>> | [<<"  COMPREPLY=($(idris2 --bash-completion $ED $3))"/utf8>> | [<<"}"/utf8>> | [<<""/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"complete -F "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<" -o default idris2"/utf8>>)))) | []]]]]]]])) end.
'un--codegens'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('Idris.Idris2.Builtin':'un--fst'(V5)) end, ('Idris.Idris2.Core.Options':'un--availableCGs'(case V4 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V36) -> begin (V37 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V37} end end, V1)).
'un--candidateDirs'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V9) -> ('nested--12212-3538--in--un--checkBounds'(V2, V1, V0, V9)) end, V8)) end, fun (V10) -> ('un--getPackageDirs'(V0, V10)) end)).
'un--addPkgDir'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('un--globalPackageDir'(V0, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('un--localPackageDir'(V0, V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V15 = begin (V14 = (('un--candidateDirs'(V13, V1, V2))(V3))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V19 = begin (V18 = (('un--candidateDirs'(V10, V1, V2))(V3))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V72 = case V7 of {'Idris.Core.Context.MkDefs', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> case V26 of {'Idris.Core.Options.MkOptions', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V52 of {'Idris.Core.Options.MkDirs', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V69 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V90 = begin (V89 = (('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> V79 end end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V83(V85))), begin (V87 = (V84(V85))), (V86(V87)) end end end end end end end}, fun (V88) -> ('un--candidateDirs'(V88, V1, V2)) end, V72))(V3))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E60} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V92) -> begin (V121 = case ('Idris.Idris2.Data.List':'un--isNil'(V17)) of 1 -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V21, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V95, V96, V97)) end end end end end, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V100, V101, V102)) end end end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V104)) end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V108, V109, V110, V111)) end end end end end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V113)) end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V116, V117, V118)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V119, V120)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V92)))); 0 -> V17; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V142 = ('Idris.Idris2.Data.List':'un--sortBy'(fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V124) -> fun (V125) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--==_Eq_PkgVersion'(V124, V125)) end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--/=_Eq_PkgVersion'(V126, V127)) end end}, fun (V128) -> fun (V129) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--compare_Ord_PkgVersion'(V128, V129)) end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--<_Ord_PkgVersion'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Idris.Package.Types':'dn--un-->_Ord_PkgVersion'(V132, V133)) end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--<=_Ord_PkgVersion'(V134, V135)) end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Idris.Package.Types':'dn--un-->=_Ord_PkgVersion'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--max_Ord_PkgVersion'(V138, V139)) end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--min_Ord_PkgVersion'(V140, V141)) end end}, ('Idris.Idris2.Builtin':'un--snd'(V123)), ('Idris.Idris2.Builtin':'un--snd'(V122)))) end end, V121))), case V142 of [] -> case case V7 of {'Idris.Core.Context.MkDefs', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172) -> case V147 of {'Idris.Core.Options.MkOptions', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V173, V174, V175, V176, V177, V178, V179, V180, V181, V182) -> case V175 of {'Idris.Core.Options.MkSessionOpts', E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127} -> (fun (V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208) -> V192 end(E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantFindPackage', ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersionBounds'(V2)), <<")"/utf8>>))))))}, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E128 | E129] -> (fun (V209, V210) -> case V209 of {'Idris.Builtin.MkPair', E130, E131} -> (fun (V211, V212) -> ('Idris.Idris2.Core.Context':'un--addExtraDir'(V0, V211, V3)) end(E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
