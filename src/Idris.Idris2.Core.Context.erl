-module('Idris.Idris2.Core.Context').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkTimer-20369'/4,
  'case--addTransform-15084'/6,
  'case--case block in setExternal-14346'/8,
  'case--case block in setUniqueSearch-14210'/8,
  'case--aliasName-10348'/4,
  'case--getSimilarNames-9960'/3,
  'case--commitCtxt-4878'/2,
  'case--lookupCtxtName-4721'/3,
  'case--lookupCtxtExact-4149'/4,
  'case--returnDef-3984'/3,
  'case--addAlias-3489'/5,
  'case--addPossible-3428'/4,
  'nested--21785-16396--in--un--visible'/3,
  'nested--11341-6792--in--un--trimNSpat'/7,
  'nested--14557-9855--in--un--showNames'/5,
  'nested--11342-6845--in--un--restoreNSpat'/7,
  'nested--11016-6637--in--un--resolvedNamesPat'/7,
  'nested--8789-4416--in--un--resn'/3,
  'nested--14372-9689--in--un--resetElab'/2,
  'nested--23155-17730--in--un--resetCtxt'/2,
  'nested--18245-13182--in--un--notHidden'/7,
  'nested--25752-20205--in--un--nano'/0,
  'nested--8789-4417--in--un--lookupPossibles'/4,
  'nested--15419-10648--in--un--isHole'/4,
  'nested--18245-13183--in--un--isDefault'/5,
  'nested--11553-7019--in--un--insertAll'/5,
  'nested--11552-6987--in--un--insertAll'/5,
  'nested--24902-19392--in--un--go'/5,
  'nested--18932-13821--in--un--getPos'/7,
  'nested--21077-15730--in--un--getDir'/3,
  'nested--11015-6497--in--un--fullNamesPat'/7,
  'nested--15027-10288--in--un--findAlias'/3,
  'nested--25992-20436--in--un--drop'/5,
  'nested--18245-13184--in--un--direct'/5,
  'nested--9277-4848--in--un--commitStaged'/3,
  'nested--25992-20435--in--un--addMod'/6,
  'dn--un--trimNS_StripNamespace_GlobalDef'/2,
  'dn--un--trimNS_StripNamespace_Def'/2,
  'dn--un--show_Show_BuiltinType'/1,
  'dn--un--showPrec_Show_BuiltinType'/2,
  'dn--un--restoreNS_StripNamespace_GlobalDef'/2,
  'dn--un--restoreNS_StripNamespace_Def'/2,
  'dn--un--resolved_HasNames_Transform'/3,
  'dn--un--resolved_HasNames_Totality'/3,
  'dn--un--resolved_HasNames_Terminating'/3,
  'dn--un--resolved_HasNames_SCCall'/3,
  'dn--un--resolved_HasNames_Pat'/3,
  'dn--un--resolved_HasNames_PartialReason'/3,
  'dn--un--resolved_HasNames_Name'/3,
  'dn--un--resolved_HasNames_GlobalDef'/3,
  'dn--un--resolved_HasNames_Def'/3,
  'dn--un--resolved_HasNames_Covering'/3,
  'dn--un--resolved_HasNames_Clause'/3,
  'dn--un--resolved_HasNames_(Term $vars)'/3,
  'dn--un--resolved_HasNames_(NameMap $a)'/2,
  'dn--un--resolved_HasNames_(Maybe $a)'/4,
  'dn--un--resolved_HasNames_(CaseTree $vars)'/3,
  'dn--un--resolved_HasNames_(CaseAlt $vars)'/3,
  'dn--un--resolved_HasNames_((Env Term) $vars)'/3,
  'dn--un--full_HasNames_Transform'/3,
  'dn--un--full_HasNames_Totality'/3,
  'dn--un--full_HasNames_Terminating'/3,
  'dn--un--full_HasNames_SCCall'/3,
  'dn--un--full_HasNames_Pat'/3,
  'dn--un--full_HasNames_PartialReason'/3,
  'dn--un--full_HasNames_Name'/3,
  'dn--un--full_HasNames_GlobalDef'/3,
  'dn--un--full_HasNames_Def'/3,
  'dn--un--full_HasNames_Covering'/3,
  'dn--un--full_HasNames_Clause'/3,
  'dn--un--full_HasNames_(Term $vars)'/3,
  'dn--un--full_HasNames_(NameMap $a)'/2,
  'dn--un--full_HasNames_(Maybe $a)'/4,
  'dn--un--full_HasNames_(CaseTree $vars)'/3,
  'dn--un--full_HasNames_(CaseAlt $vars)'/3,
  'dn--un--full_HasNames_((Env Term) $vars)'/3,
  'dn--un--__Impl_StripNamespace_GlobalDef'/0,
  'dn--un--__Impl_StripNamespace_Def'/0,
  'dn--un--__Impl_Show_BuiltinType'/0,
  'dn--un--__Impl_HasNames_Transform'/0,
  'dn--un--__Impl_HasNames_Totality'/0,
  'dn--un--__Impl_HasNames_Terminating'/0,
  'dn--un--__Impl_HasNames_SCCall'/0,
  'dn--un--__Impl_HasNames_Pat'/0,
  'dn--un--__Impl_HasNames_PartialReason'/0,
  'dn--un--__Impl_HasNames_Name'/0,
  'dn--un--__Impl_HasNames_GlobalDef'/0,
  'dn--un--__Impl_HasNames_Def'/0,
  'dn--un--__Impl_HasNames_Covering'/0,
  'dn--un--__Impl_HasNames_Clause'/0,
  'dn--un--__Impl_HasNames_(Term $vars)'/0,
  'dn--un--__Impl_HasNames_(Maybe $a)'/1,
  'dn--un--__Impl_HasNames_(CaseTree $vars)'/0,
  'dn--un--__Impl_HasNames_(CaseAlt $vars)'/0,
  'dn--un--__Impl_HasNames_((Env Term) $vars)'/0,
  'un--withLogLevel'/4,
  'un--withExtendedNS'/4,
  'un--withCtxt'/3,
  'un--visibleInAny'/3,
  'un--visibleIn'/3,
  'un--updateTy'/4,
  'un--updateSession'/3,
  'un--updateDef'/4,
  'un--unsetFlag'/5,
  'un--undefinedName'/4,
  'un--toResolvedNames'/4,
  'un--toFullNames'/4,
  'un--startTimer'/4,
  'un--sndName'/2,
  'un--setWorkingDir'/3,
  'un--setVisible'/3,
  'un--setVisibility'/5,
  'un--setUniqueSearch'/5,
  'un--setUnboundImplicits'/3,
  'un--setTotality'/5,
  'un--setTerminating'/5,
  'un--setSourceDir'/3,
  'un--setSizeChange'/5,
  'un--setSession'/3,
  'un--setSearchTimeout'/3,
  'un--setRewrite'/5,
  'un--setPrefixRecordProjections'/3,
  'un--setPrefix'/3,
  'un--setPair'/6,
  'un--setPPrint'/3,
  'un--setOutputDir'/3,
  'un--setOpenHints'/3,
  'un--setNextEntry'/3,
  'un--setNestedNS'/3,
  'un--setNameFlag'/5,
  'un--setNS'/3,
  'un--setNFThreshold'/3,
  'un--setMutWith'/5,
  'un--setLogTimings'/3,
  'un--setLinearCheck'/4,
  'un--setIncData'/4,
  'un--setFromString'/3,
  'un--setFromInteger'/3,
  'un--setFromDouble'/3,
  'un--setFromChar'/3,
  'un--setFlag'/5,
  'un--setExternal'/5,
  'un--setExtension'/3,
  'un--setDetermining'/5,
  'un--setDetags'/5,
  'un--setDependsDir'/3,
  'un--setDefaultTotalityOption'/3,
  'un--setDebugElabCheck'/3,
  'un--setCtxt'/3,
  'un--setCovering'/5,
  'un--setCompiled'/4,
  'un--setCG'/3,
  'un--setBuildDir'/3,
  'un--setAutoImplicitLimit'/3,
  'un--setAmbigLimit'/3,
  'un--setAllPublic'/3,
  'un--returnDef'/3,
  'un--resolved'/3,
  'un--resolveName'/3,
  'un--resetFirstEntry'/2,
  'un--reducibleInAny'/3,
  'un--reducibleIn'/3,
  'un--recordWarning'/3,
  'un--prettyName'/2,
  'un--noDeclaration'/4,
  'un--newEntry'/2,
  'un--newDef'/7,
  'un--newAlias'/4,
  'un--namesResolvedAs'/1,
  'un--maybeMisspelling'/4,
  'un--lookupTyName'/3,
  'un--lookupTyExact'/3,
  'un--lookupNameBy'/4,
  'un--lookupExactBy'/4,
  'un--lookupDefTyExact'/3,
  'un--lookupDefName'/3,
  'un--lookupDefExact'/3,
  'un--lookupCtxtName'/2,
  'un--lookupCtxtExactI'/2,
  'un--lookupCtxtExact'/2,
  'un--lookupContextEntry'/2,
  'un--lazyActive'/3,
  'un--isVisible'/3,
  'un--isUnboundImplicits'/2,
  'un--isPrimName'/2,
  'un--isPrefixRecordProjections'/2,
  'un--isPairType'/3,
  'un--isLazyActive'/2,
  'un--isHidden'/2,
  'un--isExtension'/2,
  'un--isEqualTy'/3,
  'un--isAllPublic'/2,
  'un--initSize'/0,
  'un--initHash'/2,
  'un--initDefs'/1,
  'un--initCtxtS'/2,
  'un--initCtxt'/1,
  'un--inCurrentNS'/3,
  'un--hideName'/2,
  'un--hide'/4,
  'un--hasFlag'/5,
  'un--getWorkingDir'/1,
  'un--getVisible'/2,
  'un--getVisibility'/4,
  'un--getUserHoles'/2,
  'un--getTotality'/4,
  'un--getTime'/1,
  'un--getSizeChange'/4,
  'un--getSimilarNames'/2,
  'un--getSession'/2,
  'un--getSearchData'/5,
  'un--getRewrite'/2,
  'un--getResolvedAs'/1,
  'un--getPrimitiveNames'/2,
  'un--getPrimNames'/2,
  'un--getPosition'/2,
  'un--getPPrint'/2,
  'un--getNextTypeTag'/2,
  'un--getNextEntry'/2,
  'un--getNestedNS'/2,
  'un--getNameID'/2,
  'un--getNS'/2,
  'un--getImported'/2,
  'un--getFullName'/3,
  'un--getFnName'/1,
  'un--getFieldNames'/2,
  'un--getDirs'/2,
  'un--getDirectives'/3,
  'un--getDefaultTotalityOption'/2,
  'un--getContent'/1,
  'un--getAutoImplicitLimit'/2,
  'un--getAmbigLimit'/2,
  'un--full'/3,
  'un--fstName'/2,
  'un--fromStringName'/2,
  'un--fromIntegerName'/2,
  'un--fromDoubleName'/2,
  'un--fromCharName'/2,
  'un--extendNS'/3,
  'un--dumpStaging'/2,
  'un--dropOpenHint'/3,
  'un--dropMutData'/3,
  'un--depth'/2,
  'un--decode'/5,
  'un--commitCtxt'/1,
  'un--commit'/2,
  'un--clearUserHole'/3,
  'un--clearTimer'/2,
  'un--clearSavedHints'/2,
  'un--clearDefs'/2,
  'un--clearCtxt'/2,
  'un--checkUnambig'/4,
  'un--checkTimer'/2,
  'un--canonicalName'/4,
  'un--branchCtxt'/2,
  'un--branch'/2,
  'un--allNames'/2,
  'un--aliasName'/3,
  'un--addUserHole'/4,
  'un--addTransform'/4,
  'un--addToSave'/3,
  'un--addPossible'/3,
  'un--addPkg'/3,
  'un--addPackageDir'/3,
  'un--addOpenHint'/3,
  'un--addNameDirective'/5,
  'un--addName'/3,
  'un--addMutData'/3,
  'un--addLogLevel'/3,
  'un--addLocalHint'/3,
  'un--addLibDir'/3,
  'un--addImportedInc'/4,
  'un--addImported'/3,
  'un--addHintFor'/7,
  'un--addHashWithNames'/5,
  'un--addHash'/4,
  'un--addGlobalHint'/4,
  'un--addExtraDir'/3,
  'un--addEntry'/4,
  'un--addDirective'/4,
  'un--addDef'/4,
  'un--addDataDir'/3,
  'un--addCtxt'/4,
  'un--addContextEntry'/5,
  'un--addContextAlias'/4,
  'un--addBuiltin'/7,
  'un--addAlias'/4,
  'un--Grow'/0
]).
'case--checkTimer-20369'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V5, V6) -> begin (V7 = ('un--getTime'(V3))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V9, V5)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.Timeout', V6}, V3)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addTransform-15084'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V6, V5))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> begin (V22 = ('un--toResolvedNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--full_HasNames_Transform'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--resolved_HasNames_Transform'(V19, V20, V21)) end end end}, V0, V5))), case V22 of {'Idris.Prelude.Types.Left', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V24) -> begin (V31 = ('un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--full_HasNames_Name'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un--resolved_HasNames_Name'(V28, V29, V30)) end end end}, V6, V5))), case V31 of {'Idris.Prelude.Types.Left', E5} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V33) -> begin (V40 = ('un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V34) -> fun (V35) -> fun (V36) -> ('dn--un--full_HasNames_Transform'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('dn--un--resolved_HasNames_Transform'(V37, V38, V39)) end end end}, V0, V5))), case V40 of {'Idris.Prelude.Types.Left', E7} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V42) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V15, case V3 of {'Idris.Core.Context.MkDefs', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V56 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V103 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> {'Idris.Core.Context.MkDefs', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, [V24 | []], V86)), [{'Idris.Builtin.MkPair', V33, V42} | V87], V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102} end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V103} end end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V104) -> begin (V135 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> {'Idris.Core.Context.MkDefs', V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, [V24 | V104], V118)), [{'Idris.Builtin.MkPair', V33, V42} | V119], V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134} end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V135} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"LHS of a transformation must be a function application"/utf8>>}, V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setExternal-14346'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.Context.TCon', E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.Context.MkTypeFlags', E28, E29} -> (fun (V16, V17) -> {'Idris.Core.Context.Context.MkTypeFlags', V16, V0} end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E20, E21, E22, E23, E24, E25, E26, E27)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--case block in setUniqueSearch-14210'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.Context.TCon', E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.Context.MkTypeFlags', E28, E29} -> (fun (V16, V17) -> {'Idris.Core.Context.Context.MkTypeFlags', V0, V17} end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E20, E21, E22, E23, E24, E25, E26, E27)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--aliasName-10348'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V4, case V2 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V5 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V38 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E1} -> (fun (V46) -> ('nested--15027-10288--in--un--findAlias'(V0, V1, V46)) end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V47) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V48) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSimilarNames-9960'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), (1 + 0))) of 1 -> fun (V5) -> {'Idris.Prelude.Types.Right', []} end; 0 -> begin (V6 = ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'((1 + 0), ('Idris.Idris2.Data.Nat':'un--divNat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), (1 + (1 + (1 + 0)))))))), begin (V61 = fun (V7) -> fun (V8) -> case ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V11, V12)) end end end end, fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_UserName'(V13)) end, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V7)))) of {'Idris.Prelude.Types.Just', E1} -> (fun (V14) -> begin (V42 = (('Idris.Idris2.Libraries.Text.Distance.Levenshtein':'un--compute'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, V4, V14))(V8))), ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V45, V46)) end end end end, V42, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V49, V50)) end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V52)) end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V55, V56)) end end end end}, fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V59, V60)) end end end}, ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V42, V6)))))) end end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end end), fun (V62) -> begin (V64 = begin (V63 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E2} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V66) -> begin (V134 = begin (V133 = (('Idris.Idris2.Libraries.Data.NameMap':'un--mapMaybeM'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> V73 end end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), begin (V81 = (V78(V79))), (V80(V81)) end end end end end end end}, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V84(V86))), ((V85(V87))(V86)) end end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V89(V90))), (V91(V90)) end end end end}, V61, case V66 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121) -> case V92 of {'Idris.Core.Context.Context.MkContext', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132) -> V124 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V62))), {'Idris.Prelude.Types.Right', V133} end), case V134 of {'Idris.Prelude.Types.Left', E45} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V136) -> begin (V139 = ('Idris.Idris2.Data.List':'un--sortBy'(fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_Nat'(('Idris.Idris2.Builtin':'un--snd'(V137)), ('Idris.Idris2.Builtin':'un--snd'(V138)))) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V136))))), begin (V141 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V140) -> ('nested--14557-9855--in--un--showNames'(V0, V1, V0, V4, ('Idris.Idris2.Builtin':'un--fst'(V140)))) end, V139))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V144, V145)) end end}, V141))} end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--commitCtxt-4878'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', V0} end; _ -> begin (V3 = (V1 - 1)), case V3 of 0 -> begin (V15 = case V0 of {'Idris.Core.Context.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V8 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V15))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E22} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V20) -> begin (V33 = begin (V32 = (('nested--9277-4848--in--un--commitStaged'(V0, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V0 of {'Idris.Core.Context.Context.MkContext', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V27 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V20))(V16))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E35} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V35) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.Context.MkContext', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.Context.MkContext', V36, V37, V38, V39, V40, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V43, V44, V45, V46} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V47) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.Context.MkContext', V48, V49, V50, V51, V52, V3, V54, V55, V56, V57, V58} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end.
'case--lookupCtxtName-4721'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V4 = (('un--lookupCtxtExactI'(V1, V0))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V8, V9}} | []]} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V10) -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V10, case V0 of {'Idris.Core.Context.Context.MkContext', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V14 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V22) -> ('nested--8789-4417--in--un--lookupPossibles'(V0, V1, [], V22)) end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExact-4149'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = ('un--decode'(V1, V0, 1, V4, V3))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> V10 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--returnDef'(case V1 of {'Idris.Core.Context.Context.MkContext', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V20 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V7))))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V34 = begin (V33 = ('erlang':'get'(case V1 of {'Idris.Core.Context.Context.MkContext', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V26 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E27} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V36) -> begin (V65 = begin (V64 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, V36, V0))(V3))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E29} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V67) -> case V67 of {'Idris.Prelude.Types.Just', E31} -> (fun (V68) -> begin (V69 = ('un--decode'(V1, V0, 1, V68, V3))), case V69 of {'Idris.Prelude.Types.Left', E32} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V71) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V72) -> case V72 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V73, V74) -> V74 end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--returnDef'(case V1 of {'Idris.Core.Context.Context.MkContext', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V84 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V71))))} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--returnDef-3984'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> case case V3 of {'Idris.Core.Context.Context.MkPMDefInfo', E5, E6, E7} -> (fun (V8, V9, V10) -> V9 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--addAlias-3489'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V5, V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V5, [{'Idris.Core.Context.Context.Alias', V3, V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V6) -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V5, [{'Idris.Core.Context.Context.Alias', V3, V2, V1} | V6], V0)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPossible-3428'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case ('Idris.Idris2.Libraries.Data.UserNameMap':'un--lookup'(V4, V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V4, [{'Idris.Core.Context.Context.Direct', V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V5) -> ('Idris.Idris2.Libraries.Data.UserNameMap':'un--insert'(V4, [{'Idris.Core.Context.Context.Direct', V2, V1} | V5], V0)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21785-16396--in--un--visible'(V0, V1, V2) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V2, V0)).
'nested--11341-6792--in--un--trimNSpat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V5, V11)), ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V5, V12))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14557-9855--in--un--showNames'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V4))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, V5)) of 1 -> begin (V6 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))), case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, V6)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V6)) end end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V5)) end end.
'nested--11342-6845--in--un--restoreNSpat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V5, V11)), ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V5, V12))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11016-6637--in--un--resolvedNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V5, V10, V9))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = ('dn--un--resolved_HasNames_(Term $vars)'(V5, V12, V9))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = ('dn--un--resolved_HasNames_(Term $vars)'(V5, V13, V9))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8789-4416--in--un--resn'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14372-9689--in--un--resetElab'(V0, V1) -> begin (V38 = case V1 of {'Idris.Core.Options.MkOptions', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V4 of {'Idris.Core.Options.MkSessionOpts', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V13 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V1 of {'Idris.Core.Options.MkOptions', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Options.MkOptions', V39, V40, V41, case ('Idris.Idris2.Core.Options':'un--defaultElab'()) of {'Idris.Core.Options.MkElabDirectives', E46, E47, E48, E49, E50, E51, E52} -> (fun (V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Options.MkElabDirectives', V49, V50, V38, V52, V53, V54, V55} end(E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43, V44, V45, V46, V47, V48} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--23155-17730--in--un--resetCtxt'(V0, V1) -> begin (V52 = case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V6 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V32 of {'Idris.Core.Options.MkDirs', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V42 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V53) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V54) -> case V54 of {'Idris.Prelude.Types.Left', E50} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V56) -> {'Idris.Prelude.Types.Right', 0} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V57) -> begin (V85 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, V52))(V57))), {'Idris.Prelude.Types.Right', V85} end end, V53)) end end.
'nested--18245-13182--in--un--notHidden'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V15 = ('un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_Name'(V9, V10, V11)) end end end, fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--resolved_HasNames_Name'(V12, V13, V14)) end end end}, V7, V6))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Right', case ('un--isHidden'(V17, V5)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25752-20205--in--un--nano'() -> 1000000000.
'nested--8789-4417--in--un--lookupPossibles'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V2))} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Context.Context.Direct', E2, E3} -> (fun (V7, V8) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V7, case V0 of {'Idris.Core.Context.Context.MkContext', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V19 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> begin (V21 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V8}, V0))(V20))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> case V23 of {'Idris.Prelude.Types.Just', E6} -> (fun (V24) -> case case ('Idris.Idris2.Core.Name':'un--matches'(V1, V7)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V27, V28)) end end}, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('nested--8789-4416--in--un--resn'(V0, V1, V29)) end, V2)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> (('nested--8789-4417--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V8, V24}} | V2], V6))(V20)); 0 -> (('nested--8789-4417--in--un--lookupPossibles'(V0, V1, V2, V6))(V20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--8789-4417--in--un--lookupPossibles'(V0, V1, V2, V6))(V20)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--8789-4417--in--un--lookupPossibles'(V0, V1, V2, V6)) end end(E2, E3)); {'Idris.Core.Context.Context.Alias', E18, E19, E20} -> (fun (V30, V31, V32) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V31, case V0 of {'Idris.Core.Context.Context.MkContext', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V43 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V44) -> begin (V45 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V32}, V0))(V44))), case V45 of {'Idris.Prelude.Types.Left', E21} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E23} -> (fun (V48) -> case case ('Idris.Idris2.Core.Name':'un--matches'(V1, V30)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V51, V52)) end end}, V32, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V53) -> ('nested--8789-4416--in--un--resn'(V0, V1, V53)) end, V2)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> (('nested--8789-4417--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V31, {'Idris.Builtin.MkPair', V32, V48}} | V2], V6))(V44)); 0 -> (('nested--8789-4417--in--un--lookupPossibles'(V0, V1, V2, V6))(V44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--8789-4417--in--un--lookupPossibles'(V0, V1, V2, V6))(V44)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--8789-4417--in--un--lookupPossibles'(V0, V1, V2, V6)) end end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15419-10648--in--un--isHole'(V0, V1, V2, V3) -> begin (V34 = (('un--lookupCtxtExact'(V2, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V34 of {'Idris.Prelude.Types.Left', E30} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E32} -> (fun (V37) -> {'Idris.Prelude.Types.Right', case V37 of {'Idris.Core.Context.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> case V55 of {'Idris.Core.Context.Context.None'} -> (fun () -> 1 end()); {'Idris.Core.Context.Context.Hole', E53, E54} -> (fun (V58, V59) -> 1 end(E53, E54)); _ -> 0 end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--18245-13183--in--un--isDefault'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'(V4)).
'nested--11553-7019--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', V2}; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> begin (V9 = ('dn--un--resolved_HasNames_Name'(V1, V7, V4))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> ('nested--11553-7019--in--un--insertAll'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, V8, V2)), V6, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11552-6987--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', V2}; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> begin (V9 = ('dn--un--full_HasNames_Name'(V1, V7, V4))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> ('nested--11552-6987--in--un--insertAll'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, V8, V2)), V6, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--24902-19392--in--un--go'(V0, V1, V2, V3, V4) -> case V4 of [] -> 0; [E0 | E1] -> (fun (V5, V6) -> case ('Idris.Idris2.Core.Name':'un--splitNS'(V5)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V3)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'un--isApproximationOf'(V7, V2)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> ('nested--24902-19392--in--un--go'(V0, V1, V2, V3, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18932-13821--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V18)) end end}, V8, V5)) of 1 -> fun (V19) -> begin (V21 = (('nested--18932-13821--in--un--getPos'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), V4)), ('Idris.Idris2.Data.List':'un--filter'(fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V8)) end, V5)), V10))(V19))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Right', [V4 | V23]} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> ('nested--18932-13821--in--un--getPos'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), V4)), V5, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> fun (V24) -> case V5 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V25)) end, V5))))))}, V24)) end end end end(E0, E1, E2, E3)); _ -> fun (V26) -> case V5 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)) end, V5))))))}, V26)) end end end.
'nested--21077-15730--in--un--getDir'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V0, V5)) of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V6}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11015-6497--in--un--fullNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = ('dn--un--full_HasNames_((Env Term) $vars)'(V5, V10, V9))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = ('dn--un--full_HasNames_(Term $vars)'(V5, V12, V9))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = ('dn--un--full_HasNames_(Term $vars)'(V5, V13, V9))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15027-10288--in--un--findAlias'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', V0} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Core.Context.Context.Alias', E2, E3, E4} -> (fun (V6, V7, V8) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V0)) of 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', V6} end; 0 -> ('nested--15027-10288--in--un--findAlias'(V0, V1, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('nested--15027-10288--in--un--findAlias'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25992-20436--in--un--drop'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V3, V7)) of 1 -> V6; 0 -> [{'Idris.Builtin.MkPair', V7, V8} | ('nested--25992-20436--in--un--drop'(V0, V1, V2, V3, V6))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18245-13184--in--un--direct'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'(V4)).
'nested--9277-4848--in--un--commitStaged'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> 0 end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, ('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V2, V6, V7)), fun () -> ('nested--9277-4848--in--un--commitStaged'(V0, V5, V2)) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25992-20435--in--un--addMod'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V5 of [] -> [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', [V6 | []], V7}} | []]; [E2 | E3] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V12, V13) -> case ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V3, V10)) of 1 -> [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', [V6 | V12], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, V7))}} | V9]; 0 -> [{'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V12, V13}} | ('nested--25992-20435--in--un--addMod'(V0, V1, V2, V3, {'Idris.Builtin.MkPair', V6, V7}, V9))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--trimNS_StripNamespace_GlobalDef'(V0, V1) -> case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('dn--un--trimNS_StripNamespace_Def'(V0, V19)), V20, V21} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--trimNS_StripNamespace_Def'(V0, V1) -> case V1 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Core.Context.Context.PMDef', V2, V3, ('Idris.Idris2.Core.CaseTree':'dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('nested--11341-6792--in--un--trimNSpat'(V6, V3, V5, V4, V2, V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); _ -> V1 end.
'dn--un--show_Show_BuiltinType'(V0) -> case V0 of 0 -> <<"Natural"/utf8>>; 1 -> <<"NaturalToInteger"/utf8>>; 2 -> <<"IntegerToNatural"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_BuiltinType'(V0, V1) -> ('dn--un--show_Show_BuiltinType'(V1)).
'dn--un--restoreNS_StripNamespace_GlobalDef'(V0, V1) -> case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.Core.Context.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('dn--un--restoreNS_StripNamespace_Def'(V0, V19)), V20, V21} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--restoreNS_StripNamespace_Def'(V0, V1) -> case V1 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Core.Context.Context.PMDef', V2, V3, ('Idris.Idris2.Core.CaseTree':'dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('nested--11342-6845--in--un--restoreNSpat'(V6, V3, V5, V4, V2, V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); _ -> V1 end.
'dn--un--resolved_HasNames_Transform'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--resolved_HasNames_Name'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V5, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V6, V2))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V7, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V3, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Totality'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('dn--un--resolved_HasNames_Terminating'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--resolved_HasNames_Covering'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Terminating'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V3) -> begin (V4 = ('dn--un--resolved_HasNames_PartialReason'(V0, V3, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_SCCall'(V0, V1, V2) -> begin (V5 = ('dn--un--resolved_HasNames_Name'(V0, case V1 of {'Idris.Core.Context.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_Pat'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V3} end, V7)) end, fun (V13) -> ('dn--un--resolved_HasNames_Name'(V0, V4, V13)) end, V6)) end, fun (V14) -> ('dn--un--resolved_HasNames_Pat'(V0, V5, V14)) end, V2)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V15, V16, V17, V18, V19) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V23) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V24) -> {'Idris.Prelude.Types.Right', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> {'Idris.Core.CaseTree.PCon', V25, V26, V27, V28, V29} end end end end end} end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V23)) end, fun (V31) -> ('dn--un--resolved_HasNames_Name'(V0, V16, V31)) end, V22)) end, fun (V32) -> {'Idris.Prelude.Types.Right', V17} end, V21)) end, fun (V33) -> {'Idris.Prelude.Types.Right', V18} end, V20)) end, fun (V34) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('dn--un--resolved_HasNames_Pat'(V0, V35, V36)) end end, V19, [], V34)) end, V2)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V37, V38, V39, V40) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V41) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V42) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V43) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V44) -> {'Idris.Prelude.Types.Right', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> {'Idris.Core.CaseTree.PTyCon', V45, V46, V47, V48} end end end end} end, fun (V49) -> {'Idris.Prelude.Types.Right', V37} end, V43)) end, fun (V50) -> ('dn--un--resolved_HasNames_Name'(V0, V38, V50)) end, V42)) end, fun (V51) -> {'Idris.Prelude.Types.Right', V39} end, V41)) end, fun (V52) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> fun (V54) -> ('dn--un--resolved_HasNames_Pat'(V0, V53, V54)) end end, V40, [], V52)) end, V2)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V55, V56) -> {'Idris.Prelude.Types.Right', V1} end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V57, V58, V59, V60) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V61) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V62) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V63) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V64) -> {'Idris.Prelude.Types.Right', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> {'Idris.Core.CaseTree.PArrow', V65, V66, V67, V68} end end end end} end, fun (V69) -> {'Idris.Prelude.Types.Right', V57} end, V63)) end, fun (V70) -> ('dn--un--resolved_HasNames_Name'(V0, V58, V70)) end, V62)) end, fun (V71) -> ('dn--un--resolved_HasNames_Pat'(V0, V59, V71)) end, V61)) end, fun (V72) -> ('dn--un--resolved_HasNames_Pat'(V0, V60, V72)) end, V2)) end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V73, V74, V75, V76) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V77) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V78) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V79) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V80) -> {'Idris.Prelude.Types.Right', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> {'Idris.Core.CaseTree.PDelay', V81, V82, V83, V84} end end end end} end, fun (V85) -> {'Idris.Prelude.Types.Right', V73} end, V79)) end, fun (V86) -> {'Idris.Prelude.Types.Right', V74} end, V78)) end, fun (V87) -> ('dn--un--resolved_HasNames_Pat'(V0, V75, V87)) end, V77)) end, fun (V88) -> ('dn--un--resolved_HasNames_Pat'(V0, V76, V88)) end, V2)) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V89, V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V91) -> case V91 of {'Idris.Prelude.Types.Left', E24} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V89, V93}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V94) -> ('dn--un--resolved_HasNames_Name'(V0, V90, V94)) end, V2)) end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V95, V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E28} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V95, V99}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V100) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V96, V100)) end, V2)) end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_PartialReason'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Name'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Name'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end(E1)); _ -> case ('un--getNameID'(V1, V0)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V4}} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_GlobalDef'(V0, V1, V2) -> begin (V23 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V23 of {'Idris.Prelude.Types.Left', E20} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V25) -> begin (V46 = ('dn--un--resolved_HasNames_Def'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V43 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V46 of {'Idris.Prelude.Types.Left', E42} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V48) -> begin (V69 = ('dn--un--resolved_HasNames_Totality'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V59 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V69 of {'Idris.Prelude.Types.Left', E64} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V71) -> begin (V96 = ('dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V72) -> fun (V73) -> ('dn--un--full_HasNames_(NameMap $a)'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V74, V75)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V88 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V96 of {'Idris.Prelude.Types.Left', E86} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V98) -> begin (V123 = ('dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V99) -> fun (V100) -> ('dn--un--full_HasNames_(NameMap $a)'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V101, V102)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V116 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V123 of {'Idris.Prelude.Types.Left', E108} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V125) -> begin (V148 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V126) -> fun (V127) -> ('dn--un--resolved_HasNames_SCCall'(V0, V126, V127)) end end, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147) -> V147 end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V2))), case V148 of {'Idris.Prelude.Types.Left', E130} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V150) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151} -> (fun (V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170) -> {'Idris.Core.Context.Context.MkGlobalDef', V151, V152, V25, V154, V155, V156, V157, V158, V159, V160, V71, V162, V98, V125, V165, V166, V167, V48, V169, V150} end(E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_Def'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V5, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('nested--11016-6637--in--un--resolvedNamesPat'(V7, V4, V6, V5, V3, V0, V14)) end, V7, [], V2))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.PMDef', V3, V4, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('dn--un--resolved_HasNames_Name'(V0, V26, V27)) end end, V23, [], V2))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('dn--un--resolved_HasNames_Name'(V0, V31, V32)) end end, V24, [], V2))), case V33 of {'Idris.Prelude.Types.Left', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.TCon', V18, V19, V20, V21, V22, V30, V35, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.Context.BySearch', E23, E24, E25} -> (fun (V36, V37, V38) -> begin (V39 = ('dn--un--resolved_HasNames_Name'(V0, V38, V2))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.BySearch', V36, V37, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24, E25)); {'Idris.Core.Context.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> begin (V45 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V42, V2))), case V45 of {'Idris.Prelude.Types.Left', E31} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Guess', V47, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29, E30)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_Covering'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Clause'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.MkClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> fun (V11) -> fun (V12) -> {'Idris.Core.Context.Context.MkClause', V3, V10, V11, V12} end end end} end, fun (V13) -> ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V4, V13)) end, V8)) end, fun (V14) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5, V14)) end, V7)) end, fun (V15) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V6, V15)) end, V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(Term $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> case ('un--getNameID'(V5, V0)) of {'Idris.Prelude.Types.Just', E3} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, {'Idris.Core.Name.Resolved', V6}}} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, V5}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V11, V12)) end end, V10, [], V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> case ('un--getNameID'(V8, V0)) of {'Idris.Prelude.Types.Just', E10} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V7, V8, V16, V15}} end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V7, V8, V9, V15}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); {'Idris.Core.TT.Bind', E11, E12, E13, E14} -> (fun (V17, V18, V19, V20) -> begin (V23 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V21) -> fun (V22) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V21, V22)) end end, V19, V2))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V26 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V20, V2))), case V26 of {'Idris.Prelude.Types.Left', E17} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V17, V18, V25, V28}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13, E14)); {'Idris.Core.TT.App', E19, E20, E21} -> (fun (V29, V30, V31) -> begin (V32 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V30, V2))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> begin (V35 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V31, V2))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V29, V34, V37}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20, E21)); {'Idris.Core.TT.As', E26, E27, E28, E29} -> (fun (V38, V39, V40, V41) -> begin (V42 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V40, V2))), case V42 of {'Idris.Prelude.Types.Left', E30} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V44) -> begin (V45 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V41, V2))), case V45 of {'Idris.Prelude.Types.Left', E32} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V38, V39, V44, V47}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27, E28, E29)); {'Idris.Core.TT.TDelayed', E34, E35, E36} -> (fun (V48, V49, V50) -> begin (V51 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V50, V2))), case V51 of {'Idris.Prelude.Types.Left', E37} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V48, V49, V53}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35, E36)); {'Idris.Core.TT.TDelay', E39, E40, E41, E42} -> (fun (V54, V55, V56, V57) -> begin (V58 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V56, V2))), case V58 of {'Idris.Prelude.Types.Left', E43} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V60) -> begin (V61 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V57, V2))), case V61 of {'Idris.Prelude.Types.Left', E45} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V54, V55, V60, V63}} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40, E41, E42)); {'Idris.Core.TT.TForce', E47, E48, E49} -> (fun (V64, V65, V66) -> begin (V67 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V66, V2))), case V67 of {'Idris.Prelude.Types.Left', E50} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V64, V65, V69}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47, E48, E49)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_(NameMap $a)'(V0, V1) -> fun (V2) -> ('nested--11553-7019--in--un--insertAll'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V1)), V2)) end.
'dn--un--resolved_HasNames_(Maybe $a)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V7 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V5, V6) -> (((V6(V1))(V4))(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V9}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'(V0, V10, V11)) end end, V6, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> begin (V17 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V16, V2))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_(CaseAlt $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case ('un--getNameID'(V3, V0)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', {'Idris.Core.Name.Resolved', V10}, V4, V5, V9}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V3, V4, V5, V9}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E7, E8, E9} -> (fun (V11, V12, V13) -> begin (V14 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V13, V2))), case V14 of {'Idris.Prelude.Types.Left', E10} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V11, V12, V16}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9)); {'Idris.Core.CaseTree.ConstCase', E12, E13} -> (fun (V17, V18) -> begin (V19 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V18, V2))), case V19 of {'Idris.Prelude.Types.Left', E14} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V17, V21}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); {'Idris.Core.CaseTree.DefaultCase', E16} -> (fun (V22) -> begin (V23 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V22, V2))), case V23 of {'Idris.Prelude.Types.Left', E17} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V25}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V3, V4) -> begin (V7 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V5) -> fun (V6) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5, V6)) end end, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V4, V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V9, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Transform'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--full_HasNames_Name'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V5, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = ('dn--un--full_HasNames_(Term $vars)'(V0, V6, V2))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = ('dn--un--full_HasNames_(Term $vars)'(V0, V7, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V3, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Totality'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('dn--un--full_HasNames_Terminating'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--full_HasNames_Covering'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Terminating'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V3) -> begin (V4 = ('dn--un--full_HasNames_PartialReason'(V0, V3, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_SCCall'(V0, V1, V2) -> begin (V5 = ('dn--un--full_HasNames_Name'(V0, case V1 of {'Idris.Core.Context.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_Pat'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V3} end, V7)) end, fun (V13) -> ('dn--un--full_HasNames_Name'(V0, V4, V13)) end, V6)) end, fun (V14) -> ('dn--un--full_HasNames_Pat'(V0, V5, V14)) end, V2)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V15, V16, V17, V18, V19) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V23) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V24) -> {'Idris.Prelude.Types.Right', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> {'Idris.Core.CaseTree.PCon', V25, V26, V27, V28, V29} end end end end end} end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V23)) end, fun (V31) -> ('dn--un--full_HasNames_Name'(V0, V16, V31)) end, V22)) end, fun (V32) -> {'Idris.Prelude.Types.Right', V17} end, V21)) end, fun (V33) -> {'Idris.Prelude.Types.Right', V18} end, V20)) end, fun (V34) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('dn--un--full_HasNames_Pat'(V0, V35, V36)) end end, V19, [], V34)) end, V2)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V37, V38, V39, V40) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V41) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V42) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V43) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V44) -> {'Idris.Prelude.Types.Right', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> {'Idris.Core.CaseTree.PTyCon', V45, V46, V47, V48} end end end end} end, fun (V49) -> {'Idris.Prelude.Types.Right', V37} end, V43)) end, fun (V50) -> ('dn--un--full_HasNames_Name'(V0, V38, V50)) end, V42)) end, fun (V51) -> {'Idris.Prelude.Types.Right', V39} end, V41)) end, fun (V52) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> fun (V54) -> ('dn--un--full_HasNames_Pat'(V0, V53, V54)) end end, V40, [], V52)) end, V2)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V55, V56) -> {'Idris.Prelude.Types.Right', V1} end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V57, V58, V59, V60) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V61) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V62) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V63) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V64) -> {'Idris.Prelude.Types.Right', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> {'Idris.Core.CaseTree.PArrow', V65, V66, V67, V68} end end end end} end, fun (V69) -> {'Idris.Prelude.Types.Right', V57} end, V63)) end, fun (V70) -> ('dn--un--full_HasNames_Name'(V0, V58, V70)) end, V62)) end, fun (V71) -> ('dn--un--full_HasNames_Pat'(V0, V59, V71)) end, V61)) end, fun (V72) -> ('dn--un--full_HasNames_Pat'(V0, V60, V72)) end, V2)) end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V73, V74, V75, V76) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V77) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V78) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V79) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V80) -> {'Idris.Prelude.Types.Right', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> {'Idris.Core.CaseTree.PDelay', V81, V82, V83, V84} end end end end} end, fun (V85) -> {'Idris.Prelude.Types.Right', V73} end, V79)) end, fun (V86) -> {'Idris.Prelude.Types.Right', V74} end, V78)) end, fun (V87) -> ('dn--un--full_HasNames_Pat'(V0, V75, V87)) end, V77)) end, fun (V88) -> ('dn--un--full_HasNames_Pat'(V0, V76, V88)) end, V2)) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V89, V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V91) -> case V91 of {'Idris.Prelude.Types.Left', E24} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V89, V93}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V94) -> ('dn--un--full_HasNames_Name'(V0, V90, V94)) end, V2)) end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V95, V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E28} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V95, V99}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V100) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V96, V100)) end, V2)) end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_PartialReason'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_Name'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Name'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V3) -> begin (V4 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V3}, V0))(V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Core.Context.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V9 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_GlobalDef'(V0, V1, V2) -> begin (V23 = ('dn--un--full_HasNames_(Term $vars)'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V23 of {'Idris.Prelude.Types.Left', E20} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V25) -> begin (V46 = ('dn--un--full_HasNames_Def'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V43 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V46 of {'Idris.Prelude.Types.Left', E42} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V48) -> begin (V69 = ('dn--un--full_HasNames_Totality'(V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V59 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V69 of {'Idris.Prelude.Types.Left', E64} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V71) -> begin (V96 = ('dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V72) -> fun (V73) -> ('dn--un--full_HasNames_(NameMap $a)'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V74, V75)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V88 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V96 of {'Idris.Prelude.Types.Left', E86} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V98) -> begin (V123 = ('dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V99) -> fun (V100) -> ('dn--un--full_HasNames_(NameMap $a)'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V101, V102)) end end}, V0, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V116 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V123 of {'Idris.Prelude.Types.Left', E108} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V125) -> begin (V148 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V126) -> fun (V127) -> ('dn--un--full_HasNames_SCCall'(V0, V126, V127)) end end, case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147) -> V147 end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V2))), case V148 of {'Idris.Prelude.Types.Left', E130} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V150) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.Context.MkGlobalDef', E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151} -> (fun (V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170) -> {'Idris.Core.Context.Context.MkGlobalDef', V151, V152, V25, V154, V155, V156, V157, V158, V159, V160, V71, V162, V98, V125, V165, V166, V167, V48, V169, V150} end(E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_Def'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V5, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('nested--11015-6497--in--un--fullNamesPat'(V7, V4, V6, V5, V3, V0, V14)) end, V7, [], V2))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.PMDef', V3, V4, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('dn--un--full_HasNames_Name'(V0, V26, V27)) end end, V23, [], V2))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('dn--un--full_HasNames_Name'(V0, V31, V32)) end end, V24, [], V2))), case V33 of {'Idris.Prelude.Types.Left', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.TCon', V18, V19, V20, V21, V22, V30, V35, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.Context.BySearch', E23, E24, E25} -> (fun (V36, V37, V38) -> begin (V39 = ('dn--un--full_HasNames_Name'(V0, V38, V2))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.BySearch', V36, V37, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24, E25)); {'Idris.Core.Context.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> begin (V45 = ('dn--un--full_HasNames_(Term $vars)'(V0, V42, V2))), case V45 of {'Idris.Prelude.Types.Left', E31} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.Guess', V47, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29, E30)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_Covering'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Clause'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.Context.MkClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V4, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('dn--un--full_HasNames_(Term $vars)'(V0, V5, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = ('dn--un--full_HasNames_(Term $vars)'(V0, V6, V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkClause', V3, V9, V12, V15}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(Term $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> case V5 of {'Idris.Core.Name.Resolved', E3} -> (fun (V6) -> begin (V7 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V6}, V0))(V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case V9 of {'Idris.Prelude.Types.Just', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, case V10 of {'Idris.Core.Context.Context.MkGlobalDef', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V12 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, {'Idris.Core.Name.Resolved', V6}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> {'Idris.Prelude.Types.Right', V1} end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E27, E28, E29, E30} -> (fun (V31, V32, V33, V34) -> begin (V37 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V35, V36)) end end, V34, [], V2))), case V37 of {'Idris.Prelude.Types.Left', E31} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V31, V32, V33, V39}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28, E29, E30)); {'Idris.Core.TT.Bind', E33, E34, E35, E36} -> (fun (V40, V41, V42, V43) -> begin (V46 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V44) -> fun (V45) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V44, V45)) end end, V42, V2))), case V46 of {'Idris.Prelude.Types.Left', E37} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V48) -> begin (V49 = ('dn--un--full_HasNames_(Term $vars)'(V0, V43, V2))), case V49 of {'Idris.Prelude.Types.Left', E39} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V40, V41, V48, V51}} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34, E35, E36)); {'Idris.Core.TT.App', E41, E42, E43} -> (fun (V52, V53, V54) -> begin (V55 = ('dn--un--full_HasNames_(Term $vars)'(V0, V53, V2))), case V55 of {'Idris.Prelude.Types.Left', E44} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V57) -> begin (V58 = ('dn--un--full_HasNames_(Term $vars)'(V0, V54, V2))), case V58 of {'Idris.Prelude.Types.Left', E46} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V52, V57, V60}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41, E42, E43)); {'Idris.Core.TT.As', E48, E49, E50, E51} -> (fun (V61, V62, V63, V64) -> begin (V65 = ('dn--un--full_HasNames_(Term $vars)'(V0, V63, V2))), case V65 of {'Idris.Prelude.Types.Left', E52} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V67) -> begin (V68 = ('dn--un--full_HasNames_(Term $vars)'(V0, V64, V2))), case V68 of {'Idris.Prelude.Types.Left', E54} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V61, V62, V67, V70}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49, E50, E51)); {'Idris.Core.TT.TDelayed', E56, E57, E58} -> (fun (V71, V72, V73) -> begin (V74 = ('dn--un--full_HasNames_(Term $vars)'(V0, V73, V2))), case V74 of {'Idris.Prelude.Types.Left', E59} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V71, V72, V76}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56, E57, E58)); {'Idris.Core.TT.TDelay', E61, E62, E63, E64} -> (fun (V77, V78, V79, V80) -> begin (V81 = ('dn--un--full_HasNames_(Term $vars)'(V0, V79, V2))), case V81 of {'Idris.Prelude.Types.Left', E65} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V83) -> begin (V84 = ('dn--un--full_HasNames_(Term $vars)'(V0, V80, V2))), case V84 of {'Idris.Prelude.Types.Left', E67} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V77, V78, V83, V86}} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61, E62, E63, E64)); {'Idris.Core.TT.TForce', E69, E70, E71} -> (fun (V87, V88, V89) -> begin (V90 = ('dn--un--full_HasNames_(Term $vars)'(V0, V89, V2))), case V90 of {'Idris.Prelude.Types.Left', E72} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V87, V88, V92}} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69, E70, E71)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_(NameMap $a)'(V0, V1) -> fun (V2) -> ('nested--11552-6987--in--un--insertAll'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V1)), V2)) end.
'dn--un--full_HasNames_(Maybe $a)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V7 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V5, V6) -> (((V5(V1))(V4))(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V9}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(CaseTree $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--full_HasNames_(Term $vars)'(V0, V5, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_(CaseAlt $vars)'(V0, V10, V11)) end end, V6, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> begin (V17 = ('dn--un--full_HasNames_(Term $vars)'(V0, V16, V2))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_(CaseAlt $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('un--lookupCtxtExact'(V3, V0))(V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Just', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', case V13 of {'Idris.Core.Context.Context.MkGlobalDef', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V15 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5, V9}} end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V3, V4, V5, V9}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E29, E30, E31} -> (fun (V34, V35, V36) -> begin (V37 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V36, V2))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V34, V35, V39}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30, E31)); {'Idris.Core.CaseTree.ConstCase', E34, E35} -> (fun (V40, V41) -> begin (V42 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V41, V2))), case V42 of {'Idris.Prelude.Types.Left', E36} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V40, V44}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); {'Idris.Core.CaseTree.DefaultCase', E38} -> (fun (V45) -> begin (V46 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V45, V2))), case V46 of {'Idris.Prelude.Types.Left', E39} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V48}} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_((Env Term) $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V3, V4) -> begin (V7 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V5) -> fun (V6) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V5, V6)) end end, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V4, V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V9, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_StripNamespace_GlobalDef'() -> {'Idris.Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_GlobalDef'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_GlobalDef'(V2, V3)) end end}.
'dn--un--__Impl_StripNamespace_Def'() -> {'Idris.Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_Def'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_Def'(V2, V3)) end end}.
'dn--un--__Impl_Show_BuiltinType'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_BuiltinType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_BuiltinType'(V1, V2)) end end}.
'dn--un--__Impl_HasNames_Transform'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Transform'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Transform'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Totality'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Totality'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Totality'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Terminating'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Terminating'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Terminating'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_SCCall'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_SCCall'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_SCCall'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Pat'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Pat'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Pat'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_PartialReason'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_PartialReason'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_PartialReason'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Name'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Name'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Name'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_GlobalDef'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_GlobalDef'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_GlobalDef'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Def'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Def'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Def'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Covering'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Covering'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Covering'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Clause'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Clause'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Clause'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(Term $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(Term $vars)'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(Maybe $a)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_(Maybe $a)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--resolved_HasNames_(Maybe $a)'(V0, V4, V5, V6)) end end end}.
'dn--un--__Impl_HasNames_(CaseTree $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(CaseTree $vars)'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(CaseAlt $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(CaseAlt $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_((Env Term) $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_((Env Term) $vars)'(V3, V4, V5)) end end end}.
'un--withLogLevel'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V74 = case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V12 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> case V40 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V59 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V142 = begin (V141 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> case V79 of {'Idris.Core.Options.MkOptions', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114) -> case V107 of {'Idris.Core.Options.MkSessionOpts', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133} -> (fun (V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140) -> {'Idris.Core.Context.MkDefs', V75, V76, V77, V78, {'Idris.Core.Options.MkOptions', V105, V106, {'Idris.Core.Options.MkSessionOpts', V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V1, V74)), V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140}, V108, V109, V110, V111, V112, V113, V114}, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V141} end), case V142 of {'Idris.Prelude.Types.Left', E134} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V144) -> begin (V145 = (V2(V3))), case V145 of {'Idris.Prelude.Types.Left', E136} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V147) -> begin (V149 = begin (V148 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V148} end), case V149 of {'Idris.Prelude.Types.Left', E138} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V151) -> begin (V219 = begin (V218 = ('erlang':'put'(V0, case V151 of {'Idris.Core.Context.MkDefs', E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169} -> (fun (V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181) -> case V156 of {'Idris.Core.Options.MkOptions', E170, E171, E172, E173, E174, E175, E176, E177, E178, E179} -> (fun (V182, V183, V184, V185, V186, V187, V188, V189, V190, V191) -> case V184 of {'Idris.Core.Options.MkSessionOpts', E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205} -> (fun (V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217) -> {'Idris.Core.Context.MkDefs', V152, V153, V154, V155, {'Idris.Core.Options.MkOptions', V182, V183, {'Idris.Core.Options.MkSessionOpts', V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V74, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217}, V185, V186, V187, V188, V189, V190, V191}, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181} end(E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E170, E171, E172, E173, E174, E175, E176, E177, E178, E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V218} end), case V219 of {'Idris.Prelude.Types.Left', E206} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V221) -> {'Idris.Prelude.Types.Right', V147} end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--withExtendedNS'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V70 = begin (V69 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> {'Idris.Core.Context.MkDefs', V39, V40, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V38, V1)), V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V69} end), case V70 of {'Idris.Prelude.Types.Left', E62} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V72) -> begin (V79 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V73) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V74) -> case V74 of {'Idris.Prelude.Types.Left', E64} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V76}} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2, V73)) end, fun (V77) -> fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V77}} end end, V3))), case V79 of {'Idris.Prelude.Types.Left', E66} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V81) -> begin (V83 = begin (V82 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V82} end), case V83 of {'Idris.Prelude.Types.Left', E68} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V85) -> begin (V117 = begin (V116 = ('erlang':'put'(V0, case V85 of {'Idris.Core.Context.MkDefs', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> {'Idris.Core.Context.MkDefs', V86, V87, V38, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V116} end), case V117 of {'Idris.Prelude.Types.Left', E100} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V119) -> case V81 of {'Idris.Prelude.Types.Left', E102} -> (fun (V120) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V120, V3)) end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V121) -> {'Idris.Prelude.Types.Right', V121} end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--withCtxt'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'un--wrapRef'({'Idris.Core.Context.Ctxt'}, V0, fun (V3) -> ('nested--23155-17730--in--un--resetCtxt'(V0, V3)) end, V1, V2)).
'un--visibleInAny'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, fun (V29) -> ('un--visibleIn'(V29, V1, V2)) end, V0)).
'un--visibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V2 of 0 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--updateTy'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E35} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V44) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.Context.MkGlobalDef', V46, V47, V2, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V45)) end, V3)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateSession'(V0, V1, V2) -> begin (V3 = ('un--getSession'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ('un--setSession'(V0, (V1(V5)), V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> case (V2(case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V59 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E35} -> (fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V63) -> case V63 of {'Idris.Prelude.Types.Left', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V65) -> {'Idris.Prelude.Types.Right', 0} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('un--addDef'(V0, V1, case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> {'Idris.Core.Context.Context.MkGlobalDef', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V62, V85, V86} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V66)) end, V3)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unsetFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> begin (V64 = ('Idris.Idris2.Data.List':'un--filter'(fun (V43) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V43, V3)) end, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V55 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V65) -> case V65 of {'Idris.Prelude.Types.Left', E55} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V67) -> {'Idris.Prelude.Types.Right', 0} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V68) -> ('un--addDef'(V0, V2, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> {'Idris.Core.Context.Context.MkGlobalDef', V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V64, V81, V82, V83, V84, V85, V86, V87, V88} end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V68)) end, V4)) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--undefinedName'(V0, V1, V2, V3) -> ('un--maybeMisspelling'(V0, {'Idris.Core.Core.UndefinedName', V1, V2}, V2, V3)).
'un--toResolvedNames'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V8, V9) -> (((V9(case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--toFullNames'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V8, V9) -> (((V8(case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--startTimer'(V0, V1, V2, V3) -> begin (V4 = ('un--getTime'(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V41 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', (V6 + (V1 * 1000000)), V2}}, V40} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sndName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V9 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case V5 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V14 of {'Idris.Core.Options.MkOptions', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V44 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setWorkingDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V39 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V1))(V10))), {'Idris.Prelude.Types.Right', V38} end end, V2))), case V39 of {'Idris.Prelude.Types.Left', E4} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V41) -> begin (V70 = begin (V69 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> V48 end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), begin (V56 = (V53(V54))), (V55(V56)) end end end end end end end}, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), ((V60(V62))(V61)) end end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V64(V65))), (V66(V65)) end end end end}, fun (V67) -> fun (V68) -> V68 end end}))(V2))), {'Idris.Prelude.Types.Right', V69} end), case V70 of {'Idris.Prelude.Types.Left', E6} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V72) -> case V72 of {'Idris.Prelude.Types.Just', E8} -> (fun (V73) -> begin (V124 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> case V78 of {'Idris.Core.Options.MkOptions', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> case V104 of {'Idris.Core.Options.MkDirs', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123) -> {'Idris.Core.Context.MkDefs', V74, V75, V76, V77, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V73, V115, V116, V117, V118, V119, V120, V121, V122, V123}, V105, V106, V107, V108, V109, V110, V111, V112, V113}, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103} end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V124} end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V7 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.Context.MkContext', V37, V38, V39, V40, V41, V42, V43, [V1 | V44], V45, V46, V47}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisibility'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E35} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V45) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('un--addDef'(V0, V2, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V3, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end, V4)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUniqueSearch'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> begin (V43 = {'Idris.Prelude.Types.Just', V42}), (('case--case block in setUniqueSearch-14210'(V3, V2, V1, V0, V8, V42, V43, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V61 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E34)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUnboundImplicits'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V40 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, {'Idris.Core.Options.MkElabDirectives', V47, V1, V49, V50, V51, V52, V53}, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTotality'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E35} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V45) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('un--addDef'(V0, V2, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V3, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end, V4)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTerminating'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E35} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V45) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('un--addDef'(V0, V2, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> case V57 of {'Idris.Core.TT.MkTotality', E57, E58} -> (fun (V67, V68) -> {'Idris.Core.Context.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, {'Idris.Core.TT.MkTotality', V3, V68}, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end, V4)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSourceDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V1, V49, V50, V51, V52, V53, V54, V55, V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSizeChange'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E35} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V45) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('un--addDef'(V0, V2, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V3} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end, V4)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSession'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V47 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V1, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSearchTimeout'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V73 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V39 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, {'Idris.Core.Options.MkSessionOpts', V47, V48, V49, V50, V51, V52, V53, V54, V1, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72}, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setRewrite'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V3, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('un--checkUnambig'(V0, V1, V2, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V45 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkDefs', V15, V16, V17, V18, ('Idris.Idris2.Core.Options':'un--setRewrite'(V14, V11, V19)), V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V45} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefixRecordProjections'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V40 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, {'Idris.Core.Options.MkElabDirectives', V47, V48, V49, V50, V51, V52, V1}, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefix'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V49, V50, V51, V1, V53, V54, V55, V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPair'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('un--checkUnambig'(V0, V1, V2, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('un--checkUnambig'(V0, V1, V3, V5))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('un--checkUnambig'(V0, V1, V4, V5))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V49 = ('erlang':'put'(V0, case V9 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V19, V20, V21, V22, ('Idris.Idris2.Core.Options':'un--setPair'(V12, V15, V18, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V49} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPPrint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V47 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V1, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOutputDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V49, V50, V1, V52, V53, V54, V55, V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOpenHints'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V1, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNextEntry'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V7 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.Context.MkContext', V37, V1, V39, V40, V41, V42, V43, V44, V45, V46, V47}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNestedNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V1, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNameFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtName'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of [E34 | E35] -> (fun (V42, V43) -> case V42 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V44, V45) -> case V45 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V46, V47) -> case V43 of [] -> begin (V69 = [V3 | ('Idris.Idris2.Data.List':'un--filter'(fun (V48) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V48, V3)) end, case V47 of {'Idris.Core.Context.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V60 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V70) -> case V70 of {'Idris.Prelude.Types.Left', E60} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V72) -> {'Idris.Prelude.Types.Right', 0} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V73) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V46}, case V47 of {'Idris.Core.Context.Context.MkGlobalDef', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> {'Idris.Core.Context.Context.MkGlobalDef', V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V69, V86, V87, V88, V89, V90, V91, V92, V93} end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V73)) end, V4)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V94) -> ('Idris.Idris2.Builtin':'un--fst'(V94)) end, V41))}, V4)) end end(E38, E39)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V95) -> ('Idris.Idris2.Builtin':'un--fst'(V95)) end, V41))}, V4)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V96) -> ('Idris.Idris2.Builtin':'un--fst'(V96)) end, V41))}, V4)) end end(E34, E35)); [] -> ('un--undefinedName'(V0, V1, V2, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V97) -> ('Idris.Idris2.Builtin':'un--fst'(V97)) end, V41))}, V4)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V1, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNFThreshold'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V40 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, {'Idris.Core.Options.MkElabDirectives', V47, V48, V49, V50, V51, V1, V53}, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setMutWith'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> case V60 of {'Idris.Core.Context.Context.TCon', E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70) -> ('un--updateDef'(V0, V2, fun (V71) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.TCon', V63, V64, V65, V66, V67, V3, V69, V70}} end, V4)) end(E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V73 end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setMutWith]"/utf8>>))}, V4)) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLogTimings'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V73 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V39 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, {'Idris.Core.Options.MkSessionOpts', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V1, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72}, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLinearCheck'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E35} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V44) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.Context.MkGlobalDef', V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V2, V63, V64, V65} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V45)) end, V3)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setIncData'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, [{'Idris.Builtin.MkPair', V1, V2} | V30], V31, V32, V33, V34, V35, V36, V37} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromString'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromString'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromInteger'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromInteger'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromDouble'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromDouble'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromChar'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromChar'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> begin (V64 = [V3 | ('Idris.Idris2.Data.List':'un--filter'(fun (V43) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V43, V3)) end, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V55 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V65) -> case V65 of {'Idris.Prelude.Types.Left', E55} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V67) -> {'Idris.Prelude.Types.Right', 0} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V68) -> ('un--addDef'(V0, V2, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> {'Idris.Core.Context.Context.MkGlobalDef', V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V64, V81, V82, V83, V84, V85, V86, V87, V88} end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V68)) end, V4)) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExternal'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> begin (V43 = {'Idris.Prelude.Types.Just', V42}), (('case--case block in setExternal-14346'(V3, V2, V1, V0, V8, V42, V43, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V61 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E34)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExtension'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setExtension'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetermining'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> case V60 of {'Idris.Core.Context.Context.TCon', E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70) -> begin (V91 = (('nested--18932-13821--in--un--getPos'(V3, V2, V1, V0, 0, V3, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V73 end(E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V91 of {'Idris.Prelude.Types.Left', E103} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V93) -> ('un--updateDef'(V0, V2, fun (V94) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.TCon', V63, V64, V65, V93, V67, V68, V69, V70}} end, V4)) end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114) -> V96 end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V4)) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetags'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> case V60 of {'Idris.Core.Context.Context.TCon', E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70) -> ('un--updateDef'(V0, V2, fun (V71) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Context.TCon', V63, V64, V65, V66, V67, V68, V69, V3}} end, V4)) end(E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V73 end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V4)) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDependsDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V49, V1, V51, V52, V53, V54, V55, V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDefaultTotalityOption'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V40 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, {'Idris.Core.Options.MkElabDirectives', V47, V48, V1, V50, V51, V52, V53}, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDebugElabCheck'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V73 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V39 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, {'Idris.Core.Options.MkSessionOpts', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V1, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72}, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCtxt'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V1, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCovering'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E35} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V45) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('un--addDef'(V0, V2, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> case V57 of {'Idris.Core.TT.MkTotality', E57, E58} -> (fun (V67, V68) -> {'Idris.Core.Context.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, {'Idris.Core.TT.MkTotality', V67, V3}, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end, V4)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCompiled'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E35} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V44) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> ('un--addDef'(V0, V1, case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.Context.MkGlobalDef', V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, {'Idris.Prelude.Types.Just', V2}, V65} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V45)) end, V3)) end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCG'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V73 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V39 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, {'Idris.Core.Options.MkSessionOpts', V47, V48, V49, V50, V1, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72}, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setBuildDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V1, V50, V51, V52, V53, V54, V55, V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAutoImplicitLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V40 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, {'Idris.Core.Options.MkElabDirectives', V47, V48, V49, V50, V1, V52, V53}, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAmbigLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V40 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, {'Idris.Core.Options.MkElabDirectives', V47, V48, V49, V1, V51, V52, V53}, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAllPublic'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V48 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V7 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.Context.MkContext', V37, V38, V39, V40, V41, V42, V43, V44, V1, V46, V47}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--returnDef'(V0, V1, V2) -> case V0 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}}; 1 -> ('case--returnDef-3984'(V2, V1, case V2 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolved'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V3, V4) -> ((V4(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolveName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E38} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V3} end(E38)); _ -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--getPosition'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> begin (V43 = ('un--setCtxt'(V0, V42, V2))), case V43 of {'Idris.Prelude.Types.Left', E36} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V45) -> {'Idris.Prelude.Types.Right', V41} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--resetFirstEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V88 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V6 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.Context.MkContext', case V5 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> case V47 of {'Idris.Core.Context.Context.MkContext', E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V78 end(E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V88} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--reducibleInAny'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, fun (V29) -> ('un--reducibleIn'(V29, V1, V2)) end, V0)).
'un--reducibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Core.Name.UN', E2} -> (fun (V5) -> case V2 of 1 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); 0 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); _ -> 1 end end(E2)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--recordWarning'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('un--getSession'(V0, V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V40 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, [V1 | V39]} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V40} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--prettyName'(V0, V1) -> case V1 of {'Idris.Core.Name.Nested', E0, E1} -> (fun (V2, V3) -> fun (V4) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V13 = ('un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, {'Idris.Core.Name.Resolved', V5}, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = (('un--prettyName'(V0, V15))(V4))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = (('un--prettyName'(V0, V3))(V4))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<","/utf8>>, V21))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end end(E0, E1)); {'Idris.Core.Name.CaseBlock', E10, E11} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case block in "/utf8>>, V22))} end end(E10, E11)); {'Idris.Core.Name.WithBlock', E12, E13} -> (fun (V25, V26) -> fun (V27) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with block in "/utf8>>, V25))} end end(E12, E13)); {'Idris.Core.Name.NS', E14, E15} -> (fun (V28, V29) -> ('un--prettyName'(V0, V29)) end(E14, E15)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end.
'un--noDeclaration'(V0, V1, V2, V3) -> ('un--maybeMisspelling'(V0, {'Idris.Core.Core.NoDeclaration', V1, V2}, V2, V3)).
'un--newEntry'(V0, V1) -> begin (V13 = case V1 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V25 = case V1 of {'Idris.Core.Context.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V18 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V25))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> begin (V63 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, ('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V30)))) of 1 -> begin (V59 = begin (V58 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArrayCopy'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, ((('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V30)) + ('un--Grow'())) rem 9223372036854775808), V30))(V26))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E24} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V61) -> begin (V62 = ('erlang':'put'(V25, V61))), {'Idris.Prelude.Types.Right', V62} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V63 of {'Idris.Prelude.Types.Left', E26} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, case V1 of {'Idris.Core.Context.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> {'Idris.Core.Context.Context.MkContext', V66, ((V13 + 1) rem 9223372036854775808), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V0, V13, V68)), ('un--addPossible'(V0, V13, V69)), V70, V71, V72, V73, V74, V75, V76} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--newDef'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Core.Context.Context.MkGlobalDef', V0, V1, V4, [], [], [], [], V2, V3, V5, ('Idris.Idris2.Core.TT':'un--unchecked'()), [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 0, 0, 0, V6, {'Idris.Prelude.Types.Nothing'}, []}.
'un--newAlias'(V0, V1, V2, V3) -> begin (V4 = (('un--getPosition'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', case V8 of {'Idris.Core.Context.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.Context.Context.MkContext', V9, V10, V11, ('un--addAlias'(V0, V1, V7, V12)), V13, V14, V15, V16, V17, V18, V19} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--namesResolvedAs'(V0) -> ('Idris.Idris2.Libraries.Data.NameMap':'dn--un--map_Functor_NameMap'(fun (V1) -> {'Idris.Core.Name.Resolved', V1} end, case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--maybeMisspelling'(V0, V1, V2, V3) -> begin (V4 = (('un--getSimilarNames'(V0, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V1, V3)); [E2 | E3] -> (fun (V7, V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.MaybeMisspelling', V1, {'Idris.Data.List1.:::', V7, V8}}, V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupTyName'(V0, V1, V2) -> ('un--lookupNameBy'(fun (V3) -> case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupTyExact'(V0, V1, V2) -> ('un--lookupExactBy'(fun (V3) -> case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupNameBy'(V0, V1, V2, V3) -> begin (V4 = (('un--lookupCtxtName'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V10, (V0(V11))}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupExactBy'(V0, V1, V2, V3) -> begin (V4 = (('un--lookupCtxtExact'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', (V0(V7))}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupDefTyExact'(V0, V1, V2) -> ('un--lookupExactBy'(fun (V3) -> {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V26 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V0, V1, V2)).
'un--lookupDefName'(V0, V1, V2) -> ('un--lookupNameBy'(fun (V3) -> case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupDefExact'(V0, V1, V2) -> ('un--lookupExactBy'(fun (V3) -> case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupCtxtName'(V0, V1) -> ('case--lookupCtxtName-4721'(V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--lookupCtxtExactI'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E12} -> (fun (V2) -> fun (V3) -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Idris.Core.Context.Context.MkContext', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V10 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E13} -> (fun (V15) -> begin (V16 = ('un--decode'(V1, V2, 1, V15, V3))), case V16 of {'Idris.Prelude.Types.Left', E14} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V18) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.Context.MkContext', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V28 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V18))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V42 = begin (V41 = ('erlang':'get'(case V1 of {'Idris.Core.Context.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V34 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E38} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V44) -> begin (V73 = begin (V72 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> V51 end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), begin (V59 = (V56(V57))), (V58(V59)) end end end end end end end}, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), ((V63(V65))(V64)) end end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V67(V68))), (V69(V68)) end end end end}, fun (V70) -> fun (V71) -> V71 end end}, V44, V2))(V3))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E40} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V75) -> case V75 of {'Idris.Prelude.Types.Just', E42} -> (fun (V76) -> begin (V77 = ('un--decode'(V1, V2, 1, V76, V3))), case V77 of {'Idris.Prelude.Types.Left', E43} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.Context.MkContext', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V89 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V79))} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V93 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V102) -> ('un--lookupCtxtExactI'({'Idris.Core.Name.Resolved', V102}, V1)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V103) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupCtxtExact'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E5} -> (fun (V2) -> fun (V3) -> ('case--lookupCtxtExact-4149'(V2, V1, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Idris.Core.Context.Context.MkContext', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V10 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V3)) end end(E5)); _ -> fun (V15) -> begin (V16 = (('un--lookupCtxtExactI'(V0, V1))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E2} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V20, V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--lookupContextEntry'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E12} -> (fun (V2) -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Idris.Core.Context.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E13} -> (fun (V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V14}}} end end(E13)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V27 = case V1 of {'Idris.Core.Context.Context.MkContext', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V20 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V27))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E25} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V32) -> begin (V61 = begin (V60 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V32, V2))(V28))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E27} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V63) -> case V63 of {'Idris.Prelude.Types.Just', E29} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V64}}} end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V67 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V76) -> ('un--lookupContextEntry'({'Idris.Core.Name.Resolved', V76}, V1)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lazyActive'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V40 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, V39, {'Idris.Core.Options.MkElabDirectives', V1, V48, V49, V50, V51, V52, V53}, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, fun (V33) -> ('nested--21785-16396--in--un--visible'(V1, V0, V33)) end, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Core.Name.Namespace':'un--allParents'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V36 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(case V6 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> V67 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.Core.Context.MkDefs', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123) -> case V94 of {'Idris.Core.Context.Context.MkContext', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102} -> (fun (V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> V131 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isUnboundImplicits'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V39 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V46, V47, V48, V49, V50, V51, V52) -> V47 end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isPrimName'(V0, V1) -> case ('Idris.Idris2.Core.Name':'un--splitNS'(V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> ('nested--24902-19392--in--un--go'(V1, V0, V2, V3, V0)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isPrefixRecordProjections'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V9 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V45, V46, V47, V48, V49, V50, V51) -> V51 end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V52) -> begin (V53 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V53} end end, V1)).
'un--isPairType'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V41 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E42} -> (fun (V47) -> begin (V48 = ('un--getFullName'(V0, V1, V2))), case V48 of {'Idris.Prelude.Types.Left', E43} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V50) -> begin (V54 = ('un--getFullName'(V0, case V47 of {'Idris.Core.Options.MkPairNs', E45, E46, E47} -> (fun (V51, V52, V53) -> V51 end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V54 of {'Idris.Prelude.Types.Left', E48} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V50, V56))} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isLazyActive'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V39 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V46, V47, V48, V49, V50, V51, V52) -> V46 end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isHidden'(V0, V1) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V12 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))).
'un--isExtension'(V0, V1) -> ('Idris.Idris2.Core.Options':'un--isExtension'(V0, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--isEqualTy'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V42 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E42} -> (fun (V47) -> begin (V48 = ('un--getFullName'(V0, V1, V2))), case V48 of {'Idris.Prelude.Types.Left', E43} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V50) -> begin (V53 = ('un--getFullName'(V0, case V47 of {'Idris.Core.Options.MkRewriteNs', E45, E46} -> (fun (V51, V52) -> V51 end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V53 of {'Idris.Prelude.Types.Left', E47} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V55) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V50, V55))} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isAllPublic'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V6 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V44 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initSize'() -> 10000.
'un--initHash'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V36 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, 5381, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initDefs'(V0) -> begin (V1 = ('un--initCtxt'(V0))), case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Options':'un--defaults'(V0))), case V4 of {'Idris.Prelude.Types.Left', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkDefs', V3, [], ('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()), [], V6, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), 100, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), 5381, [], [], [], [], [], [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), {'Idris.Prelude.Types.Nothing'}, []}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxtS'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Context.Context.Arr'}, V32, V1))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Context.MkContext', 0, 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.UserNameMap':'un--empty'()), V35, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), [('Idris.Idris2.Core.Name.Namespace':'un--partialEvalNS'()) | []], 0, 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxt'(V0) -> ('un--initCtxtS'(('un--initSize'()), V0)).
'un--inCurrentNS'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.UN', E0} -> (fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Name.UN', V3}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.Name.CaseBlock', E33, E34} -> (fun (V38, V39) -> begin (V41 = begin (V40 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E35} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V43 of {'Idris.Core.Context.MkDefs', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V46 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34)); {'Idris.Core.Name.WithBlock', E67, E68} -> (fun (V74, V75) -> begin (V77 = begin (V76 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E69} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V79 of {'Idris.Core.Context.MkDefs', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> V82 end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67, E68)); {'Idris.Core.Name.Nested', E101, E102} -> (fun (V110, V111) -> begin (V113 = begin (V112 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V112} end), case V113 of {'Idris.Prelude.Types.Left', E103} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V115) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V115 of {'Idris.Core.Context.MkDefs', E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134} -> (fun (V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145) -> V118 end(E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101, E102)); {'Idris.Core.Name.MN', E135, E136} -> (fun (V146, V147) -> begin (V149 = begin (V148 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V148} end), case V149 of {'Idris.Prelude.Types.Left', E137} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V151) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V151 of {'Idris.Core.Context.MkDefs', E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168} -> (fun (V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181) -> V154 end(E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135, E136)); {'Idris.Core.Name.DN', E169, E170} -> (fun (V182, V183) -> begin (V185 = begin (V184 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V184} end), case V185 of {'Idris.Prelude.Types.Left', E171} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V187) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V187 of {'Idris.Core.Context.MkDefs', E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202} -> (fun (V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217) -> V190 end(E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169, E170)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'un--hideName'(V0, V1) -> case V1 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V0, 0, V12))} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--hide'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of [E34 | E35] -> (fun (V41, V42) -> case V41 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V43, V44) -> case V42 of [] -> begin (V75 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V43, V45)), V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V75} end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V76) -> ('Idris.Idris2.Builtin':'un--fst'(V76)) end, V40))}, V3)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V77) -> ('Idris.Idris2.Builtin':'un--fst'(V77)) end, V40))}, V3)) end end(E34, E35)); [] -> ('un--undefinedName'(V0, V1, V2, V3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V78) -> ('Idris.Idris2.Builtin':'un--fst'(V78)) end, V40))}, V3)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hasFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context.Context':'dn--un--==_Eq_DefFlag'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context.Context':'dn--un--/=_Eq_DefFlag'(V45, V46)) end end}, V3, case V42 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V58 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getWorkingDir'(V0) -> begin (V29 = begin (V28 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> case V31 of {'Idris.Prelude.Types.Just', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Right', V32} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisible'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V6 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V43 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisibility'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> {'Idris.Prelude.Types.Right', case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V51 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUserHoles'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V54 = ('Idris.Idris2.Data.List':'un--sort'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V22, V23)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V49 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), ('Idris.Idris2.Core.Core':'un--filterM'(fun (V55) -> fun (V56) -> ('nested--15419-10648--in--un--isHole'(V0, V5, V55, V56)) end end, V54, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTotality'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> {'Idris.Prelude.Types.Right', case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V52 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTime'(V0) -> begin (V2 = begin (V1 = ('Idris.Idris2.System.Clock':'un--clockTime'(1, V0))), {'Idris.Prelude.Types.Right', V1} end), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ((('Idris.Idris2.System.Clock':'un--seconds'(V4)) * ('nested--25752-20205--in--un--nano'())) + ('Idris.Idris2.System.Clock':'un--nanoseconds'(V4)))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSizeChange'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E34} -> (fun (V41) -> {'Idris.Prelude.Types.Right', case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V61 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSimilarNames'(V0, V1) -> ('case--getSimilarNames-9960'(V1, V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V4, V5)) end end end end, fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_UserName'(V6)) end, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1)))))).
'un--getSession'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V38 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSearchData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = ('un--lookupDefExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E34} -> (fun (V42) -> case V42 of {'Idris.Core.Context.Context.TCon', E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50) -> begin (V123 = begin (V57 = ('un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V51) -> fun (V52) -> fun (V53) -> ('dn--un--full_HasNames_Name'(V51, V52, V53)) end end end, fun (V54) -> fun (V55) -> fun (V56) -> ('dn--un--resolved_HasNames_Name'(V54, V55, V56)) end end end}, V3, V4))), case V57 of {'Idris.Prelude.Types.Left', E43} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V59) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V59, case V8 of {'Idris.Core.Context.MkDefs', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V67 end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E45} -> (fun (V90) -> ('Idris.Idris2.Core.Core':'un--filterM'(fun (V91) -> fun (V92) -> ('nested--18245-13182--in--un--notHidden'(V3, V2, V1, V0, V91, case V8 of {'Idris.Core.Context.MkDefs', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V93 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V92)) end end, V90, V4)) end(E45)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V123 of {'Idris.Prelude.Types.Left', E106} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V125) -> case V2 of 1 -> begin (V191 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V126) -> fun (V127) -> begin (V158 = ('nested--18245-13182--in--un--notHidden'(V3, V2, V1, V0, V126, case V8 of {'Idris.Core.Context.MkDefs', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157) -> V128 end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V127))), case V158 of {'Idris.Prelude.Types.Left', E138} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V160) -> {'Idris.Prelude.Types.Right', case ('nested--18245-13183--in--un--isDefault'(V3, V2, V1, V0, V126)) of 1 -> V160; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V8 of {'Idris.Core.Context.MkDefs', E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169} -> (fun (V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190) -> V169 end(E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V4))), case V191 of {'Idris.Prelude.Types.Left', E170} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V193) -> begin (V195 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V194) -> ('Idris.Idris2.Builtin':'un--fst'(V194)) end, V193))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 0, V195} | []]}} end end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V258 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V196) -> fun (V197) -> ('nested--18245-13182--in--un--notHidden'(V3, V2, V1, V0, V196, case V8 of {'Idris.Core.Context.MkDefs', E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201} -> (fun (V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227) -> V198 end(E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V197)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V8 of {'Idris.Core.Context.MkDefs', E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231} -> (fun (V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257) -> V237 end(E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V4))), case V258 of {'Idris.Prelude.Types.Left', E232} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E232)); {'Idris.Prelude.Types.Right', E233} -> (fun (V260) -> begin (V262 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V261) -> ('Idris.Idris2.Builtin':'un--fst'(V261)) end, V260))), begin (V328 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V263) -> fun (V264) -> begin (V295 = ('nested--18245-13182--in--un--notHidden'(V3, V2, V1, V0, V263, case V8 of {'Idris.Core.Context.MkDefs', E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263} -> (fun (V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294) -> V265 end(E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V264))), case V295 of {'Idris.Prelude.Types.Left', E264} -> (fun (V296) -> {'Idris.Prelude.Types.Left', V296} end(E264)); {'Idris.Prelude.Types.Right', E265} -> (fun (V297) -> {'Idris.Prelude.Types.Right', case ('nested--18245-13183--in--un--isDefault'(V3, V2, V1, V0, V263)) of 1 -> 0; 0 -> V297; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V8 of {'Idris.Core.Context.MkDefs', E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295} -> (fun (V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327) -> V306 end(E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V4))), case V328 of {'Idris.Prelude.Types.Left', E296} -> (fun (V329) -> {'Idris.Prelude.Types.Left', V329} end(E296)); {'Idris.Prelude.Types.Right', E297} -> (fun (V330) -> begin (V332 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V331) -> ('Idris.Idris2.Builtin':'un--fst'(V331)) end, V330))), begin (V335 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V333) -> ('Idris.Idris2.Builtin':'un--fst'(V333)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V334) -> ('nested--18245-13184--in--un--direct'(V3, V2, V1, V0, V334)) end, V125))))), begin (V338 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V336) -> ('Idris.Idris2.Builtin':'un--fst'(V336)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V337) -> case ('nested--18245-13184--in--un--direct'(V3, V2, V1, V0, V337)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V125))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V46, ('Idris.Idris2.Data.List':'un--filter'(fun (V339) -> ('Idris.Idris2.Data.List':'un--isCons'(('Idris.Idris2.Builtin':'un--snd'(V339)))) end, [{'Idris.Builtin.MkPair', 0, V262} | [{'Idris.Builtin.MkPair', 0, V332} | [{'Idris.Builtin.MkPair', case case V47 of {'Idris.Core.Context.Context.MkTypeFlags', E298, E299} -> (fun (V340, V341) -> V340 end(E298, E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V335} | [{'Idris.Builtin.MkPair', 1, V338} | []]]]]))}} end end end end(E297)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('un--undefinedName'(V0, V1, V3, V4)) end end(E34)); _ -> ('un--undefinedName'(V0, V1, V3, V4)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getRewrite'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkRewriteNs', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case V5 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V13 of {'Idris.Core.Options.MkOptions', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V44 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getResolvedAs'(V0) -> case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPrimitiveNames'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Options':'un--primNamesToList'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> ('un--getPrimNames'(V0, V5)) end, V1)).
'un--getPrimNames'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V2) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V3) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Idris.Prelude.Types.Right', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> {'Idris.Core.Options.MkPrimNs', V6, V7, V8, V9} end end end end} end, fun (V10) -> ('un--fromIntegerName'(V0, V10)) end, V4)) end, fun (V11) -> ('un--fromStringName'(V0, V11)) end, V3)) end, fun (V12) -> ('un--fromCharName'(V0, V12)) end, V2)) end, fun (V13) -> ('un--fromDoubleName'(V0, V13)) end, V1)).
'un--getPosition'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E12} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V1}} end end(E12)); _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V6 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, V1}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--newEntry'(V0, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getPPrint'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V37 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextTypeTag'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V37 = begin (V36 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, ((V12 + 1) rem 9223372036854775808), V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V46 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V6 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V37 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNestedNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNameID'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E11)); _ -> ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end.
'un--getNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getImported'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V24 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFullName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V3}, case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E35} -> (fun (V41) -> {'Idris.Prelude.Types.Right', case V41 of {'Idris.Core.Context.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V43 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'un--getFnName'(V0) -> case V0 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case ('Idris.Idris2.Core.TT':'un--getFn'(V4)) of {'Idris.Core.TT.Ref', E5, E6, E7} -> (fun (V6, V7, V8) -> {'Idris.Prelude.Types.Just', V8} end(E5, E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getFieldNames'(V0, V1) -> begin (V13 = case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--filterBy'(V14, V15)) end end, V13, fun (V16) -> case ('Idris.Idris2.Core.Name':'un--isRF'(V16)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E11} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V18, V19) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V18, V1)) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))) end.
'un--getDirs'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V36 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDirectives'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V7} end, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V12 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> case V40 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V53 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V74) -> ('nested--21077-15730--in--un--getDir'(V1, V0, V74)) end, case V6 of {'Idris.Core.Context.MkDefs', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> V95 end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDefaultTotalityOption'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V39 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V46, V47, V48, V49, V50, V51, V52) -> V48 end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContent'(V0) -> case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getAutoImplicitLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V39 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V46, V47, V48, V49, V50, V51, V52) -> V50 end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAmbigLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V39 of {'Idris.Core.Options.MkElabDirectives', E42, E43, E44, E45, E46, E47, E48} -> (fun (V46, V47, V48, V49, V50, V51, V52) -> V49 end(E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--full'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V3, V4) -> ((V3(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fstName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case V5 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V14 of {'Idris.Core.Options.MkOptions', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V44 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromStringName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V42 of {'Idris.Core.Options.MkPrimNs', E42, E43, E44, E45} -> (fun (V46, V47, V48, V49) -> V47 end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromIntegerName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V42 of {'Idris.Core.Options.MkPrimNs', E42, E43, E44, E45} -> (fun (V46, V47, V48, V49) -> V46 end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromDoubleName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V42 of {'Idris.Core.Options.MkPrimNs', E42, E43, E44, E45} -> (fun (V46, V47, V48, V49) -> V49 end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromCharName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V10 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V42 of {'Idris.Core.Options.MkPrimNs', E42, E43, E44, E45} -> (fun (V46, V47, V48, V49) -> V48 end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--extendNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V1)), V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpStaging'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V77 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Staging area: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V34, V35)) end end}, ('Idris.Idris2.Libraries.Data.IntMap':'un--keys'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> case V36 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V72 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))(V1))), {'Idris.Prelude.Types.Right', V77} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V46 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V15, V25)), V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V38 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, ('Idris.Idris2.Data.List':'un--filter'(fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V37, V1)) end, V8)), V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--depth'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V6 of {'Idris.Core.Context.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V41 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--decode'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.Context.Coded', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Binary.Prims.Bin'}, V6, V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_GlobalDef'(V9, V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('un--getContent'(V0))), begin (V15 = begin (V14 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = ('dn--un--resolved_HasNames_GlobalDef'(V0, ('dn--un--restoreNS_StripNamespace_GlobalDef'(V5, V12)), V4))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V49 = case V2 of 1 -> begin (V48 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> fun (V47) -> V47 end end}, V17, V1, {'Idris.Core.Context.Context.Decoded', V20}))(V4))), {'Idris.Prelude.Types.Right', V48} end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V49 of {'Idris.Prelude.Types.Left', E10} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V51) -> {'Idris.Prelude.Types.Right', V20} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.Context.Context.Decoded', E12} -> (fun (V52) -> {'Idris.Prelude.Types.Right', V52} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commitCtxt'(V0) -> ('case--commitCtxt-4878'(V0, case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--commit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V36 = (('un--commitCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), case V36 of {'Idris.Prelude.Types.Left', E32} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V38) -> ('un--setCtxt'(V0, V38, V1)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearUserHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V1, V32)), V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearTimer'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V36 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, {'Idris.Prelude.Types.Nothing'}, V35} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearSavedHints'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V36 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, [], [], V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearDefs'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V2 of {'Idris.Core.Context.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.Context.MkContext', V32, V33, V34, V35, V36, V37, V38, V39, V40, 1, V42}, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--clearCtxt'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('un--initDefs'(V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V99 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, ('nested--14372-9689--in--un--resetElab'(V0, case V5 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V43 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, case V5 of {'Idris.Core.Context.MkDefs', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> V96 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V37, V38} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V99} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkUnambig'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = ('un--lookupDefName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of [] -> ('un--undefinedName'(V0, V1, V2, V3)); [E34 | E35] -> (fun (V41, V42) -> case V41 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V43, V44) -> case V44 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V45, V46) -> case V42 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V45}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'(V47)) end, V40))}, V3)) end end(E38, E39)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('Idris.Idris2.Builtin':'un--fst'(V48)) end, V40))}, V3)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('Idris.Idris2.Builtin':'un--fst'(V49)) end, V40))}, V3)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V50) -> ('Idris.Idris2.Builtin':'un--fst'(V50)) end, V40))}, V3)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkTimer'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ('case--checkTimer-20369'(V0, V5, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V34 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--canonicalName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of [] -> ('un--undefinedName'(V0, V1, V2, V3)); [E34 | E35] -> (fun (V41, V42) -> case V41 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V43, V44) -> case V44 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V45, V46) -> case V42 of [] -> {'Idris.Prelude.Types.Right', V43}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'(V47)) end, V40))}, V3)) end end(E38, E39)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('Idris.Idris2.Builtin':'un--fst'(V48)) end, V40))}, V3)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('Idris.Idris2.Builtin':'un--fst'(V49)) end, V40))}, V3)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V50) -> ('Idris.Idris2.Builtin':'un--fst'(V50)) end, V40))}, V3)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--branchCtxt'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.Context.MkContext', V2, V3, V4, V5, V6, (1 + V7), V8, V9, V10, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--branch'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V36 = ('un--branchCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))), case V36 of {'Idris.Prelude.Types.Left', E32} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V38) -> begin (V39 = ('un--setCtxt'(V0, V38, V1))), case V39 of {'Idris.Prelude.Types.Left', E34} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V41) -> {'Idris.Prelude.Types.Right', V5} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--allNames'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_Name'(V0, V2, V3)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> {'Idris.Core.Name.Resolved', V4} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V5) -> fun (V6) -> ((V5 + V6) rem 9223372036854775808) end end, fun (V7) -> fun (V8) -> ((V7 * V8) rem 9223372036854775808) end end, fun (V9) -> V9 end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V12, V13)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V16, V17)) end end}, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V30, V31)) end end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V32) -> fun (V33) -> ((V32 + V33) rem 9223372036854775808) end end, fun (V34) -> fun (V35) -> ((V34 * V35) rem 9223372036854775808) end end, fun (V36) -> V36 end}, fun (V37) -> ((0 - V37) rem 9223372036854775808) end, fun (V38) -> fun (V39) -> ((V38 - V39) rem 9223372036854775808) end end}}}, 1, ((case V0 of {'Idris.Core.Context.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V41 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end - 1) rem 9223372036854775808))))), [], V1)).
'un--aliasName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--aliasName-10348'(V1, V0, V6, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addUserHole'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V2, V1, V33)), V34, V35, V36, V37} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addTransform'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('case--addTransform-15084'(V2, V1, V0, V7, ('un--getFnName'(V2)), V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addToSave'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('dn--un--full_HasNames_Name'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> begin (V70 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> {'Idris.Core.Context.MkDefs', V40, V41, V42, V43, V44, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V39, 0, V45)), V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V39, 0, V64)), V65, V66, V67, V68, V69} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V70} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPossible'(V0, V1, V2) -> ('case--addPossible-3428'(V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--addPkg'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V73 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V39 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, {'Idris.Core.Options.MkSessionOpts', V47, V48, V49, V50, V51, V52, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V53, [V1 | []])), V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72}, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPackageDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V49, V50, V51, V52, V53, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V54, [V1 | []])), V55, V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V46 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, 0, V25)), V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addNameDirective'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V2, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V42 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, V3, V27)), V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E38} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V3} end(E38)); _ -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--newEntry'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> begin (V43 = ('un--setCtxt'(V0, V42, V2))), case V43 of {'Idris.Prelude.Types.Left', E36} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V45) -> {'Idris.Prelude.Types.Right', V41} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--addMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, [V1 | V8], V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLogLevel'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V73 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V39 of {'Idris.Core.Options.MkSessionOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V37, V38, {'Idris.Core.Options.MkSessionOpts', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, 1, ('Idris.Idris2.Core.Options.Log':'un--defaultLogLevel'()), V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72}, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end end()); {'Idris.Prelude.Types.Just', E68} -> (fun (V74) -> begin (V141 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> case V79 of {'Idris.Core.Options.MkOptions', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114) -> case V107 of {'Idris.Core.Options.MkSessionOpts', E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134} -> (fun (V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140) -> {'Idris.Core.Context.MkDefs', V75, V76, V77, V78, {'Idris.Core.Options.MkOptions', V105, V106, {'Idris.Core.Options.MkSessionOpts', V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, 1, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V74, V126)), V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140}, V108, V109, V110, V111, V112, V113, V114}, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104} end(E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V141} end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLocalHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V46 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, 0, V26)), V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLibDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V49, V50, V51, V52, V53, V54, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V55, [V1 | []])), V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addImportedInc'(V0, V1, V2, V3) -> begin (V4 = ('un--getSession'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V33 = case V6 of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V11 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V35 = begin (V34 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V37) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V40, V41)) end end}, V33, case V6 of {'Idris.Core.Options.MkSessionOpts', E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V65 end(E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ((case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V70, V71)) end end}, V33, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun () -> fun (V72) -> begin (V73 = ('un--recordWarning'(V0, {'Idris.Core.Core.GenericWarn', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No incremental compile data for "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V1))))}, V72))), case V73 of {'Idris.Prelude.Types.Left', E30} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V75) -> begin (V77 = begin (V76 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E32} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V79) -> begin (V110 = ('erlang':'put'(V0, case V79 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> {'Idris.Core.Context.MkDefs', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, ('nested--25992-20436--in--un--drop'(V2, V1, V0, V33, V103)), V104, V105, V106, V107, V108, V109} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V110} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); {'Idris.Prelude.Types.Just', E64} -> (fun (V111) -> case V111 of {'Idris.Builtin.MkPair', E65, E66} -> (fun (V112, V113) -> fun () -> fun (V114) -> begin (V145 = ('erlang':'put'(V0, case V37 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> {'Idris.Core.Context.MkDefs', V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, ('nested--25992-20435--in--un--addMod'(V2, V1, V0, V33, {'Idris.Builtin.MkPair', V112, V113}, V138)), V139, V140, V141, V142, V143, V144} end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V145} end end end end(E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end())(V3)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addImported'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V37 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, [V1 | V25], V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHintFor'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V17 = ('un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--full_HasNames_Name'(V11, V12, V13)) end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--resolved_HasNames_Name'(V14, V15, V16)) end end end}, V2, V6))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V26 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--full_HasNames_Name'(V20, V21, V22)) end end end, fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--resolved_HasNames_Name'(V23, V24, V25)) end end end}, V3, V6))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V60 = case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V19, case V10 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V36 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V59) -> V59 end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V5 of 1 -> begin (V91 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> {'Idris.Core.Context.MkDefs', V61, V62, V63, V64, V65, V66, V67, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V19, [{'Idris.Builtin.MkPair', V28, V4} | V60], V68)), V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V91} end; 0 -> begin (V122 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121) -> {'Idris.Core.Context.MkDefs', V92, V93, V94, V95, V96, V97, V98, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V19, [{'Idris.Builtin.MkPair', V28, V4} | V60], V99)), V100, V101, V102, [{'Idris.Builtin.MkPair', V19, {'Idris.Builtin.MkPair', V28, V4}} | V103], V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121} end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V122} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHashWithNames'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--toFullNames'(V0, V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('un--addHash'(V0, V1, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHash'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V70 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, case V1 of {'Idris.Core.Hash.dn--un--__mkHashable', E32, E33} -> (fun (V38, V39) -> ((V39(case V7 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V56 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V70} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addGlobalHint'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V14 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--full_HasNames_Name'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--resolved_HasNames_Name'(V11, V12, V13)) end end end}, V1, V3))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V47 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V16, V2, V25)), V26, V27, V28, [{'Idris.Builtin.MkPair', V16, V2} | V29], V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addExtraDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V49, V50, V51, V52, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V53, [V1 | []])), V54, V55, V56}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addEntry'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(case V2 of {'Idris.Core.Context.Context.MkContext', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V9 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0)) of 1 -> begin (V15 = (('un--getPosition'(V0, V2))(V3))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> begin (V31 = case V19 of {'Idris.Core.Context.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V24 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V33 = begin (V32 = ('erlang':'get'(V31))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V64 = begin (V63 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, V35, V18, V1))(V3))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E17} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V19}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V67 = (('un--getPosition'(V0, V2))(V3))), case V67 of {'Idris.Prelude.Types.Left', E19} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V69) -> case V69 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V70, V71) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V70, case V71 of {'Idris.Core.Context.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Context.Context.MkContext', V72, V73, V74, V75, V76, V77, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V70, V1, V78)), V79, V80, V81, V82} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addDirective'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case ('Idris.Idris2.Core.Options':'un--getCG'(case V7 of {'Idris.Core.Context.MkDefs', E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V12 end(E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V65 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown code generator "/utf8>>, V1))))(V3))), {'Idris.Prelude.Types.Right', V65} end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V66) -> begin (V128 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96) -> {'Idris.Core.Context.MkDefs', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, begin (V97 = {'Idris.Core.Context.MkDefs', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96}), [{'Idris.Builtin.MkPair', case V97 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V100 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V66, V2}} | V87] end, V88, V89, V90, V91, V92, V93, V94, V95, V96} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V128} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = ('un--addCtxt'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> begin (V74 = begin (V73 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkDefs', V42, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V73} end), case V74 of {'Idris.Prelude.Types.Left', E66} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V76) -> begin (V119 = case V2 of {'Idris.Core.Context.Context.MkGlobalDef', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96) -> case V94 of {'Idris.Core.Context.Context.None'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Core.Context.Context.Hole', E108, E109} -> (fun (V97, V98) -> {'Idris.Prelude.Types.Right', 0} end(E108, E109)); _ -> ('un--clearUserHole'(V0, case V2 of {'Idris.Core.Context.Context.MkGlobalDef', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V100 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)) end end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V119 of {'Idris.Prelude.Types.Left', E110} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V121) -> {'Idris.Prelude.Types.Right', V41} end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDataDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V57 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V11 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V37 of {'Idris.Core.Options.MkDirs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V47, V48, V49, V50, V51, V52, V53, V54, V55, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V56, [V1 | []]))}, V38, V39, V40, V41, V42, V43, V44, V45, V46}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addCtxt'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(case V2 of {'Idris.Core.Context.Context.MkContext', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V9 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0)) of 1 -> begin (V15 = (('un--getPosition'(V0, V2))(V3))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> begin (V31 = case V19 of {'Idris.Core.Context.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V24 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V33 = begin (V32 = ('erlang':'get'(V31))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V64 = begin (V63 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, V35, V18, {'Idris.Core.Context.Context.Decoded', V1}))(V3))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E17} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V19}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V67 = (('un--getPosition'(V0, V2))(V3))), case V67 of {'Idris.Prelude.Types.Left', E19} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V69) -> case V69 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V70, V71) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V70, case V71 of {'Idris.Core.Context.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Context.Context.MkContext', V72, V73, V74, V75, V76, V77, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V70, {'Idris.Core.Context.Context.Decoded', V1}, V78)), V79, V80, V81, V82} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addContextEntry'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V39 = ('un--addEntry'(V2, {'Idris.Core.Context.Context.Coded', V1, V3}, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V42, V43) -> begin (V75 = begin (V74 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> {'Idris.Core.Context.MkDefs', V43, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V74} end), case V75 of {'Idris.Prelude.Types.Left', E66} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V77) -> {'Idris.Prelude.Types.Right', V42} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addContextAlias'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V38 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V71 = ('un--newAlias'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V41 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V71 of {'Idris.Prelude.Types.Left', E64} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V73) -> begin (V104 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> {'Idris.Core.Context.MkDefs', V73, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103} end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V104} end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', 0} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addBuiltin'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('un--addDef'(V1, V2, {'Idris.Core.Context.Context.MkGlobalDef', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2, V3, [], [], [], [], ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), [], 2, V4, [{'Idris.Core.Context.Context.Inline'} | []], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 0, 0, 1, {'Idris.Core.Context.Context.Builtin', V0, V5}, {'Idris.Prelude.Types.Nothing'}, []}, V10)) end, V6)).
'un--addAlias'(V0, V1, V2, V3) -> ('case--addAlias-3489'(V3, V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--Grow'() -> ('un--initSize'()).
