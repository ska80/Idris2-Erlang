-module('Idris.Idris2.Compiler.Identity').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in setIdentity-5450'/9,
  'case--case block in setIdentity-5392'/7,
  'nested--5945-5312--in--un--isId'/3,
  'un--setIdentity'/3,
  'un--idCDef'/2,
  'un--getArg'/3
]).
'case--case block in case block in setIdentity-5450'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.identity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"new def: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CDef'(V9)))) end, V8))), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--unsetFlag'(V0, {'Idris.Core.FC.EmptyFC'}, V1, V6, V8))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> ('Idris.Idris2.Core.Context':'un--setCompiled'(V0, V1, V9, V8)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setIdentity-5392'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Core.Context.Context.Identity', E1} -> (fun (V8) -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.identity"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"found identity flag for: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}old def: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CDef'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CDef'(V10, V11)) end end}, case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V30 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))))) end, V6))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> begin (V35 = {'Idris.Core.Context.Context.Identity', V8}), ('case--case block in case block in setIdentity-5450'(V0, V1, V2, V3, V4, V8, V35, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(case V3 of {'Idris.Core.Context.Context.MkGlobalDef', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V54 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V56) -> ('un--idCDef'(V8, V56)) end)), V6)) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'nested--5945-5312--in--un--isId'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.Context.Identity', E0} -> (fun (V3) -> 1 end(E0)); _ -> 0 end.
'un--setIdentity'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.identity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"processing identity flag for: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V9 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V40 of {'Idris.Prelude.Types.Left', E34} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E36} -> (fun (V43) -> begin (V67 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.identity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"flags for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Core.Context.Context':'dn--un--show_Show_DefFlag'(V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context.Context':'dn--un--showPrec_Show_DefFlag'(V45, V46)) end end}, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V58 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V2))), case V67 of {'Idris.Prelude.Types.Left', E57} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V69) -> begin (V70 = {'Idris.Prelude.Types.Just', V43}), ('case--case block in setIdentity-5392'(V0, V1, V9, V43, V70, ('Idris.Idris2.Data.List':'un--find'(fun (V71) -> ('nested--5945-5312--in--un--isId'(V0, V1, V71)) end, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V83 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2)) end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--idCDef'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V6, V7)) end end end end, fun (V8) -> {'Idris.Core.CompileExpr.MkFun', V2, V8} end, ('un--getArg'(('Idris.Idris2.Core.CompileExpr':'un--getFC'(V3)), V0, V2)))) end(E0, E1)); _ -> {'Idris.Prelude.Types.Just', V1} end.
'un--getArg'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> case V1 of 0 -> case V2 of [E2 | E3] -> (fun (V3, V4) -> {'Idris.Prelude.Types.Just', {'Idris.Core.CompileExpr.CLocal', 0, V0}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V5 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V10, V11)) end end end end, fun (V12) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'(V12)) end, ('un--getArg'(V0, V5, V7)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
