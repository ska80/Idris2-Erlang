-module('Idris.Idris2.Idris.Elab.Interface').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--elabInterface,elabDefault-5304'/24,
  'nested--11799-4596--in--un--vfc'/15,
  'nested--11118-3950--in--un--vfc'/10,
  'nested--10638-3518--in--un--vfc'/11,
  'nested--11833-4939--in--un--vdfc'/20,
  'nested--11646-4453--in--un--totMeth'/10,
  'nested--10936-3808--in--un--stripParams'/11,
  'nested--11799-4597--in--un--paramNames'/15,
  'nested--11799-4598--in--un--nameCons'/17,
  'nested--10638-3522--in--un--mkTy'/14,
  'nested--11118-3954--in--un--mkLam'/12,
  'nested--11118-3956--in--un--methName'/11,
  'nested--10638-3519--in--un--jname'/12,
  'nested--11434-4254--in--un--impsBind'/14,
  'nested--11118-3953--in--un--getExplicitArgs'/12,
  'nested--11646-4452--in--un--findSetTotal'/10,
  'nested--11799-4600--in--un--elabMethods'/19,
  'nested--11799-4601--in--un--elabDefault'/17,
  'nested--11799-4602--in--un--elabConstraintHints'/17,
  'nested--11799-4599--in--un--elabAsData'/19,
  'nested--11434-4253--in--un--constName'/13,
  'nested--11833-4942--in--un--changeNameTerm'/23,
  'nested--11833-4943--in--un--changeName'/23,
  'nested--10638-3520--in--un--bname'/12,
  'nested--11833-4940--in--un--bindPs'/22,
  'nested--11118-3951--in--un--bindPs'/12,
  'nested--11434-4252--in--un--bindName'/13,
  'nested--11118-3955--in--un--bindName'/11,
  'nested--10638-3521--in--un--bhere'/12,
  'nested--11833-4941--in--un--applyParams'/22,
  'nested--11118-3952--in--un--applyCon'/11,
  'un--updateIfaceSyn'/10,
  'un--sigToDecl'/1,
  'un--namePis'/2,
  'un--mkIfaceData'/11,
  'un--mkDataTy'/2,
  'un--mkCon'/2,
  'un--getSig'/1,
  'un--getMethToplevel'/10,
  'un--getMethDecl'/7,
  'un--getImplParams'/1,
  'un--getDefault'/1,
  'un--getConstraintHint'/11,
  'un--elabInterface'/16,
  'un--bindIFace'/3
]).
'case--elabInterface,elabDefault-5304'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', case V24 of {'Idris.Idris.Elab.Interface.MkDeclaration', E1, E2, E3, E4, E5} -> (fun (V25, V26, V27, V28, V29) -> V26 end(E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V24 of {'Idris.Idris.Elab.Interface.MkDeclaration', E6, E7, E8, E9, E10} -> (fun (V30, V31, V32, V33, V34) -> V34 end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No method named "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in interface "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))))}, V23)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11799-4596--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V10)).
'nested--11118-3950--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14, V15, V16) -> V10 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--10638-3518--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V9)).
'nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V15)).
'nested--11646-4453--in--un--totMeth'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V15 = ('nested--11646-4452--in--un--findSetTotal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> V12 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkMethod', case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E5, E6, E7, E8, E9} -> (fun (V17, V18, V19, V20, V21) -> V17 end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E10, E11, E12, E13, E14} -> (fun (V22, V23, V24, V25, V26) -> V23 end(E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E15, E16, E17, E18, E19} -> (fun (V27, V28, V29, V30, V31) -> V31 end(E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end.
'nested--10936-3808--in--un--stripParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V11, V12, V13, V14, V15, V16) -> case ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V21)) end end}, V17, V9)) end end, V14)) of 1 -> ('nested--10936-3808--in--un--stripParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V16)); 0 -> {'Idris.TTImp.TTImp.IPi', V11, V12, V13, V14, V15, ('nested--10936-3808--in--un--stripParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V16))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5)); _ -> V10 end.
'nested--11799-4597--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('Idris.Idris2.Builtin':'un--fst'(V15)) end, V3)).
'nested--11799-4598--in--un--nameCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> []; [E0 | E1] -> (fun (V17, V18) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> [{'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__con"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15))))}}, V20} | ('nested--11799-4598--in--un--nameCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ((V15 + 1) rem 9223372036854775808), V18))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10638-3522--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [] -> V13; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V18, V19) -> {'Idris.TTImp.TTImp.IPi', ('nested--10638-3518--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10)), V18, V11, V16, V19, ('nested--10638-3522--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15, V13))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11118-3954--in--un--mkLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V12}, {'Idris.TTImp.TTImp.Implicit', ('nested--11118-3950--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), 0}, ('nested--11118-3954--in--un--mkLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11118-3956--in--un--methName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('nested--11118-3955--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10))}}.
'nested--10638-3519--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V12}, {'Idris.Builtin.MkPair', V14, V15}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11434-4254--in--un--impsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> V12; [E0 | E1] -> (fun (V14, V15) -> ('nested--11434-4254--in--un--impsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, {'Idris.TTImp.TTImp.IAutoApp', V10, V12, {'Idris.TTImp.TTImp.IBindVar', V10, V14}}, V15)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11118-3953--in--un--getExplicitArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> case V14 of {'Idris.Core.TT.Explicit'} -> (fun () -> [{'Idris.Core.Name.MN', <<"arg"/utf8>>, V10} | ('nested--11118-3953--in--un--getExplicitArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ((V10 + 1) rem 9223372036854775808), V17))] end()); _ -> ('nested--11118-3953--in--un--getExplicitArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17)) end end(E0, E1, E2, E3, E4, E5)); _ -> [] end.
'nested--11646-4452--in--un--findSetTotal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.TTImp.TTImp.Totality', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Just', V12} end(E2)); _ -> ('nested--11646-4452--in--un--findSetTotal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11799-4600--in--un--elabMethods'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('un--getMethToplevel'(V6, V14, V8, V9, V4, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'(V20)) end, V5)), V16, V3, V19)) end, V17, [], V18))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V52 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V39, V40, V41, V42)) end end end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V44)) end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V47, V48, V49)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V50, V51)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V23))), begin (V62 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Top level methods: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V53) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V55, V56)) end end}, V53)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V60, V61)) end end}, V57, V58)) end end}, V52)))) end, V18))), case V62 of {'Idris.Prelude.Types.Left', E2} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V64) -> begin (V66 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V65) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, V65)) end, V52, V18))), case V66 of {'Idris.Prelude.Types.Left', E4} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V68) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V69) -> fun (V70) -> begin (V71 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V69, V70))), case V71 of {'Idris.Prelude.Types.Left', E6} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V73) -> begin (V74 = ('Idris.Idris2.Core.Context':'un--setFlag'(V14, ('nested--11799-4596--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V73, {'Idris.Core.Context.Context.Inline'}, V70))), case V74 of {'Idris.Prelude.Types.Left', E8} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Core.Context':'un--setFlag'(V14, ('nested--11799-4596--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V73, {'Idris.Core.Context.Context.TCInline'}, V70))), case V77 of {'Idris.Prelude.Types.Left', E10} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V79) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V14, ('nested--11799-4596--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V73, {'Idris.Core.Context.Context.Overloadable'}, V70)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V16, V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11799-4601--in--un--elabDefault'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V21, V22) -> begin (V23 = {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default implementation of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)))), 0}), fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V23, V24))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V52 = ('case--elabInterface,elabDefault-5304'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, V23, V27, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'(fun (V28) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V31, V32)) end end end end, V28, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V35, V36)) end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V38)) end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V41, V42)) end end end end}, fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V45, V46)) end end end}, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V21, case V28 of {'Idris.Idris.Elab.Interface.MkDeclaration', E8, E9, E10, E11, E12} -> (fun (V47, V48, V49, V50, V51) -> V47 end(E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))) end, V15)), V24))), case V52 of {'Idris.Prelude.Types.Left', E13} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V54) -> case V54 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V55, V56) -> begin (V58 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', ('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15)), V4}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> {'Idris.TTImp.TTImp.IVar', ('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15)), V57} end, ('nested--11799-4597--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14))))))), begin (V70 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V59) -> begin (V65 = case V59 of {'Idris.Idris.Elab.Interface.MkDeclaration', E17, E18, E19, E20, E21} -> (fun (V60, V61, V62, V63, V64) -> V60 end(E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V65, V66))), case V67 of {'Idris.Prelude.Types.Left', E22} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V65, ('nested--11833-4941--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, {'Idris.TTImp.TTImp.IVar', ('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15)), V69}, ('nested--11799-4597--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14))))}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V15, [], V24))), case V70 of {'Idris.Prelude.Types.Left', E24} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V72) -> begin (V73 = ('nested--11833-4940--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, V3, ('un--bindIFace'(('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15)), V58, ('Idris.Idris2.TTImp.Utils':'un--substNames'(V6, V72, V56))))))), begin (V80 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V14, V17, [], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V74) -> case V74 of {'Idris.Idris.Elab.Interface.MkDeclaration', E26, E27, E28, E29, E30} -> (fun (V75, V76, V77, V78, V79) -> V75 end(E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)), V6)), V73, V24))), case V80 of {'Idris.Prelude.Types.Left', E31} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V82) -> begin (V86 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface.default"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default method "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V84, V85)) end end}, V82)))))))) end, V24))), case V86 of {'Idris.Prelude.Types.Left', E33} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V88) -> begin (V89 = {'Idris.TTImp.TTImp.IClaim', ('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15)), V55, V9, [], {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V27, V82}}), begin (V90 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, V89))(V24))), case V90 of {'Idris.Prelude.Types.Left', E35} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V92) -> begin (V95 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V93) -> fun (V94) -> ('nested--11833-4943--in--un--changeName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, V27, V93, V94)) end end, V22, [], V24))), case V95 of {'Idris.Prelude.Types.Left', E37} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V97) -> begin (V107 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface.default"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default method body "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V98) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V100, V101)) end end}, V98)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpClause\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V105, V106)) end end}, V102, V103)) end end}, V97)))) end, V24))), case V107 of {'Idris.Prelude.Types.Left', E39} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V109) -> begin (V110 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, {'Idris.TTImp.TTImp.IDef', ('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15)), V27, V97}))(V24))), case V110 of {'Idris.Prelude.Types.Left', E41} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V112) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V21, V22}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11799-4602--in--un--elabConstraintHints'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V17 = ('nested--11799-4598--in--un--nameCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, 0, V5))), fun (V18) -> begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('un--getConstraintHint'(V6, V14, ('nested--11799-4596--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V8, V9, V4, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'(V20)) end, V17)), V16, ('nested--11799-4597--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V19)) end, V17, [], V18))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V114 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraint hints from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}, V25)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V32, V33)) end end}, V29, V30)) end end}, {'Idris.Prelude.Show.MkShow', fun (V34) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V36, V37)) end end}, V34)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V41, V42)) end end}, V38, V39)) end end}}, V24)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V47, V48)) end end}, V45)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V52, V53)) end end}, V49, V50)) end end}, {'Idris.Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V56, V57)) end end}, V54)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V61, V62)) end end}, V58, V59)) end end}}, V43, V44)) end end}, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V65, V66)) end end}, {'Idris.Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V70, V71)) end end}, V68)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V75, V76)) end end}, V72, V73)) end end}, V67)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V81, V82)) end end}, V79)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V86, V87)) end end}, V83, V84)) end end}, V77, V78)) end end}}, V63)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V90)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V91, V92)) end end}, {'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V94) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V96, V97)) end end}, V94)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V101, V102)) end end}, V98, V99)) end end}, V93)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V105) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V107, V108)) end end}, V105)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V112, V113)) end end}, V109, V110)) end end}, V103, V104)) end end}}, V88, V89)) end end}, V23)))))))) end, V18))), case V114 of {'Idris.Prelude.Types.Left', E2} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V116) -> begin (V147 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V117) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, V117)) end, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V120, V121, V122)) end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V125, V126, V127)) end end end end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V129)) end end, fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V133, V134, V135, V136)) end end end end end end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V138)) end end, fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V141, V142, V143)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V144, V145)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V146) -> ('Idris.Idris2.Builtin':'un--snd'(V146)) end, V23)), V18))), case V147 of {'Idris.Prelude.Types.Left', E4} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V149) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V150) -> fun (V151) -> begin (V152 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V150, V151))), case V152 of {'Idris.Prelude.Types.Left', E6} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V154) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V14, ('nested--11799-4596--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V154, {'Idris.Core.Context.Context.TCInline'}, V151)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V155) -> ('Idris.Idris2.Builtin':'un--fst'(V155)) end, V23)), V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--11799-4599--in--un--elabAsData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V41 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V19) -> ('un--getMethDecl'(V6, V14, V8, V7, V3, V16, {'Idris.Builtin.MkPair', case V19 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V20, V21, V22, V23, V24, V25, V26) -> V21 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', case V19 of {'Idris.Idris.Elab.Interface.MkSignature', E7, E8, E9, E10, E11, E12, E13} -> (fun (V27, V28, V29, V30, V31, V32, V33) -> V30 end(E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V19 of {'Idris.Idris.Elab.Interface.MkSignature', E14, E15, E16, E17, E18, E19, E20} -> (fun (V34, V35, V36, V37, V38, V39, V40) -> V40 end(E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}})) end, V17, [], V18))), case V41 of {'Idris.Prelude.Types.Left', E21} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V43) -> begin (V107 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Method declarations: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}, {'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V50, V51)) end end}, {'Idris.Prelude.Show.MkShow', fun (V52) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V54, V55)) end end}, V52)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V58)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V59, V60)) end end}, V56, V57)) end end}}, V48)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V64, V65)) end end}, {'Idris.Prelude.Show.MkShow', fun (V66) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V68, V69)) end end}, V66)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V72) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V72)) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V73, V74)) end end}, V70, V71)) end end}}, V61, V62)) end end}}, V44)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V78, V79)) end end}, {'Idris.Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V81)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V82, V83)) end end}, {'Idris.Prelude.Show.MkShow', fun (V84) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V86, V87)) end end}, V84)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V90)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V91, V92)) end end}, V88, V89)) end end}}, V80)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V95) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V96, V97)) end end}, {'Idris.Prelude.Show.MkShow', fun (V98) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V100, V101)) end end}, V98)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V105, V106)) end end}, V102, V103)) end end}}, V93, V94)) end end}}, V75, V76)) end end}, V43)))) end, V18))), case V107 of {'Idris.Prelude.Types.Left', E23} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V109) -> begin (V111 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V110) -> ('un--getMethDecl'(V6, V14, V8, V7, V3, V16, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V110})) end, V5, [], V18))), case V111 of {'Idris.Prelude.Types.Left', E25} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V113) -> begin (V189 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraints: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V114) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V117, V118)) end end}, V115)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V121)) end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V122, V123)) end end}, V119, V120)) end end}, {'Idris.Prelude.Show.MkShow', fun (V124) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V125) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V125)) end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V126, V127)) end end}, {'Idris.Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V129) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V129)) end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V130, V131)) end end}, V128)) end, fun (V132) -> fun (V133) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V134) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V134)) end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V135, V136)) end end}, V132, V133)) end end}}, V124)) end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V139) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V140, V141)) end end}, {'Idris.Prelude.Show.MkShow', fun (V142) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V143) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V143)) end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V144, V145)) end end}, V142)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V148) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V148)) end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V149, V150)) end end}, V146, V147)) end end}}, V137, V138)) end end}}, V114)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V153) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V154) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V154)) end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V155, V156)) end end}, V153)) end, fun (V157) -> fun (V158) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V159) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V159)) end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V160, V161)) end end}, V157, V158)) end end}, {'Idris.Prelude.Show.MkShow', fun (V162) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V163) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V163)) end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V164, V165)) end end}, {'Idris.Prelude.Show.MkShow', fun (V166) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V167) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V167)) end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V168, V169)) end end}, V166)) end, fun (V170) -> fun (V171) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V172)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V173, V174)) end end}, V170, V171)) end end}}, V162)) end, fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V177) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V177)) end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V178, V179)) end end}, {'Idris.Prelude.Show.MkShow', fun (V180) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V181) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V181)) end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V182, V183)) end end}, V180)) end, fun (V184) -> fun (V185) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V186) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V186)) end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V187, V188)) end end}, V184, V185)) end end}}, V175, V176)) end end}}, V151, V152)) end end}, V113)))) end, V18))), case V189 of {'Idris.Prelude.Types.Left', E27} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V191) -> begin (V192 = (('un--mkIfaceData'(V6, V14, ('nested--11799-4596--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V9, V8, V113, V4, V15, V3, V2, V43))(V18))), case V192 of {'Idris.Prelude.Types.Left', E29} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V194) -> begin (V258 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Methods: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V195) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V196) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V196)) end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V197, V198)) end end}, {'Idris.Prelude.Show.MkShow', fun (V199) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V200) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V200)) end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V201, V202)) end end}, {'Idris.Prelude.Show.MkShow', fun (V203) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V204) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V204)) end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V205, V206)) end end}, V203)) end, fun (V207) -> fun (V208) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V209) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V209)) end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V210, V211)) end end}, V207, V208)) end end}}, V199)) end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V214) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V214)) end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V215, V216)) end end}, {'Idris.Prelude.Show.MkShow', fun (V217) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V218) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V218)) end, fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V219, V220)) end end}, V217)) end, fun (V221) -> fun (V222) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V223) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V223)) end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V224, V225)) end end}, V221, V222)) end end}}, V212, V213)) end end}}, V195)) end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V228) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V228)) end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V229, V230)) end end}, {'Idris.Prelude.Show.MkShow', fun (V231) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V232) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V232)) end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V233, V234)) end end}, {'Idris.Prelude.Show.MkShow', fun (V235) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V236) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V236)) end, fun (V237) -> fun (V238) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V237, V238)) end end}, V235)) end, fun (V239) -> fun (V240) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V241) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V241)) end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V242, V243)) end end}, V239, V240)) end end}}, V231)) end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V246) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V246)) end, fun (V247) -> fun (V248) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V247, V248)) end end}, {'Idris.Prelude.Show.MkShow', fun (V249) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V250) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V250)) end, fun (V251) -> fun (V252) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V251, V252)) end end}, V249)) end, fun (V253) -> fun (V254) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V255) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V255)) end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V256, V257)) end end}, V253, V254)) end end}}, V244, V245)) end end}}, V226, V227)) end end}, V43)))) end, V18))), case V258 of {'Idris.Prelude.Types.Left', E31} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V260) -> begin (V264 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making interface data type "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(ImpDecl\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V261) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V261)) end, fun (V262) -> fun (V263) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V262, V263)) end end}, V194)))) end, V18))), case V264 of {'Idris.Prelude.Types.Left', E33} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V266) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V267) -> case V267 of {'Idris.Prelude.Types.Left', E35} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V269) -> {'Idris.Prelude.Types.Right', 0} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V270) -> ('Idris.Idris2.TTImp.ProcessDecls':'un--processDecls'(V6, V14, V11, V13, V7, V8, [V194 | []], V270)) end, V18)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11434-4253--in--un--constName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('nested--11434-4252--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12))}}.
'nested--11833-4942--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V23, V24) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V24)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V23, V24}}; 0 -> begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"elabDefault is trying to add Function: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V23)), <<")"/utf8>>)))))))) end, V22))), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> begin (V32 = case ('Idris.Idris2.Core.FC':'un--isConcreteFC'(V23)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"ide-mode.highlight"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"elabDefault is adding Function: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)))) end, V22))), case V29 of {'Idris.Prelude.Types.Left', E5} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V31) -> ('Idris.Idris2.Core.Metadata':'un--addSemanticDecorations'(V11, V14, [{'Idris.Builtin.MkPair', V28, {'Idris.Builtin.MkPair', 2, {'Idris.Prelude.Types.Just', V17}}} | []], V22)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V32 of {'Idris.Prelude.Types.Left', E7} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V23, V20}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E9, E10, E11} -> (fun (V35, V36, V37) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E12} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V41) -> {'Idris.Prelude.Types.Right', fun (V42) -> {'Idris.TTImp.TTImp.IApp', V35, V41, V42} end} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('nested--11833-4942--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V36, V43)) end, V38)) end, fun (V44) -> {'Idris.Prelude.Types.Right', V37} end, V22)) end(E9, E10, E11)); {'Idris.TTImp.TTImp.IAutoApp', E14, E15, E16} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V48) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V49) -> case V49 of {'Idris.Prelude.Types.Left', E17} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V51) -> {'Idris.Prelude.Types.Right', fun (V52) -> {'Idris.TTImp.TTImp.IAutoApp', V45, V51, V52} end} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V53) -> ('nested--11833-4942--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V46, V53)) end, V48)) end, fun (V54) -> {'Idris.Prelude.Types.Right', V47} end, V22)) end(E14, E15, E16)); {'Idris.TTImp.TTImp.INamedApp', E19, E20, E21, E22} -> (fun (V55, V56, V57, V58) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V59) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V61) -> case V61 of {'Idris.Prelude.Types.Left', E23} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V63) -> {'Idris.Prelude.Types.Right', fun (V64) -> fun (V65) -> {'Idris.TTImp.TTImp.INamedApp', V55, V63, V64, V65} end end} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('nested--11833-4942--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V56, V66)) end, V60)) end, fun (V67) -> {'Idris.Prelude.Types.Right', V57} end, V59)) end, fun (V68) -> {'Idris.Prelude.Types.Right', V58} end, V22)) end(E19, E20, E21, E22)); _ -> {'Idris.Prelude.Types.Right', V21} end.
'nested--11833-4943--in--un--changeName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V27) -> case V27 of {'Idris.Prelude.Types.Left', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Right', fun (V30) -> {'Idris.TTImp.TTImp.PatClause', V23, V29, V30} end} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V31) -> ('nested--11833-4942--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V24, V31)) end, V26)) end, fun (V32) -> {'Idris.Prelude.Types.Right', V25} end, V22)) end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E5, E6, E7, E8, E9, E10} -> (fun (V33, V34, V35, V36, V37, V38) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V39) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V40) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V41) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E11} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V45) -> {'Idris.Prelude.Types.Right', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> {'Idris.TTImp.TTImp.WithClause', V33, V45, V46, V47, V48, V49} end end end end} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V50) -> ('nested--11833-4942--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V34, V50)) end, V42)) end, fun (V51) -> {'Idris.Prelude.Types.Right', V35} end, V41)) end, fun (V52) -> {'Idris.Prelude.Types.Right', V36} end, V40)) end, fun (V53) -> {'Idris.Prelude.Types.Right', V37} end, V39)) end, fun (V54) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V55) -> fun (V56) -> ('nested--11833-4943--in--un--changeName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V55, V56)) end end, V38, [], V54)) end, V22)) end(E5, E6, E7, E8, E9, E10)); {'Idris.TTImp.TTImp.ImpossibleClause', E13, E14} -> (fun (V57, V58) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V59) -> case V59 of {'Idris.Prelude.Types.Left', E15} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ImpossibleClause', V57, V61}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V62) -> ('nested--11833-4942--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V58, V62)) end, V22)) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10638-3520--in--un--bname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V12}, {'Idris.Builtin.MkPair', V14, {'Idris.TTImp.TTImp.IBindHere', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V15)), {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11833-4940--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V20 of [] -> V21; [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V26, V27) -> {'Idris.TTImp.TTImp.IPi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V27)), V26, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', V24}, V27, ('nested--11833-4940--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, V21))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11118-3951--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V16, V17) -> {'Idris.TTImp.TTImp.IPi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V17)), V16, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', V14}, V17, ('nested--11118-3951--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11434-4252--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Name.UN', E0} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__bind_"/utf8>>, ('Idris.Idris2.Core.Name':'un--displayUserName'(V13)))) end(E0)); {'Idris.Core.Name.NS', E1, E2} -> (fun (V14, V15) -> ('nested--11434-4252--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15)) end(E1, E2)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)) end.
'nested--11118-3955--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Name.UN', E0} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__bind_"/utf8>>, ('Idris.Idris2.Core.Name':'un--displayUserName'(V11)))) end(E0)); {'Idris.Core.Name.NS', E1, E2} -> (fun (V12, V13) -> ('nested--11118-3955--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13)) end(E1, E2)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)) end.
'nested--10638-3521--in--un--bhere'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, {'Idris.TTImp.TTImp.IBindHere', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V15)), {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11833-4941--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of [] -> V20; [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Idris.Core.Name.UN', E2} -> (fun (V24) -> case V24 of {'Idris.Core.Name.Basic', E3} -> (fun (V25) -> ('nested--11833-4941--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, {'Idris.TTImp.TTImp.INamedApp', ('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)), V20, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V25}}, {'Idris.TTImp.TTImp.IBindVar', ('nested--11833-4939--in--un--vdfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)), V25}}, V23)) end(E3)); _ -> ('nested--11833-4941--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V23)) end end(E2)); _ -> ('nested--11833-4941--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V23)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11118-3952--in--un--applyCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"__con"/utf8>>}}), {'Idris.Builtin.MkPair', V10, {'Idris.TTImp.TTImp.INamedApp', ('nested--11118-3950--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), {'Idris.TTImp.TTImp.IVar', ('nested--11118-3950--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), V10}, V11, {'Idris.TTImp.TTImp.IVar', ('nested--11118-3950--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), V11}}} end.
'un--updateIfaceSyn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('nested--11646-4453--in--un--totMeth'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V14)) end, V7, [], V9))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = {'Idris.Idris.Syntax.MkIFaceInfo', V3, V4, V5, V6, V17, V8}), begin (V30 = ('erlang':'put'(V1, case V13 of {'Idris.Idris.Syntax.MkSyntax', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Idris.Syntax.MkSyntax', V19, V20, V21, V22, [V2 | V23], ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V2, V18, V24)), V25, V26, V27, V28, V29} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V30} end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sigToDecl'(V0) -> {'Idris.Idris.Elab.Interface.MkDeclaration', case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V1, V2, V3, V4, V5, V6, V7) -> V4 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14) -> V9 end(E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E14, E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V17 end(E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E21, E22, E23, E24, E25, E26, E27} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> V27 end(E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35) -> V35 end(E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--namePis'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.TTImp.TTImp.IPi', V2, V3, {'Idris.Core.TT.AutoImplicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"i_con"/utf8>>, V0}}, V6, ('un--namePis'(((V0 + 1) rem 9223372036854775808), V7))} end()); _ -> {'Idris.TTImp.TTImp.IPi', V2, V3, V4, V5, V6, ('un--namePis'(V0, V7))} end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.TTImp.TTImp.IPi', V2, V3, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"i_imp"/utf8>>, V0}}, V6, ('un--namePis'(((V0 + 1) rem 9223372036854775808), V7))} end()); _ -> {'Idris.TTImp.TTImp.IPi', V2, V3, V4, V5, V6, ('un--namePis'(V0, V7))} end end()); _ -> {'Idris.TTImp.TTImp.IPi', V2, V3, V4, V5, V6, ('un--namePis'(V0, V7))} end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.IBindHere', E6, E7, E8} -> (fun (V8, V9, V10) -> {'Idris.TTImp.TTImp.IBindHere', V8, V9, ('un--namePis'(V0, V10))} end(E6, E7, E8)); _ -> V1 end.
'un--mkIfaceData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = case ('Idris.Idris2.Data.List':'un--isNil'(V9)) of 1 -> [{'Idris.TTImp.TTImp.NoHints'} | [{'Idris.TTImp.TTImp.UniqueSearch'} | []]]; 0 -> [{'Idris.TTImp.TTImp.NoHints'} | [{'Idris.TTImp.TTImp.UniqueSearch'} | [{'Idris.TTImp.TTImp.SearchBy', V9} | []]]]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V13 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Builtin':'un--fst'(V12)) end, V8))), begin (V15 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', ('nested--10638-3518--in--un--vfc'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1)), V6}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V14} end, V13))))), begin (V19 = ('nested--10638-3522--in--un--mkTy'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, {'Idris.Core.TT.Implicit'}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> ('nested--10638-3519--in--un--jname'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, V16)) end, V8)), ('nested--10638-3522--in--un--mkTy'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, {'Idris.Core.TT.AutoImplicit'}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('nested--10638-3521--in--un--bhere'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, V17)) end, V5)), ('nested--10638-3522--in--un--mkTy'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('nested--10638-3520--in--un--bname'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, V18)) end, V10)), V15))))))), fun (V20) -> begin (V22 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V2, [], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'(V21)) end, V10)), V0)))), V19, V20))), case V22 of {'Idris.Prelude.Types.Left', E0} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V24) -> begin (V25 = {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V7, V24}), begin (V27 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V2, [], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V13, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V26) -> ('Idris.Idris2.Builtin':'un--fst'(V26)) end, V10)), V0)))), ('un--mkDataTy'(('nested--10638-3518--in--un--vfc'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1)), V8)), V20))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IData', ('nested--10638-3518--in--un--vfc'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1)), V3, {'Idris.TTImp.TTImp.MkImpData', ('nested--10638-3518--in--un--vfc'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1)), V6, V29, V11, [V25 | []]}}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end.
'un--mkDataTy'(V0, V1) -> case V1 of [] -> {'Idris.TTImp.TTImp.IType', V0}; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> {'Idris.TTImp.TTImp.IPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V4}, V7, ('un--mkDataTy'(V0, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkCon'(V0, V1) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.UN', E2} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Name':'un--displayUserName'(V4))), {'Idris.Core.Name.NS', V2, {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V0)))))), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, V5))}}}} end end(E2)); _ -> begin (V6 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))), {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V0)))))), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, V6))}}} end end end(E0, E1)); _ -> begin (V7 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))), {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V0)))))), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, V7))}}} end end.
'un--getSig'(V0) -> case V0 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.TTImp.MkImpTy', E5, E6, E7, E8} -> (fun (V6, V7, V8, V9) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Elab.Interface.MkSignature', V6, V2, V4, V8, V7, 0, ('un--namePis'(0, V9))}} end(E5, E6, E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E9, E10, E11} -> (fun (V10, V11, V12) -> case V12 of {'Idris.TTImp.TTImp.MkImpLater', E12, E13, E14} -> (fun (V13, V14, V15) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Elab.Interface.MkSignature', V13, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), [{'Idris.TTImp.TTImp.Invertible'} | []], V14, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, ('un--namePis'(0, V15))}} end(E12, E13, E14)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getMethToplevel'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('Idris.Idris2.Builtin':'un--fst'(V10)) end, V8))), begin (V13 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', ('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V4}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V12} end, V11))))), begin (V22 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('nested--11118-3952--in--un--applyCon'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V14)) end, V7)), case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V21 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V23) -> begin (V24 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, {'Idris.Core.FC.EmptyFC'}, [], V0, ('nested--11118-3951--in--un--bindPs'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V8, ('un--bindIFace'(('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V13, V22)))), V23))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E9, E10, E11, E12, E13, E14, E15} -> (fun (V27, V28, V29, V30, V31, V32, V33) -> V30 end(E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V23))), case V34 of {'Idris.Prelude.Types.Left', E16} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V36) -> begin (V58 = {'Idris.TTImp.TTImp.IClaim', ('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E18, E19, E20, E21, E22, E23, E24} -> (fun (V37, V38, V39, V40, V41, V42, V43) -> V38 end(E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, case case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E25, E26, E27, E28, E29, E30, E31} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> V49 end(E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Invertible'} | []]]; 0 -> [{'Idris.TTImp.TTImp.Inline'} | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.TTImp.TTImp.MkImpTy', ('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E32, E33, E34, E35, E36, E37, E38} -> (fun (V51, V52, V53, V54, V55, V56, V57) -> V55 end(E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V36, V26}}), begin (V61 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', ('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V59) -> {'Idris.TTImp.TTImp.IBindVar', {'Idris.Core.FC.EmptyFC'}, V59} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V60) -> ('nested--11118-3955--in--un--bindName'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V60)) end, V7))))))), begin (V69 = ('nested--11118-3953--in--un--getExplicitArgs'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, 0, case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E39, E40, E41, E42, E43, E44, E45} -> (fun (V62, V63, V64, V65, V66, V67, V68) -> V68 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V85 = {'Idris.TTImp.TTImp.PatClause', ('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), {'Idris.TTImp.TTImp.INamedApp', ('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), {'Idris.TTImp.TTImp.IVar', case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E46, E47, E48, E49, E50, E51, E52} -> (fun (V70, V71, V72, V73, V74, V75, V76) -> V70 end(E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V36}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"__con"/utf8>>}}, V61}, ('nested--11118-3954--in--un--mkLam'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V69, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, ('nested--11118-3956--in--un--methName'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E53, E54, E55, E56, E57, E58, E59} -> (fun (V77, V78, V79, V80, V81, V82, V83) -> V80 end(E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V84) -> {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V84} end, V69))))))}), begin (V86 = {'Idris.TTImp.TTImp.IDef', ('nested--11118-3950--in--un--vfc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V36, [V85 | []]}), {'Idris.Prelude.Types.Right', [V58 | [V86 | []]]} end end end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--getMethDecl'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> begin (V12 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'(V11)) end, V4))), fun (V13) -> begin (V14 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, {'Idris.Core.FC.EmptyFC'}, [], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V12, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V5, V0)))), V10, V13))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V7, ('nested--10936-3808--in--un--stripParams'(V1, V7, V9, V10, V5, V4, V0, V3, V2, V12, V16))}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getImplParams'(V0) -> case V0 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Implicit'} -> (fun () -> [V2 | ('un--getImplParams'(V4))] end()); _ -> [] end end(E4, E5, E6, E7)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'un--getDefault'(V0) -> case V0 of {'Idris.TTImp.TTImp.IDef', E0, E1, E2} -> (fun (V1, V2, V3) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', [], {'Idris.Builtin.MkPair', V2, V3}}}} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getConstraintHint'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> begin (V14 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V2, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> {'Idris.TTImp.TTImp.IVar', V2, V13} end, V9))))), begin (V15 = {'Idris.TTImp.TTImp.IPi', V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Nothing'}, V14, V12}), fun (V16) -> begin (V17 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V2, [], ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V8, V0)), V15, V16))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V26 = {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraint "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V21, V22)) end end}, V12)))), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V24, V25)) end end}, V12))))))))}}}), begin (V27 = {'Idris.TTImp.TTImp.IClaim', V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V4, [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Hint', 0} | []]], {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V26, V19}}), begin (V30 = ('Idris.Idris2.TTImp.TTImp':'un--apply'(('nested--11434-4254--in--un--impsBind'(V11, V12, V9, V8, V7, V6, V5, V4, V0, V3, V2, V1, {'Idris.TTImp.TTImp.IVar', V2, V6}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> ('nested--11434-4252--in--un--bindName'(V11, V12, V9, V8, V7, V6, V5, V4, V0, V3, V2, V1, V28)) end, V7)))), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> {'Idris.TTImp.TTImp.Implicit', V2, 1} end, V8))))), begin (V31 = {'Idris.TTImp.TTImp.PatClause', V2, {'Idris.TTImp.TTImp.IApp', V2, {'Idris.TTImp.TTImp.IVar', V2, V26}, V30}, {'Idris.TTImp.TTImp.IVar', V2, ('nested--11434-4253--in--un--constName'(V11, V12, V9, V8, V7, V6, V5, V4, V0, V3, V2, V1, V11))}}), begin (V32 = {'Idris.TTImp.TTImp.IDef', V2, V26, [V31 | []]}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V26, [V27 | [V32 | []]]}} end end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--elabInterface'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V10, V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V18, V15))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V23 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('un--mkCon'(('nested--11799-4596--in--un--vfc'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1)), V18)) end, fun () -> fun (V22) -> V22 end end, V13))), begin (V24 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V23, V15))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V28 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V27) -> ('un--getSig'(V27)) end, V14))), begin (V30 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('un--sigToDecl'(V29)) end, V28))), begin (V37 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> case V31 of {'Idris.Idris.Elab.Interface.MkDeclaration', E6, E7, E8, E9, E10} -> (fun (V32, V33, V34, V35, V36) -> V32 end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V30))), begin (V39 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V38) -> ('un--getDefault'(V38)) end, V14))), begin (V40 = ('nested--11799-4599--in--un--elabAsData'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V26, V37, V28, V15))), case V40 of {'Idris.Prelude.Types.Left', E11} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V42) -> begin (V43 = (('nested--11799-4602--in--un--elabConstraintHints'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V26, V37))(V15))), case V43 of {'Idris.Prelude.Types.Left', E13} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V45) -> begin (V46 = ('nested--11799-4600--in--un--elabMethods'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V26, V37, V28, V15))), case V46 of {'Idris.Prelude.Types.Left', E15} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V48) -> begin (V50 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V49) -> ('nested--11799-4601--in--un--elabDefault'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V30, V49)) end, V39, [], V15))), case V50 of {'Idris.Prelude.Types.Left', E17} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V52) -> begin (V68 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> fun (V54) -> begin (V60 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, case V53 of {'Idris.Idris.Elab.Interface.MkDeclaration', E19, E20, E21, E22, E23} -> (fun (V55, V56, V57, V58, V59) -> V55 end(E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V54))), case V60 of {'Idris.Prelude.Types.Left', E24} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V62) -> {'Idris.Prelude.Types.Right', case V53 of {'Idris.Idris.Elab.Interface.MkDeclaration', E26, E27, E28, E29, E30} -> (fun (V63, V64, V65, V66, V67) -> {'Idris.Idris.Elab.Interface.MkDeclaration', V62, V64, V65, V66, V67} end(E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V30, [], V15))), case V68 of {'Idris.Prelude.Types.Left', E31} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V70) -> begin (V72 = begin (V71 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V71} end), case V72 of {'Idris.Prelude.Types.Left', E33} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V74) -> begin (V105 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V21, case V74 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> V75 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15))), case V105 of {'Idris.Prelude.Types.Left', E65} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V107) -> case V107 of {'Idris.Prelude.Types.Just', E67} -> (fun (V108) -> begin (V109 = ('un--getImplParams'(V108))), ('un--updateIfaceSyn'(V1, V3, V21, V26, V109, ('nested--11799-4597--in--un--paramNames'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V110) -> ('Idris.Idris2.Builtin':'un--snd'(V110)) end, V9)), V70, V52, V15)) end end(E67)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V5, V10, V15)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindIFace'(V0, V1, V2) -> {'Idris.TTImp.TTImp.IPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.AutoImplicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"__con"/utf8>>}}}, V1, V2}.
