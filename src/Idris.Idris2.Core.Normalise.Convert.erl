-module('Idris.Idris2.Core.Normalise.Convert').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getMatchingVars-3694'/11,
  'case--case block in getMatchingVarAlt-3294'/15,
  'nested--7904-3069--in--un--weakenP'/18,
  'nested--7351-2219--in--un--weakenP'/9,
  'nested--7351-2217--in--un--tryUpdatePi'/8,
  'nested--7351-2218--in--un--tryUpdateB'/8,
  'nested--7896-2736--in--un--quickConvHead'/6,
  'nested--7896-2737--in--un--quickConvArg'/6,
  'nested--7931-4356--in--un--getScrutinee'/15,
  'nested--12150-6528--in--un--getInfPos'/14,
  'nested--7925-3848--in--un--getArgPos'/12,
  'nested--7351-2049--in--un--findIdx'/8,
  'nested--7931-4355--in--un--findArgPos'/14,
  'nested--7904-3070--in--un--extend'/16,
  'nested--7904-3071--in--un--dropV'/15,
  'nested--7904-3072--in--un--dropP'/16,
  'nested--12150-6529--in--un--dropInf'/15,
  'nested--7925-3849--in--un--convertMatches'/13,
  'nested--12150-6531--in--un--args2'/12,
  'nested--12150-6530--in--un--args1'/12,
  'dn--un--convert_Convert_Term'/7,
  'dn--un--convert_Convert_NF'/7,
  'dn--un--convert_Convert_Closure'/7,
  'dn--un--convertInf_Convert_Term'/7,
  'dn--un--convertInf_Convert_NF'/7,
  'dn--un--convertInf_Convert_Closure'/7,
  'dn--un--convGen_Convert_Term'/9,
  'dn--un--convGen_Convert_NF'/8,
  'dn--un--convGen_Convert_Closure'/9,
  'dn--un--__Impl_Convert_Term'/0,
  'dn--un--__Impl_Convert_NF'/0,
  'dn--un--__Impl_Convert_Closure'/0,
  'un--tryUpdate'/4,
  'un--quickConv'/2,
  'un--getMatchingVars'/7,
  'un--getMatchingVarAlts'/8,
  'un--getMatchingVarAlt'/7,
  'un--convertInf'/6,
  'un--convert'/6,
  'un--convGen'/6,
  'un--convBinders'/8,
  'un--chkSameDefs'/11,
  'un--chkConvHead'/8,
  'un--chkConvCaseBlock'/12,
  'un--allConvNF'/9,
  'un--allConv'/9
]).
'case--getMatchingVars-3694'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = ('dn--un--convert_Convert_Term'(V8, V1, V7, ('Idris.Idris2.Core.Env':'un--mkEnv'(('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V1)), V11, V4, V10))), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> case V14 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V6}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getMatchingVarAlt-3294'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> begin (V16 = (('un--getMatchingVars'(V12, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V2, V0)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V6, V1)), V11, V15, V3, V7))(V14))), case V16 of {'Idris.Prelude.Types.Left', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V20) -> ('nested--7904-3072--in--un--dropP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V2, V6, V20)) end, V19))}} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7904-3069--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V18)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V19))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7351-2219--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V9)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7351-2217--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Explicit'})) end()); {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Implicit'})) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.AutoImplicit'})) end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V8)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.DefImplicit', V9})) end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7351-2218--in--un--tryUpdateB'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7351-2217--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V10)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V11)), fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Lam', V8, V9, V12, V13})) end)) end)) end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V16)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V17)), fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Let', V14, V15, V18, V19})) end)) end)) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7351-2217--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V22)), fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V23)), fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Pi', V20, V21, V24, V25})) end)) end)) end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--7896-2736--in--un--quickConvHead'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NLocal', E0, E1} -> (fun (V6, V7) -> case V5 of {'Idris.Core.Value.NLocal', E2, E3} -> (fun (V8, V9) -> 1 end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Core.Value.NRef', E4, E5} -> (fun (V10, V11) -> case V5 of {'Idris.Core.Value.NRef', E6, E7} -> (fun (V12, V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V13)) end(E6, E7)); _ -> 0 end end(E4, E5)); {'Idris.Core.Value.NMeta', E8, E9, E10} -> (fun (V14, V15, V16) -> case V5 of {'Idris.Core.Value.NMeta', E11, E12, E13} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V17)) end(E11, E12, E13)); _ -> 0 end end(E8, E9, E10)); _ -> 0 end.
'nested--7896-2737--in--un--quickConvArg'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NBind', E88, E89, E90, E91} -> (fun (V6, V7, V8, V9) -> 1 end(E88, E89, E90, E91)); _ -> case V5 of {'Idris.Core.Value.NBind', E84, E85, E86, E87} -> (fun (V10, V11, V12, V13) -> 1 end(E84, E85, E86, E87)); _ -> case V4 of {'Idris.Core.Value.NApp', E2, E3, E4} -> (fun (V14, V15, V16) -> case V5 of {'Idris.Core.Value.NApp', E7, E8, E9} -> (fun (V17, V18, V19) -> ('nested--7896-2736--in--un--quickConvHead'(V0, V1, V2, V3, V15, V18)) end(E7, E8, E9)); _ -> case V5 of {'Idris.Core.Value.NErased', E5, E6} -> (fun (V20, V21) -> 1 end(E5, E6)); _ -> 0 end end end(E2, E3, E4)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V22, V23, V24, V25, V26) -> case V5 of {'Idris.Core.Value.NDCon', E17, E18, E19, E20, E21} -> (fun (V27, V28, V29, V30, V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V29)) end(E17, E18, E19, E20, E21)); _ -> case V5 of {'Idris.Core.Value.NErased', E15, E16} -> (fun (V32, V33) -> 1 end(E15, E16)); _ -> 0 end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NTCon', E22, E23, E24, E25, E26} -> (fun (V34, V35, V36, V37, V38) -> case V5 of {'Idris.Core.Value.NTCon', E29, E30, E31, E32, E33} -> (fun (V39, V40, V41, V42, V43) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V35, V40)) end(E29, E30, E31, E32, E33)); _ -> case V5 of {'Idris.Core.Value.NErased', E27, E28} -> (fun (V44, V45) -> 1 end(E27, E28)); _ -> 0 end end end(E22, E23, E24, E25, E26)); {'Idris.Core.Value.NAs', E34, E35, E36, E37} -> (fun (V46, V47, V48, V49) -> case V5 of {'Idris.Core.Value.NAs', E40, E41, E42, E43} -> (fun (V50, V51, V52, V53) -> ('nested--7896-2737--in--un--quickConvArg'(V0, V1, V2, V3, V49, V53)) end(E40, E41, E42, E43)); _ -> case V5 of {'Idris.Core.Value.NErased', E38, E39} -> (fun (V54, V55) -> 1 end(E38, E39)); _ -> 0 end end end(E34, E35, E36, E37)); {'Idris.Core.Value.NDelayed', E44, E45, E46} -> (fun (V56, V57, V58) -> case V5 of {'Idris.Core.Value.NDelayed', E49, E50, E51} -> (fun (V59, V60, V61) -> ('nested--7896-2737--in--un--quickConvArg'(V0, V1, V2, V3, V58, V61)) end(E49, E50, E51)); _ -> case V5 of {'Idris.Core.Value.NErased', E47, E48} -> (fun (V62, V63) -> 1 end(E47, E48)); _ -> 0 end end end(E44, E45, E46)); {'Idris.Core.Value.NDelay', E52, E53, E54, E55} -> (fun (V64, V65, V66, V67) -> case V5 of {'Idris.Core.Value.NDelay', E58, E59, E60, E61} -> (fun (V68, V69, V70, V71) -> 1 end(E58, E59, E60, E61)); _ -> case V5 of {'Idris.Core.Value.NErased', E56, E57} -> (fun (V72, V73) -> 1 end(E56, E57)); _ -> 0 end end end(E52, E53, E54, E55)); {'Idris.Core.Value.NForce', E62, E63, E64, E65} -> (fun (V74, V75, V76, V77) -> case V5 of {'Idris.Core.Value.NForce', E68, E69, E70, E71} -> (fun (V78, V79, V80, V81) -> ('nested--7896-2737--in--un--quickConvArg'(V0, V1, V2, V3, V76, V80)) end(E68, E69, E70, E71)); _ -> case V5 of {'Idris.Core.Value.NErased', E66, E67} -> (fun (V82, V83) -> 1 end(E66, E67)); _ -> 0 end end end(E62, E63, E64, E65)); {'Idris.Core.Value.NPrimVal', E72, E73} -> (fun (V84, V85) -> case V5 of {'Idris.Core.Value.NPrimVal', E76, E77} -> (fun (V86, V87) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V85, V87)) end(E76, E77)); _ -> case V5 of {'Idris.Core.Value.NErased', E74, E75} -> (fun (V88, V89) -> 1 end(E74, E75)); _ -> 0 end end end(E72, E73)); {'Idris.Core.Value.NType', E78} -> (fun (V90) -> case V5 of {'Idris.Core.Value.NType', E81} -> (fun (V91) -> 1 end(E81)); _ -> case V5 of {'Idris.Core.Value.NErased', E79, E80} -> (fun (V92, V93) -> 1 end(E79, E80)); _ -> 0 end end end(E78)); {'Idris.Core.Value.NErased', E82, E83} -> (fun (V94, V95) -> 1 end(E82, E83)); _ -> case V5 of {'Idris.Core.Value.NErased', E0, E1} -> (fun (V96, V97) -> 1 end(E0, E1)); _ -> 0 end end end end.
'nested--7931-4356--in--un--getScrutinee'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of 0 -> case V14 of [E2 | E3] -> (fun (V15, V16) -> {'Idris.Prelude.Types.Just', V15} end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> begin (V17 = (V13 - 1)), case V14 of [E0 | E1] -> (fun (V18, V19) -> ('nested--7931-4356--in--un--getScrutinee'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V17, V19)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end end.
'nested--12150-6528--in--un--getInfPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Core.Value.NRef', E0, E1} -> (fun (V14, V15) -> case V9 of 1 -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V15, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V46 of {'Idris.Prelude.Types.Left', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E34} -> (fun (V49) -> {'Idris.Prelude.Types.Right', case V49 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V56 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E34)); _ -> {'Idris.Prelude.Types.Right', []} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', []} end.
'nested--7925-3848--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> case V10 of 0 -> case V11 of [E2 | E3] -> (fun (V12, V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V12)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V14 = (V10 - 1)), case V11 of [E0 | E1] -> (fun (V15, V16) -> ('nested--7925-3848--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V14, V16)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--7351-2049--in--un--findIdx'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V7)) of 1 -> {'Idris.Prelude.Types.Just', V11}; 0 -> ('nested--7351-2049--in--un--findIdx'(V0, V1, V2, V3, V4, V5, V9, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7931-4355--in--un--findArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> {'Idris.Prelude.Types.Just', V15} end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--7904-3070--in--un--extend'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V13 of [] -> case V14 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V15)); _ -> {'Idris.Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V16, V17) -> case V14 of [E2 | E3] -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7904-3070--in--un--extend'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V17, V19, V15)), fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([{'Idris.Builtin.MkPair', 0, 0} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('nested--7904-3069--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V18, ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V17, V0)), ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V19, V1)), V21)) end, V20))])) end)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--7904-3071--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> {'Idris.Prelude.Types.Just', V14}; [E0 | E1] -> (fun (V15, V16) -> case V14 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> begin (V17 = (V14 - 1)), ('nested--7904-3071--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V17)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7904-3072--in--un--dropP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7904-3071--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V16)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7904-3071--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14, V17)), fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V18, V19})) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12150-6529--in--un--dropInf'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> V14; _ -> case V14 of [] -> []; [E0 | E1] -> (fun (V15, V16) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V19, V20)) end end}, V12, V13)) of 1 -> ('nested--12150-6529--in--un--dropInf'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, (1 + V12), V13, V16)); 0 -> [V15 | ('nested--12150-6529--in--un--dropInf'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, (1 + V12), V13, V16))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--7925-3849--in--un--convertMatches'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> fun (V13) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> fun (V18) -> case ('nested--7925-3848--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V16, V2)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V19) -> case ('nested--7925-3848--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V17, V1)) of {'Idris.Prelude.Types.Just', E5} -> (fun (V20) -> begin (V21 = ('dn--un--convGen_Convert_Closure'(V9, V0, V8, V7, V6, V5, V19, V20, V18))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V24 = (('nested--7925-3849--in--un--convertMatches'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15))(V18))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Right', case V23 of 1 -> V26; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12150-6531--in--un--args2'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Builtin':'un--snd'(V12)) end, V5)).
'nested--12150-6530--in--un--args1'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Builtin':'un--snd'(V12)) end, V2)).
'dn--un--convert_Convert_Term'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--convGen_Convert_Term'(V0, V1, V9, 0, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convert_Convert_NF'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('dn--un--convGen_Convert_NF'(V0, V1, V9, 0, V2, V3, V4, V5))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convert_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V9, 0, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convertInf_Convert_Term'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--convGen_Convert_Term'(V0, V1, V9, 1, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convertInf_Convert_NF'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('dn--un--convGen_Convert_NF'(V0, V1, V9, 1, V2, V3, V4, V5))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convertInf_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.Quote.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V9, 1, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convGen_Convert_Term'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, V6))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, V7))(V8))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V11, V14))(V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E230, E231, E232, E233} -> (fun (V8, V9, V10, V11) -> case V7 of {'Idris.Core.Value.NBind', E478, E479, E480, E481} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Normalise.Quote':'un--genName'(V2, <<"conv"/utf8>>, V16))), case V17 of {'Idris.Prelude.Types.Left', E482} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E482)); {'Idris.Prelude.Types.Right', E483} -> (fun (V19) -> begin (V20 = {'Idris.Core.Value.MkClosure', [], ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Value.Nil'}, V5, {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Bound'}, V19}}), begin (V21 = (('un--convBinders'(V0, V1, V2, V3, V4, V5, V10, V14))(V16))), case V21 of {'Idris.Prelude.Types.Left', E484} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E484)); {'Idris.Prelude.Types.Right', E485} -> (fun (V23) -> case V23 of 1 -> begin (V24 = (((V11(V4))(V20))(V16))), case V24 of {'Idris.Prelude.Types.Left', E486} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E486)); {'Idris.Prelude.Types.Right', E487} -> (fun (V26) -> begin (V27 = (((V15(V4))(V20))(V16))), case V27 of {'Idris.Prelude.Types.Left', E488} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E488)); {'Idris.Prelude.Types.Right', E489} -> (fun (V29) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V26, V29))(V16)) end(E489)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E487)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E485)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E483)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E478, E479, E480, E481)); _ -> case V10 of {'Idris.Core.TT.Lam', E464, E465, E466, E467} -> (fun (V30, V31, V32, V33) -> fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V34))), case V35 of {'Idris.Prelude.Types.Left', E468} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E468)); {'Idris.Prelude.Types.Right', E469} -> (fun (V37) -> begin (V49 = begin (V40 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V37, V5, V38, V39)) end end, V32, V34))), case V40 of {'Idris.Prelude.Types.Left', E470} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E470)); {'Idris.Prelude.Types.Right', E471} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V37, V5, V33, V34))), case V43 of {'Idris.Prelude.Types.Left', E472} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E472)); {'Idris.Prelude.Types.Right', E473} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V37, V5, V7, V34))), case V46 of {'Idris.Prelude.Types.Left', E474} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E474)); {'Idris.Prelude.Types.Right', E475} -> (fun (V48) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, {'Idris.Core.TT.Bind', V8, V9, {'Idris.Core.TT.Lam', V30, V31, V42, V45}, {'Idris.Core.TT.App', V8, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V48)), {'Idris.Core.TT.Local', V8, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V34)) end(E475)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E473)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E471)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V49 of {'Idris.Prelude.Types.Left', E476} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E476)); {'Idris.Prelude.Types.Right', E477} -> (fun (V51) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6, V51))(V34)) end(E477)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E469)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E464, E465, E466, E467)); _ -> case V7 of {'Idris.Core.Value.NBind', E340, E341, E342, E343} -> (fun (V52, V53, V54, V55) -> case V54 of {'Idris.Core.TT.Lam', E450, E451, E452, E453} -> (fun (V56, V57, V58, V59) -> fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V60))), case V61 of {'Idris.Prelude.Types.Left', E454} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E454)); {'Idris.Prelude.Types.Right', E455} -> (fun (V63) -> begin (V75 = begin (V66 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V63, V5, V64, V65)) end end, V58, V60))), case V66 of {'Idris.Prelude.Types.Left', E456} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E456)); {'Idris.Prelude.Types.Right', E457} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V63, V5, V59, V60))), case V69 of {'Idris.Prelude.Types.Left', E458} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E458)); {'Idris.Prelude.Types.Right', E459} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V63, V5, V6, V60))), case V72 of {'Idris.Prelude.Types.Left', E460} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E460)); {'Idris.Prelude.Types.Right', E461} -> (fun (V74) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, {'Idris.Core.TT.Bind', V52, V53, {'Idris.Core.TT.Lam', V56, V57, V68, V71}, {'Idris.Core.TT.App', V52, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V74)), {'Idris.Core.TT.Local', V52, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V60)) end(E461)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E459)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E457)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V75 of {'Idris.Prelude.Types.Left', E462} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E462)); {'Idris.Prelude.Types.Right', E463} -> (fun (V77) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V77, V7))(V60)) end(E463)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E450, E451, E452, E453)); _ -> case V6 of {'Idris.Core.Value.NApp', E348, E349, E350} -> (fun (V78, V79, V80) -> case V7 of {'Idris.Core.Value.NApp', E355, E356, E357} -> (fun (V81, V82, V83) -> fun (V84) -> begin (V85 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V79, V82))(V84))), case V85 of {'Idris.Prelude.Types.Left', E358} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E358)); {'Idris.Prelude.Types.Right', E359} -> (fun (V87) -> case V87 of 1 -> begin (V88 = ('nested--12150-6528--in--un--getInfPos'(V1, V81, V80, V79, V78, V83, V82, V5, V4, V3, V2, V0, V79, V84))), case V88 of {'Idris.Prelude.Types.Left', E360} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E360)); {'Idris.Prelude.Types.Right', E361} -> (fun (V90) -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12150-6529--in--un--dropInf'(V1, V81, V80, V79, V78, V83, V82, V5, V4, V3, V2, V0, 0, V90, ('nested--12150-6530--in--un--args1'(V1, V81, V80, V79, V78, V83, V82, V5, V4, V3, V2, V0)))), ('nested--12150-6529--in--un--dropInf'(V1, V81, V80, V79, V78, V83, V82, V5, V4, V3, V2, V0, 0, V90, ('nested--12150-6531--in--un--args2'(V1, V81, V80, V79, V78, V83, V82, V5, V4, V3, V2, V0)))), V84)) end(E361)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V78, V2, V3, V4, V5, V79, ('nested--12150-6530--in--un--args1'(V1, V81, V80, V79, V78, V83, V82, V5, V4, V3, V2, V0)), V82, ('nested--12150-6531--in--un--args2'(V1, V81, V80, V79, V78, V83, V82, V5, V4, V3, V2, V0)), V84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E359)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E355, E356, E357)); _ -> case V7 of {'Idris.Core.Value.NErased', E353, E354} -> (fun (V91, V92) -> fun (V93) -> {'Idris.Prelude.Types.Right', 1} end end(E353, E354)); _ -> fun (V94) -> case V6 of {'Idris.Core.Value.NType', E351} -> (fun (V95) -> case V7 of {'Idris.Core.Value.NType', E352} -> (fun (V96) -> {'Idris.Prelude.Types.Right', 1} end(E352)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E351)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E348, E349, E350)); {'Idris.Core.Value.NDCon', E362, E363, E364, E365, E366} -> (fun (V97, V98, V99, V100, V101) -> case V7 of {'Idris.Core.Value.NDCon', E371, E372, E373, E374, E375} -> (fun (V102, V103, V104, V105, V106) -> fun (V107) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V99, V104)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V108) -> ('Idris.Idris2.Builtin':'un--snd'(V108)) end, V101)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V109) -> ('Idris.Idris2.Builtin':'un--snd'(V109)) end, V106)), V107)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E371, E372, E373, E374, E375)); _ -> case V7 of {'Idris.Core.Value.NErased', E369, E370} -> (fun (V110, V111) -> fun (V112) -> {'Idris.Prelude.Types.Right', 1} end end(E369, E370)); _ -> fun (V113) -> case V6 of {'Idris.Core.Value.NType', E367} -> (fun (V114) -> case V7 of {'Idris.Core.Value.NType', E368} -> (fun (V115) -> {'Idris.Prelude.Types.Right', 1} end(E368)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E367)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E362, E363, E364, E365, E366)); {'Idris.Core.Value.NTCon', E376, E377, E378, E379, E380} -> (fun (V116, V117, V118, V119, V120) -> case V7 of {'Idris.Core.Value.NTCon', E385, E386, E387, E388, E389} -> (fun (V121, V122, V123, V124, V125) -> fun (V126) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V117, V122)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V127) -> ('Idris.Idris2.Builtin':'un--snd'(V127)) end, V120)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V128) -> ('Idris.Idris2.Builtin':'un--snd'(V128)) end, V125)), V126)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E385, E386, E387, E388, E389)); _ -> case V7 of {'Idris.Core.Value.NErased', E383, E384} -> (fun (V129, V130) -> fun (V131) -> {'Idris.Prelude.Types.Right', 1} end end(E383, E384)); _ -> fun (V132) -> case V6 of {'Idris.Core.Value.NType', E381} -> (fun (V133) -> case V7 of {'Idris.Core.Value.NType', E382} -> (fun (V134) -> {'Idris.Prelude.Types.Right', 1} end(E382)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E381)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E376, E377, E378, E379, E380)); {'Idris.Core.Value.NAs', E390, E391, E392, E393} -> (fun (V135, V136, V137, V138) -> case V7 of {'Idris.Core.Value.NAs', E398, E399, E400, E401} -> (fun (V139, V140, V141, V142) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V138, V142)) end(E398, E399, E400, E401)); _ -> case V7 of {'Idris.Core.Value.NErased', E396, E397} -> (fun (V143, V144) -> fun (V145) -> {'Idris.Prelude.Types.Right', 1} end end(E396, E397)); _ -> fun (V146) -> case V6 of {'Idris.Core.Value.NType', E394} -> (fun (V147) -> case V7 of {'Idris.Core.Value.NType', E395} -> (fun (V148) -> {'Idris.Prelude.Types.Right', 1} end(E395)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E394)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E390, E391, E392, E393)); {'Idris.Core.Value.NDelayed', E402, E403, E404} -> (fun (V149, V150, V151) -> case V7 of {'Idris.Core.Value.NDelayed', E409, E410, E411} -> (fun (V152, V153, V154) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V150, V153)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V151, V154)); 0 -> fun (V155) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E409, E410, E411)); _ -> case V7 of {'Idris.Core.Value.NErased', E407, E408} -> (fun (V156, V157) -> fun (V158) -> {'Idris.Prelude.Types.Right', 1} end end(E407, E408)); _ -> fun (V159) -> case V6 of {'Idris.Core.Value.NType', E405} -> (fun (V160) -> case V7 of {'Idris.Core.Value.NType', E406} -> (fun (V161) -> {'Idris.Prelude.Types.Right', 1} end(E406)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E405)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E402, E403, E404)); {'Idris.Core.Value.NDelay', E412, E413, E414, E415} -> (fun (V162, V163, V164, V165) -> case V7 of {'Idris.Core.Value.NDelay', E420, E421, E422, E423} -> (fun (V166, V167, V168, V169) -> fun (V170) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V163, V167)) of 1 -> begin (V171 = case V163 of 1 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V170)) end), case V171 of {'Idris.Prelude.Types.Left', E424} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E424)); {'Idris.Prelude.Types.Right', E425} -> (fun (V173) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V173, V5, V165, V169, V170)) end(E425)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E420, E421, E422, E423)); _ -> case V7 of {'Idris.Core.Value.NErased', E418, E419} -> (fun (V174, V175) -> fun (V176) -> {'Idris.Prelude.Types.Right', 1} end end(E418, E419)); _ -> fun (V177) -> case V6 of {'Idris.Core.Value.NType', E416} -> (fun (V178) -> case V7 of {'Idris.Core.Value.NType', E417} -> (fun (V179) -> {'Idris.Prelude.Types.Right', 1} end(E417)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E416)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E412, E413, E414, E415)); {'Idris.Core.Value.NForce', E426, E427, E428, E429} -> (fun (V180, V181, V182, V183) -> case V7 of {'Idris.Core.Value.NForce', E434, E435, E436, E437} -> (fun (V184, V185, V186, V187) -> fun (V188) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V181, V185)) of 1 -> begin (V189 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V182, V186))(V188))), case V189 of {'Idris.Prelude.Types.Left', E438} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E438)); {'Idris.Prelude.Types.Right', E439} -> (fun (V191) -> case V191 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V192) -> ('Idris.Idris2.Builtin':'un--snd'(V192)) end, V183)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V193) -> ('Idris.Idris2.Builtin':'un--snd'(V193)) end, V187)), V188)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E439)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E434, E435, E436, E437)); _ -> case V7 of {'Idris.Core.Value.NErased', E432, E433} -> (fun (V194, V195) -> fun (V196) -> {'Idris.Prelude.Types.Right', 1} end end(E432, E433)); _ -> fun (V197) -> case V6 of {'Idris.Core.Value.NType', E430} -> (fun (V198) -> case V7 of {'Idris.Core.Value.NType', E431} -> (fun (V199) -> {'Idris.Prelude.Types.Right', 1} end(E431)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E430)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E426, E427, E428, E429)); {'Idris.Core.Value.NPrimVal', E440, E441} -> (fun (V200, V201) -> case V7 of {'Idris.Core.Value.NPrimVal', E446, E447} -> (fun (V202, V203) -> fun (V204) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V201, V203))} end end(E446, E447)); _ -> case V7 of {'Idris.Core.Value.NErased', E444, E445} -> (fun (V205, V206) -> fun (V207) -> {'Idris.Prelude.Types.Right', 1} end end(E444, E445)); _ -> fun (V208) -> case V6 of {'Idris.Core.Value.NType', E442} -> (fun (V209) -> case V7 of {'Idris.Core.Value.NType', E443} -> (fun (V210) -> {'Idris.Prelude.Types.Right', 1} end(E443)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E442)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E440, E441)); {'Idris.Core.Value.NErased', E448, E449} -> (fun (V211, V212) -> fun (V213) -> {'Idris.Prelude.Types.Right', 1} end end(E448, E449)); _ -> case V7 of {'Idris.Core.Value.NErased', E346, E347} -> (fun (V214, V215) -> fun (V216) -> {'Idris.Prelude.Types.Right', 1} end end(E346, E347)); _ -> fun (V217) -> case V6 of {'Idris.Core.Value.NType', E344} -> (fun (V218) -> case V7 of {'Idris.Core.Value.NType', E345} -> (fun (V219) -> {'Idris.Prelude.Types.Right', 1} end(E345)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E344)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end(E340, E341, E342, E343)); _ -> case V6 of {'Idris.Core.Value.NApp', E238, E239, E240} -> (fun (V220, V221, V222) -> case V7 of {'Idris.Core.Value.NApp', E245, E246, E247} -> (fun (V223, V224, V225) -> fun (V226) -> begin (V227 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V221, V224))(V226))), case V227 of {'Idris.Prelude.Types.Left', E248} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V229) -> case V229 of 1 -> begin (V230 = ('nested--12150-6528--in--un--getInfPos'(V1, V223, V222, V221, V220, V225, V224, V5, V4, V3, V2, V0, V221, V226))), case V230 of {'Idris.Prelude.Types.Left', E250} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E250)); {'Idris.Prelude.Types.Right', E251} -> (fun (V232) -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12150-6529--in--un--dropInf'(V1, V223, V222, V221, V220, V225, V224, V5, V4, V3, V2, V0, 0, V232, ('nested--12150-6530--in--un--args1'(V1, V223, V222, V221, V220, V225, V224, V5, V4, V3, V2, V0)))), ('nested--12150-6529--in--un--dropInf'(V1, V223, V222, V221, V220, V225, V224, V5, V4, V3, V2, V0, 0, V232, ('nested--12150-6531--in--un--args2'(V1, V223, V222, V221, V220, V225, V224, V5, V4, V3, V2, V0)))), V226)) end(E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V220, V2, V3, V4, V5, V221, ('nested--12150-6530--in--un--args1'(V1, V223, V222, V221, V220, V225, V224, V5, V4, V3, V2, V0)), V224, ('nested--12150-6531--in--un--args2'(V1, V223, V222, V221, V220, V225, V224, V5, V4, V3, V2, V0)), V226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E245, E246, E247)); _ -> case V7 of {'Idris.Core.Value.NErased', E243, E244} -> (fun (V233, V234) -> fun (V235) -> {'Idris.Prelude.Types.Right', 1} end end(E243, E244)); _ -> fun (V236) -> case V6 of {'Idris.Core.Value.NType', E241} -> (fun (V237) -> case V7 of {'Idris.Core.Value.NType', E242} -> (fun (V238) -> {'Idris.Prelude.Types.Right', 1} end(E242)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E241)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E238, E239, E240)); {'Idris.Core.Value.NDCon', E252, E253, E254, E255, E256} -> (fun (V239, V240, V241, V242, V243) -> case V7 of {'Idris.Core.Value.NDCon', E261, E262, E263, E264, E265} -> (fun (V244, V245, V246, V247, V248) -> fun (V249) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V241, V246)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V250) -> ('Idris.Idris2.Builtin':'un--snd'(V250)) end, V243)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V251) -> ('Idris.Idris2.Builtin':'un--snd'(V251)) end, V248)), V249)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E261, E262, E263, E264, E265)); _ -> case V7 of {'Idris.Core.Value.NErased', E259, E260} -> (fun (V252, V253) -> fun (V254) -> {'Idris.Prelude.Types.Right', 1} end end(E259, E260)); _ -> fun (V255) -> case V6 of {'Idris.Core.Value.NType', E257} -> (fun (V256) -> case V7 of {'Idris.Core.Value.NType', E258} -> (fun (V257) -> {'Idris.Prelude.Types.Right', 1} end(E258)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E257)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E252, E253, E254, E255, E256)); {'Idris.Core.Value.NTCon', E266, E267, E268, E269, E270} -> (fun (V258, V259, V260, V261, V262) -> case V7 of {'Idris.Core.Value.NTCon', E275, E276, E277, E278, E279} -> (fun (V263, V264, V265, V266, V267) -> fun (V268) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V259, V264)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V269) -> ('Idris.Idris2.Builtin':'un--snd'(V269)) end, V262)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V270) -> ('Idris.Idris2.Builtin':'un--snd'(V270)) end, V267)), V268)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E275, E276, E277, E278, E279)); _ -> case V7 of {'Idris.Core.Value.NErased', E273, E274} -> (fun (V271, V272) -> fun (V273) -> {'Idris.Prelude.Types.Right', 1} end end(E273, E274)); _ -> fun (V274) -> case V6 of {'Idris.Core.Value.NType', E271} -> (fun (V275) -> case V7 of {'Idris.Core.Value.NType', E272} -> (fun (V276) -> {'Idris.Prelude.Types.Right', 1} end(E272)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E271)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E266, E267, E268, E269, E270)); {'Idris.Core.Value.NAs', E280, E281, E282, E283} -> (fun (V277, V278, V279, V280) -> case V7 of {'Idris.Core.Value.NAs', E288, E289, E290, E291} -> (fun (V281, V282, V283, V284) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V280, V284)) end(E288, E289, E290, E291)); _ -> case V7 of {'Idris.Core.Value.NErased', E286, E287} -> (fun (V285, V286) -> fun (V287) -> {'Idris.Prelude.Types.Right', 1} end end(E286, E287)); _ -> fun (V288) -> case V6 of {'Idris.Core.Value.NType', E284} -> (fun (V289) -> case V7 of {'Idris.Core.Value.NType', E285} -> (fun (V290) -> {'Idris.Prelude.Types.Right', 1} end(E285)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E284)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E280, E281, E282, E283)); {'Idris.Core.Value.NDelayed', E292, E293, E294} -> (fun (V291, V292, V293) -> case V7 of {'Idris.Core.Value.NDelayed', E299, E300, E301} -> (fun (V294, V295, V296) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V292, V295)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V293, V296)); 0 -> fun (V297) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E299, E300, E301)); _ -> case V7 of {'Idris.Core.Value.NErased', E297, E298} -> (fun (V298, V299) -> fun (V300) -> {'Idris.Prelude.Types.Right', 1} end end(E297, E298)); _ -> fun (V301) -> case V6 of {'Idris.Core.Value.NType', E295} -> (fun (V302) -> case V7 of {'Idris.Core.Value.NType', E296} -> (fun (V303) -> {'Idris.Prelude.Types.Right', 1} end(E296)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E295)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E292, E293, E294)); {'Idris.Core.Value.NDelay', E302, E303, E304, E305} -> (fun (V304, V305, V306, V307) -> case V7 of {'Idris.Core.Value.NDelay', E310, E311, E312, E313} -> (fun (V308, V309, V310, V311) -> fun (V312) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V305, V309)) of 1 -> begin (V313 = case V305 of 1 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V312)) end), case V313 of {'Idris.Prelude.Types.Left', E314} -> (fun (V314) -> {'Idris.Prelude.Types.Left', V314} end(E314)); {'Idris.Prelude.Types.Right', E315} -> (fun (V315) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V315, V5, V307, V311, V312)) end(E315)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E310, E311, E312, E313)); _ -> case V7 of {'Idris.Core.Value.NErased', E308, E309} -> (fun (V316, V317) -> fun (V318) -> {'Idris.Prelude.Types.Right', 1} end end(E308, E309)); _ -> fun (V319) -> case V6 of {'Idris.Core.Value.NType', E306} -> (fun (V320) -> case V7 of {'Idris.Core.Value.NType', E307} -> (fun (V321) -> {'Idris.Prelude.Types.Right', 1} end(E307)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E306)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E302, E303, E304, E305)); {'Idris.Core.Value.NForce', E316, E317, E318, E319} -> (fun (V322, V323, V324, V325) -> case V7 of {'Idris.Core.Value.NForce', E324, E325, E326, E327} -> (fun (V326, V327, V328, V329) -> fun (V330) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V323, V327)) of 1 -> begin (V331 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V324, V328))(V330))), case V331 of {'Idris.Prelude.Types.Left', E328} -> (fun (V332) -> {'Idris.Prelude.Types.Left', V332} end(E328)); {'Idris.Prelude.Types.Right', E329} -> (fun (V333) -> case V333 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V334) -> ('Idris.Idris2.Builtin':'un--snd'(V334)) end, V325)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V335) -> ('Idris.Idris2.Builtin':'un--snd'(V335)) end, V329)), V330)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E329)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E324, E325, E326, E327)); _ -> case V7 of {'Idris.Core.Value.NErased', E322, E323} -> (fun (V336, V337) -> fun (V338) -> {'Idris.Prelude.Types.Right', 1} end end(E322, E323)); _ -> fun (V339) -> case V6 of {'Idris.Core.Value.NType', E320} -> (fun (V340) -> case V7 of {'Idris.Core.Value.NType', E321} -> (fun (V341) -> {'Idris.Prelude.Types.Right', 1} end(E321)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E320)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E316, E317, E318, E319)); {'Idris.Core.Value.NPrimVal', E330, E331} -> (fun (V342, V343) -> case V7 of {'Idris.Core.Value.NPrimVal', E336, E337} -> (fun (V344, V345) -> fun (V346) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V343, V345))} end end(E336, E337)); _ -> case V7 of {'Idris.Core.Value.NErased', E334, E335} -> (fun (V347, V348) -> fun (V349) -> {'Idris.Prelude.Types.Right', 1} end end(E334, E335)); _ -> fun (V350) -> case V6 of {'Idris.Core.Value.NType', E332} -> (fun (V351) -> case V7 of {'Idris.Core.Value.NType', E333} -> (fun (V352) -> {'Idris.Prelude.Types.Right', 1} end(E333)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E332)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E330, E331)); {'Idris.Core.Value.NErased', E338, E339} -> (fun (V353, V354) -> fun (V355) -> {'Idris.Prelude.Types.Right', 1} end end(E338, E339)); _ -> case V7 of {'Idris.Core.Value.NErased', E236, E237} -> (fun (V356, V357) -> fun (V358) -> {'Idris.Prelude.Types.Right', 1} end end(E236, E237)); _ -> fun (V359) -> case V6 of {'Idris.Core.Value.NType', E234} -> (fun (V360) -> case V7 of {'Idris.Core.Value.NType', E235} -> (fun (V361) -> {'Idris.Prelude.Types.Right', 1} end(E235)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E234)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end end end(E230, E231, E232, E233)); _ -> case V7 of {'Idris.Core.Value.NBind', E106, E107, E108, E109} -> (fun (V362, V363, V364, V365) -> case V364 of {'Idris.Core.TT.Lam', E216, E217, E218, E219} -> (fun (V366, V367, V368, V369) -> fun (V370) -> begin (V371 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V370))), case V371 of {'Idris.Prelude.Types.Left', E220} -> (fun (V372) -> {'Idris.Prelude.Types.Left', V372} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V373) -> begin (V385 = begin (V376 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V374) -> fun (V375) -> ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V373, V5, V374, V375)) end end, V368, V370))), case V376 of {'Idris.Prelude.Types.Left', E222} -> (fun (V377) -> {'Idris.Prelude.Types.Left', V377} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V378) -> begin (V379 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_Closure'(V0, V1, V373, V5, V369, V370))), case V379 of {'Idris.Prelude.Types.Left', E224} -> (fun (V380) -> {'Idris.Prelude.Types.Left', V380} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V381) -> begin (V382 = ('Idris.Idris2.Core.Normalise.Quote':'dn--un--quote_Quote_NF'(V0, V1, V373, V5, V6, V370))), case V382 of {'Idris.Prelude.Types.Left', E226} -> (fun (V383) -> {'Idris.Prelude.Types.Left', V383} end(E226)); {'Idris.Prelude.Types.Right', E227} -> (fun (V384) -> (('Idris.Idris2.Core.Normalise.Eval':'un--nf'(V0, V1, V4, V5, {'Idris.Core.TT.Bind', V362, V363, {'Idris.Core.TT.Lam', V366, V367, V378, V381}, {'Idris.Core.TT.App', V362, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V384)), {'Idris.Core.TT.Local', V362, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V370)) end(E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V385 of {'Idris.Prelude.Types.Left', E228} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E228)); {'Idris.Prelude.Types.Right', E229} -> (fun (V387) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V387, V7))(V370)) end(E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E216, E217, E218, E219)); _ -> case V6 of {'Idris.Core.Value.NApp', E114, E115, E116} -> (fun (V388, V389, V390) -> case V7 of {'Idris.Core.Value.NApp', E121, E122, E123} -> (fun (V391, V392, V393) -> fun (V394) -> begin (V395 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V389, V392))(V394))), case V395 of {'Idris.Prelude.Types.Left', E124} -> (fun (V396) -> {'Idris.Prelude.Types.Left', V396} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V397) -> case V397 of 1 -> begin (V398 = ('nested--12150-6528--in--un--getInfPos'(V1, V391, V390, V389, V388, V393, V392, V5, V4, V3, V2, V0, V389, V394))), case V398 of {'Idris.Prelude.Types.Left', E126} -> (fun (V399) -> {'Idris.Prelude.Types.Left', V399} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V400) -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12150-6529--in--un--dropInf'(V1, V391, V390, V389, V388, V393, V392, V5, V4, V3, V2, V0, 0, V400, ('nested--12150-6530--in--un--args1'(V1, V391, V390, V389, V388, V393, V392, V5, V4, V3, V2, V0)))), ('nested--12150-6529--in--un--dropInf'(V1, V391, V390, V389, V388, V393, V392, V5, V4, V3, V2, V0, 0, V400, ('nested--12150-6531--in--un--args2'(V1, V391, V390, V389, V388, V393, V392, V5, V4, V3, V2, V0)))), V394)) end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V388, V2, V3, V4, V5, V389, ('nested--12150-6530--in--un--args1'(V1, V391, V390, V389, V388, V393, V392, V5, V4, V3, V2, V0)), V392, ('nested--12150-6531--in--un--args2'(V1, V391, V390, V389, V388, V393, V392, V5, V4, V3, V2, V0)), V394)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E121, E122, E123)); _ -> case V7 of {'Idris.Core.Value.NErased', E119, E120} -> (fun (V401, V402) -> fun (V403) -> {'Idris.Prelude.Types.Right', 1} end end(E119, E120)); _ -> fun (V404) -> case V6 of {'Idris.Core.Value.NType', E117} -> (fun (V405) -> case V7 of {'Idris.Core.Value.NType', E118} -> (fun (V406) -> {'Idris.Prelude.Types.Right', 1} end(E118)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E117)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E114, E115, E116)); {'Idris.Core.Value.NDCon', E128, E129, E130, E131, E132} -> (fun (V407, V408, V409, V410, V411) -> case V7 of {'Idris.Core.Value.NDCon', E137, E138, E139, E140, E141} -> (fun (V412, V413, V414, V415, V416) -> fun (V417) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V409, V414)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V418) -> ('Idris.Idris2.Builtin':'un--snd'(V418)) end, V411)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V419) -> ('Idris.Idris2.Builtin':'un--snd'(V419)) end, V416)), V417)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137, E138, E139, E140, E141)); _ -> case V7 of {'Idris.Core.Value.NErased', E135, E136} -> (fun (V420, V421) -> fun (V422) -> {'Idris.Prelude.Types.Right', 1} end end(E135, E136)); _ -> fun (V423) -> case V6 of {'Idris.Core.Value.NType', E133} -> (fun (V424) -> case V7 of {'Idris.Core.Value.NType', E134} -> (fun (V425) -> {'Idris.Prelude.Types.Right', 1} end(E134)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E133)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E128, E129, E130, E131, E132)); {'Idris.Core.Value.NTCon', E142, E143, E144, E145, E146} -> (fun (V426, V427, V428, V429, V430) -> case V7 of {'Idris.Core.Value.NTCon', E151, E152, E153, E154, E155} -> (fun (V431, V432, V433, V434, V435) -> fun (V436) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V427, V432)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V437) -> ('Idris.Idris2.Builtin':'un--snd'(V437)) end, V430)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V438) -> ('Idris.Idris2.Builtin':'un--snd'(V438)) end, V435)), V436)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151, E152, E153, E154, E155)); _ -> case V7 of {'Idris.Core.Value.NErased', E149, E150} -> (fun (V439, V440) -> fun (V441) -> {'Idris.Prelude.Types.Right', 1} end end(E149, E150)); _ -> fun (V442) -> case V6 of {'Idris.Core.Value.NType', E147} -> (fun (V443) -> case V7 of {'Idris.Core.Value.NType', E148} -> (fun (V444) -> {'Idris.Prelude.Types.Right', 1} end(E148)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E147)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E142, E143, E144, E145, E146)); {'Idris.Core.Value.NAs', E156, E157, E158, E159} -> (fun (V445, V446, V447, V448) -> case V7 of {'Idris.Core.Value.NAs', E164, E165, E166, E167} -> (fun (V449, V450, V451, V452) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V448, V452)) end(E164, E165, E166, E167)); _ -> case V7 of {'Idris.Core.Value.NErased', E162, E163} -> (fun (V453, V454) -> fun (V455) -> {'Idris.Prelude.Types.Right', 1} end end(E162, E163)); _ -> fun (V456) -> case V6 of {'Idris.Core.Value.NType', E160} -> (fun (V457) -> case V7 of {'Idris.Core.Value.NType', E161} -> (fun (V458) -> {'Idris.Prelude.Types.Right', 1} end(E161)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E160)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E156, E157, E158, E159)); {'Idris.Core.Value.NDelayed', E168, E169, E170} -> (fun (V459, V460, V461) -> case V7 of {'Idris.Core.Value.NDelayed', E175, E176, E177} -> (fun (V462, V463, V464) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V460, V463)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V461, V464)); 0 -> fun (V465) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E175, E176, E177)); _ -> case V7 of {'Idris.Core.Value.NErased', E173, E174} -> (fun (V466, V467) -> fun (V468) -> {'Idris.Prelude.Types.Right', 1} end end(E173, E174)); _ -> fun (V469) -> case V6 of {'Idris.Core.Value.NType', E171} -> (fun (V470) -> case V7 of {'Idris.Core.Value.NType', E172} -> (fun (V471) -> {'Idris.Prelude.Types.Right', 1} end(E172)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E171)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E168, E169, E170)); {'Idris.Core.Value.NDelay', E178, E179, E180, E181} -> (fun (V472, V473, V474, V475) -> case V7 of {'Idris.Core.Value.NDelay', E186, E187, E188, E189} -> (fun (V476, V477, V478, V479) -> fun (V480) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V473, V477)) of 1 -> begin (V481 = case V473 of 1 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V480)) end), case V481 of {'Idris.Prelude.Types.Left', E190} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E190)); {'Idris.Prelude.Types.Right', E191} -> (fun (V483) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V483, V5, V475, V479, V480)) end(E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E186, E187, E188, E189)); _ -> case V7 of {'Idris.Core.Value.NErased', E184, E185} -> (fun (V484, V485) -> fun (V486) -> {'Idris.Prelude.Types.Right', 1} end end(E184, E185)); _ -> fun (V487) -> case V6 of {'Idris.Core.Value.NType', E182} -> (fun (V488) -> case V7 of {'Idris.Core.Value.NType', E183} -> (fun (V489) -> {'Idris.Prelude.Types.Right', 1} end(E183)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E182)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E178, E179, E180, E181)); {'Idris.Core.Value.NForce', E192, E193, E194, E195} -> (fun (V490, V491, V492, V493) -> case V7 of {'Idris.Core.Value.NForce', E200, E201, E202, E203} -> (fun (V494, V495, V496, V497) -> fun (V498) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V491, V495)) of 1 -> begin (V499 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V492, V496))(V498))), case V499 of {'Idris.Prelude.Types.Left', E204} -> (fun (V500) -> {'Idris.Prelude.Types.Left', V500} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V501) -> case V501 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V502) -> ('Idris.Idris2.Builtin':'un--snd'(V502)) end, V493)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V503) -> ('Idris.Idris2.Builtin':'un--snd'(V503)) end, V497)), V498)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E200, E201, E202, E203)); _ -> case V7 of {'Idris.Core.Value.NErased', E198, E199} -> (fun (V504, V505) -> fun (V506) -> {'Idris.Prelude.Types.Right', 1} end end(E198, E199)); _ -> fun (V507) -> case V6 of {'Idris.Core.Value.NType', E196} -> (fun (V508) -> case V7 of {'Idris.Core.Value.NType', E197} -> (fun (V509) -> {'Idris.Prelude.Types.Right', 1} end(E197)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E196)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E192, E193, E194, E195)); {'Idris.Core.Value.NPrimVal', E206, E207} -> (fun (V510, V511) -> case V7 of {'Idris.Core.Value.NPrimVal', E212, E213} -> (fun (V512, V513) -> fun (V514) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V511, V513))} end end(E212, E213)); _ -> case V7 of {'Idris.Core.Value.NErased', E210, E211} -> (fun (V515, V516) -> fun (V517) -> {'Idris.Prelude.Types.Right', 1} end end(E210, E211)); _ -> fun (V518) -> case V6 of {'Idris.Core.Value.NType', E208} -> (fun (V519) -> case V7 of {'Idris.Core.Value.NType', E209} -> (fun (V520) -> {'Idris.Prelude.Types.Right', 1} end(E209)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E208)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E206, E207)); {'Idris.Core.Value.NErased', E214, E215} -> (fun (V521, V522) -> fun (V523) -> {'Idris.Prelude.Types.Right', 1} end end(E214, E215)); _ -> case V7 of {'Idris.Core.Value.NErased', E112, E113} -> (fun (V524, V525) -> fun (V526) -> {'Idris.Prelude.Types.Right', 1} end end(E112, E113)); _ -> fun (V527) -> case V6 of {'Idris.Core.Value.NType', E110} -> (fun (V528) -> case V7 of {'Idris.Core.Value.NType', E111} -> (fun (V529) -> {'Idris.Prelude.Types.Right', 1} end(E111)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E110)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end(E106, E107, E108, E109)); _ -> case V6 of {'Idris.Core.Value.NApp', E4, E5, E6} -> (fun (V530, V531, V532) -> case V7 of {'Idris.Core.Value.NApp', E11, E12, E13} -> (fun (V533, V534, V535) -> fun (V536) -> begin (V537 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V5, V531, V534))(V536))), case V537 of {'Idris.Prelude.Types.Left', E14} -> (fun (V538) -> {'Idris.Prelude.Types.Left', V538} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V539) -> case V539 of 1 -> begin (V540 = ('nested--12150-6528--in--un--getInfPos'(V1, V533, V532, V531, V530, V535, V534, V5, V4, V3, V2, V0, V531, V536))), case V540 of {'Idris.Prelude.Types.Left', E16} -> (fun (V541) -> {'Idris.Prelude.Types.Left', V541} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V542) -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('nested--12150-6529--in--un--dropInf'(V1, V533, V532, V531, V530, V535, V534, V5, V4, V3, V2, V0, 0, V542, ('nested--12150-6530--in--un--args1'(V1, V533, V532, V531, V530, V535, V534, V5, V4, V3, V2, V0)))), ('nested--12150-6529--in--un--dropInf'(V1, V533, V532, V531, V530, V535, V534, V5, V4, V3, V2, V0, 0, V542, ('nested--12150-6531--in--un--args2'(V1, V533, V532, V531, V530, V535, V534, V5, V4, V3, V2, V0)))), V536)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--chkConvCaseBlock'(V0, V1, V530, V2, V3, V4, V5, V531, ('nested--12150-6530--in--un--args1'(V1, V533, V532, V531, V530, V535, V534, V5, V4, V3, V2, V0)), V534, ('nested--12150-6531--in--un--args2'(V1, V533, V532, V531, V530, V535, V534, V5, V4, V3, V2, V0)), V536)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13)); _ -> case V7 of {'Idris.Core.Value.NErased', E9, E10} -> (fun (V543, V544) -> fun (V545) -> {'Idris.Prelude.Types.Right', 1} end end(E9, E10)); _ -> fun (V546) -> case V6 of {'Idris.Core.Value.NType', E7} -> (fun (V547) -> case V7 of {'Idris.Core.Value.NType', E8} -> (fun (V548) -> {'Idris.Prelude.Types.Right', 1} end(E8)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E4, E5, E6)); {'Idris.Core.Value.NDCon', E18, E19, E20, E21, E22} -> (fun (V549, V550, V551, V552, V553) -> case V7 of {'Idris.Core.Value.NDCon', E27, E28, E29, E30, E31} -> (fun (V554, V555, V556, V557, V558) -> fun (V559) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V551, V556)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V560) -> ('Idris.Idris2.Builtin':'un--snd'(V560)) end, V553)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V561) -> ('Idris.Idris2.Builtin':'un--snd'(V561)) end, V558)), V559)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28, E29, E30, E31)); _ -> case V7 of {'Idris.Core.Value.NErased', E25, E26} -> (fun (V562, V563) -> fun (V564) -> {'Idris.Prelude.Types.Right', 1} end end(E25, E26)); _ -> fun (V565) -> case V6 of {'Idris.Core.Value.NType', E23} -> (fun (V566) -> case V7 of {'Idris.Core.Value.NType', E24} -> (fun (V567) -> {'Idris.Prelude.Types.Right', 1} end(E24)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E23)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E18, E19, E20, E21, E22)); {'Idris.Core.Value.NTCon', E32, E33, E34, E35, E36} -> (fun (V568, V569, V570, V571, V572) -> case V7 of {'Idris.Core.Value.NTCon', E41, E42, E43, E44, E45} -> (fun (V573, V574, V575, V576, V577) -> fun (V578) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V569, V574)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V579) -> ('Idris.Idris2.Builtin':'un--snd'(V579)) end, V572)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V580) -> ('Idris.Idris2.Builtin':'un--snd'(V580)) end, V577)), V578)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41, E42, E43, E44, E45)); _ -> case V7 of {'Idris.Core.Value.NErased', E39, E40} -> (fun (V581, V582) -> fun (V583) -> {'Idris.Prelude.Types.Right', 1} end end(E39, E40)); _ -> fun (V584) -> case V6 of {'Idris.Core.Value.NType', E37} -> (fun (V585) -> case V7 of {'Idris.Core.Value.NType', E38} -> (fun (V586) -> {'Idris.Prelude.Types.Right', 1} end(E38)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E37)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E32, E33, E34, E35, E36)); {'Idris.Core.Value.NAs', E46, E47, E48, E49} -> (fun (V587, V588, V589, V590) -> case V7 of {'Idris.Core.Value.NAs', E54, E55, E56, E57} -> (fun (V591, V592, V593, V594) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V590, V594)) end(E54, E55, E56, E57)); _ -> case V7 of {'Idris.Core.Value.NErased', E52, E53} -> (fun (V595, V596) -> fun (V597) -> {'Idris.Prelude.Types.Right', 1} end end(E52, E53)); _ -> fun (V598) -> case V6 of {'Idris.Core.Value.NType', E50} -> (fun (V599) -> case V7 of {'Idris.Core.Value.NType', E51} -> (fun (V600) -> {'Idris.Prelude.Types.Right', 1} end(E51)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E50)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E46, E47, E48, E49)); {'Idris.Core.Value.NDelayed', E58, E59, E60} -> (fun (V601, V602, V603) -> case V7 of {'Idris.Core.Value.NDelayed', E65, E66, E67} -> (fun (V604, V605, V606) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V602, V605)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V603, V606)); 0 -> fun (V607) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E65, E66, E67)); _ -> case V7 of {'Idris.Core.Value.NErased', E63, E64} -> (fun (V608, V609) -> fun (V610) -> {'Idris.Prelude.Types.Right', 1} end end(E63, E64)); _ -> fun (V611) -> case V6 of {'Idris.Core.Value.NType', E61} -> (fun (V612) -> case V7 of {'Idris.Core.Value.NType', E62} -> (fun (V613) -> {'Idris.Prelude.Types.Right', 1} end(E62)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E61)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E58, E59, E60)); {'Idris.Core.Value.NDelay', E68, E69, E70, E71} -> (fun (V614, V615, V616, V617) -> case V7 of {'Idris.Core.Value.NDelay', E76, E77, E78, E79} -> (fun (V618, V619, V620, V621) -> fun (V622) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V615, V619)) of 1 -> begin (V623 = case V615 of 1 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V4, V622)) end), case V623 of {'Idris.Prelude.Types.Left', E80} -> (fun (V624) -> {'Idris.Prelude.Types.Left', V624} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V625) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V625, V5, V617, V621, V622)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76, E77, E78, E79)); _ -> case V7 of {'Idris.Core.Value.NErased', E74, E75} -> (fun (V626, V627) -> fun (V628) -> {'Idris.Prelude.Types.Right', 1} end end(E74, E75)); _ -> fun (V629) -> case V6 of {'Idris.Core.Value.NType', E72} -> (fun (V630) -> case V7 of {'Idris.Core.Value.NType', E73} -> (fun (V631) -> {'Idris.Prelude.Types.Right', 1} end(E73)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E72)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E68, E69, E70, E71)); {'Idris.Core.Value.NForce', E82, E83, E84, E85} -> (fun (V632, V633, V634, V635) -> case V7 of {'Idris.Core.Value.NForce', E90, E91, E92, E93} -> (fun (V636, V637, V638, V639) -> fun (V640) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V633, V637)) of 1 -> begin (V641 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V634, V638))(V640))), case V641 of {'Idris.Prelude.Types.Left', E94} -> (fun (V642) -> {'Idris.Prelude.Types.Left', V642} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V643) -> case V643 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V644) -> ('Idris.Idris2.Builtin':'un--snd'(V644)) end, V635)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V645) -> ('Idris.Idris2.Builtin':'un--snd'(V645)) end, V639)), V640)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90, E91, E92, E93)); _ -> case V7 of {'Idris.Core.Value.NErased', E88, E89} -> (fun (V646, V647) -> fun (V648) -> {'Idris.Prelude.Types.Right', 1} end end(E88, E89)); _ -> fun (V649) -> case V6 of {'Idris.Core.Value.NType', E86} -> (fun (V650) -> case V7 of {'Idris.Core.Value.NType', E87} -> (fun (V651) -> {'Idris.Prelude.Types.Right', 1} end(E87)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E86)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E82, E83, E84, E85)); {'Idris.Core.Value.NPrimVal', E96, E97} -> (fun (V652, V653) -> case V7 of {'Idris.Core.Value.NPrimVal', E102, E103} -> (fun (V654, V655) -> fun (V656) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V653, V655))} end end(E102, E103)); _ -> case V7 of {'Idris.Core.Value.NErased', E100, E101} -> (fun (V657, V658) -> fun (V659) -> {'Idris.Prelude.Types.Right', 1} end end(E100, E101)); _ -> fun (V660) -> case V6 of {'Idris.Core.Value.NType', E98} -> (fun (V661) -> case V7 of {'Idris.Core.Value.NType', E99} -> (fun (V662) -> {'Idris.Prelude.Types.Right', 1} end(E99)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E98)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E96, E97)); {'Idris.Core.Value.NErased', E104, E105} -> (fun (V663, V664) -> fun (V665) -> {'Idris.Prelude.Types.Right', 1} end end(E104, E105)); _ -> case V7 of {'Idris.Core.Value.NErased', E2, E3} -> (fun (V666, V667) -> fun (V668) -> {'Idris.Prelude.Types.Right', 1} end end(E2, E3)); _ -> fun (V669) -> case V6 of {'Idris.Core.Value.NType', E0} -> (fun (V670) -> case V7 of {'Idris.Core.Value.NType', E1} -> (fun (V671) -> {'Idris.Prelude.Types.Right', 1} end(E1)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end.
'dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V6))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V7))(V8))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V11, V14))(V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_Convert_Term'() -> {'Idris.Core.Normalise.Convert.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--convert_Convert_Term'(V0, V1, V2, V3, V4, V5, V6)) end end end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--convertInf_Convert_Term'(V7, V8, V9, V10, V11, V12, V13)) end end end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--convGen_Convert_Term'(V14, V15, V16, V17, V18, V19, V20, V21, V22)) end end end end end end end end end}.
'dn--un--__Impl_Convert_NF'() -> {'Idris.Core.Normalise.Convert.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--convert_Convert_NF'(V0, V1, V2, V3, V4, V5, V6)) end end end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--convertInf_Convert_NF'(V7, V8, V9, V10, V11, V12, V13)) end end end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--convGen_Convert_NF'(V14, V15, V16, V17, V18, V19, V20, V21)) end end end end end end end end}.
'dn--un--__Impl_Convert_Closure'() -> {'Idris.Core.Normalise.Convert.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--convert_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6)) end end end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--convertInf_Convert_Closure'(V7, V8, V9, V10, V11, V12, V13)) end end end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--convGen_Convert_Closure'(V14, V15, V16, V17, V18, V19, V20, V21, V22)) end end end end end end end end end}.
'un--tryUpdate'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7351-2049--in--un--findIdx'(V0, V1, V6, V5, V4, V2, V2, V6)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Local', V4, V5, V7})) end)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Ref', V8, V9, V10})) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V17, V18)) end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V23, V24)) end end end end}, fun (V25) -> ('un--tryUpdate'(V0, V1, V2, V25)) end, V14)), fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Meta', V11, V12, V13, V26})) end)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--7351-2218--in--un--tryUpdateB'(V0, V1, V28, V30, V29, V27, V2, V29)), fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'([V28 | V0], [V28 | V1], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V32) -> ('nested--7351-2219--in--un--weakenP'(V0, V1, V28, V30, V29, V27, V2, V28, V32)) end, V2)), V30)), fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Bind', V27, V28, V31, V33})) end)) end)) end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V35)), fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V36)), fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.App', V34, V37, V38})) end)) end)) end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V39, V40, V41, V42) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V41)), fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V42)), fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.As', V39, V40, V43, V44})) end)) end)) end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V47)), fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TDelayed', V45, V46, V48})) end)) end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V49, V50, V51, V52) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V51)), fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V52)), fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TDelay', V49, V50, V53, V54})) end)) end)) end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V55, V56, V57) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V57)), fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TForce', V55, V56, V58})) end)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V59, V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.PrimVal', V59, V60})) end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V61, V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Erased', V61, V62})) end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TType', V63})) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quickConv'(V0, V1) -> case V0 of [] -> case V1 of [] -> 1; _ -> 0 end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> case ('nested--7896-2737--in--un--quickConvArg'(V2, V3, V4, V5, V2, V4)) of 1 -> ('un--quickConv'(V3, V5)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--getMatchingVars'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V6 of {'Idris.Core.CaseTree.Case', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> fun (V15) -> ('un--getMatchingVarAlts'(V0, V1, V2, V3, [{'Idris.Builtin.MkPair', V8, V12} | V4], V10, V14, V15)) end end(E4, E5, E6, E7)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V17, V18) -> case V6 of {'Idris.Core.CaseTree.STerm', E10, E11} -> (fun (V19, V20) -> fun (V21) -> ('case--getMatchingVars-3694'(V1, V2, V18, V17, V20, V19, V4, V3, V0, ('un--tryUpdate'(V1, V2, V4, V18)), V21)) end end(E10, E11)); _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E8, E9)); {'Idris.Core.CaseTree.Unmatched', E12} -> (fun (V23) -> fun (V24) -> case V6 of {'Idris.Core.CaseTree.Unmatched', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}} end(E13)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E12)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> fun (V26) -> case V6 of {'Idris.Core.CaseTree.Impossible'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end()); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--getMatchingVarAlts'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> case V6 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V8, V9) -> case V6 of [E2 | E3] -> (fun (V10, V11) -> begin (V12 = (('un--getMatchingVarAlt'(V0, V1, V2, V3, V4, V8, V10))(V7))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Just', E6} -> (fun (V15) -> ('un--getMatchingVarAlts'(V0, V1, V2, V3, V15, V9, V11, V7)) end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end.
'un--getMatchingVarAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V6 of {'Idris.Core.CaseTree.ConCase', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V11)) of 1 -> fun (V15) -> ('case--case block in getMatchingVarAlt-3294'(V1, V2, V9, V10, V8, V7, V13, V14, V12, V11, V4, V3, V0, ('nested--7904-3070--in--un--extend'(V1, V2, V9, V10, V8, V7, V13, V14, V12, V11, V4, V3, V0, V9, V13, V4)), V15)) end; 0 -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.ConstCase', E8, E9} -> (fun (V18, V19) -> case V6 of {'Idris.Core.CaseTree.ConstCase', E10, E11} -> (fun (V20, V21) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V18, V20)) of 1 -> ('un--getMatchingVars'(V0, V1, V2, V3, V4, V19, V21)); 0 -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E8, E9)); {'Idris.Core.CaseTree.DefaultCase', E12} -> (fun (V24) -> case V6 of {'Idris.Core.CaseTree.DefaultCase', E13} -> (fun (V25) -> ('un--getMatchingVars'(V0, V1, V2, V3, V4, V24, V25)) end(E13)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E12)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--convertInf'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.Convert.dn--un--__mkConvert', E0, E1, E2} -> (fun (V6, V7, V8) -> fun (V9) -> ((((((V7(V1))(V2))(V3))(V4))(V5))(V9)) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--convert'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.Convert.dn--un--__mkConvert', E0, E1, E2} -> (fun (V6, V7, V8) -> fun (V9) -> ((((((V6(V1))(V2))(V3))(V4))(V5))(V9)) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--convGen'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.Convert.dn--un--__mkConvert', E0, E1, E2} -> (fun (V6, V7, V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ((((((((V8(V1))(V2))(V3))(V4))(V5))(V9))(V10))(V11)) end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--convBinders'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> fun (V16) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V9, V13)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, V11, V15, V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> fun (V17) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V7)))) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--binderType'(V6)), ('Idris.Idris2.Core.TT':'un--binderType'(V7)), V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Lam', E8, E9, E10, E11} -> (fun (V18, V19, V20, V21) -> case V7 of {'Idris.Core.TT.Lam', E12, E13, E14, E15} -> (fun (V22, V23, V24, V25) -> fun (V26) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V23)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, V21, V25, V26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13, E14, E15)); _ -> fun (V27) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V7)))) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--binderType'(V6)), ('Idris.Idris2.Core.TT':'un--binderType'(V7)), V27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10, E11)); _ -> fun (V28) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V6)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V7)))) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.TT':'un--binderType'(V6)), ('Idris.Idris2.Core.TT':'un--binderType'(V7)), V28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--chkSameDefs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V6, case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V41 of {'Idris.Prelude.Types.Left', E30} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E32} -> (fun (V44) -> case V44 of {'Idris.Core.Context.Context.PMDef', E33, E34, E35, E36, E37} -> (fun (V45, V46, V47, V48, V49) -> begin (V80 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V7, case V4 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79) -> V50 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V80 of {'Idris.Prelude.Types.Left', E68} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V82) -> case V82 of {'Idris.Prelude.Types.Just', E70} -> (fun (V83) -> case V83 of {'Idris.Core.Context.Context.PMDef', E71, E72, E73, E74, E75} -> (fun (V84, V85, V86, V87, V88) -> begin (V89 = (('un--getMatchingVars'(V0, V46, V85, V4, [], V47, V86))(V10))), case V89 of {'Idris.Prelude.Types.Left', E76} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V91) -> case V91 of {'Idris.Prelude.Types.Just', E78} -> (fun (V92) -> (('nested--7925-3849--in--un--convertMatches'(V1, V9, V8, V7, V6, V5, V4, V3, V2, V0, V46, V85, V92))(V10)) end(E78)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71, E72, E73, E74, E75)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E70)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34, E35, E36, E37)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E32)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--chkConvHead'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NLocal', E0, E1} -> (fun (V8, V9) -> fun (V10) -> case V7 of {'Idris.Core.Value.NLocal', E2, E3} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V9, V12))} end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); {'Idris.Core.Value.NRef', E4, E5} -> (fun (V13, V14) -> fun (V15) -> case V7 of {'Idris.Core.Value.NRef', E6, E7} -> (fun (V16, V17) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V17))} end(E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E4, E5)); {'Idris.Core.Value.NMeta', E8, E9, E10} -> (fun (V18, V19, V20) -> case V7 of {'Idris.Core.Value.NMeta', E11, E12, E13} -> (fun (V21, V22, V23) -> fun (V24) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V19, V22)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V5, V20, V23, V24)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end end end(E8, E9, E10)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--chkConvCaseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of {'Idris.Core.Value.NRef', E0, E1} -> (fun (V12, V13) -> case V9 of {'Idris.Core.Value.NRef', E2, E3} -> (fun (V14, V15) -> begin (V46 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V5 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13, V11))), case V46 of {'Idris.Prelude.Types.Left', E34} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V48) -> case V48 of {'Idris.Core.Name.NS', E36, E37} -> (fun (V49, V50) -> case V50 of {'Idris.Core.Name.CaseBlock', E38, E39} -> (fun (V51, V52) -> begin (V83 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V5 of {'Idris.Core.Context.MkDefs', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V53 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, V11))), case V83 of {'Idris.Prelude.Types.Left', E70} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V85) -> case V85 of {'Idris.Core.Name.NS', E72, E73} -> (fun (V86, V87) -> case V87 of {'Idris.Core.Name.CaseBlock', E74, E75} -> (fun (V88, V89) -> begin (V90 = ('un--chkSameDefs'(V0, V1, V3, V4, V5, V6, V13, V15, V8, V10, V11))), case V90 of {'Idris.Prelude.Types.Left', E76} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V92) -> case V92 of 0 -> begin (V123 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V13, case V5 of {'Idris.Core.Context.MkDefs', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V93 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V123 of {'Idris.Prelude.Types.Left', E108} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V125) -> case V125 of {'Idris.Prelude.Types.Just', E110} -> (fun (V126) -> begin (V157 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V15, case V5 of {'Idris.Core.Context.MkDefs', E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140} -> (fun (V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156) -> V127 end(E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V157 of {'Idris.Prelude.Types.Left', E141} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V159) -> case V159 of {'Idris.Prelude.Types.Just', E143} -> (fun (V160) -> case V126 of {'Idris.Core.Context.Context.MkGlobalDef', E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163} -> (fun (V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180) -> case V178 of {'Idris.Core.Context.Context.PMDef', E164, E165, E166, E167, E168} -> (fun (V181, V182, V183, V184, V185) -> case V160 of {'Idris.Core.Context.Context.MkGlobalDef', E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188} -> (fun (V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205) -> case V203 of {'Idris.Core.Context.Context.PMDef', E189, E190, E191, E192, E193} -> (fun (V206, V207, V208, V209, V210) -> case ('nested--7931-4355--in--un--findArgPos'(V1, V14, V12, V13, V15, V10, V8, V6, V5, V4, V3, V2, V0, V183)) of {'Idris.Prelude.Types.Just', E194} -> (fun (V211) -> case ('nested--7931-4355--in--un--findArgPos'(V1, V14, V12, V13, V15, V10, V8, V6, V5, V4, V3, V2, V0, V208)) of {'Idris.Prelude.Types.Just', E195} -> (fun (V212) -> case ('nested--7931-4356--in--un--getScrutinee'(V1, V14, V12, V13, V15, V10, V8, V6, V5, V4, V3, V2, V0, V211, V8)) of {'Idris.Prelude.Types.Just', E196} -> (fun (V213) -> case ('nested--7931-4356--in--un--getScrutinee'(V1, V14, V12, V13, V15, V10, V8, V6, V5, V4, V3, V2, V0, V212, V10)) of {'Idris.Prelude.Types.Just', E197} -> (fun (V214) -> begin (V219 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V215) -> case V215 of {'Idris.Prelude.Types.Left', E198} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E198)); {'Idris.Prelude.Types.Right', E199} -> (fun (V217) -> {'Idris.Prelude.Types.Right', 0} end(E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V218) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V3, V4, V5, V6, V213, V214, V218)) end, V11))), case V219 of {'Idris.Prelude.Types.Left', E200} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E200)); {'Idris.Prelude.Types.Right', E201} -> (fun (V221) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.FC':'dn--un--==_Eq_FC'(case V126 of {'Idris.Core.Context.Context.MkGlobalDef', E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221} -> (fun (V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241) -> V222 end(E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V160 of {'Idris.Core.Context.Context.MkGlobalDef', E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241} -> (fun (V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261) -> V242 end(E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E197)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E196)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E195)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E194)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E189, E190, E191, E192, E193)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E164, E165, E166, E167, E168)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E143)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74, E75)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E72, E73)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E36, E37)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--allConvNF'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of [] -> case V7 of [] -> {'Idris.Prelude.Types.Right', 1}; _ -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V9, V10) -> case V7 of [E2 | E3] -> (fun (V11, V12) -> begin (V13 = ('un--allConvNF'(V0, V1, V2, V3, V4, V5, V10, V12, V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> case V15 of 1 -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V9, V11))(V8)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--allConv'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V9)) end, V6, [], V8))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V13) -> ('Idris.Idris2.Core.Normalise.Eval':'un--evalClosure'(V0, V1, V4, V13)) end, V7, [], V8))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> case ('un--quickConv'(V12, V16)) of 1 -> ('un--allConvNF'(V0, V1, V2, V3, V4, V5, V12, V16, V8)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
