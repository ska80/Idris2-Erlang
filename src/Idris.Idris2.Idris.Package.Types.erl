-module('Idris.Idris2.Idris.Package.Types').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--show,upperBounds-1273'/2,
  'case--show,lowerBounds-1234'/2,
  'nested--5842-3196--in--un--verField'/3,
  'nested--3822-1228--in--un--upperBounds'/1,
  'nested--5842-3197--in--un--strField'/3,
  'nested--5842-3198--in--un--seqField'/4,
  'nested--3822-1226--in--un--noBounds'/1,
  'nested--3822-1227--in--un--lowerBounds'/1,
  'nested--5842-3195--in--un--field'/3,
  'nested--5842-3194--in--un--comment'/2,
  'dn--un--show_Show_PkgVersionBounds'/1,
  'dn--un--show_Show_PkgVersion'/1,
  'dn--un--show_Show_PkgDesc'/1,
  'dn--un--show_Show_Depends'/1,
  'dn--un--showPrec_Show_PkgVersionBounds'/2,
  'dn--un--showPrec_Show_PkgVersion'/2,
  'dn--un--showPrec_Show_PkgDesc'/2,
  'dn--un--showPrec_Show_Depends'/2,
  'dn--un--pretty_Pretty_PkgVersion'/1,
  'dn--un--pretty_Pretty_PkgDesc'/1,
  'dn--un--pretty_Pretty_Depends'/1,
  'dn--un--prettyPrec_Pretty_PkgVersion'/2,
  'dn--un--prettyPrec_Pretty_PkgDesc'/2,
  'dn--un--prettyPrec_Pretty_Depends'/2,
  'dn--un--min_Ord_PkgVersion'/2,
  'dn--un--max_Ord_PkgVersion'/2,
  'dn--un--compare_Ord_PkgVersion'/2,
  'dn--un--__Impl_Show_PkgVersionBounds'/0,
  'dn--un--__Impl_Show_PkgVersion'/0,
  'dn--un--__Impl_Show_PkgDesc'/0,
  'dn--un--__Impl_Show_Depends'/0,
  'dn--un--__Impl_Pretty_PkgVersion'/0,
  'dn--un--__Impl_Pretty_PkgDesc'/0,
  'dn--un--__Impl_Pretty_Depends'/0,
  'dn--un--__Impl_Ord_PkgVersion'/0,
  'dn--un--__Impl_Eq_PkgVersion'/0,
  'dn--un-->_Ord_PkgVersion'/2,
  'dn--un-->=_Ord_PkgVersion'/2,
  'dn--un--==_Eq_PkgVersion'/2,
  'dn--un--<_Ord_PkgVersion'/2,
  'dn--un--<=_Ord_PkgVersion'/2,
  'dn--un--/=_Eq_PkgVersion'/2,
  'un--initPkgDesc'/1,
  'un--inBounds'/2,
  'un--current'/0,
  'un--cssFiles'/0,
  'un--anyBounds'/0
]).
'case--show,upperBounds-1273'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<""/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case case V0 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E1, E2, E3, E4} -> (fun (V3, V4, V5, V6) -> V6 end(E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<"<= "/utf8>>; 0 -> <<"< "/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('dn--un--show_Show_PkgVersion'(V2)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--show,lowerBounds-1234'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<""/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case case V0 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E1, E2, E3, E4} -> (fun (V3, V4, V5, V6) -> V4 end(E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<">= "/utf8>>; 0 -> <<"> "/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PkgVersion'(V2)), <<" "/utf8>>)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5842-3196--in--un--verField'(V0, V1, V2) -> ('nested--5842-3195--in--un--field'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V3) -> ('dn--un--pretty_Pretty_PkgVersion'(V3)) end, V2)))).
'nested--3822-1228--in--un--upperBounds'(V0) -> ('case--show,upperBounds-1273'(V0, case V0 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--5842-3197--in--un--strField'(V0, V1, V2) -> ('nested--5842-3195--in--un--field'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3)))) end, V2)))).
'nested--5842-3198--in--un--seqField'(V0, V1, V2, V3) -> case V3 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"--"/utf8>>)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V2)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()) | []]]])); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V2)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--align'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--sep'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--punctuate'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> case V1 of {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', E0, E1} -> (fun (V5, V6) -> ((V5('erased'))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)))))))))))) end.
'nested--3822-1226--in--un--noBounds'(V0) -> case ('Idris.Idris2.Data.Maybe':'un--isNothing'(case V0 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E4, E5, E6, E7} -> (fun (V1, V2, V3, V4) -> V1 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Data.Maybe':'un--isNothing'(case V0 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> V7 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3822-1227--in--un--lowerBounds'(V0) -> ('case--show,lowerBounds-1234'(V0, case V0 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--5842-3195--in--un--field'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"--"/utf8>>)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V1)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()) | []]]])) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V1)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()) | [V3 | []]]])) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--5842-3194--in--un--comment'(V0, V1) -> begin (V2 = [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"--"/utf8>>)) | ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--words'(V1))]), begin (V3 = {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Union', fun () -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Chara', $ } end, fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hcat'([{'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'} | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"-- "/utf8>>)) | []]])) end}), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'({'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'(fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(V4, V3)), V5)) end end, V2)))) end end.
'dn--un--show_Show_PkgVersionBounds'(V0) -> case ('nested--3822-1226--in--un--noBounds'(V0)) of 1 -> <<"any"/utf8>>; 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--3822-1227--in--un--lowerBounds'(V0)), ('nested--3822-1228--in--un--upperBounds'(V0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_PkgVersion'(V0) -> ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1)) end, ('Idris.Idris2.Data.List1':'un--forget'(V0)))))).
'dn--un--show_Show_PkgDesc'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Package: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V1 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V26) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Version: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V26, <<"\x{a}"/utf8>>)))) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V29, V30)) end end end end, fun (V31) -> ('dn--un--show_Show_PkgVersion'(V31)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V33 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V57) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Authors: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V57, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V60 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V83) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Maintainers: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V83, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V87 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V109) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"License: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V109, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> V114 end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V135) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Brief: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V135, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160) -> V141 end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V161) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ReadMe: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V161, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174} -> (fun (V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186) -> V168 end(E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V187) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"HomePage: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V187, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199} -> (fun (V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212) -> V195 end(E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V213) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"SourceLoc: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V213, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224} -> (fun (V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238) -> V222 end(E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V239) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"BugTracker: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V239, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249} -> (fun (V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264) -> V249 end(E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Depends: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V265) -> ('dn--un--show_Show_Depends'(V265)) end, fun (V266) -> fun (V267) -> ('dn--un--showPrec_Show_Depends'(V266, V267)) end end}, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274} -> (fun (V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292) -> V278 end(E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Modules: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V293) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V293)) end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V294, V295)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V296) -> ('Idris.Idris2.Builtin':'un--snd'(V296)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299} -> (fun (V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321) -> V308 end(E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V322) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Main: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V322)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324} -> (fun (V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347) -> V335 end(E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V348) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Exec: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V348, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349} -> (fun (V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373) -> V362 end(E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V374) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Library: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V374, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374} -> (fun (V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399) -> V389 end(E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V400) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Opts: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V400)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399} -> (fun (V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425) -> V416 end(E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V426) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"SourceDir: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V426, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424} -> (fun (V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451) -> V443 end(E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V452) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"BuildDir: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V452, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449} -> (fun (V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477) -> V470 end(E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V478) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OutputDir: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V478, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474} -> (fun (V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503) -> V497 end(E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V504) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Prebuild: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V504)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499} -> (fun (V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529) -> V524 end(E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V530) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postbuild: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V530)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524} -> (fun (V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555) -> V551 end(E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V556) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Preinstall: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V556)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549} -> (fun (V557, V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581) -> V578 end(E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V582) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postinstall: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V582)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574} -> (fun (V583, V584, V585, V586, V587, V588, V589, V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607) -> V605 end(E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V608) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Preclean: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V608)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599} -> (fun (V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633) -> V632 end(E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V634) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postclean: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'(V634)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624} -> (fun (V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652, V653, V654, V655, V656, V657, V658, V659) -> V659 end(E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
'dn--un--show_Show_Depends'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.Package.Types.MkDepends', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('dn--un--show_Show_PkgVersionBounds'(case V0 of {'Idris.Idris.Package.Types.MkDepends', E2, E3} -> (fun (V3, V4) -> V4 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'dn--un--showPrec_Show_PkgVersionBounds'(V0, V1) -> ('dn--un--show_Show_PkgVersionBounds'(V1)).
'dn--un--showPrec_Show_PkgVersion'(V0, V1) -> ('dn--un--show_Show_PkgVersion'(V1)).
'dn--un--showPrec_Show_PkgDesc'(V0, V1) -> ('dn--un--show_Show_PkgDesc'(V1)).
'dn--un--showPrec_Show_Depends'(V0, V1) -> ('dn--un--show_Show_Depends'(V1)).
'dn--un--pretty_Pretty_PkgVersion'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('dn--un--show_Show_PkgVersion'(V0)))).
'dn--un--pretty_Pretty_PkgDesc'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"package"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V1 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3196--in--un--verField'(V0, <<"version"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V27 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"authors"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V53 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"maintainers"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V79 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"license"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V105 end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"brief"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150) -> V131 end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"readme"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174} -> (fun (V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175) -> V157 end(E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"homepage"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199} -> (fun (V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200) -> V183 end(E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"sourceloc"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224} -> (fun (V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225) -> V209 end(E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"bugtracker"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249} -> (fun (V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250) -> V235 end(E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3194--in--un--comment'(V0, <<"packages to add to search path"/utf8>>)) | [('nested--5842-3198--in--un--seqField'(V0, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V251) -> fun (V252) -> ('dn--un--pretty_Pretty_Depends'(V252)) end end, fun (V253) -> fun (V254) -> fun (V255) -> ('dn--un--prettyPrec_Pretty_Depends'(V254, V255)) end end end}, <<"depends"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274} -> (fun (V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280) -> V266 end(E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3194--in--un--comment'(V0, <<"modules to install"/utf8>>)) | [('nested--5842-3198--in--un--seqField'(V0, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V281) -> fun (V282) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_ModuleIdent'(V282)) end end, fun (V283) -> fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--prettyPrec_Pretty_ModuleIdent'(V284, V285)) end end end}, <<"modules"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V288, V289)) end end end end, fun (V290) -> ('Idris.Idris2.Builtin':'un--fst'(V290)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299} -> (fun (V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315) -> V302 end(E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3194--in--un--comment'(V0, <<"main file (i.e. file to load at REPL)"/utf8>>)) | [('nested--5842-3195--in--un--field'(V0, <<"main"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V316) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_ModuleIdent'(('Idris.Idris2.Builtin':'un--fst'(V316)))) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324} -> (fun (V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341) -> V329 end(E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3194--in--un--comment'(V0, <<"name of executable"/utf8>>)) | [('nested--5842-3197--in--un--strField'(V0, <<"executable"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349} -> (fun (V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366) -> V355 end(E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"opts"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V367) -> fun (V368) -> fun (V369) -> fun (V370) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V369, V370)) end end end end, fun (V371) -> ('Idris.Idris2.Builtin':'un--snd'(V371)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374} -> (fun (V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396) -> V387 end(E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3197--in--un--strField'(V0, <<"sourcedir"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399} -> (fun (V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421) -> V413 end(E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"builddir"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424} -> (fun (V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446) -> V439 end(E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3197--in--un--strField'(V0, <<"outputdir"/utf8>>, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449} -> (fun (V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471) -> V465 end(E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | [('nested--5842-3194--in--un--comment'(V0, <<"script to run before building"/utf8>>)) | [('nested--5842-3197--in--un--strField'(V0, <<"prebuild"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V472) -> fun (V473) -> fun (V474) -> fun (V475) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V474, V475)) end end end end, fun (V476) -> ('Idris.Idris2.Builtin':'un--snd'(V476)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474} -> (fun (V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501) -> V496 end(E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3194--in--un--comment'(V0, <<"script to run after building"/utf8>>)) | [('nested--5842-3197--in--un--strField'(V0, <<"postbuild"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V502) -> fun (V503) -> fun (V504) -> fun (V505) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V504, V505)) end end end end, fun (V506) -> ('Idris.Idris2.Builtin':'un--snd'(V506)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499} -> (fun (V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531) -> V527 end(E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3194--in--un--comment'(V0, <<"script to run after building, before installing"/utf8>>)) | [('nested--5842-3197--in--un--strField'(V0, <<"preinstall"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V532) -> fun (V533) -> fun (V534) -> fun (V535) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V534, V535)) end end end end, fun (V536) -> ('Idris.Idris2.Builtin':'un--snd'(V536)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524} -> (fun (V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561) -> V558 end(E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3194--in--un--comment'(V0, <<"script to run after installing"/utf8>>)) | [('nested--5842-3197--in--un--strField'(V0, <<"postinstall"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V562) -> fun (V563) -> fun (V564) -> fun (V565) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V564, V565)) end end end end, fun (V566) -> ('Idris.Idris2.Builtin':'un--snd'(V566)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549} -> (fun (V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589, V590, V591) -> V589 end(E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3194--in--un--comment'(V0, <<"script to run before cleaning"/utf8>>)) | [('nested--5842-3197--in--un--strField'(V0, <<"preclean"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V592) -> fun (V593) -> fun (V594) -> fun (V595) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V594, V595)) end end end end, fun (V596) -> ('Idris.Idris2.Builtin':'un--snd'(V596)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574} -> (fun (V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621) -> V620 end(E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | [('nested--5842-3194--in--un--comment'(V0, <<"script to run after cleaning"/utf8>>)) | [('nested--5842-3197--in--un--strField'(V0, <<"postclean"/utf8>>, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V622) -> fun (V623) -> fun (V624) -> fun (V625) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V624, V625)) end end end end, fun (V626) -> ('Idris.Idris2.Builtin':'un--snd'(V626)) end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599} -> (fun (V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651) -> V651 end(E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) | []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])).
'dn--un--pretty_Pretty_Depends'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('dn--un--show_Show_Depends'(V0)))).
'dn--un--prettyPrec_Pretty_PkgVersion'(V0, V1) -> ('dn--un--pretty_Pretty_PkgVersion'(V1)).
'dn--un--prettyPrec_Pretty_PkgDesc'(V0, V1) -> ('dn--un--pretty_Pretty_PkgDesc'(V1)).
'dn--un--prettyPrec_Pretty_Depends'(V0, V1) -> ('dn--un--pretty_Pretty_Depends'(V1)).
'dn--un--min_Ord_PkgVersion'(V0, V1) -> case ('dn--un--<_Ord_PkgVersion'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--max_Ord_PkgVersion'(V0, V1) -> case ('dn--un-->_Ord_PkgVersion'(V0, V1)) of 1 -> V0; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Data.List1':'dn--un--compare_Ord_(List1 $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V4, V5)) end end}, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_Nat'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->=_Ord_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--min_Ord_Nat'(V18, V19)) end end}, V0, V1)).
'dn--un--__Impl_Show_PkgVersionBounds'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgVersionBounds'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgVersionBounds'(V1, V2)) end end}.
'dn--un--__Impl_Show_PkgVersion'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgVersion'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgVersion'(V1, V2)) end end}.
'dn--un--__Impl_Show_PkgDesc'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PkgDesc'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgDesc'(V1, V2)) end end}.
'dn--un--__Impl_Show_Depends'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Depends'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Depends'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_PkgVersion'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_PkgVersion'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_PkgVersion'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_PkgDesc'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_PkgDesc'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_PkgDesc'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_Depends'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_Depends'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_Depends'(V3, V4)) end end end}.
'dn--un--__Impl_Ord_PkgVersion'() -> {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PkgVersion'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PkgVersion'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_PkgVersion'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_PkgVersion'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_PkgVersion'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_PkgVersion'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_PkgVersion'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_PkgVersion'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_PkgVersion'(V16, V17)) end end}.
'dn--un--__Impl_Eq_PkgVersion'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_PkgVersion'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_PkgVersion'(V2, V3)) end end}.
'dn--un-->_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 2)).
'dn--un-->=_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 0)).
'dn--un--==_Eq_PkgVersion'(V0, V1) -> ('Idris.Idris2.Data.List1':'dn--un--==_Eq_(List1 $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V4, V5)) end end}, V0, V1)).
'dn--un--<_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 0)).
'dn--un--<=_Ord_PkgVersion'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_PkgVersion'(V0, V1)), 2)).
'dn--un--/=_Eq_PkgVersion'(V0, V1) -> case ('dn--un--==_Eq_PkgVersion'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--initPkgDesc'(V0) -> {'Idris.Idris.Package.Types.MkPkgDesc', V0, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, [], [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}.
'un--inBounds'(V0, V1) -> begin (V2 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Data.List1.:::', 0, []} end, V0))), case ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 1 end, fun () -> fun (V3) -> case case V1 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E8, E9, E10, E11} -> (fun (V4, V5, V6, V7) -> V5 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('dn--un-->=_Ord_PkgVersion'(V2, V3)); 0 -> ('dn--un-->_Ord_PkgVersion'(V2, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V1 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E12, E13, E14, E15} -> (fun (V8, V9, V10, V11) -> V8 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 1 end, fun () -> fun (V12) -> case case V1 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E0, E1, E2, E3} -> (fun (V13, V14, V15, V16) -> V16 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('dn--un--<=_Ord_PkgVersion'(V2, V12)); 0 -> ('dn--un--<_Ord_PkgVersion'(V2, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V1 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E4, E5, E6, E7} -> (fun (V17, V18, V19, V20) -> V19 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--current'() -> case ('Idris.Idris2.Idris.Version':'un--version'()) of {'Idris.Libraries.Data.Version.MkVersion', E0, E1} -> (fun (V0, V1) -> case V0 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V4, V5) -> begin (V6 = {'Idris.Prelude.Types.Just', {'Idris.Data.List1.:::', V2, [V4 | [V5 | []]]}}), {'Idris.Idris.Package.Types.MkPkgVersionBounds', V6, 1, V6, 1} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cssFiles'() -> [{'Idris.Idris.Package.Types.MkCSS', <<"Default"/utf8>>, <<"default"/utf8>>} | [{'Idris.Idris.Package.Types.MkCSS', <<"Alternative"/utf8>>, <<"alternative"/utf8>>} | [{'Idris.Idris.Package.Types.MkCSS', <<"Black & White"/utf8>>, <<"blackandwhite"/utf8>>} | []]]].
'un--anyBounds'() -> {'Idris.Idris.Package.Types.MkPkgVersionBounds', {'Idris.Prelude.Types.Nothing'}, 1, {'Idris.Prelude.Types.Nothing'}, 1}.
