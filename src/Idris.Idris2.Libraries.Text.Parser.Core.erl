-module('Idris.Idris2.Libraries.Text.Parser.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--doParse-3937'/7,
  'case--doParse-3618'/9,
  'case--doParse-3502'/10,
  'case--case block in case block in doParse-3258'/13,
  'case--doParse-3140'/10,
  'case--doParse-2769'/7,
  'case--doParse-2670'/7,
  'dn--un--map_Functor_(((Grammar $state) $tok) $c)'/3,
  'dn--un--__Impl_Functor_(((Grammar $state) $tok) $c)'/5,
  'un--withWarning'/3,
  'un--try'/1,
  'un--terminal'/2,
  'un--seq'/4,
  'un--pure'/1,
  'un--position'/0,
  'un--peek'/0,
  'un--parseWith'/4,
  'un--parse'/3,
  'un--nextIs'/2,
  'un--mustWorkBecause'/4,
  'un--mustWork'/2,
  'un--mergeWith'/2,
  'un--mapToken'/2,
  'un--join'/3,
  'un--fatalLoc'/2,
  'un--fatalError'/1,
  'un--failLoc'/2,
  'un--fail'/1,
  'un--eof'/0,
  'un--doParse'/6,
  'un--commit'/0,
  'un--bounds'/1,
  'un--act'/1,
  'un--ParsingWarnings'/0,
  'un-->>='/4,
  'un-->>'/4,
  'un--<||>'/4,
  'un--<|>'/4,
  'un--<*>'/4,
  'un--<*'/4,
  'un--*>'/4
]).
'case--doParse-3937'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V7, V8, V9) -> {'Idris.Libraries.Text.Parser.Core.Failure', V7, V8, V9} end(E0, E1, E2)); {'Idris.Libraries.Text.Parser.Core.Res', E3, E4, E5, E6, E7} -> (fun (V10, V11, V12, V13, V14) -> {'Idris.Libraries.Text.Parser.Core.Res', V10, V11, V12, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V17, V18)) end end end end, fun (V19) -> V13 end, V13)), V14} end(E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-3618'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V9, V10, V11) -> {'Idris.Libraries.Text.Parser.Core.Failure', V9, V10, V11} end(E0, E1, E2)); {'Idris.Libraries.Text.Parser.Core.Res', E3, E4, E5, E6, E7} -> (fun (V12, V13, V14, V15, V16) -> ('un--mergeWith'(V15, ('un--doParse'(V0, V12, V13, V14, ((V3())(case V15 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V17, V18, V19) -> V17 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V16)))) end(E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-3502'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V10, V11, V12) -> {'Idris.Libraries.Text.Parser.Core.Failure', V10, V11, V12} end(E0, E1, E2)); {'Idris.Libraries.Text.Parser.Core.Res', E3, E4, E5, E6, E7} -> (fun (V13, V14, V15, V16, V17) -> ('un--mergeWith'(V16, ('un--doParse'(V0, V13, V14, V15, (V4(case V16 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V18, V19, V20) -> V18 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V17)))) end(E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in doParse-3258'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V13, V14, V15) -> case case V13 of 1 -> 1; 0 -> V14; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Libraries.Text.Parser.Core.Failure', V13, V14, V15}; 0 -> {'Idris.Libraries.Text.Parser.Core.Failure', 0, 0, ('Idris.Idris2.Data.List1':'un--++'(V8, V15))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Libraries.Text.Parser.Core.Res', E3, E4, E5, E6, E7} -> (fun (V16, V17, V18, V19, V20) -> {'Idris.Libraries.Text.Parser.Core.Res', V16, V17, V6, V19, V20} end(E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-3140'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V10, V11, V12) -> case case V10 of 1 -> 1; 0 -> V11; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Libraries.Text.Parser.Core.Failure', V7, V11, V12}; 0 -> ('case--case block in case block in doParse-3258'(V0, V2, V3, V4, V5, V6, V7, V8, V12, V11, V10, V1, ('un--doParse'(V0, V1, V8, 0, (V3()), V6)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Libraries.Text.Parser.Core.Res', E3, E4, E5, E6, E7} -> (fun (V13, V14, V15, V16, V17) -> {'Idris.Libraries.Text.Parser.Core.Res', V13, V14, V7, V16, V17} end(E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2769'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V7, V8, V9) -> {'Idris.Libraries.Text.Parser.Core.Failure', V7, 1, V9} end(E0, E1, E2)); _ -> V6 end.
'case--doParse-2670'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V7, V8, V9) -> {'Idris.Libraries.Text.Parser.Core.Failure', V7, 0, V9} end(E0, E1, E2)); _ -> V6 end.
'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V2) -> case V0 of 0 -> case V2 of {'Idris.Libraries.Text.Parser.Core.Empty', E178} -> (fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V3))} end(E178)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.Fail', E173, E174, E175} -> (fun (V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.Fail', V4, V5, V6} end(E173, E174, E175)); {'Idris.Libraries.Text.Parser.Core.Try', E176} -> (fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Try', ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V7))} end(E176)); {'Idris.Libraries.Text.Parser.Core.MustWork', E177} -> (fun (V8) -> {'Idris.Libraries.Text.Parser.Core.MustWork', ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V8))} end(E177)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.Terminal', E171, E172} -> (fun (V9, V10) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V9, fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V1, (V10(V11)))) end} end(E171, E172)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.Alt', E167, E168, E169, E170} -> (fun (V12, V13, V14, V15) -> {'Idris.Libraries.Text.Parser.Core.Alt', V12, V13, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V12, V1, V14)), fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V13, V1, (V15()))) end} end(E167, E168, E169, E170)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E164, E165, E166} -> (fun (V16, V17, V18) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V16, V17, fun () -> fun (V19) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V16, V1, ((V18())(V19)))) end end} end(E164, E165, E166)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E160, E161, E162, E163} -> (fun (V20, V21, V22, V23) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V20, V21, V22, fun (V24) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V21, V1, (V23(V24)))) end} end(E160, E161, E162, E163)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E157, E158, E159} -> (fun (V25, V26, V27) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V25, V26, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V25, V1, (V27()))) end} end(E157, E158, E159)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E152, E153, E154, E155} -> (fun (V28, V29, V30, V31) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V28, V29, V30, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V29, V1, V31))} end(E152, E153, E154, E155)); {'Idris.Libraries.Text.Parser.Core.Bounds', E156} -> (fun (V32) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V32}, fun (V33) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V33))} end} end(E156)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V34) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V34))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E147, E148, E149, E150} -> (fun (V35, V36, V37, V38) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V35, V36, V37, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V36, V1, V38))} end(E147, E148, E149, E150)); {'Idris.Libraries.Text.Parser.Core.Bounds', E151} -> (fun (V39) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V39}, fun (V40) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V40))} end} end(E151)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V41) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V41))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E143, E144, E145, E146} -> (fun (V42, V43, V44, V45) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V42, V43, V44, fun (V46) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V43, V1, (V45(V46)))) end} end(E143, E144, E145, E146)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E140, E141, E142} -> (fun (V47, V48, V49) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V47, V48, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V47, V1, (V49()))) end} end(E140, E141, E142)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E135, E136, E137, E138} -> (fun (V50, V51, V52, V53) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V50, V51, V52, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V51, V1, V53))} end(E135, E136, E137, E138)); {'Idris.Libraries.Text.Parser.Core.Bounds', E139} -> (fun (V54) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V54}, fun (V55) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V55))} end} end(E139)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V56) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V56))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E130, E131, E132, E133} -> (fun (V57, V58, V59, V60) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V57, V58, V59, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V58, V1, V60))} end(E130, E131, E132, E133)); {'Idris.Libraries.Text.Parser.Core.Bounds', E134} -> (fun (V61) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V61}, fun (V62) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V62))} end} end(E134)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V63) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V63))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.Alt', E126, E127, E128, E129} -> (fun (V64, V65, V66, V67) -> {'Idris.Libraries.Text.Parser.Core.Alt', V64, V65, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V64, V1, V66)), fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V65, V1, (V67()))) end} end(E126, E127, E128, E129)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E123, E124, E125} -> (fun (V68, V69, V70) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V68, V69, fun () -> fun (V71) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V68, V1, ((V70())(V71)))) end end} end(E123, E124, E125)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E119, E120, E121, E122} -> (fun (V72, V73, V74, V75) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V72, V73, V74, fun (V76) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V73, V1, (V75(V76)))) end} end(E119, E120, E121, E122)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E116, E117, E118} -> (fun (V77, V78, V79) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V77, V78, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V77, V1, (V79()))) end} end(E116, E117, E118)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E111, E112, E113, E114} -> (fun (V80, V81, V82, V83) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V80, V81, V82, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V81, V1, V83))} end(E111, E112, E113, E114)); {'Idris.Libraries.Text.Parser.Core.Bounds', E115} -> (fun (V84) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V84}, fun (V85) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V85))} end} end(E115)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V86) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V86))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E106, E107, E108, E109} -> (fun (V87, V88, V89, V90) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V87, V88, V89, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V88, V1, V90))} end(E106, E107, E108, E109)); {'Idris.Libraries.Text.Parser.Core.Bounds', E110} -> (fun (V91) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V91}, fun (V92) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V92))} end} end(E110)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V93) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V93))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E102, E103, E104, E105} -> (fun (V94, V95, V96, V97) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V94, V95, V96, fun (V98) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V95, V1, (V97(V98)))) end} end(E102, E103, E104, E105)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E99, E100, E101} -> (fun (V99, V100, V101) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V99, V100, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V99, V1, (V101()))) end} end(E99, E100, E101)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E94, E95, E96, E97} -> (fun (V102, V103, V104, V105) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V102, V103, V104, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V103, V1, V105))} end(E94, E95, E96, E97)); {'Idris.Libraries.Text.Parser.Core.Bounds', E98} -> (fun (V106) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V106}, fun (V107) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V107))} end} end(E98)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V108) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V108))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E89, E90, E91, E92} -> (fun (V109, V110, V111, V112) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V109, V110, V111, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V110, V1, V112))} end(E89, E90, E91, E92)); {'Idris.Libraries.Text.Parser.Core.Bounds', E93} -> (fun (V113) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V113}, fun (V114) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V114))} end} end(E93)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V115) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V115))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.Fail', E84, E85, E86} -> (fun (V116, V117, V118) -> {'Idris.Libraries.Text.Parser.Core.Fail', V116, V117, V118} end(E84, E85, E86)); {'Idris.Libraries.Text.Parser.Core.Try', E87} -> (fun (V119) -> {'Idris.Libraries.Text.Parser.Core.Try', ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V119))} end(E87)); {'Idris.Libraries.Text.Parser.Core.MustWork', E88} -> (fun (V120) -> {'Idris.Libraries.Text.Parser.Core.MustWork', ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V120))} end(E88)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.Terminal', E82, E83} -> (fun (V121, V122) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V121, fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V1, (V122(V123)))) end} end(E82, E83)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.Alt', E78, E79, E80, E81} -> (fun (V124, V125, V126, V127) -> {'Idris.Libraries.Text.Parser.Core.Alt', V124, V125, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V124, V1, V126)), fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V125, V1, (V127()))) end} end(E78, E79, E80, E81)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E75, E76, E77} -> (fun (V128, V129, V130) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V128, V129, fun () -> fun (V131) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V128, V1, ((V130())(V131)))) end end} end(E75, E76, E77)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E71, E72, E73, E74} -> (fun (V132, V133, V134, V135) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V132, V133, V134, fun (V136) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V133, V1, (V135(V136)))) end} end(E71, E72, E73, E74)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E68, E69, E70} -> (fun (V137, V138, V139) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V137, V138, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V137, V1, (V139()))) end} end(E68, E69, E70)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E63, E64, E65, E66} -> (fun (V140, V141, V142, V143) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V140, V141, V142, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V141, V1, V143))} end(E63, E64, E65, E66)); {'Idris.Libraries.Text.Parser.Core.Bounds', E67} -> (fun (V144) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V144}, fun (V145) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V145))} end} end(E67)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V146) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V146))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E58, E59, E60, E61} -> (fun (V147, V148, V149, V150) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V147, V148, V149, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V148, V1, V150))} end(E58, E59, E60, E61)); {'Idris.Libraries.Text.Parser.Core.Bounds', E62} -> (fun (V151) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V151}, fun (V152) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V152))} end} end(E62)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V153) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V153))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E54, E55, E56, E57} -> (fun (V154, V155, V156, V157) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V154, V155, V156, fun (V158) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V155, V1, (V157(V158)))) end} end(E54, E55, E56, E57)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E51, E52, E53} -> (fun (V159, V160, V161) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V159, V160, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V159, V1, (V161()))) end} end(E51, E52, E53)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E46, E47, E48, E49} -> (fun (V162, V163, V164, V165) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V162, V163, V164, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V163, V1, V165))} end(E46, E47, E48, E49)); {'Idris.Libraries.Text.Parser.Core.Bounds', E50} -> (fun (V166) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V166}, fun (V167) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V167))} end} end(E50)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V168) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V168))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E41, E42, E43, E44} -> (fun (V169, V170, V171, V172) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V169, V170, V171, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V170, V1, V172))} end(E41, E42, E43, E44)); {'Idris.Libraries.Text.Parser.Core.Bounds', E45} -> (fun (V173) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V173}, fun (V174) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V174))} end} end(E45)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V175) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V175))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.Alt', E37, E38, E39, E40} -> (fun (V176, V177, V178, V179) -> {'Idris.Libraries.Text.Parser.Core.Alt', V176, V177, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V176, V1, V178)), fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V177, V1, (V179()))) end} end(E37, E38, E39, E40)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E34, E35, E36} -> (fun (V180, V181, V182) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V180, V181, fun () -> fun (V183) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V180, V1, ((V182())(V183)))) end end} end(E34, E35, E36)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E30, E31, E32, E33} -> (fun (V184, V185, V186, V187) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V184, V185, V186, fun (V188) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V185, V1, (V187(V188)))) end} end(E30, E31, E32, E33)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E27, E28, E29} -> (fun (V189, V190, V191) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V189, V190, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V189, V1, (V191()))) end} end(E27, E28, E29)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E22, E23, E24, E25} -> (fun (V192, V193, V194, V195) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V192, V193, V194, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V193, V1, V195))} end(E22, E23, E24, E25)); {'Idris.Libraries.Text.Parser.Core.Bounds', E26} -> (fun (V196) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V196}, fun (V197) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V197))} end} end(E26)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V198) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V198))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E17, E18, E19, E20} -> (fun (V199, V200, V201, V202) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V199, V200, V201, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V200, V1, V202))} end(E17, E18, E19, E20)); {'Idris.Libraries.Text.Parser.Core.Bounds', E21} -> (fun (V203) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V203}, fun (V204) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V204))} end} end(E21)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V205) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V205))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E13, E14, E15, E16} -> (fun (V206, V207, V208, V209) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V206, V207, V208, fun (V210) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V207, V1, (V209(V210)))) end} end(E13, E14, E15, E16)); _ -> case V0 of 1 -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E10, E11, E12} -> (fun (V211, V212, V213) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V211, V212, fun () -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V211, V1, (V213()))) end} end(E10, E11, E12)); _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E5, E6, E7, E8} -> (fun (V214, V215, V216, V217) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V214, V215, V216, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V215, V1, V217))} end(E5, E6, E7, E8)); {'Idris.Libraries.Text.Parser.Core.Bounds', E9} -> (fun (V218) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V218}, fun (V219) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V219))} end} end(E9)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V220) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V220))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V2 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E0, E1, E2, E3} -> (fun (V221, V222, V223, V224) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V221, V222, V223, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V222, V1, V224))} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Bounds', E4} -> (fun (V225) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V225}, fun (V226) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V226))} end} end(E4)); _ -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, V2, fun (V227) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V1(V227))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end.
'dn--un--__Impl_Functor_(((Grammar $state) $tok) $c)'(V0, V1, V2, V3, V4) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V3, V4)).
'un--withWarning'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, 0, {'Idris.Libraries.Text.Parser.Core.Bounds', V2}, fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.Warning', {'Idris.Prelude.Types.Just', case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V4, V5, V6) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V1}, {'Idris.Libraries.Text.Parser.Core.Empty', case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E3, E4, E5} -> (fun (V7, V8, V9) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end}.
'un--try'(V0) -> {'Idris.Libraries.Text.Parser.Core.Try', V0}.
'un--terminal'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V0, V1}.
'un--seq'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, V1, V2, V3}.
'un--pure'(V0) -> {'Idris.Libraries.Text.Parser.Core.Empty', V0}.
'un--position'() -> {'Idris.Libraries.Text.Parser.Core.Position'}.
'un--peek'() -> {'Idris.Libraries.Text.Parser.Core.NextIs', <<"Unrecognised token"/utf8>>, fun (V0) -> 1 end}.
'un--parseWith'(V0, V1, V2, V3) -> case ('un--doParse'(case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E11, E12} -> (fun (V4, V5) -> V4 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E13, E14} -> (fun (V6, V7) -> V7 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], 0, V2, V3)) of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V8, V9, V10) -> {'Idris.Prelude.Types.Left', V10} end(E0, E1, E2)); {'Idris.Libraries.Text.Parser.Core.Res', E3, E4, E5, E6, E7} -> (fun (V11, V12, V13, V14, V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', case V14 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V16, V17, V18) -> V16 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15}}}} end(E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--parse'(V0, V1, V2) -> case ('un--doParse'(fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_(|Unit,MkUnit|)'(V3, V4)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_(|Unit,MkUnit|)'()), [], 0, V1, V2)) of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2} -> (fun (V5, V6, V7) -> {'Idris.Prelude.Types.Left', V7} end(E0, E1, E2)); {'Idris.Libraries.Text.Parser.Core.Res', E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E8, E9, E10} -> (fun (V13, V14, V15) -> V13 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12}}} end(E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nextIs'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.NextIs', V0, V1}.
'un--mustWorkBecause'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Alt', V0, V0, V3, fun () -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Just', V1}, 1, V2} end}.
'un--mustWork'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.MustWork', V1}.
'un--mergeWith'(V0, V1) -> case V1 of {'Idris.Libraries.Text.Parser.Core.Res', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.Res', V2, V3, V4, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'(V0, V5)), V6} end(E0, E1, E2, E3, E4)); _ -> V1 end.
'un--mapToken'(V0, V1) -> case V1 of {'Idris.Libraries.Text.Parser.Core.Empty', E0} -> (fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', V2} end(E0)); {'Idris.Libraries.Text.Parser.Core.Terminal', E1, E2} -> (fun (V3, V4) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V3, fun (V5) -> (V4((V0(V5)))) end} end(E1, E2)); {'Idris.Libraries.Text.Parser.Core.NextIs', E3, E4} -> (fun (V6, V7) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, {'Idris.Libraries.Text.Parser.Core.NextIs', V6, fun (V8) -> (V7((V0(V8)))) end}, fun (V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V0(V9))} end} end(E3, E4)); {'Idris.Libraries.Text.Parser.Core.EOF'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.EOF'} end()); {'Idris.Libraries.Text.Parser.Core.Warning', E5, E6} -> (fun (V10, V11) -> {'Idris.Libraries.Text.Parser.Core.Warning', V10, V11} end(E5, E6)); {'Idris.Libraries.Text.Parser.Core.Fail', E7, E8, E9} -> (fun (V12, V13, V14) -> {'Idris.Libraries.Text.Parser.Core.Fail', V12, V13, V14} end(E7, E8, E9)); {'Idris.Libraries.Text.Parser.Core.Try', E10} -> (fun (V15) -> {'Idris.Libraries.Text.Parser.Core.Try', ('un--mapToken'(V0, V15))} end(E10)); {'Idris.Libraries.Text.Parser.Core.MustWork', E11} -> (fun (V16) -> {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--mapToken'(V0, V16))} end(E11)); {'Idris.Libraries.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Commit'} end()); {'Idris.Libraries.Text.Parser.Core.SeqEat', E12, E13, E14} -> (fun (V17, V18, V19) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V17, ('un--mapToken'(V0, V18)), fun () -> fun (V20) -> ('un--mapToken'(V0, ((V19())(V20)))) end end} end(E12, E13, E14)); {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E15, E16, E17, E18} -> (fun (V21, V22, V23, V24) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V21, V22, ('un--mapToken'(V0, V23)), fun (V25) -> ('un--mapToken'(V0, (V24(V25)))) end} end(E15, E16, E17, E18)); {'Idris.Libraries.Text.Parser.Core.ThenEat', E19, E20, E21} -> (fun (V26, V27, V28) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V26, ('un--mapToken'(V0, V27)), fun () -> ('un--mapToken'(V0, (V28()))) end} end(E19, E20, E21)); {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E22, E23, E24, E25} -> (fun (V29, V30, V31, V32) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V29, V30, ('un--mapToken'(V0, V31)), ('un--mapToken'(V0, V32))} end(E22, E23, E24, E25)); {'Idris.Libraries.Text.Parser.Core.Alt', E26, E27, E28, E29} -> (fun (V33, V34, V35, V36) -> {'Idris.Libraries.Text.Parser.Core.Alt', V33, V34, ('un--mapToken'(V0, V35)), fun () -> ('un--mapToken'(V0, (V36()))) end} end(E26, E27, E28, E29)); {'Idris.Libraries.Text.Parser.Core.Bounds', E30} -> (fun (V37) -> {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--mapToken'(V0, V37))} end(E30)); {'Idris.Libraries.Text.Parser.Core.Position'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Position'} end()); {'Idris.Libraries.Text.Parser.Core.Act', E31} -> (fun (V38) -> {'Idris.Libraries.Text.Parser.Core.Act', V38} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--join'(V0, V1, V2) -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, V1, V2, fun (V3) -> V3 end}; 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V1, V2, fun () -> fun (V4) -> V4 end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fatalLoc'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Just', V0}, 1, V1}.
'un--fatalError'(V0) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, V0}.
'un--failLoc'(V0, V1) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Just', V0}, 0, V1}.
'un--fail'(V0) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, V0}.
'un--eof'() -> {'Idris.Libraries.Text.Parser.Core.EOF'}.
'un--doParse'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Libraries.Text.Parser.Core.Empty', E0} -> (fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(V6)), V5} end(E0)); {'Idris.Libraries.Text.Parser.Core.Warning', E1, E2} -> (fun (V7, V8) -> {'Idris.Libraries.Text.Parser.Core.Res', V1, [{'Idris.Builtin.MkPair', V7, V8} | V2], V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(0)), V5} end(E1, E2)); {'Idris.Libraries.Text.Parser.Core.Fail', E3, E4, E5} -> (fun (V9, V10, V11) -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, V10, {'Idris.Data.List1.:::', {'Idris.Libraries.Text.Parser.Core.Error', V11, ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V9, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V14, V15)) end end end end, fun (V16) -> case V16 of {'Idris.Libraries.Text.Bounded.MkBounded', E6, E7, E8} -> (fun (V17, V18, V19) -> V19 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Data.List':'un--head\x{27}'(V5)))) end))}, []}} end(E3, E4, E5)); {'Idris.Libraries.Text.Parser.Core.Try', E9} -> (fun (V20) -> ('case--doParse-2670'(V0, V1, V20, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V20, V5)))) end(E9)); {'Idris.Libraries.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Res', V1, V2, 1, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(0)), V5} end()); {'Idris.Libraries.Text.Parser.Core.MustWork', E10} -> (fun (V21) -> ('case--doParse-2769'(V0, V1, V21, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V21, V5)))) end(E10)); {'Idris.Libraries.Text.Parser.Core.Terminal', E11, E12} -> (fun (V22, V23) -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 0, {'Idris.Data.List1.:::', {'Idris.Libraries.Text.Parser.Core.Error', <<"End of input"/utf8>>, {'Idris.Prelude.Types.Nothing'}}, []}}; [E13 | E14] -> (fun (V24, V25) -> case (V23(case V24 of {'Idris.Libraries.Text.Bounded.MkBounded', E19, E20, E21} -> (fun (V26, V27, V28) -> V26 end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 0, {'Idris.Data.List1.:::', {'Idris.Libraries.Text.Parser.Core.Error', V22, {'Idris.Prelude.Types.Just', case V24 of {'Idris.Libraries.Text.Bounded.MkBounded', E15, E16, E17} -> (fun (V29, V30, V31) -> V31 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}, []}} end()); {'Idris.Prelude.Types.Just', E18} -> (fun (V32) -> {'Idris.Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'(V35, V36)) end end end end, fun (V37) -> V32 end, V24)), V25} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); {'Idris.Libraries.Text.Parser.Core.EOF'} -> (fun () -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(0)), []}; [E22 | E23] -> (fun (V38, V39) -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 0, {'Idris.Data.List1.:::', {'Idris.Libraries.Text.Parser.Core.Error', <<"Expected end of input"/utf8>>, {'Idris.Prelude.Types.Just', case V38 of {'Idris.Libraries.Text.Bounded.MkBounded', E24, E25, E26} -> (fun (V40, V41, V42) -> V42 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}, []}} end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Libraries.Text.Parser.Core.NextIs', E27, E28} -> (fun (V43, V44) -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 0, {'Idris.Data.List1.:::', {'Idris.Libraries.Text.Parser.Core.Error', <<"End of input"/utf8>>, {'Idris.Prelude.Types.Nothing'}}, []}}; [E29 | E30] -> (fun (V45, V46) -> case (V44(case V45 of {'Idris.Libraries.Text.Bounded.MkBounded', E34, E35, E36} -> (fun (V47, V48, V49) -> V47 end(E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--removeIrrelevance'(V45)), [V45 | V46]}; 0 -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 0, {'Idris.Data.List1.:::', {'Idris.Libraries.Text.Parser.Core.Error', V43, {'Idris.Prelude.Types.Just', case V45 of {'Idris.Libraries.Text.Bounded.MkBounded', E31, E32, E33} -> (fun (V50, V51, V52) -> V52 end(E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}, []}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28)); {'Idris.Libraries.Text.Parser.Core.Alt', E37, E38, E39, E40} -> (fun (V53, V54, V55, V56) -> ('case--doParse-3140'(V0, V1, V54, V56, V53, V55, V5, V3, V2, ('un--doParse'(V0, V1, V2, 0, V55, V5)))) end(E37, E38, E39, E40)); {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E41, E42, E43, E44} -> (fun (V57, V58, V59, V60) -> ('case--doParse-3502'(V0, V57, V58, V1, V60, V59, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V59, V5)))) end(E41, E42, E43, E44)); {'Idris.Libraries.Text.Parser.Core.SeqEat', E45, E46, E47} -> (fun (V61, V62, V63) -> ('case--doParse-3618'(V0, V61, V1, V63, V62, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V62, V5)))) end(E45, E46, E47)); {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E48, E49, E50, E51} -> (fun (V64, V65, V66, V67) -> case ('un--doParse'(V0, V1, V2, V3, V66, V5)) of {'Idris.Libraries.Text.Parser.Core.Failure', E52, E53, E54} -> (fun (V68, V69, V70) -> {'Idris.Libraries.Text.Parser.Core.Failure', V68, V69, V70} end(E52, E53, E54)); {'Idris.Libraries.Text.Parser.Core.Res', E55, E56, E57, E58, E59} -> (fun (V71, V72, V73, V74, V75) -> ('un--mergeWith'(V74, ('un--doParse'(V0, V71, V72, V73, V67, V75)))) end(E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48, E49, E50, E51)); {'Idris.Libraries.Text.Parser.Core.ThenEat', E60, E61, E62} -> (fun (V76, V77, V78) -> case ('un--doParse'(V0, V1, V2, V3, V77, V5)) of {'Idris.Libraries.Text.Parser.Core.Failure', E63, E64, E65} -> (fun (V79, V80, V81) -> {'Idris.Libraries.Text.Parser.Core.Failure', V79, V80, V81} end(E63, E64, E65)); {'Idris.Libraries.Text.Parser.Core.Res', E66, E67, E68, E69, E70} -> (fun (V82, V83, V84, V85, V86) -> ('un--mergeWith'(V85, ('un--doParse'(V0, V82, V83, V84, (V78()), V86)))) end(E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60, E61, E62)); {'Idris.Libraries.Text.Parser.Core.Bounds', E71} -> (fun (V87) -> ('case--doParse-3937'(V0, V1, V87, V5, V3, V2, ('un--doParse'(V0, V1, V2, V3, V87, V5)))) end(E71)); {'Idris.Libraries.Text.Parser.Core.Position'} -> (fun () -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 0, {'Idris.Data.List1.:::', {'Idris.Libraries.Text.Parser.Core.Error', <<"End of input"/utf8>>, {'Idris.Prelude.Types.Nothing'}}, []}}; [E72 | E73] -> (fun (V88, V89) -> {'Idris.Libraries.Text.Parser.Core.Res', V1, V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(case V88 of {'Idris.Libraries.Text.Bounded.MkBounded', E74, E75, E76} -> (fun (V90, V91, V92) -> V92 end(E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [V88 | V89]} end(E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Libraries.Text.Parser.Core.Act', E77} -> (fun (V93) -> {'Idris.Libraries.Text.Parser.Core.Res', ((V0(V1))(V93)), V2, V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'(0)), V5} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commit'() -> {'Idris.Libraries.Text.Parser.Core.Commit'}.
'un--bounds'(V0) -> {'Idris.Libraries.Text.Parser.Core.Bounds', V0}.
'un--act'(V0) -> {'Idris.Libraries.Text.Parser.Core.Act', V0}.
'un--ParsingWarnings'() -> {'Idris.Prelude.Basics.List', {'Idris.Builtin.Pair', {'Idris.Prelude.Types.Maybe', {'Idris.Libraries.Text.Bounded.Bounds'}}, {'Idris.String'}}}.
'un-->>='(V0, V1, V2, V3) -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, V1, V2, V3}; 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V1, V2, V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un-->>'(V0, V1, V2, V3) -> case V0 of 0 -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, V1, V2, V3}; 1 -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V1, V2, V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--<||>'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Alt', V0, V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, V6, V7)) end end end end, fun (V8) -> {'Idris.Prelude.Types.Left', V8} end, V2)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V11, V12)) end end end end, fun (V13) -> {'Idris.Prelude.Types.Right', V13} end, (V3()))) end}.
'un--<|>'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Alt', V0, V1, V2, V3}.
'un--<*>'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, V1, V2, fun (V4) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V4, V3)) end}.
'un--<*'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, V1, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, fun (V4) -> fun (V5) -> V4 end end, V2)), fun (V6) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V6, V3)) end}.
'un--*>'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V0, V1, ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V0, fun (V4) -> fun (V5) -> V5 end end, V2)), fun (V6) -> ('dn--un--map_Functor_(((Grammar $state) $tok) $c)'(V1, V6, V3)) end}.
