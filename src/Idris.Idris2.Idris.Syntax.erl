-module('Idris.Idris2.Idris.Syntax').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8727-1275--in--un--showDirective'/1,
  'nested--10582-2702--in--un--showCase'/6,
  'nested--10582-2635--in--un--showAlt'/10,
  'nested--8725-1183--in--un--ph'/0,
  'nested--13234-4811--in--un--insertAll'/6,
  'nested--13233-4770--in--un--insertAll'/6,
  'nested--13444-4952--in--un--initSaveDocStrings'/0,
  'nested--13444-4950--in--un--initPrefix'/0,
  'nested--13444-4949--in--un--initInfix'/0,
  'nested--13444-4951--in--un--initDocStrings'/0,
  'nested--13525-5043--in--un--goPiInfo'/3,
  'nested--13525-5047--in--un--goPairedPTerms'/3,
  'nested--13525-5059--in--un--goPTypeDecls'/3,
  'nested--13525-5040--in--un--goPTypeDecl'/3,
  'nested--13525-5046--in--un--goPTerms'/3,
  'nested--13525-5034--in--un--goPTerm'/2,
  'nested--13525-5051--in--un--goPStrings'/3,
  'nested--13525-5050--in--un--goPStringLines'/3,
  'nested--13525-5036--in--un--goPStr'/3,
  'nested--13525-5058--in--un--goPFnOpts'/3,
  'nested--13525-5044--in--un--goPFnOpt'/3,
  'nested--13525-5057--in--un--goPFields'/3,
  'nested--13525-5056--in--un--goPFieldUpdates'/3,
  'nested--13525-5035--in--un--goPFieldUpdate'/3,
  'nested--13525-5042--in--un--goPField'/3,
  'nested--13525-5052--in--un--goPDos'/3,
  'nested--13525-5037--in--un--goPDo'/3,
  'nested--13525-5055--in--un--goPDecls'/3,
  'nested--13525-5039--in--un--goPDecl'/3,
  'nested--13525-5041--in--un--goPDataDecl'/3,
  'nested--13525-5053--in--un--goPClauses'/3,
  'nested--13525-5038--in--un--goPClause'/3,
  'nested--13525-5045--in--un--goMPTerm'/3,
  'nested--13525-5054--in--un--goMPDecls'/3,
  'nested--13525-5049--in--un--go4TupledPTerms'/2,
  'nested--13525-5048--in--un--go3TupledPTerms'/2,
  'nested--10005-1742--in--un--getName'/6,
  'nested--10582-3418--in--un--dePure'/6,
  'nested--10582-3419--in--un--deGuard'/6,
  'dn--un--toBuf_TTC_SyntaxInfo'/3,
  'dn--un--toBuf_TTC_Method'/3,
  'dn--un--toBuf_TTC_IFaceInfo'/3,
  'dn--un--toBuf_TTC_Fixity'/3,
  'dn--un--show_Show_REPLOpt'/1,
  'dn--un--show_Show_REPLEval'/1,
  'dn--un--show_Show_PTerm'/1,
  'dn--un--show_Show_Method'/1,
  'dn--un--show_Show_IPTerm'/1,
  'dn--un--show_Show_Fixity'/1,
  'dn--un--showPrec_Show_REPLOpt'/2,
  'dn--un--showPrec_Show_REPLEval'/2,
  'dn--un--showPrec_Show_PTerm'/2,
  'dn--un--showPrec_Show_Method'/2,
  'dn--un--showPrec_Show_IPTerm'/2,
  'dn--un--showPrec_Show_Fixity'/2,
  'dn--un--resolved_HasNames_SyntaxInfo'/3,
  'dn--un--resolved_HasNames_IFaceInfo'/3,
  'dn--un--resolved_HasNames_(ANameMap $a)'/3,
  'dn--un--pretty_Pretty_REPLOpt'/1,
  'dn--un--pretty_Pretty_REPLEval'/1,
  'dn--un--prettyPrec_Pretty_REPLOpt'/2,
  'dn--un--prettyPrec_Pretty_REPLEval'/2,
  'dn--un--full_HasNames_SyntaxInfo'/3,
  'dn--un--full_HasNames_IFaceInfo'/3,
  'dn--un--full_HasNames_(ANameMap $a)'/3,
  'dn--un--fromBuf_TTC_SyntaxInfo'/2,
  'dn--un--fromBuf_TTC_Method'/2,
  'dn--un--fromBuf_TTC_IFaceInfo'/2,
  'dn--un--fromBuf_TTC_Fixity'/2,
  'dn--un--__Impl_TTC_SyntaxInfo'/0,
  'dn--un--__Impl_TTC_Method'/0,
  'dn--un--__Impl_TTC_IFaceInfo'/0,
  'dn--un--__Impl_TTC_Fixity'/0,
  'dn--un--__Impl_Show_REPLOpt'/0,
  'dn--un--__Impl_Show_REPLEval'/0,
  'dn--un--__Impl_Show_PTerm'/0,
  'dn--un--__Impl_Show_Method'/0,
  'dn--un--__Impl_Show_IPTerm'/0,
  'dn--un--__Impl_Show_Fixity'/0,
  'dn--un--__Impl_Pretty_REPLOpt'/0,
  'dn--un--__Impl_Pretty_REPLEval'/0,
  'dn--un--__Impl_HasNames_SyntaxInfo'/0,
  'dn--un--__Impl_Eq_Pass'/0,
  'dn--un--==_Eq_Pass'/2,
  'dn--un--/=_Eq_Pass'/2,
  'un--withSyn'/3,
  'un--typePass'/1,
  'un--showUpdate'/2,
  'un--showPTermPrec'/3,
  'un--showPTerm'/2,
  'un--showPStr'/2,
  'un--showOpPrec'/3,
  'un--showDo'/2,
  'un--showAlt'/2,
  'un--pragmaTopics'/0,
  'un--papply'/3,
  'un--mapPTermM'/2,
  'un--isStrInterp'/1,
  'un--isPragma'/1,
  'un--isPDef'/1,
  'un--initSyntax'/0,
  'un--getPTypeDeclLoc'/1,
  'un--getPTermLoc'/1,
  'un--getPDeclLoc'/1,
  'un--getPDataDeclLoc'/1,
  'un--getPClauseLoc'/1,
  'un--getLoc'/1,
  'un--directiveList'/0,
  'un--definedInData'/1,
  'un--definedIn'/1,
  'un--defPass'/1,
  'un--applyArgs'/2,
  'un--PTypeDecl'/0,
  'un--PTerm'/0,
  'un--PStr'/0,
  'un--PFnOpt'/0,
  'un--PFieldUpdate'/0,
  'un--PField'/0,
  'un--PDo'/0,
  'un--PDecl'/0,
  'un--PDataDecl'/0,
  'un--PClause'/0,
  'un--OpStr\x{27}'/1,
  'un--OpStr'/0,
  'un--IPTerm'/0
]).
'nested--8727-1275--in--un--showDirective'(V0) -> case V0 of {'Idris.Idris.Syntax.Hide', E0} -> (fun (V1) -> <<"%hide name"/utf8>> end(E0)); {'Idris.Idris.Syntax.Logging', E1} -> (fun (V2) -> <<"%logging [topic] lvl"/utf8>> end(E1)); {'Idris.Idris.Syntax.LazyOn', E2} -> (fun (V3) -> <<"%auto_lazy on|off"/utf8>> end(E2)); {'Idris.Idris.Syntax.UnboundImplicits', E3} -> (fun (V4) -> <<"%unbound_implicits"/utf8>> end(E3)); {'Idris.Idris.Syntax.AmbigDepth', E4} -> (fun (V5) -> <<"%ambiguity_depth n"/utf8>> end(E4)); {'Idris.Idris.Syntax.PairNames', E5, E6, E7} -> (fun (V6, V7, V8) -> <<"%pair ty f s"/utf8>> end(E5, E6, E7)); {'Idris.Idris.Syntax.RewriteName', E8, E9} -> (fun (V9, V10) -> <<"%rewrite eq rw"/utf8>> end(E8, E9)); {'Idris.Idris.Syntax.PrimInteger', E10} -> (fun (V11) -> <<"%integerLit n"/utf8>> end(E10)); {'Idris.Idris.Syntax.PrimString', E11} -> (fun (V12) -> <<"%stringLit n"/utf8>> end(E11)); {'Idris.Idris.Syntax.PrimChar', E12} -> (fun (V13) -> <<"%charLit n"/utf8>> end(E12)); {'Idris.Idris.Syntax.PrimDouble', E13} -> (fun (V14) -> <<"%doubleLit n"/utf8>> end(E13)); {'Idris.Idris.Syntax.CGAction', E14, E15} -> (fun (V15, V16) -> <<"--directive d"/utf8>> end(E14, E15)); {'Idris.Idris.Syntax.Names', E16, E17} -> (fun (V17, V18) -> <<"%name ty ns"/utf8>> end(E16, E17)); {'Idris.Idris.Syntax.StartExpr', E18} -> (fun (V19) -> <<"%start expr"/utf8>> end(E18)); {'Idris.Idris.Syntax.Overloadable', E19} -> (fun (V20) -> <<"%allow_overloads"/utf8>> end(E19)); {'Idris.Idris.Syntax.Extension', E20} -> (fun (V21) -> <<"%language"/utf8>> end(E20)); {'Idris.Idris.Syntax.DefaultTotality', E21} -> (fun (V22) -> <<"%default partial|total|covering"/utf8>> end(E21)); {'Idris.Idris.Syntax.PrefixRecordProjections', E22} -> (fun (V23) -> <<"%prefix_record_projections on|off"/utf8>> end(E22)); {'Idris.Idris.Syntax.AutoImplicitDepth', E23} -> (fun (V24) -> <<"%auto_implicit_depth n"/utf8>> end(E23)); {'Idris.Idris.Syntax.NFMetavarThreshold', E24} -> (fun (V25) -> <<"%nf_metavar_threshold n"/utf8>> end(E24)); {'Idris.Idris.Syntax.SearchTimeout', E25} -> (fun (V26) -> <<"%search_timeout ms"/utf8>> end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10582-2702--in--un--showCase'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('un--showPTerm'(V0, V8)))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14, V15) -> <<" | <<with alts not possible>>"/utf8>> end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V17)), <<" impossible"/utf8>>)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10582-2635--in--un--showAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V12)), <<";"/utf8>>)))))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V14, V15, V16, V17, V18, V19) -> <<" | <<with alts not possible>>"/utf8>> end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V20, V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V21)), <<" impossible;"/utf8>>)))) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8725-1183--in--un--ph'() -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<""/utf8>>}}.
'nested--13234-4811--in--un--insertAll'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> {'Idris.Prelude.Types.Right', V3}; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V2, V8, V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V15 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E6, E7} -> (fun (V13, V14) -> (((V14(V2))(V9))(V5)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> ('nested--13234-4811--in--un--insertAll'(V0, V1, V2, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V12, V17, V3)), V7, V5)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13233-4770--in--un--insertAll'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> {'Idris.Prelude.Types.Right', V3}; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V2, V8, V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V15 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E6, E7} -> (fun (V13, V14) -> (((V13(V2))(V9))(V5)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> ('nested--13233-4770--in--un--insertAll'(V0, V1, V2, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V12, V17, V3)), V7, V5)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13444-4952--in--un--initSaveDocStrings'() -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()).
'nested--13444-4950--in--un--initPrefix'() -> ('Idris.Idris2.Libraries.Data.StringMap':'un--fromList'([{'Idris.Builtin.MkPair', <<"-"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))} | [{'Idris.Builtin.MkPair', <<"negate"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))} | []]])).
'nested--13444-4949--in--un--initInfix'() -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(<<"="/utf8>>, {'Idris.Builtin.MkPair', 2, 0}, ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()))).
'nested--13444-4951--in--un--initDocStrings'() -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()).
'nested--13525-5043--in--un--goPiInfo'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.DefImplicit', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V3)), V2)) end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'nested--13525-5047--in--un--goPairedPTerms'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', fun (V11) -> [{'Idris.Builtin.MkPair', V5, V10} | V11] end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V6)), V7)) end, fun (V12) -> ('nested--13525-5047--in--un--goPairedPTerms'(V0, V4, V12)) end, V2)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5059--in--un--goPTypeDecls'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5040--in--un--goPTypeDecl'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5059--in--un--goPTypeDecls'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5040--in--un--goPTypeDecl'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPTy', V3, V4, V5, V6, V10}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V7)), V2)) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5046--in--un--goPTerms'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V3)), V5)) end, fun (V10) -> ('nested--13525-5046--in--un--goPTerms'(V0, V4, V10)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5034--in--un--goPTerm'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> (V0(V1)) end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> fun (V10) -> begin (V22 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V11) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V12) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', fun (V17) -> fun (V18) -> fun (V19) -> {'Idris.Idris.Syntax.PPi', V4, V5, V16, V17, V18, V19} end end end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V20) -> ('nested--13525-5043--in--un--goPiInfo'(V0, V6, V20)) end, V13)) end, fun (V21) -> {'Idris.Prelude.Types.Right', V7} end, V12)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V8)), V11)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V9)), V10))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> ((V0(V24))(V10)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E12, E13, E14, E15, E16, E17} -> (fun (V25, V26, V27, V28, V29, V30) -> fun (V31) -> begin (V43 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V32) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V33) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V35) -> case V35 of {'Idris.Prelude.Types.Left', E18} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V37) -> {'Idris.Prelude.Types.Right', fun (V38) -> fun (V39) -> fun (V40) -> {'Idris.Idris.Syntax.PLam', V25, V26, V37, V38, V39, V40} end end end} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V41) -> ('nested--13525-5043--in--un--goPiInfo'(V0, V27, V41)) end, V34)) end, fun (V42) -> {'Idris.Prelude.Types.Right', V28} end, V33)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V29)), V32)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V30)), V31))), case V43 of {'Idris.Prelude.Types.Left', E20} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V45) -> ((V0(V45))(V31)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16, E17)); {'Idris.Idris.Syntax.PLet', E22, E23, E24, E25, E26, E27, E28} -> (fun (V46, V47, V48, V49, V50, V51, V52) -> fun (V53) -> begin (V66 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V54) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V55) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V56) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V58) -> case V58 of {'Idris.Prelude.Types.Left', E29} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V60) -> {'Idris.Prelude.Types.Right', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> {'Idris.Idris.Syntax.PLet', V46, V47, V60, V61, V62, V63, V64} end end end end} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V48)), V57)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V49)), V56)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V50)), V55)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V51)), V54)) end, fun (V65) -> ('nested--13525-5053--in--un--goPClauses'(V0, V52, V65)) end, V53))), case V66 of {'Idris.Prelude.Types.Left', E31} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V68) -> ((V0(V68))(V53)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23, E24, E25, E26, E27, E28)); {'Idris.Idris.Syntax.PCase', E33, E34, E35} -> (fun (V69, V70, V71) -> fun (V72) -> begin (V79 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V73) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V74) -> case V74 of {'Idris.Prelude.Types.Left', E36} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V76) -> {'Idris.Prelude.Types.Right', fun (V77) -> {'Idris.Idris.Syntax.PCase', V69, V76, V77} end} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V70)), V73)) end, fun (V78) -> ('nested--13525-5053--in--un--goPClauses'(V0, V71, V78)) end, V72))), case V79 of {'Idris.Prelude.Types.Left', E38} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V81) -> ((V0(V81))(V72)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33, E34, E35)); {'Idris.Idris.Syntax.PLocal', E40, E41, E42} -> (fun (V82, V83, V84) -> fun (V85) -> begin (V92 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V86) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V87) -> case V87 of {'Idris.Prelude.Types.Left', E43} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V89) -> {'Idris.Prelude.Types.Right', fun (V90) -> {'Idris.Idris.Syntax.PLocal', V82, V89, V90} end} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V91) -> ('nested--13525-5055--in--un--goPDecls'(V0, V83, V91)) end, V86)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V84)), V85))), case V92 of {'Idris.Prelude.Types.Left', E45} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V94) -> ((V0(V94))(V85)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42)); {'Idris.Idris.Syntax.PUpdate', E47, E48} -> (fun (V95, V96) -> fun (V97) -> begin (V102 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V98) -> case V98 of {'Idris.Prelude.Types.Left', E49} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUpdate', V95, V100}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V101) -> ('nested--13525-5056--in--un--goPFieldUpdates'(V0, V96, V101)) end, V97))), case V102 of {'Idris.Prelude.Types.Left', E51} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V104) -> ((V0(V104))(V97)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E47, E48)); {'Idris.Idris.Syntax.PApp', E53, E54, E55} -> (fun (V105, V106, V107) -> fun (V108) -> begin (V114 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V109) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V110) -> case V110 of {'Idris.Prelude.Types.Left', E56} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V112) -> {'Idris.Prelude.Types.Right', fun (V113) -> {'Idris.Idris.Syntax.PApp', V105, V112, V113} end} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V106)), V109)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V107)), V108))), case V114 of {'Idris.Prelude.Types.Left', E58} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V116) -> ((V0(V116))(V108)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54, E55)); {'Idris.Idris.Syntax.PWithApp', E60, E61, E62} -> (fun (V117, V118, V119) -> fun (V120) -> begin (V126 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V121) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V122) -> case V122 of {'Idris.Prelude.Types.Left', E63} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V124) -> {'Idris.Prelude.Types.Right', fun (V125) -> {'Idris.Idris.Syntax.PWithApp', V117, V124, V125} end} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V118)), V121)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V119)), V120))), case V126 of {'Idris.Prelude.Types.Left', E65} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V128) -> ((V0(V128))(V120)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60, E61, E62)); {'Idris.Idris.Syntax.PAutoApp', E67, E68, E69} -> (fun (V129, V130, V131) -> fun (V132) -> begin (V138 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V133) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V134) -> case V134 of {'Idris.Prelude.Types.Left', E70} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V136) -> {'Idris.Prelude.Types.Right', fun (V137) -> {'Idris.Idris.Syntax.PAutoApp', V129, V136, V137} end} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V130)), V133)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V131)), V132))), case V138 of {'Idris.Prelude.Types.Left', E72} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V140) -> ((V0(V140))(V132)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67, E68, E69)); {'Idris.Idris.Syntax.PNamedApp', E74, E75, E76, E77} -> (fun (V141, V142, V143, V144) -> fun (V145) -> begin (V154 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V146) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V147) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V148) -> case V148 of {'Idris.Prelude.Types.Left', E78} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V150) -> {'Idris.Prelude.Types.Right', fun (V151) -> fun (V152) -> {'Idris.Idris.Syntax.PNamedApp', V141, V150, V151, V152} end end} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V142)), V147)) end, fun (V153) -> {'Idris.Prelude.Types.Right', V143} end, V146)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V144)), V145))), case V154 of {'Idris.Prelude.Types.Left', E80} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V156) -> ((V0(V156))(V145)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74, E75, E76, E77)); {'Idris.Idris.Syntax.PDelayed', E82, E83, E84} -> (fun (V157, V158, V159) -> fun (V160) -> begin (V164 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V161) -> case V161 of {'Idris.Prelude.Types.Left', E85} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V163) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelayed', V157, V158, V163}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V159)), V160))), case V164 of {'Idris.Prelude.Types.Left', E87} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V166) -> ((V0(V166))(V160)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E82, E83, E84)); {'Idris.Idris.Syntax.PDelay', E89, E90} -> (fun (V167, V168) -> fun (V169) -> begin (V173 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V170) -> case V170 of {'Idris.Prelude.Types.Left', E91} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelay', V167, V172}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V168)), V169))), case V173 of {'Idris.Prelude.Types.Left', E93} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V175) -> ((V0(V175))(V169)) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89, E90)); {'Idris.Idris.Syntax.PForce', E95, E96} -> (fun (V176, V177) -> fun (V178) -> begin (V182 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V179) -> case V179 of {'Idris.Prelude.Types.Left', E97} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V181) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForce', V176, V181}} end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V177)), V178))), case V182 of {'Idris.Prelude.Types.Left', E99} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V184) -> ((V0(V184))(V178)) end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96)); {'Idris.Idris.Syntax.PSearch', E101, E102} -> (fun (V185, V186) -> (V0(V1)) end(E101, E102)); {'Idris.Idris.Syntax.PPrimVal', E103, E104} -> (fun (V187, V188) -> (V0(V1)) end(E103, E104)); {'Idris.Idris.Syntax.PQuote', E105, E106} -> (fun (V189, V190) -> fun (V191) -> begin (V195 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V192) -> case V192 of {'Idris.Prelude.Types.Left', E107} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V194) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuote', V189, V194}} end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V190)), V191))), case V195 of {'Idris.Prelude.Types.Left', E109} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V197) -> ((V0(V197))(V191)) end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E105, E106)); {'Idris.Idris.Syntax.PQuoteName', E111, E112} -> (fun (V198, V199) -> (V0(V1)) end(E111, E112)); {'Idris.Idris.Syntax.PQuoteDecl', E113, E114} -> (fun (V200, V201) -> fun (V202) -> begin (V209 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V203) -> case V203 of {'Idris.Prelude.Types.Left', E115} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V205) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteDecl', V200, V205}} end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V206) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V207) -> fun (V208) -> ('nested--13525-5039--in--un--goPDecl'(V0, V207, V208)) end end, V201, [], V206)) end, V202))), case V209 of {'Idris.Prelude.Types.Left', E117} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V211) -> ((V0(V211))(V202)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E113, E114)); {'Idris.Idris.Syntax.PUnquote', E119, E120} -> (fun (V212, V213) -> fun (V214) -> begin (V218 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V215) -> case V215 of {'Idris.Prelude.Types.Left', E121} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V217) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnquote', V212, V217}} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V213)), V214))), case V218 of {'Idris.Prelude.Types.Left', E123} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V220) -> ((V0(V220))(V214)) end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120)); {'Idris.Idris.Syntax.PRunElab', E125, E126} -> (fun (V221, V222) -> fun (V223) -> begin (V227 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V224) -> case V224 of {'Idris.Prelude.Types.Left', E127} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V226) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElab', V221, V226}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V222)), V223))), case V227 of {'Idris.Prelude.Types.Left', E129} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V229) -> ((V0(V229))(V223)) end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E125, E126)); {'Idris.Idris.Syntax.PHole', E131, E132, E133} -> (fun (V230, V231, V232) -> (V0(V1)) end(E131, E132, E133)); {'Idris.Idris.Syntax.PType', E134} -> (fun (V233) -> (V0(V1)) end(E134)); {'Idris.Idris.Syntax.PAs', E135, E136, E137, E138} -> (fun (V234, V235, V236, V237) -> fun (V238) -> begin (V242 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V239) -> case V239 of {'Idris.Prelude.Types.Left', E139} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V241) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PAs', V234, V235, V236, V241}} end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V237)), V238))), case V242 of {'Idris.Prelude.Types.Left', E141} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V244) -> ((V0(V244))(V238)) end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E135, E136, E137, E138)); {'Idris.Idris.Syntax.PDotted', E143, E144} -> (fun (V245, V246) -> fun (V247) -> begin (V251 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V248) -> case V248 of {'Idris.Prelude.Types.Left', E145} -> (fun (V249) -> {'Idris.Prelude.Types.Left', V249} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V250) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDotted', V245, V250}} end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V246)), V247))), case V251 of {'Idris.Prelude.Types.Left', E147} -> (fun (V252) -> {'Idris.Prelude.Types.Left', V252} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V253) -> ((V0(V253))(V247)) end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E143, E144)); {'Idris.Idris.Syntax.PImplicit', E149} -> (fun (V254) -> (V0(V1)) end(E149)); {'Idris.Idris.Syntax.PInfer', E150} -> (fun (V255) -> (V0(V1)) end(E150)); {'Idris.Idris.Syntax.POp', E151, E152, E153, E154, E155} -> (fun (V256, V257, V258, V259, V260) -> fun (V261) -> begin (V267 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V262) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V263) -> case V263 of {'Idris.Prelude.Types.Left', E156} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V265) -> {'Idris.Prelude.Types.Right', fun (V266) -> {'Idris.Idris.Syntax.POp', V256, V257, V258, V265, V266} end} end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V259)), V262)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V260)), V261))), case V267 of {'Idris.Prelude.Types.Left', E158} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V269) -> ((V0(V269))(V261)) end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E151, E152, E153, E154, E155)); {'Idris.Idris.Syntax.PPrefixOp', E160, E161, E162, E163} -> (fun (V270, V271, V272, V273) -> fun (V274) -> begin (V278 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V275) -> case V275 of {'Idris.Prelude.Types.Left', E164} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V277) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrefixOp', V270, V271, V272, V277}} end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V273)), V274))), case V278 of {'Idris.Prelude.Types.Left', E166} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V280) -> ((V0(V280))(V274)) end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E160, E161, E162, E163)); {'Idris.Idris.Syntax.PSectionL', E168, E169, E170, E171} -> (fun (V281, V282, V283, V284) -> fun (V285) -> begin (V289 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V286) -> case V286 of {'Idris.Prelude.Types.Left', E172} -> (fun (V287) -> {'Idris.Prelude.Types.Left', V287} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V288) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionL', V281, V282, V283, V288}} end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V284)), V285))), case V289 of {'Idris.Prelude.Types.Left', E174} -> (fun (V290) -> {'Idris.Prelude.Types.Left', V290} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V291) -> ((V0(V291))(V285)) end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E168, E169, E170, E171)); {'Idris.Idris.Syntax.PSectionR', E176, E177, E178, E179} -> (fun (V292, V293, V294, V295) -> fun (V296) -> begin (V303 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V297) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V298) -> case V298 of {'Idris.Prelude.Types.Left', E180} -> (fun (V299) -> {'Idris.Prelude.Types.Left', V299} end(E180)); {'Idris.Prelude.Types.Right', E181} -> (fun (V300) -> {'Idris.Prelude.Types.Right', fun (V301) -> {'Idris.Idris.Syntax.PSectionR', V292, V293, V300, V301} end} end(E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V294)), V297)) end, fun (V302) -> {'Idris.Prelude.Types.Right', V295} end, V296))), case V303 of {'Idris.Prelude.Types.Left', E182} -> (fun (V304) -> {'Idris.Prelude.Types.Left', V304} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V305) -> ((V0(V305))(V296)) end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E176, E177, E178, E179)); {'Idris.Idris.Syntax.PEq', E184, E185, E186} -> (fun (V306, V307, V308) -> fun (V309) -> begin (V315 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V310) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V311) -> case V311 of {'Idris.Prelude.Types.Left', E187} -> (fun (V312) -> {'Idris.Prelude.Types.Left', V312} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V313) -> {'Idris.Prelude.Types.Right', fun (V314) -> {'Idris.Idris.Syntax.PEq', V306, V313, V314} end} end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V307)), V310)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V308)), V309))), case V315 of {'Idris.Prelude.Types.Left', E189} -> (fun (V316) -> {'Idris.Prelude.Types.Left', V316} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V317) -> ((V0(V317))(V309)) end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E184, E185, E186)); {'Idris.Idris.Syntax.PBracketed', E191, E192} -> (fun (V318, V319) -> fun (V320) -> begin (V324 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V321) -> case V321 of {'Idris.Prelude.Types.Left', E193} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V323) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PBracketed', V318, V323}} end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V319)), V320))), case V324 of {'Idris.Prelude.Types.Left', E195} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V326) -> ((V0(V326))(V320)) end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E191, E192)); {'Idris.Idris.Syntax.PString', E197, E198} -> (fun (V327, V328) -> fun (V329) -> begin (V334 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V330) -> case V330 of {'Idris.Prelude.Types.Left', E199} -> (fun (V331) -> {'Idris.Prelude.Types.Left', V331} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V332) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PString', V327, V332}} end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V333) -> ('nested--13525-5051--in--un--goPStrings'(V0, V328, V333)) end, V329))), case V334 of {'Idris.Prelude.Types.Left', E201} -> (fun (V335) -> {'Idris.Prelude.Types.Left', V335} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V336) -> ((V0(V336))(V329)) end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E197, E198)); {'Idris.Idris.Syntax.PMultiline', E203, E204, E205} -> (fun (V337, V338, V339) -> fun (V340) -> begin (V345 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V341) -> case V341 of {'Idris.Prelude.Types.Left', E206} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V343) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PMultiline', V337, V338, V343}} end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V344) -> ('nested--13525-5050--in--un--goPStringLines'(V0, V339, V344)) end, V340))), case V345 of {'Idris.Prelude.Types.Left', E208} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V347) -> ((V0(V347))(V340)) end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E203, E204, E205)); {'Idris.Idris.Syntax.PDoBlock', E210, E211, E212} -> (fun (V348, V349, V350) -> fun (V351) -> begin (V356 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V352) -> case V352 of {'Idris.Prelude.Types.Left', E213} -> (fun (V353) -> {'Idris.Prelude.Types.Left', V353} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V354) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDoBlock', V348, V349, V354}} end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V355) -> ('nested--13525-5052--in--un--goPDos'(V0, V350, V355)) end, V351))), case V356 of {'Idris.Prelude.Types.Left', E215} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V358) -> ((V0(V358))(V351)) end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E210, E211, E212)); {'Idris.Idris.Syntax.PBang', E217, E218} -> (fun (V359, V360) -> fun (V361) -> begin (V365 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V362) -> case V362 of {'Idris.Prelude.Types.Left', E219} -> (fun (V363) -> {'Idris.Prelude.Types.Left', V363} end(E219)); {'Idris.Prelude.Types.Right', E220} -> (fun (V364) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PBang', V359, V364}} end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V360)), V361))), case V365 of {'Idris.Prelude.Types.Left', E221} -> (fun (V366) -> {'Idris.Prelude.Types.Left', V366} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V367) -> ((V0(V367))(V361)) end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E217, E218)); {'Idris.Idris.Syntax.PIdiom', E223, E224} -> (fun (V368, V369) -> fun (V370) -> begin (V374 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V371) -> case V371 of {'Idris.Prelude.Types.Left', E225} -> (fun (V372) -> {'Idris.Prelude.Types.Left', V372} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V373) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PIdiom', V368, V373}} end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V369)), V370))), case V374 of {'Idris.Prelude.Types.Left', E227} -> (fun (V375) -> {'Idris.Prelude.Types.Left', V375} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V376) -> ((V0(V376))(V370)) end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E223, E224)); {'Idris.Idris.Syntax.PList', E229, E230, E231} -> (fun (V377, V378, V379) -> fun (V380) -> begin (V385 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V381) -> case V381 of {'Idris.Prelude.Types.Left', E232} -> (fun (V382) -> {'Idris.Prelude.Types.Left', V382} end(E232)); {'Idris.Prelude.Types.Right', E233} -> (fun (V383) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PList', V377, V378, V383}} end(E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V384) -> ('nested--13525-5047--in--un--goPairedPTerms'(V0, V379, V384)) end, V380))), case V385 of {'Idris.Prelude.Types.Left', E234} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V387) -> ((V0(V387))(V380)) end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E229, E230, E231)); {'Idris.Idris.Syntax.PSnocList', E236, E237, E238} -> (fun (V388, V389, V390) -> fun (V391) -> begin (V396 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V392) -> case V392 of {'Idris.Prelude.Types.Left', E239} -> (fun (V393) -> {'Idris.Prelude.Types.Left', V393} end(E239)); {'Idris.Prelude.Types.Right', E240} -> (fun (V394) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSnocList', V388, V389, V394}} end(E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V395) -> ('nested--13525-5047--in--un--goPairedPTerms'(V0, V390, V395)) end, V391))), case V396 of {'Idris.Prelude.Types.Left', E241} -> (fun (V397) -> {'Idris.Prelude.Types.Left', V397} end(E241)); {'Idris.Prelude.Types.Right', E242} -> (fun (V398) -> ((V0(V398))(V391)) end(E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E236, E237, E238)); {'Idris.Idris.Syntax.PPair', E243, E244, E245} -> (fun (V399, V400, V401) -> fun (V402) -> begin (V408 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V403) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V404) -> case V404 of {'Idris.Prelude.Types.Left', E246} -> (fun (V405) -> {'Idris.Prelude.Types.Left', V405} end(E246)); {'Idris.Prelude.Types.Right', E247} -> (fun (V406) -> {'Idris.Prelude.Types.Right', fun (V407) -> {'Idris.Idris.Syntax.PPair', V399, V406, V407} end} end(E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V400)), V403)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V401)), V402))), case V408 of {'Idris.Prelude.Types.Left', E248} -> (fun (V409) -> {'Idris.Prelude.Types.Left', V409} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V410) -> ((V0(V410))(V402)) end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E243, E244, E245)); {'Idris.Idris.Syntax.PDPair', E250, E251, E252, E253, E254} -> (fun (V411, V412, V413, V414, V415) -> fun (V416) -> begin (V424 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V417) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V418) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V419) -> case V419 of {'Idris.Prelude.Types.Left', E255} -> (fun (V420) -> {'Idris.Prelude.Types.Left', V420} end(E255)); {'Idris.Prelude.Types.Right', E256} -> (fun (V421) -> {'Idris.Prelude.Types.Right', fun (V422) -> fun (V423) -> {'Idris.Idris.Syntax.PDPair', V411, V412, V421, V422, V423} end end} end(E256)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V413)), V418)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V414)), V417)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V415)), V416))), case V424 of {'Idris.Prelude.Types.Left', E257} -> (fun (V425) -> {'Idris.Prelude.Types.Left', V425} end(E257)); {'Idris.Prelude.Types.Right', E258} -> (fun (V426) -> ((V0(V426))(V416)) end(E258)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E250, E251, E252, E253, E254)); {'Idris.Idris.Syntax.PUnit', E259} -> (fun (V427) -> (V0(V1)) end(E259)); {'Idris.Idris.Syntax.PIfThenElse', E260, E261, E262, E263} -> (fun (V428, V429, V430, V431) -> fun (V432) -> begin (V440 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V433) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V434) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V435) -> case V435 of {'Idris.Prelude.Types.Left', E264} -> (fun (V436) -> {'Idris.Prelude.Types.Left', V436} end(E264)); {'Idris.Prelude.Types.Right', E265} -> (fun (V437) -> {'Idris.Prelude.Types.Right', fun (V438) -> fun (V439) -> {'Idris.Idris.Syntax.PIfThenElse', V428, V437, V438, V439} end end} end(E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V429)), V434)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V430)), V433)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V431)), V432))), case V440 of {'Idris.Prelude.Types.Left', E266} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E266)); {'Idris.Prelude.Types.Right', E267} -> (fun (V442) -> ((V0(V442))(V432)) end(E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E260, E261, E262, E263)); {'Idris.Idris.Syntax.PComprehension', E268, E269, E270} -> (fun (V443, V444, V445) -> fun (V446) -> begin (V453 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V447) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V448) -> case V448 of {'Idris.Prelude.Types.Left', E271} -> (fun (V449) -> {'Idris.Prelude.Types.Left', V449} end(E271)); {'Idris.Prelude.Types.Right', E272} -> (fun (V450) -> {'Idris.Prelude.Types.Right', fun (V451) -> {'Idris.Idris.Syntax.PComprehension', V443, V450, V451} end} end(E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V444)), V447)) end, fun (V452) -> ('nested--13525-5052--in--un--goPDos'(V0, V445, V452)) end, V446))), case V453 of {'Idris.Prelude.Types.Left', E273} -> (fun (V454) -> {'Idris.Prelude.Types.Left', V454} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V455) -> ((V0(V455))(V446)) end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E268, E269, E270)); {'Idris.Idris.Syntax.PRewrite', E275, E276, E277} -> (fun (V456, V457, V458) -> fun (V459) -> begin (V465 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V460) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V461) -> case V461 of {'Idris.Prelude.Types.Left', E278} -> (fun (V462) -> {'Idris.Prelude.Types.Left', V462} end(E278)); {'Idris.Prelude.Types.Right', E279} -> (fun (V463) -> {'Idris.Prelude.Types.Right', fun (V464) -> {'Idris.Idris.Syntax.PRewrite', V456, V463, V464} end} end(E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V457)), V460)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V458)), V459))), case V465 of {'Idris.Prelude.Types.Left', E280} -> (fun (V466) -> {'Idris.Prelude.Types.Left', V466} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V467) -> ((V0(V467))(V459)) end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E275, E276, E277)); {'Idris.Idris.Syntax.PRange', E282, E283, E284, E285} -> (fun (V468, V469, V470, V471) -> fun (V472) -> begin (V481 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V473) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V474) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V475) -> case V475 of {'Idris.Prelude.Types.Left', E286} -> (fun (V476) -> {'Idris.Prelude.Types.Left', V476} end(E286)); {'Idris.Prelude.Types.Right', E287} -> (fun (V477) -> {'Idris.Prelude.Types.Right', fun (V478) -> fun (V479) -> {'Idris.Idris.Syntax.PRange', V468, V477, V478, V479} end end} end(E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V469)), V474)) end, fun (V480) -> ('nested--13525-5045--in--un--goMPTerm'(V0, V470, V480)) end, V473)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V471)), V472))), case V481 of {'Idris.Prelude.Types.Left', E288} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E288)); {'Idris.Prelude.Types.Right', E289} -> (fun (V483) -> ((V0(V483))(V472)) end(E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E282, E283, E284, E285)); {'Idris.Idris.Syntax.PRangeStream', E290, E291, E292} -> (fun (V484, V485, V486) -> fun (V487) -> begin (V494 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V488) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V489) -> case V489 of {'Idris.Prelude.Types.Left', E293} -> (fun (V490) -> {'Idris.Prelude.Types.Left', V490} end(E293)); {'Idris.Prelude.Types.Right', E294} -> (fun (V491) -> {'Idris.Prelude.Types.Right', fun (V492) -> {'Idris.Idris.Syntax.PRangeStream', V484, V491, V492} end} end(E294)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V485)), V488)) end, fun (V493) -> ('nested--13525-5045--in--un--goMPTerm'(V0, V486, V493)) end, V487))), case V494 of {'Idris.Prelude.Types.Left', E295} -> (fun (V495) -> {'Idris.Prelude.Types.Left', V495} end(E295)); {'Idris.Prelude.Types.Right', E296} -> (fun (V496) -> ((V0(V496))(V487)) end(E296)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E290, E291, E292)); {'Idris.Idris.Syntax.PUnifyLog', E297, E298, E299} -> (fun (V497, V498, V499) -> fun (V500) -> begin (V504 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V501) -> case V501 of {'Idris.Prelude.Types.Left', E300} -> (fun (V502) -> {'Idris.Prelude.Types.Left', V502} end(E300)); {'Idris.Prelude.Types.Right', E301} -> (fun (V503) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnifyLog', V497, V498, V503}} end(E301)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V499)), V500))), case V504 of {'Idris.Prelude.Types.Left', E302} -> (fun (V505) -> {'Idris.Prelude.Types.Left', V505} end(E302)); {'Idris.Prelude.Types.Right', E303} -> (fun (V506) -> ((V0(V506))(V500)) end(E303)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E297, E298, E299)); {'Idris.Idris.Syntax.PPostfixApp', E304, E305, E306} -> (fun (V507, V508, V509) -> fun (V510) -> begin (V517 = ('Idris.Idris2.Core.Core':'un--<*>'(fun (V511) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V512) -> case V512 of {'Idris.Prelude.Types.Left', E307} -> (fun (V513) -> {'Idris.Prelude.Types.Left', V513} end(E307)); {'Idris.Prelude.Types.Right', E308} -> (fun (V514) -> {'Idris.Prelude.Types.Right', fun (V515) -> {'Idris.Idris.Syntax.PPostfixApp', V507, V514, V515} end} end(E308)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V508)), V511)) end, fun (V516) -> {'Idris.Prelude.Types.Right', V509} end, V510))), case V517 of {'Idris.Prelude.Types.Left', E309} -> (fun (V518) -> {'Idris.Prelude.Types.Left', V518} end(E309)); {'Idris.Prelude.Types.Right', E310} -> (fun (V519) -> ((V0(V519))(V510)) end(E310)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E304, E305, E306)); {'Idris.Idris.Syntax.PPostfixAppPartial', E311, E312} -> (fun (V520, V521) -> (V0({'Idris.Idris.Syntax.PPostfixAppPartial', V520, V521})) end(E311, E312)); {'Idris.Idris.Syntax.PWithUnambigNames', E313, E314, E315} -> (fun (V522, V523, V524) -> fun (V525) -> begin (V529 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V526) -> case V526 of {'Idris.Prelude.Types.Left', E316} -> (fun (V527) -> {'Idris.Prelude.Types.Left', V527} end(E316)); {'Idris.Prelude.Types.Right', E317} -> (fun (V528) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PWithUnambigNames', V522, V523, V528}} end(E317)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V524)), V525))), case V529 of {'Idris.Prelude.Types.Left', E318} -> (fun (V530) -> {'Idris.Prelude.Types.Left', V530} end(E318)); {'Idris.Prelude.Types.Right', E319} -> (fun (V531) -> ((V0(V531))(V525)) end(E319)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E313, E314, E315)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5051--in--un--goPStrings'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5036--in--un--goPStr'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5051--in--un--goPStrings'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5050--in--un--goPStringLines'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5051--in--un--goPStrings'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5050--in--un--goPStringLines'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5036--in--un--goPStr'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.StrInterp', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.StrInterp', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V4)), V2)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'nested--13525-5058--in--un--goPFnOpts'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5044--in--un--goPFnOpt'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5058--in--un--goPFnOpts'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5044--in--un--goPFnOpt'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.IFnOpt', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V1} end(E0)); {'Idris.Idris.Syntax.PForeign', E1} -> (fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForeign', V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('nested--13525-5046--in--un--goPTerms'(V0, V4, V8)) end, V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5057--in--un--goPFields'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5042--in--un--goPField'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5057--in--un--goPFields'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5056--in--un--goPFieldUpdates'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5035--in--un--goPFieldUpdate'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5056--in--un--goPFieldUpdates'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5035--in--un--goPFieldUpdate'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.PSetField', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetField', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V4)), V2)) end(E0, E1)); {'Idris.Idris.Syntax.PSetFieldApp', E4, E5} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetFieldApp', V8, V12}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V9)), V2)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5042--in--un--goPField'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.MkField', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V9) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', fun (V14) -> fun (V15) -> {'Idris.Idris.Syntax.MkField', V3, V4, V5, V13, V14, V15} end end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V16) -> ('nested--13525-5043--in--un--goPiInfo'(V0, V6, V16)) end, V10)) end, fun (V17) -> {'Idris.Prelude.Types.Right', V7} end, V9)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V8)), V2)) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5052--in--un--goPDos'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5037--in--un--goPDo'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5052--in--un--goPDos'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5037--in--un--goPDo'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoExp', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V4)), V2)) end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V12) -> case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoBind', V8, V9, V10, V14}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V11)), V2)) end(E4, E5, E6, E7)); {'Idris.Idris.Syntax.DoBindPat', E10, E11, E12, E13} -> (fun (V15, V16, V17, V18) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V19) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> {'Idris.Prelude.Types.Right', fun (V24) -> fun (V25) -> {'Idris.Idris.Syntax.DoBindPat', V15, V23, V24, V25} end end} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V16)), V20)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V17)), V19)) end, fun (V26) -> ('nested--13525-5053--in--un--goPClauses'(V0, V18, V26)) end, V2)) end(E10, E11, E12, E13)); {'Idris.Idris.Syntax.DoLet', E16, E17, E18, E19, E20, E21} -> (fun (V27, V28, V29, V30, V31, V32) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> {'Idris.Prelude.Types.Right', fun (V37) -> {'Idris.Idris.Syntax.DoLet', V27, V28, V29, V30, V36, V37} end} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V31)), V33)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V32)), V2)) end(E16, E17, E18, E19, E20, E21)); {'Idris.Idris.Syntax.DoLetPat', E24, E25, E26, E27, E28} -> (fun (V38, V39, V40, V41, V42) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V43) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V44) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V48) -> {'Idris.Prelude.Types.Right', fun (V49) -> fun (V50) -> fun (V51) -> {'Idris.Idris.Syntax.DoLetPat', V38, V48, V49, V50, V51} end end end} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V39)), V45)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V40)), V44)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V41)), V43)) end, fun (V52) -> ('nested--13525-5053--in--un--goPClauses'(V0, V42, V52)) end, V2)) end(E24, E25, E26, E27, E28)); {'Idris.Idris.Syntax.DoLetLocal', E31, E32} -> (fun (V53, V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V55) -> case V55 of {'Idris.Prelude.Types.Left', E33} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoLetLocal', V53, V57}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V58) -> ('nested--13525-5055--in--un--goPDecls'(V0, V54, V58)) end, V2)) end(E31, E32)); {'Idris.Idris.Syntax.DoRewrite', E35, E36} -> (fun (V59, V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V61) -> case V61 of {'Idris.Prelude.Types.Left', E37} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoRewrite', V59, V63}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V60)), V2)) end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5055--in--un--goPDecls'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5039--in--un--goPDecl'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5055--in--un--goPDecls'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5039--in--un--goPDecl'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.PClaim', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> {'Idris.Idris.Syntax.PClaim', V3, V4, V5, V11, V12} end} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> ('nested--13525-5058--in--un--goPFnOpts'(V0, V6, V13)) end, V8)) end, fun (V14) -> ('nested--13525-5040--in--un--goPTypeDecl'(V0, V7, V14)) end, V2)) end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.PDef', E7, E8} -> (fun (V15, V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDef', V15, V19}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V20) -> ('nested--13525-5053--in--un--goPClauses'(V0, V16, V20)) end, V2)) end(E7, E8)); {'Idris.Idris.Syntax.PData', E11, E12, E13, E14} -> (fun (V21, V22, V23, V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V25) -> case V25 of {'Idris.Prelude.Types.Left', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PData', V21, V22, V23, V27}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V28) -> ('nested--13525-5041--in--un--goPDataDecl'(V0, V24, V28)) end, V2)) end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PParameters', E17, E18, E19} -> (fun (V29, V30, V31) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V33) -> case V33 of {'Idris.Prelude.Types.Left', E20} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V35) -> {'Idris.Prelude.Types.Right', fun (V36) -> {'Idris.Idris.Syntax.PParameters', V29, V35, V36} end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5049--in--un--go4TupledPTerms'(V0, V30)), V32)) end, fun (V37) -> ('nested--13525-5055--in--un--goPDecls'(V0, V31, V37)) end, V2)) end(E17, E18, E19)); {'Idris.Idris.Syntax.PUsing', E22, E23, E24} -> (fun (V38, V39, V40) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E25} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V44) -> {'Idris.Prelude.Types.Right', fun (V45) -> {'Idris.Idris.Syntax.PUsing', V38, V44, V45} end} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('nested--13525-5047--in--un--goPairedPTerms'(V0, V39, V46)) end, V41)) end, fun (V47) -> ('nested--13525-5055--in--un--goPDecls'(V0, V40, V47)) end, V2)) end(E22, E23, E24)); {'Idris.Idris.Syntax.PReflect', E27, E28} -> (fun (V48, V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V50) -> case V50 of {'Idris.Prelude.Types.Left', E29} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PReflect', V48, V52}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V49)), V2)) end(E27, E28)); {'Idris.Idris.Syntax.PInterface', E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V62) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V63) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V64) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V65) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V66) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V68) -> case V68 of {'Idris.Prelude.Types.Left', E40} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V70) -> {'Idris.Prelude.Types.Right', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> {'Idris.Idris.Syntax.PInterface', V53, V54, V70, V71, V72, V73, V74, V75, V76} end end end end end end} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V77) -> ('nested--13525-5047--in--un--goPairedPTerms'(V0, V55, V77)) end, V67)) end, fun (V78) -> {'Idris.Prelude.Types.Right', V56} end, V66)) end, fun (V79) -> {'Idris.Prelude.Types.Right', V57} end, V65)) end, ('nested--13525-5048--in--un--go3TupledPTerms'(V0, V58)), V64)) end, fun (V80) -> {'Idris.Prelude.Types.Right', V59} end, V63)) end, fun (V81) -> {'Idris.Prelude.Types.Right', V60} end, V62)) end, fun (V82) -> ('nested--13525-5055--in--un--goPDecls'(V0, V61, V82)) end, V2)) end(E31, E32, E33, E34, E35, E36, E37, E38, E39)); {'Idris.Idris.Syntax.PImplementation', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V94) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V95) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V96) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V97) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V98) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V100) -> case V100 of {'Idris.Prelude.Types.Left', E53} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V102) -> {'Idris.Prelude.Types.Right', fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> {'Idris.Idris.Syntax.PImplementation', V83, V84, V85, V86, V102, V103, V104, V105, V106, V107, V108} end end end end end end} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5048--in--un--go3TupledPTerms'(V0, V87)), V99)) end, fun (V109) -> ('nested--13525-5047--in--un--goPairedPTerms'(V0, V88, V109)) end, V98)) end, fun (V110) -> {'Idris.Prelude.Types.Right', V89} end, V97)) end, fun (V111) -> ('nested--13525-5046--in--un--goPTerms'(V0, V90, V111)) end, V96)) end, fun (V112) -> {'Idris.Prelude.Types.Right', V91} end, V95)) end, fun (V113) -> {'Idris.Prelude.Types.Right', V92} end, V94)) end, fun (V114) -> ('nested--13525-5054--in--un--goMPDecls'(V0, V93, V114)) end, V2)) end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); {'Idris.Idris.Syntax.PRecord', E55, E56, E57, E58, E59, E60, E61} -> (fun (V115, V116, V117, V118, V119, V120, V121) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V122) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V123) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V124) -> case V124 of {'Idris.Prelude.Types.Left', E62} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V126) -> {'Idris.Prelude.Types.Right', fun (V127) -> fun (V128) -> {'Idris.Idris.Syntax.PRecord', V115, V116, V117, V118, V126, V127, V128} end end} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5049--in--un--go4TupledPTerms'(V0, V119)), V123)) end, fun (V129) -> {'Idris.Prelude.Types.Right', V120} end, V122)) end, fun (V130) -> ('nested--13525-5057--in--un--goPFields'(V0, V121, V130)) end, V2)) end(E55, E56, E57, E58, E59, E60, E61)); {'Idris.Idris.Syntax.PMutual', E64, E65} -> (fun (V131, V132) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V133) -> case V133 of {'Idris.Prelude.Types.Left', E66} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V135) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PMutual', V131, V135}} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V136) -> ('nested--13525-5055--in--un--goPDecls'(V0, V132, V136)) end, V2)) end(E64, E65)); {'Idris.Idris.Syntax.PFixity', E68, E69, E70, E71} -> (fun (V137, V138, V139, V140) -> {'Idris.Prelude.Types.Right', V1} end(E68, E69, E70, E71)); {'Idris.Idris.Syntax.PNamespace', E72, E73, E74} -> (fun (V141, V142, V143) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V144) -> case V144 of {'Idris.Prelude.Types.Left', E75} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V146) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PNamespace', V141, V142, V146}} end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V147) -> ('nested--13525-5055--in--un--goPDecls'(V0, V143, V147)) end, V2)) end(E72, E73, E74)); {'Idris.Idris.Syntax.PTransform', E77, E78, E79, E80} -> (fun (V148, V149, V150, V151) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V152) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V153) -> case V153 of {'Idris.Prelude.Types.Left', E81} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V155) -> {'Idris.Prelude.Types.Right', fun (V156) -> {'Idris.Idris.Syntax.PTransform', V148, V149, V155, V156} end} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V150)), V152)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V151)), V2)) end(E77, E78, E79, E80)); {'Idris.Idris.Syntax.PRunElabDecl', E83, E84} -> (fun (V157, V158) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V159) -> case V159 of {'Idris.Prelude.Types.Left', E85} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V161) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElabDecl', V157, V161}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V158)), V2)) end(E83, E84)); {'Idris.Idris.Syntax.PDirective', E87, E88} -> (fun (V162, V163) -> {'Idris.Prelude.Types.Right', V1} end(E87, E88)); {'Idris.Idris.Syntax.PBuiltin', E89, E90, E91} -> (fun (V164, V165, V166) -> {'Idris.Prelude.Types.Right', V1} end(E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5041--in--un--goPDataDecl'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', fun (V13) -> fun (V14) -> {'Idris.Idris.Syntax.MkPData', V3, V4, V12, V13, V14} end end} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V5)), V9)) end, fun (V15) -> {'Idris.Prelude.Types.Right', V6} end, V8)) end, fun (V16) -> ('nested--13525-5059--in--un--goPTypeDecls'(V0, V7, V16)) end, V2)) end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E7, E8, E9} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPLater', V17, V18, V22}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V19)), V2)) end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5053--in--un--goPClauses'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> [V8 | V9] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('nested--13525-5038--in--un--goPClause'(V0, V3, V10)) end, V5)) end, fun (V11) -> ('nested--13525-5053--in--un--goPClauses'(V0, V4, V11)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5038--in--un--goPClause'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> fun (V13) -> {'Idris.Idris.Syntax.MkPatClause', V3, V11, V12, V13} end end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V4)), V8)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V5)), V7)) end, fun (V14) -> ('nested--13525-5055--in--un--goPDecls'(V0, V6, V14)) end, V2)) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E6, E7, E8, E9, E10, E11} -> (fun (V15, V16, V17, V18, V19, V20) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V23) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V25) -> case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> {'Idris.Idris.Syntax.MkWithClause', V15, V27, V28, V29, V30, V31} end end end end} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V16)), V24)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V17)), V23)) end, fun (V32) -> {'Idris.Prelude.Types.Right', V18} end, V22)) end, fun (V33) -> {'Idris.Prelude.Types.Right', V19} end, V21)) end, fun (V34) -> ('nested--13525-5053--in--un--goPClauses'(V0, V20, V34)) end, V2)) end(E6, E7, E8, E9, E10, E11)); {'Idris.Idris.Syntax.MkImpossible', E14, E15} -> (fun (V35, V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V37) -> case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkImpossible', V35, V39}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V36)), V2)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5045--in--un--goMPTerm'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V3)), V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5054--in--un--goMPDecls'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> ('nested--13525-5055--in--un--goPDecls'(V0, V3, V7)) end, V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5049--in--un--go4TupledPTerms'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V10, V11) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V12) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', fun (V17) -> fun (V18) -> [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V16, V17}}} | V18] end end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V19) -> ('nested--13525-5043--in--un--goPiInfo'(V0, V10, V19)) end, V13)) end, ('nested--13525-5034--in--un--goPTerm'(V0, V11)), V12)) end, ('nested--13525-5049--in--un--go4TupledPTerms'(V0, V4)), V7)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13525-5048--in--un--go3TupledPTerms'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', fun (V14) -> [{'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V8, V13}} | V14] end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--13525-5034--in--un--goPTerm'(V0, V9)), V10)) end, ('nested--13525-5048--in--un--go3TupledPTerms'(V0, V4)), V5)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10005-1742--in--un--getName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> V8 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10582-3418--in--un--dePure'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Idris.Syntax.PRef', E3, E4} -> (fun (V9, V10) -> begin (V11 = {'Idris.Idris.Syntax.PApp', V6, {'Idris.Idris.Syntax.PRef', V9, V10}, V8}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'((V0(V10)))), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"pure"/utf8>>}})) of 1 -> V8; 0 -> V11; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4)); _ -> V5 end end(E0, E1, E2)); _ -> V5 end.
'nested--10582-3419--in--un--deGuard'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Idris.Syntax.PApp', E2, E3, E4} -> (fun (V8, V9, V10) -> case V9 of {'Idris.Idris.Syntax.PRef', E5, E6} -> (fun (V11, V12) -> begin (V13 = {'Idris.Idris.Syntax.DoExp', V6, {'Idris.Idris.Syntax.PApp', V8, {'Idris.Idris.Syntax.PRef', V11, V12}, V10}}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'((V0(V12)))), {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"guard"/utf8>>}})) of 1 -> {'Idris.Idris.Syntax.DoExp', V6, V10}; 0 -> V13; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> V5 end end(E2, E3, E4)); _ -> V5 end end(E0, E1)); _ -> V5 end.
'dn--un--toBuf_TTC_SyntaxInfo'(V0, V1, V2) -> begin (V77 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V8, V9)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--toBuf_TTC_Fixity'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> ('dn--un--fromBuf_TTC_Fixity'(V16, V17)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V21, V22)) end end}}, V10, V11, V12)) end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--toBuf_TTC_Fixity'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> ('dn--un--fromBuf_TTC_Fixity'(V28, V29)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V30, V31, V32)) end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V33, V34)) end end}}, V23, V24)) end end}}, V3, V4, V5)) end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V39, V40)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--toBuf_TTC_Fixity'(V44, V45, V46)) end end end, fun (V47) -> fun (V48) -> ('dn--un--fromBuf_TTC_Fixity'(V47, V48)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V52, V53)) end end}}, V41, V42, V43)) end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V56) -> fun (V57) -> fun (V58) -> ('dn--un--toBuf_TTC_Fixity'(V56, V57, V58)) end end end, fun (V59) -> fun (V60) -> ('dn--un--fromBuf_TTC_Fixity'(V59, V60)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V61, V62, V63)) end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V64, V65)) end end}}, V54, V55)) end end}}, V35, V36)) end end}, V0, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V66 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V77 of {'Idris.Prelude.Types.Left', E11} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V79) -> begin (V114 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V85, V86)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V87, V88, V89)) end end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V90, V91)) end end}}, V80, V81, V82)) end end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V96, V97)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V98, V99, V100)) end end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V101, V102)) end end}}, V92, V93)) end end}, V0, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(case V1 of {'Idris.Idris.Syntax.MkSyntax', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V104 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V114 of {'Idris.Prelude.Types.Left', E24} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V116) -> begin (V165 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V120, V121, V122)) end end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V123, V124)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V125, V126)) end end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V127, V128)) end end}}, V117, V118, V119)) end end end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V131, V132, V133)) end end end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V134, V135)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V138, V139)) end end}}, V129, V130)) end end}, V0, ('Idris.Idris2.Data.List':'un--filter'(fun (V140) -> ('Idris.Idris2.Data.List':'un--elemBy'(fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V141, V142)) end end, ('Idris.Idris2.Builtin':'un--fst'(V140)), case V1 of {'Idris.Idris.Syntax.MkSyntax', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V145 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(case V1 of {'Idris.Idris.Syntax.MkSyntax', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164) -> V157 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V2))), case V165 of {'Idris.Prelude.Types.Left', E48} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V167) -> begin (V220 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V171, V172, V173)) end end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V174, V175)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V176) -> fun (V177) -> fun (V178) -> ('dn--un--toBuf_TTC_IFaceInfo'(V176, V177, V178)) end end end, fun (V179) -> fun (V180) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V179, V180)) end end}}, V168, V169, V170)) end end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V183, V184, V185)) end end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V186, V187)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V188) -> fun (V189) -> fun (V190) -> ('dn--un--toBuf_TTC_IFaceInfo'(V188, V189, V190)) end end end, fun (V191) -> fun (V192) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V191, V192)) end end}}, V181, V182)) end end}, V0, ('Idris.Idris2.Data.List':'un--filter'(fun (V193) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V194) -> fun (V195) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V194, V195)) end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V196, V197)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V193)), case V1 of {'Idris.Idris.Syntax.MkSyntax', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208) -> V202 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'(case V1 of {'Idris.Idris.Syntax.MkSyntax', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219) -> V214 end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V2))), case V220 of {'Idris.Prelude.Types.Left', E72} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V222) -> begin (V269 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V223) -> fun (V224) -> fun (V225) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V226, V227, V228)) end end end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V229, V230)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V231) -> fun (V232) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V231, V232)) end end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V233, V234)) end end}}, V223, V224, V225)) end end end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V237) -> fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V237, V238, V239)) end end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V240, V241)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V242) -> fun (V243) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V242, V243)) end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V244, V245)) end end}}, V235, V236)) end end}, V0, ('Idris.Idris2.Data.List':'un--filter'(fun (V246) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(('Idris.Idris2.Builtin':'un--fst'(V246)), case V1 of {'Idris.Idris.Syntax.MkSyntax', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257) -> V253 end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'(case V1 of {'Idris.Idris.Syntax.MkSyntax', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268) -> V265 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V2))), case V269 of {'Idris.Prelude.Types.Left', E96} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V271) -> begin (V288 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V272) -> fun (V273) -> fun (V274) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V272, V273, V274)) end end end, fun (V275) -> fun (V276) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V275, V276)) end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287) -> V285 end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V288 of {'Idris.Prelude.Types.Left', E109} -> (fun (V289) -> {'Idris.Prelude.Types.Left', V289} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V290) -> (('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121} -> (fun (V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301) -> V301 end(E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_Method'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.MkMethod', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V4))(V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V18 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_TotalReq'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V16, V17)) end end}, V0, V5, V2))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> (('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V0, V6))(V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_IFaceInfo'(V0, V1, V2) -> case V1 of {'Idris.Idris.Syntax.MkIFaceInfo', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V3, V2))), case V9 of {'Idris.Prelude.Types.Left', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V11) -> begin (V17 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V12, V13, V14)) end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V15, V16)) end end}, V0, V4, V2))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V25 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V20, V21, V22)) end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V23, V24)) end end}, V0, V5, V2))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V32 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V30, V31)) end end}, V0, V6, V2))), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V40 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--toBuf_TTC_Method'(V35, V36, V37)) end end end, fun (V38) -> fun (V39) -> ('dn--un--fromBuf_TTC_Method'(V38, V39)) end end}, V0, V7, V2))), case V40 of {'Idris.Prelude.Types.Left', E14} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V46, V47, V48)) end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V49, V50)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V57, V58)) end end}, V51, V52, V53)) end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V61, V62, V63)) end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V64, V65)) end end}, V59, V60)) end end}}, V43, V44, V45)) end end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V68, V69, V70)) end end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V71, V72)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V76, V77, V78)) end end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V79, V80)) end end}, V73, V74, V75)) end end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V83, V84, V85)) end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V86, V87)) end end}, V81, V82)) end end}}, V66, V67)) end end}, V0, V8, V2)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Fixity'(V0, V1, V2) -> case V1 of 0 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 0, V2)); 1 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 1, V2)); 2 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 2, V2)); 3 -> ('Idris.Idris2.Core.Binary.Prims':'un--tag'(V0, 3, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"showimplicits = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V1)))) end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shownamespace = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V2)))) end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"showtypes = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V3)))) end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"eval = "/utf8>>, ('dn--un--show_Show_REPLEval'(V4)))) end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"editor = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V5)))) end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"cg = "/utf8>>, V6)) end(E5)); {'Idris.Idris.Syntax.Profile', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"profile = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V7)))) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_REPLEval'(V0) -> case V0 of 0 -> <<"typecheck"/utf8>>; 1 -> <<"normalise"/utf8>>; 2 -> <<"execute"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_PTerm'(V0) -> ('dn--un--showPrec_Show_PTerm'({'Idris.Prelude.Show.Open'}, V0)).
'dn--un--show_Show_Method'(V0) -> case V0 of {'Idris.Idris.Syntax.MkMethod', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_TotalReq'(V6, V7)) end end}, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)) end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V9, V10)) end end}, V4)))))))))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_IPTerm'(V0) -> ('dn--un--showPrec_Show_IPTerm'({'Idris.Prelude.Show.Open'}, V0)).
'dn--un--show_Show_Fixity'(V0) -> case V0 of 0 -> <<"infixl"/utf8>>; 1 -> <<"infixr"/utf8>>; 2 -> <<"infix"/utf8>>; 3 -> <<"prefix"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_REPLOpt'(V0, V1) -> ('dn--un--show_Show_REPLOpt'(V1)).
'dn--un--showPrec_Show_REPLEval'(V0, V1) -> ('dn--un--show_Show_REPLEval'(V1)).
'dn--un--showPrec_Show_PTerm'(V0, V1) -> ('un--showPTermPrec'(fun (V2) -> V2 end, V0, V1)).
'dn--un--showPrec_Show_Method'(V0, V1) -> ('dn--un--show_Show_Method'(V1)).
'dn--un--showPrec_Show_IPTerm'(V0, V1) -> ('un--showPTermPrec'(fun (V2) -> case V2 of {'Idris.Core.TT.MkKindedName', E0, E1, E2} -> (fun (V3, V4, V5) -> V5 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1)).
'dn--un--showPrec_Show_Fixity'(V0, V1) -> ('dn--un--show_Show_Fixity'(V1)).
'dn--un--resolved_HasNames_SyntaxInfo'(V0, V1, V2) -> begin (V20 = (('dn--un--resolved_HasNames_(ANameMap $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_IFaceInfo'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--resolved_HasNames_IFaceInfo'(V6, V7, V8)) end end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V20 of {'Idris.Prelude.Types.Left', E11} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V22) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V23, V24)) end end, case V1 of {'Idris.Idris.Syntax.MkSyntax', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V33 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V2))), case V36 of {'Idris.Prelude.Types.Left', E24} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V38) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Idris.Syntax.MkSyntax', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Idris.Syntax.MkSyntax', V39, V40, V41, V42, V43, V22, V45, V46, V38, V48, V49} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_IFaceInfo'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', V1}.
'dn--un--resolved_HasNames_(ANameMap $a)'(V0, V1, V2) -> fun (V3) -> ('nested--13234-4811--in--un--insertAll'(V0, V2, V1, ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'(V2)), V3)) end.
'dn--un--pretty_Pretty_REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"showimplicits"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'(V1)))))) end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"shownamespace"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'(V2)))))) end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"showtypes"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'(V3)))))) end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"eval"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('dn--un--pretty_Pretty_REPLEval'(V4)))))) end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"editor"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V5)))))) end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"cg"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V6)))))) end(E5)); {'Idris.Idris.Syntax.Profile', E6} -> (fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"profile"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'(V7)))))) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_REPLEval'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"typecheck"/utf8>>)); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"normalise"/utf8>>)); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"execute"/utf8>>)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_REPLOpt'(V0, V1) -> ('dn--un--pretty_Pretty_REPLOpt'(V1)).
'dn--un--prettyPrec_Pretty_REPLEval'(V0, V1) -> ('dn--un--pretty_Pretty_REPLEval'(V1)).
'dn--un--full_HasNames_SyntaxInfo'(V0, V1, V2) -> begin (V20 = (('dn--un--full_HasNames_(ANameMap $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_IFaceInfo'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--resolved_HasNames_IFaceInfo'(V6, V7, V8)) end end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V20 of {'Idris.Prelude.Types.Left', E11} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V22) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V23, V24)) end end, case V1 of {'Idris.Idris.Syntax.MkSyntax', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V33 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V2))), case V36 of {'Idris.Prelude.Types.Left', E24} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V38) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Idris.Syntax.MkSyntax', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Idris.Syntax.MkSyntax', V39, V40, V41, V42, V43, V22, V45, V46, V38, V48, V49} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_IFaceInfo'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', V1}.
'dn--un--full_HasNames_(ANameMap $a)'(V0, V1, V2) -> fun (V3) -> ('nested--13233-4770--in--un--insertAll'(V0, V2, V1, ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'(V2)), V3)) end.
'dn--un--fromBuf_TTC_SyntaxInfo'(V0, V1) -> begin (V65 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V7, V8)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--toBuf_TTC_Fixity'(V12, V13, V14)) end end end, fun (V15) -> fun (V16) -> ('dn--un--fromBuf_TTC_Fixity'(V15, V16)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V17, V18, V19)) end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V20, V21)) end end}}, V9, V10, V11)) end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--toBuf_TTC_Fixity'(V24, V25, V26)) end end end, fun (V27) -> fun (V28) -> ('dn--un--fromBuf_TTC_Fixity'(V27, V28)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V29, V30, V31)) end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V32, V33)) end end}}, V22, V23)) end end}}, V2, V3, V4)) end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V38, V39)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V43) -> fun (V44) -> fun (V45) -> ('dn--un--toBuf_TTC_Fixity'(V43, V44, V45)) end end end, fun (V46) -> fun (V47) -> ('dn--un--fromBuf_TTC_Fixity'(V46, V47)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V48, V49, V50)) end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V51, V52)) end end}}, V40, V41, V42)) end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V55) -> fun (V56) -> fun (V57) -> ('dn--un--toBuf_TTC_Fixity'(V55, V56, V57)) end end end, fun (V58) -> fun (V59) -> ('dn--un--fromBuf_TTC_Fixity'(V58, V59)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V60, V61, V62)) end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V63, V64)) end end}}, V53, V54)) end end}}, V34, V35)) end end}, V0, V1))), case V65 of {'Idris.Prelude.Types.Left', E0} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V67) -> begin (V91 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V73, V74)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V75, V76, V77)) end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V78, V79)) end end}}, V68, V69, V70)) end end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V84, V85)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_Nat'(V86, V87, V88)) end end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_Nat'(V89, V90)) end end}}, V80, V81)) end end}, V0, V1))), case V91 of {'Idris.Prelude.Types.Left', E2} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V93) -> begin (V117 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V97, V98, V99)) end end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V100, V101)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V104, V105)) end end}}, V94, V95, V96)) end end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V108, V109, V110)) end end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V111, V112)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V115, V116)) end end}}, V106, V107)) end end}, V0, V1))), case V117 of {'Idris.Prelude.Types.Left', E4} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V119) -> begin (V145 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V123, V124, V125)) end end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V126, V127)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V128) -> fun (V129) -> fun (V130) -> ('dn--un--toBuf_TTC_IFaceInfo'(V128, V129, V130)) end end end, fun (V131) -> fun (V132) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V131, V132)) end end}}, V120, V121, V122)) end end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V135, V136, V137)) end end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V138, V139)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V140) -> fun (V141) -> fun (V142) -> ('dn--un--toBuf_TTC_IFaceInfo'(V140, V141, V142)) end end end, fun (V143) -> fun (V144) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V143, V144)) end end}}, V133, V134)) end end}, V0, V1))), case V145 of {'Idris.Prelude.Types.Left', E6} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V147) -> begin (V171 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V151, V152, V153)) end end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V154, V155)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V156, V157)) end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V158, V159)) end end}}, V148, V149, V150)) end end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V162, V163, V164)) end end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V165, V166)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_String'(V167, V168)) end end, fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_String'(V169, V170)) end end}}, V160, V161)) end end}, V0, V1))), case V171 of {'Idris.Prelude.Types.Left', E8} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V173) -> begin (V179 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V174, V175, V176)) end end end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V177, V178)) end end}, V0, V1))), case V179 of {'Idris.Prelude.Types.Left', E10} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V181) -> begin (V182 = ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V182 of {'Idris.Prelude.Types.Left', E12} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V184) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--fromList'(V67)), ('Idris.Idris2.Libraries.Data.StringMap':'un--fromList'(V93)), [], ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V185) -> fun (V186) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V185, V186)) end end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V187, V188)) end end}, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_ModuleIdent'(V189, V190)) end end, fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<_Ord_ModuleIdent'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->_Ord_ModuleIdent'(V193, V194)) end end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<=_Ord_ModuleIdent'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->=_Ord_ModuleIdent'(V197, V198)) end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--max_Ord_ModuleIdent'(V199, V200)) end end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_ModuleIdent'(V201, V202)) end end}, V119)), [], ('Idris.Idris2.Libraries.Data.ANameMap':'un--fromList'(V147)), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.ANameMap':'un--fromList'(V173)), V181, [], V184}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Method'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V13 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_TotalReq'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V11, V12)) end end}, V0, V1))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkMethod', V4, V7, V15, V18}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_IFaceInfo'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V10 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V8, V9)) end end}, V0, V1))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V18 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V16, V17)) end end}, V0, V1))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V25 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V21) -> fun (V22) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V23, V24)) end end}, V0, V1))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V33 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un--toBuf_TTC_Method'(V28, V29, V30)) end end end, fun (V31) -> fun (V32) -> ('dn--un--fromBuf_TTC_Method'(V31, V32)) end end}, V0, V1))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> begin (V81 = ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V39, V40, V41)) end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V42, V43)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V47, V48, V49)) end end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V50, V51)) end end}, V44, V45, V46)) end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V57, V58)) end end}, V52, V53)) end end}}, V36, V37, V38)) end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V61, V62, V63)) end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V64, V65)) end end}, {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--toBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V69, V70, V71)) end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V72, V73)) end end}, V66, V67, V68)) end end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Binary.Prims':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V76, V77, V78)) end end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V79, V80)) end end}, V74, V75)) end end}}, V59, V60)) end end}, V0, V1))), case V81 of {'Idris.Prelude.Types.Left', E10} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkIFaceInfo', V4, V12, V20, V27, V35, V83}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Fixity'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Binary.Prims':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 1}; 2 -> {'Idris.Prelude.Types.Right', 2}; 3 -> {'Idris.Prelude.Types.Right', 3}; _ -> ('Idris.Idris2.Core.Binary.Prims':'un--corrupt'(<<"Fixity"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_TTC_SyntaxInfo'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_SyntaxInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_SyntaxInfo'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Method'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Method'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Method'(V3, V4)) end end}.
'dn--un--__Impl_TTC_IFaceInfo'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_IFaceInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Fixity'() -> {'Idris.Core.Binary.Prims.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_Fixity'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_Fixity'(V3, V4)) end end}.
'dn--un--__Impl_Show_REPLOpt'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_REPLOpt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_REPLOpt'(V1, V2)) end end}.
'dn--un--__Impl_Show_REPLEval'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_REPLEval'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_REPLEval'(V1, V2)) end end}.
'dn--un--__Impl_Show_PTerm'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_PTerm'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PTerm'(V1, V2)) end end}.
'dn--un--__Impl_Show_Method'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Method'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Method'(V1, V2)) end end}.
'dn--un--__Impl_Show_IPTerm'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_IPTerm'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_IPTerm'(V1, V2)) end end}.
'dn--un--__Impl_Show_Fixity'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Fixity'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Fixity'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_REPLOpt'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_REPLOpt'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_REPLOpt'(V3, V4)) end end end}.
'dn--un--__Impl_Pretty_REPLEval'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_REPLEval'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_REPLEval'(V3, V4)) end end end}.
'dn--un--__Impl_HasNames_SyntaxInfo'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_SyntaxInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_SyntaxInfo'(V3, V4, V5)) end end end}.
'dn--un--__Impl_Eq_Pass'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Pass'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Pass'(V2, V3)) end end}.
'dn--un--==_Eq_Pass'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--/=_Eq_Pass'(V0, V1) -> case ('dn--un--==_Eq_Pass'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--withSyn'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'un--wrapRef'({'Idris.Idris.Syntax.Syn'}, V0, fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end end, V1, V2)).
'un--typePass'(V0) -> case ('dn--un--==_Eq_Pass'(V0, 0)) of 1 -> 1; 0 -> ('dn--un--==_Eq_Pass'(V0, 1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showUpdate'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PSetField', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('un--showPTerm'(V0, V3)))))) end(E0, E1)); {'Idris.Idris.Syntax.PSetFieldApp', E2, E3} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" $= "/utf8>>, ('un--showPTerm'(V0, V5)))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showPTermPrec'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, (V0(V4)))) end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9, V10) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))) end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") -> "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))))))))))) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_ : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))))))))) end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))))))))))) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))) end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{auto "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))))))))))) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DefImplicit', E11} -> (fun (V14) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{default "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_ : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))))))))))))) end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{default "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('un--showPTermPrec'(V0, V1, V10)))))))))))))))))) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E13, E14, E15, E16, E17, E18} -> (fun (V16, V17, V18, V19, V20, V21) -> case V20 of {'Idris.Idris.Syntax.PImplicit', E19} -> (fun (V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('un--showPTermPrec'(V0, V1, V21)))))))))) end(E19)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('un--showPTermPrec'(V0, V1, V21)))))))))))))) end end(E13, E14, E15, E16, E17, E18)); {'Idris.Idris.Syntax.PLet', E20, E21, E22, E23, E24, E25, E26} -> (fun (V23, V24, V25, V26, V27, V28, V29) -> case V26 of {'Idris.Idris.Syntax.PImplicit', E27} -> (fun (V30) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('un--showPTermPrec'(V0, V1, V28)))))))))))))) end(E27)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V42)) end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V46, V47, V48, V49)) end end end end end end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V51)) end end, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V54, V55, V56)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V57, V58)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V59) -> ('nested--10582-2635--in--un--showAlt'(V0, V23, V29, V28, V27, V26, V25, V24, V1, V59)) end, V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('un--showPTermPrec'(V0, V1, V28)))))))))))))))))))) end end(E20, E21, E22, E23, E24, E25, E26)); {'Idris.Idris.Syntax.PCase', E28, E29, E30} -> (fun (V60, V61, V62) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V61)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V63) -> ('nested--10582-2702--in--un--showCase'(V0, V1, V60, V62, V61, V63)) end, V62)))), <<" }"/utf8>>)))))))) end(E28, E29, E30)); {'Idris.Idris.Syntax.PLocal', E31, E32, E33} -> (fun (V64, V65, V66) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let { << definitions >>  } in "/utf8>>, ('un--showPTermPrec'(V0, V1, V66)))) end(E31, E32, E33)); {'Idris.Idris.Syntax.PUpdate', E34, E35} -> (fun (V67, V68) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"record { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V69) -> ('un--showUpdate'(V0, V69)) end, V68)))), <<" }"/utf8>>)))) end(E34, E35)); {'Idris.Idris.Syntax.PApp', E36, E37, E38} -> (fun (V70, V71, V72) -> begin (V73 = fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V71)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V72)))))) end), case V71 of {'Idris.Idris.Syntax.PRef', E39, E40} -> (fun (V74, V75) -> begin (V76 = {'Idris.Idris.Syntax.PRef', V74, V75}), case ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Core.Name':'un--isRF'((V0(V75)))))) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V72)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V76)))))); 0 -> (V73()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); _ -> (V73()) end end end(E36, E37, E38)); {'Idris.Idris.Syntax.PWithApp', E41, E42, E43} -> (fun (V77, V78, V79) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V78)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('un--showPTermPrec'(V0, V1, V79)))))) end(E41, E42, E43)); {'Idris.Idris.Syntax.PAutoApp', E44, E45, E46} -> (fun (V80, V81, V82) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V81)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" @{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V82)), <<"}"/utf8>>)))))) end(E44, E45, E46)); {'Idris.Idris.Syntax.PDelayed', E47, E48, E49} -> (fun (V83, V84, V85) -> case V84 of 0 -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Idris.Prelude.Show.App'})), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Inf "/utf8>>, ('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V85)))))); _ -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Idris.Prelude.Show.App'})), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Lazy "/utf8>>, ('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V85)))))) end end(E47, E48, E49)); {'Idris.Idris.Syntax.PDelay', E50, E51} -> (fun (V86, V87) -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Idris.Prelude.Show.App'})), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Delay "/utf8>>, ('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V87)))))) end(E50, E51)); {'Idris.Idris.Syntax.PForce', E52, E53} -> (fun (V88, V89) -> ('Idris.Idris2.Prelude.Show':'un--showParens'(('Idris.Idris2.Prelude.Show':'dn--un-->=_Ord_Prec'(V1, {'Idris.Prelude.Show.App'})), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Force "/utf8>>, ('un--showPTermPrec'(V0, {'Idris.Prelude.Show.App'}, V89)))))) end(E52, E53)); {'Idris.Idris.Syntax.PNamedApp', E54, E55, E56, E57} -> (fun (V90, V91, V92, V93) -> case V93 of {'Idris.Idris.Syntax.PRef', E58, E59} -> (fun (V94, V95) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V92, (V0(V95)))) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V91)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V92)), <<"}"/utf8>>)))))); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V91)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V92)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, (V0(V95)))), <<"}"/utf8>>)))))))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58, E59)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V91)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V92)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V93)), <<"}"/utf8>>)))))))))) end end(E54, E55, E56, E57)); {'Idris.Idris.Syntax.PSearch', E60, E61} -> (fun (V96, V97) -> <<"%search"/utf8>> end(E60, E61)); {'Idris.Idris.Syntax.PQuote', E62, E63} -> (fun (V98, V99) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"`("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V99)), <<")"/utf8>>)))) end(E62, E63)); {'Idris.Idris.Syntax.PQuoteName', E64, E65} -> (fun (V100, V101) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"`{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V101)), <<"}"/utf8>>)))) end(E64, E65)); {'Idris.Idris.Syntax.PQuoteDecl', E66, E67} -> (fun (V102, V103) -> <<"`[ <<declaration>> ]"/utf8>> end(E66, E67)); {'Idris.Idris.Syntax.PUnquote', E68, E69} -> (fun (V104, V105) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"~("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V105)), <<")"/utf8>>)))) end(E68, E69)); {'Idris.Idris.Syntax.PRunElab', E70, E71} -> (fun (V106, V107) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%runElab "/utf8>>, ('un--showPTermPrec'(V0, V1, V107)))) end(E70, E71)); {'Idris.Idris.Syntax.PPrimVal', E72, E73} -> (fun (V108, V109) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V1, V109)) end(E72, E73)); {'Idris.Idris.Syntax.PHole', E74, E75, E76} -> (fun (V110, V111, V112) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, V112)) end(E74, E75, E76)); {'Idris.Idris.Syntax.PType', E77} -> (fun (V113) -> <<"Type"/utf8>> end(E77)); {'Idris.Idris.Syntax.PAs', E78, E79, E80, E81} -> (fun (V114, V115, V116, V117) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V116)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@"/utf8>>, ('un--showPTermPrec'(V0, V1, V117)))))) end(E78, E79, E80, E81)); {'Idris.Idris.Syntax.PDotted', E82, E83} -> (fun (V118, V119) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('un--showPTermPrec'(V0, V1, V119)))) end(E82, E83)); {'Idris.Idris.Syntax.PImplicit', E84} -> (fun (V120) -> <<"_"/utf8>> end(E84)); {'Idris.Idris.Syntax.PInfer', E85} -> (fun (V121) -> <<"?"/utf8>> end(E85)); {'Idris.Idris.Syntax.POp', E86, E87, E88, E89, E90} -> (fun (V122, V123, V124, V125, V126) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V125)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showOpPrec'(V0, V1, V124)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--showPTermPrec'(V0, V1, V126)))))))))) end(E86, E87, E88, E89, E90)); {'Idris.Idris.Syntax.PPrefixOp', E91, E92, E93, E94} -> (fun (V127, V128, V129, V130) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showOpPrec'(V0, V1, V129)), ('un--showPTermPrec'(V0, V1, V130)))) end(E91, E92, E93, E94)); {'Idris.Idris.Syntax.PSectionL', E95, E96, E97, E98} -> (fun (V131, V132, V133, V134) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showOpPrec'(V0, V1, V133)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V134)), <<")"/utf8>>)))))))) end(E95, E96, E97, E98)); {'Idris.Idris.Syntax.PSectionR', E99, E100, E101, E102} -> (fun (V135, V136, V137, V138) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V137)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showOpPrec'(V0, V1, V138)), <<")"/utf8>>)))))))) end(E99, E100, E101, E102)); {'Idris.Idris.Syntax.PEq', E103, E104, E105} -> (fun (V139, V140, V141) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V140)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('un--showPTermPrec'(V0, V1, V141)))))) end(E103, E104, E105)); {'Idris.Idris.Syntax.PBracketed', E106, E107} -> (fun (V142, V143) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V143)), <<")"/utf8>>)))) end(E106, E107)); {'Idris.Idris.Syntax.PString', E108, E109} -> (fun (V144, V145) -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--join'(<<" ++ "/utf8>>, {'Idris.Prelude.Interfaces.MkFoldable', fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V148, V149, V150)) end end end end end, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V153, V154, V155)) end end end end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V157)) end end, fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V161, V162, V163, V164)) end end end end end end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V166)) end end, fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V169, V170, V171)) end end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V174, V175)) end end end end, fun (V176) -> ('un--showPStr'(V0, V176)) end, V145)))) end(E108, E109)); {'Idris.Idris.Syntax.PMultiline', E110, E111, E112} -> (fun (V177, V178, V179) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"multiline ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.String.Extra':'un--join'(<<" ++ "/utf8>>, {'Idris.Prelude.Interfaces.MkFoldable', fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V182, V183, V184)) end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V187, V188, V189)) end end end end end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V191)) end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V195, V196, V197, V198)) end end end end end end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V200)) end end, fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V203, V204, V205)) end end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V208, V209)) end end end end, fun (V210) -> ('un--showPStr'(V0, V210)) end, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V213, V214, V215)) end end end end end, fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V218, V219, V220)) end end end end end, fun (V221) -> fun (V222) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V222)) end end, fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V226, V227, V228, V229)) end end end end end end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V231)) end end, fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V234, V235, V236)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V237) -> fun (V238) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V237, V238)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V179)))))), <<")"/utf8>>)))) end(E110, E111, E112)); {'Idris.Idris.Syntax.PDoBlock', E113, E114, E115} -> (fun (V239, V240, V241) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"do "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V242) -> ('un--showDo'(V0, V242)) end, V241)))))) end(E113, E114, E115)); {'Idris.Idris.Syntax.PBang', E116, E117} -> (fun (V243, V244) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"!"/utf8>>, ('un--showPTermPrec'(V0, V1, V244)))) end(E116, E117)); {'Idris.Idris.Syntax.PIdiom', E118, E119} -> (fun (V245, V246) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"[|"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V246)), <<"|]"/utf8>>)))) end(E118, E119)); {'Idris.Idris.Syntax.PList', E120, E121, E122} -> (fun (V247, V248, V249) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V250) -> ('un--showPTermPrec'(V0, V1, ('Idris.Idris2.Builtin':'un--snd'(V250)))) end, V249)))), <<"]"/utf8>>)))) end(E120, E121, E122)); {'Idris.Idris.Syntax.PSnocList', E123, E124, E125} -> (fun (V251, V252, V253) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"[<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V254) -> ('un--showPTermPrec'(V0, V1, ('Idris.Idris2.Builtin':'un--snd'(V254)))) end, V253)))), <<"]"/utf8>>)))) end(E123, E124, E125)); {'Idris.Idris.Syntax.PPair', E126, E127, E128} -> (fun (V255, V256, V257) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V256)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V257)), <<")"/utf8>>)))))))) end(E126, E127, E128)); {'Idris.Idris.Syntax.PDPair', E129, E130, E131, E132, E133} -> (fun (V258, V259, V260, V261, V262) -> case V261 of {'Idris.Idris.Syntax.PImplicit', E134} -> (fun (V263) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V260)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ** "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V262)), <<")"/utf8>>)))))))) end(E134)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V260)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V261)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ** "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V262)), <<")"/utf8>>)))))))))))) end end(E129, E130, E131, E132, E133)); {'Idris.Idris.Syntax.PUnit', E135} -> (fun (V264) -> <<"()"/utf8>> end(E135)); {'Idris.Idris.Syntax.PIfThenElse', E136, E137, E138, E139} -> (fun (V265, V266, V267, V268) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"if "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V266)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" then "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V267)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" else "/utf8>>, ('un--showPTermPrec'(V0, V1, V268)))))))))))) end(E136, E137, E138, E139)); {'Idris.Idris.Syntax.PComprehension', E140, E141, E142} -> (fun (V269, V270, V271) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, ('nested--10582-3418--in--un--dePure'(V0, V269, V271, V270, V1, V270)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V272) -> ('un--showDo'(V0, ('nested--10582-3419--in--un--deGuard'(V0, V269, V271, V270, V1, V272)))) end, V271)))), <<"]"/utf8>>)))))))) end(E140, E141, E142)); {'Idris.Idris.Syntax.PRewrite', E143, E144, E145} -> (fun (V273, V274, V275) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rewrite "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V274)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('un--showPTermPrec'(V0, V1, V275)))))))) end(E143, E144, E145)); {'Idris.Idris.Syntax.PRange', E146, E147, E148, E149} -> (fun (V276, V277, V278, V279) -> case V278 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V277)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" .. "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V279)), <<"]"/utf8>>)))))))) end()); {'Idris.Prelude.Types.Just', E150} -> (fun (V280) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V277)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V280)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" .. "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V279)), <<"]"/utf8>>)))))))))))) end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E146, E147, E148, E149)); {'Idris.Idris.Syntax.PRangeStream', E151, E152, E153} -> (fun (V281, V282, V283) -> case V283 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V282)), <<" .. ]"/utf8>>)))) end()); {'Idris.Prelude.Types.Just', E154} -> (fun (V284) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V282)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V284)), <<" .. ]"/utf8>>)))))))) end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E151, E152, E153)); {'Idris.Idris.Syntax.PUnifyLog', E155, E156, E157} -> (fun (V285, V286, V287) -> ('un--showPTermPrec'(V0, V1, V287)) end(E155, E156, E157)); {'Idris.Idris.Syntax.PPostfixApp', E158, E159, E160} -> (fun (V288, V289, V290) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTermPrec'(V0, V1, V289)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V293, V294, V295)) end end end end end, fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V298, V299, V300)) end end end end end, fun (V301) -> fun (V302) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V302)) end end, fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V306, V307, V308, V309)) end end end end end end end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V311)) end end, fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V314, V315, V316)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V317, V318)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V319) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V320) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V320)) end, fun (V321) -> fun (V322) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V321, V322)) end end}, {'Idris.Prelude.Show.MkShow', fun (V323) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V323)) end, fun (V324) -> fun (V325) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V324, V325)) end end}}, V319)))) end, V290)))) end(E158, E159, E160)); {'Idris.Idris.Syntax.PPostfixAppPartial', E161, E162} -> (fun (V326, V327) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V328) -> fun (V329) -> fun (V330) -> fun (V331) -> fun (V332) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V330, V331, V332)) end end end end end, fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V335, V336, V337)) end end end end end, fun (V338) -> fun (V339) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V339)) end end, fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> fun (V345) -> fun (V346) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V343, V344, V345, V346)) end end end end end end end, fun (V347) -> fun (V348) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V348)) end end, fun (V349) -> fun (V350) -> fun (V351) -> fun (V352) -> fun (V353) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V351, V352, V353)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V354) -> fun (V355) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V354, V355)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V356) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V357) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V357)) end, fun (V358) -> fun (V359) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V358, V359)) end end}, {'Idris.Prelude.Show.MkShow', fun (V360) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V360)) end, fun (V361) -> fun (V362) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V361, V362)) end end}}, V356)))) end, V327)) end(E161, E162)); {'Idris.Idris.Syntax.PWithUnambigNames', E163, E164, E165} -> (fun (V363, V364, V365) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V366) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V366)) end, fun (V367) -> fun (V368) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V367, V368)) end end}, V364)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--showPTermPrec'(V0, V1, V365)))))))) end(E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showPTerm'(V0, V1) -> ('un--showPTermPrec'(V0, {'Idris.Prelude.Show.Open'}, V1)).
'un--showPStr'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.StrLiteral', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V3)) end(E0, E1)); {'Idris.Idris.Syntax.StrInterp', E2, E3} -> (fun (V4, V5) -> ('un--showPTerm'(V0, V5)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showOpPrec'(V0, V1, V2) -> begin (V3 = (V0(V2))), case ('Idris.Idris2.Parser.Lexer.Source':'un--isOpName'(V3)) of 1 -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V3)); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"`"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V1, V3)), <<"`"/utf8>>)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showDo'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V2, V3) -> ('un--showPTerm'(V0, V3)) end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" <- "/utf8>>, ('un--showPTerm'(V0, V7)))))) end(E2, E3, E4, E5)); {'Idris.Idris.Syntax.DoBindPat', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" <- "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V10)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V27, V28, V29, V30)) end end end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V35, V36, V37)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V38, V39)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V40) -> ('un--showAlt'(V0, V40)) end, V11)))))))) end(E6, E7, E8, E9)); {'Idris.Idris.Syntax.DoLet', E10, E11, E12, E13, E14, E15} -> (fun (V41, V42, V43, V44, V45, V46) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('un--showPTerm'(V0, V46)))))))) end(E10, E11, E12, E13, E14, E15)); {'Idris.Idris.Syntax.DoLetPat', E16, E17, E18, E19, E20} -> (fun (V47, V48, V49, V50, V51) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V48)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V50)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V63)) end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V67, V68, V69, V70)) end end end end end end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V72)) end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V75, V76, V77)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V78, V79)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V80) -> ('un--showAlt'(V0, V80)) end, V51)))))))))) end(E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.DoLetLocal', E21, E22} -> (fun (V81, V82) -> <<"let { << definitions >>  }"/utf8>> end(E21, E22)); {'Idris.Idris.Syntax.DoRewrite', E23, E24} -> (fun (V83, V84) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rewrite "/utf8>>, ('un--showPTerm'(V0, V84)))) end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showAlt'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V4)), <<";"/utf8>>)))))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V6, V7, V8, V9, V10, V11) -> <<" | <<with alts not possible>>;"/utf8>> end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V12, V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showPTerm'(V0, V13)), <<" impossible;"/utf8>>)))) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pragmaTopics'() -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"+"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('nested--8727-1275--in--un--showDirective'(V0)))))) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V1) -> ('un--isPragma'(V1)) end, ('un--directiveList'()))))))))).
'un--papply'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('un--papply'(V0, {'Idris.Idris.Syntax.PApp', V0, V1, V3}, V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapPTermM'(V0, V1) -> ('nested--13525-5034--in--un--goPTerm'(V0, V1)).
'un--isStrInterp'(V0) -> case V0 of {'Idris.Idris.Syntax.StrInterp', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', V1} end(E0, E1)); {'Idris.Idris.Syntax.StrLiteral', E2, E3} -> (fun (V3, V4) -> {'Idris.Prelude.Types.Nothing'} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isPragma'(V0) -> case V0 of {'Idris.Idris.Syntax.CGAction', E0, E1} -> (fun (V1, V2) -> 0 end(E0, E1)); _ -> 1 end.
'un--isPDef'(V0) -> case V0 of {'Idris.Idris.Syntax.PDef', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--initSyntax'() -> {'Idris.Idris.Syntax.MkSyntax', ('nested--13444-4949--in--un--initInfix'()), ('nested--13444-4950--in--un--initPrefix'()), [], ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--compare_Ord_ModuleIdent'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<_Ord_ModuleIdent'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->_Ord_ModuleIdent'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--<=_Ord_ModuleIdent'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un-->=_Ord_ModuleIdent'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--max_Ord_ModuleIdent'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--min_Ord_ModuleIdent'(V16, V17)) end end})), [], ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'()), ('nested--13444-4952--in--un--initSaveDocStrings'()), ('nested--13444-4951--in--un--initDocStrings'()), [], [], {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', <<"main"/utf8>>}}}}.
'un--getPTypeDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPTermLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E8, E9, E10, E11, E12, E13)); {'Idris.Idris.Syntax.PLet', E14, E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V15 end(E14, E15, E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.PCase', E21, E22, E23} -> (fun (V22, V23, V24) -> V22 end(E21, E22, E23)); {'Idris.Idris.Syntax.PLocal', E24, E25, E26} -> (fun (V25, V26, V27) -> V25 end(E24, E25, E26)); {'Idris.Idris.Syntax.PUpdate', E27, E28} -> (fun (V28, V29) -> V28 end(E27, E28)); {'Idris.Idris.Syntax.PApp', E29, E30, E31} -> (fun (V30, V31, V32) -> V30 end(E29, E30, E31)); {'Idris.Idris.Syntax.PWithApp', E32, E33, E34} -> (fun (V33, V34, V35) -> V33 end(E32, E33, E34)); {'Idris.Idris.Syntax.PAutoApp', E35, E36, E37} -> (fun (V36, V37, V38) -> V36 end(E35, E36, E37)); {'Idris.Idris.Syntax.PNamedApp', E38, E39, E40, E41} -> (fun (V39, V40, V41, V42) -> V39 end(E38, E39, E40, E41)); {'Idris.Idris.Syntax.PDelayed', E42, E43, E44} -> (fun (V43, V44, V45) -> V43 end(E42, E43, E44)); {'Idris.Idris.Syntax.PDelay', E45, E46} -> (fun (V46, V47) -> V46 end(E45, E46)); {'Idris.Idris.Syntax.PForce', E47, E48} -> (fun (V48, V49) -> V48 end(E47, E48)); {'Idris.Idris.Syntax.PSearch', E49, E50} -> (fun (V50, V51) -> V50 end(E49, E50)); {'Idris.Idris.Syntax.PPrimVal', E51, E52} -> (fun (V52, V53) -> V52 end(E51, E52)); {'Idris.Idris.Syntax.PQuote', E53, E54} -> (fun (V54, V55) -> V54 end(E53, E54)); {'Idris.Idris.Syntax.PQuoteName', E55, E56} -> (fun (V56, V57) -> V56 end(E55, E56)); {'Idris.Idris.Syntax.PQuoteDecl', E57, E58} -> (fun (V58, V59) -> V58 end(E57, E58)); {'Idris.Idris.Syntax.PUnquote', E59, E60} -> (fun (V60, V61) -> V60 end(E59, E60)); {'Idris.Idris.Syntax.PRunElab', E61, E62} -> (fun (V62, V63) -> V62 end(E61, E62)); {'Idris.Idris.Syntax.PHole', E63, E64, E65} -> (fun (V64, V65, V66) -> V64 end(E63, E64, E65)); {'Idris.Idris.Syntax.PType', E66} -> (fun (V67) -> V67 end(E66)); {'Idris.Idris.Syntax.PAs', E67, E68, E69, E70} -> (fun (V68, V69, V70, V71) -> V68 end(E67, E68, E69, E70)); {'Idris.Idris.Syntax.PDotted', E71, E72} -> (fun (V72, V73) -> V72 end(E71, E72)); {'Idris.Idris.Syntax.PImplicit', E73} -> (fun (V74) -> V74 end(E73)); {'Idris.Idris.Syntax.PInfer', E74} -> (fun (V75) -> V75 end(E74)); {'Idris.Idris.Syntax.POp', E75, E76, E77, E78, E79} -> (fun (V76, V77, V78, V79, V80) -> V76 end(E75, E76, E77, E78, E79)); {'Idris.Idris.Syntax.PPrefixOp', E80, E81, E82, E83} -> (fun (V81, V82, V83, V84) -> V81 end(E80, E81, E82, E83)); {'Idris.Idris.Syntax.PSectionL', E84, E85, E86, E87} -> (fun (V85, V86, V87, V88) -> V85 end(E84, E85, E86, E87)); {'Idris.Idris.Syntax.PSectionR', E88, E89, E90, E91} -> (fun (V89, V90, V91, V92) -> V89 end(E88, E89, E90, E91)); {'Idris.Idris.Syntax.PEq', E92, E93, E94} -> (fun (V93, V94, V95) -> V93 end(E92, E93, E94)); {'Idris.Idris.Syntax.PBracketed', E95, E96} -> (fun (V96, V97) -> V96 end(E95, E96)); {'Idris.Idris.Syntax.PString', E97, E98} -> (fun (V98, V99) -> V98 end(E97, E98)); {'Idris.Idris.Syntax.PMultiline', E99, E100, E101} -> (fun (V100, V101, V102) -> V100 end(E99, E100, E101)); {'Idris.Idris.Syntax.PDoBlock', E102, E103, E104} -> (fun (V103, V104, V105) -> V103 end(E102, E103, E104)); {'Idris.Idris.Syntax.PBang', E105, E106} -> (fun (V106, V107) -> V106 end(E105, E106)); {'Idris.Idris.Syntax.PIdiom', E107, E108} -> (fun (V108, V109) -> V108 end(E107, E108)); {'Idris.Idris.Syntax.PList', E109, E110, E111} -> (fun (V110, V111, V112) -> V110 end(E109, E110, E111)); {'Idris.Idris.Syntax.PSnocList', E112, E113, E114} -> (fun (V113, V114, V115) -> V113 end(E112, E113, E114)); {'Idris.Idris.Syntax.PPair', E115, E116, E117} -> (fun (V116, V117, V118) -> V116 end(E115, E116, E117)); {'Idris.Idris.Syntax.PDPair', E118, E119, E120, E121, E122} -> (fun (V119, V120, V121, V122, V123) -> V119 end(E118, E119, E120, E121, E122)); {'Idris.Idris.Syntax.PUnit', E123} -> (fun (V124) -> V124 end(E123)); {'Idris.Idris.Syntax.PIfThenElse', E124, E125, E126, E127} -> (fun (V125, V126, V127, V128) -> V125 end(E124, E125, E126, E127)); {'Idris.Idris.Syntax.PComprehension', E128, E129, E130} -> (fun (V129, V130, V131) -> V129 end(E128, E129, E130)); {'Idris.Idris.Syntax.PRewrite', E131, E132, E133} -> (fun (V132, V133, V134) -> V132 end(E131, E132, E133)); {'Idris.Idris.Syntax.PRange', E134, E135, E136, E137} -> (fun (V135, V136, V137, V138) -> V135 end(E134, E135, E136, E137)); {'Idris.Idris.Syntax.PRangeStream', E138, E139, E140} -> (fun (V139, V140, V141) -> V139 end(E138, E139, E140)); {'Idris.Idris.Syntax.PPostfixApp', E141, E142, E143} -> (fun (V142, V143, V144) -> V142 end(E141, E142, E143)); {'Idris.Idris.Syntax.PPostfixAppPartial', E144, E145} -> (fun (V145, V146) -> V145 end(E144, E145)); {'Idris.Idris.Syntax.PUnifyLog', E146, E147, E148} -> (fun (V147, V148, V149) -> V147 end(E146, E147, E148)); {'Idris.Idris.Syntax.PWithUnambigNames', E149, E150, E151} -> (fun (V150, V151, V152) -> V150 end(E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.PClaim', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.PDef', E5, E6} -> (fun (V6, V7) -> V6 end(E5, E6)); {'Idris.Idris.Syntax.PData', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> V8 end(E7, E8, E9, E10)); {'Idris.Idris.Syntax.PParameters', E11, E12, E13} -> (fun (V12, V13, V14) -> V12 end(E11, E12, E13)); {'Idris.Idris.Syntax.PUsing', E14, E15, E16} -> (fun (V15, V16, V17) -> V15 end(E14, E15, E16)); {'Idris.Idris.Syntax.PReflect', E17, E18} -> (fun (V18, V19) -> V18 end(E17, E18)); {'Idris.Idris.Syntax.PInterface', E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V20 end(E19, E20, E21, E22, E23, E24, E25, E26, E27)); {'Idris.Idris.Syntax.PImplementation', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V29 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); {'Idris.Idris.Syntax.PRecord', E39, E40, E41, E42, E43, E44, E45} -> (fun (V40, V41, V42, V43, V44, V45, V46) -> V40 end(E39, E40, E41, E42, E43, E44, E45)); {'Idris.Idris.Syntax.PMutual', E46, E47} -> (fun (V47, V48) -> V47 end(E46, E47)); {'Idris.Idris.Syntax.PFixity', E48, E49, E50, E51} -> (fun (V49, V50, V51, V52) -> V49 end(E48, E49, E50, E51)); {'Idris.Idris.Syntax.PNamespace', E52, E53, E54} -> (fun (V53, V54, V55) -> V53 end(E52, E53, E54)); {'Idris.Idris.Syntax.PTransform', E55, E56, E57, E58} -> (fun (V56, V57, V58, V59) -> V56 end(E55, E56, E57, E58)); {'Idris.Idris.Syntax.PRunElabDecl', E59, E60} -> (fun (V60, V61) -> V60 end(E59, E60)); {'Idris.Idris.Syntax.PDirective', E61, E62} -> (fun (V62, V63) -> V62 end(E61, E62)); {'Idris.Idris.Syntax.PBuiltin', E63, E64, E65} -> (fun (V64, V65, V66) -> V64 end(E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPDataDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E5, E6, E7} -> (fun (V6, V7, V8) -> V6 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPClauseLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V5, V6, V7, V8, V9, V10) -> V5 end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V11, V12) -> V11 end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> V3 end(E2, E3, E4, E5)); {'Idris.Idris.Syntax.DoBindPat', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> V7 end(E6, E7, E8, E9)); {'Idris.Idris.Syntax.DoLet', E10, E11, E12, E13, E14, E15} -> (fun (V11, V12, V13, V14, V15, V16) -> V11 end(E10, E11, E12, E13, E14, E15)); {'Idris.Idris.Syntax.DoLetPat', E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21) -> V17 end(E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.DoLetLocal', E21, E22} -> (fun (V22, V23) -> V22 end(E21, E22)); {'Idris.Idris.Syntax.DoRewrite', E23, E24} -> (fun (V24, V25) -> V24 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--directiveList'() -> [{'Idris.Idris.Syntax.Hide', ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.Logging', {'Idris.Prelude.Types.Nothing'}} | [{'Idris.Idris.Syntax.LazyOn', 0} | [{'Idris.Idris.Syntax.UnboundImplicits', 0} | [{'Idris.Idris.Syntax.AmbigDepth', 0} | [{'Idris.Idris.Syntax.PairNames', ('nested--8725-1183--in--un--ph'()), ('nested--8725-1183--in--un--ph'()), ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.RewriteName', ('nested--8725-1183--in--un--ph'()), ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.PrimInteger', ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.PrimString', ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.PrimChar', ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.PrimDouble', ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.CGAction', <<""/utf8>>, <<""/utf8>>} | [{'Idris.Idris.Syntax.Names', ('nested--8725-1183--in--un--ph'()), []} | [{'Idris.Idris.Syntax.StartExpr', {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, ('nested--8725-1183--in--un--ph'())}} | [{'Idris.Idris.Syntax.Overloadable', ('nested--8725-1183--in--un--ph'())} | [{'Idris.Idris.Syntax.Extension', 0} | [{'Idris.Idris.Syntax.DefaultTotality', 2} | [{'Idris.Idris.Syntax.PrefixRecordProjections', 1} | [{'Idris.Idris.Syntax.AutoImplicitDepth', 0} | [{'Idris.Idris.Syntax.NFMetavarThreshold', 0} | [{'Idris.Idris.Syntax.SearchTimeout', 0} | []]]]]]]]]]]]]]]]]]]]]].
'un--definedInData'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> [V2 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('nested--10005-1742--in--un--getName'(V1, V3, V4, V5, V2, V6)) end, V5))] end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E5, E6, E7} -> (fun (V7, V8, V9) -> [V8 | []] end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--definedIn'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.Syntax.PClaim', E2, E3, E4, E5, E6} -> (fun (V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.MkPTy', E7, E8, E9, E10, E11} -> (fun (V8, V9, V10, V11, V12) -> [V10 | ('un--definedIn'(V2))] end(E7, E8, E9, E10, E11)); _ -> ('un--definedIn'(V2)) end end(E2, E3, E4, E5, E6)); {'Idris.Idris.Syntax.PData', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedInData'(V16)), ('un--definedIn'(V2)))) end(E12, E13, E14, E15)); {'Idris.Idris.Syntax.PParameters', E16, E17, E18} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedIn'(V19)), ('un--definedIn'(V2)))) end(E16, E17, E18)); {'Idris.Idris.Syntax.PUsing', E19, E20, E21} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedIn'(V22)), ('un--definedIn'(V2)))) end(E19, E20, E21)); {'Idris.Idris.Syntax.PNamespace', E22, E23, E24} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(('un--definedIn'(V25)), ('un--definedIn'(V2)))) end(E22, E23, E24)); _ -> ('un--definedIn'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--defPass'(V0) -> case ('dn--un--==_Eq_Pass'(V0, 0)) of 1 -> 1; 0 -> ('dn--un--==_Eq_Pass'(V0, 2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--applyArgs'(V0, V1) -> case V1 of [] -> V0; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> ('un--applyArgs'({'Idris.Idris.Syntax.PApp', V4, V0, V5}, V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--PTypeDecl'() -> {'Idris.Idris.Syntax.PTypeDecl\x{27}', {'Idris.Core.Name.Name'}}.
'un--PTerm'() -> {'Idris.Idris.Syntax.PTerm\x{27}', {'Idris.Core.Name.Name'}}.
'un--PStr'() -> {'Idris.Idris.Syntax.PStr\x{27}', {'Idris.Core.Name.Name'}}.
'un--PFnOpt'() -> {'Idris.Idris.Syntax.PFnOpt\x{27}', {'Idris.Core.Name.Name'}}.
'un--PFieldUpdate'() -> {'Idris.Idris.Syntax.PFieldUpdate\x{27}', {'Idris.Core.Name.Name'}}.
'un--PField'() -> {'Idris.Idris.Syntax.PField\x{27}', {'Idris.Core.Name.Name'}}.
'un--PDo'() -> {'Idris.Idris.Syntax.PDo\x{27}', {'Idris.Core.Name.Name'}}.
'un--PDecl'() -> {'Idris.Idris.Syntax.PDecl\x{27}', {'Idris.Core.Name.Name'}}.
'un--PDataDecl'() -> {'Idris.Idris.Syntax.PDataDecl\x{27}', {'Idris.Core.Name.Name'}}.
'un--PClause'() -> {'Idris.Idris.Syntax.PClause\x{27}', {'Idris.Core.Name.Name'}}.
'un--OpStr\x{27}'(V0) -> V0.
'un--OpStr'() -> ('un--OpStr\x{27}'({'Idris.Core.Name.Name'})).
'un--IPTerm'() -> {'Idris.Idris.Syntax.PTerm\x{27}', {'Idris.Core.TT.KindedName'}}.
