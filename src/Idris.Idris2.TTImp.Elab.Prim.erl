-module('Idris.Idris2.TTImp.Elab.Prim').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--checkPrim'/2
]).
'un--checkPrim'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.I', V2}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntType'}}} end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V3) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.I8', V3}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int8Type'}}} end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V4) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.I16', V4}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int16Type'}}} end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V5) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.I32', V5}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int32Type'}}} end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V6) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.I64', V6}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int64Type'}}} end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V7) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.BI', V7}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntegerType'}}} end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V8) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.B8', V8}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits8Type'}}} end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V9) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.B16', V9}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits16Type'}}} end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V10) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.B32', V10}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits32Type'}}} end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V11) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.B64', V11}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits64Type'}}} end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V12) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Str', V12}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.StringType'}}} end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V13) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Ch', V13}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.CharType'}}} end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V14) -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Db', V14}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.DoubleType'}}} end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.WorldVal'}}, {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.WorldType'}}} end()); {'Idris.Core.TT.IntType'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntType'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int8Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int16Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int32Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int64Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntegerType'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits8Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits16Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits32Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits64Type'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.StringType'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.StringType'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.CharType'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.CharType'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.DoubleType'}}, {'Idris.Core.TT.TType', V0}} end()); {'Idris.Core.TT.WorldType'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.WorldType'}}, {'Idris.Core.TT.TType', V0}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
