-module('Idris.Idris2.Idris.IDEMode.MakeClause').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--makeWith-3910'/3,
  'nested--4024-3959--in--un--replaceStr'/7,
  'nested--3880-3822--in--un--readLHS'/4,
  'nested--3880-3823--in--un--pref'/4,
  'nested--4024-3960--in--un--newLines'/4,
  'nested--3880-3825--in--un--mkWithPat'/5,
  'nested--3880-3824--in--un--mkWithArg'/5,
  'nested--4024-3958--in--un--addCase'/5,
  'nested--4024-3957--in--un--addBrackets'/5,
  'un--showRHSName'/1,
  'un--makeWith'/2,
  'un--makeCase'/3
]).
'case--makeWith-3910'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V8 = case ('Idris.Idris2.Data.String':'un--span'(fun (V5) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V5)) end, V4)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.String':'un--length'(V6)), V7} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V9 = ('Idris.Idris2.Builtin':'un--fst'(V8))), begin (V10 = ('Idris.Idris2.Builtin':'un--snd'(V8))), begin (V11 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('nested--3880-3822--in--un--readLHS'(V0, V1, 0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V10))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--3880-3824--in--un--mkWithArg'(V0, V1, V3, V9, V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('nested--3880-3825--in--un--mkWithPat'(V0, V1, V3, V9, V11)))))) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4024-3959--in--un--replaceStr'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of <<""/utf8>> -> <<""/utf8>>; _ -> case ('Idris.Idris2.Data.String':'un--isPrefixOf'(V4, V6)) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--4024-3958--in--un--addCase'(V0, V1, V2, V3, V5)), ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--drop'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V6)))))))); 0 -> ('Idris.Idris2.Prelude.Types':'un--strCons'(('erlang':'hd'(('string':'next_grapheme'(V6)))), ('nested--4024-3959--in--un--replaceStr'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), V4, V5, case ('string':'next_grapheme'(V6)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V7, V8) -> V8 end(E0, E1)); _ -> <<""/utf8>> end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--3880-3822--in--un--readLHS'(V0, V1, V2, V3) -> case V2 of 0 -> case V3 of [E4 | E5] -> (fun (V4, V5) -> case V4 of $= -> []; _ -> case V3 of [E6 | E7] -> (fun (V6, V7) -> case V6 of $( -> [$( | ('nested--3880-3822--in--un--readLHS'(V0, V1, (1 + V2), V7))]; ${ -> [${ | ('nested--3880-3822--in--un--readLHS'(V0, V1, (1 + V2), V7))]; $) -> [$) | ('nested--3880-3822--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V7))]; $} -> [$} | ('nested--3880-3822--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V7))]; _ -> [V6 | ('nested--3880-3822--in--un--readLHS'(V0, V1, V2, V7))] end end(E6, E7)); [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> case V3 of [E2 | E3] -> (fun (V8, V9) -> case V8 of $( -> [$( | ('nested--3880-3822--in--un--readLHS'(V0, V1, (1 + V2), V9))]; ${ -> [${ | ('nested--3880-3822--in--un--readLHS'(V0, V1, (1 + V2), V9))]; $) -> [$) | ('nested--3880-3822--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V9))]; $} -> [$} | ('nested--3880-3822--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V9))]; _ -> [V8 | ('nested--3880-3822--in--un--readLHS'(V0, V1, V2, V9))] end end(E2, E3)); [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V3 of [E0 | E1] -> (fun (V10, V11) -> case V10 of $( -> [$( | ('nested--3880-3822--in--un--readLHS'(V0, V1, (1 + V2), V11))]; ${ -> [${ | ('nested--3880-3822--in--un--readLHS'(V0, V1, (1 + V2), V11))]; $) -> [$) | ('nested--3880-3822--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V11))]; $} -> [$} | ('nested--3880-3822--in--un--readLHS'(V0, V1, ('Idris.Idris2.Data.Nat':'un--pred'(V2)), V11))]; _ -> [V10 | ('nested--3880-3822--in--un--readLHS'(V0, V1, V2, V11))] end end(E0, E1)); [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--3880-3823--in--un--pref'(V0, V1, V2, V3) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(V3, $ )))))).
'nested--4024-3960--in--un--newLines'(V0, V1, V2, V3) -> ('nested--4024-3959--in--un--replaceStr'(V0, V1, V2, 0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))), V3, V0)).
'nested--3880-3825--in--un--mkWithPat'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--3880-3823--in--un--pref'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V3, (1 + (1 + 0)))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"| with_pat = ?"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showRHSName'(V1)), <<"_rhs"/utf8>>)))))))).
'nested--3880-3824--in--un--mkWithArg'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--3880-3823--in--un--pref'(V0, V1, V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, <<"with (_)"/utf8>>)))).
'nested--4024-3958--in--un--addCase'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ('nested--4024-3957--in--un--addBrackets'(V0, V1, V2, V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V3, case V2 of 1 -> (1 + (1 + (1 + (1 + (1 + (1 + 0)))))); 0 -> (1 + (1 + (1 + (1 + (1 + 0))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), $ )))), V6)))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4024-3957--in--un--addBrackets'(V0, V1, V2, V3, V4) -> case V3 of 0 -> V4; 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, <<")"/utf8>>)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showRHSName'(V0) -> begin (V1 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V0))))), case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, fun (V28) -> ('Idris.Idris2.Parser.Lexer.Source':'un--isOpChar'(V28)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))) of 1 -> <<"op"/utf8>>; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--makeWith'(V0, V1) -> ('case--makeWith-3910'(V1, V0, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V1)))).
'un--makeCase'(V0, V1, V2) -> begin (V3 = {'Idris.Builtin.MkPair', <<"case _ of"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case_val => ?"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}), ('nested--4024-3960--in--un--newLines'(V2, V1, V0, V3)) end.
