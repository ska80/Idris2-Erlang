-module('Idris.Idris2.Parser.Support').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in escape\x{27}-4589'/5,
  'case--case block in case block in escape\x{27}-4526'/5,
  'case--case block in case block in escape\x{27}-4458'/5,
  'case--case block in escape\x{27}-4161'/4,
  'nested--6687-4061--in--un--toOct'/5,
  'nested--6687-4060--in--un--toHex'/5,
  'nested--6076-3445--in--un--fromError'/3,
  'un--oct'/1,
  'un--hex'/1,
  'un--getEsc'/1,
  'un--getCharLit'/1,
  'un--fromParsingErrors'/3,
  'un--fromLitError'/2,
  'un--fromLexError'/2,
  'un--escape\x{27}'/2,
  'un--escape'/2,
  'un--dec'/1
]).
'case--case block in case block in escape\x{27}-4589'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V5 of [] -> case V6 of [E2 | E3] -> (fun (V7, V8) -> case V8 of [E4 | E5] -> (fun (V9, V10) -> case V10 of [E6 | E7] -> (fun (V11, V12) -> case ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V7 | [V9 | [V11 | []]]])))) of {'Idris.Prelude.Types.Just', E8} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V12)), fun (V14) -> {'Idris.Prelude.Types.Just', [V13 | V14]} end)) end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V7 | [V9 | []]])))) of {'Idris.Prelude.Types.Just', E9} -> (fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, [V11 | V12])), fun (V16) -> {'Idris.Prelude.Types.Just', [V15 | V16]} end)) end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--escape\x{27}'(V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); [] -> case ('un--getEsc'(('Idris.Idris2.Prelude.Types':'un--fastPack'([V7 | [V9 | []]])))) of {'Idris.Prelude.Types.Just', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Just', [V17 | []]} end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--escape\x{27}'(V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('un--escape\x{27}'(V2, V6)) end end(E4, E5)); _ -> ('un--escape\x{27}'(V2, V6)) end end(E2, E3)); _ -> ('un--escape\x{27}'(V2, V6)) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V6)), fun (V18) -> {'Idris.Prelude.Types.Just', [('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Int'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)))))) | V18]} end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in escape\x{27}-4526'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V5 of [] -> ('un--escape\x{27}'(V2, V6)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6687-4061--in--un--toOct'(V0, V1, V2, 1, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V6)), fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(V7)) | V8])) end)) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in escape\x{27}-4458'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V5 of [] -> ('un--escape\x{27}'(V2, V6)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6687-4060--in--un--toHex'(V0, V1, V2, 1, ('Idris.Idris2.Prelude.Types.List':'un--reverse'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V6)), fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(V7)) | V8])) end)) end)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in escape\x{27}-4161'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V4 of $\x{5c} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{5c} | V6])) end)); $\x{a} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V7)) end)); $& -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V8)) end)); $a -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{7} | V9])) end)); $b -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{8} | V10])) end)); $f -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{c} | V11])) end)); $n -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{a} | V12])) end)); $r -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{d} | V13])) end)); $t -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{9} | V14])) end)); $v -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{b} | V15])) end)); $\x{27} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{27} | V16])) end)); $\x{22} -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V2, V5)), fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([$\x{22} | V17])) end)); $x -> ('case--case block in case block in escape\x{27}-4458'(V0, V1, V2, V5, ('Idris.Idris2.Data.List':'un--span'(fun (V18) -> ('Idris.Idris2.Prelude.Types':'un--isHexDigit'(V18)) end, V5)))); $o -> ('case--case block in case block in escape\x{27}-4526'(V0, V1, V2, V5, ('Idris.Idris2.Data.List':'un--span'(fun (V19) -> ('Idris.Idris2.Prelude.Types':'un--isOctDigit'(V19)) end, V5)))); _ -> ('case--case block in case block in escape\x{27}-4589'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--span'(fun (V20) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V20)) end, V3)))) end end(E0, E1)); _ -> ('case--case block in case block in escape\x{27}-4589'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--span'(fun (V21) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V21)) end, V3)))) end.
'nested--6687-4061--in--un--toOct'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Idris.Prelude.Types.Just', 0}; [E0 | E1] -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--oct'(('Idris.Idris2.Prelude.Types':'un--toLower'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6687-4061--in--un--toOct'(V0, V1, V2, ((V3 * 8) rem 9223372036854775808), V6)), fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(((((V7 * V3) rem 9223372036854775808) + V8) rem 9223372036854775808))) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6687-4060--in--un--toHex'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Idris.Prelude.Types.Just', 0}; [E0 | E1] -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--hex'(('Idris.Idris2.Prelude.Types':'un--toLower'(V5)))), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--6687-4060--in--un--toHex'(V0, V1, V2, ((V3 * 16) rem 9223372036854775808), V6)), fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(((((V7 * V3) rem 9223372036854775808) + V8) rem 9223372036854775808))) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6076-3445--in--un--fromError'(V0, V1, V2) -> case V2 of {'Idris.Libraries.Text.Parser.Core.Error', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.MkFC', V1, {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}, ('Idris.Idris2.Libraries.Data.String.Extra':'un--+>'(V3, $.))} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> begin (V6 = ('Idris.Idris2.Libraries.Text.Bounded':'un--startBounds'(V5))), begin (V7 = ('Idris.Idris2.Libraries.Text.Bounded':'un--endBounds'(V5))), begin (V18 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, V6, V7)) of 1 -> {'Idris.Core.FC.MkFC', V1, V6, case V6 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V16, V17) -> {'Idris.Builtin.MkPair', V16, ((V17 + 1) rem 9223372036854775808)} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}; 0 -> {'Idris.Core.FC.MkFC', V1, V6, V7}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Builtin.MkPair', V18, ('Idris.Idris2.Libraries.Data.String.Extra':'un--+>'(V3, $.))} end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--oct'(V0) -> case V0 of $0 -> {'Idris.Prelude.Types.Just', 0}; $1 -> {'Idris.Prelude.Types.Just', 1}; $2 -> {'Idris.Prelude.Types.Just', 2}; $3 -> {'Idris.Prelude.Types.Just', 3}; $4 -> {'Idris.Prelude.Types.Just', 4}; $5 -> {'Idris.Prelude.Types.Just', 5}; $6 -> {'Idris.Prelude.Types.Just', 6}; $7 -> {'Idris.Prelude.Types.Just', 7}; _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--hex'(V0) -> case V0 of $0 -> {'Idris.Prelude.Types.Just', 0}; $1 -> {'Idris.Prelude.Types.Just', 1}; $2 -> {'Idris.Prelude.Types.Just', 2}; $3 -> {'Idris.Prelude.Types.Just', 3}; $4 -> {'Idris.Prelude.Types.Just', 4}; $5 -> {'Idris.Prelude.Types.Just', 5}; $6 -> {'Idris.Prelude.Types.Just', 6}; $7 -> {'Idris.Prelude.Types.Just', 7}; $8 -> {'Idris.Prelude.Types.Just', 8}; $9 -> {'Idris.Prelude.Types.Just', 9}; $a -> {'Idris.Prelude.Types.Just', 10}; $b -> {'Idris.Prelude.Types.Just', 11}; $c -> {'Idris.Prelude.Types.Just', 12}; $d -> {'Idris.Prelude.Types.Just', 13}; $e -> {'Idris.Prelude.Types.Just', 14}; $f -> {'Idris.Prelude.Types.Just', 15}; _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getEsc'(V0) -> case V0 of <<"NUL"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{0}}; <<"SOH"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1}}; <<"STX"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{2}}; <<"ETX"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{3}}; <<"EOT"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{4}}; <<"ENQ"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{5}}; <<"ACK"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{6}}; <<"BEL"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{7}}; <<"BS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{8}}; <<"HT"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{9}}; <<"LF"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{a}}; <<"VT"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{b}}; <<"FF"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{c}}; <<"CR"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{d}}; <<"SO"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{e}}; <<"SI"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{f}}; <<"DLE"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{10}}; <<"DC1"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{11}}; <<"DC2"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{12}}; <<"DC3"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{13}}; <<"DC4"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{14}}; <<"NAK"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{15}}; <<"SYN"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{16}}; <<"ETB"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{17}}; <<"CAN"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{18}}; <<"EM"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{19}}; <<"SUB"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1a}}; <<"ESC"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1b}}; <<"FS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1c}}; <<"GS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1d}}; <<"RS"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1e}}; <<"US"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{1f}}; <<"SP"/utf8>> -> {'Idris.Prelude.Types.Just', $ }; <<"DEL"/utf8>> -> {'Idris.Prelude.Types.Just', $\x{7f}}; _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getCharLit'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape'(0, V0)), fun (V1) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V1)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)))) of 1 -> {'Idris.Prelude.Types.Just', ('erlang':'hd'(('string':'next_grapheme'(V1))))}; 0 -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V1)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))) of 1 -> {'Idris.Prelude.Types.Just', $\x{0}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)).
'un--fromParsingErrors'(V0, V1, V2) -> {'Idris.Core.Core.ParseFail', ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V3) -> ('nested--6076-3445--in--un--fromError'(V0, V1, V3)) end, V2))}.
'un--fromLitError'(V0, V1) -> case V1 of {'Idris.Libraries.Text.Literate.MkLitErr', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Core.Core.LitFail', {'Idris.Core.FC.MkFC', V0, {'Idris.Builtin.MkPair', V2, V3}, {'Idris.Builtin.MkPair', V2, ((V3 + 1) rem 9223372036854775808)}}} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromLexError'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', E6, E7} -> (fun (V4, V5) -> case V3 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V8, V9) -> {'Idris.Core.Core.LexFail', {'Idris.Core.FC.MkFC', V0, V4, V5}, <<"Bracket is not properly closed."/utf8>>} end(E18, E19)); _ -> case V3 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V12, V13) -> {'Idris.Core.Core.LexFail', {'Idris.Core.FC.MkFC', V0, {'Idris.Builtin.MkPair', V10, V12}, {'Idris.Builtin.MkPair', V10, ((V12 + 1) rem 9223372036854775808)}}, <<"Can\x{27}t recognise token."/utf8>>} end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> case V3 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V16, V17) -> {'Idris.Core.Core.LexFail', {'Idris.Core.FC.MkFC', V0, {'Idris.Builtin.MkPair', V14, V16}, {'Idris.Builtin.MkPair', V14, ((V16 + 1) rem 9223372036854775808)}}, <<"Can\x{27}t recognise token."/utf8>>} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V20, V21) -> {'Idris.Core.Core.LexFail', {'Idris.Core.FC.MkFC', V0, {'Idris.Builtin.MkPair', V18, V20}, {'Idris.Builtin.MkPair', V18, ((V20 + 1) rem 9223372036854775808)}}, <<"Can\x{27}t recognise token."/utf8>>} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--escape\x{27}'(V0, V1) -> case V1 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([])); [E0 | E1] -> (fun (V2, V3) -> case ('Idris.Idris2.Data.List':'un--isPrefixOf'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V6, V7)) end end}, V0, [V2 | V3])) of 1 -> ('case--case block in escape\x{27}-4161'(V2, V3, V0, ('Idris.Idris2.Data.List':'un--drop'(('Idris.Idris2.Prelude.Types.List':'un--length'(V0)), [V2 | V3])))); 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--escape\x{27}'(V0, V3)), fun (V8) -> {'Idris.Prelude.Types.Just', [V2 | V8]} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--escape'(V0, V1) -> begin (V2 = [$\x{5c} | ('Idris.Idris2.Data.List':'un--replicate'(V0, $#))]), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end, fun (V7) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(V7)) end, ('un--escape\x{27}'(V2, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V1)))))) end.
'un--dec'(V0) -> case V0 of $0 -> {'Idris.Prelude.Types.Just', 0}; $1 -> {'Idris.Prelude.Types.Just', 1}; $2 -> {'Idris.Prelude.Types.Just', 2}; $3 -> {'Idris.Prelude.Types.Just', 3}; $4 -> {'Idris.Prelude.Types.Just', 4}; $5 -> {'Idris.Prelude.Types.Just', 5}; $6 -> {'Idris.Prelude.Types.Just', 6}; $7 -> {'Idris.Prelude.Types.Just', 7}; $8 -> {'Idris.Prelude.Types.Just', 8}; $9 -> {'Idris.Prelude.Types.Just', 9}; _ -> {'Idris.Prelude.Types.Nothing'} end.
