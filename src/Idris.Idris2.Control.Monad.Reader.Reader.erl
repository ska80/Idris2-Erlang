-module('Idris.Idris2.Control.Monad.Reader.Reader').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--pure_Applicative_((ReaderT $stateType) $f)'/3,
  'dn--un--map_Functor_((ReaderT $stateType) $f)'/4,
  'dn--un--lift_MonadTrans_(ReaderT $stateType)'/3,
  'dn--un--liftIO_HasIO_((ReaderT $stateType) $m)'/3,
  'dn--un--join_Monad_((ReaderT $stateType) $m)'/3,
  'dn--un--empty_Alternative_((ReaderT $stateType) $f)'/2,
  'dn--un--__Impl_Monad_((ReaderT $stateType) $m)'/1,
  'dn--un--__Impl_MonadTrans_(ReaderT $stateType)'/5,
  'dn--un--__Impl_HasIO_((ReaderT $stateType) $m)'/1,
  'dn--un--__Impl_Functor_((ReaderT $stateType) $f)'/6,
  'dn--un--__Impl_Applicative_((ReaderT $stateType) $f)'/1,
  'dn--un--__Impl_Alternative_((ReaderT $stateType) $f)'/1,
  'dn--un-->>=_Monad_((ReaderT $stateType) $m)'/4,
  'dn--un--<|>_Alternative_((ReaderT $stateType) $f)'/4,
  'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'/4,
  'un--runReaderT'/2,
  'un--runReader'/2,
  'un--mapReaderT'/3,
  'un--Reader'/2
]).
'dn--un--pure_Applicative_((ReaderT $stateType) $f)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V3, V4, V5) -> ((V4('erased'))(V1)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_((ReaderT $stateType) $f)'(V0, V1, V2, V3) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(V0, V1, (V2(V3)))).
'dn--un--lift_MonadTrans_(ReaderT $stateType)'(V0, V1, V2) -> V1.
'dn--un--liftIO_HasIO_((ReaderT $stateType) $m)'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> ((V4('erased'))(V1)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_((ReaderT $stateType) $m)'(V0, V1, V2) -> ('dn--un-->>=_Monad_((ReaderT $stateType) $m)'(V0, V1, fun (V3) -> V3 end, V2)).
'dn--un--empty_Alternative_((ReaderT $stateType) $f)'(V0, V1) -> case V0 of {'Idris.Prelude.Interfaces.MkAlternative', E0, E1, E2} -> (fun (V2, V3, V4) -> (V3('erased')) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Monad_((ReaderT $stateType) $m)'(V0) -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E6, E7, E8} -> (fun (V15, V16, V17) -> V15 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13, V14)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V23, V24, V25) -> V23 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20, V21, V22)) end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un-->>=_Monad_((ReaderT $stateType) $m)'(V0, V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> ('dn--un--join_Monad_((ReaderT $stateType) $m)'(V0, V32, V33)) end end end}.
'dn--un--__Impl_MonadTrans_(ReaderT $stateType)'(V0, V1, V2, V3, V4) -> ('dn--un--lift_MonadTrans_(ReaderT $stateType)'(V2, V3, V4)).
'dn--un--__Impl_HasIO_((ReaderT $stateType) $m)'(V0) -> {'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V8, V9, V10) -> case V8 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V11, V12, V13) -> V11 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V17, V18) -> case V17 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V19, V20, V21) -> V19 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, V16)) end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V27, V28) -> case V27 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V29, V30, V31) -> V29 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V24, V25, V26)) end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('dn--un-->>=_Monad_((ReaderT $stateType) $m)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E18, E19} -> (fun (V37, V38) -> V37 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34, V35, V36)) end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> ('dn--un--join_Monad_((ReaderT $stateType) $m)'(case V0 of {'Idris.Prelude.IO.MkHasIO', E20, E21} -> (fun (V42, V43) -> V42 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V40, V41)) end end end}, fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--liftIO_HasIO_((ReaderT $stateType) $m)'(V0, V45, V46)) end end end}.
'dn--un--__Impl_Functor_((ReaderT $stateType) $f)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'(V0, V3, V4, V5)).
'dn--un--__Impl_Applicative_((ReaderT $stateType) $f)'(V0) -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'(V0, V10, V11)) end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(V0, V14, V15, V16)) end end end end end}.
'dn--un--__Impl_Alternative_((ReaderT $stateType) $f)'(V0) -> {'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkAlternative', E0, E1, E2} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4, V5)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkAlternative', E6, E7, E8} -> (fun (V15, V16, V17) -> V15 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13, V14)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(case V0 of {'Idris.Prelude.Interfaces.MkAlternative', E9, E10, E11} -> (fun (V23, V24, V25) -> V23 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20, V21, V22)) end end end end end}, fun (V26) -> fun (V27) -> ('dn--un--empty_Alternative_((ReaderT $stateType) $f)'(V0, V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('dn--un--<|>_Alternative_((ReaderT $stateType) $f)'(V0, V29, V30, V31)) end end end end}.
'dn--un-->>=_Monad_((ReaderT $stateType) $m)'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkMonad', E0, E1, E2} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))((V1(V3))))(fun (V7) -> ((V2(V7))(V3)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<|>_Alternative_((ReaderT $stateType) $f)'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkAlternative', E0, E1, E2} -> (fun (V4, V5, V6) -> (((V6('erased'))((V1(V3))))(fun () -> ((V2())(V3)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(V0, V1, V2, V3) -> begin (V4 = (V1(V3))), begin (V5 = (V2(V3))), case V0 of {'Idris.Prelude.Interfaces.MkApplicative', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V8('erased'))('erased'))(V4))(V5)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--runReaderT'(V0, V1) -> (V1(V0)).
'un--runReader'(V0, V1) -> (V1(V0)).
'un--mapReaderT'(V0, V1, V2) -> (V0((V1(V2)))).
'un--Reader'(V0, V1) -> {'Idris.Control.Monad.Reader.Reader.ReaderT', V0, fun (V2) -> {'Idris.Control.Monad.Identity.Identity', V2} end, V1}.
