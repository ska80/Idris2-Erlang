-module('Idris.Idris2.TTImp.Interactive.MakeLemma').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7757-3081--in--un--getArg'/4,
  'un--used'/1,
  'un--mkType'/3,
  'un--mkApp'/3,
  'un--makeLemma'/7,
  'un--hiddenName'/1,
  'un--getArgs'/5,
  'un--bindableArg'/2,
  'un--bindable'/2
]).
'nested--7757-3081--in--un--getArg'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V9 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Just', {'Idris.TTImp.TTImp.IVar', V2, V4}} end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--used'(V0) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1, V2)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V3, V4)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V7, V8)) end end}}, V0)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkType'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V11, V12) -> {'Idris.TTImp.TTImp.IPi', V0, V11, V9, V7, V12, ('un--mkType'(V0, V4, V2))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkApp'(V0, V1, V2) -> ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V0, V1}, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V3) -> ('nested--7757-3081--in--un--getArg'(V2, V1, V0, V3)) end, V2)))).
'un--makeLemma'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V14 = begin (V11 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, [], V10, {'Idris.Core.Env.Nil'}, V5, V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('un--getArgs'([], V1, {'Idris.Core.Env.Nil'}, V4, V13))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('un--mkType'(V2, V17, V18)), ('un--mkApp'(V2, V3, V17))}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hiddenName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> case V1 of <<"_"/utf8>> -> 1; _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--getArgs'(V0, V1, V2, V3, V4) -> case V3 of 0 -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E47} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V9) -> begin (V20 = begin (V10 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V9, V2, V4, V5))), case V10 of {'Idris.Prelude.Types.Left', E49} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E51} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V16) -> case V16 of {'Idris.Core.TT.MkKindedName', E53, E54, E55} -> (fun (V17, V18, V19) -> V19 end(E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15))} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V12)), V5)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V20 of {'Idris.Prelude.Types.Left', E56} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V22}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V23 = (V3 - 1)), fun (V24) -> case V4 of {'Idris.Core.TT.Bind', E11, E12, E13, E14} -> (fun (V25, V26, V27, V28) -> case V27 of {'Idris.Core.TT.Pi', E26, E27, E28, E29} -> (fun (V29, V30, V31, V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E30} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V36) -> begin (V47 = begin (V37 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V36, V2, V32, V24))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E34} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V42) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V43) -> case V43 of {'Idris.Core.TT.MkKindedName', E36, E37, E38} -> (fun (V44, V45, V46) -> V46 end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V42))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V39)), V24)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V47 of {'Idris.Prelude.Types.Left', E39} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V49) -> begin (V51 = ('Idris.Idris2.TTImp.Utils':'un--uniqueName'(V36, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V50) -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V50)) end, V0)), ('Idris.Idris2.Core.Name':'un--nameRoot'(V26)), V24))), case V51 of {'Idris.Prelude.Types.Left', E41} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V53) -> begin (V54 = {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V53}}), begin (V55 = (('un--getArgs'([V54 | V0], V1, {'Idris.Core.Env.::', V27, V2}, V23, ('Idris.Idris2.Core.TT':'un--renameTop'(V54, V28))))(V24))), case V55 of {'Idris.Prelude.Types.Left', E43} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V58, V59) -> begin (V60 = case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V30, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V28, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', V54} end()); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> {'Idris.Prelude.Types.Just', V54}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V61 = case case ('un--used'(V30)) of 1 -> case ('un--bindableArg'(0, V28)) of 1 -> 0; 0 -> case ('un--hiddenName'(V26)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Core.TT.Explicit'}; 0 -> {'Idris.Core.TT.Implicit'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V26, {'Idris.Builtin.MkPair', V60, {'Idris.Builtin.MkPair', V61, {'Idris.Builtin.MkPair', V30, V49}}}} | V58], V59}} end end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27, E28, E29)); _ -> begin (V63 = begin (V62 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E15} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V65) -> begin (V76 = begin (V66 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V65, V2, V4, V24))), case V66 of {'Idris.Prelude.Types.Left', E17} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V68) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V69) -> case V69 of {'Idris.Prelude.Types.Left', E19} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V71) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V72) -> case V72 of {'Idris.Core.TT.MkKindedName', E21, E22, E23} -> (fun (V73, V74, V75) -> V75 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V71))} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V68)), V24)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V76 of {'Idris.Prelude.Types.Left', E24} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V78}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14)); _ -> begin (V80 = begin (V79 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E0} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V82) -> begin (V93 = begin (V83 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V82, V2, V4, V24))), case V83 of {'Idris.Prelude.Types.Left', E2} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V85) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V86) -> case V86 of {'Idris.Prelude.Types.Left', E4} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V88) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp.Functor':'dn--un--map_Functor_RawImp\x{27}'(fun (V89) -> case V89 of {'Idris.Core.TT.MkKindedName', E6, E7, E8} -> (fun (V90, V91, V92) -> V92 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V88))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V85)), V24)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V93 of {'Idris.Prelude.Types.Left', E9} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V95}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--bindableArg'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case ('un--bindable'(V0, V9)) of 1 -> 1; 0 -> ('un--bindableArg'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V0)), V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); _ -> 0 end.
'un--bindable'(V0, V1) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V4, V5, V6) -> case V5 of {'Idris.Core.TT.TyCon', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, fun (V35) -> ('un--bindable'(V0, V35)) end, V3)) end(E5, E6)); {'Idris.Core.TT.DataCon', E7, E8} -> (fun (V36, V37) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V49)) end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V53, V54, V55, V56)) end end end end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V61, V62, V63)) end end end end end}, fun (V64) -> ('un--bindable'(V0, V64)) end, V3)) end(E7, E8)); _ -> 0 end end(E2, E3, E4)); {'Idris.Core.TT.TDelayed', E9, E10, E11} -> (fun (V65, V66, V67) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V79)) end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V83, V84, V85, V86)) end end end end end end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V88)) end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V91, V92, V93)) end end end end end}, fun (V94) -> ('un--bindable'(V0, V94)) end, [V67 | V3])) end(E9, E10, E11)); {'Idris.Core.TT.TDelay', E12, E13, E14, E15} -> (fun (V95, V96, V97, V98) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V101, V102, V103)) end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V110)) end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V114, V115, V116, V117)) end end end end end end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V119)) end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V122, V123, V124)) end end end end end}, fun (V125) -> ('un--bindable'(V0, V125)) end, [V98 | V3])) end(E12, E13, E14, E15)); {'Idris.Core.TT.TForce', E16, E17, E18} -> (fun (V126, V127, V128) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V131, V132, V133)) end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V136, V137, V138)) end end end end end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V140)) end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V144, V145, V146, V147)) end end end end end end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V149)) end end, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V152, V153, V154)) end end end end end}, fun (V155) -> ('un--bindable'(V0, V155)) end, [V128 | V3])) end(E16, E17, E18)); {'Idris.Core.TT.Local', E19, E20, E21} -> (fun (V156, V157, V158) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V158)); _ -> 0 end end(E19, E20, E21)); _ -> 0 end end(E0, E1)); _ -> 0 end.
