-module('Idris.Idris2.TTImp.Unelab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--dropParams-4723'/5,
  'case--case block in unelabCase-4336'/9,
  'nested--6951-3815--in--un--usedBinder'/6,
  'nested--7230-5279--in--un--uniqueLocal'/11,
  'nested--10665-6959--in--un--toName'/9,
  'nested--10665-6961--in--un--showScope'/9,
  'nested--10665-6960--in--un--showNScope'/9,
  'nested--7208-4085--in--un--nthArg'/8,
  'nested--7230-5278--in--un--next'/10,
  'nested--7208-4086--in--un--mkClause'/8,
  'nested--7208-4087--in--un--mkCase'/9,
  'nested--7241-6406--in--un--isNoSugar'/15,
  'nested--7241-6407--in--un--isDefImp'/15,
  'nested--7208-4083--in--un--idxOrDefault'/8,
  'nested--7208-4084--in--un--getNth'/7,
  'nested--7208-4082--in--un--findArgPos'/6,
  'nested--7218-4701--in--un--apply'/6,
  'dn--un--show_Show_IArg'/1,
  'dn--un--showPrec_Show_IArg'/2,
  'un--used'/2,
  'un--unelabUniqueBinders'/5,
  'un--unelabTy\x{27}'/6,
  'un--unelabTy'/7,
  'un--unelabSugar'/4,
  'un--unelabPi'/7,
  'un--unelabNoSugar'/5,
  'un--unelabNoPatvars'/5,
  'un--unelabNest'/5,
  'un--unelabCase'/6,
  'un--unelabBinder'/12,
  'un--unelab'/4,
  'un--getFnArgs'/2,
  'un--dropParams'/3
]).
'case--dropParams-4723'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> case V5 of {'Idris.TTImp.TTImp.IVar', E2, E3} -> (fun (V8, V9) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, case V9 of {'Idris.Core.TT.MkKindedName', E5, E6, E7} -> (fun (V14, V15, V16) -> V16 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V0, V1}} end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('nested--7218-4701--in--un--apply'(V0, V1, V2, V3, {'Idris.TTImp.TTImp.IVar', V8, V9}, ('Idris.Idris2.Data.List':'un--drop'(V17, V6)))), V1}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V0, V1}} end end end(E0, E1)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V0, V1}} end end.
'case--case block in unelabCase-4336'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Context.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> case ('nested--7208-4082--in--un--findArgPos'(V0, V1, V2, V3, V4, V11)) of {'Idris.Prelude.Types.Just', E5} -> (fun (V14) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V1)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V10)))) of 1 -> ('nested--7208-4087--in--un--mkCase'(V0, V1, V2, V3, V4, V13, V14, 0, V1)); 0 -> fun (V15) -> {'Idris.Prelude.Types.Right', V0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V0} end end end(E0, E1, E2, E3, E4)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', V0} end end.
'nested--6951-3815--in--un--usedBinder'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case ('un--used'(V4, V8)) of 1 -> 1; 0 -> ('un--used'(V4, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('un--used'(V4, ('Idris.Idris2.Core.TT':'un--binderType'(V5)))) end.
'nested--7230-5279--in--un--uniqueLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V10, V9)) of 1 -> ('nested--7230-5279--in--un--uniqueLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('nested--7230-5278--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)))); 0 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10665-6959--in--un--toName'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V9, V10, V11) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V11))} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--10665-6961--in--un--showScope'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--10665-6960--in--un--showNScope'(V0, V1, V2, V3, V4, V5, V6, V7, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V9) -> ('nested--10665-6959--in--un--toName'(V0, V1, V2, V3, V4, V5, V6, V7, V9)) end, V8)))))).
'nested--10665-6960--in--un--showNScope'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> <<"[no locals in scope]"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"[locals in scope: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)) end, ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V8)))))), <<"]"/utf8>>)))) end.
'nested--7208-4085--in--un--nthArg'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V8, V9, V10) -> ('nested--7208-4084--in--un--getNth'(V0, V1, V2, V3, V4, V6, {'Idris.Core.TT.App', V8, V9, V10})) end(E0, E1, E2)); _ -> {'Idris.Core.TT.Erased', V5, 0} end.
'nested--7230-5278--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V10, V11) -> {'Idris.Core.Name.MN', V10, ((V11 + 1) rem 9223372036854775808)} end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V12) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_UserName'(V12)), 0} end(E2)); {'Idris.Core.Name.NS', E3, E4} -> (fun (V13, V14) -> {'Idris.Core.Name.NS', V13, ('nested--7230-5278--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14))} end(E3, E4)); _ -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), 0} end.
'nested--7208-4086--in--un--mkClause'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = ('nested--7208-4085--in--un--nthArg'(V0, V1, V2, V3, V4, V5, V6, V12))), fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V8, V4, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Unelaborating LHS"/utf8>> end, V14, V15))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = ('un--unelabTy'(V8, V4, {'Idris.TTImp.Unelab.Full'}, V3, V10, V14, V15))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V8, V4, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Unelaborating RHS"/utf8>> end, V13, V15))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V8, V4, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), <<"In Env"/utf8>>, V10, V15))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = ('un--unelabTy'(V8, V4, {'Idris.TTImp.Unelab.Full'}, V3, V10, V13, V15))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V5, ('Idris.Idris2.Builtin':'un--fst'(V21)), ('Idris.Idris2.Builtin':'un--fst'(V30))}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7208-4087--in--un--mkCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of 0 -> fun (V9) -> case V8 of [E2 | E3] -> (fun (V10, V11) -> case V10 of {'Idris.TTImp.Unelab.Exp', E4, E5} -> (fun (V12, V13) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('nested--7208-4086--in--un--mkClause'(V0, V1, V2, V3, V4, V12, V7, V14)) end, V5, [], V9))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', V12, V13, {'Idris.TTImp.TTImp.Implicit', V12, 0}, V17}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> {'Idris.Prelude.Types.Right', V0} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', V0} end end; _ -> begin (V18 = (V6 - 1)), case V8 of [E0 | E1] -> (fun (V19, V20) -> ('nested--7208-4087--in--un--mkCase'(V0, V1, V2, V3, V4, V5, V18, (1 + V7), V20)) end(E0, E1)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V0} end end end end.
'nested--7241-6406--in--un--isNoSugar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.Unelab.NoSugar', E0} -> (fun (V15) -> 1 end(E0)); _ -> 0 end.
'nested--7241-6407--in--un--isDefImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.TT.DefImplicit', E0} -> (fun (V15) -> 1 end(E0)); _ -> 0 end.
'nested--7208-4083--in--un--idxOrDefault'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of 0 -> case V7 of [E2 | E3] -> (fun (V8, V9) -> V8 end(E2, E3)); _ -> case V7 of [] -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V10 = (V5 - 1)), case V7 of [E0 | E1] -> (fun (V11, V12) -> ('nested--7208-4083--in--un--idxOrDefault'(V0, V1, V2, V3, V4, V10, V6, V12)) end(E0, E1)); _ -> case V7 of [] -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--7208-4084--in--un--getNth'(V0, V1, V2, V3, V4, V5, V6) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V6)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('nested--7208-4083--in--un--idxOrDefault'(V0, V1, V2, V3, V4, V5, V7, V8)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7208-4082--in--un--findArgPos'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Prelude.Types.Just', V7} end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--7218-4701--in--un--apply'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> V4; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.TTImp.Unelab.Exp', E2, E3} -> (fun (V8, V9) -> ('nested--7218-4701--in--un--apply'(V0, V1, V2, V3, {'Idris.TTImp.TTImp.IApp', V8, V4, V9}, V7)) end(E2, E3)); {'Idris.TTImp.Unelab.Auto', E4, E5} -> (fun (V10, V11) -> ('nested--7218-4701--in--un--apply'(V0, V1, V2, V3, {'Idris.TTImp.TTImp.IAutoApp', V10, V4, V11}, V7)) end(E4, E5)); {'Idris.TTImp.Unelab.Named', E6, E7, E8} -> (fun (V12, V13, V14) -> ('nested--7218-4701--in--un--apply'(V0, V1, V2, V3, {'Idris.TTImp.TTImp.INamedApp', V12, V4, V13, V14}, V7)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_IArg'(V0) -> case V0 of {'Idris.TTImp.Unelab.Exp', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_KindedName'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_KindedName'(V4, V5)) end end}, V2)) end(E0, E1)); {'Idris.TTImp.Unelab.Auto', E2, E3} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V8) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_KindedName'(V8)) end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_KindedName'(V9, V10)) end end}, V7)), <<"}"/utf8>>)))) end(E2, E3)); {'Idris.TTImp.Unelab.Named', E4, E5, E6} -> (fun (V11, V12, V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_KindedName'(V14)) end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_KindedName'(V15, V16)) end end}, V13)), <<"}"/utf8>>)))))))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_IArg'(V0, V1) -> ('dn--un--show_Show_IArg'(V1)).
'un--used'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V4)) end(E0, E1, E2)); {'Idris.Core.TT.Bind', E3, E4, E5, E6} -> (fun (V5, V6, V7, V8) -> case ('nested--6951-3815--in--un--usedBinder'(V5, V6, V8, V7, V0, V7)) of 1 -> 1; 0 -> ('un--used'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V0)), V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5, E6)); {'Idris.Core.TT.Meta', E7, E8, E9, E10} -> (fun (V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V28, V29, V30, V31)) end end end end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V33)) end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V36, V37, V38)) end end end end end}, fun (V39) -> ('un--used'(V0, V39)) end, V12)) end(E7, E8, E9, E10)); {'Idris.Core.TT.App', E11, E12, E13} -> (fun (V40, V41, V42) -> case ('un--used'(V0, V41)) of 1 -> 1; 0 -> ('un--used'(V0, V42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); {'Idris.Core.TT.As', E14, E15, E16, E17} -> (fun (V43, V44, V45, V46) -> ('un--used'(V0, V46)) end(E14, E15, E16, E17)); {'Idris.Core.TT.TDelayed', E18, E19, E20} -> (fun (V47, V48, V49) -> ('un--used'(V0, V49)) end(E18, E19, E20)); {'Idris.Core.TT.TDelay', E21, E22, E23, E24} -> (fun (V50, V51, V52, V53) -> ('un--used'(V0, V53)) end(E21, E22, E23, E24)); {'Idris.Core.TT.TForce', E25, E26, E27} -> (fun (V54, V55, V56) -> ('un--used'(V0, V56)) end(E25, E26, E27)); _ -> 0 end.
'un--unelabUniqueBinders'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.NoSugar', 1}, [], V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V8))), fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found local name: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))) end, V10))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V21 = ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--binderType'(('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V16)) end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V19, V20)) end end end end}, V0, V8, V4))))))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V6, {'Idris.Core.TT.MkKindedName', {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bound'}}, V9, V9}}, V21}} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E5, E6, E7} -> (fun (V22, V23, V24) -> fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V60 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V24, case V29 of {'Idris.Core.Context.MkDefs', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V30 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V25))), case V60 of {'Idris.Prelude.Types.Left', E40} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V62) -> case V62 of {'Idris.Prelude.Types.Just', E42} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V24, V25))), case V64 of {'Idris.Prelude.Types.Left', E43} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V66) -> begin (V68 = case V2 of {'Idris.TTImp.Unelab.NoSugar', E45} -> (fun (V67) -> {'Idris.Prelude.Types.Right', V66} end(E45)); _ -> ('Idris.Idris2.Core.Context':'un--aliasName'(V1, V66, V25)) end), case V68 of {'Idris.Prelude.Types.Left', E46} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V70) -> begin (V71 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unelab.var"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Found name:"/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V24)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (aka "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V66)), <<")"/utf8>>)))) | [<<"sugared to"/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V70)) | []]]]]])) end, V25))), case V71 of {'Idris.Prelude.Types.Left', E48} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V73) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V22, {'Idris.Core.TT.MkKindedName', {'Idris.Prelude.Types.Just', V23}, V66, V70}}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--embed'(V63))))}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V2 of {'Idris.TTImp.Unelab.ImplicitHoles'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V22, 1}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V22))}} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V22, {'Idris.Core.TT.MkKindedName', {'Idris.Prelude.Types.Just', V23}, V24, V24}}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V22))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); {'Idris.Core.TT.Meta', E50, E51, E52, E53} -> (fun (V74, V75, V76, V77) -> fun (V78) -> begin (V80 = begin (V79 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E54} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V75))), begin (V114 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V76}, case V82 of {'Idris.Core.Context.MkDefs', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V84 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V78))), case V114 of {'Idris.Prelude.Types.Left', E86} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V116) -> case V116 of {'Idris.Prelude.Types.Just', E88} -> (fun (V117) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IHole', V74, V83}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--embed'(V117))))}} end(E88)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V2 of {'Idris.TTImp.Unelab.ImplicitHoles'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V74, 1}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V74))}} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IHole', V74, V83}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V74))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E50, E51, E52, E53)); {'Idris.Core.TT.Bind', E89, E90, E91, E92} -> (fun (V118, V119, V120, V121) -> fun (V122) -> begin (V123 = ('un--unelabTy'([V119 | V0], V1, V2, V3, {'Idris.Core.Env.::', V120, V4}, V121, V122))), case V123 of {'Idris.Prelude.Types.Left', E93} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V125) -> case V125 of {'Idris.Builtin.MkPair', E95, E96} -> (fun (V126, V127) -> case V2 of {'Idris.TTImp.Unelab.NoSugar', E99} -> (fun (V128) -> case V128 of 1 -> begin (V129 = ('nested--7230-5279--in--un--uniqueLocal'(V0, V119, V121, V120, V118, V4, V3, V2, V1, V0, V119))), begin (V130 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V127))(V122))), case V130 of {'Idris.Prelude.Types.Left', E102} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V132) -> ('un--unelabBinder'(V0, V1, V2, V3, V118, V4, V129, V120, ('Idris.Idris2.Core.TT':'un--renameVars'((1 + 0), V121)), V126, ('Idris.Idris2.Core.TT':'un--renameVars'((1 + 0), V132)), V122)) end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V133 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V127))(V122))), case V133 of {'Idris.Prelude.Types.Left', E100} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V135) -> ('un--unelabBinder'(V0, V1, V2, V3, V118, V4, V119, V120, V121, V126, V135, V122)) end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E99)); _ -> begin (V136 = (('Idris.Idris2.Core.Normalise.Eval':'un--getTerm'(V127))(V122))), case V136 of {'Idris.Prelude.Types.Left', E97} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V138) -> ('un--unelabBinder'(V0, V1, V2, V3, V118, V4, V119, V120, V121, V126, V138, V122)) end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89, E90, E91, E92)); {'Idris.Core.TT.App', E104, E105, E106} -> (fun (V139, V140, V141) -> fun (V142) -> begin (V143 = ('un--unelabTy'(V0, V1, V2, V3, V4, V140, V142))), case V143 of {'Idris.Prelude.Types.Left', E107} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V145) -> case V145 of {'Idris.Builtin.MkPair', E109, E110} -> (fun (V146, V147) -> begin (V148 = ('un--unelabTy'(V0, V1, V2, V3, V4, V141, V142))), case V148 of {'Idris.Prelude.Types.Left', E111} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V150) -> case V150 of {'Idris.Builtin.MkPair', E113, E114} -> (fun (V151, V152) -> begin (V153 = (('Idris.Idris2.Core.Normalise.Eval':'un--getNF'(V1, V147))(V142))), case V153 of {'Idris.Prelude.Types.Left', E115} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V155) -> begin (V157 = begin (V156 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V156} end), case V157 of {'Idris.Prelude.Types.Left', E117} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V159) -> case V155 of {'Idris.Core.Value.NBind', E119, E120, E121, E122} -> (fun (V160, V161, V162, V163) -> case V162 of {'Idris.Core.TT.Pi', E123, E124, E125, E126} -> (fun (V164, V165, V166, V167) -> case V166 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V168 = (((V163(V159))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, V141))))(V142))), case V168 of {'Idris.Prelude.Types.Left', E129} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V170) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IApp', V139, V146, V151}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V159, V4, V170))}} end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V171 = (((V163(V159))(('Idris.Idris2.Core.Normalise.Eval':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, V141))))(V142))), case V171 of {'Idris.Prelude.Types.Left', E127} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V173) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.INamedApp', V139, V146, V161, V151}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V159, V4, V173))}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E123, E124, E125, E126)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IApp', V139, V146, V151}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V139))}} end end(E119, E120, E121, E122)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IApp', V139, V146, V151}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V139))}} end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E104, E105, E106)); {'Idris.Core.TT.As', E131, E132, E133, E134} -> (fun (V174, V175, V176, V177) -> fun (V178) -> begin (V179 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V176))(V178))), case V179 of {'Idris.Prelude.Types.Left', E135} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V181) -> case V181 of {'Idris.Builtin.MkPair', E137, E138} -> (fun (V182, V183) -> begin (V184 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V177))(V178))), case V184 of {'Idris.Prelude.Types.Left', E139} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V186) -> case V186 of {'Idris.Builtin.MkPair', E141, E142} -> (fun (V187, V188) -> case V182 of {'Idris.TTImp.TTImp.IVar', E143, E144} -> (fun (V189, V190) -> case V2 of {'Idris.TTImp.Unelab.NoSugar', E145} -> (fun (V191) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IAs', V174, ('Idris.Idris2.Core.TT':'un--getLoc'(V176)), V175, case V190 of {'Idris.Core.TT.MkKindedName', E146, E147, E148} -> (fun (V192, V193, V194) -> V194 end(E146, E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V187}, V188}} end(E145)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V187, V188}} end end(E143, E144)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V187, V188}} end end(E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E131, E132, E133, E134)); {'Idris.Core.TT.TDelayed', E149, E150, E151} -> (fun (V195, V196, V197) -> fun (V198) -> begin (V199 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V197))(V198))), case V199 of {'Idris.Prelude.Types.Left', E152} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V201) -> case V201 of {'Idris.Builtin.MkPair', E154, E155} -> (fun (V202, V203) -> begin (V205 = begin (V204 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V204} end), case V205 of {'Idris.Prelude.Types.Left', E156} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V207) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IDelayed', V195, V196, V202}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V195))}} end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149, E150, E151)); {'Idris.Core.TT.TDelay', E158, E159, E160, E161} -> (fun (V208, V209, V210, V211) -> fun (V212) -> begin (V213 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V211))(V212))), case V213 of {'Idris.Prelude.Types.Left', E162} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V215) -> case V215 of {'Idris.Builtin.MkPair', E164, E165} -> (fun (V216, V217) -> begin (V219 = begin (V218 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V218} end), case V219 of {'Idris.Prelude.Types.Left', E166} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V221) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IDelay', V208, V216}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V208))}} end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E158, E159, E160, E161)); {'Idris.Core.TT.TForce', E168, E169, E170} -> (fun (V222, V223, V224) -> fun (V225) -> begin (V226 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V224))(V225))), case V226 of {'Idris.Prelude.Types.Left', E171} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V228) -> case V228 of {'Idris.Builtin.MkPair', E173, E174} -> (fun (V229, V230) -> begin (V232 = begin (V231 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V231} end), case V232 of {'Idris.Prelude.Types.Left', E175} -> (fun (V233) -> {'Idris.Prelude.Types.Left', V233} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V234) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IForce', V222, V229}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V222))}} end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E168, E169, E170)); {'Idris.Core.TT.PrimVal', E177, E178} -> (fun (V235, V236) -> fun (V237) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IPrimVal', V235, V236}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V235))}} end end(E177, E178)); {'Idris.Core.TT.Erased', E179, E180} -> (fun (V238, V239) -> fun (V240) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V238, 1}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V238))}} end end(E179, E180)); {'Idris.Core.TT.TType', E181} -> (fun (V241) -> fun (V242) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IType', V241}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V241))}} end end(E181)); _ -> begin (V243 = ('Idris.Idris2.Core.TT':'un--getLoc'(V5))), fun (V244) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V243, 0}, ('Idris.Idris2.Core.Normalise.Eval':'un--gErased'(V243))}} end end end.
'un--unelabTy'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('un--dropParams'(V1, V3, V9))(V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> (('un--unelabSugar'(V1, V2, V3, V12))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabSugar'(V0, V1, V2, V3) -> case V1 of {'Idris.TTImp.Unelab.NoSugar', E19} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', V3} end end(E19)); {'Idris.TTImp.Unelab.ImplicitHoles'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', V3} end end()); _ -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case ('un--getFnArgs'(V7, [])) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V9 of {'Idris.TTImp.TTImp.IVar', E4, E5} -> (fun (V11, V12) -> case V12 of {'Idris.Core.TT.MkKindedName', E6, E7, E8} -> (fun (V13, V14, V15) -> fun (V16) -> case V15 of {'Idris.Core.Name.NS', E9, E10} -> (fun (V17, V18) -> case V18 of {'Idris.Core.Name.CaseBlock', E11, E12} -> (fun (V19, V20) -> begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unelaborating case "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V22, V23)) end end}, {'Idris.Prelude.Show.MkShow', fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V24)) end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V25, V26)) end end}}, {'Idris.Builtin.MkPair', V19, V20})))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V27) -> ('dn--un--show_Show_IArg'(V27)) end, fun (V28) -> fun (V29) -> ('dn--un--showPrec_Show_IArg'(V28, V29)) end end}, V10)))) | []]])) end, V16))), case V30 of {'Idris.Prelude.Types.Left', E13} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V32) -> begin (V33 = ('un--unelabCase'(V0, V2, {'Idris.Core.Name.NS', V17, {'Idris.Core.Name.CaseBlock', V19, V20}}, V10, V7, V16))), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V39 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unelaborated to: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_(RawImp\x{27} $nm)'({'Idris.Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_KindedName'(V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_KindedName'(V37, V38)) end end}, V35)))) end, V16))), case V39 of {'Idris.Prelude.Types.Left', E17} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V35, V8}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V8}} end end(E9, E10)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V8}} end end end(E6, E7, E8)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V8}} end end end(E4, E5)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V8}} end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabPi'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V7) -> begin (V8 = ('un--unelabTy'(V0, V1, V2, V3, V4, V7, V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V11}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unelabNoSugar'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.NoSugar', 0}, [], V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabNoPatvars'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.ImplicitHoles'}, [], V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabNest'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Meta', E2, E3, E4, E5} -> (fun (V5, V6, V7, V8) -> begin (V9 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V6)), ('nested--10665-6961--in--un--showScope'(V0, V8, V7, V6, V5, V3, V2, V1, V8))))), fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IHole', V5, V9}} end end end(E2, E3, E4, E5)); _ -> fun (V11) -> begin (V12 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.Full'}, V2, V3, V4, V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V14))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--unelabCase'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E34} -> (fun (V43) -> begin (V44 = {'Idris.Prelude.Types.Just', V43}), (('case--case block in unelabCase-4336'(V4, V3, V2, V1, V0, V9, V43, V44, case V43 of {'Idris.Core.Context.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V62 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V4} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V12, V13, V14, V15) -> begin (V16 = ('un--unelabTy'(V0, V1, V2, V3, V5, V15, V11))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V19, V20) -> begin (V21 = ('un--unelabPi'(V0, V1, V2, V3, V5, V14, V11))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.ILam', V4, V13, V23, {'Idris.Prelude.Types.Just', V6}, V19, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Idris.Core.TT.Bind', V4, V6, {'Idris.Core.TT.Pi', V12, V13, V14, V15}, V10}))}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E10, E11, E12, E13} -> (fun (V24, V25, V26, V27) -> begin (V28 = ('un--unelabTy'(V0, V1, V2, V3, V5, V26, V11))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> case V30 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V31, V32) -> begin (V33 = ('un--unelabTy'(V0, V1, V2, V3, V5, V27, V11))), case V33 of {'Idris.Prelude.Types.Left', E18} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V36, V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.ILet', V4, {'Idris.Core.FC.EmptyFC'}, V25, V6, V36, V31, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Idris.Core.TT.Bind', V4, V6, {'Idris.Core.TT.Let', V24, V25, V26, V27}, V10}))}} end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13)); {'Idris.Core.TT.Pi', E22, E23, E24, E25} -> (fun (V38, V39, V40, V41) -> begin (V42 = ('un--unelabTy'(V0, V1, V2, V3, V5, V41, V11))), case V42 of {'Idris.Prelude.Types.Left', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V45, V46) -> begin (V47 = ('un--unelabPi'(V0, V1, V2, V3, V5, V40, V11))), case V47 of {'Idris.Prelude.Types.Left', E30} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V49) -> begin (V50 = case case ('un--used'(0, V8)) of 1 -> 1; 0 -> ('nested--7241-6406--in--un--isNoSugar'(V0, V38, V41, V40, V39, V6, V10, V9, V8, V5, V4, V3, V2, V1, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', V6}; 0 -> case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V39, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> 1; 0 -> ('nested--7241-6407--in--un--isDefImp'(V0, V38, V41, V40, V39, V6, V10, V9, V8, V5, V4, V3, V2, V1, V40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', {'Idris.Core.Name.Underscore'}}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IPi', V4, V39, V49, V50, V45, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V4))}} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23, E24, E25)); {'Idris.Core.TT.PVar', E32, E33, E34, E35} -> (fun (V51, V52, V53, V54) -> begin (V55 = ('un--unelabTy'(V0, V1, V2, V3, V5, V54, V11))), case V55 of {'Idris.Prelude.Types.Left', E36} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V58, V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Idris.Core.TT.Bind', V4, V6, {'Idris.Core.TT.PVTy', V51, V52, V54}, V10}))}} end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33, E34, E35)); {'Idris.Core.TT.PLet', E40, E41, E42, E43} -> (fun (V60, V61, V62, V63) -> begin (V64 = ('un--unelabTy'(V0, V1, V2, V3, V5, V62, V11))), case V64 of {'Idris.Prelude.Types.Left', E44} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V66) -> case V66 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V67, V68) -> begin (V69 = ('un--unelabTy'(V0, V1, V2, V3, V5, V63, V11))), case V69 of {'Idris.Prelude.Types.Left', E48} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V72, V73) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.ILet', V4, {'Idris.Core.FC.EmptyFC'}, V61, V6, V72, V67, V9}, ('Idris.Idris2.Core.Normalise.Eval':'un--gnf'(V0, V5, {'Idris.Core.TT.Bind', V4, V6, {'Idris.Core.TT.PLet', V60, V61, V62, V63}, V10}))}} end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40, E41, E42, E43)); {'Idris.Core.TT.PVTy', E52, E53, E54} -> (fun (V74, V75, V76) -> begin (V77 = ('un--unelabTy'(V0, V1, V2, V3, V5, V76, V11))), case V77 of {'Idris.Prelude.Types.Left', E55} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V79) -> case V79 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V80, V81) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, ('Idris.Idris2.Core.Normalise.Eval':'un--gType'(V4))}} end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unelab'(V0, V1, V2, V3) -> ('un--unelabNest'(V0, V1, [], V2, V3)).
'un--getFnArgs'(V0, V1) -> case V0 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--getFnArgs'(V3, [{'Idris.TTImp.Unelab.Exp', V2, V4} | V1])) end(E0, E1, E2)); {'Idris.TTImp.TTImp.INamedApp', E3, E4, E5, E6} -> (fun (V5, V6, V7, V8) -> ('un--getFnArgs'(V6, [{'Idris.TTImp.Unelab.Named', V5, V7, V8} | V1])) end(E3, E4, E5, E6)); {'Idris.TTImp.TTImp.IAutoApp', E7, E8, E9} -> (fun (V9, V10, V11) -> ('un--getFnArgs'(V10, [{'Idris.TTImp.Unelab.Auto', V9, V11} | V1])) end(E7, E8, E9)); _ -> {'Idris.Builtin.MkPair', V0, V1} end.
'un--dropParams'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('case--dropParams-4723'(V3, V4, V1, V0, ('un--getFnArgs'(V3, [])))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
