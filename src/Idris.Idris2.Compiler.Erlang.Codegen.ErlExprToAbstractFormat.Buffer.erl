-module('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Buffer').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--setUnsignedInt'/5,
  'un--setString'/4,
  'un--setSignedInt'/5,
  'un--setGeneric'/6,
  'un--setDouble'/4,
  'un--resize'/3,
  'un--new'/2,
  'un--getUnsignedInt'/4,
  'un--getString'/4,
  'un--getSignedInt'/4,
  'un--getGeneric'/6,
  'un--getDouble'/3,
  'un--flatten'/3
]).
'un--setUnsignedInt'(V0, V1, V2, V3, V4) -> ('un--setGeneric'({'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Just', 0}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Just', 0}, {'Idris.Prelude.Types.Nothing'}}, V0, V1, V2, V3, V4)).
'un--setString'(V0, V1, V2, V3) -> begin (V4 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Padding"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]}), begin (V5 = {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', V0, <<"Start"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', V0, <<"Loc"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V0}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', V0, <<"Size"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', V0, <<"End"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]]}), begin (V6 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Start"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Value"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"End"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]]}), begin (V7 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Size"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genFunCall'(V0, <<"erlang"/utf8>>, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Value"/utf8>>} | []]))}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Padding"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Binary':'un--zeroPadded'(V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Size"/utf8>>}))}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V0, V5, V4}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V0, [V6 | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}}}}), begin (V8 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', V0, <<"-"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Loc"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genFunCall'(V0, <<"erlang"/utf8>>, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>} | []]))}), begin (V9 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Padding"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Value"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]]}), begin (V10 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Padding"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Binary':'un--zeroPadded'(V0, V8))}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V0, [V9 | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}}), begin (V11 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', V0, (1 + (1 + (1 + 0))), {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Loc"/utf8>>}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Value"/utf8>>}, {'Idris.Data.Vect.Nil'}}}}, [{'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V0, <<"=<"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', V0, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"Bin"/utf8>>} | []]}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"Loc"/utf8>>}}, {'Idris.Data.Vect.Nil'}} | []], V10}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Loc"/utf8>>}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Value"/utf8>>}, {'Idris.Data.Vect.Nil'}}}}, [], V7}, {'Idris.Data.Vect.Nil'}}}}), {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', V0, V11, [V1 | [V2 | [V3 | []]]]} end end end end end end end end.
'un--setSignedInt'(V0, V1, V2, V3, V4) -> ('un--setGeneric'({'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Just', 1}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Just', 0}, {'Idris.Prelude.Types.Nothing'}}, V0, V1, V2, V3, V4)).
'un--setGeneric'(V0, V1, V2, V3, V4, V5) -> begin (V6 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', V2, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Bin"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Padding"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]}), begin (V7 = {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', V2, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', V2, <<"Start"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', V2, <<"Loc"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V2}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', V2, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))}, V0} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', V2, <<"End"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]]}), begin (V8 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', V2, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Start"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Value"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', V2, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))}, V0} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"End"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]]}), begin (V9 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', V2, <<"div"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V2, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))}}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V2, 8}}}), begin (V10 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Padding"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Binary':'un--zeroPadded'(V2, V9))}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V2, V7, V6}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V2, [V8 | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}}}), begin (V11 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', V2, <<"-"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Loc"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genFunCall'(V2, <<"erlang"/utf8>>, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Bin"/utf8>>} | []]))}), begin (V12 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', V2, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Bin"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Padding"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"Value"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', V2, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))}, V0} | []]]]}), begin (V13 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V2, {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Padding"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Binary':'un--zeroPadded'(V2, V11))}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V2, [V12 | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V2, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}}), begin (V14 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', V2, (1 + (1 + (1 + 0))), {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V2, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V2, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Loc"/utf8>>}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Value"/utf8>>}, {'Idris.Data.Vect.Nil'}}}}, [{'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V2, <<"=<"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', V2, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V2, <<"Bin"/utf8>>} | []]}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V2, <<"Loc"/utf8>>}}, {'Idris.Data.Vect.Nil'}} | []], V13}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V2, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V2, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Loc"/utf8>>}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V2, <<"Value"/utf8>>}, {'Idris.Data.Vect.Nil'}}}}, [], V10}, {'Idris.Data.Vect.Nil'}}}}), {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', V2, V14, [V3 | [V4 | [V5 | []]]]} end end end end end end end end end.
'un--setDouble'(V0, V1, V2, V3) -> ('un--setGeneric'({'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Just', 1}, {'Idris.Prelude.Types.Nothing'}}, 64, V0, V1, V2, V3)).
'un--resize'(V0, V1, V2) -> begin (V3 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"NewSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}), begin (V4 = ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genFunCall'(V0, <<"binary"/utf8>>, <<"part"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V0, 0}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"NewSize"/utf8>>} | []]]]))), begin (V5 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V0, [V4 | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"NewSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}), begin (V6 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', V0, (1 + (1 + 0)), {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"NewSize"/utf8>>}, {'Idris.Data.Vect.Nil'}}}, [{'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V0, <<"=<"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', V0, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"Bin"/utf8>>} | []]}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"NewSize"/utf8>>}}, {'Idris.Data.Vect.Nil'}} | []], V3}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"NewSize"/utf8>>}, {'Idris.Data.Vect.Nil'}}}, [], V5}, {'Idris.Data.Vect.Nil'}}}}), {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', V0, V6, [V1 | [V2 | []]]} end end end end.
'un--new'(V0, V1) -> {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V0, [('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Binary':'un--empty'(V0)) | [V1 | []]]}.
'un--getUnsignedInt'(V0, V1, V2, V3) -> ('un--getGeneric'({'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Just', 0}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Just', 0}, {'Idris.Prelude.Types.Nothing'}}, V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V1, 0}}, V1, V2, V3)).
'un--getString'(V0, V1, V2, V3) -> begin (V4 = {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V0}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', V0, <<"Loc"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', V0, <<"Value"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', V0, <<"Len"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V0}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]]}), begin (V5 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V0, V4, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>}}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Value"/utf8>>}, {'Idris.Data.Vect.Nil'}}}), begin (V6 = {'Idris.Data.Vect.::', ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Binary':'un--zeroPadded'(V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Len"/utf8>>})), {'Idris.Data.Vect.Nil'}}), begin (V7 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', V0, (1 + (1 + (1 + 0))), {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Loc"/utf8>>}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Len"/utf8>>}, {'Idris.Data.Vect.Nil'}}}}, [{'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V0, <<"=<"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V0, <<"+"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"Loc"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"Len"/utf8>>}}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', V0, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"Bin"/utf8>>} | []]}}, {'Idris.Data.Vect.Nil'}} | []], V5}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Loc"/utf8>>}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Len"/utf8>>}, {'Idris.Data.Vect.Nil'}}}}, [], V6}, {'Idris.Data.Vect.Nil'}}}}), {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', V0, V7, [V1 | [V2 | [V3 | []]]]} end end end end.
'un--getSignedInt'(V0, V1, V2, V3) -> ('un--getGeneric'({'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Just', 1}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Just', 0}, {'Idris.Prelude.Types.Nothing'}}, V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V1, 0}}, V1, V2, V3)).
'un--getGeneric'(V0, V1, V2, V3, V4, V5) -> begin (V6 = {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', V3, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V3, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V3}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', V3, <<"Loc"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V3, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', V3, <<"Value"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', V3, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))}, V0} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V3, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', V3}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]]}), begin (V7 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V3, V6, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V3, <<"Bin"/utf8>>}}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V3, <<"Value"/utf8>>}, {'Idris.Data.Vect.Nil'}}}), begin (V8 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V3, <<"div"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGLiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V3, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1))}}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGLiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V3, 8}}}), begin (V9 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', V3, (1 + (1 + 0)), {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V3, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V3, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V3, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V3, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V3, <<"Loc"/utf8>>}, {'Idris.Data.Vect.Nil'}}}, [{'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V3, <<"=<"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V3, <<"+"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V3, <<"Loc"/utf8>>}, V8}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', V3, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V3, <<"Bin"/utf8>>} | []]}}, {'Idris.Data.Vect.Nil'}} | []], V7}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V3, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V3, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V3, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V3, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V3, <<"Loc"/utf8>>}, {'Idris.Data.Vect.Nil'}}}, [], {'Idris.Data.Vect.::', V2, {'Idris.Data.Vect.Nil'}}}, {'Idris.Data.Vect.Nil'}}}}), {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', V3, V9, [V4 | [V5 | []]]} end end end end.
'un--getDouble'(V0, V1, V2) -> ('un--getGeneric'({'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Just', 1}, {'Idris.Prelude.Types.Nothing'}}, 64, {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALFloat', V0, 0.0}}, V0, V1, V2)).
'un--flatten'(V0, V1, V2) -> begin (V3 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', V0, <<"-"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"MaxBytes"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genFunCall'(V0, <<"erlang"/utf8>>, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>} | []]))}), begin (V4 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Padding"/utf8>>}, {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'}, {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Just', 2}, {'Idris.Prelude.Types.Nothing'}}} | []]]}), begin (V5 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', V0, {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Padding"/utf8>>}, ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Binary':'un--zeroPadded'(V0, V3))}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V0, [V4 | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}}), begin (V6 = ('Idris.Idris2.Compiler.Erlang.Codegen.ErlExprToAbstractFormat.Internal':'un--genFunCall'(V0, <<"binary"/utf8>>, <<"part"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', V0, 0}} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"BufSize"/utf8>>} | []]]]))), begin (V7 = {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', V0, [V6 | [{'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.Nil'}}), begin (V8 = {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', V0, (1 + (1 + 0)), {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"MaxBytes"/utf8>>}, {'Idris.Data.Vect.Nil'}}}, [{'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', V0, <<"=<"/utf8>>, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', V0, <<"byte_size"/utf8>>, [{'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"Bin"/utf8>>} | []]}, {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', V0, <<"MaxBytes"/utf8>>}}, {'Idris.Data.Vect.Nil'}} | []], V5}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', V0, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V0, [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"Bin"/utf8>>} | [{'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"BufSize"/utf8>>} | []]]}, {'Idris.Data.Vect.::', {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', V0, <<"MaxBytes"/utf8>>}, {'Idris.Data.Vect.Nil'}}}, [], V7}, {'Idris.Data.Vect.Nil'}}}}), {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', V0, V8, [V1 | [V2 | []]]} end end end end end end.
