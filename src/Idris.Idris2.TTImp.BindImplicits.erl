-module('Idris.Idris2.TTImp.BindImplicits').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7056-3196--in--un--tag'/4,
  'nested--5945-2594--in--un--renameAlt'/7,
  'nested--7235-3362--in--un--piBind'/6,
  'un--renameIBinds'/3,
  'un--piBindNames'/5,
  'un--getUsings'/2,
  'un--getUsing'/2,
  'un--doBind'/2,
  'un--bindUsings'/2,
  'un--bindTypeNamesUsed'/6,
  'un--bindTypeNames'/6,
  'un--bindNames'/4,
  'un--addUsing'/2
]).
'nested--7056-3196--in--un--tag'(V0, V1, V2, V3) -> ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ((V4 + V2) rem 9223372036854775808) end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V5) -> fun (V6) -> ((V5 + V6) rem 9223372036854775808) end end, fun (V7) -> fun (V8) -> ((V7 * V8) rem 9223372036854775808) end end, fun (V9) -> V9 end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V12, V13)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V16, V17)) end end}, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V30, V31)) end end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V32) -> fun (V33) -> ((V32 + V33) rem 9223372036854775808) end end, fun (V34) -> fun (V35) -> ((V34 * V35) rem 9223372036854775808) end end, fun (V36) -> V36 end}, fun (V37) -> ((0 - V37) rem 9223372036854775808) end, fun (V38) -> fun (V39) -> ((V38 - V39) rem 9223372036854775808) end end}}}, 0, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'(V3)))))))), V3)).
'nested--5945-2594--in--un--renameAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.TTImp.TTImp.UniqueDefault', E0} -> (fun (V7) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V10, V11)) end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V16, V17)) end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V20, V21)) end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V23)) end end}, ('un--renameIBinds'(V4, V3, V7)), fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V28, V29)) end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V34, V35)) end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V38, V39)) end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V41)) end end}, {'Idris.TTImp.TTImp.UniqueDefault', V24}, V25)) end end, V6)) end(E0)); _ -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V44, V45)) end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V50, V51)) end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V54, V55)) end end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V57)) end end}, V5, V6)) end.
'nested--7235-3362--in--un--piBind'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> V5; [E0 | E1] -> (fun (V6, V7) -> {'Idris.TTImp.TTImp.IPi', V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V6}}}, {'Idris.TTImp.TTImp.Implicit', V2, 0}, ('nested--7235-3362--in--un--piBind'(V0, V1, V2, V3, V7, V5))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--renameIBinds'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> case V6 of {'Idris.Prelude.Types.Just', E6} -> (fun (V9) -> case V9 of {'Idris.Core.Name.UN', E7} -> (fun (V10) -> case V10 of {'Idris.Core.Name.Basic', E8} -> (fun (V11) -> begin (V12 = {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V11}}), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V15, V16)) end end}, V11, V0)) of 1 -> begin (V17 = ('Idris.Idris2.TTImp.Utils':'un--getUnique'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1)), V11))), begin (V18 = {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V17}}), begin (V21 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V19}} end, ('Idris.Idris2.Data.List':'un--filter'(fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V20, V11)) end, V1)))), [{'Idris.Builtin.MkPair', V12, {'Idris.TTImp.TTImp.IVar', V3, V18}} | []], V8))), fun (V22) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V31, V32)) end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V35, V36)) end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V38)) end end}, ('un--renameIBinds'(V0, [V17 | V1], V21)), fun (V39) -> fun (V40) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V43, V44)) end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V49, V50)) end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V53, V54)) end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V56)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V57) -> fun (V58) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V61, V62)) end end end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V64)) end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V67, V68)) end end end end}, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V71, V72)) end end end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V74)) end end}, fun (V75) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', V75, V75})) end, fun (V76) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V84, V85)) end end end end, V79, V80, V81)) end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V91, V92)) end end end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V94)) end end, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V97, V98)) end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V101, V102)) end end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V104)) end end}, V87, V88)) end end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V112, V113)) end end end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V115)) end end, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V118, V119)) end end end end}, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V122, V123)) end end end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V125)) end end}, V107, V108, V109)) end end end end end}, fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V133, V134)) end end end end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V136)) end end, fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V139, V140)) end end end end}, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V143, V144)) end end end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V146)) end end}, V128, V129, V130)) end end end end end, fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V152, V153)) end end end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V155)) end end, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V158, V159)) end end end end}, fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V162, V163)) end end end end, fun (V164) -> fun (V165) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V165)) end end}, V148, V149)) end end end}, fun (V166) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V11, V17} | V76], 0})) end, fun () -> fun (V167) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V170, V171)) end end end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V173)) end end, fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V176, V177)) end end end end}, fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V180, V181)) end end end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V183)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, {'Idris.Prelude.Types.Just', V18}, V57, V39}, V167)) end end)) end, V58)) end end, V40)) end end, V22)) end end end end; 0 -> fun (V184) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V187, V188)) end end end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V190)) end end, fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V193, V194)) end end end end}, fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V197, V198)) end end end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V200)) end end}, ('un--renameIBinds'(V0, V1, V8)), fun (V201) -> fun (V202) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V205, V206)) end end end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V208)) end end, fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V211, V212)) end end end end}, fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V215, V216)) end end end end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V218)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V219) -> fun (V220) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V223, V224)) end end end end, fun (V225) -> fun (V226) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V226)) end end, fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V229, V230)) end end end end}, fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V233, V234)) end end end end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V236)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, {'Idris.Prelude.Types.Just', V12}, V219, V201}, V220)) end end, V202)) end end, V184)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> fun (V237) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V240, V241)) end end end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V243)) end end, fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V246, V247)) end end end end}, fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V250, V251)) end end end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V253)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V254) -> fun (V255) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V258, V259)) end end end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V261)) end end, fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V264, V265)) end end end end}, fun (V266) -> fun (V267) -> fun (V268) -> fun (V269) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V268, V269)) end end end end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V271)) end end}, ('un--renameIBinds'(V0, V1, V8)), fun (V272) -> fun (V273) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V274) -> fun (V275) -> fun (V276) -> fun (V277) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V276, V277)) end end end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V279)) end end, fun (V280) -> fun (V281) -> fun (V282) -> fun (V283) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V282, V283)) end end end end}, fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V286, V287)) end end end end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V289)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V254, V272}, V273)) end end, V255)) end end, V237)) end end end(E7)); _ -> fun (V290) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V293, V294)) end end end end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V296)) end end, fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V299, V300)) end end end end}, fun (V301) -> fun (V302) -> fun (V303) -> fun (V304) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V303, V304)) end end end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V306)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V307) -> fun (V308) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V311, V312)) end end end end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V314)) end end, fun (V315) -> fun (V316) -> fun (V317) -> fun (V318) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V317, V318)) end end end end}, fun (V319) -> fun (V320) -> fun (V321) -> fun (V322) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V321, V322)) end end end end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V324)) end end}, ('un--renameIBinds'(V0, V1, V8)), fun (V325) -> fun (V326) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V327) -> fun (V328) -> fun (V329) -> fun (V330) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V329, V330)) end end end end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V332)) end end, fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V335, V336)) end end end end}, fun (V337) -> fun (V338) -> fun (V339) -> fun (V340) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V339, V340)) end end end end, fun (V341) -> fun (V342) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V342)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V307, V325}, V326)) end end, V308)) end end, V290)) end end end(E6)); _ -> fun (V343) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V344) -> fun (V345) -> fun (V346) -> fun (V347) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V346, V347)) end end end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V349)) end end, fun (V350) -> fun (V351) -> fun (V352) -> fun (V353) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V352, V353)) end end end end}, fun (V354) -> fun (V355) -> fun (V356) -> fun (V357) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V356, V357)) end end end end, fun (V358) -> fun (V359) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V359)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V360) -> fun (V361) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V362) -> fun (V363) -> fun (V364) -> fun (V365) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V364, V365)) end end end end, fun (V366) -> fun (V367) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V367)) end end, fun (V368) -> fun (V369) -> fun (V370) -> fun (V371) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V370, V371)) end end end end}, fun (V372) -> fun (V373) -> fun (V374) -> fun (V375) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V374, V375)) end end end end, fun (V376) -> fun (V377) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V377)) end end}, ('un--renameIBinds'(V0, V1, V8)), fun (V378) -> fun (V379) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V380) -> fun (V381) -> fun (V382) -> fun (V383) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V382, V383)) end end end end, fun (V384) -> fun (V385) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V385)) end end, fun (V386) -> fun (V387) -> fun (V388) -> fun (V389) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V388, V389)) end end end end}, fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V392, V393)) end end end end, fun (V394) -> fun (V395) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V395)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V360, V378}, V379)) end end, V361)) end end, V343)) end end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E9, E10, E11, E12, E13, E14} -> (fun (V396, V397, V398, V399, V400, V401) -> fun (V402) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V403) -> fun (V404) -> fun (V405) -> fun (V406) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V405, V406)) end end end end, fun (V407) -> fun (V408) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V408)) end end, fun (V409) -> fun (V410) -> fun (V411) -> fun (V412) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V411, V412)) end end end end}, fun (V413) -> fun (V414) -> fun (V415) -> fun (V416) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V415, V416)) end end end end, fun (V417) -> fun (V418) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V418)) end end}, ('un--renameIBinds'(V0, V1, V400)), fun (V419) -> fun (V420) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V421) -> fun (V422) -> fun (V423) -> fun (V424) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V423, V424)) end end end end, fun (V425) -> fun (V426) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V426)) end end, fun (V427) -> fun (V428) -> fun (V429) -> fun (V430) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V429, V430)) end end end end}, fun (V431) -> fun (V432) -> fun (V433) -> fun (V434) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V433, V434)) end end end end, fun (V435) -> fun (V436) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V436)) end end}, ('un--renameIBinds'(V0, V1, V401)), fun (V437) -> fun (V438) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V439) -> fun (V440) -> fun (V441) -> fun (V442) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V441, V442)) end end end end, fun (V443) -> fun (V444) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V444)) end end, fun (V445) -> fun (V446) -> fun (V447) -> fun (V448) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V447, V448)) end end end end}, fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V451, V452)) end end end end, fun (V453) -> fun (V454) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V454)) end end}, {'Idris.TTImp.TTImp.ILam', V396, V397, V398, V399, V419, V437}, V438)) end end, V420)) end end, V402)) end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.IApp', E15, E16, E17} -> (fun (V455, V456, V457) -> fun (V458) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V461, V462)) end end end end, fun (V463) -> fun (V464) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V464)) end end, fun (V465) -> fun (V466) -> fun (V467) -> fun (V468) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V467, V468)) end end end end}, fun (V469) -> fun (V470) -> fun (V471) -> fun (V472) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V471, V472)) end end end end, fun (V473) -> fun (V474) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V474)) end end}, ('un--renameIBinds'(V0, V1, V456)), fun (V475) -> fun (V476) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V477) -> fun (V478) -> fun (V479) -> fun (V480) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V479, V480)) end end end end, fun (V481) -> fun (V482) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V482)) end end, fun (V483) -> fun (V484) -> fun (V485) -> fun (V486) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V485, V486)) end end end end}, fun (V487) -> fun (V488) -> fun (V489) -> fun (V490) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V489, V490)) end end end end, fun (V491) -> fun (V492) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V492)) end end}, ('un--renameIBinds'(V0, V1, V457)), fun (V493) -> fun (V494) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V495) -> fun (V496) -> fun (V497) -> fun (V498) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V497, V498)) end end end end, fun (V499) -> fun (V500) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V500)) end end, fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V503, V504)) end end end end}, fun (V505) -> fun (V506) -> fun (V507) -> fun (V508) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V507, V508)) end end end end, fun (V509) -> fun (V510) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V510)) end end}, {'Idris.TTImp.TTImp.IApp', V455, V475, V493}, V494)) end end, V476)) end end, V458)) end end(E15, E16, E17)); {'Idris.TTImp.TTImp.IAutoApp', E18, E19, E20} -> (fun (V511, V512, V513) -> fun (V514) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V515) -> fun (V516) -> fun (V517) -> fun (V518) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V517, V518)) end end end end, fun (V519) -> fun (V520) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V520)) end end, fun (V521) -> fun (V522) -> fun (V523) -> fun (V524) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V523, V524)) end end end end}, fun (V525) -> fun (V526) -> fun (V527) -> fun (V528) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V527, V528)) end end end end, fun (V529) -> fun (V530) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V530)) end end}, ('un--renameIBinds'(V0, V1, V512)), fun (V531) -> fun (V532) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V533) -> fun (V534) -> fun (V535) -> fun (V536) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V535, V536)) end end end end, fun (V537) -> fun (V538) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V538)) end end, fun (V539) -> fun (V540) -> fun (V541) -> fun (V542) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V541, V542)) end end end end}, fun (V543) -> fun (V544) -> fun (V545) -> fun (V546) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V545, V546)) end end end end, fun (V547) -> fun (V548) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V548)) end end}, ('un--renameIBinds'(V0, V1, V513)), fun (V549) -> fun (V550) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V551) -> fun (V552) -> fun (V553) -> fun (V554) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V553, V554)) end end end end, fun (V555) -> fun (V556) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V556)) end end, fun (V557) -> fun (V558) -> fun (V559) -> fun (V560) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V559, V560)) end end end end}, fun (V561) -> fun (V562) -> fun (V563) -> fun (V564) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V563, V564)) end end end end, fun (V565) -> fun (V566) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V566)) end end}, {'Idris.TTImp.TTImp.IAutoApp', V511, V531, V549}, V550)) end end, V532)) end end, V514)) end end(E18, E19, E20)); {'Idris.TTImp.TTImp.INamedApp', E21, E22, E23, E24} -> (fun (V567, V568, V569, V570) -> fun (V571) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V572) -> fun (V573) -> fun (V574) -> fun (V575) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V574, V575)) end end end end, fun (V576) -> fun (V577) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V577)) end end, fun (V578) -> fun (V579) -> fun (V580) -> fun (V581) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V580, V581)) end end end end}, fun (V582) -> fun (V583) -> fun (V584) -> fun (V585) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V584, V585)) end end end end, fun (V586) -> fun (V587) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V587)) end end}, ('un--renameIBinds'(V0, V1, V568)), fun (V588) -> fun (V589) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V590) -> fun (V591) -> fun (V592) -> fun (V593) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V592, V593)) end end end end, fun (V594) -> fun (V595) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V595)) end end, fun (V596) -> fun (V597) -> fun (V598) -> fun (V599) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V598, V599)) end end end end}, fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V602, V603)) end end end end, fun (V604) -> fun (V605) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V605)) end end}, ('un--renameIBinds'(V0, V1, V570)), fun (V606) -> fun (V607) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V608) -> fun (V609) -> fun (V610) -> fun (V611) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V610, V611)) end end end end, fun (V612) -> fun (V613) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V613)) end end, fun (V614) -> fun (V615) -> fun (V616) -> fun (V617) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V616, V617)) end end end end}, fun (V618) -> fun (V619) -> fun (V620) -> fun (V621) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V620, V621)) end end end end, fun (V622) -> fun (V623) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V623)) end end}, {'Idris.TTImp.TTImp.INamedApp', V567, V588, V569, V606}, V607)) end end, V589)) end end, V571)) end end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.IWithApp', E25, E26, E27} -> (fun (V624, V625, V626) -> fun (V627) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V628) -> fun (V629) -> fun (V630) -> fun (V631) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V630, V631)) end end end end, fun (V632) -> fun (V633) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V633)) end end, fun (V634) -> fun (V635) -> fun (V636) -> fun (V637) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V636, V637)) end end end end}, fun (V638) -> fun (V639) -> fun (V640) -> fun (V641) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V640, V641)) end end end end, fun (V642) -> fun (V643) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V643)) end end}, ('un--renameIBinds'(V0, V1, V625)), fun (V644) -> fun (V645) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V646) -> fun (V647) -> fun (V648) -> fun (V649) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V648, V649)) end end end end, fun (V650) -> fun (V651) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V651)) end end, fun (V652) -> fun (V653) -> fun (V654) -> fun (V655) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V654, V655)) end end end end}, fun (V656) -> fun (V657) -> fun (V658) -> fun (V659) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V658, V659)) end end end end, fun (V660) -> fun (V661) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V661)) end end}, ('un--renameIBinds'(V0, V1, V626)), fun (V662) -> fun (V663) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V664) -> fun (V665) -> fun (V666) -> fun (V667) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V666, V667)) end end end end, fun (V668) -> fun (V669) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V669)) end end, fun (V670) -> fun (V671) -> fun (V672) -> fun (V673) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V672, V673)) end end end end}, fun (V674) -> fun (V675) -> fun (V676) -> fun (V677) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V676, V677)) end end end end, fun (V678) -> fun (V679) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V679)) end end}, {'Idris.TTImp.TTImp.IWithApp', V624, V644, V662}, V663)) end end, V645)) end end, V627)) end end(E25, E26, E27)); {'Idris.TTImp.TTImp.IAs', E28, E29, E30, E31, E32} -> (fun (V680, V681, V682, V683, V684) -> fun (V685) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V686) -> fun (V687) -> fun (V688) -> fun (V689) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V688, V689)) end end end end, fun (V690) -> fun (V691) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V691)) end end, fun (V692) -> fun (V693) -> fun (V694) -> fun (V695) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V694, V695)) end end end end}, fun (V696) -> fun (V697) -> fun (V698) -> fun (V699) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V698, V699)) end end end end, fun (V700) -> fun (V701) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V701)) end end}, ('un--renameIBinds'(V0, V1, V684)), fun (V702) -> fun (V703) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V704) -> fun (V705) -> fun (V706) -> fun (V707) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V706, V707)) end end end end, fun (V708) -> fun (V709) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V709)) end end, fun (V710) -> fun (V711) -> fun (V712) -> fun (V713) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V712, V713)) end end end end}, fun (V714) -> fun (V715) -> fun (V716) -> fun (V717) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V716, V717)) end end end end, fun (V718) -> fun (V719) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V719)) end end}, {'Idris.TTImp.TTImp.IAs', V680, V681, V682, V683, V702}, V703)) end end, V685)) end end(E28, E29, E30, E31, E32)); {'Idris.TTImp.TTImp.IMustUnify', E33, E34, E35} -> (fun (V720, V721, V722) -> fun (V723) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V724) -> fun (V725) -> fun (V726) -> fun (V727) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V726, V727)) end end end end, fun (V728) -> fun (V729) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V729)) end end, fun (V730) -> fun (V731) -> fun (V732) -> fun (V733) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V732, V733)) end end end end}, fun (V734) -> fun (V735) -> fun (V736) -> fun (V737) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V736, V737)) end end end end, fun (V738) -> fun (V739) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V739)) end end}, ('un--renameIBinds'(V0, V1, V722)), fun (V740) -> fun (V741) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V742) -> fun (V743) -> fun (V744) -> fun (V745) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V744, V745)) end end end end, fun (V746) -> fun (V747) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V747)) end end, fun (V748) -> fun (V749) -> fun (V750) -> fun (V751) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V750, V751)) end end end end}, fun (V752) -> fun (V753) -> fun (V754) -> fun (V755) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V754, V755)) end end end end, fun (V756) -> fun (V757) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V757)) end end}, {'Idris.TTImp.TTImp.IMustUnify', V720, V721, V740}, V741)) end end, V723)) end end(E33, E34, E35)); {'Idris.TTImp.TTImp.IDelayed', E36, E37, E38} -> (fun (V758, V759, V760) -> fun (V761) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V762) -> fun (V763) -> fun (V764) -> fun (V765) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V764, V765)) end end end end, fun (V766) -> fun (V767) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V767)) end end, fun (V768) -> fun (V769) -> fun (V770) -> fun (V771) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V770, V771)) end end end end}, fun (V772) -> fun (V773) -> fun (V774) -> fun (V775) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V774, V775)) end end end end, fun (V776) -> fun (V777) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V777)) end end}, ('un--renameIBinds'(V0, V1, V760)), fun (V778) -> fun (V779) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V780) -> fun (V781) -> fun (V782) -> fun (V783) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V782, V783)) end end end end, fun (V784) -> fun (V785) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V785)) end end, fun (V786) -> fun (V787) -> fun (V788) -> fun (V789) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V788, V789)) end end end end}, fun (V790) -> fun (V791) -> fun (V792) -> fun (V793) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V792, V793)) end end end end, fun (V794) -> fun (V795) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V795)) end end}, {'Idris.TTImp.TTImp.IDelayed', V758, V759, V778}, V779)) end end, V761)) end end(E36, E37, E38)); {'Idris.TTImp.TTImp.IDelay', E39, E40} -> (fun (V796, V797) -> fun (V798) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V799) -> fun (V800) -> fun (V801) -> fun (V802) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V801, V802)) end end end end, fun (V803) -> fun (V804) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V804)) end end, fun (V805) -> fun (V806) -> fun (V807) -> fun (V808) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V807, V808)) end end end end}, fun (V809) -> fun (V810) -> fun (V811) -> fun (V812) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V811, V812)) end end end end, fun (V813) -> fun (V814) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V814)) end end}, ('un--renameIBinds'(V0, V1, V797)), fun (V815) -> fun (V816) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V817) -> fun (V818) -> fun (V819) -> fun (V820) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V819, V820)) end end end end, fun (V821) -> fun (V822) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V822)) end end, fun (V823) -> fun (V824) -> fun (V825) -> fun (V826) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V825, V826)) end end end end}, fun (V827) -> fun (V828) -> fun (V829) -> fun (V830) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V829, V830)) end end end end, fun (V831) -> fun (V832) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V832)) end end}, {'Idris.TTImp.TTImp.IDelay', V796, V815}, V816)) end end, V798)) end end(E39, E40)); {'Idris.TTImp.TTImp.IForce', E41, E42} -> (fun (V833, V834) -> fun (V835) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V836) -> fun (V837) -> fun (V838) -> fun (V839) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V838, V839)) end end end end, fun (V840) -> fun (V841) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V841)) end end, fun (V842) -> fun (V843) -> fun (V844) -> fun (V845) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V844, V845)) end end end end}, fun (V846) -> fun (V847) -> fun (V848) -> fun (V849) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V848, V849)) end end end end, fun (V850) -> fun (V851) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V851)) end end}, ('un--renameIBinds'(V0, V1, V834)), fun (V852) -> fun (V853) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V854) -> fun (V855) -> fun (V856) -> fun (V857) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V856, V857)) end end end end, fun (V858) -> fun (V859) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V859)) end end, fun (V860) -> fun (V861) -> fun (V862) -> fun (V863) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V862, V863)) end end end end}, fun (V864) -> fun (V865) -> fun (V866) -> fun (V867) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V866, V867)) end end end end, fun (V868) -> fun (V869) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V869)) end end}, {'Idris.TTImp.TTImp.IForce', V833, V852}, V853)) end end, V835)) end end(E41, E42)); {'Idris.TTImp.TTImp.IAlternative', E43, E44, E45} -> (fun (V870, V871, V872) -> fun (V873) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V874) -> fun (V875) -> fun (V876) -> fun (V877) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V876, V877)) end end end end, fun (V878) -> fun (V879) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V879)) end end, fun (V880) -> fun (V881) -> fun (V882) -> fun (V883) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V882, V883)) end end end end}, fun (V884) -> fun (V885) -> fun (V886) -> fun (V887) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V886, V887)) end end end end, fun (V888) -> fun (V889) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V889)) end end}, fun (V890) -> ('nested--5945-2594--in--un--renameAlt'(V872, V871, V870, V1, V0, V871, V890)) end, fun (V891) -> fun (V892) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V893) -> fun (V894) -> fun (V895) -> fun (V896) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V895, V896)) end end end end, fun (V897) -> fun (V898) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V898)) end end, fun (V899) -> fun (V900) -> fun (V901) -> fun (V902) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V901, V902)) end end end end}, fun (V903) -> fun (V904) -> fun (V905) -> fun (V906) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V905, V906)) end end end end, fun (V907) -> fun (V908) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V908)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V909) -> fun (V910) -> fun (V911) -> fun (V912) -> fun (V913) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(fun (V914) -> fun (V915) -> fun (V916) -> fun (V917) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V916, V917)) end end end end, V911, V912, V913)) end end end end end, fun (V918) -> fun (V919) -> fun (V920) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V921) -> fun (V922) -> fun (V923) -> fun (V924) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V923, V924)) end end end end, fun (V925) -> fun (V926) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V926)) end end, fun (V927) -> fun (V928) -> fun (V929) -> fun (V930) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V929, V930)) end end end end}, fun (V931) -> fun (V932) -> fun (V933) -> fun (V934) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V933, V934)) end end end end, fun (V935) -> fun (V936) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V936)) end end}, V919, V920)) end end end, fun (V937) -> fun (V938) -> fun (V939) -> fun (V940) -> fun (V941) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V942) -> fun (V943) -> fun (V944) -> fun (V945) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V944, V945)) end end end end, fun (V946) -> fun (V947) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V947)) end end, fun (V948) -> fun (V949) -> fun (V950) -> fun (V951) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V950, V951)) end end end end}, fun (V952) -> fun (V953) -> fun (V954) -> fun (V955) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V954, V955)) end end end end, fun (V956) -> fun (V957) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V957)) end end}, V939, V940, V941)) end end end end end}, fun (V958) -> ('un--renameIBinds'(V0, V1, V958)) end, V872)), fun (V959) -> fun (V960) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V961) -> fun (V962) -> fun (V963) -> fun (V964) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V963, V964)) end end end end, fun (V965) -> fun (V966) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V966)) end end, fun (V967) -> fun (V968) -> fun (V969) -> fun (V970) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V969, V970)) end end end end}, fun (V971) -> fun (V972) -> fun (V973) -> fun (V974) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V973, V974)) end end end end, fun (V975) -> fun (V976) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V976)) end end}, {'Idris.TTImp.TTImp.IAlternative', V870, V891, V959}, V960)) end end, V892)) end end, V873)) end end(E43, E44, E45)); {'Idris.TTImp.TTImp.IBindVar', E46, E47} -> (fun (V977, V978) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V979) -> fun (V980) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V979, V980)) end end, fun (V981) -> fun (V982) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V981, V982)) end end}, V978, V0)) of 1 -> begin (V983 = ('Idris.Idris2.TTImp.Utils':'un--getUnique'(('Idris.Idris2.Prelude.Types.List':'un--tailRecAppend'(V0, V1)), V978))), fun (V984) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V985) -> fun (V986) -> fun (V987) -> fun (V988) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V987, V988)) end end end end, fun (V989) -> fun (V990) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V990)) end end, fun (V991) -> fun (V992) -> fun (V993) -> fun (V994) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V993, V994)) end end end end}, fun (V995) -> fun (V996) -> fun (V997) -> fun (V998) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V997, V998)) end end end end, fun (V999) -> fun (V1000) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1000)) end end}, fun (V1001) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', V1001, V1001})) end, fun (V1002) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1003) -> fun (V1004) -> fun (V1005) -> fun (V1006) -> fun (V1007) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(fun (V1008) -> fun (V1009) -> fun (V1010) -> fun (V1011) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1010, V1011)) end end end end, V1005, V1006, V1007)) end end end end end, fun (V1012) -> fun (V1013) -> fun (V1014) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1015) -> fun (V1016) -> fun (V1017) -> fun (V1018) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1017, V1018)) end end end end, fun (V1019) -> fun (V1020) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1020)) end end, fun (V1021) -> fun (V1022) -> fun (V1023) -> fun (V1024) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1023, V1024)) end end end end}, fun (V1025) -> fun (V1026) -> fun (V1027) -> fun (V1028) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1027, V1028)) end end end end, fun (V1029) -> fun (V1030) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1030)) end end}, V1013, V1014)) end end end, fun (V1031) -> fun (V1032) -> fun (V1033) -> fun (V1034) -> fun (V1035) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1036) -> fun (V1037) -> fun (V1038) -> fun (V1039) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1038, V1039)) end end end end, fun (V1040) -> fun (V1041) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1041)) end end, fun (V1042) -> fun (V1043) -> fun (V1044) -> fun (V1045) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1044, V1045)) end end end end}, fun (V1046) -> fun (V1047) -> fun (V1048) -> fun (V1049) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1048, V1049)) end end end end, fun (V1050) -> fun (V1051) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1051)) end end}, V1033, V1034, V1035)) end end end end end}, fun (V1052) -> fun (V1053) -> fun (V1054) -> fun (V1055) -> fun (V1056) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1057) -> fun (V1058) -> fun (V1059) -> fun (V1060) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1059, V1060)) end end end end, fun (V1061) -> fun (V1062) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1062)) end end, fun (V1063) -> fun (V1064) -> fun (V1065) -> fun (V1066) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1065, V1066)) end end end end}, fun (V1067) -> fun (V1068) -> fun (V1069) -> fun (V1070) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1069, V1070)) end end end end, fun (V1071) -> fun (V1072) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1072)) end end}, V1054, V1055, V1056)) end end end end end, fun (V1073) -> fun (V1074) -> fun (V1075) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1076) -> fun (V1077) -> fun (V1078) -> fun (V1079) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1078, V1079)) end end end end, fun (V1080) -> fun (V1081) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1081)) end end, fun (V1082) -> fun (V1083) -> fun (V1084) -> fun (V1085) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1084, V1085)) end end end end}, fun (V1086) -> fun (V1087) -> fun (V1088) -> fun (V1089) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1088, V1089)) end end end end, fun (V1090) -> fun (V1091) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1091)) end end}, V1074, V1075)) end end end}, fun (V1092) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V978, V983} | V1002], 0})) end, fun () -> fun (V1093) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1094) -> fun (V1095) -> fun (V1096) -> fun (V1097) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1096, V1097)) end end end end, fun (V1098) -> fun (V1099) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1099)) end end, fun (V1100) -> fun (V1101) -> fun (V1102) -> fun (V1103) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1102, V1103)) end end end end}, fun (V1104) -> fun (V1105) -> fun (V1106) -> fun (V1107) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1106, V1107)) end end end end, fun (V1108) -> fun (V1109) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1109)) end end}, {'Idris.TTImp.TTImp.IBindVar', V977, V983}, V1093)) end end)) end, V984)) end end; 0 -> fun (V1110) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1111) -> fun (V1112) -> fun (V1113) -> fun (V1114) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1113, V1114)) end end end end, fun (V1115) -> fun (V1116) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1116)) end end, fun (V1117) -> fun (V1118) -> fun (V1119) -> fun (V1120) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1119, V1120)) end end end end}, fun (V1121) -> fun (V1122) -> fun (V1123) -> fun (V1124) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1123, V1124)) end end end end, fun (V1125) -> fun (V1126) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1126)) end end}, {'Idris.TTImp.TTImp.IBindVar', V977, V978}, V1110)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47)); _ -> fun (V1127) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1128) -> fun (V1129) -> fun (V1130) -> fun (V1131) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1130, V1131)) end end end end, fun (V1132) -> fun (V1133) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1133)) end end, fun (V1134) -> fun (V1135) -> fun (V1136) -> fun (V1137) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1136, V1137)) end end end end}, fun (V1138) -> fun (V1139) -> fun (V1140) -> fun (V1141) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1140, V1141)) end end end end, fun (V1142) -> fun (V1143) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1143)) end end}, V2, V1127)) end end.
'un--piBindNames'(V0, V1, V2, V3, V4) -> begin (V5 = (('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V0, V1, 1, V2, [], V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('nested--7235-3362--in--un--piBind'(V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Builtin':'un--fst'(V8)) end, V7)), V3))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUsings'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V28, V29)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V30) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V31) -> fun (V32) -> ('un--getUsing'(V31, V32)) end end, V1, V30)) end, V0)).
'un--getUsing'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Types.Just', E6} -> (fun (V8) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V8)) of 1 -> [{'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Implicit'}, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V0}, V7}}}} | ('un--getUsing'(V0, V3))]; 0 -> ('un--getUsing'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V17 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, ('Idris.Idris2.TTImp.Utils':'un--findIBindVars'(V7))))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V21)) end end}, V0, V17)) of 1 -> [{'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Builtin.MkPair', {'Idris.Core.TT.AutoImplicit'}, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V7}}}} | ('un--getUsing'(V0, V3))]; 0 -> ('un--getUsing'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--doBind'(V0, V1) -> case V0 of [] -> V1; _ -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.UN', E2} -> (fun (V4) -> case V4 of {'Idris.Core.Name.Basic', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.TTImp.TTImp.IVar', V2, V3} end, fun () -> fun (V6) -> {'Idris.TTImp.TTImp.IBindVar', V2, V6} end end, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V9, V10)) end end}, V5, V0)))) end(E3)); _ -> V1 end end(E2)); _ -> V1 end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E4, E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15, V16) -> begin (V21 = case V14 of {'Idris.Prelude.Types.Just', E10} -> (fun (V17) -> case V17 of {'Idris.Core.Name.UN', E11} -> (fun (V18) -> case V18 of {'Idris.Core.Name.Basic', E12} -> (fun (V19) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.Builtin':'un--fst'(V20)), V19)) end, V0)) end(E12)); _ -> V0 end end(E11)); _ -> V0 end end(E10)); _ -> V0 end), {'Idris.TTImp.TTImp.IPi', V11, V12, V13, V14, ('un--doBind'(V21, V15)), ('un--doBind'(V21, V16))} end end(E4, E5, E6, E7, E8, E9)); {'Idris.TTImp.TTImp.ILam', E13, E14, E15, E16, E17, E18} -> (fun (V22, V23, V24, V25, V26, V27) -> begin (V32 = case V25 of {'Idris.Prelude.Types.Just', E19} -> (fun (V28) -> case V28 of {'Idris.Core.Name.UN', E20} -> (fun (V29) -> case V29 of {'Idris.Core.Name.Basic', E21} -> (fun (V30) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.Builtin':'un--fst'(V31)), V30)) end, V0)) end(E21)); _ -> V0 end end(E20)); _ -> V0 end end(E19)); _ -> V0 end), {'Idris.TTImp.TTImp.ILam', V22, V23, V24, V25, ('un--doBind'(V32, V26)), ('un--doBind'(V32, V27))} end end(E13, E14, E15, E16, E17, E18)); {'Idris.TTImp.TTImp.IApp', E22, E23, E24} -> (fun (V33, V34, V35) -> {'Idris.TTImp.TTImp.IApp', V33, ('un--doBind'(V0, V34)), ('un--doBind'(V0, V35))} end(E22, E23, E24)); {'Idris.TTImp.TTImp.IAutoApp', E25, E26, E27} -> (fun (V36, V37, V38) -> {'Idris.TTImp.TTImp.IAutoApp', V36, ('un--doBind'(V0, V37)), ('un--doBind'(V0, V38))} end(E25, E26, E27)); {'Idris.TTImp.TTImp.INamedApp', E28, E29, E30, E31} -> (fun (V39, V40, V41, V42) -> {'Idris.TTImp.TTImp.INamedApp', V39, ('un--doBind'(V0, V40)), V41, ('un--doBind'(V0, V42))} end(E28, E29, E30, E31)); {'Idris.TTImp.TTImp.IWithApp', E32, E33, E34} -> (fun (V43, V44, V45) -> {'Idris.TTImp.TTImp.IWithApp', V43, ('un--doBind'(V0, V44)), ('un--doBind'(V0, V45))} end(E32, E33, E34)); {'Idris.TTImp.TTImp.IAs', E35, E36, E37, E38, E39} -> (fun (V46, V47, V48, V49, V50) -> {'Idris.TTImp.TTImp.IAs', V46, V47, V48, V49, ('un--doBind'(V0, V50))} end(E35, E36, E37, E38, E39)); {'Idris.TTImp.TTImp.IMustUnify', E40, E41, E42} -> (fun (V51, V52, V53) -> {'Idris.TTImp.TTImp.IMustUnify', V51, V52, ('un--doBind'(V0, V53))} end(E40, E41, E42)); {'Idris.TTImp.TTImp.IDelayed', E43, E44, E45} -> (fun (V54, V55, V56) -> {'Idris.TTImp.TTImp.IDelayed', V54, V55, ('un--doBind'(V0, V56))} end(E43, E44, E45)); {'Idris.TTImp.TTImp.IDelay', E46, E47} -> (fun (V57, V58) -> {'Idris.TTImp.TTImp.IDelay', V57, ('un--doBind'(V0, V58))} end(E46, E47)); {'Idris.TTImp.TTImp.IForce', E48, E49} -> (fun (V59, V60) -> {'Idris.TTImp.TTImp.IForce', V59, ('un--doBind'(V0, V60))} end(E48, E49)); {'Idris.TTImp.TTImp.IQuote', E50, E51} -> (fun (V61, V62) -> {'Idris.TTImp.TTImp.IQuote', V61, ('un--doBind'(V0, V62))} end(E50, E51)); {'Idris.TTImp.TTImp.IUnquote', E52, E53} -> (fun (V63, V64) -> {'Idris.TTImp.TTImp.IUnquote', V63, ('un--doBind'(V0, V64))} end(E52, E53)); {'Idris.TTImp.TTImp.IAlternative', E54, E55, E56} -> (fun (V65, V66, V67) -> {'Idris.TTImp.TTImp.IAlternative', V65, ('Idris.Idris2.TTImp.TTImp':'un--mapAltType'(fun (V68) -> ('un--doBind'(V0, V68)) end, V66)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V69) -> ('un--doBind'(V0, V69)) end, V67))} end(E54, E55, E56)); _ -> V1 end end.
'un--bindUsings'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.TTImp.TTImp.IPi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V9)), V4, V6, V8, V9, ('un--bindUsings'(V3, V1))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindTypeNamesUsed'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of 1 -> begin (V9 = (('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V0, V1, 1, V3, V2, V4))(V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Right', ('un--doBind'(V11, V4))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindTypeNames'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of 1 -> begin (V9 = (('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V0, V1, 1, V3, [], V4))(V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('un--doBind'(V11, V4))), {'Idris.Prelude.Types.Right', ('un--addUsing'(V2, V12))} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindNames'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 1 -> begin (V27 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V11, V12)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V15, V16)) end end}, V7, V8)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V21, V22)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V25, V26)) end end}, V17, V18)) end end}, ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(V1, [], [], V2))))), begin (V43 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab.bindnames"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found names :"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V28) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V30, V31)) end end}, {'Idris.Prelude.Show.MkShow', fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V33, V34)) end end}}, V28)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V38, V39)) end end}, {'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V41, V42)) end end}}, V35, V36)) end end}, V27)))) end, V3))), case V43 of {'Idris.Prelude.Types.Left', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> {'Idris.Core.Name.UN', {'Idris.Core.Name.Basic', V46}} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('Idris.Idris2.Builtin':'un--snd'(V47)) end, V27)))), ('un--doBind'(V27, V2))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V2}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addUsing'(V0, V1) -> begin (V6 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V4, V5)) end end}, ('Idris.Idris2.TTImp.Utils':'un--findIBindVars'(V1))))), begin (V9 = ('Idris.Idris2.Data.List':'un--nubBy'(fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(('Idris.Idris2.Builtin':'un--fst'(V7)), ('Idris.Idris2.Builtin':'un--fst'(V8)))) end end, ('un--getUsings'(V6, ('nested--7056-3196--in--un--tag'(V1, V0, 0, V0))))))), ('un--bindUsings'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('Idris.Idris2.Builtin':'un--snd'(V10)) end, V9)), V1)) end end.
