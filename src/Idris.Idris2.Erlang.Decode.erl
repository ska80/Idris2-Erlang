-module('Idris.Idris2.Erlang.Decode').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--mapEntry-3404'/4,
  'nested--4897-3326--in--un--listHead'/1,
  'dn--un--pure_Applicative_ErlDecoder'/2,
  'dn--un--map_Functor_ErlDecoder'/3,
  'dn--un--join_Monad_ErlDecoder'/2,
  'dn--un--empty_Alternative_ErlDecoder'/1,
  'dn--un--__Impl_Monad_ErlDecoder'/0,
  'dn--un--__Impl_Functor_ErlDecoder'/5,
  'dn--un--__Impl_Applicative_ErlDecoder'/0,
  'dn--un--__Impl_Alternative_ErlDecoder'/0,
  'dn--un-->>=_Monad_ErlDecoder'/3,
  'dn--un--<|>_Alternative_ErlDecoder'/2,
  'dn--un--<*>_Applicative_ErlDecoder'/3,
  'un--tuple8'/9,
  'un--tuple7'/8,
  'un--tuple6'/7,
  'un--tuple5'/6,
  'un--tuple4'/5,
  'un--tuple3'/4,
  'un--tuple2'/3,
  'un--tuple1'/2,
  'un--tuple0'/1,
  'un--string'/1,
  'un--reference'/1,
  'un--port'/1,
  'un--pid'/1,
  'un--optional'/1,
  'un--okTuple'/2,
  'un--nil'/1,
  'un--mapEntry'/3,
  'un--mapEntries'/1,
  'un--list'/2,
  'un--lazyAlt'/3,
  'un--ioData'/1,
  'un--integer'/1,
  'un--hList'/1,
  'un--fun8'/9,
  'un--fun7'/8,
  'un--fun6'/7,
  'un--fun5'/6,
  'un--fun4'/5,
  'un--fun3'/4,
  'un--fun2'/3,
  'un--fun1'/2,
  'un--fun0'/1,
  'un--fail'/2,
  'un--exact'/3,
  'un--errorTuple'/2,
  'un--erlDecodeMay'/3,
  'un--erlDecodeDef'/4,
  'un--erlDecode'/3,
  'un--double'/1,
  'un--cons'/3,
  'un--codepoint'/1,
  'un--charlist'/1,
  'un--bool'/0,
  'un--atom'/1,
  'un--anyMap'/1,
  'un--anyList'/1,
  'un--any'/1,
  'un--.='/2
]).
'case--mapEntry-3404'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = ('erlang':'apply'('maps', 'find', [V0 | [V4 | []]]))), case case V5 of {E4, E5} -> (fun (V8) -> {'Idris.Prelude.Types.Just', V8} end((fun (V6, V7) -> {V6, V7} end(E4, E5)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E1} -> (fun (V9) -> case V9 of {E2, E3} -> (fun (V10, V11) -> (V1(V11)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Could not find key in map"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a map"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4897-3326--in--un--listHead'(V0) -> ('un--lazyAlt'(fun (V1) -> ('dn--un--map_Functor_ErlDecoder'(fun (V2) -> ('Idris.Idris2.Builtin':'un--believe_me'(V2)) end, fun (V3) -> ('un--codepoint'(V3)) end, V1)) end, fun () -> fun (V4) -> ('un--lazyAlt'(fun (V5) -> ('dn--un--map_Functor_ErlDecoder'(fun (V6) -> ('Idris.Idris2.Builtin':'un--believe_me'(V6)) end, fun (V7) -> ('un--string'(V7)) end, V5)) end, fun () -> fun (V8) -> ('un--lazyAlt'(fun (V9) -> ('dn--un--map_Functor_ErlDecoder'(fun (V10) -> ('Idris.Idris2.Builtin':'un--believe_me'(V10)) end, fun (V11) -> ('un--nil'(V11)) end, V9)) end, fun () -> fun (V12) -> ('dn--un--map_Functor_ErlDecoder'(fun (V13) -> ('Idris.Idris2.Builtin':'un--believe_me'(V13)) end, fun (V14) -> ('un--cons'(fun (V15) -> ('nested--4897-3326--in--un--listHead'(V15)) end, fun (V16) -> ('un--ioData'(V16)) end, V14)) end, V12)) end end, V8)) end end, V4)) end end, V0)).
'dn--un--pure_Applicative_ErlDecoder'(V0, V1) -> {'Idris.Prelude.Types.Right', V0}.
'dn--un--map_Functor_ErlDecoder'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'un--either'(fun () -> fun (V3) -> {'Idris.Prelude.Types.Left', V3} end end, fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', (V0(V4))} end end, (V1(V2)))).
'dn--un--join_Monad_ErlDecoder'(V0, V1) -> ('dn--un-->>=_Monad_ErlDecoder'(V0, fun (V2) -> V2 end, V1)).
'dn--un--empty_Alternative_ErlDecoder'(V0) -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Empty'}}.
'dn--un--__Impl_Monad_ErlDecoder'() -> {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_ErlDecoder'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--pure_Applicative_ErlDecoder'(V6, V7)) end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--<*>_Applicative_ErlDecoder'(V10, V11, V12)) end end end end end}, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un-->>=_Monad_ErlDecoder'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--join_Monad_ErlDecoder'(V19, V20)) end end end}.
'dn--un--__Impl_Functor_ErlDecoder'(V0, V1, V2, V3, V4) -> ('dn--un--map_Functor_ErlDecoder'(V2, V3, V4)).
'dn--un--__Impl_Applicative_ErlDecoder'() -> {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_ErlDecoder'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--pure_Applicative_ErlDecoder'(V6, V7)) end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--<*>_Applicative_ErlDecoder'(V10, V11, V12)) end end end end end}.
'dn--un--__Impl_Alternative_ErlDecoder'() -> {'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_ErlDecoder'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--pure_Applicative_ErlDecoder'(V6, V7)) end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--<*>_Applicative_ErlDecoder'(V10, V11, V12)) end end end end end}, fun (V13) -> fun (V14) -> ('dn--un--empty_Alternative_ErlDecoder'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--<|>_Alternative_ErlDecoder'(V16, V17)) end end end}.
'dn--un-->>=_Monad_ErlDecoder'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V2)), fun (V3) -> ((V1(V3))(V2)) end)).
'dn--un--<|>_Alternative_ErlDecoder'(V0, V1) -> begin (V2 = (V1())), fun (V3) -> case (V0(V3)) of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Right', V4} end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> case (V2(V3)) of {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', V6} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.OneOf', V5, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'dn--un--<*>_Applicative_ErlDecoder'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V2)), fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V2)), fun (V4) -> {'Idris.Prelude.Types.Right', (V3(V4))} end)) end)).
'un--tuple8'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case case V8 of {E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V17) -> {'Idris.Prelude.Types.Just', V17} end((fun (V9, V10, V11, V12, V13, V14, V15, V16) -> {V9, V10, V11, V12, V13, V14, V15, V16} end(E9, E10, E11, E12, E13, E14, E15, E16)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> case V18 of {E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V19)), fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V20)), fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V2(V21)), fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V3(V22)), fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V4(V23)), fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V5(V24)), fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V6(V25)), fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V7(V26)), fun (V34) -> {'Idris.Prelude.Types.Right', {V27, V28, V29, V30, V31, V32, V33, V34}} end)) end)) end)) end)) end)) end)) end)) end)) end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 8 elements"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple7'(V0, V1, V2, V3, V4, V5, V6, V7) -> case case V7 of {E8, E9, E10, E11, E12, E13, E14} -> (fun (V15) -> {'Idris.Prelude.Types.Just', V15} end((fun (V8, V9, V10, V11, V12, V13, V14) -> {V8, V9, V10, V11, V12, V13, V14} end(E8, E9, E10, E11, E12, E13, E14)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> case V16 of {E1, E2, E3, E4, E5, E6, E7} -> (fun (V17, V18, V19, V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V17)), fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V18)), fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V2(V19)), fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V3(V20)), fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V4(V21)), fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V5(V22)), fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V6(V23)), fun (V30) -> {'Idris.Prelude.Types.Right', {V24, V25, V26, V27, V28, V29, V30}} end)) end)) end)) end)) end)) end)) end)) end(E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 7 elements"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple6'(V0, V1, V2, V3, V4, V5, V6) -> case case V6 of {E7, E8, E9, E10, E11, E12} -> (fun (V13) -> {'Idris.Prelude.Types.Just', V13} end((fun (V7, V8, V9, V10, V11, V12) -> {V7, V8, V9, V10, V11, V12} end(E7, E8, E9, E10, E11, E12)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> case V14 of {E1, E2, E3, E4, E5, E6} -> (fun (V15, V16, V17, V18, V19, V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V15)), fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V16)), fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V2(V17)), fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V3(V18)), fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V4(V19)), fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V5(V20)), fun (V26) -> {'Idris.Prelude.Types.Right', {V21, V22, V23, V24, V25, V26}} end)) end)) end)) end)) end)) end)) end(E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 6 elements"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple5'(V0, V1, V2, V3, V4, V5) -> case case V5 of {E6, E7, E8, E9, E10} -> (fun (V11) -> {'Idris.Prelude.Types.Just', V11} end((fun (V6, V7, V8, V9, V10) -> {V6, V7, V8, V9, V10} end(E6, E7, E8, E9, E10)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {E1, E2, E3, E4, E5} -> (fun (V13, V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V13)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V14)), fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V2(V15)), fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V3(V16)), fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V4(V17)), fun (V22) -> {'Idris.Prelude.Types.Right', {V18, V19, V20, V21, V22}} end)) end)) end)) end)) end)) end(E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 5 elements"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple4'(V0, V1, V2, V3, V4) -> case case V4 of {E5, E6, E7, E8} -> (fun (V9) -> {'Idris.Prelude.Types.Just', V9} end((fun (V5, V6, V7, V8) -> {V5, V6, V7, V8} end(E5, E6, E7, E8)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case V10 of {E1, E2, E3, E4} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V11)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V12)), fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V2(V13)), fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V3(V14)), fun (V18) -> {'Idris.Prelude.Types.Right', {V15, V16, V17, V18}} end)) end)) end)) end)) end(E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 4 elements"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple3'(V0, V1, V2, V3) -> case case V3 of {E4, E5, E6} -> (fun (V7) -> {'Idris.Prelude.Types.Just', V7} end((fun (V4, V5, V6) -> {V4, V5, V6} end(E4, E5, E6)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {E1, E2, E3} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V9)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V10)), fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V2(V11)), fun (V14) -> {'Idris.Prelude.Types.Right', {V12, V13, V14}} end)) end)) end)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 3 elements"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple2'(V0, V1, V2) -> case case V2 of {E3, E4} -> (fun (V5) -> {'Idris.Prelude.Types.Just', V5} end((fun (V3, V4) -> {V3, V4} end(E3, E4)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {E1, E2} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V7)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V8)), fun (V10) -> {'Idris.Prelude.Types.Right', {V9, V10}} end)) end)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 2 elements"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple1'(V0, V1) -> case case V1 of {E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end((fun (V2) -> {V2} end(E2)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of {E1} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V5)), fun (V6) -> {'Idris.Prelude.Types.Right', {V6}} end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 1 element"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tuple0'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a tuple with 0 elements"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of {} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end((fun () -> {} end()))); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--string'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a binary"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_binary'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--reference'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a reference"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_reference'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--port'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a port"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_port'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--pid'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a pid"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_pid'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--optional'(V0) -> ('dn--un--<|>_Alternative_ErlDecoder'(fun (V1) -> ('dn--un--map_Functor_ErlDecoder'(fun (V2) -> {'Idris.Prelude.Types.Just', V2} end, V0, V1)) end, fun () -> fun (V3) -> ('dn--un--pure_Applicative_ErlDecoder'({'Idris.Prelude.Types.Nothing'}, V3)) end end)).
'un--okTuple'(V0, V1) -> ('dn--un--map_Functor_ErlDecoder'(fun (V2) -> case V2 of {E0, E1} -> (fun (V3, V4) -> V4 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> ('un--tuple2'(fun (V6) -> ('un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'ok', V6)) end, V0, V5)) end, V1)).
'un--nil'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a nil value"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of [] -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end([])); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--mapEntry'(V0, V1, V2) -> ('case--mapEntry-3404'(V0, V1, V2, case V2 of E0 when (erlang:'is_map'(E0)) -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--mapEntries'(V0) -> case V0 of {'Idris.Erlang.Decode.ErlMapDecoders.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_ErlDecoder'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--pure_Applicative_ErlDecoder'(V7, V8)) end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--<*>_Applicative_ErlDecoder'(V11, V12, V13)) end end end end end}, fun (V14) -> ('un--anyMap'(V14)) end, fun (V15) -> ('dn--un--pure_Applicative_ErlDecoder'([], V15)) end)) end()); {'Idris.Erlang.Decode.ErlMapDecoders.::', E0, E1} -> (fun (V16, V17) -> fun (V18) -> case V16 of {'Idris.Erlang.Decode.MkDecoderMapEntry', E2, E3} -> (fun (V19, V20) -> ('dn--un--<*>_Applicative_ErlDecoder'(fun (V21) -> ('dn--un--<*>_Applicative_ErlDecoder'(fun (V22) -> ('dn--un--pure_Applicative_ErlDecoder'(fun (V23) -> fun (V24) -> [V23 | V24] end end, V22)) end, fun (V25) -> ('un--mapEntry'(V19, V20, V25)) end, V21)) end, ('un--mapEntries'(V17)), V18)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--list'(V0, V1) -> ('un--lazyAlt'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--map_Functor_ErlDecoder'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--pure_Applicative_ErlDecoder'(V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--<*>_Applicative_ErlDecoder'(V12, V13, V14)) end end end end end}, fun (V15) -> ('un--nil'(V15)) end, fun (V16) -> ('dn--un--pure_Applicative_ErlDecoder'([], V16)) end)), fun () -> fun (V17) -> ('dn--un--map_Functor_ErlDecoder'(fun (V18) -> case V18 of [E0 | E1] -> (fun (V19, V20) -> [V19 | V20] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V21) -> ('un--cons'(V0, fun (V22) -> ('un--list'(V0, V22)) end, V21)) end, V17)) end end, V1)).
'un--lazyAlt'(V0, V1, V2) -> ('dn--un-->>=_Monad_ErlDecoder'(('un--optional'(V0)), fun (V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> ('dn--un--pure_Applicative_ErlDecoder'(V4, V5)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (V1()) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)).
'un--ioData'(V0) -> ('un--lazyAlt'(fun (V1) -> ('dn--un--map_Functor_ErlDecoder'(fun (V2) -> ('Idris.Idris2.Builtin':'un--believe_me'(V2)) end, fun (V3) -> ('un--string'(V3)) end, V1)) end, fun () -> fun (V4) -> ('un--lazyAlt'(fun (V5) -> ('dn--un--map_Functor_ErlDecoder'(fun (V6) -> ('Idris.Idris2.Builtin':'un--believe_me'(V6)) end, fun (V7) -> ('un--nil'(V7)) end, V5)) end, fun () -> fun (V8) -> ('dn--un--map_Functor_ErlDecoder'(fun (V9) -> ('Idris.Idris2.Builtin':'un--believe_me'(V9)) end, fun (V10) -> ('un--cons'(fun (V11) -> ('nested--4897-3326--in--un--listHead'(V11)) end, fun (V12) -> ('un--ioData'(V12)) end, V10)) end, V8)) end end, V4)) end end, V0)).
'un--integer'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected an integer"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_integer'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--hList'(V0) -> case V0 of {'Idris.Erlang.Decode.ErlDecoders.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_ErlDecoder'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--pure_Applicative_ErlDecoder'(V7, V8)) end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--<*>_Applicative_ErlDecoder'(V11, V12, V13)) end end end end end}, fun (V14) -> ('un--nil'(V14)) end, fun (V15) -> ('dn--un--pure_Applicative_ErlDecoder'([], V15)) end)) end()); {'Idris.Erlang.Decode.ErlDecoders.::', E0, E1} -> (fun (V16, V17) -> fun (V18) -> ('dn--un--map_Functor_ErlDecoder'(fun (V19) -> case V19 of [E2 | E3] -> (fun (V20, V21) -> [V20 | V21] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V22) -> ('un--cons'(V16, ('un--hList'(V17)), V22)) end, V18)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun8'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case case V8 of E2 when (erlang:'is_function'(E2, 8)) -> (fun (V9) -> {'Idris.Prelude.Types.Just', V9} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case V10 of E1 -> (fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> V26 end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), begin (V34 = (V31(V32))), (V33(V34)) end end end end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), ((V38(V40))(V39)) end end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V42(V43))), (V44(V43)) end end end end}, fun (V45) -> fun (V46) -> V46 end end}, ((((((((V11(V12))(V13))(V14))(V15))(V16))(V17))(V18))(V19)))) end end end end end end end end} end((fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V47) -> (V48(V49, V50, V51, V52, V53, V54, V55, V56)) end end end end end end end end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 8"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun7'(V0, V1, V2, V3, V4, V5, V6, V7) -> case case V7 of E2 when (erlang:'is_function'(E2, 7)) -> (fun (V8) -> {'Idris.Prelude.Types.Just', V8} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of E1 -> (fun (V10) -> {'Idris.Prelude.Types.Right', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> V24 end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), begin (V32 = (V29(V30))), (V31(V32)) end end end end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), ((V36(V38))(V37)) end end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V40(V41))), (V42(V41)) end end end end}, fun (V43) -> fun (V44) -> V44 end end}, (((((((V10(V11))(V12))(V13))(V14))(V15))(V16))(V17)))) end end end end end end end} end((fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V45) -> (V46(V47, V48, V49, V50, V51, V52, V53)) end end end end end end end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 7"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun6'(V0, V1, V2, V3, V4, V5, V6) -> case case V6 of E2 when (erlang:'is_function'(E2, 6)) -> (fun (V7) -> {'Idris.Prelude.Types.Just', V7} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of E1 -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, ((((((V9(V10))(V11))(V12))(V13))(V14))(V15)))) end end end end end end} end((fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V43) -> (V44(V45, V46, V47, V48, V49, V50)) end end end end end end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 6"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun5'(V0, V1, V2, V3, V4, V5) -> case case V5 of E2 when (erlang:'is_function'(E2, 5)) -> (fun (V6) -> {'Idris.Prelude.Types.Just', V6} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of E1 -> (fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, (((((V8(V9))(V10))(V11))(V12))(V13)))) end end end end end} end((fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V41) -> (V42(V43, V44, V45, V46, V47)) end end end end end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 5"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun4'(V0, V1, V2, V3, V4) -> case case V4 of E2 when (erlang:'is_function'(E2, 4)) -> (fun (V5) -> {'Idris.Prelude.Types.Just', V5} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of E1 -> (fun (V7) -> {'Idris.Prelude.Types.Right', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, ((((V7(V8))(V9))(V10))(V11)))) end end end end} end((fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V39) -> (V40(V41, V42, V43, V44)) end end end end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 4"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun3'(V0, V1, V2, V3) -> case case V3 of E2 when (erlang:'is_function'(E2, 3)) -> (fun (V4) -> {'Idris.Prelude.Types.Just', V4} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of E1 -> (fun (V6) -> {'Idris.Prelude.Types.Right', fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, (((V6(V7))(V8))(V9)))) end end end} end((fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V37) -> (V38(V39, V40, V41)) end end end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 3"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun2'(V0, V1, V2) -> case case V2 of E2 when (erlang:'is_function'(E2, 2)) -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of E1 -> (fun (V5) -> {'Idris.Prelude.Types.Right', fun (V6) -> fun (V7) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, ((V5(V6))(V7)))) end end} end((fun (V36) -> fun (V37) -> fun (V38) -> fun (V35) -> (V36(V37, V38)) end end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 2"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun1'(V0, V1) -> case case V1 of E2 when (erlang:'is_function'(E2, 1)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of E1 -> (fun (V4) -> {'Idris.Prelude.Types.Right', fun (V5) -> ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, (V4(V5)))) end} end((fun (V34) -> fun (V35) -> fun (V33) -> (V34(V35)) end end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 1"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fun0'(V0) -> case case V0 of E2 when (erlang:'is_function'(E2, 0)) -> (fun (V1) -> {'Idris.Prelude.Types.Just', V1} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V2 of E1 -> (fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Erlang.IO':'un--erlTryCatch'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, V3))} end((fun (V32) -> fun (V31) -> (V32()) end end(E1)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a function of arity 0"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fail'(V0, V1) -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', V0}}.
'un--exact'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(case (V2 =:= V1) of 'false' -> 0; _ -> 1 end, 1)) of 1 -> {'Idris.Prelude.Types.Right', V1}; 0 -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected the value to match exactly"/utf8>>}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--errorTuple'(V0, V1) -> ('dn--un--map_Functor_ErlDecoder'(fun (V2) -> case V2 of {E0, E1} -> (fun (V3, V4) -> V4 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> ('un--tuple2'(fun (V6) -> ('un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'error', V6)) end, V0, V5)) end, V1)).
'un--erlDecodeMay'(V0, V1, V2) -> case ('un--erlDecode'(V0, V1, V2)) of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Nothing'} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--erlDecodeDef'(V0, V1, V2, V3) -> case ('un--erlDecode'(V0, V2, V3)) of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> V4 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> (V1()) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--erlDecode'(V0, V1, V2) -> (V1(V2)).
'un--double'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a double"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_float'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--cons'(V0, V1, V2) -> case case V2 of [E3 | E4] -> (fun (V5) -> {'Idris.Prelude.Types.Just', V5} end((fun (V3, V4) -> [V3 | V4] end(E3, E4)))); _ -> {'Idris.Prelude.Types.Nothing'} end of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of [E1 | E2] -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V0(V7)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'((V1(V8)), fun (V10) -> {'Idris.Prelude.Types.Right', [V9 | V10]} end)) end)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a cons value"/utf8>>}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--codepoint'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a char"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (((erlang:'is_integer'(E0)) andalso (E0 >= 0)) andalso (E0 =< 1114111)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--charlist'(V0) -> ('dn--un-->>=_Monad_ErlDecoder'(fun (V1) -> ('un--list'(fun (V2) -> ('un--codepoint'(V2)) end, V1)) end, fun (V3) -> fun (V4) -> ('dn--un--pure_Applicative_ErlDecoder'(V3, V4)) end end, V0)).
'un--bool'() -> ('dn--un--<|>_Alternative_ErlDecoder'(('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--map_Functor_ErlDecoder'(V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--pure_Applicative_ErlDecoder'(V6, V7)) end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--<*>_Applicative_ErlDecoder'(V10, V11, V12)) end end end end end}, fun (V13) -> ('un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'true', V13)) end, fun (V14) -> ('dn--un--pure_Applicative_ErlDecoder'(1, V14)) end)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('dn--un--map_Functor_ErlDecoder'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--pure_Applicative_ErlDecoder'(V21, V22)) end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--<*>_Applicative_ErlDecoder'(V25, V26, V27)) end end end end end}, fun (V28) -> ('un--exact'({'Idris.Erlang.Types.ETErlAtom'}, 'false', V28)) end, fun (V29) -> ('dn--un--pure_Applicative_ErlDecoder'(0, V29)) end)) end)).
'un--atom'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected an atom"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_atom'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--anyMap'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a map"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_map'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--anyList'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Left', {'Idris.Erlang.Decode.Error', <<"Expected a list"/utf8>>}} end, fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', V1} end end, case V0 of E0 when (erlang:'is_list'(E0)) -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end)).
'un--any'(V0) -> {'Idris.Prelude.Types.Right', V0}.
'un--.='(V0, V1) -> {'Idris.Erlang.Decode.MkDecoderMapEntry', V0, V1}.
